{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SJTUOJ\u89e3\u7b54\u96c6 \u4ecb\u7ecd SJTUOJ \u662f\u7531\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66ACM\u73ed\u5f00\u53d1\u7684\u4e00\u4e2a\u5728\u7ebf\u7684\u8bc4\u6d4b\u7cfb\u7edf\u3002\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u9898\u76ee\u4f9b\u4f7f\u7528\u8005\u7ec3\u4e60\u7f16\u7a0b\u80fd\u529b\u4e0e\u7b97\u6cd5\u6280\u5de7\u3002\u53e6\u5916\u7cfb\u7edf\u4e5f\u6709\u5b8c\u5584\u7684\u6bd4\u8d5b\u4e0e\u4f5c\u4e1a\u7cfb\u7edf\u4f9b\u65e5\u5e38\u6559\u5b66\u3001\u6bd4\u8d5b\u9009\u62d4\u6240\u7528\u3002\u7528\u6237\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7684\u7531\u7a0b\u5e8f\u8bed\u8a00\u5b9e\u73b0\u7684\u89e3\u6cd5\uff0c\u7531\u8bc4\u6d4b\u7cfb\u7edf\u8fdb\u884c\u81ea\u52a8\u5730\u8bc4\u6d4b\u4e4b\u540e\u7ed9\u51fa\u8bc4\u6d4b\u7684\u7ed3\u679c\u3002 \u8fd9\u4e9b\u9898\u76ee\u5bf9\u4e8e\u4f7f\u7528\u8005\u7684\u5b66\u4e60\u662f\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u3002\u4f46\u7531\u4e8e\u8bc4\u6d4b\u7cfb\u7edf\u7684\u5c01\u95ed\u6027\uff0c\u6709\u4e9b\u540c\u5b66\u5728\u81ea\u4e3b\u7ec3\u4e60\u4e2d\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u800c\u4e14\u96be\u4ee5\u627e\u5230\u9898\u76ee\u7684\u63d0\u793a\u4e0e\u89e3\u7b54\u3002\u56e0\u6b64\u6211\u4eec\u5236\u4f5c\u4e86\u8fd9\u6837\u4e00\u4e2a\u89e3\u7b54\u96c6\u7684\u7f51\u9875\u3002\u8fd9\u4e2a\u7f51\u9875\u6536\u96c6\u4e86\u76ee\u524d\u5728Github\u4e0a\u516c\u5f00\u5b58\u50a8\u7684SJTUOJ\u4e2d\u9898\u76ee\u7684\u89e3\u7b54\uff0c\u4f9b\u7f51\u7ad9\u7684\u4f7f\u7528\u8005\u53c2\u8003\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u4e0b\u9762\u7684\u4f7f\u7528\u524d\u6ce8\u610f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u70b9\u51fb \u7d22\u5f15 \u6765\u67e5\u627e\u4e60\u9898\u4e86\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u4e0a\u65b9\u7684 \u641c\u7d22\u6846 \u5185\u76f4\u63a5\u641c\u7d22\u3002\u7d22\u5f15\u9875\u9762\u4e5f\u540c\u65f6\u5728\u7535\u8111\u7aef\u8bbf\u95ee\u7684\u5de6\u8fb9\u680f\u548c\u624b\u673a\u7aef\u8bbf\u95ee\u7684\u5de6\u4e0a\u65b9\u7684\u83dc\u5355\u6309\u94ae\u5185\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u6536\u85cf\u7d22\u5f15\u9875\u9762\u3002 \u5982\u679c\u559c\u6b22\u7684\u8bdd\uff0c\u6233\u53f3\u4e0a\u89d2\u7684\u5b58\u50a8\u5e93\u8d85\u94fe\u63a5\uff0c\u7ed9\u6211\u4e00\u4e2astar\u5427\uff01\uff08\u9003 \u4f7f\u7528\u524d\u6ce8\u610f \u76f4\u63a5\u6284\u88ad\u5bf9\u4e8e\u63d0\u5347\u80fd\u529b\u6ca1\u6709\u4efb\u4f55\u7684\u597d\u5904\u3002\u77e5\u8bc6\u53ea\u6709\u61c2\u4e86\u624d\u662f\u81ea\u5df1\u7684\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u5411\u6765\u5bf9\u4e8e\u5b66\u672f\u4e0d\u7aef\u884c\u4e3a\u4fdd\u6301\u96f6\u5bb9\u5fcd\u3002\u5728\u4f5c\u4e1a\u3001\u8003\u8bd5\u4e0e\u6bd4\u8d5b\u4e2d\uff0c\u6284\u88ad\u4f1a\u5bfc\u81f4\u4f60\u53d7\u5230 \u7559\u6821\u67e5\u770b \u4ee5\u4e0a\u7684\u5904\u5206\u3002 \u8fd9\u4e9b\u89e3\u7b54\u6765\u6e90\u4e8egithub\u4e0a\u516c\u5f00\u7684\u5b58\u50a8\u5e93\uff0c\u7f51\u7ad9\u7684\u5185\u5bb9\u5b8c\u5168\u4f7f\u7528MkDocs\u81ea\u52a8\u751f\u6210\uff0c\u672c\u7f51\u7ad9\u4f1a\u5c3d\u91cf\u7b5b\u9009\uff0c\u4f46\u5bf9\u4e8e\u5176\u6b63\u786e\u6027\u4e0d\u505a\u4efb\u4f55\u7684\u6697\u793a\u4e0e\u4fdd\u8bc1\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u5f04\u6e05\u695a\u601d\u8def\u540e\u81ea\u884c\u590d\u73b0\u3002\u5982\u679c\u4f60\u53d1\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u3002 OJ\u4e0a\u7684\u9898\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4f1a\u6709\u5927\u91cf\u7684\u66f4\u65b0\uff0c\u8fd9\u91cc\u7684\u7b54\u6848\u4e0d\u80fd\u786e\u4fdd\u8986\u76d6\u5168\u90e8\u7684\u9898\u76ee\u3002\u5982\u679c\u4f60\u6709\u89e3\u7b54\u5e0c\u671b\u5206\u4eab\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u94fe\u63a5\u53d1\u81f3OJ@victrid.dev\u3002 \u5982\u679c\u4f60\u662f\u67d0\u4e2a\u88ab\u5f15\u7528\u7684\u5b58\u50a8\u5e93\u7684\u521b\u5efa\u8005\uff0c\u5e76\u4e0d\u5e0c\u671b\u5c06\u81ea\u5df1\u7684\u89e3\u7b54\u5c55\u793a\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u8054\u7cfb\u5220\u9664\u4e8b\u5b9c\u3002\u7531\u4e8egithub\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u4f5c\u8005\u7684\u771f\u5b9e\u59d3\u540d\uff0c\u8bf7\u60a8\u8c05\u89e3\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5f00\u6e90\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u5b58\u50a8\u5e93 \u627e\u5230\u5b83\u7684\u6e90\u6587\u4ef6\u3002","title":"\u4e3b\u9875"},{"location":"#sjtuoj","text":"","title":"SJTUOJ\u89e3\u7b54\u96c6"},{"location":"#_1","text":"SJTUOJ \u662f\u7531\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66ACM\u73ed\u5f00\u53d1\u7684\u4e00\u4e2a\u5728\u7ebf\u7684\u8bc4\u6d4b\u7cfb\u7edf\u3002\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u9898\u76ee\u4f9b\u4f7f\u7528\u8005\u7ec3\u4e60\u7f16\u7a0b\u80fd\u529b\u4e0e\u7b97\u6cd5\u6280\u5de7\u3002\u53e6\u5916\u7cfb\u7edf\u4e5f\u6709\u5b8c\u5584\u7684\u6bd4\u8d5b\u4e0e\u4f5c\u4e1a\u7cfb\u7edf\u4f9b\u65e5\u5e38\u6559\u5b66\u3001\u6bd4\u8d5b\u9009\u62d4\u6240\u7528\u3002\u7528\u6237\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7684\u7531\u7a0b\u5e8f\u8bed\u8a00\u5b9e\u73b0\u7684\u89e3\u6cd5\uff0c\u7531\u8bc4\u6d4b\u7cfb\u7edf\u8fdb\u884c\u81ea\u52a8\u5730\u8bc4\u6d4b\u4e4b\u540e\u7ed9\u51fa\u8bc4\u6d4b\u7684\u7ed3\u679c\u3002 \u8fd9\u4e9b\u9898\u76ee\u5bf9\u4e8e\u4f7f\u7528\u8005\u7684\u5b66\u4e60\u662f\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u3002\u4f46\u7531\u4e8e\u8bc4\u6d4b\u7cfb\u7edf\u7684\u5c01\u95ed\u6027\uff0c\u6709\u4e9b\u540c\u5b66\u5728\u81ea\u4e3b\u7ec3\u4e60\u4e2d\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u800c\u4e14\u96be\u4ee5\u627e\u5230\u9898\u76ee\u7684\u63d0\u793a\u4e0e\u89e3\u7b54\u3002\u56e0\u6b64\u6211\u4eec\u5236\u4f5c\u4e86\u8fd9\u6837\u4e00\u4e2a\u89e3\u7b54\u96c6\u7684\u7f51\u9875\u3002\u8fd9\u4e2a\u7f51\u9875\u6536\u96c6\u4e86\u76ee\u524d\u5728Github\u4e0a\u516c\u5f00\u5b58\u50a8\u7684SJTUOJ\u4e2d\u9898\u76ee\u7684\u89e3\u7b54\uff0c\u4f9b\u7f51\u7ad9\u7684\u4f7f\u7528\u8005\u53c2\u8003\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u4e0b\u9762\u7684\u4f7f\u7528\u524d\u6ce8\u610f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u70b9\u51fb \u7d22\u5f15 \u6765\u67e5\u627e\u4e60\u9898\u4e86\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u4e0a\u65b9\u7684 \u641c\u7d22\u6846 \u5185\u76f4\u63a5\u641c\u7d22\u3002\u7d22\u5f15\u9875\u9762\u4e5f\u540c\u65f6\u5728\u7535\u8111\u7aef\u8bbf\u95ee\u7684\u5de6\u8fb9\u680f\u548c\u624b\u673a\u7aef\u8bbf\u95ee\u7684\u5de6\u4e0a\u65b9\u7684\u83dc\u5355\u6309\u94ae\u5185\u3002\u4f60\u53ef\u4ee5\u76f4\u63a5\u6536\u85cf\u7d22\u5f15\u9875\u9762\u3002 \u5982\u679c\u559c\u6b22\u7684\u8bdd\uff0c\u6233\u53f3\u4e0a\u89d2\u7684\u5b58\u50a8\u5e93\u8d85\u94fe\u63a5\uff0c\u7ed9\u6211\u4e00\u4e2astar\u5427\uff01\uff08\u9003","title":"\u4ecb\u7ecd"},{"location":"#_2","text":"\u76f4\u63a5\u6284\u88ad\u5bf9\u4e8e\u63d0\u5347\u80fd\u529b\u6ca1\u6709\u4efb\u4f55\u7684\u597d\u5904\u3002\u77e5\u8bc6\u53ea\u6709\u61c2\u4e86\u624d\u662f\u81ea\u5df1\u7684\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u5411\u6765\u5bf9\u4e8e\u5b66\u672f\u4e0d\u7aef\u884c\u4e3a\u4fdd\u6301\u96f6\u5bb9\u5fcd\u3002\u5728\u4f5c\u4e1a\u3001\u8003\u8bd5\u4e0e\u6bd4\u8d5b\u4e2d\uff0c\u6284\u88ad\u4f1a\u5bfc\u81f4\u4f60\u53d7\u5230 \u7559\u6821\u67e5\u770b \u4ee5\u4e0a\u7684\u5904\u5206\u3002 \u8fd9\u4e9b\u89e3\u7b54\u6765\u6e90\u4e8egithub\u4e0a\u516c\u5f00\u7684\u5b58\u50a8\u5e93\uff0c\u7f51\u7ad9\u7684\u5185\u5bb9\u5b8c\u5168\u4f7f\u7528MkDocs\u81ea\u52a8\u751f\u6210\uff0c\u672c\u7f51\u7ad9\u4f1a\u5c3d\u91cf\u7b5b\u9009\uff0c\u4f46\u5bf9\u4e8e\u5176\u6b63\u786e\u6027\u4e0d\u505a\u4efb\u4f55\u7684\u6697\u793a\u4e0e\u4fdd\u8bc1\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u5f04\u6e05\u695a\u601d\u8def\u540e\u81ea\u884c\u590d\u73b0\u3002\u5982\u679c\u4f60\u53d1\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u3002 OJ\u4e0a\u7684\u9898\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4f1a\u6709\u5927\u91cf\u7684\u66f4\u65b0\uff0c\u8fd9\u91cc\u7684\u7b54\u6848\u4e0d\u80fd\u786e\u4fdd\u8986\u76d6\u5168\u90e8\u7684\u9898\u76ee\u3002\u5982\u679c\u4f60\u6709\u89e3\u7b54\u5e0c\u671b\u5206\u4eab\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u94fe\u63a5\u53d1\u81f3OJ@victrid.dev\u3002 \u5982\u679c\u4f60\u662f\u67d0\u4e2a\u88ab\u5f15\u7528\u7684\u5b58\u50a8\u5e93\u7684\u521b\u5efa\u8005\uff0c\u5e76\u4e0d\u5e0c\u671b\u5c06\u81ea\u5df1\u7684\u89e3\u7b54\u5c55\u793a\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u8054\u7cfb\u5220\u9664\u4e8b\u5b9c\u3002\u7531\u4e8egithub\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u4f5c\u8005\u7684\u771f\u5b9e\u59d3\u540d\uff0c\u8bf7\u60a8\u8c05\u89e3\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5f00\u6e90\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u5b58\u50a8\u5e93 \u627e\u5230\u5b83\u7684\u6e90\u6587\u4ef6\u3002","title":"\u4f7f\u7528\u524d\u6ce8\u610f"},{"location":"about/","text":"About OJ answer sheet version 1.0.1 Website delivered via GitHub and CloudFlare. version history 1.0.0-beta-dev The earliest first edition. 1.0.0-beta Added description at the head. Added the name at title. Fixed bugs. 1.0.1-beta Set empty links to red. Add a \"star\" button to each solution. Removed \"jump to original\" and fit it into description. 1.0.1 Beta flag removed. Added about and add page. Fixed internal link","title":"\u5173\u4e8e"},{"location":"about/#about","text":"OJ answer sheet version 1.0.1 Website delivered via GitHub and CloudFlare.","title":"About"},{"location":"about/#version-history","text":"1.0.0-beta-dev The earliest first edition. 1.0.0-beta Added description at the head. Added the name at title. Fixed bugs. 1.0.1-beta Set empty links to red. Add a \"star\" button to each solution. Removed \"jump to original\" and fit it into description. 1.0.1 Beta flag removed. Added about and add page. Fixed internal link","title":"version history"},{"location":"add/","text":"Oops! \u8fd8\u6ca1\u6709\u4eba\u7ed9\u51fa\u89e3\u7b54\uff01 \u592a\u96be\u4e86\uff0c\u52a9\u6559\u8001\u5e08\u4eec\u7f16\u9898\u7684\u901f\u5ea6\uff0c\u5df2\u7ecf\u8d85\u8fc7\u4e86\u89e3\u9898\u7684\u901f\u5ea6\uff01 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5df2\u7ecfAC\u4e86\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u8bf7\u5c06\u5b58\u50a8\u5e93\u7684\u94fe\u63a5\u63d0\u4ea4\u5230OJ@victrid.dev\uff0c\u4e0e\u5927\u5bb6\u4e00\u8d77\u5206\u4eab\u4f60\u7684\u9898\u89e3\uff01 \u4e3a\u4ec0\u4e48\u8981\u91c7\u7528\u5728\u7ebf\u5b58\u50a8\u5e93\uff08Repository\uff09\u7684\u5f62\u5f0f\uff1f \u5982\u679c\u4f60\u81ea\u5df1\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5b58\u50a8\u4ee3\u7801\u7684\u5728\u7ebf\u5b58\u50a8\u5e93\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u7248\u672c\u7ba1\u7406\u548c\u4ee3\u7801\u5206\u4eab\u7684\u65b9\u5f0f\u3002\u53ea\u9700\u8981\u4f60\u81ea\u5df1git push\u5230\u5728\u7ebf\u5b58\u50a8\u5e93\uff0c\u5176\u4ed6\u4ebagit pull\u4e00\u4e0b\uff0c\u6240\u6709\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u540c\u6b65\u66f4\u65b0\u3002\u6211\u4eec\u7684SJTUOJ\u89e3\u7b54\u96c6\u662f\u5b8c\u5168\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u66f4\u591a\u7684\u65f6\u95f4\u3002\uff08\u4ea4\u5927\u7684\u5b66\u751f\uff0c\u5728\u65f6\u95f4\u7684\u95ee\u9898\u4e0a\u662f\u4e0d\u5bb9\u59a5\u534f\u7684\uff018:) \uff09 \u6211\u4e0d\u4f1a\u7528Git\u5440 Read The F***ing Manuals!","title":"\u6dfb\u52a0"},{"location":"add/#oops","text":"\u592a\u96be\u4e86\uff0c\u52a9\u6559\u8001\u5e08\u4eec\u7f16\u9898\u7684\u901f\u5ea6\uff0c\u5df2\u7ecf\u8d85\u8fc7\u4e86\u89e3\u9898\u7684\u901f\u5ea6\uff01 \u4f46\u662f\uff0c\u5982\u679c\u4f60\u5df2\u7ecfAC\u4e86\uff0c\u5982\u679c\u53ef\u4ee5\u7684\u8bdd\uff0c\u8bf7\u5c06\u5b58\u50a8\u5e93\u7684\u94fe\u63a5\u63d0\u4ea4\u5230OJ@victrid.dev\uff0c\u4e0e\u5927\u5bb6\u4e00\u8d77\u5206\u4eab\u4f60\u7684\u9898\u89e3\uff01","title":"Oops! \u8fd8\u6ca1\u6709\u4eba\u7ed9\u51fa\u89e3\u7b54\uff01"},{"location":"add/#repository","text":"\u5982\u679c\u4f60\u81ea\u5df1\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5b58\u50a8\u4ee3\u7801\u7684\u5728\u7ebf\u5b58\u50a8\u5e93\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u662f\u4e00\u79cd\u975e\u5e38\u597d\u7684\u7248\u672c\u7ba1\u7406\u548c\u4ee3\u7801\u5206\u4eab\u7684\u65b9\u5f0f\u3002\u53ea\u9700\u8981\u4f60\u81ea\u5df1git push\u5230\u5728\u7ebf\u5b58\u50a8\u5e93\uff0c\u5176\u4ed6\u4ebagit pull\u4e00\u4e0b\uff0c\u6240\u6709\u7684\u6587\u4ef6\u90fd\u4f1a\u88ab\u540c\u6b65\u66f4\u65b0\u3002\u6211\u4eec\u7684SJTUOJ\u89e3\u7b54\u96c6\u662f\u5b8c\u5168\u81ea\u52a8\u8fdb\u884c\u7684\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u66f4\u591a\u7684\u65f6\u95f4\u3002\uff08\u4ea4\u5927\u7684\u5b66\u751f\uff0c\u5728\u65f6\u95f4\u7684\u95ee\u9898\u4e0a\u662f\u4e0d\u5bb9\u59a5\u534f\u7684\uff018:) \uff09","title":"\u4e3a\u4ec0\u4e48\u8981\u91c7\u7528\u5728\u7ebf\u5b58\u50a8\u5e93\uff08Repository\uff09\u7684\u5f62\u5f0f\uff1f"},{"location":"add/#git","text":"Read The F***ing Manuals!","title":"\u6211\u4e0d\u4f1a\u7528Git\u5440"},{"location":"nr/","text":"Index Page a.deleted:link {color:#CE0000} a.deleted:visited {color:#CE0000} a.deleted:hover {color:#EA0000} a:deleted:active {color:#FF0000} 1000+ 1000+ 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100+ 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200+ 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300+ 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400+ 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500+ 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600+ 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700+ 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800+ 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900+ 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000+ 2000+ 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100+ 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200+ 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300+ 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400+ 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500+ 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600+ 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700+ 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800+ 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900+ 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000+ 3000+ 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100+ 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200+ 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300+ 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400+ 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500+ 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600+ 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700+ 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799 3800+ 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899 3900+ 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000+ 4000+ 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099 4100+ 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 4200+ 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299 4300+ 4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400+ 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500+ 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600+ 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 4627 4628 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 4640 4641 4642 4643 4644 4645 4646 4647 4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 4690 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700+ 4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800+ 4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900+ 4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 4997 4998 4999","title":"\u7d22\u5f15"},{"location":"nr/#index-page","text":"a.deleted:link {color:#CE0000} a.deleted:visited {color:#CE0000} a.deleted:hover {color:#EA0000} a:deleted:active {color:#FF0000}","title":"Index Page"},{"location":"nr/#1000","text":"","title":"1000+"},{"location":"nr/#1000_1","text":"1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099","title":"1000+"},{"location":"nr/#1100","text":"1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199","title":"1100+"},{"location":"nr/#1200","text":"1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299","title":"1200+"},{"location":"nr/#1300","text":"1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399","title":"1300+"},{"location":"nr/#1400","text":"1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499","title":"1400+"},{"location":"nr/#1500","text":"1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599","title":"1500+"},{"location":"nr/#1600","text":"1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699","title":"1600+"},{"location":"nr/#1700","text":"1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799","title":"1700+"},{"location":"nr/#1800","text":"1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899","title":"1800+"},{"location":"nr/#1900","text":"1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999","title":"1900+"},{"location":"nr/#2000","text":"","title":"2000+"},{"location":"nr/#2000_1","text":"2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099","title":"2000+"},{"location":"nr/#2100","text":"2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199","title":"2100+"},{"location":"nr/#2200","text":"2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299","title":"2200+"},{"location":"nr/#2300","text":"2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399","title":"2300+"},{"location":"nr/#2400","text":"2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499","title":"2400+"},{"location":"nr/#2500","text":"2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599","title":"2500+"},{"location":"nr/#2600","text":"2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699","title":"2600+"},{"location":"nr/#2700","text":"2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799","title":"2700+"},{"location":"nr/#2800","text":"2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899","title":"2800+"},{"location":"nr/#2900","text":"2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999","title":"2900+"},{"location":"nr/#3000","text":"","title":"3000+"},{"location":"nr/#3000_1","text":"3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099","title":"3000+"},{"location":"nr/#3100","text":"3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199","title":"3100+"},{"location":"nr/#3200","text":"3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299","title":"3200+"},{"location":"nr/#3300","text":"3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399","title":"3300+"},{"location":"nr/#3400","text":"3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499","title":"3400+"},{"location":"nr/#3500","text":"3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599","title":"3500+"},{"location":"nr/#3600","text":"3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699","title":"3600+"},{"location":"nr/#3700","text":"3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799","title":"3700+"},{"location":"nr/#3800","text":"3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899","title":"3800+"},{"location":"nr/#3900","text":"3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999","title":"3900+"},{"location":"nr/#4000","text":"","title":"4000+"},{"location":"nr/#4000_1","text":"4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099","title":"4000+"},{"location":"nr/#4100","text":"4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199","title":"4100+"},{"location":"nr/#4200","text":"4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299","title":"4200+"},{"location":"nr/#4300","text":"4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399","title":"4300+"},{"location":"nr/#4400","text":"4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499","title":"4400+"},{"location":"nr/#4500","text":"4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599","title":"4500+"},{"location":"nr/#4600","text":"4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 4627 4628 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 4640 4641 4642 4643 4644 4645 4646 4647 4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 4690 4691 4692 4693 4694 4695 4696 4697 4698 4699","title":"4600+"},{"location":"nr/#4700","text":"4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799","title":"4700+"},{"location":"nr/#4800","text":"4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899","title":"4800+"},{"location":"nr/#4900","text":"4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 4997 4998 4999","title":"4900+"},{"location":"nr/1000/","text":"1000 A+B Problem \u9898\u76ee Description \u4f5c\u4e3a\u6240\u6709 Online Judge \u7684\u4f20\u7edf\u9898\u76ee\uff0c\u4f60\u53ea\u9700\u8bfb\u4e24\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u5373\u53ef\uff0c\u4fdd\u8bc1\u8f93\u5165\u7684\u6570\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc71000\u3002 Input Format \u4e00\u884c,\u4e24\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570A,B\u3002 Output Format \u4e00\u4e2a\u6570A+B\u3002 Sample Input 3 2 Sample Output 5 FineArtz's solution Star /* A+B Problem */ #include <iostream> int main(){ int a, b; std::cin >> a >> b; std::cout << a + b << std::endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { cout << \"Hello world!\" << endl; return 0; }","title":"1000"},{"location":"nr/1000/#1000-ab-problem","text":"\u9898\u76ee","title":"1000 A+B Problem"},{"location":"nr/1000/#fineartzs-solution-star","text":"/* A+B Problem */ #include <iostream> int main(){ int a, b; std::cin >> a >> b; std::cout << a + b << std::endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1000/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { cout << \"Hello world!\" << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1001/","text":"1001 \u4e8c\u54e5\u6458\u82f9\u679c \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e8c\u54e5\u5e73\u65e5\u559c\u6b22\u81ea\u5df1\u79cd\u4e00\u4e9b\u4e1c\u897f\uff0c\u5e76\u4ee5\u6b64\u4e3a\u5199\u7a0b\u5e8f\u548c\u770b\u7535\u5f71\u4e4b\u5916\u7684\u6700\u5927\u7231\u597d\u3002\u6700\u8fd1\uff0c\u4e8c\u54e5\u79cd\u7684\u4e00\u68f5\u82f9\u679c\u6811\u5230\u4e86\u91c7\u6458\u7684\u65f6\u5019\uff0c\u4f46\u662f\u7531\u4e8e\u4e8c\u54e5\u8eab\u9ad8\u7684\u9650\u5236\uff0c\u6709\u4e9b\u82f9\u679c\u592a\u9ad8\u6458\u4e0d\u5230\u3002\u4e8e\u662f\u4e8c\u54e5\u501f\u6765\u4e86\u4e00\u4e2a\u51f3\u5b50\uff0c\u8e29\u5728\u4e0a\u9762\u53ef\u4ee5\u6458\u5230\u66f4\u591a\u7684\u82f9\u679c\u3002 \u4e8c\u54e5\u662f\u4e00\u4e2a\u61d2\u4e8e\u884c\u52a8\u7684\u4eba\uff0c\u4ed6\u60f3\u5728\u6458\u82f9\u679c\u4e4b\u524d\u77e5\u9053\u81ea\u5df1\u80fd\u6458\u5230\u591a\u5c11\u82f9\u679c\uff0c\u5982\u679c\u5b9e\u5728\u592a\u5c11\uff08\u82f9\u679c\u6811\u5f88\u8302\u76db\uff0c\u4e3b\u8981\u662f\u7531\u4e8e\u8eab\u9ad8\u539f\u56e0\uff09\uff0c\u4ed6\u5b81\u53ef\u5750\u5728\u6811\u4e0b\u7b49\u82f9\u679c\u81ea\u5df1\u6389\u4e0b\u6765\u7838\u5230\u5934\u4e0a\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5171\u6709\u4e24\u884c\u3002 \u7b2c1\u884c\u67093\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u4e8c\u54e5\u7684\u8eab\u9ad8\u3001\u51f3\u5b50\u7684\u9ad8\u5ea6\u548c\u82f9\u679c\u7684\u4e2a\u6570n\u3002 \u7b2c2\u884c\u6709n\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u6bcf\u4e2a\u82f9\u679c\u7684\u9ad8\u5ea6\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570m\uff0c\u8868\u793a\u4e8c\u54e5\u6700\u591a\u80fd\u6458\u5230\u7684\u82f9\u679c\u7684\u4e2a\u6570\u4e3am\u3002 \u8bf4\u660e \u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff1a\u9ad8\u5ea6\u4e3a1000\u4ee5\u4e0b\u7684\u6b63\u6574\u6570\uff0c\u82f9\u679c\u7684\u4e2a\u6570\\(1 \\leq n \\leq 1000\\)\u3002 Sample Input 177 40 10 180 151 152 193 168 255 278 303 211 217 Sample Output 7 VictriD's solution Star #include <iostream> using namespace std; int main() { int sh, dh, h, n, app; int m = 0; cin >> sh >> dh >> n; h = sh + dh; for (int i = 0; i < n; i++) { cin >> app; if (app <= h) m++; } cout << m; return 0; } FineArtz's solution Star /* \u4e8c\u54e5\u6458\u82f9\u679c */ #include <iostream> using namespace std; int main(){ int h, l, n; cin >> h >> l >> n; int sum = 0; for (int i = 1; i <= n; ++i){ int t; cin >> t; if (h + l >= t) ++sum; } cout << sum << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int height, height_1, height_2, n, sum = 0; int temp = 0; cin >> height_1 >> height_2 >> n; height = height_1 + height_2; for(int i = 0; i < n; ++i) { cin >> temp; if (temp <= height) ++sum; } cout << sum; return 0; }","title":"1001"},{"location":"nr/1001/#1001","text":"\u9898\u76ee","title":"1001 \u4e8c\u54e5\u6458\u82f9\u679c"},{"location":"nr/1001/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int sh, dh, h, n, app; int m = 0; cin >> sh >> dh >> n; h = sh + dh; for (int i = 0; i < n; i++) { cin >> app; if (app <= h) m++; } cout << m; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1001/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u6458\u82f9\u679c */ #include <iostream> using namespace std; int main(){ int h, l, n; cin >> h >> l >> n; int sum = 0; for (int i = 1; i <= n; ++i){ int t; cin >> t; if (h + l >= t) ++sum; } cout << sum << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1001/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int height, height_1, height_2, n, sum = 0; int temp = 0; cin >> height_1 >> height_2 >> n; height = height_1 + height_2; for(int i = 0; i < n; ++i) { cin >> temp; if (temp <= height) ++sum; } cout << sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1002/","text":"1002 \u4e8c\u54e5\u79cd\u82b1\u751f \u9898\u76ee Description \u4e8c\u54e5\u5728\u81ea\u5df1\u7684\u540e\u82b1\u56ed\u91cc\u79cd\u4e86\u4e00\u4e9b\u82b1\u751f\uff0c\u4e5f\u5feb\u5230\u4e86\u6536\u83b7\u7684\u65f6\u5019\u4e86\u3002\u8fd9\u7247\u82b1\u751f\u5730\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3aL\u3001\u5bbd\u5ea6\u4e3aW\u7684\u77e9\u5f62\uff0c\u6bcf\u4e2a\u5355\u4f4d\u9762\u79ef\u4e0a\u82b1\u751f\u4ea7\u91cf\u90fd\u662f\u72ec\u7acb\u7684\u3002\u4ed6\u60f3\u77e5\u9053\uff0c\u5bf9\u4e8e\u67d0\u4e2a\u6307\u5b9a\u7684\u533a\u57df\u5927\u5c0f\uff0c\u5728\u8fd9\u4e48\u5927\u7684\u77e9\u5f62\u533a\u57df\u5185\uff0c\u82b1\u751f\u7684\u4ea7\u91cf\u6700\u5927\u4f1a\u662f\u591a\u5c11\u3002 Input Format \u7b2c1\u884c\u67092\u4e2a\u6574\u6570\uff0c\u957f\u5ea6L\u548c\u5bbd\u5ea6W\u3002 \u7b2c2\u884c\u81f3\u7b2cL+1\u884c\uff0c\u6bcf\u884c\u6709W\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5bf9\u5e94\u7684\u5355\u4f4d\u9762\u79ef\u4e0a\u7684\u82b1\u751f\u4ea7\u91cfA\uff08 \\( 0 \\leq A<10 \\) \uff09\u3002 \u7b2cL+2\u884c\u67092\u4e2a\u6574\u6570\uff0c\u5206\u522b\u662f\u6307\u5b9a\u7684\u533a\u57df\u5927\u5c0f\u7684\u957f\u5ea6a\u548c\u5bbd\u5ea6b\u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6574\u6570m\uff0c\u8868\u793a\u5728\u6307\u5b9a\u5927\u5c0f\u7684\u533a\u57df\u5185\uff0c\u82b1\u751f\u6700\u5927\u4ea7\u91cf\u4e3am\u3002 Sample Input 4 5 1 2 3 4 5 6 7 8 0 0 0 9 2 2 3 3 0 0 0 1 3 3 Sample Output 38 \u6837\u4f8b\u89e3\u91ca \u5de6\u4e0a\u89d2\uff1a38 = (1+2+3) + (6+7+8) + (0+9+2) \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff1a \\( 1 \\leq L,W \\leq 100 \\)\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff1a \\( 1 \\leq L,W \\leq 1000 \\)\u3002 \u5168\u90e8\u533a\u57df\u5927\u5c0f\u6ee1\u8db3\uff1a\\( 1 \\leq a \\leq L \uff0c1 \\leq b \\leq W \\) \u3002 VictriD's solution Star //1002 rewrite cf FineArtz #include <iostream> using namespace std; int main() { int m, n; cin >> m >> n; //DynMat Name:Summat //Lines:m+1 rows:n+1 int **Summat = new int *[m + 1]; for (int i = 0; i < m + 1; i++) *(Summat + i) = new int[n + 1](); int *Summat_cfg = new int(m + 1); //End of Dynmat. int getnum; for (int i = 1; i <= m; i++) for (int j = 1; j <= n; j++) { cin >> getnum; Summat[i][j] = getnum + Summat[i - 1][j] + Summat[i][j - 1] - Summat[i - 1][j - 1]; } int l, h; cin >> l >> h; int max = 0; int total = 0; for (int i = 0; i < m + 1 - l; i++) for (int j = 0; j < n + 1 - h; j++) { total = (Summat[i + l][j + h] + Summat[i][j] - Summat[i + l][j] - Summat[i][j + h]); max = total > max ? total : max; } cout << max; //Release DynMat //Name:Summat for (int i = 0; i < *Summat_cfg; i++) delete[] * (Summat + i); delete[] Summat; delete Summat_cfg; //End of Release. return 0; } FineArtz's solution Star /* \u4e8c\u54e5\u79cd\u82b1\u751f */ #include <iostream> using namespace std; int sum[1005][1005] = {0}; int main(){ int m, n, t; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } int a, b, ans = 0; cin >> a >> b; for (int i = a; i <= m; ++i) for (int j = b; j <= n; ++j) ans = max(ans, sum[i][j] - sum[i - a][j] - sum[i][j - b] + sum[i - a][j - b]); cout << ans << endl; return 0; } Callmeink's solution Star #include<iostream> using namespace std; int main() { int n,m,x,y,ans,sum; int a[1005][1005],f[1005][1005] ; cin >> n >> m; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) cin >> a[i][j]; cin >> x >> y; for (int i=1;i<=n;i++) f[0][i] = 0; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) f[i][j] = f[i-1][j] + a[i][j]; ans = 0; for (int i=1;i<=n-x+1;i++) { sum = 0; for (int k=1;k<=y;k++) sum += f[i+x-1][k] - f[i-1][k]; if (sum > ans) ans = sum; for (int j=2;j<=m-y+1;j++) { sum += f[i+x-1][j+y-1]-f[i-1][j+y-1]-(f[i+x-1][j-1]-f[i-1][j-1]); //cout << i << ' ' << j << ' ' << sum << endl; if (sum > ans) ans = sum; } //cout << \"ans=\" << ans << endl; } cout << ans << endl; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int L, W; cin >> L >> W; //int corn[1001][1001] = {}; int **corn = NULL, **pre = NULL; corn = new int *[L + 1]; pre = new int *[L + 1]; pre[0] = new int [W + 1]{0}; for (int i = 1; i <= L; ++i) { corn[i] = new int[W + 1]; pre[i] = new int[W + 1]; pre[i][0] = 0; } for (int i = 1; i <= L; ++i) for (int j = 1; j <= W; ++j) { cin >> corn[i][j]; pre[i][j] = corn[i][j] + pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]; } int length, width; cin >> length >> width; int max = 0; int sum = 0; for (int i = length; i <= L; ++i) for (int j = width; j <= W; ++j) { sum = pre[i][j] - pre[i - length][j] - pre[i][j - width] + pre[i - length][j - width]; if (sum > max) max = sum; } /*for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; for (int k = i; k <= i + length - 1; ++k) for (int l = j; l <= j + width - 1; ++l) sum += corn[k][l]; if (sum > max) max = sum; }*/ /*int temp_head = 0, temp = 0; for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; if (i == 1 && j == 1) { for (int k = 1; k <= length; ++k) for (int l = 1; l <= width; ++l) temp += corn[k][l]; max = temp_head = temp; } else if (j == 1) { for (int l = 1; l <= width; ++l) { temp_head = temp_head - corn[i - 1][l] + corn[i + length - 1][l]; } temp = temp_head; if (temp > max) max = temp; } else { for (int k = i; k <= i + length - 1; ++k) temp = temp - corn[k][j - 1] + corn[k][j + width - 1]; if (temp > max) max = temp; } }*/ cout << max; for (int i = 1; i <= L; ++i) delete [] corn[i]; delete [] corn; return 0; }","title":"1002"},{"location":"nr/1002/#1002","text":"\u9898\u76ee","title":"1002 \u4e8c\u54e5\u79cd\u82b1\u751f"},{"location":"nr/1002/#victrids-solution-star","text":"//1002 rewrite cf FineArtz #include <iostream> using namespace std; int main() { int m, n; cin >> m >> n; //DynMat Name:Summat //Lines:m+1 rows:n+1 int **Summat = new int *[m + 1]; for (int i = 0; i < m + 1; i++) *(Summat + i) = new int[n + 1](); int *Summat_cfg = new int(m + 1); //End of Dynmat. int getnum; for (int i = 1; i <= m; i++) for (int j = 1; j <= n; j++) { cin >> getnum; Summat[i][j] = getnum + Summat[i - 1][j] + Summat[i][j - 1] - Summat[i - 1][j - 1]; } int l, h; cin >> l >> h; int max = 0; int total = 0; for (int i = 0; i < m + 1 - l; i++) for (int j = 0; j < n + 1 - h; j++) { total = (Summat[i + l][j + h] + Summat[i][j] - Summat[i + l][j] - Summat[i][j + h]); max = total > max ? total : max; } cout << max; //Release DynMat //Name:Summat for (int i = 0; i < *Summat_cfg; i++) delete[] * (Summat + i); delete[] Summat; delete Summat_cfg; //End of Release. return 0; }","title":"VictriD's solution Star"},{"location":"nr/1002/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u79cd\u82b1\u751f */ #include <iostream> using namespace std; int sum[1005][1005] = {0}; int main(){ int m, n, t; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } int a, b, ans = 0; cin >> a >> b; for (int i = a; i <= m; ++i) for (int j = b; j <= n; ++j) ans = max(ans, sum[i][j] - sum[i - a][j] - sum[i][j - b] + sum[i - a][j - b]); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1002/#callmeinks-solution-star","text":"#include<iostream> using namespace std; int main() { int n,m,x,y,ans,sum; int a[1005][1005],f[1005][1005] ; cin >> n >> m; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) cin >> a[i][j]; cin >> x >> y; for (int i=1;i<=n;i++) f[0][i] = 0; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) f[i][j] = f[i-1][j] + a[i][j]; ans = 0; for (int i=1;i<=n-x+1;i++) { sum = 0; for (int k=1;k<=y;k++) sum += f[i+x-1][k] - f[i-1][k]; if (sum > ans) ans = sum; for (int j=2;j<=m-y+1;j++) { sum += f[i+x-1][j+y-1]-f[i-1][j+y-1]-(f[i+x-1][j-1]-f[i-1][j-1]); //cout << i << ' ' << j << ' ' << sum << endl; if (sum > ans) ans = sum; } //cout << \"ans=\" << ans << endl; } cout << ans << endl; }","title":"Callmeink's solution Star"},{"location":"nr/1002/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int L, W; cin >> L >> W; //int corn[1001][1001] = {}; int **corn = NULL, **pre = NULL; corn = new int *[L + 1]; pre = new int *[L + 1]; pre[0] = new int [W + 1]{0}; for (int i = 1; i <= L; ++i) { corn[i] = new int[W + 1]; pre[i] = new int[W + 1]; pre[i][0] = 0; } for (int i = 1; i <= L; ++i) for (int j = 1; j <= W; ++j) { cin >> corn[i][j]; pre[i][j] = corn[i][j] + pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]; } int length, width; cin >> length >> width; int max = 0; int sum = 0; for (int i = length; i <= L; ++i) for (int j = width; j <= W; ++j) { sum = pre[i][j] - pre[i - length][j] - pre[i][j - width] + pre[i - length][j - width]; if (sum > max) max = sum; } /*for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; for (int k = i; k <= i + length - 1; ++k) for (int l = j; l <= j + width - 1; ++l) sum += corn[k][l]; if (sum > max) max = sum; }*/ /*int temp_head = 0, temp = 0; for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; if (i == 1 && j == 1) { for (int k = 1; k <= length; ++k) for (int l = 1; l <= width; ++l) temp += corn[k][l]; max = temp_head = temp; } else if (j == 1) { for (int l = 1; l <= width; ++l) { temp_head = temp_head - corn[i - 1][l] + corn[i + length - 1][l]; } temp = temp_head; if (temp > max) max = temp; } else { for (int k = i; k <= i + length - 1; ++k) temp = temp - corn[k][j - 1] + corn[k][j + width - 1]; if (temp > max) max = temp; } }*/ cout << max; for (int i = 1; i <= L; ++i) delete [] corn[i]; delete [] corn; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1003/","text":"1003 \u4e8c\u54e5\u517b\u7ec6\u83cc \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e8c\u54e5\u4e0d\u4ec5\u79cd\u82f9\u679c\u548c\u82b1\u751f\uff0c\u8fd8\u517b\u4e86\u5f88\u591a\u7ec6\u83cc\u3002\u4e8c\u54e5\u7684\u7ec6\u83cc\u57f9\u517b\u76bf\u6210\u65b9\u683c\u5f62\uff0c\u8fb9\u957f\u4e3aL\u3002\u957f\u671f\u57f9\u517b\u540e\uff0c\u4e8c\u54e5\u53d1\u73b0\u4e86\u7ec6\u83cc\u7e41\u6b96\u7684\u89c4\u5f8b\uff1a\u6700\u521d\u6bcf\u4e2a\u683c\u5b50\u91cc\u7684\u7ec6\u83cc\u53ca\u5176\u540e\u4ee3\u90fd\u4f1a\u72ec\u7acb\u7e41\u6b96\uff0c\u6bcf\u6b21\u7e41\u6b96\u90fd\u4f1a\u5728\u5176\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\u91cc\u4ea7\u751f\u65b0\u7684\u7ec6\u83cc\uff0c\u800c\u5df2\u7ecf\u5b58\u5728\u7684\u7ec6\u83cc\u5728\u57f9\u517b\u76bf\u5145\u6ee1\u7ec6\u83cc\u4e4b\u524d\u90fd\u4e0d\u4f1a\u6b7b\u4ea1\u3002\u53e6\u5916\uff0c\u6709\u4e00\u4e9b\u683c\u5b50\u91cc\u53ef\u80fd\u8fd8\u6709\u6297\u751f\u7d20\uff0c\u7ec6\u83cc\u5728\u6709\u6297\u751f\u7d20\u7684\u683c\u5b50\u91cc\u65e0\u6cd5\u7e41\u6b96\u3002 \u4e8c\u54e5\u4e8e\u662f\u53d1\u660e\u4e86\u4e00\u4e2a\u6e38\u620f\uff1a\u53d6\u4e00\u4e2a\u65b0\u7684\u57f9\u517b\u76bf\uff0c\u5728\u67d0\u4e9b\u683c\u5b50\u91cc\u653e\u5165\u7ec6\u83cc\u6216\u6297\u751f\u7d20\uff0c\u7136\u540e\u89c2\u5bdf\u7ec6\u83cc\u4e0d\u65ad\u7e41\u6b96\u76f4\u81f3\u5145\u6ee1\u6574\u4e2a\u57f9\u517b\u76bf\u7684\u6240\u6709\u6ca1\u6709\u6297\u751f\u7d20\u7684\u683c\u5b50\u3002\u4e0d\u8fc7\u4e8c\u54e5\u5df2\u7ecf\u5bf9\u8fd9\u4e2a\u6e38\u620f\u538c\u70e6\u4e86\uff0c\u4ed6\u73b0\u5728\u53ea\u60f3\u77e5\u9053\u7ecf\u8fc7\u591a\u5c11\u8f6e\u7e41\u6b96\u540e\uff0c\u7ec6\u83cc\u4f1a\u5145\u6ee1\u6574\u4e2a\u57f9\u517b\u76bf\uff08\u4e0d\u7b97\u6709\u6297\u751f\u7d20\u7684\u683c\u5b50\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c1\u884c\u67091\u4e2a\u6574\u6570\uff0c\u8fb9\u957fL\u3002 \u7b2c2\u884c\u81f3\u7b2cL+1\u884c\uff0c\u6bcf\u884c\u6709L\u4e2a\u6574\u6570\uff0c\u53d6\u503c\u4e3a0\u30011\u62162\u30020\u8868\u793a\u683c\u5b50\u91cc\u6700\u521d\u6ca1\u6709\u7ec6\u83cc\uff0c1\u8868\u793a\u683c\u5b50\u91cc\u6700\u521d\u6709\u7ec6\u83cc\uff0c2\u8868\u793a\u683c\u5b50\u91cc\u6700\u521d\u6709\u6297\u751f\u7d20\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570m\uff0c\u8868\u793a\u7ecf\u8fc7m\u8f6e\u7e41\u6b96\u540e\uff0c\u7ec6\u83cc\u4f1a\u5145\u6ee1\u6574\u4e2a\u57f9\u517b\u76bf\uff08\u4e0d\u7b97\u6709\u6297\u751f\u7d20\u7684\u683c\u5b50\uff09\u3002 \u8bf4\u660e \u3010\u6837\u4f8b\u89e3\u91ca\u3011 \u7b2c\u4e00\u8f6e\u7e41\u6b96\uff1a 2 1 0 1 1 1 0 1 0 \u7b2c\u4e8c\u8f6e\u7e41\u6b96\uff1a 2 1 1 1 1 1 1 1 1 \u3010\u6570\u636e\u8303\u56f4\u3011 \u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff1a\\(1 \\leq L \\leq 100 \\) \uff0c\u4fdd\u8bc1\u6700\u7ec8\u80fd\u591f\u5145\u6ee1\u57f9\u517b\u76bf\uff08\u4e0d\u7b97\u6709\u6297\u751f\u7d20\u7684\u683c\u5b50\uff09\u3002 Sample Input 3 2 0 0 0 1 0 0 0 0 Sample Output 2 FineArtz's solution Star /* \u4e8c\u54e5\u517b\u7ec6\u83cc */ #include <iostream> #include <deque> using namespace std; int a[105][105], l; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int bfs(){ int ans = 0; deque<int> nowx, nowy; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (a[i][j] == 1){ nowx.push_back(i); nowy.push_back(j); } while (!nowx.empty()){ ++ans; int len = nowx.size(); for (int nowc = 0; nowc < len; ++nowc){ for (int d = 0; d < 4; ++d){ int x = nowx[nowc] + dx[d]; int y = nowy[nowc] + dy[d]; if (a[x][y] == 0){ a[x][y] = 1; nowx.push_back(x); nowy.push_back(y); } } } for (int i = 1; i <= len; ++i){ nowx.pop_front(); nowy.pop_front(); } } return ans - 1; } int main(){ cin >> l; for (int i = 0; i <= 104; ++i) for (int j = 0; j <= 104; ++j) a[i][j] = 2; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> a[i][j]; cout << bfs() << endl; return 0; } Callmeink's solution Star #include <iostream> using namespace std; int main() { int l; int a[105][105]; cin >> l; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) cin >> a[i][j]; bool flag = true; int ans = 0; while (flag) { flag = false; ans++; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 1) { if (i-1 >=1 && a[i-1][j] == 0) {a[i-1][j] = 3;flag = true;} if (i+1 <=l && a[i+1][j] == 0) {a[i+1][j] = 3;flag = true;} if (j-1 >=1 && a[i][j-1] == 0) {a[i][j-1] = 3;flag = true;} if (j+1 <=l && a[i][j+1] == 0) {a[i][j+1] = 3;flag = true;} } for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 3) a[i][j] = 1; //cout << \"flag =\" << flag << endl; //cout << \"ans =\" << ans <<endl; //for(int i=1;i<=l;i++) //{ // for(int j=1;j<=l;j++) cout << a[i][j] << ' '; // cout << endl; //} } ans--; cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int L = 0; bool perfect = true; cin >> L; int **box = NULL, **box_new = NULL; box = new int *[L + 2]; box_new = new int *[L + 2]; for (int i = 0; i <= L + 1; ++i) { box[i] = new int [L + 2]{0}; box_new[i] = new int [L + 2]{0}; } /*int box[102][102], box_new[102][102]; for (int i = 0; i <= L + 1; ++i) for (int j = 0; j <= L + 1; ++j) box[i][j] = box_new[i][j] = 0;*/ for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { cin >> box[i][j]; if (box[i][j] == 0) perfect = false; } bool flag = true; int sum = 0; if (!perfect) { do { ++sum; flag = false; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { if (box[i][j] != 0) { box_new[i][j] = box[i][j]; } else if(box[i - 1][j] != 1 && box [i + 1][j] != 1 && box[i][j - 1] != 1 && box[i][j + 1] != 1) { box_new[i][j] = 0; flag = true; } else box_new[i][j] = 1; } if (!flag) break; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) box[i][j] = box_new[i][j]; }while(flag); } cout << sum; return 0; }","title":"1003"},{"location":"nr/1003/#1003","text":"\u9898\u76ee","title":"1003 \u4e8c\u54e5\u517b\u7ec6\u83cc"},{"location":"nr/1003/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u517b\u7ec6\u83cc */ #include <iostream> #include <deque> using namespace std; int a[105][105], l; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int bfs(){ int ans = 0; deque<int> nowx, nowy; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (a[i][j] == 1){ nowx.push_back(i); nowy.push_back(j); } while (!nowx.empty()){ ++ans; int len = nowx.size(); for (int nowc = 0; nowc < len; ++nowc){ for (int d = 0; d < 4; ++d){ int x = nowx[nowc] + dx[d]; int y = nowy[nowc] + dy[d]; if (a[x][y] == 0){ a[x][y] = 1; nowx.push_back(x); nowy.push_back(y); } } } for (int i = 1; i <= len; ++i){ nowx.pop_front(); nowy.pop_front(); } } return ans - 1; } int main(){ cin >> l; for (int i = 0; i <= 104; ++i) for (int j = 0; j <= 104; ++j) a[i][j] = 2; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> a[i][j]; cout << bfs() << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1003/#callmeinks-solution-star","text":"#include <iostream> using namespace std; int main() { int l; int a[105][105]; cin >> l; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) cin >> a[i][j]; bool flag = true; int ans = 0; while (flag) { flag = false; ans++; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 1) { if (i-1 >=1 && a[i-1][j] == 0) {a[i-1][j] = 3;flag = true;} if (i+1 <=l && a[i+1][j] == 0) {a[i+1][j] = 3;flag = true;} if (j-1 >=1 && a[i][j-1] == 0) {a[i][j-1] = 3;flag = true;} if (j+1 <=l && a[i][j+1] == 0) {a[i][j+1] = 3;flag = true;} } for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 3) a[i][j] = 1; //cout << \"flag =\" << flag << endl; //cout << \"ans =\" << ans <<endl; //for(int i=1;i<=l;i++) //{ // for(int j=1;j<=l;j++) cout << a[i][j] << ' '; // cout << endl; //} } ans--; cout << ans << endl; return 0; }","title":"Callmeink's solution Star"},{"location":"nr/1003/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int L = 0; bool perfect = true; cin >> L; int **box = NULL, **box_new = NULL; box = new int *[L + 2]; box_new = new int *[L + 2]; for (int i = 0; i <= L + 1; ++i) { box[i] = new int [L + 2]{0}; box_new[i] = new int [L + 2]{0}; } /*int box[102][102], box_new[102][102]; for (int i = 0; i <= L + 1; ++i) for (int j = 0; j <= L + 1; ++j) box[i][j] = box_new[i][j] = 0;*/ for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { cin >> box[i][j]; if (box[i][j] == 0) perfect = false; } bool flag = true; int sum = 0; if (!perfect) { do { ++sum; flag = false; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { if (box[i][j] != 0) { box_new[i][j] = box[i][j]; } else if(box[i - 1][j] != 1 && box [i + 1][j] != 1 && box[i][j - 1] != 1 && box[i][j + 1] != 1) { box_new[i][j] = 0; flag = true; } else box_new[i][j] = 1; } if (!flag) break; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) box[i][j] = box_new[i][j]; }while(flag); } cout << sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1004/","text":"1004 \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 \u9898\u76ee Description \u53e4\u5e0c\u814a\u6709\u4e2a\u5173\u4e8e\u897f\u897f\u5f17\u65af\u7684\u795e\u8bdd\uff1a \u897f\u897f\u5f17\u65af\u88ab\u4f17\u795e\u5224\u51b3\u63a8\u8fd0\u4e00\u5757\u77f3\u5934\u81f3\u5c71\u9876\u3002\u7531\u4e8e\u5de8\u77f3\u672c\u8eab\u7684\u91cd\u91cf\uff0c\u5b83\u88ab\u63a8\u5230\u5c71\u9876\u5374\u53c8\u603b\u8981\u6eda\u4e0b\u5c71\u811a\u3002\u4e8e\u662f\u897f\u897f\u5f17\u65af\u53c8\u5f97\u628a\u77f3\u5757\u63a8\u4e0a\u5c71\u53bb\u3002\u5982\u6b64\u53cd\u590d\uff0c\u6c38\u65e0\u6b62\u5883\uff0c\u6ca1\u6709\u5c3d\u5934\u3002\u4f17\u795e\u8ba4\u4e3a\uff0c\u8ba9\u897f\u897f\u5f17\u65af\u670d\u8fd9\u6c38\u6052\u7684\u52b3\u5f79\u662f\u6700\u4e25\u9177\u7684\u60e9\u7f5a\u3002 \u4e8c\u54e5\u88ab\u62bc\u5165\u5730\u72f1\u3002\u4ed6\u88ab\u4f17\u795e\u5224\u51b3\u625b\u7740\u4e00\u5757\u5de8\u7816\u5728\u5c71\u8def\u4e0a\u8d70\uff0c\u518d\u539f\u8def\u8fd4\u56de\uff0c\u5982\u6b64\u53cd\u590d\uff0c\u6ca1\u6709\u5c3d\u5934\u3002 \u4f17\u795e\u89c4\u5b9a\u4e8c\u54e5\u72ec\u81ea\u8d70\u5c71\u8def\u7684\u65f6\u95f4\u4e0d\u5f97\u8d85\u8fc7M\u79d2( \\( 1 \\leq M \\leq 10,000,000 \\) )\u3002\u6574\u6761\u5c71\u8def\u88ab\u5212\u5206\u6210T\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u5c0f\u6bb5( \\( 1 \\leq T \\leq 100,000 \\) )\uff0c\u5e76\u4e14\uff0c\u4f17\u795e\u7528Si\u8868\u793a\u7b2ci\u4e2a\u5c0f\u6bb5\u7684\u8def\u51b5\u3002Si\u4e3au,f,d\u8fd93\u4e2a\u5b57\u6bcd\u4e4b\u4e00\uff0c\u5b83\u4eec\u5206\u522b\u8868\u793a\u7b2ci\u4e2a\u5c0f\u6bb5\u662f\u4e0a\u5761\u3001\u5e73\u5730\u3001\u4e0b\u5761\u3002 \u4e8c\u54e5\u8981\u82b1U\u79d2( \\( 1 \\leq U \\leq 100 \\) )\u624d\u80fd\u8d70\u5b8c\u4e00\u6bb5\u4e0a\u5761\u8def\uff0c\u8d70\u5b8c\u4e00\u6bb5\u5e73\u5730\u7684\u8017\u65f6\u662fF\u79d2( \\( 1 \\leq F \\leq 100 \\) )\uff0c\u8d70\u5b8c\u4e00\u6bb5\u4e0b\u5761\u8def\u8981\u82b1D\u79d2( \\( 1 \\leq D \\leq 100 \\) )\u3002\u6ce8\u610f\uff0c\u6cbf\u5c71\u8def\u539f\u8def\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u539f\u672c\u662f\u4e0a\u5761\u7684\u8def\u6bb5\u53d8\u6210\u4e86\u4e0b\u5761\u8def\uff0c\u539f\u672c\u662f\u4e0b\u5761\u7684\u8def\u6bb5\u53d8\u6210\u4e86\u4e0a\u5761\u8def\u3002 \u4e8c\u54e5\u5bf9\u751f\u6d3b\u5145\u6ee1\u6fc0\u60c5\uff0c\u4f46\u4ed6\u906d\u53d7\u7740\u96be\u4ee5\u7528\u8a00\u8bed\u5c3d\u8ff0\u7684\u975e\u4eba\u6298\u78e8\uff1a\u75db\u82e6\u626d\u66f2\u7684\u8138\uff0c\u88ab\u5de8\u7816\u6b7b\u6b7b\u538b\u4f4f\u7684\u6296\u52a8\u7684\u80a9\u8180\uff0c\u6cbe\u6ee1\u6ce5\u571f\u7684\u53cc\u811a\uff0c\u5455\u5fc3\u6ca5\u8840\uff0c\u4e0d\u505c\u7684\u5de5\u4f5c\u3002\u8fd9\u662f\u5178\u578b\u7684\u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0\u3002\u8d1d\u591a\u82ac\uff0c\u6b4c\u5fb7\uff0c\u53d4\u672c\u534e\uff0c\u4f60\u624d\uff0c\u8fd8\u6709\u9ad8\u65af\uff0c\u7231\u56e0\u65af\u5766\u7684\u547d\u8fd0\uff0c\u90fd\u662f\u5178\u578b\u7684\u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0\uff0c\u65e0\u4e00\u4f8b\u5916\u3002 \u4f17\u795e\u60f3\u8ba9\u4e8c\u54e5\u80fd\u5728\u6309\u65f6\u8fd4\u56de\u7684\u524d\u63d0\u4e0b\uff0c\u8d70\u6700\u8fdc\u7684\u8def\u3002\u6240\u4ee5\u4f17\u795e\u5411\u77e5\u9053\u4ed6\u6700\u591a\u80fd\u5728\u8fd9\u6761\u5c71\u8def\u4e0a\u8d70\u591a\u8fdc\u3002 Input Format \u7b2c1\u884c\uff1a5\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff1aM,T,U,F,D\u3002 \u7b2c2..T+1\u884c\uff1a\u7b2ci+1\u884c\u6709\u4e00\u4e2a\u5b57\u6bcdSi\uff0c\u63cf\u8ff0\u7b2ci\u6bb5\u5c71\u8def\u7684\u8def\u51b5\u3002 Output Format \u4e00\u884c\uff0c\u6709\u4e00\u4e2a\u6574\u6570\u4e3a\u4e8c\u54e5\u5728\u6309\u65f6\u56de\u5230\u8d77\u70b9\u524d\u63d0\u4e0b\uff0c\u6700\u591a\u80fd\u8dd1\u5230\u591a\u8fdc\u3002 Sample Input 13 5 3 2 1 u f u d f Sample Output 3 \u6837\u4f8b\u89e3\u91ca \u4f17\u795e\u89c4\u5b9a\u4e8c\u54e5\u7684\u6700\u5927\u8017\u65f6\u4e3a13\u79d2\uff0c\u4ed6\u8dd1\u6b65\u7684\u5c71\u8def\u4e00\u5171\u88ab\u5212\u5206\u62105\u6bb5\u3002\u4e8c\u54e5\u8d70\u5b8c\u4e00\u6bb5\u4e0a\u5761\u7684\u8017\u65f6\u4e3a3\u79d2\uff0c\u5e73\u5730\u4e3a2\u79d2\uff0c\u4e0b\u5761\u4e3a1\u79d2\u3002 \u4e8c\u54e5\u8d70\u5b8c\u5c71\u8def\u7684\u524d3\u6bb5\uff0c\u7136\u540e\u8fd4\u56de\uff0c\u603b\u8017\u65f6\u4e3a3+2+3+1+2+1=12\u79d2\uff0c\u5982\u679c\u4ed6\u8dd1\u5f97\u66f4\u8fdc\uff0c\u5c31\u65e0\u6cd5\u6309\u65f6\u56de\u5230\u8d77\u70b9\u3002 VictriD's solution Star #include <iostream> using namespace std; int main() { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char c; int tf = 0, udt = U + D, fft = F + F; for (int i = 0; i < T; i++) { cin >> c; if (c != 'f') tf += udt; else tf += fft; if (tf > M) { cout << i; break; } } return 0; } FineArtz's solution Star /* \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 */ #include <iostream> using namespace std; int main(){ int m, t, u, f, d; cin >> m >> t >> u >> f >> d; char road; int NowTime = 0; for (int i = 0; i != t; ++i){ cin >> road; switch(road){ case 'u': case 'd': NowTime = NowTime + u + d; break; case 'f': NowTime += 2 * f; break; default: break; } if (NowTime > m){ cout << i << endl; return 0; } } cout << t << endl; return 0; } Callmeink's solution Star #include <iostream> using namespace std; int main() { int i,m,t,u,f,d; char ch; cin >> m >> t >> u >> f >> d; cin.get(); for(i=1;i<=t;i++) { cin.get(ch); cin.get(); if (ch == 'u' || ch == 'd') m -= (u+d); else m -= f + f; if (m < 0) { cout << i - 1 << endl; break; } } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char road[T]; for(int i = 0; i < T; ++i) cin >> road[i]; int sum = 0, far = 0; while(sum <= M && far < T) { if (road[far] == 'f') sum += 2 * F; else sum += U + D; ++far; } cout << far - 1; return 0; }","title":"1004"},{"location":"nr/1004/#1004","text":"\u9898\u76ee","title":"1004 \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0"},{"location":"nr/1004/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char c; int tf = 0, udt = U + D, fft = F + F; for (int i = 0; i < T; i++) { cin >> c; if (c != 'f') tf += udt; else tf += fft; if (tf > M) { cout << i; break; } } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1004/#fineartzs-solution-star","text":"/* \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 */ #include <iostream> using namespace std; int main(){ int m, t, u, f, d; cin >> m >> t >> u >> f >> d; char road; int NowTime = 0; for (int i = 0; i != t; ++i){ cin >> road; switch(road){ case 'u': case 'd': NowTime = NowTime + u + d; break; case 'f': NowTime += 2 * f; break; default: break; } if (NowTime > m){ cout << i << endl; return 0; } } cout << t << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1004/#callmeinks-solution-star","text":"#include <iostream> using namespace std; int main() { int i,m,t,u,f,d; char ch; cin >> m >> t >> u >> f >> d; cin.get(); for(i=1;i<=t;i++) { cin.get(ch); cin.get(); if (ch == 'u' || ch == 'd') m -= (u+d); else m -= f + f; if (m < 0) { cout << i - 1 << endl; break; } } return 0; }","title":"Callmeink's solution Star"},{"location":"nr/1004/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char road[T]; for(int i = 0; i < T; ++i) cin >> road[i]; int sum = 0, far = 0; while(sum <= M && far < T) { if (road[far] == 'f') sum += 2 * F; else sum += U + D; ++far; } cout << far - 1; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1005/","text":"1005 \u6570\u72ec \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u6570\u72ec\u6e38\u620f\uff0c\u5177\u4f53\u89c4\u5219\u5982\u4e0b\uff1a \u6bcf\u4e00\u884c\u90fd\u7528\u52301,2,3,4,5,6,7,8,9, \u4f4d\u7f6e\u4e0d\u9650\uff0c \u6bcf\u4e00\u5217\u90fd\u7528\u52301,2,3,4,5,6,7,8,9, \u4f4d\u7f6e\u4e0d\u9650\uff0c \u6bcf3*3\u7684\u683c\u5b50\uff08\u51719\u4e2a\u8fd9\u6837\u7684\u683c\u5b50\uff09\u90fd\u7528\u52301,2,3,4,5,6,7,8,9, \u4f4d\u7f6e\u4e0d\u9650\uff0c \u6e38\u620f\u8fc7\u7a0b\u5c31\u662f\u75281,2,3,4,5,6,7,8,9\u586b\u5145\u7a7a\u767d\uff0c\u5e76\u6ee1\u8db3\u6bcf\u884c\uff0c\u6bcf\u5217\uff0c\u6bcf\u4e2a\u4e5d\u5bab\u683c\u90fd\u7528\u52301,2,3,4,5,6,7,8,9\uff0c \u5982\u4e0b\u662f\u4e2a\u6b63\u786e\u7684sudoku: \u8f93\u5165\u683c\u5f0f \u8f93\u5165n\u4e2a\u6570\u72ec\uff0c\u4f60\u6765\u9a8c\u8bc1\u5b83\u662f\u5426\u8fdd\u53cd\u89c4\u5219\u3002 \u7b2c\u4e00\u884c\u4e3a\u6570\u72ec\u4e2a\u6570\uff0c\u7b2c\u4e8c\u884c\u5f00\u59cb\u4e3a\u7b2c\u4e00\u4e2a\u6570\u72ec\uff0c\u4e4b\u540e\u7b2c\u4e8c\u4e2a\uff0c\u81f3\u7b2cn\u4e2a\u3002 \u6ce8\u610f\uff1a\u6bcf\u4e2a\u6570\u72ec\u95f4\u6709\u4e2a\u56de\u8f66\u9694\u5f00\u3002 \u8f93\u51fa\u683c\u5f0f \u82e5\u6b63\u786e\u5219\u8f93\u51fa\"Right\",\u5426\u5219\u8f93\u51fa\"Wrong\", \u8f93\u51fa\u4e00\u4e2a\u6362\u4e00\u884c\u3002 \u8bf4\u660e 1<=n<=20(\u8f93\u5165\u7684\u6570\u72ec\u4e2a\u6570\uff09 \u4e0d\u8bba\u8f93\u5165\u7684\u6570\u72ec\u662f\u5426\u6b63\u786e\uff0c\u6570\u636e\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u90fd\u57281-9\u95f4\u3002 Sample Input 2 5 8 1 4 9 3 7 6 2 9 6 3 7 1 2 5 8 4 2 7 4 8 6 5 9 3 1 1 2 9 5 4 6 3 7 8 4 3 6 1 8 7 2 9 5 7 5 8 3 2 9 1 4 6 8 9 2 6 7 1 4 5 3 6 1 5 9 3 4 8 2 7 3 4 7 2 5 8 6 1 9 1 2 3 4 5 6 7 8 9 2 3 4 5 6 7 8 9 1 3 4 5 6 7 8 9 1 2 4 5 6 7 8 9 1 2 3 5 6 7 8 9 1 2 3 4 6 7 8 9 1 2 3 4 5 7 8 9 1 2 3 4 5 6 8 9 1 2 3 4 5 6 7 9 1 2 3 4 5 6 7 8 Sample Output Right Wrong FineArtz's solution Star /* \u6570\u72ec */ #include <iostream> using namespace std; inline short WhichBlock(int x, int y){ if (x <= 3){ if (y <= 3) return 1; if (y <= 6) return 2; if (y <= 9) return 3; } if (x <= 6){ if (y <= 3) return 4; if (y <= 6) return 5; if (y <= 9) return 6; } if (x <= 9){ if (y <= 3) return 7; if (y <= 6) return 8; if (y <= 9) return 9; } } int main(){ int k; cin >> k; for (int data = 0; data != k; ++data){ bool line[10][10] = {0}, row[10][10] = {0}, block[10][10] = {0}, flag = 1; short num = 0; for (int i = 0; i != 9; ++i){ for (int j = 0; j != 9; ++j){ cin >> num; if (line[i][num] || row[j][num] || block[WhichBlock(i + 1, j + 1)][num]){ flag = 0; //break; } line[i][num] = row[j][num] = block[WhichBlock(i + 1, j + 1)][num] = 1; } //if (!flag) break; } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; } Callmeink's solution Star #include <iostream> using namespace std; int a[10][10]; int main() { int t,a[10][10],i,j; cin >> t; for(int tt=1;tt<=t;tt++) { bool flag = true; for(i=1;i<=9;i++) for(j=1;j<=9;j++) cin >> a[i][j]; for(int i=1;i<=9;i++) { int sum1 = 0,sum2 = 1; for(int j=1;j<=9;j++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int j=1;j<=9;j++) { int sum1 = 0,sum2 = 1; for(int i=1;i<=9;i++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int i=1;i<=7;i+=3) for(int j=1;j<=7;j+=3) { int sum1 = 0,sum2 = 1; for (int x=i;x<=i+2;x++) for(int y=j;y<=j+2;y++) { sum1 += a[x][y]; sum2 *= a[x][y]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int n; cin >> n; bool status[21]; for(int i = 1; i <= n; ++i) { int sudoku[10][10]; bool flag = true; bool row[10][10] = {false}, col[10][10] = {false}, squ[4][4][10] = {false}; /*for(int j = 1; j <= 9; ++j) { //if (!flag) //break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag= false; //break; } if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; //break; } if (squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] == false) squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] = true; else { flag = false; //break; } } }*/ for(int j = 1; j <= 9; ++j) { //if (!flag) // break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int k = 1; k <= 9; ++k) { //if (!flag) // break; for (int j = 1; j <= 9; ++j) { if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int m = 1; m <= 3; ++m) { //if (!flag) // break; for (int n = 1; n <= 3; ++n) { // if (!flag) // break; for (int j = 1; j <= 3; ++j) { // if (!flag) // break; for (int k = 1; k <= 3; ++k) { if (squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] == false) squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] = true; else { flag = false; // break; } } } } } if (flag) status[i] = true; else status[i] = false; if (i != n) cin.get(); } for (int i = 1; i <= n; ++i) { if (status[i]) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"1005"},{"location":"nr/1005/#1005","text":"\u9898\u76ee","title":"1005 \u6570\u72ec"},{"location":"nr/1005/#fineartzs-solution-star","text":"/* \u6570\u72ec */ #include <iostream> using namespace std; inline short WhichBlock(int x, int y){ if (x <= 3){ if (y <= 3) return 1; if (y <= 6) return 2; if (y <= 9) return 3; } if (x <= 6){ if (y <= 3) return 4; if (y <= 6) return 5; if (y <= 9) return 6; } if (x <= 9){ if (y <= 3) return 7; if (y <= 6) return 8; if (y <= 9) return 9; } } int main(){ int k; cin >> k; for (int data = 0; data != k; ++data){ bool line[10][10] = {0}, row[10][10] = {0}, block[10][10] = {0}, flag = 1; short num = 0; for (int i = 0; i != 9; ++i){ for (int j = 0; j != 9; ++j){ cin >> num; if (line[i][num] || row[j][num] || block[WhichBlock(i + 1, j + 1)][num]){ flag = 0; //break; } line[i][num] = row[j][num] = block[WhichBlock(i + 1, j + 1)][num] = 1; } //if (!flag) break; } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1005/#callmeinks-solution-star","text":"#include <iostream> using namespace std; int a[10][10]; int main() { int t,a[10][10],i,j; cin >> t; for(int tt=1;tt<=t;tt++) { bool flag = true; for(i=1;i<=9;i++) for(j=1;j<=9;j++) cin >> a[i][j]; for(int i=1;i<=9;i++) { int sum1 = 0,sum2 = 1; for(int j=1;j<=9;j++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int j=1;j<=9;j++) { int sum1 = 0,sum2 = 1; for(int i=1;i<=9;i++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int i=1;i<=7;i+=3) for(int j=1;j<=7;j+=3) { int sum1 = 0,sum2 = 1; for (int x=i;x<=i+2;x++) for(int y=j;y<=j+2;y++) { sum1 += a[x][y]; sum2 *= a[x][y]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"Callmeink's solution Star"},{"location":"nr/1005/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int n; cin >> n; bool status[21]; for(int i = 1; i <= n; ++i) { int sudoku[10][10]; bool flag = true; bool row[10][10] = {false}, col[10][10] = {false}, squ[4][4][10] = {false}; /*for(int j = 1; j <= 9; ++j) { //if (!flag) //break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag= false; //break; } if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; //break; } if (squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] == false) squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] = true; else { flag = false; //break; } } }*/ for(int j = 1; j <= 9; ++j) { //if (!flag) // break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int k = 1; k <= 9; ++k) { //if (!flag) // break; for (int j = 1; j <= 9; ++j) { if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int m = 1; m <= 3; ++m) { //if (!flag) // break; for (int n = 1; n <= 3; ++n) { // if (!flag) // break; for (int j = 1; j <= 3; ++j) { // if (!flag) // break; for (int k = 1; k <= 3; ++k) { if (squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] == false) squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] = true; else { flag = false; // break; } } } } } if (flag) status[i] = true; else status[i] = false; if (i != n) cin.get(); } for (int i = 1; i <= n; ++i) { if (status[i]) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1006/","text":"1006 \u6c42\u548c\u6e38\u620f \u9898\u76ee Description \u77f3\u67f1\u4e0a\u6709\u4e00\u6392\u77f3\u5934\u952e\u76d8\uff0c\u6bcf\u4e2a\u952e\u4e0a\u6709\u4e00\u4e2a\u6574\u6570\u3002\u8bf7\u4f60\u5728\u952e\u76d8\u4e0a\u9009\u62e9\u4e24\u4e2a\u952e\uff0c\u4f7f\u8fd9\u4e24\u4e2a\u952e\u53ca\u5176\u4e4b\u95f4\u7684\u952e\u4e0a\u7684\u6570\u5b57\u548c\u6700\u5927\u3002\u5982\u679c\u8fd9\u4e2a\u6700\u5927\u7684\u548c\u4e0d\u4e3a\u6b63\uff0c\u5219\u8f93\u51fa\u201cGame Over\"\u3002 Input Format \u7b2c1\u884c\uff1a\u952e\u7684\u4e2a\u6570n\u3002 \u7b2c2..n+1\u884c\uff1a\u952e\u4e0a\u7684\u6570\u5b57\u6574\u6570 \\( a_i \\)\u3002 \\( -100 \\leq a_i \\leq 100 \\) \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0c\\( 2 \\leq n \\leq 1,000 \\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\( 2 \\leq n \\leq 1,000,000 \\) Output Format \u4e00\u884c\uff0c\u6700\u5927\u548c\u6216\u8005\u201dGame Over\"\u3002 Sample Input 5 3 -5 7 -2 8 Sample Output 13 Sample Input 3 -6 -9 -10 Sample Output Game Over Hints \u6570\u636e\u5f97\u5230\u4e86\u589e\u5f3a\uff01 \u611f\u8c22 \u66f9\u5b87 <caoyu601 at live.com> \u611f\u8c22 Rozc <i at rozc.farm> FineArtz's solution Star /* \u6c42\u548c\u6e38\u620f */ #include <iostream> using namespace std; int main(){ int n, t; cin >> n; cin >> t; int MinSum = t, CurSum = t, ans = t; for (int i = 2; i <= n; ++i){ cin >> t; CurSum += t; ans = max(ans, CurSum - MinSum); MinSum = min(MinSum, CurSum - t); } if (ans > 0) cout << ans << endl; else cout << \"Game Over\" << endl; //cout << ans << endl; return 0; } Callmeink's solution Star # include<iostream> using namespace std; int main(){ int a[1000001]; int n; cin >> n; for(int i=1;i<=n;i++) cin >> a[i]; int maxh=a[1]; int max=-1000; for(int i=2;i<=n;i++){ if (maxh<0) { if (maxh+a[i]>max) max=maxh+a[i]; maxh=a[i];} else { maxh += a[i]; if (maxh>max) max=maxh; } } if (max>0) cout << max; else cout << \"Game Over\" << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <climits> using namespace std; int MaxSum(int a[], int left, int right); int Max(int a, int b, int c); int main(void) { int n, sum = 0; cin >> n; int *a = NULL; a = new int[n]; //int a[100]; for (int i = 0; i < n; ++i) cin >> a[i]; sum = MaxSum(a, 0, n - 1); if (sum > 0) cout << sum; else cout << \"Game Over\"; return 0; } int MaxSum(int a[], int left, int right) { int center, max_left, max_right; int sum_left = 0, sum_right = 0; int sum_left_max = INT_MIN, sum_right_max = INT_MIN; if (left == right) return a[left] > 0 ? a[left] : 0; center = (left + right) / 2; max_left = MaxSum(a, left, center); max_right = MaxSum(a, center + 1, right); for (int i = center; i >= left; --i) { sum_left += a[i]; if (sum_left > sum_left_max) sum_left_max = sum_left; } for (int i = center + 1; i <= right; ++i) { sum_right += a[i]; if (sum_right > sum_right_max) sum_right_max = sum_right; } return Max(max_left, max_right, sum_left_max + sum_right_max); } int Max(int a, int b, int c) { if (a >= b && a >= c) return a; else if (b >= a && b >= c) return b; else return c; } WashSwang's solution Star #include <cstdio> #include <iostream> using namespace std; int last,cur,now=-500,maxn,n; int main() { scanf(\"%d%d\",&n,&last); for (int i=1;i<n;++i) { scanf(\"%d\",&cur); now=max(cur+now,cur+last); last=cur; if (now>maxn) maxn=now; } if (maxn) cout<<maxn<<endl; else cout<<\"Game Over\"<<endl; return 0; }","title":"1006"},{"location":"nr/1006/#1006","text":"\u9898\u76ee","title":"1006 \u6c42\u548c\u6e38\u620f"},{"location":"nr/1006/#fineartzs-solution-star","text":"/* \u6c42\u548c\u6e38\u620f */ #include <iostream> using namespace std; int main(){ int n, t; cin >> n; cin >> t; int MinSum = t, CurSum = t, ans = t; for (int i = 2; i <= n; ++i){ cin >> t; CurSum += t; ans = max(ans, CurSum - MinSum); MinSum = min(MinSum, CurSum - t); } if (ans > 0) cout << ans << endl; else cout << \"Game Over\" << endl; //cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1006/#callmeinks-solution-star","text":"# include<iostream> using namespace std; int main(){ int a[1000001]; int n; cin >> n; for(int i=1;i<=n;i++) cin >> a[i]; int maxh=a[1]; int max=-1000; for(int i=2;i<=n;i++){ if (maxh<0) { if (maxh+a[i]>max) max=maxh+a[i]; maxh=a[i];} else { maxh += a[i]; if (maxh>max) max=maxh; } } if (max>0) cout << max; else cout << \"Game Over\" << endl; return 0; }","title":"Callmeink's solution Star"},{"location":"nr/1006/#vvvvv1vs-solution-star","text":"#include <iostream> #include <climits> using namespace std; int MaxSum(int a[], int left, int right); int Max(int a, int b, int c); int main(void) { int n, sum = 0; cin >> n; int *a = NULL; a = new int[n]; //int a[100]; for (int i = 0; i < n; ++i) cin >> a[i]; sum = MaxSum(a, 0, n - 1); if (sum > 0) cout << sum; else cout << \"Game Over\"; return 0; } int MaxSum(int a[], int left, int right) { int center, max_left, max_right; int sum_left = 0, sum_right = 0; int sum_left_max = INT_MIN, sum_right_max = INT_MIN; if (left == right) return a[left] > 0 ? a[left] : 0; center = (left + right) / 2; max_left = MaxSum(a, left, center); max_right = MaxSum(a, center + 1, right); for (int i = center; i >= left; --i) { sum_left += a[i]; if (sum_left > sum_left_max) sum_left_max = sum_left; } for (int i = center + 1; i <= right; ++i) { sum_right += a[i]; if (sum_right > sum_right_max) sum_right_max = sum_right; } return Max(max_left, max_right, sum_left_max + sum_right_max); } int Max(int a, int b, int c) { if (a >= b && a >= c) return a; else if (b >= a && b >= c) return b; else return c; }","title":"vvvvv1v's solution Star"},{"location":"nr/1006/#washswangs-solution-star","text":"#include <cstdio> #include <iostream> using namespace std; int last,cur,now=-500,maxn,n; int main() { scanf(\"%d%d\",&n,&last); for (int i=1;i<n;++i) { scanf(\"%d\",&cur); now=max(cur+now,cur+last); last=cur; if (now>maxn) maxn=now; } if (maxn) cout<<maxn<<endl; else cout<<\"Game Over\"<<endl; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1007/","text":"1007 \u4e8c\u54e5\u9886\u5de5\u8d44 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e8c\u54e5\u5f53\u4e86\u591a\u5e74\u7684\u52a9\u6559\uff0c\u4eca\u5929\u7ec8\u4e8e\u8981\u53d1\u5de5\u8d44\u4e86\uff01\u4e8c\u54e5\u6b63\u5728\u9ad8\u5174\u4e4b\u9645\uff0c\u5f97\u77e5\u5de5\u8d44\u662f\u5206\u4e24\u90e8\u5206\u53d1\u653e\u7684\u3002\u7b2c\u4e00\u90e8\u5206\u662f\u8fd9\u5b66\u671f\u7684\u5de5\u8d44\uff0c\u53e6\u4e00\u90e8\u5206\u662f\u4e4b\u524d\u6240\u6709\u5b66\u671f\u7684\u5de5\u8d44\u603b\u548c\u3002\u800c\u9886\u53d6\u5de5\u8d44\u65f6\uff0c\u51fa\u7eb3\u5458\u4f1a\u95ee\u4e8c\u54e5\uff0c\u4e24\u90e8\u5206\u5de5\u8d44\u52a0\u5728\u4e00\u8d77\u662f\u591a\u5c11\uff0c\u5982\u679c\u4e8c\u54e5\u56de\u7b54\u9519\u4e86\uff0c\u5c31\u53ea\u80fd\u9886\u5230\u8fd9\u4e2a\u5b66\u671f\u7684\u5de5\u8d44\u4e4b\u524d\u6240\u6709\u5b66\u671f\u7684\u52b3\u52a8\u5c31\u767d\u8d39\u4e86\u3002 \u4e8c\u54e5\u4ece\u5c0f\u9053\u6d88\u606f\u5f97\u77e5\uff0c\u51fa\u7eb3\u5458\u662f\u4e2a\u5bf9\u6570\u5b57\u654f\u611f\u7684\u4eba\uff0c\u4e0d\u80fd\u6709\u4e00\u70b9\u5dee\u9519\uff0c\u6240\u4ee5\u4e8c\u54e5\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5e2e\u4ed6\u7b97\u51fa\u7cbe\u786e\u7684\u5de5\u8d44\u603b\u548c\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5171\u4e24\u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u5341\u8fdb\u5236\u8868\u793a\u7684\u5de5\u8d44\u91d1\u989d\uff08\u6ca1\u6709\u6b63\u8d1f\u53f7\uff0c\u5c0f\u6570\u70b9\u540e\u6709\u4e24\u4f4d\u6570\u5b57\uff09\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5171\u4e00\u884c\uff0c\u5373\u7cbe\u786e\u7684\u5de5\u8d44\u603b\u548c\uff08\u6ca1\u6709\u6b63\u8d1f\u53f7\uff0c\u5c0f\u6570\u70b9\u540e\u6709\u4e24\u4f4d\u6570\u5b57\uff09\u3002 \u8bf4\u660e \u5de5\u8d44\u91d1\u989d\u7684\u6709\u6548\u6570\u5b57\u4f4d\u6570\u4e0d\u8d85\u8fc7200\u4f4d\uff0c\u5e76\u4fdd\u8bc1\u6709\u5c0f\u6570\u70b9\u3002 Sample Input 123.45 543.21 Sample Output 666.66 FineArtz's solution Star /* \u4e8c\u54e5\u9886\u5de5\u8d44 */ #include <iostream> #include <string> using namespace std; const int MAXS = 205; class BigNum{ //friend friend BigNum operator +(const BigNum&, const BigNum&); friend ostream& operator <<(ostream&, const BigNum&); public: //constructor //BigNum(); BigNum(const string&); BigNum(const BigNum&); //operator //short& operator [](const int& x) { return data[x]; } // BigNum& operator =(const BigNum&); int GetLen() const { return length; } private: short data[MAXS]; int length; }; BigNum::BigNum(const string& s){ for (int i = 0; i != MAXS - 1; ++i) data[i] = 0; length = s.size() - 1; int i = s.size() - 1; data[1] = s[i--] - '0'; data[2] = s[i] - '0'; for (int j = 3; j <= length; ++j) data[j] = s[s.size() - j - 1] - '0'; } BigNum::BigNum(const BigNum& b){ length = b.length; for (int i = 0; i != MAXS; ++i) data[i] = b.data[i]; } ostream& operator <<(ostream& os, const BigNum& b){ for (int i = b.length; i != 2; --i) os << b.data[i]; os << '.' << b.data[2] << b.data[1]; return os; } BigNum operator +(const BigNum& lhs, const BigNum& rhs){ BigNum ans(\"0.00\"); int len = max(lhs.length, rhs.length); for (int i = 1; i <= len; ++i){ ans.data[i] += lhs.data[i] + rhs.data[i]; if (ans.data[i] >= 10){ ans.data[i] -= 10; ++ans.data[i + 1]; } } if (ans.data[len + 1] != 0) ++len; ans.length = len; return ans; } int main(){ string s1, s2; cin >> s1 >> s2; BigNum a(s1), b(s2); cout << a + b << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; int main(void) { char *num_1, *num_2, *num_3, str_1[210], str_2[210]; cin >> str_1 >> str_2; num_1 = new char[strlen(str_1) + 1]; strcpy(num_1, str_1); num_2 = new char[strlen(str_2) + 1]; strcpy(num_2, str_2); int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); num_3 = new char[size_3]; num_3[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { if (num_1[size_1] == '.') { num_3[size_3] = '.'; } else { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; num_3[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } } num_3 = num_3 + size_3 + 1; cout << num_3; return 0; }","title":"1007"},{"location":"nr/1007/#1007","text":"\u9898\u76ee","title":"1007 \u4e8c\u54e5\u9886\u5de5\u8d44"},{"location":"nr/1007/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u9886\u5de5\u8d44 */ #include <iostream> #include <string> using namespace std; const int MAXS = 205; class BigNum{ //friend friend BigNum operator +(const BigNum&, const BigNum&); friend ostream& operator <<(ostream&, const BigNum&); public: //constructor //BigNum(); BigNum(const string&); BigNum(const BigNum&); //operator //short& operator [](const int& x) { return data[x]; } // BigNum& operator =(const BigNum&); int GetLen() const { return length; } private: short data[MAXS]; int length; }; BigNum::BigNum(const string& s){ for (int i = 0; i != MAXS - 1; ++i) data[i] = 0; length = s.size() - 1; int i = s.size() - 1; data[1] = s[i--] - '0'; data[2] = s[i] - '0'; for (int j = 3; j <= length; ++j) data[j] = s[s.size() - j - 1] - '0'; } BigNum::BigNum(const BigNum& b){ length = b.length; for (int i = 0; i != MAXS; ++i) data[i] = b.data[i]; } ostream& operator <<(ostream& os, const BigNum& b){ for (int i = b.length; i != 2; --i) os << b.data[i]; os << '.' << b.data[2] << b.data[1]; return os; } BigNum operator +(const BigNum& lhs, const BigNum& rhs){ BigNum ans(\"0.00\"); int len = max(lhs.length, rhs.length); for (int i = 1; i <= len; ++i){ ans.data[i] += lhs.data[i] + rhs.data[i]; if (ans.data[i] >= 10){ ans.data[i] -= 10; ++ans.data[i + 1]; } } if (ans.data[len + 1] != 0) ++len; ans.length = len; return ans; } int main(){ string s1, s2; cin >> s1 >> s2; BigNum a(s1), b(s2); cout << a + b << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1007/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int main(void) { char *num_1, *num_2, *num_3, str_1[210], str_2[210]; cin >> str_1 >> str_2; num_1 = new char[strlen(str_1) + 1]; strcpy(num_1, str_1); num_2 = new char[strlen(str_2) + 1]; strcpy(num_2, str_2); int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); num_3 = new char[size_3]; num_3[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { if (num_1[size_1] == '.') { num_3[size_3] = '.'; } else { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; num_3[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } } num_3 = num_3 + size_3 + 1; cout << num_3; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1008/","text":"1008 \u4e8c\u54e5\u4e70\u671f\u8d27 \u9898\u76ee Description \u4e8c\u54e5\u60f3\u77e5\u9053\u5728\u4e00\u6bb5\u65f6\u671f\u5185\uff0c\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\u3002\u671f\u8d27\u4ea4\u6613\u65e5\u7684\u9650\u5b9a\u5982\u4e0b\uff1a \u5468\u516d\u3001\u5468\u65e5\u4e0d\u80fd\u4ea4\u6613 \u5143\u65e6\u671f\u95f4\uff081\u67081\u65e5\uff09\u4e0d\u80fd\u4ea4\u6613 \u4e94\u4e00\u52b3\u52a8\u8282\u671f\u95f4\uff085\u67081\u65e5\u81f33\u65e5\uff09\u4e0d\u80fd\u4ea4\u6613 \u5341\u4e00\u56fd\u5e86\u8282\u671f\u95f4\uff0810\u67081\u65e5\u81f37\u65e5\uff09\u4e0d\u80fd\u4ea4\u6613 \u6ca1\u6709\u5728\u4e0a\u8ff0\u8981\u6c42\u4e2d\u63d0\u5230\u7684\u65e5\u671f\u5747\u53ef\u4ea4\u6613 Input Format \u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u4e00\u5171\u6709n\u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u90fd\u6709\u4e00\u884c\uff0c\u662f\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u65e5\u671f\uff0c\u5206\u522b\u4e3a\u5f00\u59cb\u65e5\u671f\u548c\u7ed3\u675f\u65e5\u671f\u3002\u65e5\u671f\u683c\u5f0f\u4e3aYYYY-MM-DD\uff08\u6bd4\u59822010-11-11\uff09\uff1b\u6570\u636e\u4fdd\u8bc1\u5f00\u59cb\u65e5\u671f\u4e0d\u665a\u4e8e\u7ed3\u675f\u65e5\u671f\u3002 \u5bf9\u4e8e\u6240\u6709\u6570\u636e\uff1a\\( n \\leq 365 \\) \u5bf9\u4e8e30%\u7684\u6570\u636e\uff1a\u65e5\u671f\u8303\u56f4\u4ece2010-11-23\u81f32012-12-21 \u5bf9\u4e8e70%\u7684\u6570\u636e\uff1a\u65e5\u671f\u8303\u56f4\u4ece1900-01-01\u81f39999-12-31 Output Format \u8f93\u51fa\u5171n\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u5bf9\u5e94\u4e8e\u4e00\u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u9700\u8981\u8f93\u51fa\u5728\u6307\u5b9a\u65e5\u671f\u533a\u95f4\u5185\uff0c\u5171\u6709\u591a\u5c11\u4e2a\u4ea4\u6613\u65e5\uff1b\u533a\u95f4\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u65e5\u671f\u4e5f\u7b97\u5728\u5185\uff08\u5982\u679c\u662f\u4ea4\u6613\u65e5\u7684\u8bdd\uff09\u3002 Sample Input 4 2010-11-18 2010-11-20 2010-01-01 2010-01-01 2010-05-01 2010-05-03 2010-10-01 2010-10-07 Sample Output 2 0 0 0 FineArtz's solution Star /* \u4e8c\u54e5\u4e70\u671f\u8d27 */ #include <iostream> #include <string> using namespace std; bool LeapYear[10000] = {0}, CanTrade[10000][13][32] = {0}; const short Day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; short Week[10000][13][32] = {0}, CanTradeDays[10000] = {0}; struct Date{ //constructor Date(const string&); Date(int, int, int); Date& operator ++(); friend inline bool operator ==(const Date&, const Date&); friend inline bool operator !=(const Date&, const Date&); int yy, mm, dd; }; Date::Date(const string& s){ yy = mm = dd = 0; for (int i = 0; i != 4; ++i) yy = yy * 10 + s[i] - '0'; mm = (s[5] - '0') * 10 + s[6] - '0'; dd = (s[8] - '0') * 10 + s[9] - '0'; } Date::Date(int y, int m, int d) : yy(y), mm(m), dd(d){} Date& Date::operator ++(){ ++dd; if (mm != 2){ if (dd > Day[mm]){ dd = 1; ++mm; if (mm > 12){ mm = 1; ++yy; } } } else{ if (dd > (LeapYear[yy] ? 29 : 28)){ dd = 1; mm = 3; } } return *this; } inline bool operator ==(const Date& lhs, const Date& rhs){ return (lhs.yy == rhs.yy && lhs.mm == rhs.mm && lhs.dd == rhs.dd); } inline bool operator !=(const Date& lhs, const Date& rhs){ return !(lhs == rhs); } inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } void PreTreatment(){ for (int i = 1900; i <= 9999; ++i) LeapYear[i] = (i % 400 == 0 || (i % 4 == 0 && i % 100 != 0)); Week[1900][1][1] = 1; for (int yy = 1900; yy <= 9999; ++yy){ int day = 0, lday = 0, year = yy; for (int mm = 1; mm <= 12; ++mm) { if (mm != 2) day = Day[mm]; else day = (LeapYear[year] ? 29 : 28); if (mm > 1) Week[yy][mm][1] = succ(Week[yy][mm - 1][lday]); else if (yy != 1900) Week[yy][mm][1] = succ(Week[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) Week[yy][mm][dd] = succ(Week[yy][mm][dd - 1]); lday = day; day = 0; } } for (int yy = 1900; yy <= 9999; ++yy) for (int mm = 1; mm <= 12; ++mm){ int day; if (mm != 2) day = Day[mm]; else day = (LeapYear[yy] ? 29 : 28); for (int dd = 1; dd <= day; ++dd){ CanTrade[yy][mm][dd] = !((Week[yy][mm][dd] == 6) || (Week[yy][mm][dd] == 7) || (mm == 1 && dd == 1) || (mm == 5 && dd <= 3) || (mm == 10 && dd <= 7)); if (CanTrade[yy][mm][dd]) ++CanTradeDays[yy]; } } } int gap(const Date& d1, const Date& d2){ int ret = 0; if (d1.yy + 1 >= d2.yy){ for (Date d(d1.yy, d1.mm, d1.dd); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; return (CanTrade[d2.yy][d2.mm][d2.dd] ? ++ret : ret); } for (Date d(d1.yy, d1.mm, d1.dd); d != Date(d1.yy + 1, 1, 1); ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; for (Date d(d2.yy, 1, 1); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; if (CanTrade[d2.yy][d2.mm][d2.dd]) ++ret; for (int yy = d1.yy + 1; yy != d2.yy; ++yy) ret += CanTradeDays[yy]; return ret; } int main(){ PreTreatment(); int n; cin >> n; for (int data = 0; data != n; ++data){ string s1, s2; cin >> s1 >> s2; Date date1(s1), date2(s2); cout << gap(date1, date2) << endl; } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; const date origin = {2009, 12, 28}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isOK(const date &today); int CalcAll(const date &first, const date &last); int Calc(const date &first, const date &last); int main(void) { int n = 0, sum[400] = {0}; cin >> n; for (int i = 0; i < n; ++i) { date first, last; char temp; cin >> first.year >> temp >> first.month >> temp >> first.day; cin >> last.year >> temp >> last.month >> temp >> last.day; sum[i] = CalcAll(first, last); } for (int i = 0; i < n; ++i) { cout << sum[i]; if (i != n - 1) cout << endl; } return 0; /*for (int i = 1900; i <= 9999; ++i) { date first = {i, 1, 1}, last = {i, 12, 31}; cout << Calc(first, last) - 250 << \",\"; }*/ return 0; } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(i) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isOK(const date &today) { if (today.month == 1 && today.day == 1) return false; else if (today.month == 5 && today.day >= 1 && today.day <= 3) return false; else if (today.month == 10 && today.day >= 1 && today.day <= 7) return false; else { int Weekday = GetWeekday(today); if (Weekday == 6 || Weekday == 7) return false; } return true; } int CalcAll(const date &first, const date &last) { static int yearOK[10000] = {1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3}; int sum = 0; if (last.year - first.year <= 1) return Calc(first, last); else { for(int i = first.year + 1; i <= last.year - 1; ++i) sum += yearOK[i] + 250; date first_last = {first.year, 12, 31}, last_first = {last.year, 1, 1}; return sum + Calc(first, first_last) + Calc(last_first, last); } } int Calc(const date &first, const date &last) { date today = first; int sum = 0; while (!(today.year == last.year && today.month == last.month && today.day == last.day)) { if (isOK(today)) ++sum; switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day == 31) { if (today.month == 12) { ++today.year; today.month = 1; today.day = 1; } else { ++today.month; today.day = 1; } } else ++today.day; break; } case 4: case 6: case 9: case 11: { if (today.day == 30) { ++today.month; today.day = 1; } else ++today.day; break; } case 2: { if (isLeapYear(today.year)) { if (today.day == 29) { ++today.month; today.day = 1; } else ++today.day; } else { if (today.day == 28) { ++today.month; today.day = 1; } else ++today.day; } break; } default: break; } } return sum; }","title":"1008"},{"location":"nr/1008/#1008","text":"\u9898\u76ee","title":"1008 \u4e8c\u54e5\u4e70\u671f\u8d27"},{"location":"nr/1008/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u4e70\u671f\u8d27 */ #include <iostream> #include <string> using namespace std; bool LeapYear[10000] = {0}, CanTrade[10000][13][32] = {0}; const short Day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; short Week[10000][13][32] = {0}, CanTradeDays[10000] = {0}; struct Date{ //constructor Date(const string&); Date(int, int, int); Date& operator ++(); friend inline bool operator ==(const Date&, const Date&); friend inline bool operator !=(const Date&, const Date&); int yy, mm, dd; }; Date::Date(const string& s){ yy = mm = dd = 0; for (int i = 0; i != 4; ++i) yy = yy * 10 + s[i] - '0'; mm = (s[5] - '0') * 10 + s[6] - '0'; dd = (s[8] - '0') * 10 + s[9] - '0'; } Date::Date(int y, int m, int d) : yy(y), mm(m), dd(d){} Date& Date::operator ++(){ ++dd; if (mm != 2){ if (dd > Day[mm]){ dd = 1; ++mm; if (mm > 12){ mm = 1; ++yy; } } } else{ if (dd > (LeapYear[yy] ? 29 : 28)){ dd = 1; mm = 3; } } return *this; } inline bool operator ==(const Date& lhs, const Date& rhs){ return (lhs.yy == rhs.yy && lhs.mm == rhs.mm && lhs.dd == rhs.dd); } inline bool operator !=(const Date& lhs, const Date& rhs){ return !(lhs == rhs); } inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } void PreTreatment(){ for (int i = 1900; i <= 9999; ++i) LeapYear[i] = (i % 400 == 0 || (i % 4 == 0 && i % 100 != 0)); Week[1900][1][1] = 1; for (int yy = 1900; yy <= 9999; ++yy){ int day = 0, lday = 0, year = yy; for (int mm = 1; mm <= 12; ++mm) { if (mm != 2) day = Day[mm]; else day = (LeapYear[year] ? 29 : 28); if (mm > 1) Week[yy][mm][1] = succ(Week[yy][mm - 1][lday]); else if (yy != 1900) Week[yy][mm][1] = succ(Week[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) Week[yy][mm][dd] = succ(Week[yy][mm][dd - 1]); lday = day; day = 0; } } for (int yy = 1900; yy <= 9999; ++yy) for (int mm = 1; mm <= 12; ++mm){ int day; if (mm != 2) day = Day[mm]; else day = (LeapYear[yy] ? 29 : 28); for (int dd = 1; dd <= day; ++dd){ CanTrade[yy][mm][dd] = !((Week[yy][mm][dd] == 6) || (Week[yy][mm][dd] == 7) || (mm == 1 && dd == 1) || (mm == 5 && dd <= 3) || (mm == 10 && dd <= 7)); if (CanTrade[yy][mm][dd]) ++CanTradeDays[yy]; } } } int gap(const Date& d1, const Date& d2){ int ret = 0; if (d1.yy + 1 >= d2.yy){ for (Date d(d1.yy, d1.mm, d1.dd); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; return (CanTrade[d2.yy][d2.mm][d2.dd] ? ++ret : ret); } for (Date d(d1.yy, d1.mm, d1.dd); d != Date(d1.yy + 1, 1, 1); ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; for (Date d(d2.yy, 1, 1); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; if (CanTrade[d2.yy][d2.mm][d2.dd]) ++ret; for (int yy = d1.yy + 1; yy != d2.yy; ++yy) ret += CanTradeDays[yy]; return ret; } int main(){ PreTreatment(); int n; cin >> n; for (int data = 0; data != n; ++data){ string s1, s2; cin >> s1 >> s2; Date date1(s1), date2(s2); cout << gap(date1, date2) << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1008/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; const date origin = {2009, 12, 28}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isOK(const date &today); int CalcAll(const date &first, const date &last); int Calc(const date &first, const date &last); int main(void) { int n = 0, sum[400] = {0}; cin >> n; for (int i = 0; i < n; ++i) { date first, last; char temp; cin >> first.year >> temp >> first.month >> temp >> first.day; cin >> last.year >> temp >> last.month >> temp >> last.day; sum[i] = CalcAll(first, last); } for (int i = 0; i < n; ++i) { cout << sum[i]; if (i != n - 1) cout << endl; } return 0; /*for (int i = 1900; i <= 9999; ++i) { date first = {i, 1, 1}, last = {i, 12, 31}; cout << Calc(first, last) - 250 << \",\"; }*/ return 0; } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(i) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isOK(const date &today) { if (today.month == 1 && today.day == 1) return false; else if (today.month == 5 && today.day >= 1 && today.day <= 3) return false; else if (today.month == 10 && today.day >= 1 && today.day <= 7) return false; else { int Weekday = GetWeekday(today); if (Weekday == 6 || Weekday == 7) return false; } return true; } int CalcAll(const date &first, const date &last) { static int yearOK[10000] = {1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3}; int sum = 0; if (last.year - first.year <= 1) return Calc(first, last); else { for(int i = first.year + 1; i <= last.year - 1; ++i) sum += yearOK[i] + 250; date first_last = {first.year, 12, 31}, last_first = {last.year, 1, 1}; return sum + Calc(first, first_last) + Calc(last_first, last); } } int Calc(const date &first, const date &last) { date today = first; int sum = 0; while (!(today.year == last.year && today.month == last.month && today.day == last.day)) { if (isOK(today)) ++sum; switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day == 31) { if (today.month == 12) { ++today.year; today.month = 1; today.day = 1; } else { ++today.month; today.day = 1; } } else ++today.day; break; } case 4: case 6: case 9: case 11: { if (today.day == 30) { ++today.month; today.day = 1; } else ++today.day; break; } case 2: { if (isLeapYear(today.year)) { if (today.day == 29) { ++today.month; today.day = 1; } else ++today.day; } else { if (today.day == 28) { ++today.month; today.day = 1; } else ++today.day; } break; } default: break; } } return sum; }","title":"vvvvv1v's solution Star"},{"location":"nr/1009/","text":"1009 \u4e8c\u54e5\u7092\u80a1\u7968 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e8c\u54e5\u9700\u8981\u4e00\u4e2a\u80fd\u6839\u636e\u4ea4\u6613\u8bb0\u5f55\u548c\u80a1\u7968\u4ef7\u683c\u8bb0\u5f55\u7edf\u8ba1\u51fa\u5148\u8fdb\u6536\u76ca\u7684\u7a0b\u5e8f\u3002 \u73b0\u91d1\u6536\u76ca\u5305\u62ec\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u5356\u51fa\u6536\u5165\uff0c\u4e00\u90e8\u5206\u662f\u6bcf\u6b21\u4ea4\u6613\u9700\u8981\u652f\u51fa\u7684\u8d39\u7528\u3002\u5356\u51fa\u6536\u5165\u5c31\u662f\u5356\u51fa\u80a1\u7968\u83b7\u5f97\u7684\u603b\u6536\u5165\u51cf\u53bb\u4e70\u5165\u7684\u603b\u652f\u51fa\u3002\u80a1\u7968\u7684\u4ef7\u683c\u662f\u6309\u6bcf\u80a1\u7684\u4ef7\u683c\u7ed9\u51fa\u7684\uff0c\u800c\u4ea4\u6613\u7684\u6700\u5c0f\u5355\u4f4d\u662f\u201c\u4e00\u624b\u201d\uff0c\u6bcf\u624b\u662f100\u80a1\u3002\u6bcf\u6b21\u4e70\u5165\u7684\u8d39\u7528\u5982\u4e0b\u6240\u8ff0\uff1a \u4f63\u91d1\uff0c\u6536\u53d6\u4ea4\u6613\u989d\u76840.2%\uff0c\u4f46\u6700\u4f4e\u7684\u6536\u53d6\u6807\u51c6\u662f5\u5143\u3002\u6bd4\u5982\u4e70\u5165\u603b\u91d1\u989d\u4e3a1000\u5143\u7684\u80a1\u7968\uff0c\u5b9e\u9645\u4f63\u91d1\u662f2\u5143\uff0c\u4f46\u4e0d\u8d85\u8fc75\u5143\uff0c\u6240\u4ee5\u63095\u5143\u6536\u53d6\u3002 \u8fc7\u6237\u8d39\uff0c\u6bcf\u4e00\u5343\u80a1\u6536\u53d61\u5143\u3002 \u901a\u8baf\u8d39\uff0c\u7531\u4e8e\u4e8c\u54e5\u5728\u4e0a\u6d77\uff0c\u6bcf\u6b21\u53ea\u6536\u53d6\u672c\u5730\u4ea4\u6613\u8d39\u75281\u5143\u3002 \u6bcf\u6b21\u5356\u51fa\u7684\u8d39\u7528\u6807\u51c6\u4e0e\u4e70\u5165\u4e00\u81f4\uff0c\u4f46\u8fd8\u8981\u52a0\u6536\u8bc1\u5238\u5370\u82b1\u7a0e\uff08\u4ea4\u6613\u989d\u76840.1%\uff09\u3002 \u53e6\u5916\uff0c\u4e8c\u54e5\u662f\u4e2a\u4e13\u4e00\u7684\u4eba\uff0c\u4ed6\u53ea\u5bf9\u4e00\u652f\u80a1\u7968\u611f\u5174\u8da3\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u4e8c\u54e5\u7684\u4ea4\u6613\u8bb0\u5f55\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f\u80a1\u7968\u4ef7\u683c\u8bb0\u5f55\u3002 \u4ea4\u6613\u8bb0\u5f55\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570m\uff0c\u8868\u793a\u5171\u6709m\u4e2a\u4ea4\u6613\u52a8\u4f5c\u3002\u6bcf\u4e2a\u4ea4\u6613\u52a8\u4f5c\u5360\u4e00\u884c\uff0c\u5305\u62ec\u4e09\u4e2a\u6b63\u6574\u6570t, a\u548cd, d = 1\u65f6\uff0c\u8868\u793a\u5728\u65f6\u95f4t\u4e70\u5165\u8be5\u80a1\u7968a\u624b\uff0c\u5f53d = 2\u65f6\uff0c\u8868\u793a\u5728\u65f6\u95f4t\u5356\u51fa\u8be5\u80a1\u7968a\u624b\u3002\u8bb0\u5f55\u4fe1\u606f\u4fdd\u8bc1\u6709\u610f\u4e49;d\u4e0d\u4f1a\u53d6\u5176\u4ed6\u503c\u3002 \u80a1\u7968\u4ef7\u683c\u8bb0\u5f55\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8868\u793a\u5171\u6709n\u6b21\u4ef7\u683c\u53d8\u52a8\u3002\u6bcf\u6b21\u4ef7\u683c\u53d8\u52a8\u5360\u4e00\u884c\uff0c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570t\u548cv,\u8868\u793a\u5728\u65f6\u95f4t\u8be5\u80a1\u7968\u7684\u4ef7\u683c\u53d8\u4e3av\u5143\u6bcf\u80a1\u3002\u4ef7\u683c\u53d8\u52a8\u8fc7\u7a0b\u662f\u6309\u65f6\u95f4\u987a\u5e8f\u7ed9\u51fa\u7684\uff0c\u7b2c\u4e00\u6b21\u4ef7\u683c\u53d8\u52a8\u4e4b\u524d\u4e0d\u4f1a\u53d1\u751f\u4ea4\u6613\uff1bt\u4f7f\u7528\u7684\u662f\u4e00\u4e2a\u865a\u62df\u7684\u65f6\u95f4\u91cf\u5ea6\uff0c\u5728\u65f6\u95f4t\u8fdb\u884c\u7684\u4ea4\u6613\u6309\u4ef7\u683cv\u8ba1\u7b97\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e8c\u54e5\u7684\u73b0\u91d1\u6536\u76ca\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff08\u56db\u820d\u4e94\u5165\uff09\u3002 \u8bf4\u660e \u5bf9\u4e8e\u6240\u6709\u6570\u636e\uff1a\\(m \\leq 50 \\), \\(v \\leq 200 \\), \\( a \\leq 200 \\) \u5bf9\u4e8e70%\u7684\u6570\u636e\uff1a\\(n \\leq 100 \\) , \\(t \\leq 10000 \\) \u5bf9\u4e8e30%\u7684\u6570\u636e\uff1a\\(n \\leq 10000 \\) , \\( t \\leq 100000000 \\) Sample Input 2 15 50 1 40 30 2 4 10 100 20 90 30 95 40 102 Sample Output -195928.00 FineArtz's solution Star /* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const int EndOfTrade = 100000005; struct TradeRecord{ //constructor TradeRecord() : t(0), a(0), d(0) {}; TradeRecord(const TradeRecord &TR) : t(TR.t), a(TR.a), d(TR.d) {} int t, a; short d; }; double profit(const TradeRecord &trade, const int &v){ double ret = 0.0; if (trade.d == 1){ double outcome = 100.0 * v * trade.a; outcome += (outcome - 2500 > -1e-6) ? outcome * 0.002 : 5.0; outcome += trade.a / 10.0; outcome += 1.0; ret -= outcome; } else{ double income = 100.0 * v * trade.a; double t = income; income -= t * 0.001; income -= (t - 2500 > -1e-6) ? t * 0.002 : 5.0; income -= trade.a / 10.0; income -= 1.0; ret += income; } return ret; } int main(){ TradeRecord tr[55]; int m = 0; cin >> m; for (int i = 1; i <= m; ++i){ cin >> tr[i].t >> tr[i].a >> tr[i].d; } int n = 0; cin >> n; int t[10005], v[10005]; for (int i = 1; i <= n; ++i) cin >> t[i] >> v[i]; int j = 1; double NetProfit = 0.0; for (int i = 1; i <= n; ++i){ if (t[i] < tr[j].t) continue; while (j <= m && tr[j].t < t[i]){ NetProfit += profit(tr[j], v[i - 1]); ++j; } if (j > m) break; } for (int i = j; i <= m; ++i){ NetProfit += profit(tr[i], v[n]); } cout << setiosflags(ios::fixed) << setprecision(2) << NetProfit << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <iomanip> using namespace std; struct Trade { int time; int num; int way; int price; }; int main(void) { Trade arr[50]; int m; cin >> m; for (int i = 0; i < m; ++i) { cin >> arr[i].time >> arr[i].num >> arr[i].way; } int n; cin >> n; int price_former = 0, price_last = 0, time_former = 0, time_last = 0; for (int i = 0; i < n; ++i) { cin >> time_last >> price_last; for (int j = 0; j < m; ++j) { if (arr[j].time >= time_former && arr[j].time < time_last) arr[j].price = price_former; else if (j == m - 1 && arr[j].time >= time_last) arr[j].price = price_last; } time_former = time_last; price_former = price_last; } double sum = 0.0; int trsc = 0; double cmss = 0.0; for (int i = 0; i < m; ++i) { if (arr[i].way == 1) { trsc = arr[i].num * arr[i].price * 100; sum -= (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; } else { trsc = arr[i].num * arr[i].price * 100; sum += (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; sum -= (double)trsc * 0.001; } } /*sum *= 100.0; if (sum >= 0.0) sum += 0.5; else sum -= 0.5; sum = (int)sum; sum /= 100;*/ cout << setiosflags(ios::fixed) << setprecision(2) << sum; return 0; }","title":"1009"},{"location":"nr/1009/#1009","text":"\u9898\u76ee","title":"1009 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1009/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const int EndOfTrade = 100000005; struct TradeRecord{ //constructor TradeRecord() : t(0), a(0), d(0) {}; TradeRecord(const TradeRecord &TR) : t(TR.t), a(TR.a), d(TR.d) {} int t, a; short d; }; double profit(const TradeRecord &trade, const int &v){ double ret = 0.0; if (trade.d == 1){ double outcome = 100.0 * v * trade.a; outcome += (outcome - 2500 > -1e-6) ? outcome * 0.002 : 5.0; outcome += trade.a / 10.0; outcome += 1.0; ret -= outcome; } else{ double income = 100.0 * v * trade.a; double t = income; income -= t * 0.001; income -= (t - 2500 > -1e-6) ? t * 0.002 : 5.0; income -= trade.a / 10.0; income -= 1.0; ret += income; } return ret; } int main(){ TradeRecord tr[55]; int m = 0; cin >> m; for (int i = 1; i <= m; ++i){ cin >> tr[i].t >> tr[i].a >> tr[i].d; } int n = 0; cin >> n; int t[10005], v[10005]; for (int i = 1; i <= n; ++i) cin >> t[i] >> v[i]; int j = 1; double NetProfit = 0.0; for (int i = 1; i <= n; ++i){ if (t[i] < tr[j].t) continue; while (j <= m && tr[j].t < t[i]){ NetProfit += profit(tr[j], v[i - 1]); ++j; } if (j > m) break; } for (int i = j; i <= m; ++i){ NetProfit += profit(tr[i], v[n]); } cout << setiosflags(ios::fixed) << setprecision(2) << NetProfit << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1009/#vvvvv1vs-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; struct Trade { int time; int num; int way; int price; }; int main(void) { Trade arr[50]; int m; cin >> m; for (int i = 0; i < m; ++i) { cin >> arr[i].time >> arr[i].num >> arr[i].way; } int n; cin >> n; int price_former = 0, price_last = 0, time_former = 0, time_last = 0; for (int i = 0; i < n; ++i) { cin >> time_last >> price_last; for (int j = 0; j < m; ++j) { if (arr[j].time >= time_former && arr[j].time < time_last) arr[j].price = price_former; else if (j == m - 1 && arr[j].time >= time_last) arr[j].price = price_last; } time_former = time_last; price_former = price_last; } double sum = 0.0; int trsc = 0; double cmss = 0.0; for (int i = 0; i < m; ++i) { if (arr[i].way == 1) { trsc = arr[i].num * arr[i].price * 100; sum -= (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; } else { trsc = arr[i].num * arr[i].price * 100; sum += (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; sum -= (double)trsc * 0.001; } } /*sum *= 100.0; if (sum >= 0.0) sum += 0.5; else sum -= 0.5; sum = (int)sum; sum /= 100;*/ cout << setiosflags(ios::fixed) << setprecision(2) << sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1010/","text":"1010 \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 \u9898\u76ee Description \u4e8c\u54e5\u7684\u96f6\u82b1\u94b1\u4e00\u76f4\u90fd\u662f\u81ea\u5df1\u7ba1\u7406\u3002\u6bcf\u4e2a\u6708\u7684\u6708\u521d\u5988\u5988\u7ed9\u4e8c\u54e5300\u5143\u94b1\uff0c\u4e8c\u54e5\u4f1a\u9884\u7b97\u8fd9\u4e2a\u6708\u7684\u82b1\u9500\uff0c\u5e76\u4e14\u603b\u80fd\u505a\u5230\u5b9e\u9645\u82b1\u9500\u548c\u9884\u7b97\u7684\u76f8\u540c\u3002 \u4e3a\u4e86\u8ba9\u4e8c\u54e5\u5b66\u4e60\u5982\u4f55\u50a8\u84c4\uff0c\u5988\u5988\u63d0\u51fa\uff0c\u4e8c\u54e5\u53ef\u4ee5\u968f\u65f6\u628a\u6574\u767e\u7684\u94b1\u5b58\u5728\u5979\u90a3\u91cc\uff0c\u5230\u4e86\u5e74\u672b\u5979\u4f1a\u52a0\u4e0a20%\u8fd8\u7ed9\u4e8c\u54e5\u3002\u56e0\u6b64\u4e8c\u54e5\u5236\u5b9a\u4e86\u4e00\u4e2a\u50a8\u84c4\u8ba1\u5212\uff1a\u6bcf\u4e2a\u6708\u7684\u6708\u521d\uff0c\u5728\u5f97\u5230\u5988\u5988\u7ed9\u7684\u96f6\u82b1\u94b1\u540e\uff0c\u5982\u679c\u5979\u9884\u8ba1\u5230\u8fd9\u4e2a\u6708\u7684\u6708\u672b\u624b\u4e2d\u8fd8\u4f1a\u6709\u591a\u4e8e100\u5143\u6216\u6070\u597d100\u5143\uff0c\u5979\u5c31\u4f1a\u628a\u6574\u767e\u7684\u94b1\u5b58\u5728\u5988\u5988\u90a3\u91cc\uff0c\u5269\u4f59\u7684\u94b1\u7559\u5728\u81ea\u5df1\u624b\u4e2d\u3002 \u4f8b\u598211\u6708\u521d\u4e8c\u54e5\u624b\u4e2d\u8fd8\u670983\u5143\uff0c\u5988\u5988\u7ed9\u4e86\u4e8c\u54e5300\u5143\u3002\u4e8c\u54e5\u9884\u8ba111\u6708\u7684\u82b1\u9500\u662f180\u5143\uff0c\u90a3\u4e48\u5979\u5c31\u4f1a\u5728\u5988\u5988\u90a3\u91cc\u5b58200\u5143\uff0c\u81ea\u5df1\u7559\u4e0b183\u5143\u3002\u5230\u4e8611\u6708\u6708\u672b\uff0c\u4e8c\u54e5\u624b\u4e2d\u4f1a\u5269\u4e0b3\u5143\u94b1\u3002 \u4e8c\u54e5\u53d1\u73b0\u8fd9\u4e2a\u50a8\u84c4\u8ba1\u5212\u7684\u4e3b\u8981\u98ce\u9669\u662f\uff0c\u5b58\u5728\u5988\u5988\u90a3\u91cc\u7684\u94b1\u5728\u5e74\u672b\u4e4b\u524d\u4e0d\u80fd\u53d6\u51fa\u3002\u6709\u53ef\u80fd\u5728\u67d0\u4e2a\u6708\u7684\u6708\u521d\uff0c\u4e8c\u54e5\u624b\u4e2d\u7684\u94b1\u52a0\u4e0a\u8fd9\u4e2a\u6708\u5988\u5988\u7ed9\u7684\u94b1\uff0c\u4e0d\u591f\u8fd9\u4e2a\u6708\u7684\u539f\u5b9a\u9884\u7b97\u3002\u5982\u679c\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e8c\u54e5\u5c06\u4e0d\u5f97\u4e0d\u5728\u8fd9\u4e2a\u6708\u7701\u5403\u4fed\u7528\uff0c\u538b\u7f29\u9884\u7b97\u3002 \u73b0\u5728\u8bf7\u4f60\u6839\u636e2009\u5e741\u6708\u523012\u6708\u6bcf\u4e2a\u6708\u4e8c\u54e5\u7684\u9884\u7b97\uff0c\u5224\u65ad\u4f1a\u4e0d\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u3002\u5982\u679c\u4e0d\u4f1a\uff0c\u8ba1\u7b97\u52302009\u5e74\u5e74\u672b\uff0c\u5988\u5988\u5c06\u4e8c\u54e5\u5e73\u5e38\u5b58\u7684\u94b1\u52a0\u4e0a20%\u8fd8\u7ed9\u4e8c\u54e5\u4e4b\u540e\uff0c\u4e8c\u54e5\u624b\u4e2d\u4f1a\u6709\u591a\u5c11\u94b1\u3002 Input Format \u8f93\u5165\u5305\u62ec12\u884c\u6570\u636e\uff0c\u6bcf\u884c\u5305\u542b\u4e00\u4e2a\u5c0f\u4e8e350\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5206\u522b\u8868\u793a1\u6708\u523012\u6708\u4e8c\u54e5\u7684\u9884\u7b97\u3002 Output Format \u8f93\u51fa\u5305\u62ec\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\u3002\u5982\u679c\u50a8\u84c4\u8ba1\u5212\u5b9e\u65bd\u8fc7\u7a0b\u4e2d\u51fa\u73b0\u67d0\u4e2a\u6708\u94b1\u4e0d\u591f\u7528\u7684\u60c5\u51b5\uff0c\u8f93\u51fa-X\uff0cX\u8868\u793a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u7b2c\u4e00\u4e2a\u6708\uff1b\u5426\u5219\u8f93\u51fa\u52302009\u5e74\u5e74\u672b\u4e8c\u54e5\u624b\u4e2d\u4f1a\u6709\u591a\u5c11\u94b1\u3002 Sample Input 290 230 280 200 300 170 340 50 90 80 200 60 Sample Output -7 Sample Input 290 230 280 200 300 170 330 50 90 80 200 60 Sample Output 1580 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 */ #include <iostream> using namespace std; int main(){ int bd = 0, now = 0, mom = 0; for (int i = 1; i <= 12; ++i){ cin >> bd; now += 300; if (now < bd){ cout << '-' << i << endl; return 0; } mom += (now - bd) / 100 * 100; now = (now - bd) % 100; } now += mom * 1.2; cout << now << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main(void) { int arr[13]; for (int i = 1; i <= 12; ++i) cin >> arr[i]; int sum = 0, bank = 0; bool flag = false; for (int i = 1; i <= 12; ++i) { sum += 300; sum -= arr[i]; if (sum < 0) { cout << \"-\" << i; flag = true; break; } else { bank += (sum / 100) * 100; sum -= (sum / 100) * 100; } } if (!flag) cout << sum + bank * 1.2; return 0; }","title":"1010"},{"location":"nr/1010/#1010","text":"\u9898\u76ee","title":"1010 \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212"},{"location":"nr/1010/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 */ #include <iostream> using namespace std; int main(){ int bd = 0, now = 0, mom = 0; for (int i = 1; i <= 12; ++i){ cin >> bd; now += 300; if (now < bd){ cout << '-' << i << endl; return 0; } mom += (now - bd) / 100 * 100; now = (now - bd) % 100; } now += mom * 1.2; cout << now << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1010/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main(void) { int arr[13]; for (int i = 1; i <= 12; ++i) cin >> arr[i]; int sum = 0, bank = 0; bool flag = false; for (int i = 1; i <= 12; ++i) { sum += 300; sum -= arr[i]; if (sum < 0) { cout << \"-\" << i; flag = true; break; } else { bank += (sum / 100) * 100; sum -= (sum / 100) * 100; } } if (!flag) cout << sum + bank * 1.2; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1011/","text":"1011 \u590d\u6570\u7c7b \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u590d\u6570\u7c7b\uff0c\u5b9e\u73b0\u4ee5\u4e0b\u7a0b\u5e8f\u4e3b\u51fd\u6570\u4e2d\u6240\u9700\u8981\u7684\u529f\u80fd\u3002 #include <iostream> using namespace std; class MyComplex { private: double x,y; public: /* Implementation of MyComplex */ }; int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 <<endl; cout << z1 - z2 <<endl; cout << z1 * z2 <<endl; cout << z1 / z2 <<endl; cout << (z1 += z2) <<endl; cout << (z1 -= z2) <<endl; cout << (z1 *= z2) <<endl; cout << (z1 /= z2) <<endl; return 0; } \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5305\u62ec\u4e24\u884c\uff0c\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570a, b\uff08\\(0 < |a|+1, |b| < 10001\\)\uff09\uff0c\u8868\u793a\u590d\u6570\\(a+bi\\)\u3002 \u7b2c\u4e8c\u884c\u662f\u4e24\u4e2a\u6574\u6570c, d\uff08\\(0 < |c|+1, |d| < 10001\\)\uff09\uff0c\u8868\u793a\u590d\u6570\\(c+di\\)\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u4e0d\u51fa\u73b0\u9664\u4ee50\u7684\u60c5\u51b5\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5305\u62ec\u516b\u884c\uff0c\u5bf9\u5e94\u6240\u7ed9\u7a0b\u5e8f\u4e2d\u7684\u8f93\u51fa\u3002\u6ce8\u610f\u8f93\u51fa\u6d6e\u70b9\u6570\u4fdd\u75592\u4f4d\u5c0f\u6570\u3002 Sample Input 1 3 6 -3 5 Sample Output 1 0.00 11.00 6.00 1.00 -39.00 -3.00 0.62 -0.97 0.00 11.00 3.00 6.00 -39.00 -3.00 3.00 6.00 Sample Input 2 5 9 5 -9 Sample Output 2 10.00 0.00 0.00 18.00 106.00 0.00 -0.53 0.85 10.00 0.00 5.00 9.00 106.00 0.00 5.00 9.00 VictriD's solution Star #include <iostream> #include <iomanip> using namespace std; class MyComplex { friend ostream &operator<<(ostream &, const MyComplex &); friend istream &operator>>(istream &, MyComplex &); friend MyComplex operator+(const MyComplex &, const MyComplex &); friend MyComplex operator-(const MyComplex &, const MyComplex &); friend MyComplex operator!(const MyComplex &); friend MyComplex operator*(const MyComplex &, const MyComplex &); friend MyComplex operator/(const MyComplex &, const MyComplex &); private: double x, y; public: MyComplex &operator=(const MyComplex &); MyComplex &operator+=(const MyComplex &); MyComplex &operator-=(const MyComplex &); MyComplex &operator*=(const MyComplex &); MyComplex &operator/=(const MyComplex &); }; ostream &operator<<(ostream &ost, const MyComplex &z) { ost <<setiosflags(ios::fixed)<<setprecision(2)<< z.x << ' ' << z.y; return ost; } istream &operator>>(istream &ist, MyComplex &z) { ist >> z.x >> z.y; return ist; } MyComplex operator+(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x + b.x; Temp.y = a.y + b.y; return Temp; } MyComplex operator-(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x - b.x; Temp.y = a.y - b.y; return Temp; } MyComplex operator!(const MyComplex &a) { MyComplex Temp; Temp.x = a.x; Temp.y = -a.y; return Temp; } MyComplex operator*(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x * b.x - a.y * b.y; Temp.y = a.x * b.y + a.y * b.x; return Temp; } MyComplex operator/(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp = a * (!b); Temp.x /= (b * (!b)).x; Temp.y /= (b * (!b)).x; return Temp; } MyComplex &MyComplex::operator=(const MyComplex &a) { x = a.x; y = a.y; return *this; } MyComplex &MyComplex::operator+=(const MyComplex &a) { *this = *this + a; return *this; } MyComplex &MyComplex::operator-=(const MyComplex &a) { *this = *this - a; return *this; } MyComplex &MyComplex::operator*=(const MyComplex &a) { *this = *this * a; return *this; } MyComplex &MyComplex::operator/=(const MyComplex &a) { *this = *this / a; return *this; } int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; } FineArtz's solution Star /* \u590d\u6570\u7c7b */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; class CMP{ //friend friend inline CMP operator +(const CMP&, const CMP&); friend inline CMP operator -(const CMP&, const CMP&); friend inline CMP operator *(const CMP&, const CMP&); friend inline CMP operator /(const CMP&, const CMP&); friend istream& operator >>(istream&, CMP&); friend ostream& operator <<(ostream&, const CMP&); public: //constructor CMP() : x(0.0), y(0.0) {} CMP(const double &xx, const double &yy) : x(xx), y(yy) {} CMP(const int &xx, const int &yy) : x(xx), y(yy) {} CMP(const CMP &cmp) : x(cmp.x), y(cmp.y) {} //operator CMP& operator =(const CMP&); CMP& operator +=(const CMP&); CMP& operator -=(const CMP&); CMP& operator *=(const CMP&); CMP& operator /=(const CMP&); CMP operator ~() const;//conjugation CMP operator -() const;//minus double SquareModule() const { return (x * x + y * y); } double Module() const { return sqrt(x * x + y * y); } private: double x, y; }; CMP& CMP::operator =(const CMP &rhs){ x = rhs.x; y = rhs.y; return *this; } CMP CMP::operator ~() const{ return CMP(x, -y); } CMP CMP::operator -() const{ return CMP(-x, -y); } CMP inline operator +(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x + rhs.x, lhs.y + rhs.y); } CMP inline operator -(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x - rhs.x, lhs.y - rhs.y); } CMP inline operator *(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } CMP inline operator /(const CMP &lhs, const CMP &rhs){ CMP ret = lhs * ~rhs; return CMP(ret.x / rhs.SquareModule(), ret.y / rhs.SquareModule()); } CMP& CMP::operator +=(const CMP &rhs){ x += rhs.x; y += rhs.y; return *this; } CMP& CMP::operator -=(const CMP &rhs){ x -= rhs.x; y -= rhs.y; return *this; } CMP& CMP::operator *=(const CMP &rhs){ double tx = x * rhs.x - y * rhs.y; double ty = x * rhs.y + y * rhs.x; x = tx; y = ty; return *this; } CMP& CMP::operator /=(const CMP &rhs){ CMP cmp = *this / rhs; *this = cmp; return *this; } istream& operator >>(istream &is, CMP& cmp){ is >> cmp.x >> cmp.y; return is; } ostream& operator <<(ostream &os, const CMP& cmp){ os << setiosflags(ios::fixed) << setprecision(2) << cmp.x << ' ' << cmp.y; return os; } int main(){ CMP z1, z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <iomanip> using namespace std; class MyComplex { friend istream& operator>>(istream &is, MyComplex &c) { is >> c.x >> c.y; return is; } friend ostream& operator<<(ostream &os, const MyComplex &c) { os << setiosflags(ios::fixed) << setprecision(2) << c.x << \" \" << c.y; } private: double x, y; public: MyComplex(double a = 0.0, double b = 0.0): x(a), y(b){} MyComplex operator+(const MyComplex &c) { return MyComplex(x + c.x, y + c.y); } MyComplex operator-(const MyComplex &c) { return MyComplex(x - c.x, y - c.y); } MyComplex operator*(const MyComplex &c) { return MyComplex(x * c.x - y * c.y, x * c.y + y * c.x); } MyComplex operator/(const MyComplex &c) { return MyComplex((x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y)); } MyComplex& operator+=(const MyComplex &c) { x += c.x; y += c.y; return *this; } MyComplex& operator-=(const MyComplex &c) { x -= c.x; y -= c.y; return *this; } MyComplex& operator*=(const MyComplex &c) { double tem_x = x * c.x - y * c.y, tem_y = x * c.y + y * c.x; x = tem_x; y = tem_y; return *this; } MyComplex& operator/=(const MyComplex &c) { double tem_x = (x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), tem_y = (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y); x = tem_x; y = tem_y; return *this; } ~MyComplex(){} }; int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"1011"},{"location":"nr/1011/#1011","text":"\u9898\u76ee","title":"1011 \u590d\u6570\u7c7b"},{"location":"nr/1011/#victrids-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; class MyComplex { friend ostream &operator<<(ostream &, const MyComplex &); friend istream &operator>>(istream &, MyComplex &); friend MyComplex operator+(const MyComplex &, const MyComplex &); friend MyComplex operator-(const MyComplex &, const MyComplex &); friend MyComplex operator!(const MyComplex &); friend MyComplex operator*(const MyComplex &, const MyComplex &); friend MyComplex operator/(const MyComplex &, const MyComplex &); private: double x, y; public: MyComplex &operator=(const MyComplex &); MyComplex &operator+=(const MyComplex &); MyComplex &operator-=(const MyComplex &); MyComplex &operator*=(const MyComplex &); MyComplex &operator/=(const MyComplex &); }; ostream &operator<<(ostream &ost, const MyComplex &z) { ost <<setiosflags(ios::fixed)<<setprecision(2)<< z.x << ' ' << z.y; return ost; } istream &operator>>(istream &ist, MyComplex &z) { ist >> z.x >> z.y; return ist; } MyComplex operator+(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x + b.x; Temp.y = a.y + b.y; return Temp; } MyComplex operator-(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x - b.x; Temp.y = a.y - b.y; return Temp; } MyComplex operator!(const MyComplex &a) { MyComplex Temp; Temp.x = a.x; Temp.y = -a.y; return Temp; } MyComplex operator*(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x * b.x - a.y * b.y; Temp.y = a.x * b.y + a.y * b.x; return Temp; } MyComplex operator/(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp = a * (!b); Temp.x /= (b * (!b)).x; Temp.y /= (b * (!b)).x; return Temp; } MyComplex &MyComplex::operator=(const MyComplex &a) { x = a.x; y = a.y; return *this; } MyComplex &MyComplex::operator+=(const MyComplex &a) { *this = *this + a; return *this; } MyComplex &MyComplex::operator-=(const MyComplex &a) { *this = *this - a; return *this; } MyComplex &MyComplex::operator*=(const MyComplex &a) { *this = *this * a; return *this; } MyComplex &MyComplex::operator/=(const MyComplex &a) { *this = *this / a; return *this; } int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1011/#fineartzs-solution-star","text":"/* \u590d\u6570\u7c7b */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; class CMP{ //friend friend inline CMP operator +(const CMP&, const CMP&); friend inline CMP operator -(const CMP&, const CMP&); friend inline CMP operator *(const CMP&, const CMP&); friend inline CMP operator /(const CMP&, const CMP&); friend istream& operator >>(istream&, CMP&); friend ostream& operator <<(ostream&, const CMP&); public: //constructor CMP() : x(0.0), y(0.0) {} CMP(const double &xx, const double &yy) : x(xx), y(yy) {} CMP(const int &xx, const int &yy) : x(xx), y(yy) {} CMP(const CMP &cmp) : x(cmp.x), y(cmp.y) {} //operator CMP& operator =(const CMP&); CMP& operator +=(const CMP&); CMP& operator -=(const CMP&); CMP& operator *=(const CMP&); CMP& operator /=(const CMP&); CMP operator ~() const;//conjugation CMP operator -() const;//minus double SquareModule() const { return (x * x + y * y); } double Module() const { return sqrt(x * x + y * y); } private: double x, y; }; CMP& CMP::operator =(const CMP &rhs){ x = rhs.x; y = rhs.y; return *this; } CMP CMP::operator ~() const{ return CMP(x, -y); } CMP CMP::operator -() const{ return CMP(-x, -y); } CMP inline operator +(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x + rhs.x, lhs.y + rhs.y); } CMP inline operator -(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x - rhs.x, lhs.y - rhs.y); } CMP inline operator *(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } CMP inline operator /(const CMP &lhs, const CMP &rhs){ CMP ret = lhs * ~rhs; return CMP(ret.x / rhs.SquareModule(), ret.y / rhs.SquareModule()); } CMP& CMP::operator +=(const CMP &rhs){ x += rhs.x; y += rhs.y; return *this; } CMP& CMP::operator -=(const CMP &rhs){ x -= rhs.x; y -= rhs.y; return *this; } CMP& CMP::operator *=(const CMP &rhs){ double tx = x * rhs.x - y * rhs.y; double ty = x * rhs.y + y * rhs.x; x = tx; y = ty; return *this; } CMP& CMP::operator /=(const CMP &rhs){ CMP cmp = *this / rhs; *this = cmp; return *this; } istream& operator >>(istream &is, CMP& cmp){ is >> cmp.x >> cmp.y; return is; } ostream& operator <<(ostream &os, const CMP& cmp){ os << setiosflags(ios::fixed) << setprecision(2) << cmp.x << ' ' << cmp.y; return os; } int main(){ CMP z1, z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1011/#vvvvv1vs-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; class MyComplex { friend istream& operator>>(istream &is, MyComplex &c) { is >> c.x >> c.y; return is; } friend ostream& operator<<(ostream &os, const MyComplex &c) { os << setiosflags(ios::fixed) << setprecision(2) << c.x << \" \" << c.y; } private: double x, y; public: MyComplex(double a = 0.0, double b = 0.0): x(a), y(b){} MyComplex operator+(const MyComplex &c) { return MyComplex(x + c.x, y + c.y); } MyComplex operator-(const MyComplex &c) { return MyComplex(x - c.x, y - c.y); } MyComplex operator*(const MyComplex &c) { return MyComplex(x * c.x - y * c.y, x * c.y + y * c.x); } MyComplex operator/(const MyComplex &c) { return MyComplex((x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y)); } MyComplex& operator+=(const MyComplex &c) { x += c.x; y += c.y; return *this; } MyComplex& operator-=(const MyComplex &c) { x -= c.x; y -= c.y; return *this; } MyComplex& operator*=(const MyComplex &c) { double tem_x = x * c.x - y * c.y, tem_y = x * c.y + y * c.x; x = tem_x; y = tem_y; return *this; } MyComplex& operator/=(const MyComplex &c) { double tem_x = (x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), tem_y = (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y); x = tem_x; y = tem_y; return *this; } ~MyComplex(){} }; int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1012/","text":"1012 \u589e\u957f\u7387\u95ee\u9898 \u9898\u76ee Description \u6709\u4e00\u4e2a\u6570\u5217\uff0c\u5b83\u662f\u7531\u81ea\u7136\u6570\u7ec4\u6210\u7684\uff0c\u5e76\u4e14\u4e25\u683c\u5355\u8c03\u4e0a\u5347\u3002\u6700\u5c0f\u7684\u6570\u4e0d\u5c0f\u4e8eS\uff0c\u6700\u5927\u7684\u4e0d\u8d85\u8fc7T\u3002\u73b0\u5728\u77e5\u9053\u8fd9\u4e2a\u6570\u5217\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u540e\u4e00\u4e2a\u6570\u76f8\u5bf9\u4e8e\u524d\u4e00\u4e2a\u6570\u7684\u589e\u957f\u7387\u603b\u662f\u767e\u5206\u6bd4\u4e0b\u7684\u6574\u6570\uff08\u59825\u76f8\u5bf9\u4e8e4\u7684\u589e\u957f\u7387\u662f25%\uff0c25\u4e3a\u6574\u6570\uff1b\u800c9\u5bf97\u5c31\u4e0d\u884c\u4e86\uff09\u3002\u73b0\u5728\u95ee\uff1a\u8fd9\u4e2a\u6570\u5217\u6700\u957f\u53ef\u4ee5\u6709\u591a\u957f\uff1f\u6ee1\u8db3\u6700\u957f\u8981\u6c42\u7684\u6570\u5217\u6709\u591a\u5c11\u4e2a\uff1f Input Format \u8f93\u5165\u4ec5\u6709\u4e00\u884c\uff0c\u5305\u542bS\u548cT\u4e24\u4e2a\u6570\uff08 \\( 0 < S < T \\leq 200000 \\) \uff09\u3002 30%\u7684\u6570\u636e\uff0c\\( 0 < S < T \\leq 100 \\) \uff1b 100%\u7684\u6570\u636e\uff0c\\( 0 < S < T \\leq 200000 \\)\u3002 Output Format \u8f93\u51fa\u67092\u884c\u3002\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6570\u8868\u793a\u957f\u5ea6\uff0c\u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u6570\u8868\u793a\u4e2a\u6570\u3002 Sample Input 2 10 Sample Output 5 2 \u6837\u4f8b\u89e3\u91ca 2 4 5 6 9\u4ee5\u53ca2 4 5 8 10 FineArtz's solution Star /* \u589e\u957f\u7387\u95ee\u9898 */ #include <iostream> #include <cmath> #include <vector> using namespace std; vector<int> CanInc[200005]; int len[200005] = {0}; long long tms[200005] = {0}, cnt[200005] = {0}; //f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u957f\u5ea6\uff0ctms[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u7684\u4e2a\u6570\uff0ccnt[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u5e8f\u5217\u6570 /*void PreTreatment(int s, int t){ for (int i = s; i != t; ++i) for (int p = 1; p <= 99; ++p){ if (trunc(s * p * 0.01) == (s * p / 100)) CanInc[i].push_back(p); } } */ int main(){ int s, t; cin >> s >> t; for (int i = s; i <= t; ++i){ len[i] = 1; tms[i] = 1; } cnt[1] = t - s + 1; long long ans = 1; for (int i = s; i < t; ++i){ for (int j = 1; j <= 100; ++j){ if (i * j % 100 == 0){ int next = i + i * j / 100; if (next > t) continue; if (len[next] == len[i] + 1){ tms[next] += tms[i]; } else if (len[next] < len[i] + 1){ len[next] = len[i] + 1; tms[next] = tms[i]; } ans = (ans > len[next] ? ans : len[next]); cnt[len[i] + 1] += tms[i]; } } } cout << ans << endl; cout << cnt[ans] << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int s, t, length = 0, sum = 0; void find(int n, int num) { for (int i = 1; num + num * i / 100 <= t; ++i) { if (num * i % 100 == 0) find(n + 1, num + num * i / 100); } if (n > length) { length = n; sum = 1; } else if (n == length) ++sum; else return; } int main(void) { cin >> s >> t; find(1, s); cout << length << endl << sum << endl; return 0; }","title":"1012"},{"location":"nr/1012/#1012","text":"\u9898\u76ee","title":"1012 \u589e\u957f\u7387\u95ee\u9898"},{"location":"nr/1012/#fineartzs-solution-star","text":"/* \u589e\u957f\u7387\u95ee\u9898 */ #include <iostream> #include <cmath> #include <vector> using namespace std; vector<int> CanInc[200005]; int len[200005] = {0}; long long tms[200005] = {0}, cnt[200005] = {0}; //f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u957f\u5ea6\uff0ctms[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u7684\u4e2a\u6570\uff0ccnt[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u5e8f\u5217\u6570 /*void PreTreatment(int s, int t){ for (int i = s; i != t; ++i) for (int p = 1; p <= 99; ++p){ if (trunc(s * p * 0.01) == (s * p / 100)) CanInc[i].push_back(p); } } */ int main(){ int s, t; cin >> s >> t; for (int i = s; i <= t; ++i){ len[i] = 1; tms[i] = 1; } cnt[1] = t - s + 1; long long ans = 1; for (int i = s; i < t; ++i){ for (int j = 1; j <= 100; ++j){ if (i * j % 100 == 0){ int next = i + i * j / 100; if (next > t) continue; if (len[next] == len[i] + 1){ tms[next] += tms[i]; } else if (len[next] < len[i] + 1){ len[next] = len[i] + 1; tms[next] = tms[i]; } ans = (ans > len[next] ? ans : len[next]); cnt[len[i] + 1] += tms[i]; } } } cout << ans << endl; cout << cnt[ans] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1012/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int s, t, length = 0, sum = 0; void find(int n, int num) { for (int i = 1; num + num * i / 100 <= t; ++i) { if (num * i % 100 == 0) find(n + 1, num + num * i / 100); } if (n > length) { length = n; sum = 1; } else if (n == length) ++sum; else return; } int main(void) { cin >> s >> t; find(1, s); cout << length << endl << sum << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1013/","text":"1013 \u65e0\u9650\u80cc\u5305 \u9898\u76ee Description \u4f60\u73b0\u5728\u6709\u4e00\u4e2a\u4f53\u79ef\u4e3aV\u7684\u5927\u888b\u5b50\uff0c\u6709N\u79cd\u7269\u54c1\uff0c\u5047\u8bbe\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u6709\u65e0\u9650\u591a\u4e2a\uff0c\u800c\u4e14\u7b2ci\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u662fc[i],\u4ef7\u503c\u662fw[i],\u8bf7\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\u653e\u5165\u888b\u4e2d\uff0c\u4f7f\u888b\u4e2d\u7269\u54c1\u7684\u4ef7\u503c\u603b\u548c\u6700\u5927\u3002 \u6ce8\u610f\u6bcf\u79cd\u7269\u54c1\u7684\u6570\u91cf\u662f\u65e0\u9650\u591a\u7684\uff1b\u5bf9\u4e8e\u653e\u5165\u888b\u4e2d\u7684\u540c\u79cd\u7269\u54c1\u6570\u91cf\u6ca1\u6709\u9650\u5236\u3002 Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570V\u548cN\uff0c\u5206\u522b\u4ee3\u8868\u888b\u5b50\u7684\u4f53\u79ef\u548c\u7269\u54c1\u7684\u79cd\u7c7b\u6570\u3002 \u4ee5\u4e0bN\u884c\u5206\u522b\u75312\u4e2a\u6b63\u6574\u6570\u7ec4\u6210\uff0c\u4ee3\u8868\u6bcf\u79cd\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002 \\(V \\leq 10000, N \\leq 1000\\)\u3002 \u4fdd\u8bc1\u64cd\u4f5c\u53ef\u5728C++ int\u8303\u56f4\u5185\u5b8c\u6210\u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5927\u7684\u4ef7\u503c\u603b\u548c Sample Input 5 3 2 3 3 2 4 1 Sample Output 6 FineArtz's solution Star #include <iostream> #include <map> using namespace std; int main(){ map<int, int> bucket; int f[10005] = {0}; int v, n; cin >> v >> n; while (n--){ int vi, wi; cin >> vi >> wi; if (bucket.find(vi) != bucket.end()){ if (bucket[vi] < wi) bucket[vi] = wi; } else bucket[vi] = wi; } for (auto i = bucket.begin(); i != bucket.end(); ++i) for (int j = i->first; j <= v; ++j) f[j] = max(f[j], f[j - i->first] + i->second); cout << f[v] << endl; return 0; }","title":"1013"},{"location":"nr/1013/#1013","text":"\u9898\u76ee","title":"1013 \u65e0\u9650\u80cc\u5305"},{"location":"nr/1013/#fineartzs-solution-star","text":"#include <iostream> #include <map> using namespace std; int main(){ map<int, int> bucket; int f[10005] = {0}; int v, n; cin >> v >> n; while (n--){ int vi, wi; cin >> vi >> wi; if (bucket.find(vi) != bucket.end()){ if (bucket[vi] < wi) bucket[vi] = wi; } else bucket[vi] = wi; } for (auto i = bucket.begin(); i != bucket.end(); ++i) for (int j = i->first; j <= v; ++j) f[j] = max(f[j], f[j - i->first] + i->second); cout << f[v] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1014/","text":"1014 \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 \u9898\u76ee Description \u8f93\u51652\u4e2a\u6574\u6570a\u548cb\uff0c\u8f93\u51faa+b\u3002 Input Format \u8f93\u5165\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884ca\uff0c\u7b2c\u4e8c\u884cb\u3002 \\(0 \\leq a , b \\leq 10^{100000}\\)\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0ca+b\u3002 Sample Input 1234 1111111111 Sample Output 1111112345 FineArtz's solution Star /* \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt(string); int getl() const { return len; } private: short data[100005]; int len; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans(\"\"); int l = (a.getl() > b.getl() ? a.getl() : b.getl()); ans.len = l; for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.data[ans.len] == 0) --ans.len; return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt a(s1), b(s2); cout << a + b << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100005; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Add(num_1, num_2, num_3); cout << num_3; }","title":"1014"},{"location":"nr/1014/#1014","text":"\u9898\u76ee","title":"1014 \u9ad8\u7cbe\u5ea6\u52a0\u6cd5"},{"location":"nr/1014/#fineartzs-solution-star","text":"/* \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt(string); int getl() const { return len; } private: short data[100005]; int len; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans(\"\"); int l = (a.getl() > b.getl() ? a.getl() : b.getl()); ans.len = l; for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.data[ans.len] == 0) --ans.len; return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt a(s1), b(s2); cout << a + b << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1014/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100005; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Add(num_1, num_2, num_3); cout << num_3; }","title":"vvvvv1v's solution Star"},{"location":"nr/1015/","text":"1015 \u9ad8\u7cbe\u5ea6\u4e58\u6cd5 \u9898\u76ee Description \u8f93\u51652\u4e2a\u6574\u6570a\u548cb\uff0c\u8f93\u51faa*b\u3002 Input Format \u8f93\u5165\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884ca\uff0c\u7b2c\u4e8c\u884cb\u3002 \\(0 \\leq a , b \\leq 2^{1000}\\)\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0ca*b\u3002 Sample Input 44 3 Sample Output 132 FineArtz's solution Star #include <iostream> #include <string> #include <vector> #include <cmath> using namespace std; //const int MAXSIZE = 10000; const double pi = 3.1415926; class comp{//complex number //friend friend comp operator +(const comp&, const comp&); friend comp operator -(const comp&, const comp&); friend comp operator *(const comp&, const comp&); friend comp operator /(const comp&, const comp&); public: //constructor comp() : x(0.0), y(0.0) {} comp(double xx, double yy) : x(xx), y(yy) {}; comp(const comp &cmp) : x(cmp.x), y(cmp.y) {}; comp operator ~() const;//conjugation comp operator -() const;//minus comp& operator =(const comp&); double mod() const {return sqrt(x * x + y * y);} double smod() const {return x * x + y * y;} comp recp() const; double x, y; }; comp comp::operator ~() const {return comp(x, -y);} comp comp::operator -() const {return comp(-x, -y);} comp& comp::operator =(const comp &rhs){ x = rhs.x; y = rhs.y; return *this; } inline comp operator +(const comp &lhs, const comp &rhs){return comp(lhs.x + rhs.x, lhs.y + rhs.y);} inline comp operator -(const comp &lhs, const comp &rhs){return comp(lhs.x - rhs.x, lhs.y - rhs.y);} inline comp operator *(const comp &lhs, const comp &rhs){ return comp(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } inline comp operator /(const comp &lhs, const comp &rhs){ double module = rhs.smod(); return comp((lhs.x * rhs.x - lhs.y * rhs.y) / module, (lhs.x * rhs.y + lhs.y * rhs.x) / module); } inline comp comp::recp() const { double module = this->smod(); return comp(x / module, -y / module); } class BigInt{ //friend friend ostream& operator <<(ostream&, const BigInt&); friend BigInt operator *(const BigInt&, const BigInt&); public: //constructor BigInt(); BigInt(const string&); vector<int> data; int len; }; BigInt::BigInt() : len(1), data(0) {} BigInt::BigInt(const string &s) : len(s.size()){ for (int i = 1; i <= len; ++i) data.push_back(s[len - i] - '0'); } ostream& operator <<(ostream& os, const BigInt &b){ for (int i = b.len - 1; i >= 0; --i) os << b.data[i]; return os; } vector<comp> FFT(const vector<comp> &f, bool inv = false){ int len = f.size(); if (len == 1){ vector<comp> ret; ret.push_back(f[0]); return ret; } vector<comp> f1 , f2; for (int i = 0; i < len; i += 2){ f1.push_back(f[i]); f2.push_back(f[i + 1]); } vector<comp> ret1, ret2, ret; ret1 = FFT(f1, inv); ret2 = FFT(f2, inv); for (int i = 0; i < len; ++i){ comp w(cos(2.0 * pi * i / len), sin(2.0 * pi * i / len)); if (inv) w = w.recp(); comp reti(ret1[i % (len / 2)] + w * ret2[i % (len / 2)]); ret.push_back(reti); } return ret; } BigInt operator *(const BigInt &lhs, const BigInt &rhs){ vector<comp> fx1, fx2; int len = max(lhs.len, rhs.len), k = 1; while (len > k) k *= 2; len = k * 2; for (int i = 0; i < len; ++i){ if (i < lhs.len) fx1.push_back(comp(double(lhs.data[i]), 0.0)); else fx1.push_back(comp(0.0, 0.0)); } for (int i = 0; i < len; ++i){ if (i < rhs.len) fx2.push_back(comp(double(rhs.data[i]), 0.0)); else fx2.push_back(comp(0.0, 0.0)); } vector<comp> y1 = FFT(fx1), y2 = FFT(fx2), y; for (int i = 0; i < len; ++i) y.push_back(y1[i] * y2[i]); vector<comp> fx = FFT(y, 1); for (int i = 0; i < len; ++i) fx[i].x /= len; BigInt ret(\"\"); for (int i = 0; i < len; ++i) ret.data.push_back(round(fx[i].x)); for (int i = 0; i < len - 1; ++i){ if (ret.data[i] >= 10){ ret.data[i + 1] += ret.data[i] / 10; ret.data[i] %= 10; } } while (ret.data[len - 1] == 0){ --len; ret.data.erase(ret.data.end() - 1); } ret.len = len; return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt lhs(s1), rhs(s2); cout << lhs * rhs << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100000; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); delete [] head; } void MultiSingle(char* num_1, int num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1); head = new char[size_1]; head[size_1] = '\\0'; --size_1; for(;temp != 0 || size_1 >= 0; --size_1) { int multi = size_1 >= 0 ? (num_1[size_1] - '0') : 0; head[size_1] = (multi * num_2 + temp) % 10 + '0'; temp = (multi * num_2 + temp) / 10; } head = head + size_1 + 1; strcpy(num_3, head); delete [] head; } void Multi(char* num_1, char* num_2, char* num_3) { char head[MAXSIZE], temp[MAXSIZE]; int size_2 = strlen(num_2); for (int i = 0; i < size_2; ++i) { MultiSingle(num_1, num_2[i] - '0', temp); int j = 0; for(j = i; j < size_2 - 1; ++j) temp[strlen(temp)] = '0'; temp[strlen(temp)] = '\\0'; Add(head, temp, head); } strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Multi(num_1, num_2, num_3); cout << num_3; return 0; }","title":"1015"},{"location":"nr/1015/#1015","text":"\u9898\u76ee","title":"1015 \u9ad8\u7cbe\u5ea6\u4e58\u6cd5"},{"location":"nr/1015/#fineartzs-solution-star","text":"#include <iostream> #include <string> #include <vector> #include <cmath> using namespace std; //const int MAXSIZE = 10000; const double pi = 3.1415926; class comp{//complex number //friend friend comp operator +(const comp&, const comp&); friend comp operator -(const comp&, const comp&); friend comp operator *(const comp&, const comp&); friend comp operator /(const comp&, const comp&); public: //constructor comp() : x(0.0), y(0.0) {} comp(double xx, double yy) : x(xx), y(yy) {}; comp(const comp &cmp) : x(cmp.x), y(cmp.y) {}; comp operator ~() const;//conjugation comp operator -() const;//minus comp& operator =(const comp&); double mod() const {return sqrt(x * x + y * y);} double smod() const {return x * x + y * y;} comp recp() const; double x, y; }; comp comp::operator ~() const {return comp(x, -y);} comp comp::operator -() const {return comp(-x, -y);} comp& comp::operator =(const comp &rhs){ x = rhs.x; y = rhs.y; return *this; } inline comp operator +(const comp &lhs, const comp &rhs){return comp(lhs.x + rhs.x, lhs.y + rhs.y);} inline comp operator -(const comp &lhs, const comp &rhs){return comp(lhs.x - rhs.x, lhs.y - rhs.y);} inline comp operator *(const comp &lhs, const comp &rhs){ return comp(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } inline comp operator /(const comp &lhs, const comp &rhs){ double module = rhs.smod(); return comp((lhs.x * rhs.x - lhs.y * rhs.y) / module, (lhs.x * rhs.y + lhs.y * rhs.x) / module); } inline comp comp::recp() const { double module = this->smod(); return comp(x / module, -y / module); } class BigInt{ //friend friend ostream& operator <<(ostream&, const BigInt&); friend BigInt operator *(const BigInt&, const BigInt&); public: //constructor BigInt(); BigInt(const string&); vector<int> data; int len; }; BigInt::BigInt() : len(1), data(0) {} BigInt::BigInt(const string &s) : len(s.size()){ for (int i = 1; i <= len; ++i) data.push_back(s[len - i] - '0'); } ostream& operator <<(ostream& os, const BigInt &b){ for (int i = b.len - 1; i >= 0; --i) os << b.data[i]; return os; } vector<comp> FFT(const vector<comp> &f, bool inv = false){ int len = f.size(); if (len == 1){ vector<comp> ret; ret.push_back(f[0]); return ret; } vector<comp> f1 , f2; for (int i = 0; i < len; i += 2){ f1.push_back(f[i]); f2.push_back(f[i + 1]); } vector<comp> ret1, ret2, ret; ret1 = FFT(f1, inv); ret2 = FFT(f2, inv); for (int i = 0; i < len; ++i){ comp w(cos(2.0 * pi * i / len), sin(2.0 * pi * i / len)); if (inv) w = w.recp(); comp reti(ret1[i % (len / 2)] + w * ret2[i % (len / 2)]); ret.push_back(reti); } return ret; } BigInt operator *(const BigInt &lhs, const BigInt &rhs){ vector<comp> fx1, fx2; int len = max(lhs.len, rhs.len), k = 1; while (len > k) k *= 2; len = k * 2; for (int i = 0; i < len; ++i){ if (i < lhs.len) fx1.push_back(comp(double(lhs.data[i]), 0.0)); else fx1.push_back(comp(0.0, 0.0)); } for (int i = 0; i < len; ++i){ if (i < rhs.len) fx2.push_back(comp(double(rhs.data[i]), 0.0)); else fx2.push_back(comp(0.0, 0.0)); } vector<comp> y1 = FFT(fx1), y2 = FFT(fx2), y; for (int i = 0; i < len; ++i) y.push_back(y1[i] * y2[i]); vector<comp> fx = FFT(y, 1); for (int i = 0; i < len; ++i) fx[i].x /= len; BigInt ret(\"\"); for (int i = 0; i < len; ++i) ret.data.push_back(round(fx[i].x)); for (int i = 0; i < len - 1; ++i){ if (ret.data[i] >= 10){ ret.data[i + 1] += ret.data[i] / 10; ret.data[i] %= 10; } } while (ret.data[len - 1] == 0){ --len; ret.data.erase(ret.data.end() - 1); } ret.len = len; return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt lhs(s1), rhs(s2); cout << lhs * rhs << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1015/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100000; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); delete [] head; } void MultiSingle(char* num_1, int num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1); head = new char[size_1]; head[size_1] = '\\0'; --size_1; for(;temp != 0 || size_1 >= 0; --size_1) { int multi = size_1 >= 0 ? (num_1[size_1] - '0') : 0; head[size_1] = (multi * num_2 + temp) % 10 + '0'; temp = (multi * num_2 + temp) / 10; } head = head + size_1 + 1; strcpy(num_3, head); delete [] head; } void Multi(char* num_1, char* num_2, char* num_3) { char head[MAXSIZE], temp[MAXSIZE]; int size_2 = strlen(num_2); for (int i = 0; i < size_2; ++i) { MultiSingle(num_1, num_2[i] - '0', temp); int j = 0; for(j = i; j < size_2 - 1; ++j) temp[strlen(temp)] = '0'; temp[strlen(temp)] = '\\0'; Add(head, temp, head); } strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Multi(num_1, num_2, num_3); cout << num_3; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1016/","text":"1016 \u9ad8\u7cbe\u5ea6\u9664\u6cd5 \u9898\u76ee Description \u8f93\u51652\u4e2a\u6574\u6570a\u548cb\uff0c\u8f93\u51fa\\( a/b \\)\u3002 Input Format \u8f93\u5165\u6709\u4e24\u884c\uff0c\u7b2c\u4e00\u884ca\uff0c\u7b2c\u4e8c\u884cb\u3002 \\( 0 \\leq a , b \\leq 2^{1000} \\)\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\\( a/b \\)\u3002 Sample Input 6 3 Sample Output 2 FineArtz's solution Star /* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <string> using namespace std; constexpr int MAXL = 1000; class BigInt{ //friend friend BigInt operator /(const BigInt&, const BigInt&); friend BigInt operator -(const BigInt&, const BigInt&); //friend bool operator >(const BigInt&, const BigInt&); //friend bool operator ==(const BigInt&, const BigInt&); //friend bool operator >=(const BigInt&, const BigInt&); //friend ostream& operator <<(ostream&, const BigInt&); //friend istream& operator >>(istream&, BigInt&); public: //constructor BigInt() = default; BigInt(const string&); BigInt(const BigInt&); int operator [](const int &x) const {return data[x];} int GetLen() const {return len;} BigInt lshift10(const int&) const; private: int len = 1; int data[MAXL] = {0}; }; BigInt::BigInt(const string &s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } bool operator ==(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() != rhs.GetLen()) return false; for (int i = 1; i <= lhs.GetLen(); ++i) if (lhs[i] != rhs[i]) return false; return true; } bool operator >(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() < rhs.GetLen()) return false; if (lhs.GetLen() > rhs.GetLen()) return true; for (int i = lhs.GetLen(); i >= 1; --i){ if (lhs[i] > rhs[i]) return true; if (lhs[i] < rhs[i]) return false; } return false; } bool operator >=(const BigInt &lhs, const BigInt &rhs){ if (lhs == rhs || lhs > rhs) return true; return false; } ostream& operator <<(ostream &os, const BigInt &bi){ for (int i = bi.GetLen(); i >= 1; --i) os << bi[i]; return os; } BigInt operator -(const BigInt &lhs, const BigInt &rhs){ BigInt ret(lhs); for (int i = 1; i <= rhs.len; ++i) ret.data[i] -= rhs[i]; for (int i = 1; i <= ret.len; ++i){ if (ret.data[i] < 0){ ret.data[i] += 10; --ret.data[i + 1]; } } int i = ret.len; while (i >= 1 && ret.data[i] == 0) --i; ret.len = (i != 0) ? i : 1; return ret; } BigInt BigInt::lshift10(const int &x) const{ if (x <= 0) return *this; BigInt tmp(*this); for (int i = len + x; i >= x + 1; --i) tmp.data[i] = tmp[i - x]; for (int i = 1; i <= x; ++i) tmp.data[i] = 0; tmp.len += x; return tmp; } BigInt operator /(const BigInt &lhs, const BigInt &rhs){ BigInt ret, tmp(lhs); while(tmp > rhs){ int i = 0; while (tmp > rhs.lshift10(i + 1)) ++i; if (i >= ret.len) ret.len = i + 1; while (tmp > rhs.lshift10(i)){ tmp = tmp - rhs.lshift10(i); ++ret.data[i + 1]; } } if (tmp >= rhs) ++ret.data[1]; for (int i = 1; i <= ret.len - 1; ++i) if (ret[i] >= 10){ ret.data[i] -= 10; ++ret.data[i + 1]; } if (ret[ret.len] >= 10){ ret.data[ret.len] -= 10; ++ret.data[++ret.len]; } return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt bi1(s1), bi2(s2); cout << bi1 / bi2 << endl; return 0; }","title":"1016"},{"location":"nr/1016/#1016","text":"\u9898\u76ee","title":"1016 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1016/#fineartzs-solution-star","text":"/* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <string> using namespace std; constexpr int MAXL = 1000; class BigInt{ //friend friend BigInt operator /(const BigInt&, const BigInt&); friend BigInt operator -(const BigInt&, const BigInt&); //friend bool operator >(const BigInt&, const BigInt&); //friend bool operator ==(const BigInt&, const BigInt&); //friend bool operator >=(const BigInt&, const BigInt&); //friend ostream& operator <<(ostream&, const BigInt&); //friend istream& operator >>(istream&, BigInt&); public: //constructor BigInt() = default; BigInt(const string&); BigInt(const BigInt&); int operator [](const int &x) const {return data[x];} int GetLen() const {return len;} BigInt lshift10(const int&) const; private: int len = 1; int data[MAXL] = {0}; }; BigInt::BigInt(const string &s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } bool operator ==(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() != rhs.GetLen()) return false; for (int i = 1; i <= lhs.GetLen(); ++i) if (lhs[i] != rhs[i]) return false; return true; } bool operator >(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() < rhs.GetLen()) return false; if (lhs.GetLen() > rhs.GetLen()) return true; for (int i = lhs.GetLen(); i >= 1; --i){ if (lhs[i] > rhs[i]) return true; if (lhs[i] < rhs[i]) return false; } return false; } bool operator >=(const BigInt &lhs, const BigInt &rhs){ if (lhs == rhs || lhs > rhs) return true; return false; } ostream& operator <<(ostream &os, const BigInt &bi){ for (int i = bi.GetLen(); i >= 1; --i) os << bi[i]; return os; } BigInt operator -(const BigInt &lhs, const BigInt &rhs){ BigInt ret(lhs); for (int i = 1; i <= rhs.len; ++i) ret.data[i] -= rhs[i]; for (int i = 1; i <= ret.len; ++i){ if (ret.data[i] < 0){ ret.data[i] += 10; --ret.data[i + 1]; } } int i = ret.len; while (i >= 1 && ret.data[i] == 0) --i; ret.len = (i != 0) ? i : 1; return ret; } BigInt BigInt::lshift10(const int &x) const{ if (x <= 0) return *this; BigInt tmp(*this); for (int i = len + x; i >= x + 1; --i) tmp.data[i] = tmp[i - x]; for (int i = 1; i <= x; ++i) tmp.data[i] = 0; tmp.len += x; return tmp; } BigInt operator /(const BigInt &lhs, const BigInt &rhs){ BigInt ret, tmp(lhs); while(tmp > rhs){ int i = 0; while (tmp > rhs.lshift10(i + 1)) ++i; if (i >= ret.len) ret.len = i + 1; while (tmp > rhs.lshift10(i)){ tmp = tmp - rhs.lshift10(i); ++ret.data[i + 1]; } } if (tmp >= rhs) ++ret.data[1]; for (int i = 1; i <= ret.len - 1; ++i) if (ret[i] >= 10){ ret.data[i] -= 10; ++ret.data[i + 1]; } if (ret[ret.len] >= 10){ ret.data[ret.len] -= 10; ++ret.data[++ret.len]; } return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt bi1(s1), bi2(s2); cout << bi1 / bi2 << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1017/","text":"1017 \u4e8c\u54e5\u517b\u5154\u5b50 \u9898\u76ee Description \u4e8c\u54e5\u57f9\u517b\u51fa\u4e86\u4e00\u79cd\u7e41\u6b96\u80fd\u529b\u5f88\u5f3a\u7684\u5154\u5b50\u3002 \u8fd9\u79cd\u5154\u5b50\u5728\u51fa\u751f\u540e\u7684\u7b2c\u4e00\u4e2a\u6708\uff0c\u80fd\u591f\u751f\u51faa\u5bf9\u5154\u5b50\uff1b\u7b2c\u4e8c\u4e2a\u6708\uff0c\u80fd\u591f\u751f\u51fab\u5bf9\u5154\u5b50\uff1b\u7b2c\u4e09\u4e2a\u6708\u4ee5\u53ca\u4ee5\u540e\u7684\u6bcf\u4e2a\u6708\uff0c\u90fd\u53ef\u4ee5\u751f\u51fac\u5bf9\u5154\u5b50\u3002 \u4e8c\u54e5\u5bf9\u6b64\u5f88\u611f\u5174\u8da3\uff0c\u82e5\u4ed6\u6709\u4e00\u5bf9\u521a\u51fa\u751f\u7684\u5154\u5b50\uff0c\u6309\u7167\u6700\u7406\u60f3\u7684\u6a21\u5f0f\u7e41\u6b96\uff0c\u5e76\u5047\u8bbe\u5154\u5b50\u4e0d\u6b7b\uff0c\u4e8c\u54e5\u60f3\u77e5\u9053\u6700\u5c11\u9700\u8981\u51e0\u4e2a\u6708\u8fd9\u4e9b\u5154\u5b50\u53ef\u4ee5\u904d\u5e03\u5730\u7403\u7684\u6bcf\u4e2a\u89d2\u843d\u3002 \u4e3a\u4e86\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e8c\u54e5\u60f3\u8981\u77e5\u9053\u8fd9\u79cd\u5154\u5b50\u5728\u7b2cN\u4e2a\u6708\u65f6\u7684\u5bf9\u6570\u3002 Input Format \u8f93\u5165\u53ea\u6709\u4e00\u884c\uff0c\u56db\u4e2a\u6570\uff0c\u5206\u522b\u4e3aa,b,c,N ( \\(0 \\leq a \\leq b \\leq c \\leq 100, N \\leq 1000\\) )\uff0c\u5176\u542b\u4e49\u4e3a\u9898\u76ee\u6240\u8ff0\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u4e3a\u7b2cN\u4e2a\u6708\u5154\u5b50\u7684\u5bf9\u6570\u3002 Sample Input 0 1 1 11 Sample Output 144 FineArtz's solution Star /* \u4e8c\u54e5\u517b\u5154\u5b50 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend BigInt operator *(const BigInt&, const int&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt() = default; BigInt(string); BigInt(const BigInt&); int getl() const { return len; } private: int data[20000] = {0}; int len = 1; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans; int l = (a.getl() > b.getl() ? a.getl() : b.getl()); for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.len > 1 && ans.data[ans.len] == 0) --ans.len; return ans; } BigInt operator *(const BigInt &a, const int &b){ BigInt ans; for (int i = 1; i <= a.len; ++i) ans.data[i] = b * a.data[i]; ans.len = a.len; for (int i = 1; i <= ans.len; ++i){ if (ans.data[i] / 10 != 0){ ans.data[i + 1] += ans.data[i] / 10; ans.data[i] %= 10; } } while (ans.data[ans.len + 1] > 0){ ++ans.len; if (ans.data[ans.len] >= 10){ ans.data[ans.len + 1] += ans.data[ans.len] / 10; ans.data[ans.len] %= 10; } } return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } BigInt one(\"1\"), two, aft, ans(\"1\"); int main(){ int a, b, c, n; cin >> a >> b >> c >> n; while (n--){ BigInt tmp(one * a + two * b + aft * c); ans = ans + tmp; aft = aft + two; two = one; one = tmp; } cout << ans << endl; // cout << ans.getl() << endl; }","title":"1017"},{"location":"nr/1017/#1017","text":"\u9898\u76ee","title":"1017 \u4e8c\u54e5\u517b\u5154\u5b50"},{"location":"nr/1017/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u517b\u5154\u5b50 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend BigInt operator *(const BigInt&, const int&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt() = default; BigInt(string); BigInt(const BigInt&); int getl() const { return len; } private: int data[20000] = {0}; int len = 1; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans; int l = (a.getl() > b.getl() ? a.getl() : b.getl()); for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.len > 1 && ans.data[ans.len] == 0) --ans.len; return ans; } BigInt operator *(const BigInt &a, const int &b){ BigInt ans; for (int i = 1; i <= a.len; ++i) ans.data[i] = b * a.data[i]; ans.len = a.len; for (int i = 1; i <= ans.len; ++i){ if (ans.data[i] / 10 != 0){ ans.data[i + 1] += ans.data[i] / 10; ans.data[i] %= 10; } } while (ans.data[ans.len + 1] > 0){ ++ans.len; if (ans.data[ans.len] >= 10){ ans.data[ans.len + 1] += ans.data[ans.len] / 10; ans.data[ans.len] %= 10; } } return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } BigInt one(\"1\"), two, aft, ans(\"1\"); int main(){ int a, b, c, n; cin >> a >> b >> c >> n; while (n--){ BigInt tmp(one * a + two * b + aft * c); ans = ans + tmp; aft = aft + two; two = one; one = tmp; } cout << ans << endl; // cout << ans.getl() << endl; }","title":"FineArtz's solution Star"},{"location":"nr/1018/","text":"1018 A+B Problem Revisited \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u5bf9\u8f93\u5165\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\u4e2d\u7684\u4e24\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u5b83\u4eec\u7684\u548c\u3002 \u8f93\u5165\u683c\u5f0f \u591a\u884c\u8f93\u5165\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff1aa\u548cb \u8f93\u51fa\u683c\u5f0f \u591a\u884c\u8f93\u51fa\uff0c\u6bcf\u884c\u8f93\u51fa\u5bf9\u5e94\u4e8e\u76f8\u5e94\u8f93\u5165\u4e2d\u4e24\u4e2a\u6570\u7684\u548c\uff1aa+b\u3002 \u8bf4\u660e \u6574\u6570\u8303\u56f4\u4e0d\u4f1a\u8d85\u8fc7int\u7c7b\u578b\u3002 Sample Input 1 2 3 4 Sample Output 3 7 FineArtz's solution Star /* A+B Problem Revisited */ #include <iostream> using namespace std; int main(){ int a, b; while (cin >> a >> b){ cout << a + b << endl; } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { int a, b; while(cin >> a >> b) cout << a + b; return 0; }","title":"1018"},{"location":"nr/1018/#1018-ab-problem-revisited","text":"\u9898\u76ee","title":"1018 A+B Problem Revisited"},{"location":"nr/1018/#fineartzs-solution-star","text":"/* A+B Problem Revisited */ #include <iostream> using namespace std; int main(){ int a, b; while (cin >> a >> b){ cout << a + b << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1018/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { int a, b; while(cin >> a >> b) cout << a + b; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1019/","text":"1019 \u62ec\u53f7\u5339\u914d \u9898\u76ee Description \u7ed9\u5b9a\u4e00\u4e32\u7531\u5de6\u5c0f\u62ec\u53f7\uff0c\u5373\u201c\uff08\u201d\uff0c\u548c\u53f3\u5c0f\u62ec\u53f7\u201c\uff09\u201d\u7ec4\u6210\u7684\u4e32\uff0c\u5224\u65ad\u5176\u662f\u5426\u5339\u914d\u3002 \u5224\u65ad\u5176\u5408\u6cd5\u7684\u6807\u51c6\u4e3a\u5373\u4e3a\u6570\u5b66\u7b49\u5f0f\u4e2d\u62ec\u53f7\u5339\u914d\u7684\u6807\u51c6\u3002 Input Format \u7b2c1\u884c\uff1aN, \\( 0 < N \\leq 50 \\)\uff1b \u7b2c2\u81f3N + 1\u884c\uff0c\u4e00\u4e2a\u62ec\u53f7\u4e32\uff0c\u4fdd\u8bc1\u4e32\u7684\u957f\u5ea6\u4e0d\u8d85\u8fc7100\u3002 Output Format \u5171N\u884c\uff0c\u82e5\u7b2ci\u4e2a\u4e32\u5339\u914d\uff0c\u4e3a\u201cYES\u201d\uff0c\u5426\u5219\u4e3a\u201cNO\u201d\u3002 Sample Input 3 (()) (() )( Sample Output YES NO NO FineArtz's solution Star /* \u62ec\u53f7\u5339\u914d */ #include <iostream> #include <sstream> using namespace std; int main(){ int n; cin >> n; while (n--){ string s; cin >> s; istringstream iss(s); char ch; bool flag = 1; int left = 0; while (iss >> ch){ if (ch == '(') ++left; else if (ch == ')') --left; if (left < 0){ cout << \"NO\" << endl; flag = 0; break; } } if (flag){ if (left == 0) cout << \"YES\" << endl; else cout << \"NO\" << endl; } } return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAX = 50; const int LENGTH = 101; int main(void) { int n; cin >> n; bool result[MAX]; char str[LENGTH]; int brackets[LENGTH]; cin.ignore(); for (int i = 0; i < n; ++i) { int sumleft = 0, sumright = 0, length = 0; bool flag = true; cin.getline(str, LENGTH); length = strlen(str); for (int j = 0; j < length; ++j) { if (str[j] == '(') { brackets[j] = -1; ++sumleft; } else if (str[j] == ')') { brackets[j] = 1; ++sumright; } else brackets[j] = 0; } if (sumleft != sumright) { result[i] = false; continue; } while(sumleft != 0 && flag) { int brackets_last = 0, brackets_next = 0, k = 0, k_last = 0; while(!brackets[k]) ++k; brackets_next = brackets[k]; while (sumleft != 0 && flag) { brackets_last = brackets_next; k_last = k; ++k; while(!brackets[k] && k < length) ++k; if (k >= length) { flag = false; break; } brackets_next = brackets[k]; if (brackets_last == -1 && brackets_next == 1) { brackets[k_last] = brackets[k] = 0; --sumleft; break; } } } if (flag) result[i] = true; else result[i] = false; } for (int i = 0; i < n; ++i) { cout << (result[i] ? \"YES\" : \"NO\"); if (i < n - 1) cout << endl; } return 0; }","title":"1019"},{"location":"nr/1019/#1019","text":"\u9898\u76ee","title":"1019 \u62ec\u53f7\u5339\u914d"},{"location":"nr/1019/#fineartzs-solution-star","text":"/* \u62ec\u53f7\u5339\u914d */ #include <iostream> #include <sstream> using namespace std; int main(){ int n; cin >> n; while (n--){ string s; cin >> s; istringstream iss(s); char ch; bool flag = 1; int left = 0; while (iss >> ch){ if (ch == '(') ++left; else if (ch == ')') --left; if (left < 0){ cout << \"NO\" << endl; flag = 0; break; } } if (flag){ if (left == 0) cout << \"YES\" << endl; else cout << \"NO\" << endl; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1019/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAX = 50; const int LENGTH = 101; int main(void) { int n; cin >> n; bool result[MAX]; char str[LENGTH]; int brackets[LENGTH]; cin.ignore(); for (int i = 0; i < n; ++i) { int sumleft = 0, sumright = 0, length = 0; bool flag = true; cin.getline(str, LENGTH); length = strlen(str); for (int j = 0; j < length; ++j) { if (str[j] == '(') { brackets[j] = -1; ++sumleft; } else if (str[j] == ')') { brackets[j] = 1; ++sumright; } else brackets[j] = 0; } if (sumleft != sumright) { result[i] = false; continue; } while(sumleft != 0 && flag) { int brackets_last = 0, brackets_next = 0, k = 0, k_last = 0; while(!brackets[k]) ++k; brackets_next = brackets[k]; while (sumleft != 0 && flag) { brackets_last = brackets_next; k_last = k; ++k; while(!brackets[k] && k < length) ++k; if (k >= length) { flag = false; break; } brackets_next = brackets[k]; if (brackets_last == -1 && brackets_next == 1) { brackets[k_last] = brackets[k] = 0; --sumleft; break; } } } if (flag) result[i] = true; else result[i] = false; } for (int i = 0; i < n; ++i) { cout << (result[i] ? \"YES\" : \"NO\"); if (i < n - 1) cout << endl; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1020/","text":"1020 \u5206\u89e3\u8d28\u56e0\u6570 \u9898\u76ee Description \u6bcf\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e2\u7684\u81ea\u7136\u6570\uff0c\u5747\u53ef\u5199\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u8d28\u6570\u7684\u4e58\u79ef\uff0c\u4f8b\u5982\uff1a 2=2 20=2*2*5 \u8fd9\u79cd\u5c06\u4e00\u4e2a\u6574\u6570\u5206\u5272\u6210\u82e5\u5e72\u4e2a\u8d28\u6570\u4e4b\u79ef\u7684\u64cd\u4f5c\u53eb\u505a\u5206\u89e3\u8d28\u56e0\u6570\u3002\u73b0\u5728\uff0c\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570N\uff0c\u8bf7\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5bf9\u5176\u5206\u89e3\u8d28\u56e0\u6570\u3002 Input Format \u8f93\u5165\u4e3a\u4e00\u884c\uff0c\u6b63\u6574\u6570N\uff0c\u4fdd\u8bc1\\( 1 < N < 2147483647 \\)\u3002 Output Format \u8f93\u51faN\u7684\u8d28\u56e0\u6570\u5206\u89e3\u5f62\u5f0f\uff0c\u683c\u5f0f\u4e3a N=P1(E1)P2(E2)P3(E3).... \u5176\u4e2d\uff0cP1\u3001P2\u3001P3\u3001\u2026\u2026\u4e3a\u7ec4\u6210N\u7684\u5404\u4e2a\u8d28\u56e0\u5b50\uff0c \u6ee1\u8db3P1 < P2 < P3 < ...\uff1bE1\u3001E2\u3001E3\u3001\u2026\u2026\u5206\u522b\u4e3aP1\u3001P2\u3001P3\u3001\u2026\u2026\u5728N\u4e2d\u7684\u6307\u6570\u3002 \u4f8b\u5982\uff1a 20=2*2*5 \u5e94\u8be5\u8f93\u51fa\u6210\uff1a 20=2(2)5(1) Hint N\u7684\u5927\u4e8esqrt(N)\u7684\u8d28\u56e0\u5b50\u81f3\u591a\u6709\u4e00\u4e2a\u3002(sqrt(n)\u6307N\u7684\u5f00\u65b9\u53d6\u6574) Sample Input 20 Sample Output 20=2(2)5(1) FineArtz's solution Star /* \u5206\u89e3\u8d28\u56e0\u6570 */ #include <iostream> #include <cmath> #include <map> using namespace std; bool isp(int x){ for (int i = 2; i <= trunc(sqrt(x)); ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int nn = n; map<int, int> ans; for (int i = 2; i <= trunc(sqrt(nn)); ++i){ if (isp(i)){ while (n % i == 0){ ++ans[i]; n /= i; } } } if (n != 1) ++ans[n]; cout << nn << \"=\"; for (map<int, int>::iterator i = ans.begin(); i != ans.end(); ++i) cout << i->first << '(' << i->second << ')'; cout << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cmath> using namespace std; const int MAXSIZE = 10000; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; int Pnums[MAXSIZE][2], count = 0; cin >> n; cout << n << \"=\"; int num = 2; while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!count) { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } else { if (i == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } } n /= i; num = i; break; } } } if (n == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = n; Pnums[count][1] = 1; } for (int i = 1; i <= count; ++i) cout << Pnums[i][0] << \"(\" << Pnums[i][1] << \")\"; return 0; }","title":"1020"},{"location":"nr/1020/#1020","text":"\u9898\u76ee","title":"1020 \u5206\u89e3\u8d28\u56e0\u6570"},{"location":"nr/1020/#fineartzs-solution-star","text":"/* \u5206\u89e3\u8d28\u56e0\u6570 */ #include <iostream> #include <cmath> #include <map> using namespace std; bool isp(int x){ for (int i = 2; i <= trunc(sqrt(x)); ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int nn = n; map<int, int> ans; for (int i = 2; i <= trunc(sqrt(nn)); ++i){ if (isp(i)){ while (n % i == 0){ ++ans[i]; n /= i; } } } if (n != 1) ++ans[n]; cout << nn << \"=\"; for (map<int, int>::iterator i = ans.begin(); i != ans.end(); ++i) cout << i->first << '(' << i->second << ')'; cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1020/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cmath> using namespace std; const int MAXSIZE = 10000; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; int Pnums[MAXSIZE][2], count = 0; cin >> n; cout << n << \"=\"; int num = 2; while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!count) { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } else { if (i == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } } n /= i; num = i; break; } } } if (n == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = n; Pnums[count][1] = 1; } for (int i = 1; i <= count; ++i) cout << Pnums[i][0] << \"(\" << Pnums[i][1] << \")\"; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1021/","text":"1021 \u4ece\u524d\u6709\u5ea7\u5c71 \u9898\u76ee Description \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u7684\u4fef\u89c6\u56fe\u662f\u4e00\u4e2a\\(n \\times n\\)\u7684\u77e9\u5f62\uff0c\\( (1,1) \\)\u4f4d\u7f6e\u6d77\u62d4\u6700\u4f4e\u4e3a\\(1\\)\uff0c\u7136\u540e\u6d77\u62d4\u6cbf\u73af\u5f62\u4f9d\u6b21\u5347\u9ad8\u3002 \u7ed9\u5b9an\u7684\u503c\uff0c\u8f93\u51fa\u8fd9\u5ea7\u5c71\u7684\u6d77\u62d4\u9ad8\u5ea6\u56fe\u3002 Input Format \u8f93\u5165\u4ec5\u6709\u4e00\u884c\uff0c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570\\(n\\)\u3002 Output Format \u8f93\u51fa\u4e3a\u8fd9\u5ea7\u5c71\u7684\u6d77\u62d4\u9ad8\u5ea6\u56fe\u3002 Sample Input 4 Sample Output 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7 Hint \u9996\u5148\u7a0b\u5e8f #include <iomanip> \u5047\u8bbe\u8981\u8f93\u51fa a \uff0c\u5c06 cout << a \u6539\u6210 cout << setw(6) << a Limits \u5bf9\u4e8e20%\u7684\u6570\u636e\uff0c\\( N<10 \\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\( N<150 \\) VictriD's solution Star #include <iomanip> #include <iostream> using namespace std; inline int& min(int& s1, int& s2) { return s1 < s2 ? s1 : s2; } int calc(int i, int j, int n) { int p = min(min(i, n + 1 - i), min(j, n + 1 - j)); if (i == p) return j - i + 1 + 4 * (n - p + 1) * (p - 1); if (i == n + 1 - p) return 3 * n - j - 5 * p + 4 * (n - p + 1) * (p - 1) + 4; if (j == p) return j - i + 4 * n - 8 * p + 4 * (n - p + 1) * (p - 1) + 5; else return i + n - 3 * p + 4 * (n - p + 1) * (p - 1) + 2; } int main() { int n; cin >> n; for (int i = 0; i < n; i++) { if (i) cout << endl; for (int j = 0; j < n; j++) { cout << setw(6) << calc(i + 1, j + 1, n); } } return 0; } FineArtz's solution Star /* \u4ece\u524d\u6709\u5ea7\u5c71 */ #include <iostream> #include <iomanip> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cout << setw(6) << step(n, j, i) + 1; } cout << endl; } return 0; } vvvvv1v's solution Star #include <iostream> #include <iomanip> using namespace std; int MAXSIZE = 200; int main(void) { int mountain[MAXSIZE][MAXSIZE], n, sum, i = 1, j = 1, count = 0; cin >> n; sum = n * n; for (int k = 1; k <= n; ++k) for (int l = 1; l <= n; ++l) mountain[k][l] = 0; mountain[i][j] = ++count; --sum; while (sum > 0) { while(sum > 0 && j < n && !mountain[i][j + 1]) { mountain[i][++j] = ++count; --sum; } while(sum > 0 && i < n && !mountain[i + 1][j]) { mountain[++i][j] = ++count; --sum; } while(sum > 0 && j > 1 && !mountain[i][j - 1]) { mountain[i][--j] = ++count; --sum; } while(sum > 0 && i > 1 && !mountain[i - 1][j]) { mountain[--i][j] = ++count; --sum; } } for (int k = 1; k <= n; ++k) { for (int l = 1; l <= n; ++l) { cout << setw(6) << mountain[k][l]; } if (k < n) cout << endl; } return 0; }","title":"1021"},{"location":"nr/1021/#1021","text":"\u9898\u76ee","title":"1021 \u4ece\u524d\u6709\u5ea7\u5c71"},{"location":"nr/1021/#victrids-solution-star","text":"#include <iomanip> #include <iostream> using namespace std; inline int& min(int& s1, int& s2) { return s1 < s2 ? s1 : s2; } int calc(int i, int j, int n) { int p = min(min(i, n + 1 - i), min(j, n + 1 - j)); if (i == p) return j - i + 1 + 4 * (n - p + 1) * (p - 1); if (i == n + 1 - p) return 3 * n - j - 5 * p + 4 * (n - p + 1) * (p - 1) + 4; if (j == p) return j - i + 4 * n - 8 * p + 4 * (n - p + 1) * (p - 1) + 5; else return i + n - 3 * p + 4 * (n - p + 1) * (p - 1) + 2; } int main() { int n; cin >> n; for (int i = 0; i < n; i++) { if (i) cout << endl; for (int j = 0; j < n; j++) { cout << setw(6) << calc(i + 1, j + 1, n); } } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1021/#fineartzs-solution-star","text":"/* \u4ece\u524d\u6709\u5ea7\u5c71 */ #include <iostream> #include <iomanip> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cout << setw(6) << step(n, j, i) + 1; } cout << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1021/#vvvvv1vs-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; int MAXSIZE = 200; int main(void) { int mountain[MAXSIZE][MAXSIZE], n, sum, i = 1, j = 1, count = 0; cin >> n; sum = n * n; for (int k = 1; k <= n; ++k) for (int l = 1; l <= n; ++l) mountain[k][l] = 0; mountain[i][j] = ++count; --sum; while (sum > 0) { while(sum > 0 && j < n && !mountain[i][j + 1]) { mountain[i][++j] = ++count; --sum; } while(sum > 0 && i < n && !mountain[i + 1][j]) { mountain[++i][j] = ++count; --sum; } while(sum > 0 && j > 1 && !mountain[i][j - 1]) { mountain[i][--j] = ++count; --sum; } while(sum > 0 && i > 1 && !mountain[i - 1][j]) { mountain[--i][j] = ++count; --sum; } } for (int k = 1; k <= n; ++k) { for (int l = 1; l <= n; ++l) { cout << setw(6) << mountain[k][l]; } if (k < n) cout << endl; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1022/","text":"1022 Fib\u6570\u5217 \u9898\u76ee Description \u5b9a\u4e49Fib\u6570\u5217\uff1a\\( 1,1,2,3,5,8,13,\\dots \\) \u6c42\u7b2c\\(N\\)\u9879\u9664\u4ee5\\(2010\\)\u7684\u4f59\u6570 Input Format \u8f93\u5165\u4ec5\u4e00\u884c\uff0c\u4e3a\u4e00\u4e2a\u6574\u6570\\(N\\) Output Format \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u4e3a\u7b2c\\(N\\)\u9879\u9664\u4ee5\\(2010\\)\u7684\u4f59\u6570 Sample Input 3 Sample Output 2 Limits: \u5bf9\u4e8e70%\u7684\u6570\u636e \\( N \\leq 1,000,000 \\) \u5bf9\u4e8e100%\u7684\u6570\u636e \\( N \\leq 210,000,000,000 \\) FineArtz's solution Star /* Fib\u6570\u5217 */ #include <iostream> using namespace std; const int MOD = 2010; class Mat{ public: //constructor Mat(const int &x, const int &y, const int &p, const int &q) : a11(x), a12(y), a21(p), a22(q) {} Mat() : Mat(0, 0, 0, 0) {}; Mat(const Mat &m) : a11(m.a11), a12(m.a12), a21(m.a21), a22(m.a22) {}; long long a11, a12, a21, a22; }; Mat operator *(const Mat &lhs, const Mat &rhs){ long long a11 = (lhs.a11 * rhs.a11 + lhs.a12 * rhs.a21) % MOD; long long a12 = (lhs.a11 * rhs.a12 + lhs.a12 * rhs.a22) % MOD; long long a21 = (lhs.a21 * rhs.a11 + lhs.a22 * rhs.a21) % MOD; long long a22 = (lhs.a21 * rhs.a12 + lhs.a22 * rhs.a22) % MOD; return Mat(a11, a12, a21, a22); } Mat QuickPow(Mat a, long long pow){ Mat ret(1, 0, 0, 1); while (pow != 0){ if (pow & 1) ret = ret * a; a = a * a; pow >>= 1; } return ret; } int main(){ long long n; cin >> n; if (n == 1 || n == 2){ cout << 1 << endl; return 0; } Mat f0(1, 0, 1, 0), f(1, 1, 1, 0); Mat ans = QuickPow(f, n - 2); cout << (ans.a11 + ans.a12) % MOD << endl; return 0; }","title":"1022"},{"location":"nr/1022/#1022-fib","text":"\u9898\u76ee","title":"1022 Fib\u6570\u5217"},{"location":"nr/1022/#fineartzs-solution-star","text":"/* Fib\u6570\u5217 */ #include <iostream> using namespace std; const int MOD = 2010; class Mat{ public: //constructor Mat(const int &x, const int &y, const int &p, const int &q) : a11(x), a12(y), a21(p), a22(q) {} Mat() : Mat(0, 0, 0, 0) {}; Mat(const Mat &m) : a11(m.a11), a12(m.a12), a21(m.a21), a22(m.a22) {}; long long a11, a12, a21, a22; }; Mat operator *(const Mat &lhs, const Mat &rhs){ long long a11 = (lhs.a11 * rhs.a11 + lhs.a12 * rhs.a21) % MOD; long long a12 = (lhs.a11 * rhs.a12 + lhs.a12 * rhs.a22) % MOD; long long a21 = (lhs.a21 * rhs.a11 + lhs.a22 * rhs.a21) % MOD; long long a22 = (lhs.a21 * rhs.a12 + lhs.a22 * rhs.a22) % MOD; return Mat(a11, a12, a21, a22); } Mat QuickPow(Mat a, long long pow){ Mat ret(1, 0, 0, 1); while (pow != 0){ if (pow & 1) ret = ret * a; a = a * a; pow >>= 1; } return ret; } int main(){ long long n; cin >> n; if (n == 1 || n == 2){ cout << 1 << endl; return 0; } Mat f0(1, 0, 1, 0), f(1, 1, 1, 0); Mat ans = QuickPow(f, n - 2); cout << (ans.a11 + ans.a12) % MOD << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1023/","text":"1023 \u77e9\u9635\u7ffb\u8f6c \u9898\u76ee Description \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u65b9\u5f62\u7684\u6574\u6570\u77e9\u9635\uff0c\u8f93\u51fa\u5c06\u8be5\u77e9\u9635\u6309\u67d0\u4e00\u65b9\u5411\u7ffb\u8f6c\u540e\u7684\u7ed3\u679c\u3002 Input Format \u8f93\u5165\u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u4e00\u5171\u6709n\u7ec4\u6570\u636e\uff1bn\u4e0d\u4f1a\u4e3a\u8d1f\u6570\u3002 \u4e4b\u540e\u6709n\u7ec4\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff1a \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570a\u548cb\uff0c\u5206\u522b\u8868\u793a\u6b63\u65b9\u5f62\u77e9\u9635\u7684\u8fb9\u957f\uff0c\u4ee5\u53ca\u7ffb\u8f6c\u7684\u65b9\u5411\u3002 \u5f53b=0\u65f6\u6c34\u5e73\u7ffb\u8f6c\uff0c\u5f53b=1\u65f6\u7ad6\u76f4\u7ffb\u8f6c\uff0c\u5f53b=2\u65f6\u4ee5\u4e3b\u5bf9\u89d2\u7ebf\u4e3a\u8f74\u7ffb\u8f6c\u3002 b\u4e0d\u4f1a\u53d6\u5176\u4ed6\u503c\u3002 Output Format \u8f93\u51fa\u5171\u6709n\u7ec4\uff0c\u5206\u522b\u5bf9\u5e94n\u7ec4\u8f93\u5165\uff0c\u8f93\u51fa\u76f8\u5e94\u77e9\u9635\u7ffb\u8f6c\u540e\u7684\u7ed3\u679c\uff08\u4ecd\u662f\u4e00\u4e2a\u77e9\u9635\uff09\u3002 \u76f8\u90bb\u77e9\u9635\u3001\u76f8\u90bb\u884c\u4e4b\u95f4\u6ca1\u6709\u7a7a\u884c\uff0c\u4e00\u884c\u4e2d\u76f8\u90bb\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u7a7a\u683c\u3002 Sample Input 2 2 0 -2 4 8 -16 3 2 1 2 3 4 5 6 7 8 9 Sample Output 4 -2 -16 8 1 4 7 2 5 8 3 6 9 Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\\( n \\leq 100 \\)\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(n \\leq 1000 \\)\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u77e9\u9635\u7684\u8fb9\u957f\\(a \\leq 600\\)\u3002 VictriD's solution Star #include <iostream> using namespace std; void output(int***,int,int,int); int main(){ int totalMatricesCount; cin >> totalMatricesCount; int ***totalMatricesPointer=new int**[totalMatricesCount]; int *MatrixFloorPointer=new int[totalMatricesCount]; int *MatrixRotatePointer=new int[totalMatricesCount]; for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ cin >> *(MatrixFloorPointer+Matrixnum); cin >> *(MatrixRotatePointer+Matrixnum); *(totalMatricesPointer+Matrixnum)=new int *[*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) *(*(totalMatricesPointer+Matrixnum)+row)=new int [*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) for(int column=0;column<*(MatrixFloorPointer+Matrixnum);column++) cin >>*(*(*(totalMatricesPointer+Matrixnum)+row)+column); } for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ output(totalMatricesPointer+Matrixnum,*(MatrixFloorPointer+Matrixnum),*(MatrixRotatePointer+Matrixnum),Matrixnum); } return 0; } void output(int*** totalMatricesPointer,int floor,int rotate,int NOT_FIRST_MATIRX_FLAG){ if(NOT_FIRST_MATIRX_FLAG)cout << endl; bool NOT_FIRST_ROW_FLAG=false; bool NOT_FIRST_COLUMN_FLAG=false; for(int row=0;row<floor;row++){ if(NOT_FIRST_ROW_FLAG)cout << endl; NOT_FIRST_ROW_FLAG = true; for(int column=0;column<floor;column++){ if(NOT_FIRST_COLUMN_FLAG)cout << ' '; NOT_FIRST_COLUMN_FLAG = true; if(rotate==2)cout << *(*(*(totalMatricesPointer)+column)+row); if(rotate==1)cout << *(*(*(totalMatricesPointer)+(floor-row-1))+column); if(rotate==0)cout << *(*(*(totalMatricesPointer)+row)+(floor-column-1)); } NOT_FIRST_COLUMN_FLAG = false; } return; } FineArtz's solution Star /* \u77e9\u9635\u53cd\u8f6c */ #include <iostream> using namespace std; int mat[605][605] = {0}; void trans(const int &n, const int &k){ switch(k){ case 0: for (int i = 1; i <= n; ++i){ for (int j = n; j >= 1; --j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 1: for (int i = n; i >= 1; --i){ for (int j = 1; j <= n; ++j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 2: for (int j = 1; j <= n; ++j){ for (int i = 1; i <= n; ++i) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; default: break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ int a, b; cin >> a >> b; for (int i = 1; i <= a; ++i) for (int j = 1; j <= a; ++j) cin >> mat[i][j]; trans(a, b); } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; const int MAXSIZE = 700; struct matrix { int size; int** square; }; int main(void) { int n; cin >> n; matrix* arr; arr = new matrix[n]; for (int i = 0; i < n; ++i) { int method; cin >> arr[i].size >> method; arr[i].square = new int*[arr[i].size]; for (int j = 0; j < arr[i].size; ++j) arr[i].square[j] = new int[arr[i].size]; if (method == 0) for (int j = 0; j < arr[i].size; ++j) for (int k = arr[i].size - 1; k >= 0; --k) cin >> arr[i].square[j][k]; else if (method == 1) for (int j = arr[i].size - 1; j >= 0; --j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[j][k]; else if (method == 2) for (int j = 0; j < arr[i].size; ++j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[k][j]; } for (int i = 0; i < n; ++i) for (int j = 0; j < arr[i].size; ++j) { for (int k = 0; k < arr[i].size; ++k) { cout << arr[i].square[j][k]; if (k < arr[i].size - 1) cout << \" \"; } if (i < n - 1 || j < arr[i].size - 1) cout << endl; } return 0; }","title":"1023"},{"location":"nr/1023/#1023","text":"\u9898\u76ee","title":"1023 \u77e9\u9635\u7ffb\u8f6c"},{"location":"nr/1023/#victrids-solution-star","text":"#include <iostream> using namespace std; void output(int***,int,int,int); int main(){ int totalMatricesCount; cin >> totalMatricesCount; int ***totalMatricesPointer=new int**[totalMatricesCount]; int *MatrixFloorPointer=new int[totalMatricesCount]; int *MatrixRotatePointer=new int[totalMatricesCount]; for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ cin >> *(MatrixFloorPointer+Matrixnum); cin >> *(MatrixRotatePointer+Matrixnum); *(totalMatricesPointer+Matrixnum)=new int *[*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) *(*(totalMatricesPointer+Matrixnum)+row)=new int [*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) for(int column=0;column<*(MatrixFloorPointer+Matrixnum);column++) cin >>*(*(*(totalMatricesPointer+Matrixnum)+row)+column); } for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ output(totalMatricesPointer+Matrixnum,*(MatrixFloorPointer+Matrixnum),*(MatrixRotatePointer+Matrixnum),Matrixnum); } return 0; } void output(int*** totalMatricesPointer,int floor,int rotate,int NOT_FIRST_MATIRX_FLAG){ if(NOT_FIRST_MATIRX_FLAG)cout << endl; bool NOT_FIRST_ROW_FLAG=false; bool NOT_FIRST_COLUMN_FLAG=false; for(int row=0;row<floor;row++){ if(NOT_FIRST_ROW_FLAG)cout << endl; NOT_FIRST_ROW_FLAG = true; for(int column=0;column<floor;column++){ if(NOT_FIRST_COLUMN_FLAG)cout << ' '; NOT_FIRST_COLUMN_FLAG = true; if(rotate==2)cout << *(*(*(totalMatricesPointer)+column)+row); if(rotate==1)cout << *(*(*(totalMatricesPointer)+(floor-row-1))+column); if(rotate==0)cout << *(*(*(totalMatricesPointer)+row)+(floor-column-1)); } NOT_FIRST_COLUMN_FLAG = false; } return; }","title":"VictriD's solution Star"},{"location":"nr/1023/#fineartzs-solution-star","text":"/* \u77e9\u9635\u53cd\u8f6c */ #include <iostream> using namespace std; int mat[605][605] = {0}; void trans(const int &n, const int &k){ switch(k){ case 0: for (int i = 1; i <= n; ++i){ for (int j = n; j >= 1; --j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 1: for (int i = n; i >= 1; --i){ for (int j = 1; j <= n; ++j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 2: for (int j = 1; j <= n; ++j){ for (int i = 1; i <= n; ++i) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; default: break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ int a, b; cin >> a >> b; for (int i = 1; i <= a; ++i) for (int j = 1; j <= a; ++j) cin >> mat[i][j]; trans(a, b); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1023/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; const int MAXSIZE = 700; struct matrix { int size; int** square; }; int main(void) { int n; cin >> n; matrix* arr; arr = new matrix[n]; for (int i = 0; i < n; ++i) { int method; cin >> arr[i].size >> method; arr[i].square = new int*[arr[i].size]; for (int j = 0; j < arr[i].size; ++j) arr[i].square[j] = new int[arr[i].size]; if (method == 0) for (int j = 0; j < arr[i].size; ++j) for (int k = arr[i].size - 1; k >= 0; --k) cin >> arr[i].square[j][k]; else if (method == 1) for (int j = arr[i].size - 1; j >= 0; --j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[j][k]; else if (method == 2) for (int j = 0; j < arr[i].size; ++j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[k][j]; } for (int i = 0; i < n; ++i) for (int j = 0; j < arr[i].size; ++j) { for (int k = 0; k < arr[i].size; ++k) { cout << arr[i].square[j][k]; if (k < arr[i].size - 1) cout << \" \"; } if (i < n - 1 || j < arr[i].size - 1) cout << endl; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1024/","text":"1024 \u6392\u5e8f \u9898\u76ee Input Format \u7b2c\u4e00\u884c\uff1a\u6b63\u6574\u6570\\(n\\)\uff0c\u8868\u793a\u9700\u8981\u6392\u5e8f\u7684\u6570\u5b57\u7684\u4e2a\u6570\uff1b \u7b2c\u4e8c\u884c\uff1a\\(n\\)\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u9700\u8981\u6392\u5e8f\u7684\u6570\u5b57\u3002 Output Format \u8f93\u51fa\u5171\u4e00\u884c\uff0c\\(n\\)\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002 Sample Input 3 2 1 3 Sample Output 1 2 3 Limits \\( n < 10000 \\)\uff0c\u65f6\u95f4\u9650\u52361000ms\uff0c\u5185\u5b58\u9650\u523630000kb\u3002 FineArtz's solution Star /* \u6392\u5e8f */ #include <iostream> #include <algorithm> using namespace std; int n; int a[10005]; void qsort(int l, int h){ int i = l, j = h; int m = a[(l + j) / 2]; while (i < j){ while (a[i] < m) ++i; while (a[j] > m) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < h) qsort(i, h); if (j > l) qsort(l, j); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int divide(int arr[], int low, int high) { int k = arr[low]; do { while (low < high && arr[high] > k) --high; if (low < high) { arr[low] = arr[high]; ++low; } while (low < high && arr[low] < k) ++low; if (low < high) { arr[high] = arr[low]; --high; } }while (low < high); arr[low] = k; return low; } void quicksort(int arr[], int low, int high) { int mid; if (low >= high) return; mid = divide(arr, low, high); quicksort(arr, low, mid - 1); quicksort(arr, mid + 1, high); } int main(void) { int n; cin >> n; int* arr; arr = new int[n]; for (int i = 0; i < n; ++i) cin >> arr[i]; quicksort(arr, 0, n - 1); for (int i = 0; i < n; ++i) { cout << arr[i]; if (i < n - 1) cout << \" \"; } return 0; }","title":"1024"},{"location":"nr/1024/#1024","text":"\u9898\u76ee","title":"1024 \u6392\u5e8f"},{"location":"nr/1024/#fineartzs-solution-star","text":"/* \u6392\u5e8f */ #include <iostream> #include <algorithm> using namespace std; int n; int a[10005]; void qsort(int l, int h){ int i = l, j = h; int m = a[(l + j) / 2]; while (i < j){ while (a[i] < m) ++i; while (a[j] > m) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < h) qsort(i, h); if (j > l) qsort(l, j); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1024/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int divide(int arr[], int low, int high) { int k = arr[low]; do { while (low < high && arr[high] > k) --high; if (low < high) { arr[low] = arr[high]; ++low; } while (low < high && arr[low] < k) ++low; if (low < high) { arr[high] = arr[low]; --high; } }while (low < high); arr[low] = k; return low; } void quicksort(int arr[], int low, int high) { int mid; if (low >= high) return; mid = divide(arr, low, high); quicksort(arr, low, mid - 1); quicksort(arr, mid + 1, high); } int main(void) { int n; cin >> n; int* arr; arr = new int[n]; for (int i = 0; i < n; ++i) cin >> arr[i]; quicksort(arr, 0, n - 1); for (int i = 0; i < n; ++i) { cout << arr[i]; if (i < n - 1) cout << \" \"; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1025/","text":"1025 \u6c34\u67aa\u706d\u706b \u9898\u76ee Description \u4ee5\u6b64\u9898\u7eaa\u5ff5\u4e0a\u6d77\u201c11\u202215\u201d\u9ad8\u697c\u706b\u707e\u9047\u5bb3\u8005 11\u670815\u65e5\u4e0b\u5348\uff0c\u4e0a\u6d77\u9759\u5b89\u533a\u80f6\u5dde\u8def728\u53f7\u7684\u4e00\u5e6228\u5c42\u6c11\u5b85\u53d1\u751f\u4e25\u91cd\u706b\u707e\u3002\u6d88\u9632\u90e8\u95e8\u63a5\u8b66\u540e\u7acb\u523b\u51fa\u52a825\u4e2a\u6d88\u9632\u4e2d\u961f\u3001\u767e\u4f59\u8f86\u6d88\u9632\u8f66\u6295\u5165\u706d\u706b\u62a2\u6551\u884c\u52a8\uff0c\u7d27\u6025\u758f\u6563\u548c\u6551\u52a9\u4e86\u9644\u8fd1\u5c45\u6c11\u767e\u4f59\u4eba\u3002\u706b\u707e\u5bfc\u81f458\u4eba\u9047\u96be\u3002 \u6b64\u65f6\u5927\u697c\u7684\u6240\u6709\u697c\u5c42\u5df2\u7ecf\u5168\u90e8\u88ab\u70c8\u706b\u5305\u56f4\uff0c\u6bcf\u8f86\u6d88\u9632\u8f66\u7684\u9ad8\u538b\u6c34\u67aa\u53ef\u4ee5\u5bf9\u8fde\u7eed\u7684\u82e5\u5e72\u4e2a\u697c\u5c42\u8fdb\u884c\u706d\u706b\uff0c\u628a\u9ad8\u697c\u770b\u6210\u7ad6\u76f4\u7684y\u8f74\uff08\u539f\u70b9\u53ef\u653e\u5728\u4efb\u610f\u4f4d\u7f6e\uff09\uff0c\u82e5\u4e00\u8f86\u6d88\u9632\u8f66\u5bf9[10,1000]\u8fd9\u6bb5\u533a\u57df\u706d\u706b\uff0c\u521910\u52301000\u8fd9\u6bb5\u533a\u57df\u7684\u706b\u5c31\u88ab\u6251\u706d\u4e86\u3002\u8bf7\u6c42\u51fa\u5728\u6240\u6709\u6d88\u9632\u8f66\u5b8c\u6210\u706d\u706b\u5de5\u4f5c\u540e\uff0c\u5df2\u7ecf\u88ab\u6251\u706d\u7684\u533a\u57df\u7684\u603b\u957f\u5ea6\u3002 \u9ad8\u538b\u6c34\u67aa\u5bf9\u4e8e\u63a7\u5236\u706b\u52bf\u8d77\u7740\u5f88\u5173\u952e\u7684\u4f5c\u7528\u3002\u975e\u5e38\u9057\u61be\u7684\u662f\uff0c\u5bf9\u4e8e28\u697c\u7684\u5efa\u7b51\uff0c\u4e0a\u6d77\u9ad8\u538b\u6c34\u67aa\u7684\u55b7\u5c04\u9ad8\u5ea6\u201c\u53ea\u80fd\u5230\u5341\u697c\u201d\u3002 Input Format \u7b2c\u4e00\u884c\uff1aN \uff08\u6d88\u9632\u8f66\u7684\u6570\u76ee\uff09 \u4ee5\u540eN\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\uff1aAi Bi (\u8868\u793a\u7b2ci\u4e2a\u6d88\u9632\u8f66\u706d\u706b\u533a\u57df\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ec8\u6b62\u4f4d\u7f6e) \\( -10^{9} \\leq Ai , Bi \\leq 10^{9} \\) \\( N \\leq 20000 \\) \u82e5 \\( Ai=Bi \\)\uff0c\u6b64\u6bb5\u533a\u57df\u5c31\u662f\u4e00\u4e2a\u70b9\uff0c\u770b\u4f5c\u6ca1\u6709\u957f\u5ea6\u3002 Output Format \u8f93\u51fa\u88ab\u6251\u706d\u533a\u57df\u7684\u603b\u957f\u5ea6\u3002 Sample Input 3 -1 1 5 11 2 9 Sample Output 11 FineArtz's solution Star /* \u6c34\u67aa\u706d\u706b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[20005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"1025"},{"location":"nr/1025/#1025","text":"\u9898\u76ee","title":"1025 \u6c34\u67aa\u706d\u706b"},{"location":"nr/1025/#fineartzs-solution-star","text":"/* \u6c34\u67aa\u706d\u706b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[20005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1026/","text":"1026 \u9ad8\u7cbe\u5ea6\u9664\u6cd5 \u9898\u76ee Description \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570A\u548cB\uff0c\u6c42A/B\u3002 Input Format \u7b2c\u4e00\u884c\uff1aA \u7b2c\u4e8c\u884c\uff1aB \u4fdd\u8bc1A\u548cB\u7684\u4f4d\u6570\u5c11\u4e8e\u6216\u7b49\u4e8e10000\u3002 Output Format \u4e00\u884c\uff0cA/B Sample Input 10 5 Sample Output 2 FineArtz's solution Star /* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <cstdio> #include <string> using namespace std; const int MAXS = 10005; int sub(int a[], int b[], int lena, int lenb, int shift = 0){ if (lena < lenb + shift) return -1; if (lena == lenb + shift){ for (int i = lenb; i >= 1; --i){ if (a[i + shift] > b[i]) break; if (a[i + shift] < b[i]) return -1; } } for (int i = shift + 1; i <= lena; ++i){ a[i] -= b[i - shift]; if (a[i] < 0){ a[i] += 10; --a[i + 1]; } } for (int i = lena; i != 0; --i){ if (a[i]) return i; } return 0; } int a[MAXS] = {0}, b[MAXS] = {0}, ans[MAXS] = {0}; int main(){ string s1, s2; bool flag = 1; getline(cin ,s1); getline(cin, s2); while (s1.size() != 0 && s1[0] == '0') s1.erase(s1.begin()); while (s2.size() != 0 && s2[0] == '0') s2.erase(s2.begin()); int lena = s1.size(), lenb = s2.size(); if (lena == 0){ printf(\"0\\n\"); return 0; } for (int i = 1; i <= lena; ++i) a[i] = s1[lena - i] - '0'; for (int i = 1; i <= lenb; ++i) b[i] = s2[lenb - i] - '0'; if (lena < lenb){ printf(\"0\\n\"); return 0; } int def = lena - lenb; int sublen = 0; for (int i = def; i >= 0; --i){ while ((sublen = sub(a, b, lena, lenb, i)) >= 0){ lena = sublen; ++ans[i + 1]; } } int len = def + 1; while (len >= 1 && ans[len] == 0) --len; if (len > 0){ for (int i = len; i != 0; --i) printf(\"%d\", ans[i]); } else printf(\"0\"); return 0; }","title":"1026"},{"location":"nr/1026/#1026","text":"\u9898\u76ee","title":"1026 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1026/#fineartzs-solution-star","text":"/* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <cstdio> #include <string> using namespace std; const int MAXS = 10005; int sub(int a[], int b[], int lena, int lenb, int shift = 0){ if (lena < lenb + shift) return -1; if (lena == lenb + shift){ for (int i = lenb; i >= 1; --i){ if (a[i + shift] > b[i]) break; if (a[i + shift] < b[i]) return -1; } } for (int i = shift + 1; i <= lena; ++i){ a[i] -= b[i - shift]; if (a[i] < 0){ a[i] += 10; --a[i + 1]; } } for (int i = lena; i != 0; --i){ if (a[i]) return i; } return 0; } int a[MAXS] = {0}, b[MAXS] = {0}, ans[MAXS] = {0}; int main(){ string s1, s2; bool flag = 1; getline(cin ,s1); getline(cin, s2); while (s1.size() != 0 && s1[0] == '0') s1.erase(s1.begin()); while (s2.size() != 0 && s2[0] == '0') s2.erase(s2.begin()); int lena = s1.size(), lenb = s2.size(); if (lena == 0){ printf(\"0\\n\"); return 0; } for (int i = 1; i <= lena; ++i) a[i] = s1[lena - i] - '0'; for (int i = 1; i <= lenb; ++i) b[i] = s2[lenb - i] - '0'; if (lena < lenb){ printf(\"0\\n\"); return 0; } int def = lena - lenb; int sublen = 0; for (int i = def; i >= 0; --i){ while ((sublen = sub(a, b, lena, lenb, i)) >= 0){ lena = sublen; ++ans[i + 1]; } } int len = def + 1; while (len >= 1 && ans[len] == 0) --len; if (len > 0){ for (int i = len; i != 0; --i) printf(\"%d\", ans[i]); } else printf(\"0\"); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1027/","text":"1027 \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 \u9898\u76ee Description \u5e7d\u4f1a\u8ba1\u5212 \u4e8c\u54e5\u5982\u4eca\u5728TNCM\u673a\u573a\u505a\u7a7a\u7ba1\u3002\u4e8c\u54e5\u4e0d\u5e78\u88ab\u5206\u914d\u5230\u4e86\u8fdb\u8fd1\u5e2d\uff0c\u8fdb\u8fd1\u5e2d\u4f4d\u8981\u8d1f\u8d23\u5904\u7406\u6240\u6709\u51c6\u5907\u964d\u843d\u5728\u673a\u573a\u7684\u98de\u673a\uff0c\u8ba9\u4ed6\u4eec\u5e73\u7a33\u5730\u843d\u5728\u8dd1\u9053\u4e0a\u3002\u98de\u673a\u964d\u843d\u4e00\u822c\u9075\u5faa\u4e94\u8fb9\u8fdb\u8fd1\u822a\u56fe\uff0c\u4e0d\u8fc7\u5728\u8fd9\u9053\u9898\u76ee\u4e2d\u4f60\u4e0d\u9700\u8981\u5173\u5fc3\u4ec0\u4e48\u662f\u4e94\u8fb9\u8fdb\u8fd1\uff0c\u53ea\u8981\u770b\u4e0b\u9762\u8fd9\u5f20\u56fe\u3002 \u4e00\u67b6\u98de\u673a\u603b\u662f\u4ece\u4e0b\u6ed1\u9053\u5165\u53e3\uff08A\u70b9\uff09\u5f00\u59cb\u63a5\u53d7\u4e8c\u54e5\u7ba1\u5236\uff0c\u76f4\u5230\u964d\u843d\u6210\u529f\uff08B\u70b9\uff09\u3002\u98de\u673a\u4e0d\u4f1a\u662f\u540c\u4e00\u578b\u53f7\u7684\uff0c\u901f\u5ea6\u4e5f\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u4eceA\u70b9\u5230B\u70b9\u6240\u9700\u7684\u65f6\u95f4\u4e0d\u540c\u3002\u4e8c\u54e5\u5f97\u5c0f\u5fc3\u4e00\u70b9\uff0c\u4e0d\u80fd\u628a\u4e8b\u60c5\u641e\u7838\u4e86\uff1a\uff081\uff09\u4e0b\u6ed1\u9053\u5185\u4e0d\u5141\u8bb8\u98de\u673a\u4e92\u76f8\u8d85\u8d8a\uff1b\uff082\uff09\u4e00\u67b6\u98de\u673a\u964d\u843d\u4e4b\u540e\uff0c\u81f3\u5c11\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u624d\u5141\u8bb8\u4e0b\u4e00\u67b6\u98de\u673a\u964d\u843d\uff08\u5373\u5230\u8fbeB\u7684\u65f6\u95f4\u95f4\u9694\u8981\u5927\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u503c\uff09\u3002 \u4e8c\u54e5\u662f\u4e2a\u806a\u660e\u7684\u4eba\uff0c\u4ed6\u5199\u4e86\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5e2e\u4ed6\u63a7\u5236\u6240\u6709\u98de\u673a\uff0c\u7136\u540e\u4ed6\u5c31\u53ef\u4ee5\u559d\u8336\u53bb\u4e86\u3002\u4e8c\u54e5\u7684\u7b56\u7565\u662f\uff1a\u901a\u8fc7\u62d2\u7edd\u67d0\u4e9b\u98de\u673a\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u6765\u4fdd\u8bc1\u4e0b\u6ed1\u9053\u4e0a\u7684\u98de\u673a\u6c38\u8fdc\u4e0d\u4f1a\u8ddd\u79bb\u592a\u8fd1\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u8981\u98de\u673a\u88ab\u5141\u8bb8\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5c31\u53ef\u4ee5\u5b89\u5168\u964d\u843d\u3002 \u6bcf\u5f53\u4e00\u67b6\u98de\u673a\u6765\u5230\u4e0b\u6ed1\u9053\u7684\u5165\u53e3\u65f6\uff0c\u4e8c\u54e5\u7684\u7a0b\u5e8f\u5c31\u4f1a\u5224\u65ad\uff1a\u5982\u679c\u5141\u8bb8\u8fd9\u67b6\u98de\u673a\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5b83\u80fd\u5426\u5b89\u5168\u964d\u843d\u3002\u5982\u679c\u80fd\u5b89\u5168\u964d\u843d\uff0c\u4e8c\u54e5\u5c31\u5141\u8bb8\u4ed6\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5426\u5219\u4e8c\u54e5\u4f1a\u7acb\u5373\u8981\u6c42\u8fd9\u67b6\u98de\u673a\u5728A\u70b9\u590d\u98de\u3002 \u539f\u5219\u4e0a\uff0c\u4e24\u67b6\u98de\u673a\u4e0d\u5e94\u8be5\u540c\u65f6\u51fa\u73b0\u5728A\u70b9\uff0c\u4f46\u8fd9\u79cd\u60c5\u51b5\u663e\u7136\u53ef\u80fd\u51fa\u73b0\u3002\u5982\u679c\u771f\u7684\u51fa\u73b0\u4e86\u8fd9\u79cd\u60c5\u51b5\uff0c\u5219\u8bf4\u660e\u7a7a\u7ba1\u5c40\u8fd9\u6b21\u5f7b\u5e95\u628a\u4e8b\u60c5\u641e\u7838\uff0c\u4e8c\u54e5\u7684\u7b56\u7565\u663e\u7136\u53ef\u80fd\u662f\u8bf1\u56e0\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u5728\u672a\u6765\u7684\u4e00\u6bb5\u65f6\u95f4\u5185\uff0c\u5171\u6709N\u67b6\u98de\u673a\u8981\u964d\u843d\uff0c\u4ed6\u4eec\u4f1a\u5728Ti\u65f6\u523b\u9996\u6b21\u51fa\u73b0\u5728\u4e0b\u6ed1\u9053\u5165\u53e3\uff0c\u4ed6\u4eec\u4eceA\u70b9\u5230B\u70b9\u9700\u8981\u7684\u65f6\u95f4\u4e3aUi\u3002\u5982\u679c\u4ed6\u4eec\u88ab\u4e8c\u54e5\u547d\u4ee4\u5728A\u70b9\u590d\u98de\uff0c\u4ed6\u4eec\u4f1a\u5728Gi\u5206\u949f\u540e\u518d\u6b21\u51fa\u73b0\u5728\u4e0b\u6ed1\u9053\u5165\u53e3\u3002\u98de\u673a\u7684\u5b89\u5168\u964d\u843d\u95f4\u9694\u662fS\u3002 \u73b0\u5728\uff0c\u4e8c\u54e5\u7684\u5973\u670b\u53cb\u627e\u5230\u4f60\uff0c\u8bf7\u4f60\u8ba1\u7b97\u4e00\u4e0b\u6bcf\u67b6\u98de\u673a\u4f1a\u5728\u7b2c\u51e0\u5206\u949f\u5b8c\u6210\u964d\u843d\u3002\u8fd9\u6837\u5979\u53ef\u4ee5\u4f30\u7b97\u51fa\u4e8c\u54e5\u4ec0\u4e48\u65f6\u5019\u4e0b\u73ed\uff0c\u4ee5\u4fbf\u7792\u7740\u4e8c\u54e5\u53bb\u548c\u60c5\u4eba\u53bb\u5e7d\u4f1a\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6b63\u6574\u6570N\u3001MAX\u3001S\uff0c\u8868\u793a\u6709\u591a\u5c11\u98de\u673a\uff0c\u6700\u957f\u6a21\u62df\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u5b89\u5168\u964d\u843d\u65f6\u95f4\u95f4\u9694\u3002 \u4e4b\u540e\u6709N\u884c\uff0c\u6bcf\u884c\u6709\u4e09\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4f9d\u6b21\u4e3aTi\u3001Ui\u3001Gi\uff0c\u5206\u522b\u8868\u793a\u7b2ci\u67b6\u98de\u673a\u7684\u9996\u6b21\u5230\u8fbe\u65f6\u95f4\u3001\u4eceA\u70b9\u5230B\u70b9\u8017\u65f6\u3001\u590d\u98de\u8017\u65f6\u3002 \\( N \\leq 1000 \\) \\( MAX \\leq 1000000 \\) \\( S \\leq 1000 \\) \\( Ti \\leq 1000000 \\) \uff0c\\( Ui \\leq 1000 \\) \uff0c\\( Gi \\leq 1000 \\) Output Format \u5047\u8bbe\u5728MAX\u65f6\u523b\u4e4b\u524d([0..MAX-1])\uff0c\u6709\u98de\u673a\u540c\u65f6\u51fa\u73b0\u5728\u4e86\u4e0b\u6ed1\u9053\u53e3\uff0c\u5219\u8f93\u51fa\u201cCHANGE BOYFRIEND\u201d\uff0c\u56e0\u4e3a\u98de\u673a\u649e\u4e86\uff0c\u4e09\u54e5\u4f30\u8ba1\u8981\u4e0b\u5c97\u4e86\uff0c\u5979\u53ef\u4ee5\u6362\u4e00\u4e2a\u7537\u670b\u53cb\u4e86\u3002 \u5047\u8bbe\u5728MAX\u65f6\u523b\u4e4b\u524d\u6ca1\u6709\u98de\u673a\u76f8\u649e\uff0c\u4f46\u6a21\u62df\u7ed3\u675f\u540e\u4ecd\u7136\u6709\u98de\u673a\u6ca1\u6709\u964d\u843d\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u201cGO DATING\u201d\uff0c\u4ee5\u8868\u793a\u4e09\u54e5\u7684\u5973\u670b\u53cb\u53ef\u4ee5\u653e\u5fc3\u5927\u80c6\u5730\u5e7d\u4f1a\u53bb\u4e86\u3002 \u5426\u5219\u8f93\u51faN\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b2ci\u67b6\u98de\u673a\u6700\u7ec8\u964d\u843d\u7684\u65f6\u523b\u3002 Sample Input 4 20 2 0 2 5 1 2 1 5 2 1 6 10 10 Sample Output 2 4 7 16 Sample Input 3 10 2 0 2 5 1 2 3 4 1 1 Sample Output CHANGE BOYFRIEND \u6837\u4f8b\u89e3\u91ca \u5206\u6790\uff1a 0\u65f6\u523b\uff0c\u7b2c\u4e00\u67b6\u98de\u673a\u5230\u8fbeA\uff0c\u4e8c\u54e5\u5141\u8bb8\u4ed6\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5728\u7b2c2\u65f6\u523b\u964d\u843d\u3002 1\u65f6\u523b\uff0c\u7b2c\u4e8c\u67b6\u98de\u673a\u5230\u8fbeA\uff0c\u4e8c\u54e5\u8981\u6c42\u4ed6\u590d\u98de\uff0c\u56e0\u4e3a\u964d\u843d\u95f4\u8ddd\u5c0f\u4e8e\u5b89\u5168\u6807\u51c6\u3002 2\u65f6\u523b\uff0c\u7b2c\u4e8c\u67b6\u98de\u673a\u590d\u98de\u540e\u518d\u6b21\u56de\u5230A\uff0c\u4e8c\u54e5\u5141\u8bb8\u4ed6\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5728\u7b2c4\u65f6\u523b\u964d\u843d\u3002 5\u65f6\u523b\uff0c\u7b2c\u4e09\u67b6\u98de\u673a\u5230\u8fbeA\uff0c\u4e8c\u54e5\u5141\u8bb8\u4ed6\u8fdb\u5165\u4e0b\u6ed1\u9053\uff0c\u5728\u7b2c7\u65f6\u523b\u964d\u843d 6\u65f6\u523b\uff0c\u7b2c\u56db\u67b6\u98de\u673a\u5230\u8fbeA\uff0c\u4e8c\u54e5\u5141\u8bb8\u4ed6\u964d\u843d\uff0c\u5728\u7b2c16\u65f6\u523b\u964d\u843d\u3002 \u5206\u6790\uff1a \u57284\u65f6\u523b\uff0c\u7b2c\u4e8c\u67b6\u98de\u673a\u548c\u7b2c\u4e09\u67b6\u98de\u673a\u4f1a\u76f8\u649e\u3002 FineArtz's solution Star /* \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 */ #include <iostream> #include <algorithm> using namespace std; class plane{ public: int i = 0, u = 0, g = 0; }; plane timee[1000005]; int down[1005]; int n, m, s; bool canDown(int t1, int t2){ if (t2 == -1) return true; if ((t1 + timee[t1].u) - (t2 + timee[t2].u) >= s) return true; return false; } int main(){ cin >> n >> m >> s; bool flag = false; for (int i = 1; i <= n; ++i){ int t; plane tp; cin >> t >> tp.u >> tp.g; tp.i = i; if (t > m){ flag = true; continue; } if (timee[t].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[t] = tp; } int lastDown = -1; for (int t = 0; t <= m; ++t){ if (timee[t].i == 0) continue; if (canDown(t, lastDown)){ lastDown = t; int tt = t + timee[t].u; if (tt > m) flag = true; else (down[timee[t].i] = tt); } else{ int tt = t + timee[t].g; if (tt > m){ flag = true; continue; } if (timee[tt].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[tt] = timee[t]; } } if (flag) cout << \"GO DATING\" << endl; else for (int i = 1; i <= n; ++i) cout << down[i] << endl; return 0; }","title":"1027"},{"location":"nr/1027/#1027","text":"\u9898\u76ee","title":"1027 \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1"},{"location":"nr/1027/#fineartzs-solution-star","text":"/* \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 */ #include <iostream> #include <algorithm> using namespace std; class plane{ public: int i = 0, u = 0, g = 0; }; plane timee[1000005]; int down[1005]; int n, m, s; bool canDown(int t1, int t2){ if (t2 == -1) return true; if ((t1 + timee[t1].u) - (t2 + timee[t2].u) >= s) return true; return false; } int main(){ cin >> n >> m >> s; bool flag = false; for (int i = 1; i <= n; ++i){ int t; plane tp; cin >> t >> tp.u >> tp.g; tp.i = i; if (t > m){ flag = true; continue; } if (timee[t].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[t] = tp; } int lastDown = -1; for (int t = 0; t <= m; ++t){ if (timee[t].i == 0) continue; if (canDown(t, lastDown)){ lastDown = t; int tt = t + timee[t].u; if (tt > m) flag = true; else (down[timee[t].i] = tt); } else{ int tt = t + timee[t].g; if (tt > m){ flag = true; continue; } if (timee[tt].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[tt] = timee[t]; } } if (flag) cout << \"GO DATING\" << endl; else for (int i = 1; i <= n; ++i) cout << down[i] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1028/","text":"1028 \u8bed\u53e5\u5339\u914d \u9898\u76ee Description Pascal\u8bed\u8a00\u4e2d\uff0c\u590d\u5408\u8bed\u53e5\u7528begin...end\u8868\u793a\uff0c\u6761\u4ef6\u8bed\u53e5\u7528if...then...else...\u8868\u793a\uff0c\u5176\u4e2d\uff0celse\u5b50\u53e5\u53ef\u4ee5\u51fa\u73b0\u4e5f\u53ef\u4ee5\u4e0d\u51fa\u73b0\u3002\u73b0\u5728\u63d0\u53d6\u51fa\u4e00\u4e9b\u8bed\u53e5\u4e2d\u7684\u6240\u6709begin\u3001end\u3001if\u3001then\u3001else\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u68c0\u67e5\u5b83\u4eec\u80fd\u5426\u5339\u914d\uff0c\u4ee5\u6784\u6210\u82e5\u5e72\u6761\u5408\u6cd5\u7684\u8bed\u53e5\u3002 Input Format \u8f93\u5165\u5305\u542b\u4e24\u884c\u3002 \u7b2c1\u884c\uff1a\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u63a5\u4e0b\u6765\u6709N\u4e2a\u5b57\u7b26\u4e32\u5c06\u8bfb\u5165\u3002 \u7b2c2\u884c\uff1a\u5305\u542bN\u4e2a\u5b57\u7b26\u4e32\uff0c\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f{\"begin\",\"end\",\"if\",\"then\",\"else\"}\u4e4b\u4e00\uff08\u4e0d\u5305\u62ec\u5f15\u53f7\uff09\u3002\u8fd9\u4e9b\u5b57\u7b26\u4e32\u8868\u793a\u4ece\u4e00\u7cfb\u5217\u8bed\u53e5\u4e2d\u4f9d\u6b21\u63d0\u53d6\u51fa\u7684\u6240\u6709\u5143\u7d20\u3002 Output Format \u82e5\u8f93\u5165\u53ef\u4ee5\u6784\u6210\u82e5\u5e72\u6761\u5408\u6cd5\u8bed\u53e5\uff0c\u8f93\u51fa\u4e00\u884c\"YES\"\uff0c\u5426\u5219\u8f93\u51fa\u4e00\u884c\"NO\"\u3002\uff08\u4e0d\u5305\u542b\u5f15\u53f7\uff09 Sample Input 9 if then begin if then begin end end else Sample Output YES Sample Input 4 if begin end then Sample Output NO \u8bf4\u660e \\( N \\leq 100 \\) \u6ce8\u610fbegin...end\u4e0d\u80fd\u4f5c\u4e3a\u5224\u65ad\u6761\u4ef6\u3002\uff08\u89c1\u6837\u4f8b2\uff09 \u6ce8\u610fthen\u4e0eelse\u4e4b\u540e\u90fd\u5141\u8bb8\u51fa\u73b0\u4e0d\u6b62\u4e00\u6761if\u8bed\u53e5\u6216\u590d\u5408\u8bed\u53e5\u3002 \u611f\u8c22\u8042\u6b65\u9752\u63d0\u4f9b\u52a0\u5f3a\u6570\u636e\u3002 FineArtz's solution Star /* \u8bed\u53e5\u5339\u914d */ #include <iostream> #include <string> #include <stack> using namespace std; int main(){ int n; cin >> n; stack<string> state; while(n--){ string s; cin >> s; if (state.empty()){ if (s == \"then\" || s == \"end\" || s == \"else\"){ cout << \"NO\" << endl; return 0; } state.push(s); continue; } string t = state.top(); if (s == \"then\"){ if (t != \"if\"){ cout << \"NO\" << endl; return 0; } else{ state.pop(); state.push(s); } } else if (s == \"else\"){ if (t == \"begin\" || t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"then\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"end\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"begin\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"begin\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } else if (s == \"if\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } } while (!state.empty() && state.top() == \"then\") state.pop(); if (!state.empty()) cout << \"NO\" << endl; else cout << \"YES\" << endl; return 0; }","title":"1028"},{"location":"nr/1028/#1028","text":"\u9898\u76ee","title":"1028 \u8bed\u53e5\u5339\u914d"},{"location":"nr/1028/#fineartzs-solution-star","text":"/* \u8bed\u53e5\u5339\u914d */ #include <iostream> #include <string> #include <stack> using namespace std; int main(){ int n; cin >> n; stack<string> state; while(n--){ string s; cin >> s; if (state.empty()){ if (s == \"then\" || s == \"end\" || s == \"else\"){ cout << \"NO\" << endl; return 0; } state.push(s); continue; } string t = state.top(); if (s == \"then\"){ if (t != \"if\"){ cout << \"NO\" << endl; return 0; } else{ state.pop(); state.push(s); } } else if (s == \"else\"){ if (t == \"begin\" || t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"then\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"end\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"begin\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"begin\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } else if (s == \"if\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } } while (!state.empty() && state.top() == \"then\") state.pop(); if (!state.empty()) cout << \"NO\" << endl; else cout << \"YES\" << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1029/","text":"1029 \u6574\u7406\u4e66\u67b6 \u9898\u76ee Description \u4e8c\u54e5\u53c8\u8981\u6574\u7406\u4e66\u67b6\u4e86\u3002\u4ed6\u6574\u7406\u4e66\u67b6\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\uff0c\u628a\u4e66\u67b6\u4e0a\u4e00\u6392\u6240\u6709\u7684\u4e66\u5168\u90e8\u632a\u5230\u53e6\u4e00\u6392\u7684\u540e\u9762\u3002\u73b0\u5728\u4e8c\u54e5\u628a\u5b83\u6574\u7406\u7684\u987a\u5e8f\u544a\u8bc9\u4f60\uff0c\u4f60\u6765\u544a\u8bc9\u4ed6\u6574\u7406\u4e4b\u540e\u7684\u4e66\u67b6\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002 Input Format \u8bfb\u5165\u4e00\u4e2a\u6570 \\( n \\leq 100 \\)\uff0c\u8868\u793a\u4e66\u67b6\u4e00\u5171\u6709n\u6392\uff0c\u63a5\u4e0b\u6765\u6709n\u884c\uff0c\u6bcf\u884c\u6709\u4e00\u4e9b\u6570\u5b57(\u4e0d\u591a\u4e8e100\u4e2a\u6570)\uff0c\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u4e00\u672c\u4e66\uff0c\u6bcf\u4e00\u884c\u8868\u8ff0\u8fd9\u4e00\u6392\u4e66\u67b6\u4e0a\u7684\u4e66\u3002\u518d\u4e0b\u6765\u6709n-1\u4e2a\u6570\u5bf9\uff0c\u6570\u5bf9x\uff0cy\u8868\u793a\u628a\u7b2cx\u6392\u7684\u4e66\u653e\u5230\u7b2cy\u6392\u7684\u540e\u9762\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u8f93\u51fa\u6700\u540e\u4e00\u6392\u7684\u6240\u6709\u4e66\u3002 Sample Input 3 1 2 3 4 5 6 7 3 1 2 1 Sample Output 1 2 3 6 7 4 5 FineArtz's solution Star /* \u6574\u7406\u4e66\u67b6 */ #include <iostream> #include <sstream> #include <vector> using namespace std; int main(){ int n; cin >> n; vector<vector<int>> book; string ss; getline(cin, ss); for (int i = 1; i <= n ; ++i){ string st; getline(cin, st); istringstream iss(st); int t; vector<int> tv; while (iss >> t) tv.push_back(t); book.push_back(tv); } for (int i = 1; i < n; ++i){ int x, y; cin >> x >> y; book[y - 1].insert(book[y - 1].end(), book[x - 1].begin(), book[x - 1].end()); book[x - 1].clear(); } for (int i = n - 1; i >= 0; --i){ if (!book[i].empty()){ for (auto j : book[i]){ cout << j << ' '; } cout << endl; return 0; } } return 0; }","title":"1029"},{"location":"nr/1029/#1029","text":"\u9898\u76ee","title":"1029 \u6574\u7406\u4e66\u67b6"},{"location":"nr/1029/#fineartzs-solution-star","text":"/* \u6574\u7406\u4e66\u67b6 */ #include <iostream> #include <sstream> #include <vector> using namespace std; int main(){ int n; cin >> n; vector<vector<int>> book; string ss; getline(cin, ss); for (int i = 1; i <= n ; ++i){ string st; getline(cin, st); istringstream iss(st); int t; vector<int> tv; while (iss >> t) tv.push_back(t); book.push_back(tv); } for (int i = 1; i < n; ++i){ int x, y; cin >> x >> y; book[y - 1].insert(book[y - 1].end(), book[x - 1].begin(), book[x - 1].end()); book[x - 1].clear(); } for (int i = n - 1; i >= 0; --i){ if (!book[i].empty()){ for (auto j : book[i]){ cout << j << ' '; } cout << endl; return 0; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1031/","text":"1031 \u4e8c\u54e5\u5728\u9ec4\u5c71 \u9898\u76ee Description \u4e8c\u54e5\u4e0e\u5973\u670b\u53cb\u5230\u9ec4\u5c71\u65c5\u884c\u3002\u4ed6\u4eec\u5728\u5c71\u4e0a\u73a9\u4e86\u4e00\u6574\u5929\uff0c\u53d1\u73b0\u5929\u8272\u5df2\u665a\uff0c\u8be5\u56de\u5bb6\u4e86\u3002\u800c\u7a81\u7136\u53c8\u5f00\u59cb\u4e0b\u8d77\u4e86\u96e8\uff0c\u4e8c\u54e5\u7684\u5973\u670b\u53cb\u8868\u793a\u975e\u5e38\u4e0d\u723d\uff1a\u201c\u90fd\u662f\u4f60\u641e\u7684\uff0c\u65e9\u77e5\u9053\u5c31\u4e0d\u548c\u4f60\u6765\u4e86\u3002\u201d \u4e8c\u54e5\u5f53\u7136\u4e0d\u80fd\u629b\u4e0b\u5973\u670b\u53cb\u4e0d\u7ba1\uff0c\u5e76\u4e14\u4e8c\u54e5\u4e5f\u4e0d\u60f3\u9732\u5bbf\u5728\u5c71\u4e0a\u3002\u4e8e\u662f\u4ed6\u644a\u5f00\u88ab\u96e8\u6dcb\u6e7f\u7684\u5730\u56fe\u3002 \u9ec4\u5c71\u5730\u56fe\u662f\u4e00\u4e2aN*N\u7684\u77e9\u9635\uff0c\u77e9\u9635\u4e2d\u7684\u6bcf\u4e00\u9879\u8868\u793a\u90a3\u4e2a\u5730\u65b9\u7684\u9ad8\u5ea6\u3002\u4e8c\u54e5\u4e0e\u5973\u670b\u53cb\u5904\u5728\u5de6\u4e0a\u89d2\uff0c\u4ed6\u4eec\u7684\u4f4f\u5904\u5728\u53f3\u4e0b\u89d2\u3002\u5728\u77e9\u9635\u4e2d\u53ef\u4ee5\u671d\u4e0a\u4e0b\u5de6\u53f3\u8d70\uff0c\u4f46\u4e0d\u80fd\u6cbf\u7740\u5bf9\u89d2\u7ebf\u884c\u8d70\u3002\u4e8c\u54e5\u7684\u5973\u670b\u53cb\u4e0d\u559c\u6b22\u98a0\u7c38\uff0c\u6240\u4ee5\u4e8c\u54e5\u9700\u8981\u627e\u5230\u4e00\u6761\u56de\u5230\u4f4f\u5904\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6700\u9ad8\u70b9\u4e0e\u6700\u4f4e\u70b9\u4e4b\u5dee\u5c3d\u91cf\u5c0f\uff0c\u800c\u4e0d\u9700\u8981\u7ba1\u8fd9\u6761\u8def\u5f84\u6709\u591a\u957f\u3002 Input Format \u7b2c\u4e00\u884c\uff1aN \u63a5\u4e0b\u6765N\u884c N*N\u7684\u6574\u6570\u77e9\u9635\uff0c(\\(0 \\leq \u6bcf\u70b9\u7684\u9ad8\u5ea6 \\leq 110 \\) )\u3002 (\\(2 \\leq N \\leq 100 \\)) Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u98a0\u7c38\u6700\u5c0f\u7684\u8def\u5f84\u4e2d\u6700\u9ad8\u70b9\u4e0e\u6700\u4f4e\u70b9\u7684\u9ad8\u5ea6\u5dee\u3002 Sample Input 5 1 1 3 6 8 1 2 2 5 5 4 4 0 3 3 8 0 2 3 4 4 3 0 2 1 Sample Output 2 Source USACO 2003 U S Open FineArtz's solution Star /* \u4e8c\u54e5\u5728\u9ec4\u5c71 */ #include <iostream> #include <queue> using namespace std; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, a[105][105]; bool check(int low, int high){ if (a[1][1] < low || a[1][1] > high || a[n][n] < low || a[n][n] > high) return false; bool v[105][105] = {0}; queue<Point> q; Point now(1, 1), next; q.push(now); v[1][1] = true; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (next.x < 1 || next.x > n || next.y < 1 || next.y > n || v[next.x][next.y]) continue; if (a[next.x][next.y] < low || a[next.x][next.y] > high) continue; if (next.x == n && next.y == n) return true; q.push(next); v[next.x][next.y] = true; } } return false; } int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; int r = 110, l = 0; while (l < r){ int mid = (l + r) / 2; bool flag = false; for (int i = 0; i <= 110 - mid; ++i) if (check(i, i + mid)){ flag = true; break; } if (flag) r = mid; else l = mid + 1; } cout << l << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int A[101][101],n,queue[20000][2],head,tail,dir[4][2]={-1,0,1,0,0,-1,0,1}; bool visit[101][101]; void enqueue(int x,int y,int lowb,int upb) { int dx,dy; for (int i=0;i<4;++i){ dx=dir[i][0]; dy=dir[i][1]; if (x+dx>=0&&x+dx<n&&y+dy>=0&&y+dy<n&&!visit[x+dx][y+dy]&&A[x+dx][y+dy]<=upb&&A[x+dx][y+dy]>=lowb){ queue[tail][0]=x+dx; queue[tail][1]=y+dy; visit[x+dx][y+dy]=true; tail+=1; } } } int binarysearch(int low,int high) { int ans=0; int l=low; int r=high; int mid; bool flag; while (l<=r) { mid=(l+r)/2; flag=false; for (int k=max(0,A[0][0]-mid);k<=min(A[0][0],A[n-1][n-1]);++k) { for (int i=0;i<n;i++) for (int j=0;j<n;j++) visit[i][j]=0; queue[tail][0]=0; queue[tail][1]=0; visit[0][0]=true; head=0;tail=1; flag=false; while (head!=tail) { int x=queue[head][0]; int y=queue[head][1]; head+=1; if (x==n-1 && y==n-1) { flag=true; break; } enqueue(x,y,k,k+mid); } if (flag) break; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n; int high=0; for (int i=0;i<n;i++) for (int j=0;j<n;j++) { cin>>A[i][j]; if (A[i][j]>high) high=A[i][j]; } cout<<binarysearch(0,high); return 0; }","title":"1031"},{"location":"nr/1031/#1031","text":"\u9898\u76ee","title":"1031 \u4e8c\u54e5\u5728\u9ec4\u5c71"},{"location":"nr/1031/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5728\u9ec4\u5c71 */ #include <iostream> #include <queue> using namespace std; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, a[105][105]; bool check(int low, int high){ if (a[1][1] < low || a[1][1] > high || a[n][n] < low || a[n][n] > high) return false; bool v[105][105] = {0}; queue<Point> q; Point now(1, 1), next; q.push(now); v[1][1] = true; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (next.x < 1 || next.x > n || next.y < 1 || next.y > n || v[next.x][next.y]) continue; if (a[next.x][next.y] < low || a[next.x][next.y] > high) continue; if (next.x == n && next.y == n) return true; q.push(next); v[next.x][next.y] = true; } } return false; } int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; int r = 110, l = 0; while (l < r){ int mid = (l + r) / 2; bool flag = false; for (int i = 0; i <= 110 - mid; ++i) if (check(i, i + mid)){ flag = true; break; } if (flag) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1031/#washswangs-solution-star","text":"#include <iostream> using namespace std; int A[101][101],n,queue[20000][2],head,tail,dir[4][2]={-1,0,1,0,0,-1,0,1}; bool visit[101][101]; void enqueue(int x,int y,int lowb,int upb) { int dx,dy; for (int i=0;i<4;++i){ dx=dir[i][0]; dy=dir[i][1]; if (x+dx>=0&&x+dx<n&&y+dy>=0&&y+dy<n&&!visit[x+dx][y+dy]&&A[x+dx][y+dy]<=upb&&A[x+dx][y+dy]>=lowb){ queue[tail][0]=x+dx; queue[tail][1]=y+dy; visit[x+dx][y+dy]=true; tail+=1; } } } int binarysearch(int low,int high) { int ans=0; int l=low; int r=high; int mid; bool flag; while (l<=r) { mid=(l+r)/2; flag=false; for (int k=max(0,A[0][0]-mid);k<=min(A[0][0],A[n-1][n-1]);++k) { for (int i=0;i<n;i++) for (int j=0;j<n;j++) visit[i][j]=0; queue[tail][0]=0; queue[tail][1]=0; visit[0][0]=true; head=0;tail=1; flag=false; while (head!=tail) { int x=queue[head][0]; int y=queue[head][1]; head+=1; if (x==n-1 && y==n-1) { flag=true; break; } enqueue(x,y,k,k+mid); } if (flag) break; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n; int high=0; for (int i=0;i<n;i++) for (int j=0;j<n;j++) { cin>>A[i][j]; if (A[i][j]>high) high=A[i][j]; } cout<<binarysearch(0,high); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1032/","text":"1032 Ackerman\u51fd\u6570 \u9898\u76ee Description Ackerman\u51fd\u6570\u5b9a\u4e49\u4e3a\uff1a A(m, n) = n + 1, m = 0 A(m - 1, 1), m \u2260 0, n = 0 A(m - 1, A(m, n - 1)), m \u2260 0, n \u2260 0 Input Format \u4ec5\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570m, n ( \\( 0 \\leq m \\leq 3, 0 \\leq n \\leq 1000 \\) ). Output Format \u76f8\u5e94A(m, n)\u7684\u503c\u3002 Sample Input 2 30 Sample Output 63 VictriD's solution Star #include <iostream> using namespace std; long long int A(long long int m, long long int n) { if (m == 0) return (n + 1); if (n == 0) return A(m - 1, 1); else return A(m - 1, A(m, n - 1)); } int main() { long long int m, n; cin >> m >> n; cout << A(m, n); } FineArtz's solution Star /* Ackerman\u51fd\u6570 */ #include <iostream> #include <string> using namespace std; string a[4][1001] = {{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\"}, {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\", \"1002\"}, {\"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"33\", \"35\", \"37\", \"39\", \"41\", \"43\", \"45\", \"47\", \"49\", \"51\", \"53\", \"55\", \"57\", \"59\", \"61\", \"63\", \"65\", \"67\", \"69\", \"71\", \"73\", \"75\", \"77\", \"79\", \"81\", \"83\", \"85\", \"87\", \"89\", \"91\", \"93\", \"95\", \"97\", \"99\", \"101\", \"103\", \"105\", \"107\", \"109\", \"111\", \"113\", \"115\", \"117\", \"119\", \"121\", \"123\", \"125\", \"127\", \"129\", \"131\", \"133\", \"135\", \"137\", \"139\", \"141\", \"143\", \"145\", \"147\", \"149\", \"151\", \"153\", \"155\", \"157\", \"159\", \"161\", \"163\", \"165\", \"167\", \"169\", \"171\", \"173\", \"175\", \"177\", \"179\", \"181\", \"183\", \"185\", \"187\", \"189\", \"191\", \"193\", \"195\", \"197\", \"199\", \"201\", \"203\", \"205\", \"207\", \"209\", \"211\", \"213\", \"215\", \"217\", \"219\", \"221\", \"223\", \"225\", \"227\", \"229\", \"231\", \"233\", \"235\", \"237\", \"239\", \"241\", \"243\", \"245\", \"247\", \"249\", \"251\", \"253\", \"255\", \"257\", \"259\", \"261\", \"263\", \"265\", \"267\", \"269\", \"271\", \"273\", \"275\", \"277\", \"279\", \"281\", \"283\", \"285\", \"287\", \"289\", \"291\", \"293\", \"295\", \"297\", \"299\", \"301\", \"303\", \"305\", \"307\", \"309\", \"311\", \"313\", \"315\", \"317\", \"319\", \"321\", \"323\", \"325\", \"327\", \"329\", \"331\", \"333\", \"335\", \"337\", \"339\", \"341\", \"343\", \"345\", \"347\", \"349\", \"351\", \"353\", \"355\", \"357\", \"359\", \"361\", \"363\", \"365\", \"367\", \"369\", \"371\", \"373\", \"375\", \"377\", \"379\", \"381\", \"383\", \"385\", \"387\", \"389\", \"391\", \"393\", \"395\", \"397\", \"399\", \"401\", \"403\", \"405\", \"407\", \"409\", \"411\", \"413\", \"415\", \"417\", \"419\", \"421\", \"423\", \"425\", \"427\", \"429\", \"431\", \"433\", \"435\", \"437\", \"439\", \"441\", \"443\", \"445\", \"447\", \"449\", \"451\", \"453\", \"455\", \"457\", \"459\", \"461\", \"463\", \"465\", \"467\", \"469\", \"471\", \"473\", \"475\", \"477\", \"479\", \"481\", \"483\", \"485\", \"487\", \"489\", \"491\", \"493\", \"495\", \"497\", \"499\", \"501\", \"503\", \"505\", \"507\", \"509\", \"511\", \"513\", \"515\", \"517\", \"519\", \"521\", \"523\", \"525\", \"527\", \"529\", \"531\", \"533\", \"535\", \"537\", \"539\", \"541\", \"543\", \"545\", \"547\", \"549\", \"551\", \"553\", \"555\", \"557\", \"559\", \"561\", \"563\", \"565\", \"567\", \"569\", \"571\", \"573\", \"575\", \"577\", \"579\", \"581\", \"583\", \"585\", \"587\", \"589\", \"591\", \"593\", \"595\", \"597\", \"599\", \"601\", \"603\", \"605\", \"607\", \"609\", \"611\", \"613\", \"615\", \"617\", \"619\", \"621\", \"623\", \"625\", \"627\", \"629\", \"631\", \"633\", \"635\", \"637\", \"639\", \"641\", \"643\", \"645\", \"647\", \"649\", \"651\", \"653\", \"655\", \"657\", \"659\", \"661\", \"663\", \"665\", \"667\", \"669\", \"671\", \"673\", \"675\", \"677\", \"679\", \"681\", \"683\", \"685\", \"687\", \"689\", \"691\", \"693\", \"695\", \"697\", \"699\", \"701\", \"703\", \"705\", \"707\", \"709\", \"711\", \"713\", \"715\", \"717\", \"719\", \"721\", \"723\", \"725\", \"727\", \"729\", \"731\", \"733\", \"735\", \"737\", \"739\", \"741\", \"743\", \"745\", \"747\", \"749\", \"751\", \"753\", \"755\", \"757\", \"759\", \"761\", \"763\", \"765\", \"767\", \"769\", \"771\", \"773\", \"775\", \"777\", \"779\", \"781\", \"783\", \"785\", \"787\", \"789\", \"791\", \"793\", \"795\", \"797\", \"799\", \"801\", \"803\", \"805\", \"807\", \"809\", \"811\", \"813\", \"815\", \"817\", \"819\", \"821\", \"823\", \"825\", \"827\", \"829\", \"831\", \"833\", \"835\", \"837\", \"839\", \"841\", \"843\", \"845\", \"847\", \"849\", \"851\", \"853\", \"855\", \"857\", \"859\", \"861\", \"863\", \"865\", \"867\", \"869\", \"871\", \"873\", \"875\", \"877\", \"879\", \"881\", \"883\", \"885\", \"887\", \"889\", \"891\", \"893\", \"895\", \"897\", \"899\", \"901\", \"903\", \"905\", \"907\", \"909\", \"911\", \"913\", \"915\", \"917\", \"919\", \"921\", \"923\", \"925\", \"927\", \"929\", \"931\", \"933\", \"935\", \"937\", \"939\", \"941\", \"943\", \"945\", \"947\", \"949\", \"951\", \"953\", \"955\", \"957\", \"959\", \"961\", \"963\", \"965\", \"967\", \"969\", \"971\", \"973\", \"975\", \"977\", \"979\", \"981\", \"983\", \"985\", \"987\", \"989\", \"991\", \"993\", \"995\", \"997\", \"999\", \"1001\", \"1003\", \"1005\", \"1007\", \"1009\", \"1011\", \"1013\", \"1015\", \"1017\", \"1019\", \"1021\", \"1023\", \"1025\", \"1027\", \"1029\", \"1031\", \"1033\", \"1035\", \"1037\", \"1039\", \"1041\", \"1043\", \"1045\", \"1047\", \"1049\", \"1051\", \"1053\", \"1055\", \"1057\", \"1059\", \"1061\", \"1063\", \"1065\", \"1067\", \"1069\", \"1071\", \"1073\", \"1075\", \"1077\", \"1079\", \"1081\", \"1083\", \"1085\", \"1087\", \"1089\", \"1091\", \"1093\", \"1095\", \"1097\", \"1099\", \"1101\", \"1103\", \"1105\", \"1107\", \"1109\", \"1111\", \"1113\", \"1115\", \"1117\", \"1119\", \"1121\", \"1123\", \"1125\", \"1127\", \"1129\", \"1131\", \"1133\", \"1135\", \"1137\", \"1139\", \"1141\", \"1143\", \"1145\", \"1147\", \"1149\", \"1151\", \"1153\", \"1155\", \"1157\", \"1159\", \"1161\", \"1163\", \"1165\", \"1167\", \"1169\", \"1171\", \"1173\", \"1175\", \"1177\", \"1179\", \"1181\", \"1183\", \"1185\", \"1187\", \"1189\", \"1191\", \"1193\", \"1195\", \"1197\", \"1199\", \"1201\", \"1203\", \"1205\", \"1207\", \"1209\", \"1211\", \"1213\", \"1215\", \"1217\", \"1219\", \"1221\", \"1223\", \"1225\", \"1227\", \"1229\", \"1231\", \"1233\", \"1235\", \"1237\", \"1239\", \"1241\", \"1243\", \"1245\", \"1247\", \"1249\", \"1251\", \"1253\", \"1255\", \"1257\", \"1259\", \"1261\", \"1263\", \"1265\", \"1267\", \"1269\", \"1271\", \"1273\", \"1275\", \"1277\", \"1279\", \"1281\", \"1283\", \"1285\", \"1287\", \"1289\", \"1291\", \"1293\", \"1295\", \"1297\", \"1299\", \"1301\", \"1303\", \"1305\", \"1307\", \"1309\", \"1311\", \"1313\", \"1315\", \"1317\", \"1319\", \"1321\", \"1323\", \"1325\", \"1327\", \"1329\", \"1331\", \"1333\", \"1335\", \"1337\", \"1339\", \"1341\", \"1343\", \"1345\", \"1347\", \"1349\", \"1351\", \"1353\", \"1355\", \"1357\", \"1359\", \"1361\", \"1363\", \"1365\", \"1367\", \"1369\", \"1371\", \"1373\", \"1375\", \"1377\", \"1379\", \"1381\", \"1383\", \"1385\", \"1387\", \"1389\", \"1391\", \"1393\", \"1395\", \"1397\", \"1399\", \"1401\", \"1403\", \"1405\", \"1407\", \"1409\", \"1411\", \"1413\", \"1415\", \"1417\", \"1419\", \"1421\", \"1423\", \"1425\", \"1427\", \"1429\", \"1431\", \"1433\", \"1435\", \"1437\", \"1439\", \"1441\", \"1443\", \"1445\", \"1447\", \"1449\", \"1451\", \"1453\", \"1455\", \"1457\", \"1459\", \"1461\", \"1463\", \"1465\", \"1467\", \"1469\", \"1471\", \"1473\", \"1475\", \"1477\", \"1479\", \"1481\", \"1483\", \"1485\", \"1487\", \"1489\", \"1491\", \"1493\", \"1495\", \"1497\", \"1499\", \"1501\", \"1503\", \"1505\", \"1507\", \"1509\", \"1511\", \"1513\", \"1515\", \"1517\", \"1519\", \"1521\", \"1523\", \"1525\", \"1527\", \"1529\", \"1531\", \"1533\", \"1535\", \"1537\", \"1539\", \"1541\", \"1543\", \"1545\", \"1547\", \"1549\", \"1551\", \"1553\", \"1555\", \"1557\", \"1559\", \"1561\", \"1563\", \"1565\", \"1567\", \"1569\", \"1571\", \"1573\", \"1575\", \"1577\", \"1579\", \"1581\", \"1583\", \"1585\", \"1587\", \"1589\", \"1591\", \"1593\", \"1595\", \"1597\", \"1599\", \"1601\", \"1603\", \"1605\", \"1607\", \"1609\", \"1611\", \"1613\", \"1615\", \"1617\", \"1619\", \"1621\", \"1623\", \"1625\", \"1627\", \"1629\", \"1631\", \"1633\", \"1635\", \"1637\", \"1639\", \"1641\", \"1643\", \"1645\", \"1647\", \"1649\", \"1651\", \"1653\", \"1655\", \"1657\", \"1659\", \"1661\", \"1663\", \"1665\", \"1667\", \"1669\", \"1671\", \"1673\", \"1675\", \"1677\", \"1679\", \"1681\", \"1683\", \"1685\", \"1687\", \"1689\", \"1691\", \"1693\", \"1695\", \"1697\", \"1699\", \"1701\", \"1703\", \"1705\", \"1707\", \"1709\", \"1711\", \"1713\", \"1715\", \"1717\", \"1719\", \"1721\", \"1723\", \"1725\", \"1727\", \"1729\", \"1731\", \"1733\", \"1735\", \"1737\", \"1739\", \"1741\", \"1743\", \"1745\", \"1747\", \"1749\", \"1751\", \"1753\", \"1755\", \"1757\", \"1759\", \"1761\", \"1763\", \"1765\", \"1767\", \"1769\", \"1771\", \"1773\", \"1775\", \"1777\", \"1779\", \"1781\", \"1783\", \"1785\", \"1787\", \"1789\", \"1791\", \"1793\", \"1795\", \"1797\", \"1799\", \"1801\", \"1803\", \"1805\", \"1807\", \"1809\", \"1811\", \"1813\", \"1815\", \"1817\", \"1819\", \"1821\", \"1823\", \"1825\", \"1827\", \"1829\", \"1831\", \"1833\", \"1835\", \"1837\", \"1839\", \"1841\", \"1843\", \"1845\", \"1847\", \"1849\", \"1851\", \"1853\", \"1855\", \"1857\", \"1859\", \"1861\", \"1863\", \"1865\", \"1867\", \"1869\", \"1871\", \"1873\", \"1875\", \"1877\", \"1879\", \"1881\", \"1883\", \"1885\", \"1887\", \"1889\", \"1891\", \"1893\", \"1895\", \"1897\", \"1899\", \"1901\", \"1903\", \"1905\", \"1907\", \"1909\", \"1911\", \"1913\", \"1915\", \"1917\", \"1919\", \"1921\", \"1923\", \"1925\", \"1927\", \"1929\", \"1931\", \"1933\", \"1935\", \"1937\", \"1939\", \"1941\", \"1943\", \"1945\", \"1947\", \"1949\", \"1951\", \"1953\", \"1955\", \"1957\", \"1959\", \"1961\", \"1963\", \"1965\", \"1967\", \"1969\", \"1971\", \"1973\", \"1975\", \"1977\", \"1979\", \"1981\", \"1983\", \"1985\", \"1987\", \"1989\", \"1991\", \"1993\", \"1995\", \"1997\", \"1999\", \"2001\", \"2003\"}, {} }; int main(){ int m, n; cin >> m >> n; cout << a[m][n] << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int Ackerman(int m, int n) { if (m == 0) return n + 1; else if (n == 0) return Ackerman(m - 1, 1); else return Ackerman(m - 1, Ackerman(m, n - 1)); } int main() { int m, n; cin >> m >> n; cout << Ackerman(m, n); return 0; }","title":"1032"},{"location":"nr/1032/#1032-ackerman","text":"\u9898\u76ee","title":"1032 Ackerman\u51fd\u6570"},{"location":"nr/1032/#victrids-solution-star","text":"#include <iostream> using namespace std; long long int A(long long int m, long long int n) { if (m == 0) return (n + 1); if (n == 0) return A(m - 1, 1); else return A(m - 1, A(m, n - 1)); } int main() { long long int m, n; cin >> m >> n; cout << A(m, n); }","title":"VictriD's solution Star"},{"location":"nr/1032/#fineartzs-solution-star","text":"/* Ackerman\u51fd\u6570 */ #include <iostream> #include <string> using namespace std; string a[4][1001] = {{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\"}, {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\", \"1002\"}, {\"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"33\", \"35\", \"37\", \"39\", \"41\", \"43\", \"45\", \"47\", \"49\", \"51\", \"53\", \"55\", \"57\", \"59\", \"61\", \"63\", \"65\", \"67\", \"69\", \"71\", \"73\", \"75\", \"77\", \"79\", \"81\", \"83\", \"85\", \"87\", \"89\", \"91\", \"93\", \"95\", \"97\", \"99\", \"101\", \"103\", \"105\", \"107\", \"109\", \"111\", \"113\", \"115\", \"117\", \"119\", \"121\", \"123\", \"125\", \"127\", \"129\", \"131\", \"133\", \"135\", \"137\", \"139\", \"141\", \"143\", \"145\", \"147\", \"149\", \"151\", \"153\", \"155\", \"157\", \"159\", \"161\", \"163\", \"165\", \"167\", \"169\", \"171\", \"173\", \"175\", \"177\", \"179\", \"181\", \"183\", \"185\", \"187\", \"189\", \"191\", \"193\", \"195\", \"197\", \"199\", \"201\", \"203\", \"205\", \"207\", \"209\", \"211\", \"213\", \"215\", \"217\", \"219\", \"221\", \"223\", \"225\", \"227\", \"229\", \"231\", \"233\", \"235\", \"237\", \"239\", \"241\", \"243\", \"245\", \"247\", \"249\", \"251\", \"253\", \"255\", \"257\", \"259\", \"261\", \"263\", \"265\", \"267\", \"269\", \"271\", \"273\", \"275\", \"277\", \"279\", \"281\", \"283\", \"285\", \"287\", \"289\", \"291\", \"293\", \"295\", \"297\", \"299\", \"301\", \"303\", \"305\", \"307\", \"309\", \"311\", \"313\", \"315\", \"317\", \"319\", \"321\", \"323\", \"325\", \"327\", \"329\", \"331\", \"333\", \"335\", \"337\", \"339\", \"341\", \"343\", \"345\", \"347\", \"349\", \"351\", \"353\", \"355\", \"357\", \"359\", \"361\", \"363\", \"365\", \"367\", \"369\", \"371\", \"373\", \"375\", \"377\", \"379\", \"381\", \"383\", \"385\", \"387\", \"389\", \"391\", \"393\", \"395\", \"397\", \"399\", \"401\", \"403\", \"405\", \"407\", \"409\", \"411\", \"413\", \"415\", \"417\", \"419\", \"421\", \"423\", \"425\", \"427\", \"429\", \"431\", \"433\", \"435\", \"437\", \"439\", \"441\", \"443\", \"445\", \"447\", \"449\", \"451\", \"453\", \"455\", \"457\", \"459\", \"461\", \"463\", \"465\", \"467\", \"469\", \"471\", \"473\", \"475\", \"477\", \"479\", \"481\", \"483\", \"485\", \"487\", \"489\", \"491\", \"493\", \"495\", \"497\", \"499\", \"501\", \"503\", \"505\", \"507\", \"509\", \"511\", \"513\", \"515\", \"517\", \"519\", \"521\", \"523\", \"525\", \"527\", \"529\", \"531\", \"533\", \"535\", \"537\", \"539\", \"541\", \"543\", \"545\", \"547\", \"549\", \"551\", \"553\", \"555\", \"557\", \"559\", \"561\", \"563\", \"565\", \"567\", \"569\", \"571\", \"573\", \"575\", \"577\", \"579\", \"581\", \"583\", \"585\", \"587\", \"589\", \"591\", \"593\", \"595\", \"597\", \"599\", \"601\", \"603\", \"605\", \"607\", \"609\", \"611\", \"613\", \"615\", \"617\", \"619\", \"621\", \"623\", \"625\", \"627\", \"629\", \"631\", \"633\", \"635\", \"637\", \"639\", \"641\", \"643\", \"645\", \"647\", \"649\", \"651\", \"653\", \"655\", \"657\", \"659\", \"661\", \"663\", \"665\", \"667\", \"669\", \"671\", \"673\", \"675\", \"677\", \"679\", \"681\", \"683\", \"685\", \"687\", \"689\", \"691\", \"693\", \"695\", \"697\", \"699\", \"701\", \"703\", \"705\", \"707\", \"709\", \"711\", \"713\", \"715\", \"717\", \"719\", \"721\", \"723\", \"725\", \"727\", \"729\", \"731\", \"733\", \"735\", \"737\", \"739\", \"741\", \"743\", \"745\", \"747\", \"749\", \"751\", \"753\", \"755\", \"757\", \"759\", \"761\", \"763\", \"765\", \"767\", \"769\", \"771\", \"773\", \"775\", \"777\", \"779\", \"781\", \"783\", \"785\", \"787\", \"789\", \"791\", \"793\", \"795\", \"797\", \"799\", \"801\", \"803\", \"805\", \"807\", \"809\", \"811\", \"813\", \"815\", \"817\", \"819\", \"821\", \"823\", \"825\", \"827\", \"829\", \"831\", \"833\", \"835\", \"837\", \"839\", \"841\", \"843\", \"845\", \"847\", \"849\", \"851\", \"853\", \"855\", \"857\", \"859\", \"861\", \"863\", \"865\", \"867\", \"869\", \"871\", \"873\", \"875\", \"877\", \"879\", \"881\", \"883\", \"885\", \"887\", \"889\", \"891\", \"893\", \"895\", \"897\", \"899\", \"901\", \"903\", \"905\", \"907\", \"909\", \"911\", \"913\", \"915\", \"917\", \"919\", \"921\", \"923\", \"925\", \"927\", \"929\", \"931\", \"933\", \"935\", \"937\", \"939\", \"941\", \"943\", \"945\", \"947\", \"949\", \"951\", \"953\", \"955\", \"957\", \"959\", \"961\", \"963\", \"965\", \"967\", \"969\", \"971\", \"973\", \"975\", \"977\", \"979\", \"981\", \"983\", \"985\", \"987\", \"989\", \"991\", \"993\", \"995\", \"997\", \"999\", \"1001\", \"1003\", \"1005\", \"1007\", \"1009\", \"1011\", \"1013\", \"1015\", \"1017\", \"1019\", \"1021\", \"1023\", \"1025\", \"1027\", \"1029\", \"1031\", \"1033\", \"1035\", \"1037\", \"1039\", \"1041\", \"1043\", \"1045\", \"1047\", \"1049\", \"1051\", \"1053\", \"1055\", \"1057\", \"1059\", \"1061\", \"1063\", \"1065\", \"1067\", \"1069\", \"1071\", \"1073\", \"1075\", \"1077\", \"1079\", \"1081\", \"1083\", \"1085\", \"1087\", \"1089\", \"1091\", \"1093\", \"1095\", \"1097\", \"1099\", \"1101\", \"1103\", \"1105\", \"1107\", \"1109\", \"1111\", \"1113\", \"1115\", \"1117\", \"1119\", \"1121\", \"1123\", \"1125\", \"1127\", \"1129\", \"1131\", \"1133\", \"1135\", \"1137\", \"1139\", \"1141\", \"1143\", \"1145\", \"1147\", \"1149\", \"1151\", \"1153\", \"1155\", \"1157\", \"1159\", \"1161\", \"1163\", \"1165\", \"1167\", \"1169\", \"1171\", \"1173\", \"1175\", \"1177\", \"1179\", \"1181\", \"1183\", \"1185\", \"1187\", \"1189\", \"1191\", \"1193\", \"1195\", \"1197\", \"1199\", \"1201\", \"1203\", \"1205\", \"1207\", \"1209\", \"1211\", \"1213\", \"1215\", \"1217\", \"1219\", \"1221\", \"1223\", \"1225\", \"1227\", \"1229\", \"1231\", \"1233\", \"1235\", \"1237\", \"1239\", \"1241\", \"1243\", \"1245\", \"1247\", \"1249\", \"1251\", \"1253\", \"1255\", \"1257\", \"1259\", \"1261\", \"1263\", \"1265\", \"1267\", \"1269\", \"1271\", \"1273\", \"1275\", \"1277\", \"1279\", \"1281\", \"1283\", \"1285\", \"1287\", \"1289\", \"1291\", \"1293\", \"1295\", \"1297\", \"1299\", \"1301\", \"1303\", \"1305\", \"1307\", \"1309\", \"1311\", \"1313\", \"1315\", \"1317\", \"1319\", \"1321\", \"1323\", \"1325\", \"1327\", \"1329\", \"1331\", \"1333\", \"1335\", \"1337\", \"1339\", \"1341\", \"1343\", \"1345\", \"1347\", \"1349\", \"1351\", \"1353\", \"1355\", \"1357\", \"1359\", \"1361\", \"1363\", \"1365\", \"1367\", \"1369\", \"1371\", \"1373\", \"1375\", \"1377\", \"1379\", \"1381\", \"1383\", \"1385\", \"1387\", \"1389\", \"1391\", \"1393\", \"1395\", \"1397\", \"1399\", \"1401\", \"1403\", \"1405\", \"1407\", \"1409\", \"1411\", \"1413\", \"1415\", \"1417\", \"1419\", \"1421\", \"1423\", \"1425\", \"1427\", \"1429\", \"1431\", \"1433\", \"1435\", \"1437\", \"1439\", \"1441\", \"1443\", \"1445\", \"1447\", \"1449\", \"1451\", \"1453\", \"1455\", \"1457\", \"1459\", \"1461\", \"1463\", \"1465\", \"1467\", \"1469\", \"1471\", \"1473\", \"1475\", \"1477\", \"1479\", \"1481\", \"1483\", \"1485\", \"1487\", \"1489\", \"1491\", \"1493\", \"1495\", \"1497\", \"1499\", \"1501\", \"1503\", \"1505\", \"1507\", \"1509\", \"1511\", \"1513\", \"1515\", \"1517\", \"1519\", \"1521\", \"1523\", \"1525\", \"1527\", \"1529\", \"1531\", \"1533\", \"1535\", \"1537\", \"1539\", \"1541\", \"1543\", \"1545\", \"1547\", \"1549\", \"1551\", \"1553\", \"1555\", \"1557\", \"1559\", \"1561\", \"1563\", \"1565\", \"1567\", \"1569\", \"1571\", \"1573\", \"1575\", \"1577\", \"1579\", \"1581\", \"1583\", \"1585\", \"1587\", \"1589\", \"1591\", \"1593\", \"1595\", \"1597\", \"1599\", \"1601\", \"1603\", \"1605\", \"1607\", \"1609\", \"1611\", \"1613\", \"1615\", \"1617\", \"1619\", \"1621\", \"1623\", \"1625\", \"1627\", \"1629\", \"1631\", \"1633\", \"1635\", \"1637\", \"1639\", \"1641\", \"1643\", \"1645\", \"1647\", \"1649\", \"1651\", \"1653\", \"1655\", \"1657\", \"1659\", \"1661\", \"1663\", \"1665\", \"1667\", \"1669\", \"1671\", \"1673\", \"1675\", \"1677\", \"1679\", \"1681\", \"1683\", \"1685\", \"1687\", \"1689\", \"1691\", \"1693\", \"1695\", \"1697\", \"1699\", \"1701\", \"1703\", \"1705\", \"1707\", \"1709\", \"1711\", \"1713\", \"1715\", \"1717\", \"1719\", \"1721\", \"1723\", \"1725\", \"1727\", \"1729\", \"1731\", \"1733\", \"1735\", \"1737\", \"1739\", \"1741\", \"1743\", \"1745\", \"1747\", \"1749\", \"1751\", \"1753\", \"1755\", \"1757\", \"1759\", \"1761\", \"1763\", \"1765\", \"1767\", \"1769\", \"1771\", \"1773\", \"1775\", \"1777\", \"1779\", \"1781\", \"1783\", \"1785\", \"1787\", \"1789\", \"1791\", \"1793\", \"1795\", \"1797\", \"1799\", \"1801\", \"1803\", \"1805\", \"1807\", \"1809\", \"1811\", \"1813\", \"1815\", \"1817\", \"1819\", \"1821\", \"1823\", \"1825\", \"1827\", \"1829\", \"1831\", \"1833\", \"1835\", \"1837\", \"1839\", \"1841\", \"1843\", \"1845\", \"1847\", \"1849\", \"1851\", \"1853\", \"1855\", \"1857\", \"1859\", \"1861\", \"1863\", \"1865\", \"1867\", \"1869\", \"1871\", \"1873\", \"1875\", \"1877\", \"1879\", \"1881\", \"1883\", \"1885\", \"1887\", \"1889\", \"1891\", \"1893\", \"1895\", \"1897\", \"1899\", \"1901\", \"1903\", \"1905\", \"1907\", \"1909\", \"1911\", \"1913\", \"1915\", \"1917\", \"1919\", \"1921\", \"1923\", \"1925\", \"1927\", \"1929\", \"1931\", \"1933\", \"1935\", \"1937\", \"1939\", \"1941\", \"1943\", \"1945\", \"1947\", \"1949\", \"1951\", \"1953\", \"1955\", \"1957\", \"1959\", \"1961\", \"1963\", \"1965\", \"1967\", \"1969\", \"1971\", \"1973\", \"1975\", \"1977\", \"1979\", \"1981\", \"1983\", \"1985\", \"1987\", \"1989\", \"1991\", \"1993\", \"1995\", \"1997\", \"1999\", \"2001\", \"2003\"}, {} }; int main(){ int m, n; cin >> m >> n; cout << a[m][n] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1032/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int Ackerman(int m, int n) { if (m == 0) return n + 1; else if (n == 0) return Ackerman(m - 1, 1); else return Ackerman(m - 1, Ackerman(m, n - 1)); } int main() { int m, n; cin >> m >> n; cout << Ackerman(m, n); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1033/","text":"1033 \u8868\u8fbe\u5f0f\u6c42\u503c \u9898\u76ee Description \u4e8c\u54e5\u60f3\u81ea\u5df1\u505a\u4e00\u4e2a\u8ba1\u7b97\u5668\uff0c\u4f46\u662f\u4ed6\u9700\u8981\u4e00\u4e2a\u7a0b\u5e8f\u6765\u8ba1\u7b97\u8f93\u5165\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u3002\u4f60\u80fd\u5e2e\u52a9\u4ed6\u5417\uff1f Input Format \u8f93\u5165\u4ec5\u4e00\u884c\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7b97\u6570\u8868\u8fbe\u5f0f\u3002\u8868\u8fbe\u5f0f\u4e2d\u5305\u542b\uff1a\u5c0f\u62ec\u53f7\uff0c\u52a0\u51cf\u4e58\u9664\uff0c\u6307\u6570\u8fd0\u7b97\u7b26\uff0c\u8d1f\u53f7\uff0c\u6574\u6570\uff0c\u7a7a\u683c\u3002\u5176\u4e2d\u8d1f\u53f7\u7684\u4f18\u5148\u7ea7\u6700\u9ad8(-)\uff0c\u5176\u6b21\u662f\u6307\u6570\u8fd0\u7b97(^)\uff0c\u7136\u540e\u662f\u4e58\u9664(*/)\uff0c\u6700\u540e\u662f\u52a0\u51cf(+-)\u3002 \u8fd9\u91cc\u89c4\u5b9a\u9664\u6cd5\u4e3a\u6574\u9664\u8fd0\u7b97\uff0c\u5982 5 / 2 = 2, 8 / -3 = -2 \u7b49\u7b49\uff0c\u4e0eC++\u4e2d\u7684\u6574\u9664\u4e00\u81f4\u3002\u53e6\u5916\u6ce8\u610f\u6307\u6570\u8fd0\u7b97\u4e3a\u53f3\u7ed3\u5408\uff0c\u5373 2^3^2 = 2^9 = 512 \u800c\u975e 2^3^2 = 8^2 = 64 \u3002 \u8f93\u5165\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7100\u3002 Output Format \u5982\u679c\u8f93\u5165\u7684\u8868\u8fbe\u5f0f\u51fa\u73b0\u62ec\u53f7\u4e0d\u5339\u914d\u6216\u8005\u9664\u96f6\u9519\u8bef\uff0c\u8f93\u51fa\u4e00\u884c\u201cError\u201d\uff08\u4e0d\u542b\u5f15\u53f7\uff09\uff0c\u5426\u5219\u8f93\u51fa\u8fd0\u7b97\u7ed3\u679c\u3002\u8f93\u5165\u4fdd\u8bc1\u4e0d\u5305\u542b\u4efb\u4f55\u5176\u5b83\u7c7b\u578b\u7684\u9519\u8bef\u3002 \u8f93\u5165\u7684\u6570\uff0c\u8f93\u51fa\u7684\u7b54\u6848\uff0c\u4ee5\u53ca\u4e2d\u95f4\u7ed3\u679c\u5747\u4fdd\u8bc1\u662f\u4e0d\u8d85\u8fc7 long long \u8303\u56f4\u7684\u6574\u6570\u3002 Sample Input 5 + (1 + 3) * 6 ^ 1 Sample Output 29 Sample Input (6 + 2)) * 3 Sample Output Error \u8bf4\u660e 30%\u7684\u6d4b\u8bd5\u6570\u636e\u542b\u6709\u8d1f\u53f7\uff1b 30%\u7684\u6d4b\u8bd5\u6570\u636e\u542b\u6709\u6307\u6570\u8fd0\u7b97\u3002 FineArtz's solution Star /* \u8868\u8fbe\u5f0f\u6c42\u503c */ #include <iostream> #include <cmath> #include <stdexcept> using namespace std; enum OptType {ADD, SUB, MUL, DIV, BRACKET, EXP, POS, NEG, NONE}; enum TokenType {DIGIT, OPT, VOID}; class Opt{ public: Opt() : opt(' '), type(NONE), predency(-2) {} Opt(char ch) : opt(ch){ switch(ch){ case '+': type = ADD; predency = 1; break; case '-': type = SUB; predency = 1; break; case '*': type = MUL; predency = 2; break; case '/': type = DIV; predency = 2; break; case '(': type = BRACKET; predency = 0; break; case '^': type = EXP; predency = 3; break; case '&': type = POS; predency = 4; break; case '|': type = NEG; predency = 4; break; case ')': type = BRACKET; predency = 10; break; default: throw runtime_error(\"fuck it\"); break; } } OptType getType() { return type; } int getPred() { return predency; } char getOpt() { return opt; } private: char opt; OptType type; int predency; }; long long qpow(long long x, long long n){ long long ans = 1, tmp =x; while (n > 0){ if (n & 1) ans *= tmp; n >>= 1; tmp *= tmp; } return ans; } long long operate(long long x, long long y, Opt opt){ switch(opt.getOpt()){ case '+': return x + y; case '-': return x - y; case '*': return x * y; case '/': if (y == 0) throw runtime_error(\"fuck it\"); return x / y; case '^': return qpow(x, y); default: throw runtime_error(\"fuck it\"); } } char suf[200]; int sufSize = 0; void infToSuf(){ char ch; long long curNum = 0x7fffffff; TokenType lastTokenType = VOID; Opt optStack[200]; int optSize = 0; while (cin >> ch){ if (isdigit(ch)){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + ch - '0'; lastTokenType = DIGIT; } else{ if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } Opt curOpt(ch); switch(curOpt.getOpt()){ case ')': while (optSize > 0 && optStack[optSize - 1].getOpt() != '('){ suf[sufSize++] = optStack[--optSize].getOpt(); } if (optSize == 0){ throw runtime_error(\"fuck it\"); } if (optStack[--optSize].getOpt() != '('){ throw runtime_error(\"fuck it\"); } lastTokenType = DIGIT; break; case '(': optStack[optSize++] = curOpt; lastTokenType = OPT; break; case '-': case '+': if (lastTokenType == VOID || lastTokenType == OPT){ lastTokenType = OPT; if (curOpt.getOpt() == '-'){ Opt tmpOpt('|'); optStack[optSize++] = tmpOpt; } else{ Opt tmpOpt('&'); optStack[optSize++] = tmpOpt; } break; } case '*': case '/': if (optSize == 0 || curOpt.getPred() > optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() <= optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; case '^': if (optSize == 0 || curOpt.getPred() >= optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() < optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; } } } if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } while (optSize > 0){ if (optStack[--optSize].getOpt() == '('){ throw runtime_error(\"fuck it\"); } suf[sufSize++] = optStack[optSize].getOpt(); } } long long calcSuf(){ long long numStack[200]; int numSize = 0; int curPos = 0; long long curNum = 0x7fffffff; while (curPos < sufSize){ while (isdigit(suf[curPos])){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + suf[curPos++] - '0'; } if (suf[curPos] == '#') ++curPos; if (curNum != 0x7fffffff){ numStack[numSize++] = curNum; curNum = 0x7fffffff; } if (isdigit(suf[curPos])) continue; Opt curOpt(suf[curPos++]); long long opr1 = 0, opr2 = 0; switch(curOpt.getOpt()){ case '+': case '-': case '*': case '/': case '^': if (numSize < 2) throw runtime_error(\"fuck it\"); opr2 = numStack[--numSize]; opr1 = numStack[--numSize]; numStack[numSize++] = operate(opr1, opr2, curOpt); break; case '&': case '|': if (numSize < 1) throw runtime_error(\"fuck it\"); if (curOpt.getOpt() == '|') numStack[numSize - 1] = -numStack[numSize - 1]; break; default: throw runtime_error(\"fuck it\"); break; } } return numStack[0]; } int main(){ try{ infToSuf(); } catch(runtime_error){ cout << \"Error\" << endl; return 0; } try{ cout << calcSuf() << endl; } catch(runtime_error){ cout << \"Error\" << endl; return 0; } return 0; }","title":"1033"},{"location":"nr/1033/#1033","text":"\u9898\u76ee","title":"1033 \u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"nr/1033/#fineartzs-solution-star","text":"/* \u8868\u8fbe\u5f0f\u6c42\u503c */ #include <iostream> #include <cmath> #include <stdexcept> using namespace std; enum OptType {ADD, SUB, MUL, DIV, BRACKET, EXP, POS, NEG, NONE}; enum TokenType {DIGIT, OPT, VOID}; class Opt{ public: Opt() : opt(' '), type(NONE), predency(-2) {} Opt(char ch) : opt(ch){ switch(ch){ case '+': type = ADD; predency = 1; break; case '-': type = SUB; predency = 1; break; case '*': type = MUL; predency = 2; break; case '/': type = DIV; predency = 2; break; case '(': type = BRACKET; predency = 0; break; case '^': type = EXP; predency = 3; break; case '&': type = POS; predency = 4; break; case '|': type = NEG; predency = 4; break; case ')': type = BRACKET; predency = 10; break; default: throw runtime_error(\"fuck it\"); break; } } OptType getType() { return type; } int getPred() { return predency; } char getOpt() { return opt; } private: char opt; OptType type; int predency; }; long long qpow(long long x, long long n){ long long ans = 1, tmp =x; while (n > 0){ if (n & 1) ans *= tmp; n >>= 1; tmp *= tmp; } return ans; } long long operate(long long x, long long y, Opt opt){ switch(opt.getOpt()){ case '+': return x + y; case '-': return x - y; case '*': return x * y; case '/': if (y == 0) throw runtime_error(\"fuck it\"); return x / y; case '^': return qpow(x, y); default: throw runtime_error(\"fuck it\"); } } char suf[200]; int sufSize = 0; void infToSuf(){ char ch; long long curNum = 0x7fffffff; TokenType lastTokenType = VOID; Opt optStack[200]; int optSize = 0; while (cin >> ch){ if (isdigit(ch)){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + ch - '0'; lastTokenType = DIGIT; } else{ if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } Opt curOpt(ch); switch(curOpt.getOpt()){ case ')': while (optSize > 0 && optStack[optSize - 1].getOpt() != '('){ suf[sufSize++] = optStack[--optSize].getOpt(); } if (optSize == 0){ throw runtime_error(\"fuck it\"); } if (optStack[--optSize].getOpt() != '('){ throw runtime_error(\"fuck it\"); } lastTokenType = DIGIT; break; case '(': optStack[optSize++] = curOpt; lastTokenType = OPT; break; case '-': case '+': if (lastTokenType == VOID || lastTokenType == OPT){ lastTokenType = OPT; if (curOpt.getOpt() == '-'){ Opt tmpOpt('|'); optStack[optSize++] = tmpOpt; } else{ Opt tmpOpt('&'); optStack[optSize++] = tmpOpt; } break; } case '*': case '/': if (optSize == 0 || curOpt.getPred() > optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() <= optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; case '^': if (optSize == 0 || curOpt.getPred() >= optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() < optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; } } } if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } while (optSize > 0){ if (optStack[--optSize].getOpt() == '('){ throw runtime_error(\"fuck it\"); } suf[sufSize++] = optStack[optSize].getOpt(); } } long long calcSuf(){ long long numStack[200]; int numSize = 0; int curPos = 0; long long curNum = 0x7fffffff; while (curPos < sufSize){ while (isdigit(suf[curPos])){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + suf[curPos++] - '0'; } if (suf[curPos] == '#') ++curPos; if (curNum != 0x7fffffff){ numStack[numSize++] = curNum; curNum = 0x7fffffff; } if (isdigit(suf[curPos])) continue; Opt curOpt(suf[curPos++]); long long opr1 = 0, opr2 = 0; switch(curOpt.getOpt()){ case '+': case '-': case '*': case '/': case '^': if (numSize < 2) throw runtime_error(\"fuck it\"); opr2 = numStack[--numSize]; opr1 = numStack[--numSize]; numStack[numSize++] = operate(opr1, opr2, curOpt); break; case '&': case '|': if (numSize < 1) throw runtime_error(\"fuck it\"); if (curOpt.getOpt() == '|') numStack[numSize - 1] = -numStack[numSize - 1]; break; default: throw runtime_error(\"fuck it\"); break; } } return numStack[0]; } int main(){ try{ infToSuf(); } catch(runtime_error){ cout << \"Error\" << endl; return 0; } try{ cout << calcSuf() << endl; } catch(runtime_error){ cout << \"Error\" << endl; return 0; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1034/","text":"1034 \u4e8c\u54e5\u7684\u91d1\u94fe \u9898\u76ee Description \u4e00\u4e2a\u9633\u5149\u660e\u5a9a\u7684\u5468\u672b\uff0c\u4e8c\u54e5\u51fa\u53bb\u6e38\u5c71\u73a9\u6c34\uff0c\u7136\u800c\u7c97\u5fc3\u7684\u4e8c\u54e5\u5728\u8def\u4e0a\u628a\u94b1\u5305\u5f04\u4e22\u4e86\u3002\u508d\u665a\u65f6\u5206\u4e8c\u54e5\u6765\u5230\u4e86\u4e00\u5bb6\u5c0f\u65c5\u5e97\uff0c\u4ed6\u7ffb\u4fbf\u5168\u8eab\u7684\u53e3\u888b\u4e5f\u6ca1\u7ffb\u7740\u591a\u5c11\u94b1\uff0c\u800c\u4ed6\u8eab\u4e0a\u552f\u4e00\u503c\u94b1\u7684\u5c31\u662f\u4e00\u6761\u6f02\u4eae\u7684\u91d1\u94fe\u3002\u8fd9\u6761\u91d1\u94fe\u6563\u53d1\u7740\u5947\u5f02\u7684\u5149\u6cfd\uff0c\u636e\u8bf4\u6234\u4e0a\u5b83\u80fd\u4fdd\u4f51\u8003\u8bd5\u95e8\u95e8\u4e0d\u6302\uff0cRP++\u3002\u597d\u5fc3\u7684\u8001\u677f\u5f88\u540c\u60c5\u4e8c\u54e5\u7684\u906d\u9047\uff0c\u540c\u610f\u4e8c\u54e5\u7528\u8fd9\u6761\u91d1\u94fe\u6765\u7ed3\u5e10\u3002\u867d\u7136\u4e8c\u54e5\u5f88\u820d\u4e0d\u5f97\u8fd9\u6761\u91d1\u94fe\uff0c\u4f46\u662f\u4ed6\u5fc5\u987b\u7528\u5b83\u6765\u4ed8\u4e00\u665a\u4e0a\u7684\u623f\u94b1\u4e86\u3002 \u91d1\u94fe\u662f\u73af\u72b6\u7684\uff0c\u4e00\u5171\u6709 N \u8282\uff0c\u8001\u677f\u7684\u8981\u4ef7\u662f K \u8282\u3002\u968f\u4fbf\u53d6\u4e0b\u5176\u4e2d K \u8282\u81ea\u7136\u6ca1\u95ee\u9898\uff0c\u7136\u800c\u91d1\u94fe\u4e0a\u6bcf\u4e00\u8282\u7684 RP \u503c\u5176\u5b9e\u5e76\u4e0d\u4e00\u6837\uff0c\u6709\u9ad8\u6709\u4f4e\uff0c\u4e8c\u54e5\u81ea\u5df1\u975e\u5e38\u6e05\u695a\u3002\u53e6\u5916\u4e8c\u54e5\u5e76\u4e0d\u5e0c\u671b\u628a\u6574\u4e2a\u91d1\u94fe\u90fd\u62c6\u6563\u4e86\uff0c\u4ed6\u53ea\u613f\u610f\u5728\u8fd9\u6761\u73af\u5f62\u7684\u91d1\u94fe\u4e0a\u5207\u4e24\u5200\uff0c\u4ece\u800c\u5207\u4e0b\u4e00\u6bb5\u6070\u597d\u4e3a K \u8282\u7684\u91d1\u94fe\u7ed9\u8001\u677f\u3002\u56e0\u4e3a RP \u503c\u8d8a\u9ad8\u7684\u8282\u8d8a\u7a00\u6709\uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u7ed9\u8001\u677f\u7684\u91d1\u94fe\u4e0a\u6700\u9ad8\u7684 RP \u503c\u6700\u5c0f\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570 N \u548c K\uff0c\u8868\u793a\u91d1\u9879\u94fe\u6709 N \u8282\uff0c\u8001\u677f\u8981\u4ef7 K \u8282\u3002 \u7b2c\u4e8c\u884c\u7528\u7a7a\u683c\u9694\u5f00\u7684N\u4e2a\u6b63\u6574\u6570 a1...aN \uff0c\u8868\u793a\u6bcf\u4e00\u8282\u91d1\u94fe\u7684\u4ef7\u503c\u4e3a\u591a\u5c11\u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e8c\u54e5\u7ed9\u8001\u677f\u7684\u91d1\u94fe\u4e0a\u6700\u9ad8\u7684 RP \u503c\u6700\u5c0f\u591a\u5c11\u3002 Sample Input 5 2 1 2 3 4 5 Sample Output 2 Sample Input 6 3 1 4 7 2 8 3 Sample Output 4 \u8bf4\u660e \u5bf940%\u7684\u6570\u636e\uff0c\\( 3 \\leq N \\leq 200 \\) \uff1b \u5bf970%\u7684\u6570\u636e\uff0c\\( 3 \\leq N \\leq 20000 \\)\uff1b \u5bf9100%\u7684\u6570\u636e\uff0c\\( 3 \\leq N \\leq 200000 \\) , \\( 0 < ai \\leq 10^9 \\)\u3002 \u6570\u636e\u89c4\u6a21\u8f83\u5927\uff0c\u5efa\u8bae\u7528scanf(\"%d\", &a[i]);\u6765\u8bfb\u6570\u636e\u3002 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u91d1\u94fe */ #include <iostream> #include <deque> using namespace std; void pop_back(deque<int> &d){ while ((d.end() - d.begin()) >= 1 && d.back() >= d.front()) d.pop_front(); if (!d.empty()) d.pop_back(); } int main(){ int n, k, a[400005]; cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = n + 1; i <= n + k; ++i) a[i] = a[i - n]; deque<int> f, ff; for (int i = 1; i <= k; ++i) { while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); ff.push_back(a[i]); } int maxmin = f[0]; for (int i = k + 1; i <= n + k; ++i){ while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); if (f[0] == ff[0]) f.pop_front(); ff.pop_front(); ff.push_back(a[i]); if (maxmin > f[0]) maxmin = f[0]; } cout << maxmin << endl; return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int a[300000],rp[300000],n,k,head,tail,minrp=0x3f3f3f3f; int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<n;++i) scanf(\"%d\",&rp[i]); for (int i=0;i<k;++i){ while (head>0&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; } if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; for (int i=k;i<n;++i){ while (head>tail&&a[tail]<=i-k) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } for (int i=0;i<k-1;++i){ while (head>tail&&(a[tail]>i&&a[tail]<=i-k+n)) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } printf(\"%d\",minrp); return 0; }","title":"1034"},{"location":"nr/1034/#1034","text":"\u9898\u76ee","title":"1034 \u4e8c\u54e5\u7684\u91d1\u94fe"},{"location":"nr/1034/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u91d1\u94fe */ #include <iostream> #include <deque> using namespace std; void pop_back(deque<int> &d){ while ((d.end() - d.begin()) >= 1 && d.back() >= d.front()) d.pop_front(); if (!d.empty()) d.pop_back(); } int main(){ int n, k, a[400005]; cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = n + 1; i <= n + k; ++i) a[i] = a[i - n]; deque<int> f, ff; for (int i = 1; i <= k; ++i) { while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); ff.push_back(a[i]); } int maxmin = f[0]; for (int i = k + 1; i <= n + k; ++i){ while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); if (f[0] == ff[0]) f.pop_front(); ff.pop_front(); ff.push_back(a[i]); if (maxmin > f[0]) maxmin = f[0]; } cout << maxmin << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1034/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int a[300000],rp[300000],n,k,head,tail,minrp=0x3f3f3f3f; int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<n;++i) scanf(\"%d\",&rp[i]); for (int i=0;i<k;++i){ while (head>0&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; } if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; for (int i=k;i<n;++i){ while (head>tail&&a[tail]<=i-k) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } for (int i=0;i<k-1;++i){ while (head>tail&&(a[tail]>i&&a[tail]<=i-k+n)) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } printf(\"%d\",minrp); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1035/","text":"1035 \u4e8c\u54e5\u7092\u80a1\u7968 \u9898\u76ee Description \u4e8c\u54e5\u6700\u8fd1\u5173\u6ce8\u4e86 N \u652f\u80a1\u7968\uff0c\u7f16\u53f7\u4e3a 1 \u81f3 N \u3002\u4ed6\u4e0d\u65ad\u8bb0\u5f55\u4e0b\u8fd9 N \u652f\u80a1\u7968\u7684\u80a1\u4ef7\u53d8\u52a8\u60c5\u51b5\u3002\u5728\u6b64\u671f\u95f4\uff0c\u4ed6\u4e5f\u60f3\u77e5\u9053\u5176\u4e2d\u80a1\u4ef7\u7b2c i \u9ad8\u7684\u662f\u54ea\u652f\u3002\u4f60\u80fd\u4e3a\u4ed6\u5feb\u901f\u56de\u7b54\u8fd9\u8fd9\u6837\u7684\u95ee\u9898\u5417\uff1f Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570 N \u7b2c\u4e8c\u884c N \u4e2a\u6574\u6570\uff0c\u7b2c i \u4e2a\u6570\u8868\u793a\u7f16\u53f7\u4e3a i \u7684\u80a1\u7968\u7684\u521d\u59cb\u80a1\u4ef7 \u7b2c\u4e09\u884c\u4e00\u4e2a\u6574\u6570 K \u63a5\u4e0b\u6765 K \u884c\uff0c\u6bcf\u884c\u4e3a\u4e00\u6761\u80a1\u4ef7\u53d8\u52a8\u8bb0\u5f55\u6216\u4e00\u6761\u8be2\u95ee\uff1a M x y \u8868\u793a\u7f16\u53f7\u4e3a x \u7684\u80a1\u7968\u7684\u80a1\u4ef7\u53d8\u6210\u4e86 y\u3002 Q r a1 a2 ... ar \u8868\u793a\u4e8c\u54e5\u4f9d\u6b21\u8be2\u95ee\u7b2c a1 \u5927\uff0c\u7b2c a2 \u5927...\u7b2c ar \u5927\u7684\u80a1\u7968\u7f16\u53f7\u4e3a\u591a\u5c11\u3002\u82e5\u6709\u4e0d\u540c\u80a1\u7968\u7684\u80a1\u4ef7\u76f8\u540c\uff0c\u90a3\u4e48\u4ee4\u7f16\u53f7\u5c0f\u7684\u80a1\u7968\u66f4\u5927\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c r \u4e2a\u6574\u6570\uff0c\u7b2c i \u4e2a\u6574\u6570\u8868\u793a\u80a1\u4ef7\u7b2c ai \u5927\u7684\u80a1\u7968\u7f16\u53f7\u4e3a\u591a\u5c11\u3002\u8fd9\u4e9b\u6574\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 Sample Input 6 1 2 3 4 5 6 5 Q 3 1 3 5 M 1 7 Q 3 1 3 5 M 2 5 Q 3 1 3 5 Sample Output 6 4 2 1 5 3 1 2 4 \u8bf4\u660e \u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u90fd\u6709 \\( r \\leq 1000 \\) \uff0c\u8be2\u95ee\u6307\u4ee4\u6570\u91cf\u4e0d\u8d85\u8fc7 10 \u6761 \u6240\u6709\u80a1\u4ef7\u90fd\u4e0d\u8d85\u8fc7 \\( 10^5 \\) 40%\u7684\u6570\u636e \\( 3 \\leq N,K \\leq 100 \\) 70%\u7684\u6570\u636e \\( 3 \\leq N,K \\leq 5000 \\) 100%\u7684\u6570\u636e \\( 3 \\leq N,K \\leq 20000 \\) FineArtz's solution Star /* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <algorithm> using namespace std; class Stroke{ public: bool operator <(const Stroke &s){ return (price < s.price || price == s.price && ind > s.ind); } int ind = 0, price = 0; }; Stroke a[20005]; int n, k; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ a[i].ind = i; cin >> a[i].price; } cin >> k; while (k--){ char ch; cin >> ch; if (ch == 'Q'){ Stroke b[20005]; for (int i = 1; i <= n; ++i){ b[i] = a[i]; } sort(b + 1, b + n + 1); int r; cin >> r; while (r--){ int t; cin >> t; cout << b[n - t + 1].ind << ' '; } cout << '\\n'; } else{ int x, y; cin >> x >> y; a[x].price = y; } } return 0; }","title":"1035"},{"location":"nr/1035/#1035","text":"\u9898\u76ee","title":"1035 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1035/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <algorithm> using namespace std; class Stroke{ public: bool operator <(const Stroke &s){ return (price < s.price || price == s.price && ind > s.ind); } int ind = 0, price = 0; }; Stroke a[20005]; int n, k; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ a[i].ind = i; cin >> a[i].price; } cin >> k; while (k--){ char ch; cin >> ch; if (ch == 'Q'){ Stroke b[20005]; for (int i = 1; i <= n; ++i){ b[i] = a[i]; } sort(b + 1, b + n + 1); int r; cin >> r; while (r--){ int t; cin >> t; cout << b[n - t + 1].ind << ' '; } cout << '\\n'; } else{ int x, y; cin >> x >> y; a[x].price = y; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1036/","text":"1036 \u4e8c\u54e5\u53bb\u53d6\u94b1 \u9898\u76ee Description \u4e8c\u54e5\u6765\u5230\u4e00\u5bb6\u94f6\u884c\u3002\u8fd9\u5bb6\u94f6\u884c\u67093\u4e2a\u67dc\u53f0\u3002\u4e8c\u54e5\u5bf9\u94f6\u884c\u7684\u6392\u961f\u65b9\u5f0f\u4ea7\u751f\u4e86\u5174\u8da3\u3002\u4f20\u7edf\u7684\u6392\u961f\u65b9\u5f0f\u662f\u6240\u6709\u4eba\u90fd\u5728\u67dc\u53f0\u524d\u6392\u961f\uff0c\u6bcf\u4e2a\u4eba\u8fdb\u5165\u94f6\u884c\u540e\u6311\u4e00\u4e2a\u4eba\u6570\u6700\u5c11\u7684\u961f\u4f0d\u6392\u4e0a,\u8981\u662f\u4eba\u6570\u4e00\u6837\uff0c\u4ed6\u4f1a\u6392\u90a3\u4e2a\u67dc\u53f0\u7f16\u53f7\u9760\u524d\u7684\u3002 \u65b0\u7684\u6392\u961f\u65b9\u5f0f\u662f\u6bcf\u4e2a\u4eba\u8fdb\u5165\u94f6\u884c\u540e\u53ea\u6392\u4e00\u4e2a\u961f\u4f0d\uff0c\u4e00\u65e6\u67d0\u4e2a\u67dc\u53f0\u6709\u7a7a\uff0c\u961f\u4f0d\u6700\u524d\u7684\u4eba\u5c31\u8fc7\u53bb\u3002 \u73b0\u5728\u6709\\( N(N<100000) \\) \u4e2a\u4eba\u5728\u7b2c0\u65f6\u523b\u91cc\u6309\u7167\u987a\u5e8f\u8fdb\u5165\u4e86\u94f6\u884c\uff0c\u5e76\u77e5\u9053\u6bcf\u4e2a\u4eba\u7684\u67dc\u53f0\u5360\u7528\u65f6\u95f4\u3002\u8bf7\u8ba1\u7b97\u4e24\u79cd\u6392\u961f\u65b9\u5f0f\u4e0b\u6240\u6709\u987e\u5ba2\u7b49\u5f85\u65f6\u95f4\u7684\u548c\u53ca\u6700\u540e\u4e00\u4e2a\u4eba\u5904\u7406\u5b8c\u7684\u65f6\u95f4\u3002 Input Format N\uff0c\u4ee3\u8868\u8981\u8fdb\u5165\u94f6\u884c\u7684\u4eba\u6570 a[1]...a[n]\uff0ca[i]\u4ee3\u8868\u7b2ci\u4e2a\u4eba\u8981\u5360\u7528\u67dc\u53f0\u7684\u65f6\u95f4 Output Format W1 T1\uff0c\u5206\u522b\u4ee3\u8868\u8001\u6392\u961f\u65b9\u5f0f\u4e0b\u6240\u6709\u987e\u5ba2\u7b49\u5f85\u65f6\u95f4\u603b\u548c\u4e0e\u6700\u540e\u4e00\u4e2a\u4eba\u5904\u7406\u5b8c\u7684\u65f6\u523b W2 T2\uff0c\u5206\u522b\u4ee3\u8868\u65b0\u6392\u961f\u65b9\u5f0f\u4e0b\u6240\u6709\u987e\u5ba2\u7b49\u5f85\u65f6\u95f4\u603b\u548c\u4e0e\u6700\u540e\u4e00\u4e2a\u4eba\u5904\u7406\u5b8c\u7684\u65f6\u523b Sample Input 4 1 1 1 2 Sample Output 1 3 1 3 FineArtz's solution Star /* \u4e8c\u54e5\u53bb\u53d6\u94b1 */ #include <iostream> using namespace std; int selectMin(int x, int y, int z){ int r = 1, m = x; if (m > y){ r = 2; m = y; } if (m > z){ r = 0; m = z; } return r; } int main(){ int n; int a[100005]; cin >> n; long long w1 = 0, t1 = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int p[3] = {n / 3, n / 3 + (n % 3 != 0 ? 1 : 0), n / 3 + (n % 3 == 2 ? 1 : 0)}; long long t[3] = {0, 0, 0}; for (int i = 1; i <= n; ++i){ w1 += a[i] * (--p[i % 3]); t[i % 3] += a[i]; } t1 = max(t[0], max(t[1], t[2])); cout << w1 << ' ' << t1 << endl; long long w2 = 0, t2 = 0; if (n == 1){ t2 = a[1]; } else if (n == 2){ t2 = max(a[1], a[2]); } else{ int w[3] = {a[3], a[1], a[2]}; for (int i = 4; i <= n; ++i){ int j = selectMin(w[1], w[2], w[0]); for (int k = 0; k < 3; ++k) if (j != k) w[k] -= w[j]; w2 += (n - i + 1) * w[j]; t2 += w[j]; w[j] = a[i]; } t2 += max(w[0], max(w[1], w[2])); } cout << w2 << ' ' << t2 << endl; return 0; }","title":"1036"},{"location":"nr/1036/#1036","text":"\u9898\u76ee","title":"1036 \u4e8c\u54e5\u53bb\u53d6\u94b1"},{"location":"nr/1036/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u53bb\u53d6\u94b1 */ #include <iostream> using namespace std; int selectMin(int x, int y, int z){ int r = 1, m = x; if (m > y){ r = 2; m = y; } if (m > z){ r = 0; m = z; } return r; } int main(){ int n; int a[100005]; cin >> n; long long w1 = 0, t1 = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int p[3] = {n / 3, n / 3 + (n % 3 != 0 ? 1 : 0), n / 3 + (n % 3 == 2 ? 1 : 0)}; long long t[3] = {0, 0, 0}; for (int i = 1; i <= n; ++i){ w1 += a[i] * (--p[i % 3]); t[i % 3] += a[i]; } t1 = max(t[0], max(t[1], t[2])); cout << w1 << ' ' << t1 << endl; long long w2 = 0, t2 = 0; if (n == 1){ t2 = a[1]; } else if (n == 2){ t2 = max(a[1], a[2]); } else{ int w[3] = {a[3], a[1], a[2]}; for (int i = 4; i <= n; ++i){ int j = selectMin(w[1], w[2], w[0]); for (int k = 0; k < 3; ++k) if (j != k) w[k] -= w[j]; w2 += (n - i + 1) * w[j]; t2 += w[j]; w[j] = a[i]; } t2 += max(w[0], max(w[1], w[2])); } cout << w2 << ' ' << t2 << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1037/","text":"1037 \u4e8c\u54e5\u4e70\u8349 \u9898\u76ee Description \u4e8c\u54e5\u5728\u7f51\u4e0a\u4e70\u5e72\u8349\u3002\u4ed6\u53d1\u73b0\u4e86\u4e00\u7b14\u7279\u6b8a\u7684\u4e70\u5356\u3002\u4ed6\u6bcf\u4e70\u4e00\u6346\u5927\u5c0f\u4e3aA(1 <= A <= 1,000,000)\u7684\u5e72\u8349\uff0c\u4ed6\u5c31\u80fd\u514d\u8d39\u83b7\u5f97\u4e00\u6346\u5927\u5c0f\u4e3aB(1 <= B < A)\u7684\u5e72\u8349,\u4e5f\u5c31\u662f\u8bf4\u514d\u8d39\u7684\u90a3\u4e2a\u5fc5\u987b\u5927\u5c0f\u662f\u5c0f\u4e8e\u8d2d\u4e70\u7684\u90a3\u4e2a\u3002 \u7136\u800c\uff0c\u8fd9\u7b14\u4ea4\u6613\u662f\u6709\u89c4\u5b9a\u7684\uff1a\u5927\u7684\u4e00\u6346\u5e72\u8349\u5fc5\u987b\u662f\u9ad8\u8d28\u91cf\u7684\uff0c\u5c0f\u7684\u4e00\u6346\u662f\u4f4e\u8d28\u91cf\u7684\u3002\u4e8c\u54e5\u662f\u4e2a\u541d\u556c\u9b3c\uff0c\u4ed6\u5e76\u4e0d\u5728\u610f\uff1a\u968f\u4fbf\u4ec0\u4e48\u8d28\u91cf\uff0c\u53ea\u8981\u80fd\u7701\u94b1\u5c31\u597d\u3002 \u7ed9\u51fa\u4e00\u7ec4N(1 <= N <= 10,000)\u6346\u9ad8\u8d28\u91cf\u5e72\u8349\u7684\u5927\u5c0f\uff0cM(1 <= M <= 10,000)\u6346\u4f4e\u8d28\u91cf\u7684\u5e72\u8349\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u4e8c\u54e5\u6700\u591a\u80fd\u4e70\u591a\u5c11\u6346\u5e72\u8349\u3002\u4ed6\u80fd\u4e70\u9ad8\u8d28\u91cf\u7684\u5e72\u8349\uff0c\u4f46\u4ed6\u4e0d\u80fd\u4e70\u4f4e\u8d28\u91cf\u7684\u5e72\u8349\uff08\u5c31\u662f\u8bf4\uff0c\u4ed6\u53ea\u80fd\u901a\u8fc7\u8d60\u9001\u6765\u83b7\u5f97\u4f4e\u8d28\u91cf\u7684\u8349\uff09\u3002 Input Format \u7b2c\u4e00\u884c\u7ed9\u51faN,M \u4e0b\u9762N+M\u884c\uff0c\u5148\u7ed9\u51fa\u9ad8\u8d28\u91cf\u7684N\u6346\u9ad8\u8d28\u91cf\u5e72\u8349\u7684\u5927\u5c0f\uff0c\u518d\u7ed9\u51faM\u6346\u4f4e\u8d28\u91cf\u7684 Output Format \u4e8c\u54e5\u6700\u591a\u53ef\u4ee5\u5f97\u5230\u591a\u5c11\u6346\u5e72\u8349 Hint \u5bf9\u4e8e\u9762\u6837\u4f8b\uff0c\u4e8c\u54e5\u53ef\u4ee5\u8fd9\u6837\u8fdb\u884c\u64cd\u4f5c\uff0c\u4e706\u5f973\uff0c\u4e703\u5f971,\u4e701\u65f6\uff0c\u4e0d\u80fd\u62ff\u5230\u4f4e\u8d28\u91cf\u7684\u5e72\u8349\uff0c\u6700\u7ec8\u5f97\u52305\u6346. Sample Input 3 4 6 1 3 1 5 3 4 Sample Output 5 FineArtz's solution Star /* \u4e8c\u54e5\u4e70\u8349 */ #include <iostream> #include <algorithm> using namespace std; bool cmp(int x, int y){ return x > y; } int main(){ int m, n; int a[10005], b[10005]; cin >> n >> m; for (int i = 0; i < n; ++i){ cin >> a[i]; } for (int i = 0; i < m; ++i){ cin >> b[i]; } sort(a, a + n, cmp); sort(b, b + m, cmp); int ans = n, j = 0; for (int i = 0; i < n; ++i){ while (j < m && a[i] <= b[j]) ++j; if (j == m) break; ++ans; ++j; } cout << ans << endl; return 0; }","title":"1037"},{"location":"nr/1037/#1037","text":"\u9898\u76ee","title":"1037 \u4e8c\u54e5\u4e70\u8349"},{"location":"nr/1037/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u4e70\u8349 */ #include <iostream> #include <algorithm> using namespace std; bool cmp(int x, int y){ return x > y; } int main(){ int m, n; int a[10005], b[10005]; cin >> n >> m; for (int i = 0; i < n; ++i){ cin >> a[i]; } for (int i = 0; i < m; ++i){ cin >> b[i]; } sort(a, a + n, cmp); sort(b, b + m, cmp); int ans = n, j = 0; for (int i = 0; i < n; ++i){ while (j < m && a[i] <= b[j]) ++j; if (j == m) break; ++ans; ++j; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1038/","text":"1038 \u4e8c\u54e5\u7684\u7ea6\u745f\u592b \u9898\u76ee Description \u8bdd\u8bf4\u4e8c\u54e5\u5f53\u5e74\u5b66\u4e60\u6570\u636e\u7ed3\u6784\u7684\u65f6\u5019\u9047\u5230\u4e86\u90a3\u9053\u7334\u5b50\u62a5\u6570\u7684\u9898\u76ee\uff0c\u5176\u5b9e\u8fd9\u5c31\u662f\u7ecf\u5178\u7684\u7ea6\u745f\u592b\u95ee\u9898\u3002 \u53ef\u662f\u5f53\u5e74\u7684\u4e8c\u54e5\u8fd8\u662f\u4e2a\u6bdb\u5934\u5c0f\u5b50\uff0c\u53ea\u4f1a\u7528\u6a21\u62df\u7684\u65b9\u6cd5\uff0c\u800c\u5176\u4ed6\u540c\u5b66\u5374\u4f7f\u7528\u4e86\u4e00\u4e9b\u4ee4\u4e8c\u54e5\u5b8c\u5168\u6478\u4e0d\u5230\u5934\u8111\u7684\u65b9\u6cd5\u3002 \u2026\u2026\u4e8c\u54e5\u4e00\u6012\u4e4b\u4e0b\u6539\u4e86\u9898\u76ee\u2026\u2026 \u8bdd\u8bf4\u5f53\u5e74\u82b1\u679c\u5c71\u7684\u7334\u5b50\u8981\u9009\u5927\u738b\uff0c\u9009\u4e3e\u529e\u6cd5\u5982\u4e0b\uff1a \u6240\u6709\u7334\u5b50\u63091-M\u7f16\u53f7\u56f4\u5750\u4e00\u5708\uff0c\u4e8c\u54e5\u7ad9\u5728\u5708\u4e2d\u5fc3\uff0c\u7531\u4e8c\u54e5\u6307\u5b9a\u4e00\u4e2a\u6574\u6570Kn\uff0c \u4e4b\u540e\u7334\u5b50\u4eec\u4ece1\u53f7\u5f00\u59cb\u6309\u987a\u5e8f\u62a5\u6570\uff0c\u62a5\u5230Kn\u7684\u7334\u5b50\u9000\u51fa\u5230\u5708\u5916\uff0c\u4e8c\u54e5\u518d\u62a5\u51fa\u4e00\u4e2a\u6574\u6570Kn+1\uff0c \u7136\u540e\u7531\u521a\u521a\u9000\u51fa\u7684\u7334\u5b50\u7684\u4e0b\u4e00\u53ea\u7334\u5b50\u518d\u5f00\u59cb\u62a5\u6570\uff0c\u5982\u6b64\u5faa\u73af\u62a5\u6570\uff0c\u76f4\u5230\u5708\u5185\u53ea\u5269\u4e0b\u4e00\u53ea\u7334\u5b50\u65f6\uff0c\u8fd9\u53ea\u7334\u5b50\u5c31\u662f\u5927\u738b\u3002 \u7531\u4e8e\u4e8c\u54e5\u5e0c\u671b\u901a\u8fc7\u6b64\u79cd\u65b9\u6cd5\u63a7\u5236\u82b1\u679c\u5c71\uff0c\u6240\u4ee5\u73b0\u5728\u4e8c\u54e5\u628a\u4ed6\u5236\u5b9a\u7684\u6574\u6570\u5e8f\u5217\u544a\u8bc9\u4f60\uff0c\u5e0c\u671b\u4f60\u5e2e\u4ed6\u9884\u5148\u7b97\u51fa\u90a3\u53ea\u7334\u5b50\u4f1a\u6210\u4e3a\u5927\u738b\u3002 Input Format \u7b2c\u4e00\u884c \u4e00\u4e2a\u6574\u6570M\uff0c\u8868\u793a\u4e00\u5171\u6709M\u53ea\u7334\u5b50 \u7b2c\u4e8c\u884c\u5230\u7b2cM\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 \u8868\u793a\u4e8c\u54e5\u5373\u5c06\u6307\u5b9a\u7684M-1\u4e2a\u6574\u6570\u3002\u8fd9\u4e9b\u6570\u90fd\u5927\u4e8e0\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u540e\u5269\u4e0b\u90a3\u53ea\u7334\u5b50\u7684\u7f16\u53f7\u3002 Hint \u5bf9\u4e8e40%\u7684\u6570\u636e\uff0cM<=1000, K<=1000 \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0cM<=10000, K<=10000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cM<=10000, K<=100000000 Sample Input 5 1 2 3 4 Sample Output 4 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u7ea6\u745f\u592b */ #include <iostream> using namespace std; int main(){ int m, k[10005]; cin >> m; for (int i = 1; i < m; ++i) cin >> k[i]; int ans = 0; for (int i = 2; i <= m; ++i) ans = (ans + k[m - i + 1]) % i; cout << ++ans << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int k[30000],t,f[30000]; int main() { cin>>t; f[1]=0; for (int i=0;i<t-1;++i) cin>>k[i]; for (int i=2;i<=t;++i) f[i]=(f[i-1]+k[t-i])%i; cout<<f[t]+1; }","title":"1038"},{"location":"nr/1038/#1038","text":"\u9898\u76ee","title":"1038 \u4e8c\u54e5\u7684\u7ea6\u745f\u592b"},{"location":"nr/1038/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u7ea6\u745f\u592b */ #include <iostream> using namespace std; int main(){ int m, k[10005]; cin >> m; for (int i = 1; i < m; ++i) cin >> k[i]; int ans = 0; for (int i = 2; i <= m; ++i) ans = (ans + k[m - i + 1]) % i; cout << ++ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1038/#washswangs-solution-star","text":"#include <iostream> using namespace std; int k[30000],t,f[30000]; int main() { cin>>t; f[1]=0; for (int i=0;i<t-1;++i) cin>>k[i]; for (int i=2;i<=t;++i) f[i]=(f[i-1]+k[t-i])%i; cout<<f[t]+1; }","title":"WashSwang's solution Star"},{"location":"nr/1039/","text":"1039 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 \u9898\u76ee Description \u7528\u987a\u5e8f\u5b58\u50a8\u5b9e\u73b0\u4e8c\u53c9\u6811\u3002\u8bfb\u5165\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u8f93\u51fa\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002 Input Format \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570 n\uff0c\u8868\u793a\u8fd9\u68f5\u6811\u6709 n \u4e2a\u8282\u70b9\u3002\u8fd9 n \u4e2a\u8282\u70b9\u7f16\u53f7\u4e3a 1 \u5230 n\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u63cf\u8ff0\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u513f\u5b50\u60c5\u51b5\u3002\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570 x y z\uff0c\u8868\u793a\u7f16\u53f7\u4e3a x \u7684\u8282\u70b9\u7684\u5de6\u513f\u5b50\u7f16\u53f7\u4e3a y\uff0c\u53f3\u513f\u5b50\u7f16\u53f7\u4e3a z\u3002\u82e5 y=-1 \u6216 z=-1\uff0c\u8868\u793a x \u6ca1\u6709\u5de6\u5b50\u6811\u6216\u53f3\u5b50\u6811\u3002 \u7f16\u53f7\u4e3a 1 \u7684\u8282\u70b9\u4e3a\u6811\u7684\u6839\u8282\u70b9\u3002 Output Format \u7b2c\u4e00\u884c\uff1a\u8f93\u51fa n \u4e2a\u6574\u6570\uff0c\u7b2c i \u4e2a\u6574\u6570\u4e3a\u7f16\u53f7 i \u7684\u8282\u70b9\u5728\u987a\u5e8f\u5b58\u50a8\u7684\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\u8f93\u51fa\u7684\u6570\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c\u4e8c\u884c\uff1a\u8f93\u51fa\u8fd9\u4e2a\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8f93\u51fa\u7684\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 Hint N<=30000\uff0c\u6811\u7684\u9ad8\u5ea6\u4fdd\u8bc1\u4e0d\u8d85\u8fc715\u3002 \u8f93\u5165\u4e2d\uff0c\u9664\u4e86\u6839\u8282\u70b9\u5916\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u63cf\u8ff0\u603b\u5728\u5b83\u7684\u7236\u8282\u70b9\u7684\u63cf\u8ff0\u51fa\u73b0\u4e4b\u540e\u7ed9\u51fa\u3002 Sample Input 5 1 2 4 4 5 -1 5 -1 -1 2 -1 3 3 -1 -1 Sample Output 1 2 5 3 6 3 2 5 4 1 FineArtz's solution Star /* \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, pos = 0, ind = 0; }; Node a[100005]; int n, root = 0, b[100005], c[100005]; void encode(int root){ int q[200005], front = 0, rear = 0, cnt = 0, r = 0; q[rear++]= root; r = rear; a[root].pos = ++cnt; while (front != r){ int now = q[front++]; ++cnt; if (now != -1){ if (a[now].l != -1){ q[rear++] = b[a[now].l]; a[b[a[now].l]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } ++cnt; if (now != -1){ if (a[now].r != -1){ q[rear++] = b[a[now].r]; a[b[a[now].r]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } } for (int i = 1; i <= n; ++i){ c[a[i].ind] = a[i].pos; } for (int i = 1; i <= n; ++i) cout << c[i] << ' '; cout << endl; } void sufTrans(int x){ if (a[x].l != -1) sufTrans(b[a[x].l]); if (a[x].r != -1) sufTrans(b[a[x].r]); cout << a[x].ind << ' '; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].ind >> a[i].l >> a[i].r; if (a[i].ind == 1) root = i; } for (int i = 1; i <= n; ++i){ b[a[i].ind] = i; } encode(root); sufTrans(root); cout << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int n,root,postn,seq[30001],post[30001],ls[30001],rs[30001],x,y,z; void dfs(int x) { if (ls[x]!=-1) { seq[ls[x]]=2*seq[x]; dfs(ls[x]); } if (rs[x]!=-1){ seq[rs[x]]=2*seq[x]+1; dfs(rs[x]); } post[++postn]=x; } int main() { cin>>n; for (int i=0;i<n;++i){ cin>>x>>y>>z; if (i==0) root=x; ls[x]=y; rs[x]=z; } seq[root]=1; dfs(root); for (int i=1;i<=n;++i) cout<<seq[i]<<\" \"; cout<<endl; for (int i=1;i<=n;++i) cout<<post[i]<<\" \"; return 0; }","title":"1039"},{"location":"nr/1039/#1039","text":"\u9898\u76ee","title":"1039 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811"},{"location":"nr/1039/#fineartzs-solution-star","text":"/* \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, pos = 0, ind = 0; }; Node a[100005]; int n, root = 0, b[100005], c[100005]; void encode(int root){ int q[200005], front = 0, rear = 0, cnt = 0, r = 0; q[rear++]= root; r = rear; a[root].pos = ++cnt; while (front != r){ int now = q[front++]; ++cnt; if (now != -1){ if (a[now].l != -1){ q[rear++] = b[a[now].l]; a[b[a[now].l]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } ++cnt; if (now != -1){ if (a[now].r != -1){ q[rear++] = b[a[now].r]; a[b[a[now].r]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } } for (int i = 1; i <= n; ++i){ c[a[i].ind] = a[i].pos; } for (int i = 1; i <= n; ++i) cout << c[i] << ' '; cout << endl; } void sufTrans(int x){ if (a[x].l != -1) sufTrans(b[a[x].l]); if (a[x].r != -1) sufTrans(b[a[x].r]); cout << a[x].ind << ' '; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].ind >> a[i].l >> a[i].r; if (a[i].ind == 1) root = i; } for (int i = 1; i <= n; ++i){ b[a[i].ind] = i; } encode(root); sufTrans(root); cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1039/#washswangs-solution-star","text":"#include <iostream> using namespace std; int n,root,postn,seq[30001],post[30001],ls[30001],rs[30001],x,y,z; void dfs(int x) { if (ls[x]!=-1) { seq[ls[x]]=2*seq[x]; dfs(ls[x]); } if (rs[x]!=-1){ seq[rs[x]]=2*seq[x]+1; dfs(rs[x]); } post[++postn]=x; } int main() { cin>>n; for (int i=0;i<n;++i){ cin>>x>>y>>z; if (i==0) root=x; ls[x]=y; rs[x]=z; } seq[root]=1; dfs(root); for (int i=1;i<=n;++i) cout<<seq[i]<<\" \"; cout<<endl; for (int i=1;i<=n;++i) cout<<post[i]<<\" \"; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1040/","text":"1040 \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 \u9898\u76ee Description \u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u6c42\u5b83\u7684\u5c42\u6b21\u904d\u5386\u7ed3\u679c\u3002 [\u4e8c\u53c9\u6811\u7684\u904d\u5386\u95ee\u9898\u662f\u4e00\u79cd\u7cbe\u795e\uff0c\u52a1\u5fc5\u9886\u4f1a] Input Format \u7b2c\u4e00\u884c\uff0cN<1000000\uff0c\u8868\u793a\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u3002 \u9ed8\u8ba4\u5e8f\u53f7\u4e3a0\u7684\u8282\u70b9\u4e3a\u6811\u6839\u3002\u63a5\u4e0b\u6765\u5171N-1\u884c\uff0c\u4f9d\u6b21\u8868\u793a\u5e8f\u53f7\u4e3a1\uff0c...\uff0cN-1\u7684\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u5e8f\u53f7\u3002 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u8282\u70b9\u5e8f\u53f7\u603b\u662f\u5c0f\u4e8e\u53f3\u5b69\u5b50\u8282\u70b9\u5e8f\u53f7\u3002 Output Format \u4ec5\u4e00\u884c\uff0c\u4e8c\u53c9\u6811\u7684\u5c42\u6b21\u904d\u5386\u7ed3\u679c\u3002\u8282\u70b9\u5e8f\u53f7\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 Hint Sample Input 6 0 1 1 0 4 Sample Output 0 1 4 2 3 5 FineArtz's solution Star /* \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = -1, r = -1; }; Node a[1000005]; int q[1000005] = {0}; void traverse(int root){ int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << ' '; if (a[now].l != -1) q[rear++] = a[now].l; if (a[now].r != -1) q[rear++] = a[now].r; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i < n; ++i){ int f; cin >> f; if (a[f].l == -1) a[f].l = i; else a[f].r = i; } traverse(0); return 0; }","title":"1040"},{"location":"nr/1040/#1040","text":"\u9898\u76ee","title":"1040 \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386"},{"location":"nr/1040/#fineartzs-solution-star","text":"/* \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = -1, r = -1; }; Node a[1000005]; int q[1000005] = {0}; void traverse(int root){ int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << ' '; if (a[now].l != -1) q[rear++] = a[now].l; if (a[now].r != -1) q[rear++] = a[now].r; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i < n; ++i){ int f; cin >> f; if (a[f].l == -1) a[f].l = i; else a[f].r = i; } traverse(0); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1041/","text":"1041 \u4e8c\u54e5\u6253\u98de\u673a \u9898\u76ee Description \u6bcf\u5f53\u4e8c\u54e545\u5ea6\u4ef0\u671b\u5929\u7a7a\uff0c\u4ed6\u603b\u662f\u53d1\u73b0\u5929\u4e0a\u98de\u4e86\u8bb8\u591a\u98de\u673a\u3002 \u201c\u5b9e\u5728\u662f\u592a\u4e0d\u723d\u4e86\uff0c\u770b\u6211\u628a\u8fd9\u4e9b\u98de\u673a\u5168\u90e8\u6253\u4e0b\u6765\uff01\u201d--\u4e8c\u54e5 \u5df2\u77e5\u5929\u4e0a\u4e00\u5171\u6709N\u67b6\u98de\u673a\uff0c\u4ece1...N\u7f16\u53f7\uff0c\u6bcf\u67b6\u98de\u673a\u6709\u4e00\u4e2a\u98de\u884c\u9ad8\u5ea6\u3002 \u4e8c\u54e5\u4f1a\u8ddf\u4f60\u8bf4decrease i j\uff0c\u8868\u793a\u7b2ci\u67b6\u98de\u673a\u7684\u9ad8\u5ea6\u4e0b\u964d\u4e86j\u3002 \u540c\u65f6\u4e8c\u54e5\u8fd8\u4f1a\u4e00\u8fb9\u95ee\u4f60findmin x\uff0c\u8ba9\u4f60\u544a\u8bc9\u4ed6\u5728\u9ad8\u5ea6\u5927\u4e8ex\uff08\u4e0d\u542b\u7b49\u4e8e\uff09\u7684\u98de\u673a\u4e2d\u54ea\u4e00\u67b6\u98de\u673a\u9ad8\u5ea6\u6700\u4f4e\uff08\u5982\u679c\u76f8\u540c\uff0c\u8f93\u51fa\u7f16\u53f7\u6700\u5c0f\u7684\uff09\u3002 \u901a\u5e38\u60c5\u51b5\u4e0bx\u5f88\u5c0f\uff0c\u4ee5\u81f4\u4e8e\u7ecf\u5e3899%\u7684\u98de\u673a\u9ad8\u5ea6\u5927\u4e8ex\u3002 \u9ad8\u5ea6\u6709\u53ef\u80fd\u5c0f\u4e8e0\u54e6\u3002 N<=100000,\u4e8c\u54e5\u5f00\u53e3\u6b21\u6570<=10000 Input Format \u89c1\u6837\u4f8b Output Format \u89c1\u6837\u4f8b Hint \u7528\u5806\u505a\u5427 Sample Input 5 1 2 3 4 5 findmin 4 decrease 5 1 findmin 3 decrease 5 10 findmin 3 findmin -100 Sample Output 5 4 4 5 FineArtz's solution Star /* \u4e8c\u54e5\u6253\u98de\u673a */ #include <iostream> #include <algorithm> #include <set> using namespace std; class cmp{ public: bool operator()(pair<int, int> p1, pair<int, int> p2){ return (p1.second < p2.second || (p1.second == p2.second && p1.first < p2.first)); } }; class Plane{ public: bool operator <(const Plane &p){ return (h < p.h || (h == p.h && ind < p.ind)); } int h = 0, ind = 0; }; int n; Plane a[100005]; int pos[100005]; void siftup(int x){ while (x > 1){ if (a[x] < a[x / 2]){ a[0] = a[x / 2]; a[x / 2] = a[x]; a[x] = a[0]; pos[a[x].ind] = x; pos[a[x / 2].ind] = x / 2; x /= 2; } else break; } } void makeheap(){ for (int i = n / 2 + 1; i <= n; ++i) siftup(i); } int dfs(int x, int i){ if (a[i].h > x) return i; int r1 = 0, r2 = 0; if (i * 2 <= n){ r1 = dfs(x, i * 2); } if (i * 2 + 1 <= n){ r2 = dfs(x, i * 2 + 1); } if (r1 == 0) return r2; else if (r2 == 0) return r1; else return (a[r1] < a[r2] ? r1 : r2); } void findmin(int x){ int r = dfs(x, 1); cout << a[r].ind << endl; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); set<pair<int, int>, cmp> s; cin >> n; if (n <= 70000){ for (int i = 1; i <= n; ++i){ int h; cin >> h; s.insert(make_pair(i, h)); } char ss[10]; while (cin >> ss){ if (ss[0] == 'd'){ int x, d; cin >> x >> d; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.first == x;}); auto t = *it; t.second -= d; s.erase(it); s.insert(t); } else if (ss[0] == 'f'){ int x; cin >> x; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.second > x;}); cout << it->first << '\\n'; } } } else{ for (int i = 1; i <= n; ++i){ cin >> a[i].h; a[i].ind = i; pos[i] = i; } makeheap(); char s[10]; while (cin >> s){ if (s[0] == 'd'){ int x, d; cin >> x >> d; a[pos[x]].h -= d; siftup(pos[x]); } else if (s[0] == 'f'){ int x; cin >> x; findmin(x); } } } return 0; } WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; struct node{ int n,h; }; char cmd[200]; node heap[200000]; int ptr[200000],num,x,d; inline int ls(int x){ return x<<1;} inline int rs(int x){ return x<<1|1;} void minheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&(heap[ls(x)].h<heap[s].h||(heap[ls(x)].h==heap[s].h&&heap[ls(x)].n<heap[s].n))) s=ls(x); if (rs(x)<=num&&(heap[rs(x)].h<heap[s].h||(heap[rs(x)].h==heap[s].h&&heap[rs(x)].n<heap[s].n))) s=rs(x); if (s!=x) { swap(ptr[heap[s].n],ptr[heap[x].n]); swap(heap[s],heap[x]); x=s; } else break; } } void modify(int x,int d){ heap[ptr[x]].h-=d; minheapify(ptr[x]); int cur=ptr[x]; while (cur>1){ if (heap[cur].h<heap[cur/2].h||(heap[cur].h==heap[cur/2].h&&heap[cur].n<heap[cur/2].n)){ swap(ptr[heap[cur].n],ptr[heap[cur/2].n]); swap(heap[cur],heap[cur/2]); cur/=2; } else break; } } int findmin(int x,int cur){ int ans=0x3f3f3f3f,index=0x3f3f3f3f,tmp; if (heap[cur].h<=x){ if (ls(cur)<=num){ tmp=findmin(x,ls(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } if (rs(cur)<=num){ tmp=findmin(x,rs(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } return index; } else return heap[cur].n; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>num; for (int i=1;i<=num;++i) { cin>>heap[i].h; heap[i].n=i; ptr[i]=i; } for (int i=num;i>=1;--i) minheapify(i); while (cin>>cmd){ if (strcmp(cmd,\"findmin\")==0){ cin>>x; cout<<findmin(x,1)<<endl; } if (strcmp(cmd,\"decrease\")==0){ cin>>x>>d; modify(x,d); } } return 0; }","title":"1041"},{"location":"nr/1041/#1041","text":"\u9898\u76ee","title":"1041 \u4e8c\u54e5\u6253\u98de\u673a"},{"location":"nr/1041/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u6253\u98de\u673a */ #include <iostream> #include <algorithm> #include <set> using namespace std; class cmp{ public: bool operator()(pair<int, int> p1, pair<int, int> p2){ return (p1.second < p2.second || (p1.second == p2.second && p1.first < p2.first)); } }; class Plane{ public: bool operator <(const Plane &p){ return (h < p.h || (h == p.h && ind < p.ind)); } int h = 0, ind = 0; }; int n; Plane a[100005]; int pos[100005]; void siftup(int x){ while (x > 1){ if (a[x] < a[x / 2]){ a[0] = a[x / 2]; a[x / 2] = a[x]; a[x] = a[0]; pos[a[x].ind] = x; pos[a[x / 2].ind] = x / 2; x /= 2; } else break; } } void makeheap(){ for (int i = n / 2 + 1; i <= n; ++i) siftup(i); } int dfs(int x, int i){ if (a[i].h > x) return i; int r1 = 0, r2 = 0; if (i * 2 <= n){ r1 = dfs(x, i * 2); } if (i * 2 + 1 <= n){ r2 = dfs(x, i * 2 + 1); } if (r1 == 0) return r2; else if (r2 == 0) return r1; else return (a[r1] < a[r2] ? r1 : r2); } void findmin(int x){ int r = dfs(x, 1); cout << a[r].ind << endl; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); set<pair<int, int>, cmp> s; cin >> n; if (n <= 70000){ for (int i = 1; i <= n; ++i){ int h; cin >> h; s.insert(make_pair(i, h)); } char ss[10]; while (cin >> ss){ if (ss[0] == 'd'){ int x, d; cin >> x >> d; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.first == x;}); auto t = *it; t.second -= d; s.erase(it); s.insert(t); } else if (ss[0] == 'f'){ int x; cin >> x; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.second > x;}); cout << it->first << '\\n'; } } } else{ for (int i = 1; i <= n; ++i){ cin >> a[i].h; a[i].ind = i; pos[i] = i; } makeheap(); char s[10]; while (cin >> s){ if (s[0] == 'd'){ int x, d; cin >> x >> d; a[pos[x]].h -= d; siftup(pos[x]); } else if (s[0] == 'f'){ int x; cin >> x; findmin(x); } } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1041/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; struct node{ int n,h; }; char cmd[200]; node heap[200000]; int ptr[200000],num,x,d; inline int ls(int x){ return x<<1;} inline int rs(int x){ return x<<1|1;} void minheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&(heap[ls(x)].h<heap[s].h||(heap[ls(x)].h==heap[s].h&&heap[ls(x)].n<heap[s].n))) s=ls(x); if (rs(x)<=num&&(heap[rs(x)].h<heap[s].h||(heap[rs(x)].h==heap[s].h&&heap[rs(x)].n<heap[s].n))) s=rs(x); if (s!=x) { swap(ptr[heap[s].n],ptr[heap[x].n]); swap(heap[s],heap[x]); x=s; } else break; } } void modify(int x,int d){ heap[ptr[x]].h-=d; minheapify(ptr[x]); int cur=ptr[x]; while (cur>1){ if (heap[cur].h<heap[cur/2].h||(heap[cur].h==heap[cur/2].h&&heap[cur].n<heap[cur/2].n)){ swap(ptr[heap[cur].n],ptr[heap[cur/2].n]); swap(heap[cur],heap[cur/2]); cur/=2; } else break; } } int findmin(int x,int cur){ int ans=0x3f3f3f3f,index=0x3f3f3f3f,tmp; if (heap[cur].h<=x){ if (ls(cur)<=num){ tmp=findmin(x,ls(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } if (rs(cur)<=num){ tmp=findmin(x,rs(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } return index; } else return heap[cur].n; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>num; for (int i=1;i<=num;++i) { cin>>heap[i].h; heap[i].n=i; ptr[i]=i; } for (int i=num;i>=1;--i) minheapify(i); while (cin>>cmd){ if (strcmp(cmd,\"findmin\")==0){ cin>>x; cout<<findmin(x,1)<<endl; } if (strcmp(cmd,\"decrease\")==0){ cin>>x>>d; modify(x,d); } } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1042/","text":"1042 \u5de6\u513f\u5b50\u53f3\u5144\u5f1f \u9898\u76ee Description \u8f93\u5165\u4e00\u68f5\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u7684\u6811\uff0c\u8f93\u51fa\u5b83(\u6309\u7167\u6b63\u5e38\u8868\u793a\u7684)\u524d\u5e8f\u3001\u540e\u5e8f\u548c\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u3002 [\u5de6\u513f\u5b50\u53f3\u5144\u5f1f\u8868\u793a\u6cd5\u662f\u4e00\u79cd\u7cbe\u795e\uff0c\u52a1\u5fc5\u9886\u4f1a] \u6837\u4f8b\u8bf4\u660e\uff1a 2 /|\\ 1 3 4 / \\ \\ 5 6 7 | 8 Input Format \u7b2c\u4e00\u884c\uff0cN<=12345\uff0c\u8868\u793a\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u3002 \u63a5\u4e0b\u6765\u5171N\u884c\uff0c\u6bcf\u884c3\u4e2a\u6574\u6570\uff1aX, Cx, Sx \u8868\u793aX\u53f7\u8282\u70b9\u7684\u5de6\u513f\u5b50\u662fCx\u5e76\u4e14\u53f3\u5144\u5f1f\u662fSx\u3002\u5982\u679cCx=0\u8868\u793a\u5b83\u6ca1\u6709\u5de6\u513f\u5b50\uff0c\u7c7b\u4f3c\u5730\u5982\u679cSx=0\u8868\u793a\u6ca1\u6709\u53f3\u5144\u5f1f\u3002 \u4fdd\u8bc1\u6240\u6709\u7684X\u90fd\u57281\u5230N\u4e2d\u4e14\u6ca1\u6709\u91cd\u590d Output Format \u7b2c1\u884c \u8f93\u51faN\u4e2a\u6574\u6570\uff0c\u4e3a\u8fd9\u4e2a\u6811\u7684\u524d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8f93\u51fa\u7684\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c2\u884c \u8f93\u51faN\u4e2a\u6574\u6570\uff0c\u4e3a\u8fd9\u4e2a\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8f93\u51fa\u7684\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c3\u884c \u8f93\u51faN\u4e2a\u6574\u6570\uff0c\u4e3a\u8fd9\u4e2a\u6811\u7684\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\uff0c\u8f93\u51fa\u7684\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 Hint Sample Input 8 2 1 0 1 5 3 3 0 4 4 7 0 5 0 6 6 0 0 7 8 0 8 0 0 Sample Output 2 1 5 6 3 4 7 8 5 6 1 3 8 7 4 2 2 1 3 4 5 6 7 8 FineArtz's solution Star /* \u5de6\u513f\u5b50\u53f3\u5144\u5f1f */ #include <iostream> using namespace std; class Node{ public: int child = 0, brother = 0; }; Node a[12350]; bool v[12350] = {0}; void dlr(int x){ cout << x << ' '; int i = a[x].child; while (i != 0){ dlr(i); i = a[i].brother; } } void lrd(int x){ int i = a[x].child; while (i != 0){ lrd(i); i = a[i].brother; } cout << x << ' '; } void hie(int x){ int q[12350], front = 0, rear = 0; q[rear++] = x; while (front != rear){ int now = q[front++]; cout << now << ' '; int i = a[now].child; while (i != 0){ q[rear++] = i; i = a[i].brother; } } } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ int x, cx, sx; cin >> x >> cx >> sx; a[x].child = cx; a[x].brother = sx; v[cx] = true; v[sx] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!v[i]){ root = i; break; } } dlr(root); cout << endl; lrd(root); cout << endl; hie(root); cout << endl; return 0; }","title":"1042"},{"location":"nr/1042/#1042","text":"\u9898\u76ee","title":"1042 \u5de6\u513f\u5b50\u53f3\u5144\u5f1f"},{"location":"nr/1042/#fineartzs-solution-star","text":"/* \u5de6\u513f\u5b50\u53f3\u5144\u5f1f */ #include <iostream> using namespace std; class Node{ public: int child = 0, brother = 0; }; Node a[12350]; bool v[12350] = {0}; void dlr(int x){ cout << x << ' '; int i = a[x].child; while (i != 0){ dlr(i); i = a[i].brother; } } void lrd(int x){ int i = a[x].child; while (i != 0){ lrd(i); i = a[i].brother; } cout << x << ' '; } void hie(int x){ int q[12350], front = 0, rear = 0; q[rear++] = x; while (front != rear){ int now = q[front++]; cout << now << ' '; int i = a[now].child; while (i != 0){ q[rear++] = i; i = a[i].brother; } } } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ int x, cx, sx; cin >> x >> cx >> sx; a[x].child = cx; a[x].brother = sx; v[cx] = true; v[sx] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!v[i]){ root = i; break; } } dlr(root); cout << endl; lrd(root); cout << endl; hie(root); cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1043/","text":"1043 \u5b8c\u5168\u4e8c\u53c9\u6811 \u9898\u76ee Description \u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 Input Format \u7b2c\u4e00\u884c\uff0cN<1000000\uff0c\u8868\u793a\u4e8c\u53c9\u6811\u8282\u70b9\u6570\u3002 \u9ed8\u8ba4\u5e8f\u53f7\u4e3a0\u7684\u8282\u70b9\u4e3a\u6811\u6839\u3002\u63a5\u4e0b\u6765\u5171N-1\u884c\uff0c\u4f9d\u6b21\u8868\u793a\u5e8f\u53f7\u4e3a1\uff0c...\uff0cN-1\u7684\u8282\u70b9\u7684\u7236\u4eb2\u8282\u70b9\u5e8f\u53f7\u3002 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50\u8282\u70b9\uff0c\u5de6\u5b69\u5b50\u8282\u70b9\u5e8f\u53f7\u603b\u662f\u5c0f\u4e8e\u53f3\u5b69\u5b50\u8282\u70b9\u5e8f\u53f7\u3002 Output Format \u4ec5\u4e00\u884c\uff0c\u5982\u679c\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5219\u8f93\u51fatrue\uff0c\u5426\u5219\u8f93\u51fafalse\u3002 Hint Sample Input1 6 0 1 1 0 4 Sample Output1 true Sample Input2 6 0 1 1 0 3 Sample Output2 false FineArtz's solution Star /* \u5b8c\u5168\u4e8c\u53c9\u6811 */ #include <iostream> #include <queue> using namespace std; class Node{ public: int lchild = -1, rchild = -1; }; Node a[1000005]; bool check(int root){ queue<int> q; q.push(root); int t = q.front(); q.pop(); while (t != -1){ q.push(a[t].lchild); q.push(a[t].rchild); t = q.front(); q.pop(); } while (!q.empty()){ t = q.front(); q.pop(); if (t != -1) return false; } return true; } int main(){ int n, t; cin >> n; for (int i = 1; i < n; ++i){ cin >> t; if (a[t].lchild == -1) a[t].lchild = i; else a[t].rchild = i; } if (check(0)) cout << \"true\" << endl; else cout << \"false\" << endl; return 0; }","title":"1043"},{"location":"nr/1043/#1043","text":"\u9898\u76ee","title":"1043 \u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"nr/1043/#fineartzs-solution-star","text":"/* \u5b8c\u5168\u4e8c\u53c9\u6811 */ #include <iostream> #include <queue> using namespace std; class Node{ public: int lchild = -1, rchild = -1; }; Node a[1000005]; bool check(int root){ queue<int> q; q.push(root); int t = q.front(); q.pop(); while (t != -1){ q.push(a[t].lchild); q.push(a[t].rchild); t = q.front(); q.pop(); } while (!q.empty()){ t = q.front(); q.pop(); if (t != -1) return false; } return true; } int main(){ int n, t; cin >> n; for (int i = 1; i < n; ++i){ cin >> t; if (a[t].lchild == -1) a[t].lchild = i; else a[t].rchild = i; } if (check(0)) cout << \"true\" << endl; else cout << \"false\" << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1044/","text":"1044 \u4e8c\u54e5\u6253\u6e38\u620f \u9898\u76ee Description \u4e8c\u54e5\u6253\u5373\u65f6\u6218\u7565\u6e38\u620f\u662f\u4e2a\u83dc\u9e1f\uff0c\u4ed6\u4ece\u6765\u4e0d\u8003\u8651\u4ec0\u4e48\u65f6\u5019\u8be5\u5e72\u5565\uff0c\u4ed6\u53ea\u505a\u4e00\u4ef6\u4e8b\uff1a\u9009\u4e2d\u5efa\u7b51\uff0c\u7136\u540e\u5f00\u59cb\u9020\u5355\u4f4d\u3002 \u4e8c\u54e5\u53ef\u4ee5\u751f\u4ea7 K \u79cd\u4e0d\u540c\u7684\u5355\u4f4d\uff0c\u5f53\u7136\u6bcf\u79cd\u5355\u4f4d\u90fd\u9700\u8981\u6d88\u8017\u4e00\u5b9a\u7684\u8d44\u6e90\u3002\u5728\u8fd9\u4e2a\u6e38\u620f\u4e2d\u8d44\u6e90\u53ea\u6709\u4e24\u79cd\uff1a\u98df\u7269\u548c\u6728\u6750\u3002\u6bcf\u4e00\u79d2\u5f00\u59cb\uff0c\u4e8c\u54e5\u7684\u519c\u6c11\u90fd\u4f1a\u5f80\u57fa\u5730\u9001\u4e00\u5b9a\u6570\u91cf\u7684\u67d0\u79cd\u8d44\u6e90\uff0c\u800c\u5728\u8d44\u6e90\u9001\u5230\u7684\u90a3\u4e2a\u65f6\u523b\uff0c\u4e8c\u54e5\u5c31\u770b\u4ed6\u80fd\u5426\u7528\u5f53\u524d\u7684\u8d44\u6e90\u9020\u51fa\u4e00\u4e2a\u5355\u4f4d\uff0c\u53ea\u8981\u53ef\u4ee5\u4ed6\u5c31\u4f1a\u9020\u3002\u5982\u679c\u6709\u4e0d\u540c\u7684\u5355\u4f4d\u90fd\u53ef\u4ee5\u88ab\u751f\u4ea7\u51fa\u6765\uff0c\u4e8c\u54e5\u4e00\u5b9a\u4f1a\u9020\u6700\u5389\u5bb3\u7684\u5355\u4f4d\u3002\u4e8e\u662f\u4e8c\u54e5\u8fd8\u7ed9\u8fd9 K \u79cd\u5355\u4f4d\u5404\u6807\u8bb0\u4e86\u4e00\u4e2a\u7b49\u7ea7\uff0c\u7b49\u7ea7\u8d8a\u9ad8\uff0c\u8be5\u5355\u4f4d\u5728\u4ed6\u773c\u4e2d\u5c31\u8d8a\u6709\u4ef7\u503c\u3002 \u5728\u8fd9\u4e2a\u6e38\u620f\u91cc\uff0c\u540c\u4e00\u65f6\u523b\u57fa\u5730\u83b7\u5f97\u7684\u8d44\u6e90\u90fd\u7b97\u4f5c\u4e00\u6574\u4efd\uff0c\u800c\u8d44\u6e90\u603b\u662f\u88ab\u6574\u4efd\u5730\u4f7f\u7528\u6389\u3002\u8b6c\u5982\u67d0\u65f6\u523b\u4e8c\u54e5\u83b7\u5f97\u4e86 20 \u7684\u98df\u7269\uff0c\u9020\u4e00\u4e2a\u5355\u4f4d\u8981 15 \u7684\u98df\u7269\uff0c\u90a3\u4e48\u8fd9 20 \u5355\u4f4d\u7684\u98df\u7269\u4e00\u5b9a\u4f1a\u4e00\u8d77\u88ab\u6d88\u8017\u6389\u3002\u53e6\u4e00\u4e2a\u7279\u522b\u7684\u5730\u65b9\u5728\u4e8e\uff0c\u5148\u83b7\u5f97\u7684\u8d44\u6e90\u603b\u662f\u5148\u88ab\u4f7f\u7528\u3002\u8b6c\u5982\u4e8c\u54e5\u524d\u4e24\u79d2\u4f9d\u6b21\u83b7\u5f97\u4e86 10, 15 \u5355\u4f4d\u7684\u98df\u7269\uff0c\u800c\u9020\u67d0\u4e2a\u5355\u4f4d\u6d88\u8017 15 \u98df\u7269\uff0c\u90a3\u4e48\u5b9e\u9645\u4e00\u5b9a\u662f\u6d88\u8017\u4e86\u524d\u4e24\u79d2\u4ea7\u751f\u7684 25 \u5355\u4f4d\u7684\u98df\u7269\uff0c\u800c\u4e0d\u4f1a\u53ea\u4f7f\u7528\u7b2c\u4e8c\u79d2\u4ea7\u751f\u7684 15 \u98df\u7269\u3002\u98df\u7269\u548c\u6728\u6750\u4e92\u4e0d\u5f71\u54cd\uff0c\u5373\u4e0d\u4f1a\u56e0\u4e3a\u4f7f\u7528\u4e86\u6728\u6750\u800c\u6d6a\u8d39\u5728\u5176\u4e4b\u524d\u751f\u4ea7\u51fa\u6765\u7684\u98df\u7269\uff0c\u4e5f\u4e0d\u4f1a\u56e0\u4e3a\u4f7f\u7528\u4e86\u98df\u7269\u800c\u6d6a\u8d39\u5728\u5176\u4e4b\u524d\u751f\u4ea7\u51fa\u6765\u7684\u6728\u6750\u3002 \u6700\u540e\uff0c\u5982\u679c\u4e8c\u54e5\u751f\u4ea7\u4e86\u4e00\u4e2a\u519c\u6c11(farmer)\uff0c\u90a3\u4e48\u4ed6\u5c06\u83b7\u5f97\u8d44\u6e90\u5956\u52b1\uff0c\u4eca\u540e\u6bcf\u4e00\u79d2\u9001\u5230\u57fa\u5730\u7684\u8d44\u6e90\u7684\u6570\u91cf\u90fd\u8981+1\u3002\u8d44\u6e90\u5956\u52b1\u53ef\u4ee5\u65e0\u9650\u53e0\u52a0\uff0c\u5373\u5982\u679c\u5f53\u524d\u751f\u4ea7\u4e86 n \u4e2a\u519c\u6c11\uff0c\u90a3\u4e48\u8d44\u6e90\u5956\u52b1\u5c31\u662f+n\u3002 \u7ed9\u51fa\u4e00\u5c40\u6e38\u620f\u4e2d\u6bcf\u4e00\u79d2\u9001\u5230\u57fa\u5730\u7684\u8d44\u6e90\uff0c\u8bf7\u4f60\u544a\u8bc9\u4e8c\u54e5\u4ed6\u751f\u4ea7\u4e86\u54ea\u4e9b\u5355\u4f4d\uff0c\u4ee5\u53ca\u6e38\u620f\u7ed3\u675f\u65f6\u5269\u4f59\u7684\u8d44\u6e90\u91cf\u3002\u81f3\u4e8e\u6e38\u620f\u7684\u8f93\u8d62\uff0c\u4f60\u4eec\u61c2\u7684\u3002 Input Format \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 K \u8868\u793a\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5355\u4f4d\u3002 \u7b2c 2..K+1 \u884c\uff1a\u6bcf\u884c\u5148\u7ed9\u4e00\u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 20 \u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8be5\u5355\u4f4d\u7684\u540d\u79f0\u3002\u63a5\u4e0b\u6765\u7ed9\u51fa\u4e09\u4e2a\u6574\u6570 a, b, l \u5206\u522b\u8868\u793a\u8be5\u5355\u4f4d\u7684\u98df\u7269\u6d88\u8017\u3001\u6728\u6750\u6d88\u8017\u548c\u7b49\u7ea7\u3002\u6ca1\u6709\u4efb\u4f55\u4e24\u4e2a\u5355\u4f4d\u5177\u6709\u76f8\u540c\u7684\u540d\u79f0\u6216\u7b49\u7ea7\u3002\u5355\u4f4d\u7684\u540d\u79f0\u5bf9\u5927\u5c0f\u5199\u654f\u611f\u3002\u519c\u6c11\u5355\u4f4d\u59cb\u7ec8\u88ab\u79f0\u4e3a\"farmer\"\u3002 \u7b2c K+2 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 N \u8868\u793a\u6e38\u620f\u7684\u6301\u7eed\u65f6\u95f4\u3002 \u7b2c K+3..K+N+2 \u884c\uff1a\u6309\u65f6\u95f4\u987a\u5e8f\u7ed9\u51fa\u6bcf\u4e00\u79d2\u9001\u5230\u57fa\u5730\u7684\u8d44\u6e90\u7c7b\u578b\u548c\u6570\u91cf\u3002\u8d44\u6e90\u7c7b\u578b\u4ee5\u4e00\u4e2a \"food\" \u6216 \"wood\" \u7684\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u6574\u6570\u4e3a\u8d44\u6e90\u6570\u91cf\u3002 Output Format \u6bcf\u5236\u9020\u4e00\u4e2a\u5355\u4f4d\uff0c\u8f93\u51fa\u4e00\u884c\uff1a\"#X: a XXX was created.\"\uff0c\u5176\u4e2d X \u8868\u793a\u8be5\u5355\u4f4d\u5236\u9020\u51fa\u6765\u7684\u65f6\u95f4\uff0c\u4ece 1 \u5f00\u59cb\u8ba1\u65f6\uff1bXXX \u8868\u793a\u8be5\u5355\u4f4d\u7684\u540d\u79f0\u3002\u65e0\u9700\u8003\u8651\u82f1\u8bed\u4e2d a \u548c an \u7684\u6b63\u786e\u4f7f\u7528\u3002 \u6700\u540e\u8f93\u51fa\u4e00\u884c: \"food: XX, wood: XX\" \uff0c\u5176\u4e2d XX \u4e3a\u6bcf\u79cd\u8d44\u6e90\u6700\u540e\u7684\u5269\u4f59\u91cf\u3002 Hint \u5bf9100%\u7684\u6570\u636e\uff0c2 <= K <= 10, 3 <= N <= 10000\u3002 \u9898\u76ee\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570(\u9664\u4e86N\u4ee5\u5916)\u5747\u4e3a\u4e0d\u8d85\u8fc7 1000 \u7684\u975e\u8d1f\u6574\u6570\u3002 Sample Input 3 farmer 5 0 1 footman 16 0 2 tank 10 35 3 5 food 5 food 15 wood 40 food 20 wood 16 Sample Output #1: a farmer was created. #2: a footman was created. #4: a tank was created. food: 0, wood: 17 FineArtz's solution Star /* \u4e8c\u54e5\u6253\u6e38\u620f */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; class Unit{ public: char name[25]; int food = 0, wood = 0, priority = 0; bool operator <(const Unit &u){ return priority > u.priority; } }; int main(){ Unit a[15]; int k, n; cin >> k; for (int i = 1; i <= k; ++i){ cin >> a[i].name >> a[i].food >> a[i].wood >> a[i].priority; } sort(a + 1, a + k + 1); // for (int i = 1; i <= k; ++i) // cout << a[i].name << ' ' << a[i].food << ' ' << a[i].wood << ' ' << a[i].priority << endl; int wood = 0, food = 0, bonus = 0; int wq[10005], fq[10005], wfront = 0, wrear = 0, ffront = 0, frear = 0; cin >> n; for (int t = 1; t <= n; ++t){ char source[5]; int amount; cin >> source >> amount; amount += bonus; if (source[0] == 'f'){ fq[frear++] = amount; food += amount; } else if (source[0] == 'w'){ wq[wrear++] = amount; wood += amount; } for (int i = 1; i <= k; ++i){ if (food >= a[i].food && wood >= a[i].wood){ cout << \"#\" << t << \": a \" << a[i].name << \" was created.\" << '\\n'; int f = 0, w = 0; while (f < a[i].food){ f += fq[ffront++]; } food -= f; while (w < a[i].wood){ w += wq[wfront++]; } wood -= w; if (strcmp(a[i].name, \"farmer\") == 0) ++bonus; } } } cout << \"food: \" << food << \", wood: \" << wood << '\\n'; return 0; }","title":"1044"},{"location":"nr/1044/#1044","text":"\u9898\u76ee","title":"1044 \u4e8c\u54e5\u6253\u6e38\u620f"},{"location":"nr/1044/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u6253\u6e38\u620f */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; class Unit{ public: char name[25]; int food = 0, wood = 0, priority = 0; bool operator <(const Unit &u){ return priority > u.priority; } }; int main(){ Unit a[15]; int k, n; cin >> k; for (int i = 1; i <= k; ++i){ cin >> a[i].name >> a[i].food >> a[i].wood >> a[i].priority; } sort(a + 1, a + k + 1); // for (int i = 1; i <= k; ++i) // cout << a[i].name << ' ' << a[i].food << ' ' << a[i].wood << ' ' << a[i].priority << endl; int wood = 0, food = 0, bonus = 0; int wq[10005], fq[10005], wfront = 0, wrear = 0, ffront = 0, frear = 0; cin >> n; for (int t = 1; t <= n; ++t){ char source[5]; int amount; cin >> source >> amount; amount += bonus; if (source[0] == 'f'){ fq[frear++] = amount; food += amount; } else if (source[0] == 'w'){ wq[wrear++] = amount; wood += amount; } for (int i = 1; i <= k; ++i){ if (food >= a[i].food && wood >= a[i].wood){ cout << \"#\" << t << \": a \" << a[i].name << \" was created.\" << '\\n'; int f = 0, w = 0; while (f < a[i].food){ f += fq[ffront++]; } food -= f; while (w < a[i].wood){ w += wq[wfront++]; } wood -= w; if (strcmp(a[i].name, \"farmer\") == 0) ++bonus; } } } cout << \"food: \" << food << \", wood: \" << wood << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1045/","text":"1045 \u4e8c\u54e5\u7684\u5bb6\u65cf \u9898\u76ee Description \u4e8c\u54e5\u7684\u5bb6\u65cf(\u7b80\u79f0\u4e8c\u5bb6)\u6709\u8be6\u7ec6\u8bb0\u5f55\u5bb6\u8c31\u7684\u4f20\u7edf\uff0c\u5f53\u7136\u548c\u5176\u4ed6\u7684\u5bb6\u8c31\u4e00\u6837\u91cc\u9762\u662f\u53ea\u8bb0\u5f55\u96c4\u6027\u6210\u5458\u7684\u3002 \u7ef4\u62a4\u5bb6\u8c31\u662f\u4e00\u4ef6\u5f88\u9ebb\u70e6\u7684\u4e8b\u3002\u4e8c\u5bb6\u4e0d\u65f6\u6709\u4eba\u51fa\u751f\u6216\u6b7b\u53bb\uff0c\u90fd\u9700\u8981\u53ca\u65f6\u53cd\u6620\u5728\u5bb6\u8c31\u4e0a\u3002 \u5f53\u4e00\u4e2a\u4e8c\u5bb6\u7684(\u96c4\u6027\u7684)\u4eba\u51fa\u751f\u65f6\uff0c\u5c31\u8981\u5199\u5728\u4ed6\u7684\u7236\u4eb2\u7684\u4e0b\u9762\u3002\u5f53\u4e00\u4e2a\u4e8c\u5bb6\u7684(\u96c4\u6027\u7684)\u4eba\u6b7b\u53bb\u65f6\uff0c\u4ed6\u7684\u513f\u5b50\u4eec(\u5982\u679c\u6709\u7684\u8bdd)\u5c31\u4f1a\u5e26\u7740\u5404\u81ea\u7684\u5b50\u5b59\u4eec(\u5982\u679c\u6709\u7684\u8bdd)\u79bb\u5f00\u4ed6\u4eec\u7684\u7956\u7236/\u53d4\u53d4/\u5927\u7237\u4eec\uff0c\u5404\u81ea\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u5bb6\u3002 \u6ca1\u51fa\u751f\u7684\u4eba\u548c\u6b7b\u4eba\u662f\u4e0d\u80fd\u751f\u80b2\u540e\u4ee3\u7684(\u5e9f\u8bdd)\uff0c\u800c\u4e14\u4e0d\u5141\u8bb8\u5b69\u5b50\u51fa\u751f\u65f6\u7236\u4eb2\u5df2\u7ecf\u6b7b\u53bb\u8fd9\u79cd\u60c5\u51b5(\u522b\u95ee\u6211\u4e3a\u5565\uff0c\u8fd9\u4e5f\u662f\u4e8c\u5bb6\u7684\u89c4\u5b9a)\u3002 \u6625\u8282\u65f6\u6bcf\u5bb6\u90fd\u8981\u6d3e\u51fa\u4e00\u4e2a\u4eba\u53c2\u52a0\u201c\u4e8c\u5bb6\u4ee3\u8868\u5927\u4f1a\u201d(\u7b80\u79f0\u4e8c\u4f1a)\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u77e5\u9053\u4e8c\u5bb6\u6b64\u65f6\u6709\u51e0\u4e2a\u5bb6\u3002 \u521d\u59cb\u65f6\u4e8c\u5bb6\u53ea\u6709\u4e00\u4e2a\u4eba(\u4e5f\u5c31\u662f\u4e8c\u54e5)\u3002 Input Format \u4e8c\u54e5\u7684\u7f16\u53f7\u4e3a1 \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 N \u8868\u793a\u4e0b\u9762\u7684\u884c\u6570\u3002 \u7b2c 2..N+1 \u884c\uff1a\u6bcf\u884c\u662f\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\u4e4b\u4e00\uff1a B x y \u5176\u4e2dx\u548cy\u662f\u4e24\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7f16\u53f7\u4e3ax\u7684\u4eba(\u4fdd\u8bc1\u5b58\u5728)\u6709\u4e86\u4e00\u4e2a\u7f16\u53f7\u4e3ay\u7684\u5b69\u5b50 D x \u5176\u4e2dx\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7f16\u53f7\u4e3ax\u7684\u4eba(\u4fdd\u8bc1\u5b58\u5728)\u6b7b\u53bb\u4e86 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2aD\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u6574\u6570\u8868\u793a\u8fd9\u4e2a\u4eba\u6b7b\u4e86\u4ee5\u540e\u4e8c\u5bb6\u6709\u51e0\u4e2a\u5bb6\u3002 Hint \u5bf9100%\u7684\u6570\u636e\uff0c3 <= N <= 200000\u3002 \u9898\u76ee\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u5747\u4e3a\u4e0d\u8d85\u8fc7 200000 \u7684\u6b63\u6574\u6570\u3002 \u540c\u4e00\u65f6\u95f4\u6d3b\u7740\u7684\u4eba\u7684\u7f16\u53f7\u4e0d\u4f1a\u91cd\u590d\u3002 Sample Input 7 B 1 2 B 1 3 D 1 B 2 4 B 4 5 B 2 6 D 4 Sample Output 2 3 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5bb6\u65cf */ #include <iostream> using namespace std; bool b[200005] = {0}; int father[200005] = {0}, son[200005] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, cnt = 1; cin >> n; b[1] = true; while (n--){ char ch; cin >> ch; if (ch == 'B'){ int x, y; cin >> x >> y; father[y] = x; ++son[x]; b[y] = true; } else if (ch == 'D'){ int x; cin >> x; if (b[father[x]]){ cnt += son[x]; --son[father[x]]; } else cnt += son[x] - 1; b[x] = false; son[x] = 0; cout << cnt << '\\n'; } } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int total,fa[300000],son[300000],n,x,y; char c; bool die[300000]; int main() { fa[1]=0; die[0]=true; total=1; scanf(\"%d\",&n); for (int i=0;i<n;++i){ c=0; while (c!='B'&&c!='D') c=getchar(); if (c=='B'){ scanf(\"%d%d\",&x,&y); fa[y]=x; son[x]++; } if (c=='D'){ scanf(\"%d\",&x); die[x]=true; if (die[fa[x]]) total+=son[x]-1; else { son[fa[x]]-=1; total += son[x]; } son[x]=0; printf(\"%d\\n\",total); } } return 0; }","title":"1045"},{"location":"nr/1045/#1045","text":"\u9898\u76ee","title":"1045 \u4e8c\u54e5\u7684\u5bb6\u65cf"},{"location":"nr/1045/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5bb6\u65cf */ #include <iostream> using namespace std; bool b[200005] = {0}; int father[200005] = {0}, son[200005] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, cnt = 1; cin >> n; b[1] = true; while (n--){ char ch; cin >> ch; if (ch == 'B'){ int x, y; cin >> x >> y; father[y] = x; ++son[x]; b[y] = true; } else if (ch == 'D'){ int x; cin >> x; if (b[father[x]]){ cnt += son[x]; --son[father[x]]; } else cnt += son[x] - 1; b[x] = false; son[x] = 0; cout << cnt << '\\n'; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1045/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int total,fa[300000],son[300000],n,x,y; char c; bool die[300000]; int main() { fa[1]=0; die[0]=true; total=1; scanf(\"%d\",&n); for (int i=0;i<n;++i){ c=0; while (c!='B'&&c!='D') c=getchar(); if (c=='B'){ scanf(\"%d%d\",&x,&y); fa[y]=x; son[x]++; } if (c=='D'){ scanf(\"%d\",&x); die[x]=true; if (die[fa[x]]) total+=son[x]-1; else { son[fa[x]]-=1; total += son[x]; } son[x]=0; printf(\"%d\\n\",total); } } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1046/","text":"1046 \u4e8c\u54e5\u7684\u540a\u706f \u9898\u76ee Description \u4e8c\u54e5\u65b0\u4e70\u4e86\u4e00\u9876\u4e8c\u53c9\u6811\u5f62\u72b6\u7684\u540a\u706f\uff0c\u6bcf\u4e2a\u7ed3\u70b9\u5904\u90fd\u6709\u4e00\u4e2a\u767d\u8272\u7684\u706f\u6ce1\u3002\u4f46\u662f\u4e8c\u54e5\u7684\u5973\u53cb\u89c9\u5f97\u90fd\u662f\u767d\u8272\u7684\u706f\u4e0d\u597d\u770b\uff0c\u5c31\u8ba9\u4e8c\u54e5\u628a\u90e8\u5206\u706f\u6ce1\u6d82\u6210\u7ea2\u8272\u3002 \u6d82\u8272\u7684\u65b9\u6cd5\u662f\u8fd9\u6837\u7684\uff1a\u4e8c\u54e5\u7684\u5973\u53cb\u6307\u7740\u4e00\u4e2a\u706f\u6ce1(\u7ed3\u70b9)\uff0c\u5e76\u62a5\u51fa\u4e00\u4e2a\u6570\u5b57X\uff0c\u8ba9\u4e8c\u54e5\u628a\u8fd9\u68f5\u4ee5\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811(\u5047\u8bbe\u6709Y\u4e2a\u8282\u70b9)\u4e2d\u5e8f\u904d\u5386\u4e00\u4e0b\uff0c\u628a\u904d\u5386\u5e8f\u5217\u4e2d\u7684\u7b2c(X%Y + 1)\u4e2a\u706f\u6ce1\u6d82\u6210\u7ea2\u8272\u3002 \u8fd9\u6837\u64cd\u4f5c\u4e86\u82e5\u5e72\u6b21\u4ee5\u540e\uff0c\u4e8c\u54e5\u7684\u5973\u53cb\u53c8\u63d0\u51fa\u4e86\u82e5\u5e72\u4e2a\u95ee\u9898\uff1a\u4ee5\u67d0\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u88ab\u6d82\u6210\u7ea2\u8272\u7684\u706f\u6ce1\u5462\uff1f Input Format \u7b2c 1 \u884c\uff1a\u4e09\u4e2a\u6574\u6570 N,P,Q \u5206\u522b\u8868\u793a\u540a\u706f\u7684\u706f\u6ce1\u6570\u3001\u6d82\u8272\u7684\u6b21\u6570\u4ee5\u53ca\u8be2\u95ee\u7684\u4e2a\u6570 \u4ee5\u4e0b N \u884c\uff1a\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 x, Lx, Rx \u63cf\u8ff0\u4e00\u4e2a\u8282\u70b9\u3002\u5206\u522b\u4e3a\u8be5\u7ed3\u70b9\u7684\u7f16\u53f7\u3001\u5b83\u7684\u5de6\u513f\u5b50\u7684\u7f16\u53f7\u3001\u5b83\u7684\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u3002Lx\u6216\u8005Rx\u4e3a0\u8868\u793a\u8be5\u513f\u5b50\u4e0d\u5b58\u5728\u3002\u4fdd\u8bc1\u8282\u70b9\u7f16\u53f7\u90fd\u662f1\u5230N\u7684\u6574\u6570\u4e14\u6ca1\u6709\u91cd\u590d \u4ee5\u4e0b P \u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 t, x \u8868\u793a\u4e00\u4e2a\u6d82\u8272\u64cd\u4f5c\uff1a\u4e2d\u5e8f\u904d\u5386\u4ee5t\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5e76\u8fdb\u884c\u5982\u4e0a\u6240\u8ff0\u7684\u6d82\u8272\u64cd\u4f5c \u6700\u540e Q \u884c\uff1a\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 w \u8868\u793a\u4e00\u4e2a\u8be2\u95ee\uff1a\u4ee5w\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u88ab\u6d82\u6210\u7ea2\u8272\u7684\u706f\u6ce1\uff1f Output Format \u5171Q\u884c\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u76f8\u5e94\u7684\u7b54\u6848\u3002 Hint \u5bf970%\u7684\u6570\u636e\uff0cN,P,Q <= 2011 \u5bf9100%\u7684\u6570\u636e\uff0c3 <= N,P,Q <= 100000\u3002 \u9898\u76ee\u4e2d\u51fa\u73b0\u7684\u6240\u6709\u6570\u5747\u4e3a\u4e0d\u8d85\u8fc7 100000 \u7684\u975e\u8d1f\u6574\u6570\u3002 \u6837\u4f8b\u8bf4\u660e \u88ab\u6d82\u7ea2\u7684\u706f\u6ce1\u4f9d\u6b21\u4e3a 3,4,3 \u53f7\u3002 Sample Input 5 3 3 2 3 4 3 1 5 4 0 0 1 0 0 5 0 0 2 1 4 1 3 4 1 2 3 Sample Output 0 2 1 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u540a\u706f */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, total = 0, red = 0; bool isRed = false; }; Node a[100005]; int pos[100005]; bool b[100005]; int n, p, q; int count1(int x){ int r = 0; if (a[x].l != 0) r += count1(pos[a[x].l]); if (a[x].r != 0) r += count1(pos[a[x].r]); a[x].total = r + 1; return a[x].total; } void dye(int t, int x){ int y = a[pos[a[t].l]].total; if (y == x - 1){ a[t].isRed = true; return; } else if (y < x - 1){ dye(pos[a[t].r], x - y - 1); } else{ dye(pos[a[t].l], x); } } int count2(int x){ int r = 0; if (a[x].l != 0) r += count2(pos[a[x].l]); if (a[x].r != 0) r += count2(pos[a[x].r]); if (a[x].isRed) ++r; a[x].red = r; return a[x].red; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> p >> q; for (int i = 1; i <= n; ++i){ int x, lx, rx; cin >> x >> lx >> rx; a[i].l = lx; a[i].r = rx; b[lx] = true; b[rx] = true; pos[x] = i; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } count1(pos[root]); while (p--){ int t, x; cin >> t >> x; dye(pos[t], x % a[pos[t]].total + 1); } count2(pos[root]); while (q--){ int x; cin >> x; cout << a[pos[x]].red << '\\n'; } return 0; }","title":"1046"},{"location":"nr/1046/#1046","text":"\u9898\u76ee","title":"1046 \u4e8c\u54e5\u7684\u540a\u706f"},{"location":"nr/1046/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u540a\u706f */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, total = 0, red = 0; bool isRed = false; }; Node a[100005]; int pos[100005]; bool b[100005]; int n, p, q; int count1(int x){ int r = 0; if (a[x].l != 0) r += count1(pos[a[x].l]); if (a[x].r != 0) r += count1(pos[a[x].r]); a[x].total = r + 1; return a[x].total; } void dye(int t, int x){ int y = a[pos[a[t].l]].total; if (y == x - 1){ a[t].isRed = true; return; } else if (y < x - 1){ dye(pos[a[t].r], x - y - 1); } else{ dye(pos[a[t].l], x); } } int count2(int x){ int r = 0; if (a[x].l != 0) r += count2(pos[a[x].l]); if (a[x].r != 0) r += count2(pos[a[x].r]); if (a[x].isRed) ++r; a[x].red = r; return a[x].red; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> p >> q; for (int i = 1; i <= n; ++i){ int x, lx, rx; cin >> x >> lx >> rx; a[i].l = lx; a[i].r = rx; b[lx] = true; b[rx] = true; pos[x] = i; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } count1(pos[root]); while (p--){ int t, x; cin >> t >> x; dye(pos[t], x % a[pos[t]].total + 1); } count2(pos[root]); while (q--){ int x; cin >> x; cout << a[pos[x]].red << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1047/","text":"1047 The Clocks \u9898\u76ee Description Consider nine clocks arranged in a 3x3 array thusly: |-------| |-------| |-------| | | | | | | | |---O | |---O | | O | | | | | | | |-------| |-------| |-------| A B C |-------| |-------| |-------| | | | | | | | O | | O | | O | | | | | | | | | | |-------| |-------| |-------| D E F |-------| |-------| |-------| | | | | | | | O | | O---| | O | | | | | | | | | |-------| |-------| |-------| G H I The goal is to find a minimal sequence of moves to return all the dials to 12 o'clock. Nine different ways to turn the dials on the clocks are supplied via a table below; each way is called a move. Select for each move a number 1 through 9 which will cause the dials of the affected clocks (see next table) to be turned 90 degrees clockwise. Move Affected clocks ---- --------------- 1 ABDE 2 ABC 3 BCEF 4 ADG 5 BDEFH 6 CFI 7 DEGH 8 GHI 9 EFHI Example Each number represents a time according to following table: 9 9 12 9 12 12 9 12 12 12 12 12 12 12 12 6 6 6 5 -> 9 9 9 8-> 9 9 9 4 -> 12 9 9 9-> 12 12 12 6 3 6 6 6 6 9 9 9 12 9 9 12 12 12 [But this might or might not be the `correct' answer; see below.] Input Format Lines 1-3: Three lines of three space-separated numbers; each number represents the start time of one clock, 3, 6, 9, or 12. The ordering of the numbers corresponds to the first example above. Output Format A single line that contains a space separated list of the shortest sequence of moves (designated by numbers) which returns all the clocks to 12:00. If there is more than one solution, print the one which gives the lowest number when the moves are concatenated (e.g., 5 2 4 6 < 9 3 1 1 ). Sample Input 9 9 12 6 6 6 6 3 6 Sample Output 4 5 8 9 Hint Notice that the order in which we apply moves is irrelevant, and that applying a move four times is the same as applying it not at all. Thus there are only \\(4^9 = 262144\\) move sequences that need to be tried, so we might as well just try them all. We don't generate them shortest first, but looking at sequences of the same length, we generate the lesser ones before the greater ones, so we only need to keep track of the shortest working sequence we've found. Limits Time limit: 1000ms, memory limit: 30000kb. FineArtz's solution Star /* The Clocks */ #include <iostream> using namespace std; int a[10], ans[10] = {0}, t[10] = {0}, l = 40; initializer_list<int> imp[10] = { {0}, {1, 2, 4, 5}, {1, 2, 3}, {2, 3, 5, 6}, {1, 4, 7}, {2, 4, 5, 6, 8}, {3, 6, 9}, {4, 5, 7, 8}, {7, 8, 9}, {5, 6, 8, 9}}; inline void rotate(int a[10], int x, initializer_list<int> il){ for (int i : il){ a[i] = (a[i] + 3 * x) % 12; } } void work(int t[10]){ int len = 0, b[10]; for (int i = 1; i <= 9; ++i) b[i] = a[i]; for (int i = 1; i <= 9; ++i){ if (t[i]) ++len; rotate(b, t[i], imp[i]); } for (int i = 1; i <= 9; ++i) if (b[i]) return; if (len < l){ l = len; for (int i = 1; i <= 9; ++i) ans[i] = t[i]; } } int main(){ for (int i = 1; i <= 9; ++i){ cin >> a[i]; a[i] %= 12; } // t[4] = t[5] = t[8] = t[9] = 1; // work(t); for (int i = 0; i < 262144; ++i){ work(t); ++t[9]; int j = 9; while (t[j] == 4){ t[j] = 0; ++t[--j]; } } for (int i = 1; i <= 9; ++i) for (int j = 1; j <= ans[i]; ++j) cout << i << ' '; cout << endl; return 0; }","title":"1047"},{"location":"nr/1047/#1047-the-clocks","text":"\u9898\u76ee","title":"1047 The Clocks"},{"location":"nr/1047/#fineartzs-solution-star","text":"/* The Clocks */ #include <iostream> using namespace std; int a[10], ans[10] = {0}, t[10] = {0}, l = 40; initializer_list<int> imp[10] = { {0}, {1, 2, 4, 5}, {1, 2, 3}, {2, 3, 5, 6}, {1, 4, 7}, {2, 4, 5, 6, 8}, {3, 6, 9}, {4, 5, 7, 8}, {7, 8, 9}, {5, 6, 8, 9}}; inline void rotate(int a[10], int x, initializer_list<int> il){ for (int i : il){ a[i] = (a[i] + 3 * x) % 12; } } void work(int t[10]){ int len = 0, b[10]; for (int i = 1; i <= 9; ++i) b[i] = a[i]; for (int i = 1; i <= 9; ++i){ if (t[i]) ++len; rotate(b, t[i], imp[i]); } for (int i = 1; i <= 9; ++i) if (b[i]) return; if (len < l){ l = len; for (int i = 1; i <= 9; ++i) ans[i] = t[i]; } } int main(){ for (int i = 1; i <= 9; ++i){ cin >> a[i]; a[i] %= 12; } // t[4] = t[5] = t[8] = t[9] = 1; // work(t); for (int i = 0; i < 262144; ++i){ work(t); ++t[9]; int j = 9; while (t[j] == 4){ t[j] = 0; ++t[--j]; } } for (int i = 1; i <= 9; ++i) for (int j = 1; j <= ans[i]; ++j) cout << i << ' '; cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1048/","text":"1048 \u4e8c\u53c9\u6811\u904d\u5386 \u9898\u76ee Description \u7ed9\u51fa\u4e00\u68f5\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff08\u6240\u6709\u53f6\u5b50\u8282\u70b9\u9ad8\u5ea6\u76f8\u540c\uff0c\u6240\u6709\u975e\u53f6\u5b50\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff09\u7684\u63cf\u8ff0\uff0c\u8f93\u51fa\u6309\u5c42\u6b21\u987a\u5e8f\u904d\u5386\u8fd9\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u679c\u3002 \u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\u90fd\u5bf9\u5e94\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570\u4f5c\u4e3a\u6807\u8bb0\u3002\u5bf9\u4e8e\u4e00\u68f5\u6709\\(n\\)\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811\uff0c\u5176\u8282\u70b9\u6807\u8bb0\u7684\u53d6\u503c\u8303\u56f4\u4e3a\\(1\\)\u81f3\\(n\\)\uff0c\u4e14\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u6807\u8bb0\u4e0d\u76f8\u7b49\u3002 Input Format \u7b2c\\(1\\)\u884c\uff1a\\(1\\)\u4e2a\u6b63\u6574\u6570\\(n\\)\uff0c\u8868\u793a\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570\u4e3a\\(n\\)\uff1b \u7b2c\\(2\\)\u884c\u81f3\u8f93\u5165\u7ed3\u675f\uff1a\u6bcf\u884c\u6709\\(3\\)\u4e2a\u6b63\u6574\u6570a\u3001b\u548cc\uff0c\u8bbe\u5206\u522b\u4e3a\u8282\u70b9A\u3001B\u548cC\u7684\u6807\u8bb0\uff0c\u8868\u793aA\u7684\u5de6\u513f\u5b50\u8282\u70b9\u662fB\uff0c\u53f3\u513f\u5b50\u8282\u70b9\u662fC\u3002 Output Format \u8f93\u51fa\u5171\\(n\\)\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u904d\u5386\u7ed3\u679c\u4e2d\u76f8\u5e94\u6b21\u5e8f\u7684\u8282\u70b9\u7684\u6807\u8bb0\u3002 Sample Input 7 3 2 1 1 7 6 2 4 5 Sample Output 3 2 1 4 5 7 6 Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c3 <= n <= 127\uff1b\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c3 <= n <= 1023\u3002\u6240\u6709\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u6709\u6548\u3002 \u65f6\u95f4\u9650\u5236\uff1a1000ms\uff0c\u5185\u5b58\u9650\u5236\uff1a30000kb\u3002 Hint \u5148\u6839\u636e\u8f93\u5165\u6570\u636e\u627e\u5230\u8be5\u4e8c\u53c9\u6811\u7684\u6839\uff0c\u7136\u540e\u4ece\u6839\u5f00\u59cb\u9010\u5c42\u904d\u5386\u8be5\u4e8c\u53c9\u6811\u3002 FineArtz's solution Star /* \u4e8c\u53c9\u6811\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0; }; Node a[1025]; bool b[1025] = {0}; void hie(int root){ int q[1025] = {0}, front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << endl; if (a[now].l != 0){ q[rear++] = a[now].l; } if (a[now].r != 0){ q[rear++] = a[now].r; } } } int main(){ int n; cin >> n; n >>= 1; for (int i = 1; i <= n; ++i){ int x, y, z; cin >> x >> y >> z; a[x].l = y; a[x].r = z; b[y] = true; b[z] = true; } int root = 0; for (int i = 1; i <= n * 2 + 1; ++i){ if (!b[i]){ root = i; break; } } hie(root); return 0; }","title":"1048"},{"location":"nr/1048/#1048","text":"\u9898\u76ee","title":"1048 \u4e8c\u53c9\u6811\u904d\u5386"},{"location":"nr/1048/#fineartzs-solution-star","text":"/* \u4e8c\u53c9\u6811\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0; }; Node a[1025]; bool b[1025] = {0}; void hie(int root){ int q[1025] = {0}, front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << endl; if (a[now].l != 0){ q[rear++] = a[now].l; } if (a[now].r != 0){ q[rear++] = a[now].r; } } } int main(){ int n; cin >> n; n >>= 1; for (int i = 1; i <= n; ++i){ int x, y, z; cin >> x >> y >> z; a[x].l = y; a[x].r = z; b[y] = true; b[z] = true; } int root = 0; for (int i = 1; i <= n * 2 + 1; ++i){ if (!b[i]){ root = i; break; } } hie(root); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1049/","text":"1049 \u706b\u8f66\u8c03\u5ea6 \u9898\u76ee Description \u6709\u4e00\u6761\u4e1c\u897f\u65b9\u5411\u7684\u94c1\u8def\u7a7f\u8fc7\u5c0f\u57ceA\uff0c\u5c0f\u57ceA\u6709\u4e00\u4e2a\u706b\u8f66\u8c03\u5ea6\u7ad9\uff0c\u793a\u610f\u56fe\u5982\u4e0b\uff1a \u73b0\u5728\u6709N\u5217\u706b\u8f66\u81ea\u4e1c\u5411\u897f\u4f9d\u6b21\u5f00\u8fc7\u6765\u4e86\uff0c\u6309\u7167\u5230\u8fbe\u7684\u5148\u540e\u6b21\u5e8f\u7f16\u53f7\u4e3a0\u53f7\u5230N-1\u53f7\u3002 \u6839\u636e\u8c03\u5ea6\u5c40\u7684\u8981\u6c42\uff0c\u5c0f\u57ceA\u7684\u8c03\u5ea6\u7ad9\u8981\u6539\u53d8\u8fd9\u4e9b\u5217\u8f66\u9a76\u79bbA\u57ce\u7684\u987a\u5e8f\u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c \u8c03\u5ea6\u7ad9\u5728\u4efb\u610f\u65f6\u523b\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\u4e4b\u4e00\uff1a \u5982\u679c\u8c03\u5ea6\u7ad9\u8fd8\u6709\u5269\u4f59\u7a7a\u95f4\uff0c\u5219\u53ef\u4ee5\u4ee4\u4e0b\u4e00\u5217\u5f00\u6765\u7684\u706b\u8f66\u8fdb\u5165\u8c03\u5ea6\u7ad9\uff1b \u5982\u679c\u8c03\u5ea6\u7ad9\u5185\u6709\u5217\u8f66\uff0c\u5219\u53ef\u4ee5\u4ee4\u8c03\u5ea6\u7ad9\u6700\u524d\u65b9\u7684\u706b\u8f66\u79bb\u5f00\u8c03\u5ea6\u7ad9\u5e76\u9a76\u79bbA\u57ce\uff1b \u53ef\u4ee5\u547d\u4ee4\u4e0b\u4e00\u5217\u5f00\u6765\u7684\u706b\u8f66\u4e0d\u7ecf\u8fc7\u8c03\u5ea6\u7ad9\u800c\u76f4\u63a5\u9a76\u79bbA\u57ce\u3002 \u4e0d\u8fc7\u5c0f\u57ceA\u7684\u8c03\u5ea6\u7ad9\u5b9e\u5728\u592a\u5c0f\u4e86\uff0c\u53ea\u80fd\u5bb9\u7eb3M\u5217\u706b\u8f66\uff0c\u8bf7\u5e2e\u5fd9\u786e\u8ba4\u8c03\u5ea6\u7ad9\u80fd\u5426\u5b8c\u6210\u4efb\u52a1\u3002 \u4f8b\u5b50 \u5982\u679c\u67094\u5217\u706b\u8f66\u5f00\u6765\uff0c\u8c03\u5ea6\u7ad9\u53ef\u4ee5\u5bb9\u7eb32\u5217\u706b\u8f66\uff0c\u8c03\u5ea6\u5c40\u8981\u6c42\u706b\u8f66\u6309\u71672\u30011\u30013\u30010\u7684\u987a\u5e8f\u9a76\u79bbA\u57ce\uff0c\u5219\u6b64\u4efb\u52a1\u53ef\u6ee1\u8db3\uff0c\u4e00\u79cd\u53ef\u80fd\u7684\u65b9\u6848\u5982\u4e0b\uff1a Step 1\uff1a\u706b\u8f660\u8fdb\u5165\u8c03\u5ea6\u7ad9\uff1b Step 2\uff1a\u706b\u8f661\u8fdb\u5165\u8c03\u5ea6\u7ad9\uff1b Step 3\uff1a\u706b\u8f662\u4e0d\u7ecf\u8fc7\u8c03\u5ea6\u7ad9\u9a76\u79bbA\u57ce\uff1b Step 4\uff1a\u706b\u8f661\u4ece\u8c03\u5ea6\u7ad9\u9a76\u79bbA\u57ce\uff1b Step 5\uff1a\u706b\u8f663\u4e0d\u7ecf\u8fc7\u8c03\u5ea6\u7ad9\u9a76\u79bbA\u57ce\uff1b Step 6\uff1a\u706b\u8f660\u4ece\u8c03\u5ea6\u7ad9\u9a76\u79bbA\u57ce\uff1b \u5f53\u7136\uff0c\u4f60\u53ea\u9700\u8981\u56de\u7b54\u662f\u5426\u53ef\u884c\uff0c\u4e0d\u9700\u8981\u5217\u51fa\u4e00\u79cd\u53ef\u884c\u65b9\u6848\u3002 Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570\\(T\\)\uff0c\u8868\u793a\u672c\u6d4b\u8bd5\u6570\u636e\u6709\u591a\u5c11\u4e2a\u72ec\u7acb\u7684\u6d4b\u8bd5\u70b9\u3002\uff08 \\(T \\leq 300\\) \uff09 \u4e4b\u540e\u6709\\(T\\)\u4e2a\u72ec\u7acb\u7684\u6d4b\u8bd5\u70b9\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u5360\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6570\u5b57\\(N\\)\u548c\\(M\\)\uff0c\u5206\u522b\u8868\u793a\u5f00\u6765\u7684\u706b\u8f66\u6570\u91cf\uff0c\u4ee5\u53ca\u8c03\u5ea6\u7ad9\u6700\u591a\u53ef\u5bb9\u7eb3\u7684\u706b\u8f66\u6570\u91cf\uff0c\u4e24\u4e2a\u6570\u5b57\u4e4b\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c\u4e8c\u884c\u6709\\(N\\)\u4e2a\u6574\u6570\uff0c\u4ed6\u4eec\u90fd\u5728\\(0\\)\u5230\\(N-1\\)\u4e4b\u95f4\uff0c\u4e14\u4e0d\u91cd\u590d\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u706b\u8f66\u9a76\u79bbA\u57ce\u7684\u6b21\u5e8f\u3002 \\(N\\)\u662f\u6b63\u6574\u6570\uff0c\u4e14\\(N \\leq 1000\\)\uff1b\\(M\\)\u662f\u975e\u8d1f\u6574\u6570\uff0c\u4e14\\(M \\leq 1000\\)\u3002 \\(M\\)\u53ef\u80fd\u4e3a\\(0\\)\uff08\u8fd9\u4e5f\u8bb8\u8bf4\u660e\u8c03\u5ea6\u7ad9\u7684\u5de5\u4f5c\u4eba\u5458\u7f62\u5de5\u4e86\uff0c\u6216\u8005\u6b63\u5728\u8fd9\u4e2a\u8003\u573a\u8003\u8bd5\uff09\u3002 Output Format \u8f93\u51fa\u5171\\(T\\)\u884c\uff0c\u6bcf\u884c\u5bf9\u5e94\u4e00\u4e2a\u6d4b\u8bd5\u70b9\u3002\u5982\u679c\u80fd\u591f\u8c03\u5ea6\uff0c\u5219\u56de\u7b54 YES \uff0c\u5426\u5219\u56de\u7b54 NO \u3002 \u8f93\u51fa\u8bf7\u6ce8\u610f\u5927\u5c0f\u5199\uff0c\u6bcf\u884c\u884c\u672b\u76f4\u63a5\u56de\u8f66\uff0c\u4e0d\u8981\u6709\u5176\u4ed6\u5b57\u7b26\u3002 Sample Input 2 4 2 2 1 3 0 5 2 2 4 3 1 0 Sample Output YES NO Hint \u5bf9\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\uff0c\u4ec5\u5f53\u5176\u5185\u90e8\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u90fd\u56de\u7b54\u6b63\u786e\u624d\u5f97\u5206\u3002 \u4ece\u6982\u7387\u4e0a\u8bb2\uff0c\u5982\u679c\u4f60\u91c7\u53d6\u968f\u673a\u56de\u7b54YES/NO\u7684\u65b9\u5f0f\uff0c\u4f60\u53ea\u6709\u5927\u7ea6\\(2^{-300}\\)\u7684\u6982\u7387\u9a97\u5230\u5206\uff0c\u8fd9\u5927\u7ea6\u76f8\u5f53\u4e8e\u5b87\u5b99\u4e2d\u8d28\u5b50\u6570\u91cf\u7684\u5012\u6570\u3002 FineArtz's solution Star /* \u706b\u8f66\u8c03\u5ea6 */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n, m; cin >> n >> m; int stack[1005], size = 0; int a[1005]; bool flag = true; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int i = 0, j = 1; while (i < n){ if (a[j] > i){ stack[++size] = i; if (size > m){ flag = false; break; } ++i; } else if (a[j] == i){ ++i; ++j; } else{ if (size == 0 || stack[size] != a[j]){ flag = false; break; } --size; ++j; } } if (flag){ cout << \"YES\" << endl; } else{ cout << \"NO\" << endl; } } } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int t,st[2000],top,n,m,p,x,s; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ scanf(\"%d%d\",&n,&m); s=0; flag=true; top=-1; for (int j=0;j<n;++j) { scanf(\"%d\",&x); while (s<n&&s!=x&&((top>=0&&st[top]!=x)||top==-1)) { if (top>=m-1) flag=false; st[++top]=s++; } if (s==x) s++; if (top>=0&&st[top]==x) top--; } if (top==-1&&s==n&&flag) printf(\"YES\\n\"); else printf(\"NO\\n\"); } return 0; }","title":"1049"},{"location":"nr/1049/#1049","text":"\u9898\u76ee","title":"1049 \u706b\u8f66\u8c03\u5ea6"},{"location":"nr/1049/#fineartzs-solution-star","text":"/* \u706b\u8f66\u8c03\u5ea6 */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n, m; cin >> n >> m; int stack[1005], size = 0; int a[1005]; bool flag = true; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int i = 0, j = 1; while (i < n){ if (a[j] > i){ stack[++size] = i; if (size > m){ flag = false; break; } ++i; } else if (a[j] == i){ ++i; ++j; } else{ if (size == 0 || stack[size] != a[j]){ flag = false; break; } --size; ++j; } } if (flag){ cout << \"YES\" << endl; } else{ cout << \"NO\" << endl; } } }","title":"FineArtz's solution Star"},{"location":"nr/1049/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int t,st[2000],top,n,m,p,x,s; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ scanf(\"%d%d\",&n,&m); s=0; flag=true; top=-1; for (int j=0;j<n;++j) { scanf(\"%d\",&x); while (s<n&&s!=x&&((top>=0&&st[top]!=x)||top==-1)) { if (top>=m-1) flag=false; st[++top]=s++; } if (s==x) s++; if (top>=0&&st[top]==x) top--; } if (top==-1&&s==n&&flag) printf(\"YES\\n\"); else printf(\"NO\\n\"); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1050/","text":"1050 \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 \u9898\u76ee Description \u4e8c\u54e5\u628a\u6240\u6709\u5973\u670b\u53cb\u5019\u9009\u4eba\u5217\u4e86\u51fa\u6765\uff0c\u4e00\u5171\u6709N\u7ec4\uff0c\u7f16\u53f7\u4e3a0\uff5eN-1\u3002\u6700\u5f00\u59cb\u7684\u65f6\u5019\u6bcf\u7ec4\u53ea\u67091\u4e2a\u5973\u751f\uff0c\u6bcf\u4e2a\u5973\u751f\u6709\u4e00\u4e2a\u9b45\u529b\u503c\u3002\u4e8c\u54e5\u4e0d\u65ad\u8fdb\u884c\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \u5c06\u4e00\u7ec4\u5e76\u5165\u53e6\u4e00\u7ec4 \u5c06\u4e00\u7ec4\u4e2d\u9b45\u529b\u503c\u6700\u5c0f\u7684\u62ff\u8d70 \u7ed9\u67d0\u4e00\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5973\u751f \u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679cX\u7ec4\u5728\u64cd\u4f5c0\u4e2d\u88ab\u5e76\u5165\u5176\u4ed6\u7ec4\uff0c\u90a3\u4e48\u4e8c\u54e5\u5c06\u4e0d\u4f1a\u518d\u5bf9X\u7ec4\u8fdb\u884c\u8fd9\u4e09\u79cd\u64cd\u4f5c\u3002 Input Format \u7b2c\u4e00\u884c\uff1aN M(\\(0 \\leq N,M \\leq 300,000 \\) ) \u5206\u522b\u8868\u793a\u6700\u5f00\u59cb\u7684\u7ec4\u6570\u4e0e\u603b\u7684\u64cd\u4f5c\u7684\u6b21\u6570 \u63a5\u4e0b\u6765N\u884c \u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u521d0\uff5eN-1\u7ec4\u4e2d\u90a3\u4e2a\u5973\u751f\u7684\u9b45\u529b\u503c \u63a5\u4e0b\u6765M\u884c \u6bcf\u884c\u9996\u5148\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u64cd\u4f5c\u7f16\u53f7\uff0c0\u8868\u793a\u5408\u5e76\uff0c1\u8868\u793a\u62ff\u8d70\u9b45\u529b\u503c\u6700\u5c0f\u7684\uff0c2\u8868\u793a\u6dfb\u52a0 \u5bf9\u4e8e\u64cd\u4f5c0\uff0c\u8ddf\u7740\u4e24\u4e2a\u6574\u6570\uff0ca b\uff0c\u8868\u793a\u5c06\u7f16\u53f7\u4e3ab\u7684\u7ec4\u5e76\u5165\u7f16\u53f7\u4e3aa\u7684\u7ec4\uff08\u7f16\u53f7\u4e3ab\u7684\u7ec4\u4ece\u6b64\u6d88\u5931\u4e86\uff09 \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u8ddf\u7740\u4e00\u4e2a\u6574\u6570\uff0ca\uff0c\u8868\u793a\u8bb2\u7f16\u53f7\u4e3aa\u7684\u7ec4\u4e2d\u9b45\u529b\u503c\u6700\u5c0f\u7684\u5973\u751f\u62ff\u8d70 \u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u8ddf\u7740\u4e24\u4e2a\u6574\u6570\uff0ca b,\u8868\u793a\u5728\u7f16\u53f7\u4e3aa\u7684\u7ec4\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u9b45\u529b\u503c\u4e3ab\u7684\u5973\u751f Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c1\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u88ab\u62ff\u8d70\u7684\u5973\u751f\u7684\u9b45\u529b\u503c\uff08\u5982\u679c\u4e8c\u54e5\u5984\u56fe\u4ece\u4e00\u7ec4\u5df2\u7ecf\u6ca1\u6709\u4eba\u7684\u7ec4\u5185\u62ff\u8d70\u5973\u751f\uff0c\u8bf7\u8f93\u51fa-1\uff09 Hint \u5927\u6982\u7528\u67d0\u79cd\u53ef\u5408\u5e76\u4f18\u5148\u961f\u5217\u3002\u3002\u3002 Sample Input 5 9 0 36 49 98 3 1 4 0 2 4 1 1 0 0 3 1 0 0 1 2 0 0 1 2 0 15 1 0 Sample Output 3 36 0 15 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 */ #include <iostream> using namespace std; class Node{ public: int data = 0, dist = -1; Node *l = nullptr, *r = nullptr; }; Node* a[300005]; bool b[300005]; int n, m; template<class T> inline void swp(T &x, T &y){ T t = x; x = y; y = t; } Node *merge(Node *x, Node *y){ if (x == nullptr) return y; if (y == nullptr) return x; if (x->data > y->data) swp(x, y); x->r = merge(x->r, y); if (x->l == nullptr || x->l->dist < x->r->dist) swp(x->l, x->r); if (x->r == nullptr) x->dist = 0; else x->dist = x->r->dist + 1; return x; } void dispose(Node *x){ if (x == nullptr) return; if (x->l != nullptr) dispose(x->l); if (x->r != nullptr) dispose(x->r); delete x; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; t->dist = 0; a[i] = t; b[i] = true; } while (m--){ int imp, x, y; cin >> imp; switch (imp){ case 0: cin >> x >> y; ++x; ++y; a[x] = merge(a[x], a[y]); b[y] = false; break; case 1: cin >> x; ++x; if (!b[x] || a[x] == nullptr) cout << \"-1\" << '\\n'; else{ cout << a[x]->data << '\\n'; Node *t = a[x]; a[x] = merge(a[x]->l, a[x]->r); delete t; } break; case 2:{ cin >> x >> y; ++x; Node *t = new Node; t->data = y; t->dist = 0; a[x] = merge(a[x], t); break; } default: break; } } for (int i = 1; i <= n; ++i){ if (b[i]) dispose(a[i]); } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; const int mxn=1000000; int n,m; int f[mxn],v[mxn],ch[mxn][2],dis[mxn],root[mxn],opt,x,y; int merge(int x,int y){ if (x==0||y==0) return x+y; if (v[x]>v[y]||(v[x]==v[y]&&x>y)) swap(x,y); ch[x][1]=merge(ch[x][1],y); f[ch[x][1]]=x; if (dis[ch[x][0]]<dis[ch[x][1]]) swap(ch[x][1],ch[x][0]); dis[x]=dis[ch[x][1]]+1; return x; } int main(){ scanf(\"%d%d\",&n,&m); for(int i=1;i<=n;i++) { scanf(\"%d\",&v[i]); root[i]=i; } v[0]=-1; for(int i=0;i<m;i++){ scanf(\"%d\",&opt); if (opt==0){ scanf(\"%d%d\",&x,&y); root[x+1]=merge(root[x+1],root[y+1]); if (!root[y+1]) root[y+1]=-1; } if (opt==1){ scanf(\"%d\",&x); printf(\"%d\\n\",v[root[x+1]]); if (v[root[x+1]]!=-1) { v[root[x + 1]] = -1; if (ch[root[x + 1]][0]||ch[root[x+1]][1]) root[x + 1] = merge(ch[root[x + 1]][0], ch[root[x + 1]][1]); else root[x+1]=0; } } if (opt==2){ scanf(\"%d%d\",&x,&y); n++; root[n]=n; v[n]=y; root[x+1]=merge(root[x+1],root[n]); } } }","title":"1050"},{"location":"nr/1050/#1050","text":"\u9898\u76ee","title":"1050 \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217"},{"location":"nr/1050/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 */ #include <iostream> using namespace std; class Node{ public: int data = 0, dist = -1; Node *l = nullptr, *r = nullptr; }; Node* a[300005]; bool b[300005]; int n, m; template<class T> inline void swp(T &x, T &y){ T t = x; x = y; y = t; } Node *merge(Node *x, Node *y){ if (x == nullptr) return y; if (y == nullptr) return x; if (x->data > y->data) swp(x, y); x->r = merge(x->r, y); if (x->l == nullptr || x->l->dist < x->r->dist) swp(x->l, x->r); if (x->r == nullptr) x->dist = 0; else x->dist = x->r->dist + 1; return x; } void dispose(Node *x){ if (x == nullptr) return; if (x->l != nullptr) dispose(x->l); if (x->r != nullptr) dispose(x->r); delete x; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; t->dist = 0; a[i] = t; b[i] = true; } while (m--){ int imp, x, y; cin >> imp; switch (imp){ case 0: cin >> x >> y; ++x; ++y; a[x] = merge(a[x], a[y]); b[y] = false; break; case 1: cin >> x; ++x; if (!b[x] || a[x] == nullptr) cout << \"-1\" << '\\n'; else{ cout << a[x]->data << '\\n'; Node *t = a[x]; a[x] = merge(a[x]->l, a[x]->r); delete t; } break; case 2:{ cin >> x >> y; ++x; Node *t = new Node; t->data = y; t->dist = 0; a[x] = merge(a[x], t); break; } default: break; } } for (int i = 1; i <= n; ++i){ if (b[i]) dispose(a[i]); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1050/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; const int mxn=1000000; int n,m; int f[mxn],v[mxn],ch[mxn][2],dis[mxn],root[mxn],opt,x,y; int merge(int x,int y){ if (x==0||y==0) return x+y; if (v[x]>v[y]||(v[x]==v[y]&&x>y)) swap(x,y); ch[x][1]=merge(ch[x][1],y); f[ch[x][1]]=x; if (dis[ch[x][0]]<dis[ch[x][1]]) swap(ch[x][1],ch[x][0]); dis[x]=dis[ch[x][1]]+1; return x; } int main(){ scanf(\"%d%d\",&n,&m); for(int i=1;i<=n;i++) { scanf(\"%d\",&v[i]); root[i]=i; } v[0]=-1; for(int i=0;i<m;i++){ scanf(\"%d\",&opt); if (opt==0){ scanf(\"%d%d\",&x,&y); root[x+1]=merge(root[x+1],root[y+1]); if (!root[y+1]) root[y+1]=-1; } if (opt==1){ scanf(\"%d\",&x); printf(\"%d\\n\",v[root[x+1]]); if (v[root[x+1]]!=-1) { v[root[x + 1]] = -1; if (ch[root[x + 1]][0]||ch[root[x+1]][1]) root[x + 1] = merge(ch[root[x + 1]][0], ch[root[x + 1]][1]); else root[x+1]=0; } } if (opt==2){ scanf(\"%d%d\",&x,&y); n++; root[n]=n; v[n]=y; root[x+1]=merge(root[x+1],root[n]); } } }","title":"WashSwang's solution Star"},{"location":"nr/1051/","text":"1051 \u9759\u6001\u67e5\u627e\u8868 \u9898\u76ee Description \u5982\u679c\u4e00\u4e2a\u7528\u5355\u94fe\u8868\u5b58\u50a8\u7684\u65e0\u5e8f\u8868\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u67e5\u627e\u6982\u7387\u4e0d\u7b49\uff0c\u5219\u53ef\u4ee5\u7528\u5982\u4e0b\u7b56\u7565\u63d0\u9ad8\u67e5\u627e\u6548\u7387\uff1a\u82e5\u627e\u5230\u4e86\u6307\u5b9a\u8282\u70b9\uff0c\u5219\u8ba9\u5b83\u79fb\u5230\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u7ecf\u5e38\u88ab\u67e5\u627e\u7684\u8282\u70b9\u5c3d\u91cf\u9760\u8fd1\u8868\u5934\u3002 \u8bf7\u7528\u7a0b\u5e8f\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u6700\u540e\u8f93\u51fa\u6309\u6b64\u7b56\u7565\u67e5\u627e\u6307\u5b9a\u6570\u636e\u4e00\u5171\u505a\u4e86\u591a\u5c11\u6b21\u6bd4\u8f83\u3002 Input Format \u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570n \uff0c\u8868\u793a\u9759\u6001\u67e5\u627e\u8868\u4e2d\u4e00\u5171n\u4e2a\u5143\u7d20\u3002 \u4e4b\u540e\u7684n\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u7ed9\u51fa\u4e86\u9759\u6001\u67e5\u627e\u8868\u4e2d\u7684\u5143\u7d20,\u5176\u4e2d\u53ef\u80fd\u6709\u91cd\u590d\u5143\u7d20\u3002 \u4e4b\u540e\u7684\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570m\uff0c\u8868\u793a\u5373\u5c06\u67e5\u627e\u5143\u7d20\u3002 \u4e4b\u540e\u7684m\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u67e5\u627e\u7684\u5143\u7d20\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u5171\u8fdb\u884c\u4e86\u591a\u5c11\u6b21\u6bd4\u8f83\u3002 Hint \u9898\u76ee\u4e2d\u7684\\(n,m \\leq 10000\\) \u5143\u7d20\u5747\u5c0f\u4e8e10^9 Hint\uff1a\u4f60\u7684\u7a0b\u5e8f\u53ea\u80fd\u5224\u65ad\u4e24\u4e2a\u6574\u6570\u662f\u76f8\u7b49\u6216\u662f\u4e0d\u76f8\u7b49\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8ba4\u4e3a\u9759\u6001\u67e5\u627e\u8868\u4e2d\u7684\u5143\u7d20\u662f\u65e0\u5e8f\u7684\uff01 Sample Input 3 1 3 4 3 2 1 4 Sample Output 7 FineArtz's solution Star /* \u9759\u6001\u67e5\u627e\u8868 */ #include <iostream> using namespace std; class Node{ public: Node *pred = nullptr, *succ = nullptr; int data = 0; }; int main(){ Node *head = new Node, *p = head; int n, m, cnt = 0; cin >> n; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; p->succ = t; t->pred = p; p = t; } cin >> m; while (m--){ int x; cin >> x; p = head->succ; while (p){ ++cnt; if (p->data == x) break; p = p->succ; } if (p){ p->pred->succ = p->succ; if (p->succ) p->succ->pred = p->pred; p->pred = head; p->succ = head->succ; if (p->succ) p->succ->pred = p; head->succ = p; } } p = head; Node *q = head; while (p){ q = p->succ; delete p; p = q; } cout << cnt << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int ans,n,x,m,nex[20000],v[20000],last; int main() { cin>>n; for (int i=1;i<=n;++i) { cin>>v[i]; nex[i-1]=i; } cin>>m; for (int i=0;i<m;++i) { cin>>x; last=0; for (int j=nex[0];j;j=nex[j]){ ans++; if (v[j]==x){ nex[last]=nex[j]; nex[j]=nex[0]; nex[0]=j; break; } last=j; } } cout<<ans; return 0; }","title":"1051"},{"location":"nr/1051/#1051","text":"\u9898\u76ee","title":"1051 \u9759\u6001\u67e5\u627e\u8868"},{"location":"nr/1051/#fineartzs-solution-star","text":"/* \u9759\u6001\u67e5\u627e\u8868 */ #include <iostream> using namespace std; class Node{ public: Node *pred = nullptr, *succ = nullptr; int data = 0; }; int main(){ Node *head = new Node, *p = head; int n, m, cnt = 0; cin >> n; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; p->succ = t; t->pred = p; p = t; } cin >> m; while (m--){ int x; cin >> x; p = head->succ; while (p){ ++cnt; if (p->data == x) break; p = p->succ; } if (p){ p->pred->succ = p->succ; if (p->succ) p->succ->pred = p->pred; p->pred = head; p->succ = head->succ; if (p->succ) p->succ->pred = p; head->succ = p; } } p = head; Node *q = head; while (p){ q = p->succ; delete p; p = q; } cout << cnt << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1051/#washswangs-solution-star","text":"#include <iostream> using namespace std; int ans,n,x,m,nex[20000],v[20000],last; int main() { cin>>n; for (int i=1;i<=n;++i) { cin>>v[i]; nex[i-1]=i; } cin>>m; for (int i=0;i<m;++i) { cin>>x; last=0; for (int j=nex[0];j;j=nex[j]){ ans++; if (v[j]==x){ nex[last]=nex[j]; nex[j]=nex[0]; nex[0]=j; break; } last=j; } } cout<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1052/","text":"1052 \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba \u9898\u76ee Description \u6c88\u8001\u5e08\u7ed9\u4e8c\u54e5\u4e0a\u4e86\u4e00\u8282\u751f\u52a8\u7684\u96c6\u5408\u8bba\u8bfe\uff0c\u8bfe\u540e\u8001\u5e08\u5e03\u7f6e\u4e86\u4e00\u9053\u4f5c\u4e1a\u9898\uff1a \u5b9e\u73b0\u4e00\u4e2a\u7b97\u6cd5\u6765\u7ef4\u62a4\u4e00\u4e9b\u96c6\u5408\uff0c\u652f\u6301\u4ee5\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a \\( + \\) A B \uff08\u5c06\u96c6\u5408B\u5e76\u5165\u96c6\u5408A\uff09 \\( - \\) A B \uff08\u5c06A\u4e2d\u7684\u540c\u65f6\u51fa\u73b0\u5728A\u548cB\u4e2d\u7684\u5143\u7d20\u53bb\u6389\uff09 \\( * \\) A B \uff08\u5c06A\u53d8\u4e3aA\u4ea4B\uff09 \u8fd9\u9898\u5f88\u5751\u7239\uff0c\u8bf7\u770b\u6e05\u8f93\u51fa\u8981\u6c42\uff01\uff0c\u8f93\u5165\u7684\u96c6\u5408\u4e2d\u53ef\u80fd\u5305\u542b\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8981\u6ce8\u610f\u5904\u7406\uff01 Input Format \u8bfb\u5165\u4e00\u4e2a\u6570\u5b57N\uff0c\u4ee3\u8868\u4f60\u9700\u8981\u7ef4\u62a4\u96c6\u5408\u7684\u6570\u76ee\\( N \\leq 100 \\) \u63a5\u4e0b\u6765N\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u6bcf\u4e2a\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\\( \\leq 200 \\) \u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e86\u7b2ci\u4e2a\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u6bcf\u4e2a\u6570\u5b57\\( 0 \\leq x \\leq 200 \\)\uff0c\u4f1a\u91cd\u590d\uff01\u3002 \u4e00\u4e2a\u6570\\( M \\leq 1000 \\)\uff0c\u8868\u793a\u64cd\u4f5c\u7684\u6570\u76ee \u4e0b\u9762M\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u64cd\u4f5c\uff0c\u8be6\u89c1\u6837\u4f8b\u3002 Output Format n\u884c\uff0c\u8f93\u51fa\u6700\u540e\u6bcf\u4e2a\u96c6\u5408\u7684\u5143\u7d20\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff01\u5982\u679c\u8fd9\u4e2a\u96c6\u5408\u4e0d\u662f\u7a7a\u96c6\uff0c\u884c\u7684\u6700\u540e\u4f1a\u6709\u4e00\u4e2a\u7a7a\u683c\uff01\u5982\u679c\u662f\u7a7a\u96c6\uff0c\u76f4\u63a5\u8f93\u51fa\u4e00\u4e2a\u7a7a\u884c\uff01 \u8bf4\u660e \u64cd\u4f5c\u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u4e2a\u6570\u4e0d\u8d85\u8fc7200\u4e2a Sample Input 4 1 1 1 1 1 2 3 4 3 + 1 2 - 1 2 * 3 4 Sample Output 1 2 4 FineArtz's solution Star /* \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba */ #include <iostream> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); bool a[105][205]; int N, M, n[105], t; cin >> N; for (int i = 1; i <= N; ++i) cin >> n[i]; for (int i = 1; i <= N; ++i){ for (int j = 1; j <= n[i]; ++j){ cin >> t; a[i][t] = true; } } cin >> M; char ch; int x, y; while (M--){ cin >> ch >> x >> y; switch(ch){ case '+': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = true; } break; case '-': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = false; } break; case '*': for (int i = 0; i <= 200; ++i){ if (!a[y][i]) a[x][i] = false; } break; } } for (int i = 1; i <= N; ++i){ for (int j = 0; j <= 200; ++j) if (a[i][j]) cout << j << ' '; cout << '\\n'; } return 0; }","title":"1052"},{"location":"nr/1052/#1052","text":"\u9898\u76ee","title":"1052 \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba"},{"location":"nr/1052/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba */ #include <iostream> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); bool a[105][205]; int N, M, n[105], t; cin >> N; for (int i = 1; i <= N; ++i) cin >> n[i]; for (int i = 1; i <= N; ++i){ for (int j = 1; j <= n[i]; ++j){ cin >> t; a[i][t] = true; } } cin >> M; char ch; int x, y; while (M--){ cin >> ch >> x >> y; switch(ch){ case '+': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = true; } break; case '-': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = false; } break; case '*': for (int i = 0; i <= 200; ++i){ if (!a[y][i]) a[x][i] = false; } break; } } for (int i = 1; i <= N; ++i){ for (int j = 0; j <= 200; ++j) if (a[i][j]) cout << j << ' '; cout << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1053/","text":"1053 \u4e8c\u54e5\u7684\u5185\u5b58 \u9898\u76ee Description \u4e8c\u54e5\u4e70\u4e86\u4e00\u53f0\u5185\u5b58\u975e\u5e38\u975e\u5e38\u5927\u7684\u7535\u8111\uff0c\u4ee5\u81f3\u4e8e\u4e8c\u54e5\u5199\u7a0b\u5e8f\u76f4\u63a5\u5f00\u4e86\u4e00\u4e2a 100,000 * 100,000 \u7684\u6570\u7ec4\u90fd\u8dd1\u5f97\u5f88\u987a\u7545\u3002\u8fd9\u4e2a\u6570\u7ec4\u521d\u59cb\u88ab\u6e05\u96f6\uff0c\u4e8c\u54e5\u5728\u5176\u4e2d\u7684 n \u4e2a\u4f4d\u7f6e\u8d4b\u4e86\u503c\uff0c\u7136\u540e\u4ed6\u505a\u4e86 m \u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4ee5\u4e0b\u4e09\u4e2a\u6307\u4ee4\u4e4b\u4e00\uff1a 0 x y \uff1a\u4ea4\u6362\u6570\u7ec4\u7684 x \u884c\u4e0e y \u884c 1 x y \uff1a\u4ea4\u6362\u6570\u7ec4\u7684 x \u5217\u4e0e y \u5217 2 x y \uff1a\u8bfb\u53d6\u6570\u7ec4\u5f53\u671f x \u884c y \u5217\u7684\u6570 \u73b0\u5728\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8bfb\u53d6\uff0c\u8f93\u51fa\u5185\u5b58\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u3002 Input Format \u7b2c 1 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 n \u8868\u793a\u521d\u59cb\u5316\u4e86 n \u4e2a\u4f4d\u7f6e\u3002 \u7b2c 2..n+1 \u884c\uff1a\u6bcf\u884c\u4e09\u4e2a\u6574\u6570\uff1a x y z \u8868\u793a\u6570\u7ec4\u4e2d x \u884c y \u5217\u7684\u503c\u88ab\u8d4b\u503c\u4e3a z\u3002 \u7b2c n+2 \u884c\uff1a\u4e00\u4e2a\u6574\u6570 m \u8868\u793a\u64cd\u4f5c\u7684\u6570\u91cf \u7b2c n+3..n+m+2 \u884c\uff1a\u6bcf\u884c\u4e00\u6761\u6307\u4ee4 op x y\uff0c\u5176\u4e2d op \u4e3a 0 \u8868\u793a\u4ea4\u6362\u884c\uff0cop \u4e3a 1 \u8868\u793a\u4ea4\u6362\u5217\uff0cop \u4e3a 2 \u8868\u793a\u8bfb\u53d6\u64cd\u4f5c\u3002 \u6570\u7ec4\u4e2d\u4e00\u4e2a\u4f4d\u7f6e\u4e0d\u4f1a\u88ab\u8d4b\u503c\u4e24\u6b21\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u8bfb\u53d6\u6307\u4ee4\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u5185\u5b58\u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u7684\u6570\u3002 Hint \u5bf9 70% \u7684\u6570\u636e\uff0c\u6570\u7ec4\u884c\u5217\u7684\u4e0b\u6807\u8303\u56f4\u4e3a 0..199,\\(0 \\leq n \\leq 1000\\), \\(0 \\leq m \\leq 2000\\). \u5bf9 100% \u7684\u6570\u636e\uff0c\u6570\u7ec4\u884c\u5217\u7684\u4e0b\u6807\u8303\u56f4\u4e3a 0..99999, \\(0 \\leq n \\leq 10000\\), \\(0 \\leq m \\leq 20000\\). Sample Input 3 0 1 1 1 0 2 2 2 3 9 0 0 1 2 0 0 2 1 1 2 2 2 1 0 1 0 0 1 2 0 0 2 1 1 2 2 2 Sample Output 2 1 3 1 2 3 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5185\u5b58 */ #include <iostream> #include <algorithm> using namespace std; class Point{ public: Point(int xx = -1, int yy = -1, int d = 0) : x(xx), y(yy), data(d) {} bool operator <(const Point &p){ return (x < p.x || (x == p.x && y < p.y)); } int x = -1, y = -1, data = 0; }; Point a[10005]; int mapx[100005], mapy[100005]; int n, m; void qsort(int low, int high){ int l = low, h = high; Point key = a[low]; while (l < h){ while (l < h && key < a[h]) --h; a[l] = a[h]; while (l < h && a[l] < key) ++l; a[h] = a[l]; } a[l] = key; if (low < l) qsort(low, l - 1); if (high > h) qsort(h + 1, high); } int find(int x, int y){ Point t(x, y); auto it = lower_bound(a + 1, a + n + 1, t); if (it != a + n + 1 && it->x == x && it->y == y) return it->data; else return 0; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 0; i < 100005; ++i){ mapx[i] = i; mapy[i] = i; } for (int i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y >> a[i].data; qsort(1, n); cin >> m; while (m--){ int op, x, y, t; cin >> op >> x >> y; switch(op){ case 0: t = mapx[x]; mapx[x] = mapx[y]; mapx[y] = t; break; case 1: t = mapy[x]; mapy[x] = mapy[y]; mapy[y] = t; break; case 2: cout << find(mapx[x], mapy[y]) << '\\n'; break; } } return 0; }","title":"1053"},{"location":"nr/1053/#1053","text":"\u9898\u76ee","title":"1053 \u4e8c\u54e5\u7684\u5185\u5b58"},{"location":"nr/1053/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5185\u5b58 */ #include <iostream> #include <algorithm> using namespace std; class Point{ public: Point(int xx = -1, int yy = -1, int d = 0) : x(xx), y(yy), data(d) {} bool operator <(const Point &p){ return (x < p.x || (x == p.x && y < p.y)); } int x = -1, y = -1, data = 0; }; Point a[10005]; int mapx[100005], mapy[100005]; int n, m; void qsort(int low, int high){ int l = low, h = high; Point key = a[low]; while (l < h){ while (l < h && key < a[h]) --h; a[l] = a[h]; while (l < h && a[l] < key) ++l; a[h] = a[l]; } a[l] = key; if (low < l) qsort(low, l - 1); if (high > h) qsort(h + 1, high); } int find(int x, int y){ Point t(x, y); auto it = lower_bound(a + 1, a + n + 1, t); if (it != a + n + 1 && it->x == x && it->y == y) return it->data; else return 0; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 0; i < 100005; ++i){ mapx[i] = i; mapy[i] = i; } for (int i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y >> a[i].data; qsort(1, n); cin >> m; while (m--){ int op, x, y, t; cin >> op >> x >> y; switch(op){ case 0: t = mapx[x]; mapx[x] = mapx[y]; mapx[y] = t; break; case 1: t = mapy[x]; mapy[x] = mapy[y]; mapy[y] = t; break; case 2: cout << find(mapx[x], mapy[y]) << '\\n'; break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1054/","text":"1054 \u90c1\u95f7\u7684\u4e8c\u54e5 \u9898\u76ee Description ACMER\u516c\u53f8\u662f\u4e00\u5bb6\u5927\u578b\u4e13\u4e1a\u5316\u8f6f\u4ef6\u516c\u53f8\uff0c\u6709\u7740\u6570\u4ee5\u4e07\u8ba1\u7684\u5458\u5de5\u3002\u4f5c\u4e3a\u4e00\u540d\u51fa\u7eb3\u5458\uff0c\u4e8c\u54e5\u7684\u4efb\u52a1\u4e4b\u4e00\u4fbf\u662f\u7edf\u8ba1\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u3002\u8fd9\u672c\u6765\u662f\u4e00\u4efd\u4e0d\u9519\u7684\u5de5\u4f5c\uff0c\u4f46\u662f\u4ee4\u4eba\u90c1\u95f7\u7684\u662f\uff0c\u4e8c\u54e5\u7684\u8001\u677f\u53cd\u590d\u65e0\u5e38\uff0c\u7ecf\u5e38\u8c03\u6574\u5458\u5de5\u7684\u5de5\u8d44\u3002\u5982\u679c\u4ed6\u5fc3\u60c5\u597d\uff0c\u5c31\u53ef\u80fd\u628a\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u52a0\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u91cf\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u5fc3\u60c5\u4e0d\u597d\uff0c\u5c31\u53ef\u80fd\u628a\u4ed6\u4eec\u7684\u5de5\u8d44\u6263\u9664\u4e00\u4e2a\u76f8\u540c\u7684\u91cf\u3002\u4e8c\u54e5\u771f\u4e0d\u77e5\u9053\u9664\u4e86\u8c03\u5de5\u8d44\u4ed6\u8fd8\u505a\u4ec0\u4e48\u5176\u5b83\u4e8b\u60c5\u3002 \u5de5\u8d44\u7684\u9891\u7e41\u8c03\u6574\u5f88\u8ba9\u5458\u5de5\u53cd\u611f\uff0c\u5c24\u5176\u662f\u96c6\u4f53\u6263\u9664\u5de5\u8d44\u7684\u65f6\u5019\uff0c\u4e00\u65e6\u67d0\u4f4d\u5458\u5de5\u53d1\u73b0\u81ea\u5df1\u7684\u5de5\u8d44\u5df2\u7ecf\u4f4e\u4e8e\u4e86\u5408\u540c\u89c4\u5b9a\u7684\u5de5\u8d44\u4e0b\u754c\uff0c\u4ed6\u5c31\u4f1a\u7acb\u523b\u6c14\u6124\u5730\u79bb\u5f00\u516c\u53f8\uff0c\u5e76\u4e14\u518d\u4e5f\u4e0d\u4f1a\u56de\u6765\u4e86\u3002\u6bcf\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u4e0b\u754c\u90fd\u662f\u7edf\u4e00\u89c4\u5b9a\u7684\u3002\u6bcf\u5f53\u4e00\u4e2a\u4eba\u79bb\u5f00\u516c\u53f8\uff0c\u4e8c\u54e5\u5c31\u8981\u4ece\u7535\u8111\u4e2d\u628a\u4ed6\u7684\u5de5\u8d44\u6863\u6848\u5220\u53bb\uff0c\u540c\u6837\uff0c\u6bcf\u5f53\u516c\u53f8\u62db\u8058\u4e86\u4e00\u4f4d\u65b0\u5458\u5de5\uff0c\u4e8c\u54e5\u5c31\u5f97\u4e3a\u4ed6\u65b0\u5efa\u4e00\u4e2a\u5de5\u8d44\u6863\u6848\u3002 \u8001\u677f\u7ecf\u5e38\u5230\u4e8c\u54e5\u8fd9\u8fb9\u6765\u8be2\u95ee\u5de5\u8d44\u60c5\u51b5\uff0c\u4ed6\u5e76\u4e0d\u95ee\u5177\u4f53\u67d0\u4f4d\u5458\u5de5\u7684\u5de5\u8d44\u60c5\u51b5\uff0c\u800c\u662f\u95ee\u73b0\u5728\u5de5\u8d44\u7b2ck\u591a\u7684\u5458\u5de5\u62ff\u591a\u5c11\u5de5\u8d44\u3002\u6bcf\u5f53\u8fd9\u65f6\uff0c\u4e8c\u54e5\u5c31\u4e0d\u5f97\u4e0d\u5bf9\u6570\u4e07\u4e2a\u5458\u5de5\u8fdb\u884c\u4e00\u6b21\u6f2b\u957f\u7684\u6392\u5e8f\uff0c\u7136\u540e\u544a\u8bc9\u4ed6\u7b54\u6848\u3002 \u597d\u4e86\uff0c\u73b0\u5728\u4f60\u5df2\u7ecf\u5bf9\u4e8c\u54e5\u7684\u5de5\u4f5c\u4e86\u89e3\u4e0d\u5c11\u4e86\u3002\u6b63\u5982\u4f60\u731c\u7684\u90a3\u6837\uff0c\u4e8c\u54e5\u60f3\u8bf7\u4f60\u7f16\u4e00\u4e2a\u5de5\u8d44\u7edf\u8ba1\u7a0b\u5e8f\u3002\u600e\u4e48\u6837\uff0c\u4e0d\u662f\u5f88\u56f0\u96be\u5427\uff1f Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u975e\u8d1f\u6574\u6570n\u548cmin\u3002n\u8868\u793a\u4e0b\u9762\u6709\u591a\u5c11\u6761\u547d\u4ee4\uff0cmin\u8868\u793a\u5de5\u8d44\u4e0b\u754c\u3002 \u63a5\u4e0b\u6765\u7684n\u884c\uff0c\u6bcf\u884c\u8868\u793a\u4e00\u6761\u547d\u4ee4\u3002\u547d\u4ee4\u53ef\u4ee5\u662f\u4ee5\u4e0b\u56db\u79cd\u4e4b\u4e00\uff1a (Here put the table) _\uff08\u4e0b\u5212\u7ebf\uff09\u8868\u793a\u4e00\u4e2a\u7a7a\u683c\uff0cI\u547d\u4ee4\u3001A\u547d\u4ee4\u3001S\u547d\u4ee4\u4e2d\u7684k\u662f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0cF\u547d\u4ee4\u4e2d\u7684k\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u5728\u521d\u59cb\u65f6\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u516c\u53f8\u91cc\u4e00\u4e2a\u5458\u5de5\u4e5f\u6ca1\u6709\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u7684\u884c\u6570\u4e3aF\u547d\u4ee4\u7684\u6761\u6570\u52a0\u4e00\u3002 \u5bf9\u4e8e\u6bcf\u6761F\u547d\u4ee4\uff0c\u4f60\u7684\u7a0b\u5e8f\u8981\u8f93\u51fa\u4e00\u884c\uff0c\u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u5f53\u524d\u5de5\u8d44\u7b2ck\u591a\u7684\u5458\u5de5\u6240\u62ff\u7684\u5de5\u8d44\u6570\uff0c\u5982\u679ck\u5927\u4e8e\u76ee\u524d\u5458\u5de5\u7684\u6570\u76ee\uff0c\u5219\u8f93\u51fa-1\u3002 \u8f93\u51fa\u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u79bb\u5f00\u516c\u53f8\u7684\u5458\u5de5\u7684\u603b\u6570\u3002 \u8bf4\u660e NOI 2004 cashier Sample Input 9 10 I 60 I 70 S 50 F 2 I 30 S 15 A 5 F 1 F 2 Sample Output 10 20 -1 2 FineArtz's solution Star /* \u90c1\u95f7\u7684\u4e8c\u54e5 */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = 1; num = 1; } bool whichChild() { return p->s[1] == this; } Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; int ans = 0; void rotate(Node *p){ Node *q = p->p->p; if (p->whichChild()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->whichChild() == p->p->whichChild()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } void del(int l, int r){ if (!find(l)){ insert(l); --ans; } Node *p = prev(); if (!find(r)){ insert(r); --ans; } Node *q = succ(); if (!p && !q){ ans += root->size; root = nullptr; return; } if (!p){ if (root->s[0]) ans += root->s[0]->size; root->s[0] = nullptr; root->update(); return; } if (!q){ splay(p, 0); if (root->s[1]) ans += root->s[1]->size; root->s[1] = nullptr; root->update(); return; } splay(p, q); if (p->s[1]) ans += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m, delta = 0; cin >> n >> m; while (n--){ char ch; int k; cin >> ch >> k; switch(ch){ case 'I': if (k >= m) insert(k - delta); break; case 'A': delta += k; break; case 'S': delta -= k; del(-1000000, m - delta - 1); break; case 'F': if (!root || root->size < k) cout << \"-1\\n\"; else{ findk(root->size + 1 - k); cout << root->key + delta << '\\n'; } break; } } dispose(root); cout << ans << '\\n'; return 0; }","title":"1054"},{"location":"nr/1054/#1054","text":"\u9898\u76ee","title":"1054 \u90c1\u95f7\u7684\u4e8c\u54e5"},{"location":"nr/1054/#fineartzs-solution-star","text":"/* \u90c1\u95f7\u7684\u4e8c\u54e5 */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = 1; num = 1; } bool whichChild() { return p->s[1] == this; } Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; int ans = 0; void rotate(Node *p){ Node *q = p->p->p; if (p->whichChild()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->whichChild() == p->p->whichChild()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } void del(int l, int r){ if (!find(l)){ insert(l); --ans; } Node *p = prev(); if (!find(r)){ insert(r); --ans; } Node *q = succ(); if (!p && !q){ ans += root->size; root = nullptr; return; } if (!p){ if (root->s[0]) ans += root->s[0]->size; root->s[0] = nullptr; root->update(); return; } if (!q){ splay(p, 0); if (root->s[1]) ans += root->s[1]->size; root->s[1] = nullptr; root->update(); return; } splay(p, q); if (p->s[1]) ans += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m, delta = 0; cin >> n >> m; while (n--){ char ch; int k; cin >> ch >> k; switch(ch){ case 'I': if (k >= m) insert(k - delta); break; case 'A': delta += k; break; case 'S': delta -= k; del(-1000000, m - delta - 1); break; case 'F': if (!root || root->size < k) cout << \"-1\\n\"; else{ findk(root->size + 1 - k); cout << root->key + delta << '\\n'; } break; } } dispose(root); cout << ans << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1055/","text":"1055 \u4e8c\u54e5\u5207\u5de7\u514b\u529b \u9898\u76ee Description \u4e8c\u54e5\u6709\u4e00\u5927\u5757\u77e9\u5f62\u5e73\u677f\u5de7\u514b\u529b\uff0c\u88ab\u5212\u5206\u6210RxC\u4e2a\u5c0f\u65b9\u683c\u3002 \u4eca\u5929\u4ed6\u8981\u4ece\u8fd9\u4e0a\u9762\u5207\u4e0b\u4e00\u4e2aaichimi\u5f62\u7684\u5de7\u514b\u529b\u9001\u7ed9\u5b83\u7684\u5973\u53cb\u3002 \u6240\u8c13aichimi\u5f62\u5c31\u662f\u4e00\u4e2a\u8fb9\u957f\u81f3\u5c11\u4e3a3\u7684\u6b63\u65b9\u5f62\u5207\u6389\u56db\u4e2a\u8fb9\u957f\u4e3a1\u7684\u89d2\u7684\u5f62\u72b6\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u8fb9\u957f\u4e3a4\u7684aichimi\u5f62\uff1a ## #### #### ## \u4e8c\u54e5(\u6b64\u65f6)\u53ea\u6709\u4e00\u4e2a\u5973\u53cb\u6240\u4ee5\u53ea\u8981\u5207\u4e0b\u4e00\u5757\u5c31\u53ef\u4ee5\u4e86\u3002 \u7531\u4e8e\u8fd9\u5de7\u514b\u529b\u662f\u67d0\u8d85\u5e02\u7684\u4fbf\u5b9c\u8d27\uff0c\u6bcf\u4e2a\u65b9\u683c\u7684\u5bc6\u5ea6\u90fd\u4e0d\u540c\uff0c\u53ef\u80fd\u4e3a0.0\u81f30.9g/cm^2\u4e0d\u7b49\u3002 \u4e8c\u54e5\u8981\u6c42\u8fd9\u5757aichimi\u5f62\u5de7\u514b\u529b\u7684\u91cd\u5fc3\u6070\u597d\u5728\u4e2d\u5fc3\u5904\uff0c\u8fd9\u6837\u4ed6\u624d\u80fd\u7ed9\u5973\u53cb\u8868\u6f14\u4e00\u4e2a\u624b\u6307\u8f6c\u5de7\u514b\u529b\u7684\u201c\u7edd\u6d3b\u201d\u3002 \u8bf7\u95ee\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927\u7684aichimi\u5f62\u8fb9\u957f\u662f\u591a\u5c11\u5462\uff1f Input Format \u7b2c\u4e00\u884c\u4e3a\u6570\u636e\u7ec4\u6570T \u6bcf\u7ec4\u6570\u636e\u7b2c\u4e00\u884c\u4e24\u4e2a\u6570R\u548cC\uff0c\u8868\u793a\u5de7\u514b\u529b\u677f\u7684\u5927\u5c0f \u63a5\u4e0b\u6765\u7684R\u884c\u6bcf\u884cC\u4e2a\u6570\u5b57\u5b57\u7b26(0\u52309)\uff0c\u8868\u793a\u8be5\u65b9\u683c\u7684\u5bc6\u5ea6\uff0c\u5355\u4f4d0.1g/cm2 Output Format \u5171T\u884c \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u4e2a\u6574\u6570A\u8868\u793a\u7b26\u5408\u8981\u6c42\u7684\u6700\u5927aichimi\u5f62\u7684\u8fb9\u957f\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8f93\u51faIMPOSSIBLE Hint \\(3 \\leq R \\leq 300, 3 \\leq C \\leq 300\\) \u7b2c\u4e00\u4e2a\u6837\u4f8b\u7684\u7b54\u6848\u5982\u4e0b\u56fe ....... ..222.. .21152. .32913. .24212. ..222.. Sample Input 2 6 7 1111111 1122271 1211521 1329131 1242121 1122211 3 3 123 234 345 Sample Output 5 IMPOSSIBLE FineArtz's solution Star /* \u4e8c\u54e5\u5207\u5de7\u514b\u529b */ #include <iostream> #include <cmath> using namespace std; int main(){ int T; cin >> T; while (T--){ int c, r; char ch; int a[305][305], sum[305][305]; int sumx[305][305], sumy[305][305]; cin >> r >> c; for (int i = 0; i <= r; ++i){ sum[i][0] = 0; sumx[i][0] = 0; sumy[i][0] = 0; } for (int j = 0; j <= c; ++j){ sum[0][j] = 0; sumx[0][j] = 0; sumy[0][j] = 0; } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ cin >> ch; a[i][j] = ch - '0'; sum[i][j] = a[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1]; } } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ sumx[i][j] = sumx[i - 1][j] + i * (sum[i][j] - sum[i - 1][j]); sumy[i][j] = sumy[i][j - 1] + j * (sum[i][j] - sum[i][j - 1]); } } bool flag = false; for (int k = min(r, c); k >= 3; --k){ for (int i = 1; i <= r - k + 1; ++i){ for (int j = 1; j <= c - k + 1; ++j){ int x = i + k - 1, y = j + k - 1; int s = sum[x][y] - sum[i - 1][y] - sum[x][j - 1] + sum[i - 1][j - 1] - a[i][j] - a[i][y] - a[x][j] - a[x][y]; double wx = sumx[x][y] - sumx[i - 1][y] - sumx[x][j - 1] + sumx[i - 1][j - 1] - i * a[i][j] - i * a[i][y] - x * a[x][j] - x * a[x][y]; double wy = sumy[x][y] - sumy[i - 1][y] - sumy[x][j - 1] + sumy[i - 1][j - 1] - j * a[i][j] - y * a[i][y] - j * a[x][j] - y * a[x][y]; if (s == 0){ flag = true; cout << k << '\\n'; break; } wx = wx / s; wy = wy / s; if (abs(2 * wx - i - x) < 1e-8 && abs(2 * wy - j - y) < 1e-8){ flag = true; cout << k << '\\n'; break; } } if (flag) break; } if (flag) break; } if (!flag) cout << \"IMPOSSIBLE\\n\"; } return 0; }","title":"1055"},{"location":"nr/1055/#1055","text":"\u9898\u76ee","title":"1055 \u4e8c\u54e5\u5207\u5de7\u514b\u529b"},{"location":"nr/1055/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5207\u5de7\u514b\u529b */ #include <iostream> #include <cmath> using namespace std; int main(){ int T; cin >> T; while (T--){ int c, r; char ch; int a[305][305], sum[305][305]; int sumx[305][305], sumy[305][305]; cin >> r >> c; for (int i = 0; i <= r; ++i){ sum[i][0] = 0; sumx[i][0] = 0; sumy[i][0] = 0; } for (int j = 0; j <= c; ++j){ sum[0][j] = 0; sumx[0][j] = 0; sumy[0][j] = 0; } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ cin >> ch; a[i][j] = ch - '0'; sum[i][j] = a[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1]; } } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ sumx[i][j] = sumx[i - 1][j] + i * (sum[i][j] - sum[i - 1][j]); sumy[i][j] = sumy[i][j - 1] + j * (sum[i][j] - sum[i][j - 1]); } } bool flag = false; for (int k = min(r, c); k >= 3; --k){ for (int i = 1; i <= r - k + 1; ++i){ for (int j = 1; j <= c - k + 1; ++j){ int x = i + k - 1, y = j + k - 1; int s = sum[x][y] - sum[i - 1][y] - sum[x][j - 1] + sum[i - 1][j - 1] - a[i][j] - a[i][y] - a[x][j] - a[x][y]; double wx = sumx[x][y] - sumx[i - 1][y] - sumx[x][j - 1] + sumx[i - 1][j - 1] - i * a[i][j] - i * a[i][y] - x * a[x][j] - x * a[x][y]; double wy = sumy[x][y] - sumy[i - 1][y] - sumy[x][j - 1] + sumy[i - 1][j - 1] - j * a[i][j] - y * a[i][y] - j * a[x][j] - y * a[x][y]; if (s == 0){ flag = true; cout << k << '\\n'; break; } wx = wx / s; wy = wy / s; if (abs(2 * wx - i - x) < 1e-8 && abs(2 * wy - j - y) < 1e-8){ flag = true; cout << k << '\\n'; break; } } if (flag) break; } if (flag) break; } if (!flag) cout << \"IMPOSSIBLE\\n\"; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1056/","text":"1056 \u4e8c\u54e5\u5403\u7cd6 \u9898\u76ee Description \u4e8c\u54e5\u6709N\u4e2a\u76d2\u5b50\uff0c\u6bcf\u4e2a\u76d2\u5b50\u91cc\u9762\u90fd\u6709\u4e00\u5757\u7cd6\u3002 \u4e8c\u54e5\u65e0\u804a\u7684\u65f6\u5019\u5c31\u505a\u4ee5\u4e0b\u51e0\u79cd\u4e8b\u60c5\uff1a \u628a\u67d0\u4e24\u4e2a\u76d2\u5b50\u91cc\u9762\u7684\u7cd6\u62ff\u51fa\u6765\u653e\u5728\u4e00\u4e2a\u65b0\u7684\u76d2\u5b50\u91cc\u9762 \u5403\u6389\u67d0\u4e00\u4e2a\u76d2\u5b50\u91cc\u9762\u7684\u6240\u6709\u7684\u7cd6 \u6570\u6570\u5f53\u524d\u7cd6\u679c\u6570\u7b2cP\u591a\u7684\u76d2\u5b50\u91cc\u9762\u6709\u51e0\u5757\u7cd6 \u540e\u6765\u4e8c\u54e5\u89c9\u5f97\u603b\u5403\u7cd6\u4e0d\u597d\uff0c\u4f46\u662f\u8fd8\u5fcd\u4e0d\u4f4f\u8981\u505a\u8fd9\u4e9b\u4e8b\uff0c\u6240\u4ee5\u5c31\u53ea\u597d\u5199\u7a0b\u5e8f\u6765\u6a21\u62df\u8fd9\u4e9b\u2026\u2026 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570N(\u521d\u59cb\u7cd6\u679c\u6570)\u548cM(\u64cd\u4f5c\u6570)\uff0c\u7cd6\u679c\u7f16\u53f7\u4e3a1\u5230N \u4e0b\u9762M\u884c\uff0c\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u64cd\u4f5c C x y \u628a\u7cd6\u679cx\u6240\u5728\u76d2\u5b50\u4e0e\u548c\u7cd6\u679cy\u6240\u5728\u76d2\u5b50\u8fdb\u884c\u5408\u5e76\u3002\u5982\u679cx\u6216\u8005y\u5df2\u7ecf\u88ab\u5403\u6389\uff0c\u6216\u8005x\u4e0ey\u672c\u6765\u5c31\u5728\u540c\u4e00\u4e2a\u76d2\u5b50\u91cc\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u505a D x \u5403\u6389\u7cd6\u679cx\u6240\u5728\u7684\u76d2\u5b50\u91cc\u9762\u7684\u7cd6\uff0c\u540c\u6837\uff0c\u5982\u679cx\u5df2\u7ecf\u88ab\u5403\u6389\uff0c\u5219\u4ec0\u4e48\u4e5f\u4e0d\u505a Q p \u8be2\u95ee\u5f53\u524d\u7cd6\u679c\u6570\u7b2cp\u591a\u7684\u76d2\u5b50\u91cc\u9762\u7684\u7cd6\u679c\u6570\u91cf\uff0c\u5982\u679c\u5269\u4e0b\u7684\u6709\u7cd6\u679c\u7684\u76d2\u5b50\u6570\u91cf\u5c0f\u4e8ep\uff0c\u5219\u8f93\u51fa0\u3002\u6240\u6709\u7684p\u90fd\u57281\u523010\u4e4b\u95f4 Output Format \u5bf9\u4e8e\u6bcf\u4e2aQ\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u6570(\u7cd6\u679c\u6570\u91cf)\uff0c\u5360\u4e00\u884c \u8bf4\u660e \\( 1 \\leq M \\leq 50000\uff0c1 \\leq N \\leq 500000 \\) \u5176\u4ed6\u6570\u5b57\u90fd\u57281\u5230N\u4e4b\u95f4 Sample Input 20 10 C 1 2 C 3 4 Q 2 Q 7 C 1 5 C 2 5 Q 1 D 5 Q 2 Q 1 Sample Output 2 1 3 1 2 FineArtz's solution Star /* \u4e8c\u54e5\u5403\u7cd6 */ #include <iostream> using namespace std; class Node{ public: int size = 1, ind = 0; }; bool b[500005]; Node a[500005]; int p[500005], pos[500005]; int n, m, Size = 0; int getParent(int x){ if (p[x] != x) p[x] = getParent(p[x]); return p[x]; } void siftdown(int i){ int x = i, mx = a[i].size; if (i * 2 <= Size){ if (a[i * 2].size > mx){ x = i * 2; mx = a[i * 2].size; } } if (i * 2 + 1 <= Size){ if (a[i * 2 + 1].size > mx){ x = i * 2 + 1; mx = a[i * 2 + 1].size; } } if (x != i){ a[0] = a[x]; a[x] = a[i]; a[i] = a[0]; pos[a[i].ind] = i; pos[a[x].ind] = x; siftdown(x); } } void siftup(int i){ while (i >= 2){ if (a[i].size <= a[i / 2].size) break; a[0] = a[i]; a[i] = a[i / 2]; a[i / 2] = a[0]; pos[a[i].ind] = i; pos[a[i / 2].ind] = i / 2; i /= 2; } } void del(int i){ a[i] = a[Size--]; siftdown(i); } int findk(int k){ int tmp = Size; for (int i = 1; i <= k - 1; ++i){ a[0] = a[1]; a[1] = a[Size]; a[Size] = a[0]; pos[a[1].ind] = 1; pos[a[Size].ind] = Size; --Size; siftdown(1); } int ret = a[1].size; while (Size < tmp){ ++Size; siftup(Size); } return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ a[i].ind = i; p[i] = i; pos[i] = i; b[i] = true; } Size = n; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'C':{ cin >> x >> y; int px = getParent(x), py = getParent(y); if (!b[px] || !b[py] || px == py) break; p[px] = py; a[pos[py]].size += a[pos[px]].size; del(pos[px]); siftup(pos[py]); break; } case 'D':{ cin >> x; int px = getParent(x); if (!b[px]) break; del(pos[px]); b[px] = false; break; } case 'Q':{ cin >> x; if (Size < x) cout << \"0\\n\"; else cout << findk(x) << '\\n'; break; } default: break; } } return 0; }","title":"1056"},{"location":"nr/1056/#1056","text":"\u9898\u76ee","title":"1056 \u4e8c\u54e5\u5403\u7cd6"},{"location":"nr/1056/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5403\u7cd6 */ #include <iostream> using namespace std; class Node{ public: int size = 1, ind = 0; }; bool b[500005]; Node a[500005]; int p[500005], pos[500005]; int n, m, Size = 0; int getParent(int x){ if (p[x] != x) p[x] = getParent(p[x]); return p[x]; } void siftdown(int i){ int x = i, mx = a[i].size; if (i * 2 <= Size){ if (a[i * 2].size > mx){ x = i * 2; mx = a[i * 2].size; } } if (i * 2 + 1 <= Size){ if (a[i * 2 + 1].size > mx){ x = i * 2 + 1; mx = a[i * 2 + 1].size; } } if (x != i){ a[0] = a[x]; a[x] = a[i]; a[i] = a[0]; pos[a[i].ind] = i; pos[a[x].ind] = x; siftdown(x); } } void siftup(int i){ while (i >= 2){ if (a[i].size <= a[i / 2].size) break; a[0] = a[i]; a[i] = a[i / 2]; a[i / 2] = a[0]; pos[a[i].ind] = i; pos[a[i / 2].ind] = i / 2; i /= 2; } } void del(int i){ a[i] = a[Size--]; siftdown(i); } int findk(int k){ int tmp = Size; for (int i = 1; i <= k - 1; ++i){ a[0] = a[1]; a[1] = a[Size]; a[Size] = a[0]; pos[a[1].ind] = 1; pos[a[Size].ind] = Size; --Size; siftdown(1); } int ret = a[1].size; while (Size < tmp){ ++Size; siftup(Size); } return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ a[i].ind = i; p[i] = i; pos[i] = i; b[i] = true; } Size = n; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'C':{ cin >> x >> y; int px = getParent(x), py = getParent(y); if (!b[px] || !b[py] || px == py) break; p[px] = py; a[pos[py]].size += a[pos[px]].size; del(pos[px]); siftup(pos[py]); break; } case 'D':{ cin >> x; int px = getParent(x); if (!b[px]) break; del(pos[px]); b[px] = false; break; } case 'Q':{ cin >> x; if (Size < x) cout << \"0\\n\"; else cout << findk(x) << '\\n'; break; } default: break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1057/","text":"1057 \u65e0\u804a\u7684LSZ \u9898\u76ee Description LSZ\u8bf4\uff1a\u4e0a\u6b21\u7684\u4f5c\u4e1a\u9898\u91cc\u9762\u5c11\u4e86\u4e00\u9053\uff0c\u6b63\u597d\u5c31\u653e\u5230\u673a\u8003\u91cc\u9762\u5427 LSZ\u53c8\u8bf4\uff1a\u6211\u61d2\u5f97\u7f16\u9898\u76ee\u80cc\u666f\u4e86 \u4e8e\u662f\u5c31\u6709\u4e86\u8fd9\u9053\u65e0\u804a\u7684\u9898\u76ee \u4e00\u4e2a\u7b50\u521d\u59cb\u4e3a\u7a7a\uff0c\u6709\u4e00\u4e9b\u589e\u52a0\u548c\u5220\u9664\u6570\u7684\u64cd\u4f5c\uff0c\u8fd8\u6709\u4e00\u4e9b\u8be2\u95ee\u5f53\u524d\u7b2cK\u5927\u7684\u6570\u662f\u51e0 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570M\uff0c\u8868\u793a\u64cd\u4f5c\u7684\u6570\u76ee \u4e0b\u9762M\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u64cd\u4f5c\uff1a L k \u8f93\u51fa\u7b2ck\u5927\u7684\u6570\uff0c\u5982\u679c\u7b50\u4e2d\u5143\u7d20\u4e0d\u591fk\u4e2a\u5219\u8f93\u51fa0 S p q \u5220\u9664\u7b50\u4e2d[p,q]\u8fd9\u4e2a\u95ed\u533a\u95f4\u91cc\u7684\u6240\u6709\u6570 Z x \u5411\u7b50\u4e2d\u589e\u52a0x\u8fd9\u4e2a\u6570 Output Format \u5bf9\u4e8e\u6bcf\u4e2aL\u64cd\u4f5c\u8f93\u51fa\u7b2ck\u5927\u7684\u6570 \u5bf9\u4e8e\u6bcf\u4e2aS\u64cd\u4f5c\u8f93\u51fa\u672c\u6b21\u5220\u9664\u4e86\u51e0\u4e2a\u6570 Hint \\(1 \\leq M \\leq 222222\\) \u5176\u4e2d\u670940%\u6570\u636e\u6ee1\u8db3\\(1 \\leq M \\leq 3333\\) \u6240\u6709\u5176\u4ed6\u6570\u90fd\u662f1\u5230M\u4e4b\u95f4\u7684\u6574\u6570 Sample Input 9 Z 4 Z 5 L 1 S 5 7 Z 1 L 2 Z 1 L 3 S 1 1 Sample Output 5 1 1 1 2 FineArtz's solution Star /* \u65e0\u804a\u7684LSZ */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = num = 1; } bool isRight() { return p->s[1] == this;} Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; void rotate(Node *p){ Node *q = p->p->p; if (p->isRight()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->isRight() == p->p->isRight()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } int del(int l, int r){ int ret = 0; if (!find(l)){ insert(l); --ret; } Node *p = prev(); if (!find(r)){ insert(r); --ret; } Node *q = succ(); if (!p && !q){ ret += root->size; root = nullptr; return ret; } if (!p){ if (root->s[0]) ret += root->s[0]->size; root->s[0] = nullptr; root->update(); return ret; } if (!q){ splay(p, 0); if (root->s[1]) ret += root->s[1]->size; root->s[1] = nullptr; root->update(); return ret; } splay(p, q); if (p->s[1]) ret += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); return ret; } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m; cin >> m; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'L':{ cin >> x; if (!root || root->size < x) cout << \"0\\n\"; else{ findk(root->size - x + 1); cout << root->key << '\\n'; } break; } case 'S': cin >> x >> y; cout << del(x, y) << '\\n'; break; case 'Z': cin >> x; insert(x); break; default: break; } } dispose(root); return 0; }","title":"1057"},{"location":"nr/1057/#1057-lsz","text":"\u9898\u76ee","title":"1057 \u65e0\u804a\u7684LSZ"},{"location":"nr/1057/#fineartzs-solution-star","text":"/* \u65e0\u804a\u7684LSZ */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = num = 1; } bool isRight() { return p->s[1] == this;} Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; void rotate(Node *p){ Node *q = p->p->p; if (p->isRight()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->isRight() == p->p->isRight()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } int del(int l, int r){ int ret = 0; if (!find(l)){ insert(l); --ret; } Node *p = prev(); if (!find(r)){ insert(r); --ret; } Node *q = succ(); if (!p && !q){ ret += root->size; root = nullptr; return ret; } if (!p){ if (root->s[0]) ret += root->s[0]->size; root->s[0] = nullptr; root->update(); return ret; } if (!q){ splay(p, 0); if (root->s[1]) ret += root->s[1]->size; root->s[1] = nullptr; root->update(); return ret; } splay(p, q); if (p->s[1]) ret += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); return ret; } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m; cin >> m; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'L':{ cin >> x; if (!root || root->size < x) cout << \"0\\n\"; else{ findk(root->size - x + 1); cout << root->key << '\\n'; } break; } case 'S': cin >> x >> y; cout << del(x, y) << '\\n'; break; case 'Z': cin >> x; insert(x); break; default: break; } } dispose(root); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1058/","text":"1058 \u5c0fM\u7684\u673a\u5668\u4eba \u9898\u76ee Description \u5c0fM\u6709\u5f88\u591a\u4e2a\u673a\u5668\u4eba\uff0c\u4ed6\u4eec\u8981\u4e48\u4e00\u76f4\u8bf4\u771f\u8bdd\uff0c\u8981\u4e48\u4e00\u76f4\u8bf4\u5047\u8bdd\u3002 \u7136\u540e\u6bcf\u4e2a\u4eba\u90fd\u8bf4\uff1a (1). \u4e0d\u5230N\u4e2a\u4eba\u6bd4\u6211\u5de5\u4f5c\u5f97\u591a (2). \u81f3\u5c11M\u4e2a\u4eba\u7684\u5de5\u8d44\u6bd4\u6211\u9ad8\u3002 \u4fdd\u8bc1\u6ca1\u6709\u4e24\u4e2a\u4eba\u7684\u5de5\u4f5c\u4e00\u6837\u91cd\uff0c\u4e5f\u6ca1\u6709\u4e24\u4e2a\u4eba\u7684\u5de5\u8d44\u4e00\u6837\u9ad8\uff0c\u95ee\u81f3\u5c11\u6709\u591a\u5c11\u673a\u5668\u4eba\uff1f Input Format \u4e00\u884c\u4e24\u4e2a\u6570\u6574\u6570N, M ( \\(1 \\leq N, M\\) < 2^31) Output Format \u4e00\u4e2a\u6574\u6570K\u8868\u793a\u81f3\u5c11\u6709K\u4e2a\u4eba Hint \u60f3\u4e0d\u51fa\u6765\u7684\u540c\u5b66... \u4e0d\u8981\u60f3\u5f97\u592a\u590d\u6742\u4e86... Sample Input 2 2 Sample Output 4 FineArtz's solution Star /* \u5c0fM\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; int main(){ long long m, n; cin >> m >> n; cout << m + n << endl; return 0; }","title":"1058"},{"location":"nr/1058/#1058-m","text":"\u9898\u76ee","title":"1058 \u5c0fM\u7684\u673a\u5668\u4eba"},{"location":"nr/1058/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; int main(){ long long m, n; cin >> m >> n; cout << m + n << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1059/","text":"1059 \u4e09\u5143\u7ec4 \u9898\u76ee Description \u5c0fX\u5728\u8003\u53e4\u65f6\u53d1\u73b0\u4e00\u4e2a\u9501\u7740\u7684\u77f3\u95e8\uff0c\u4ed6\u770b\u5230\u95e8\u4e0a\u9762\u5199\u7740\u4e00\u4e9b\u6587\u5b57\uff0c\u5927\u610f\u662f\uff1a \u95e8\u4e0a\u6709\u7740\u5bc6\u5bc6\u9ebb\u9ebb\u7684\u6570\u5b57\uff0c\u6bcf\u4e2a\u6570\u5b57ai\u662f\u4e2a\u6b63\u6574\u6570( \\(0 \\leq ai\\) < 100000000) \uff0c \u4f60\u53ea\u6709\u627e\u51fa\u91cc\u9762\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4(\u5373i, j, k, i!=j, j!=k,i!=k)\u7684\u4e2a\u6570\uff0c\u77f3\u95e8\u624d\u80fd\u6253\u5f00\u3002 \u6ee1\u8db3\u7684\u6761\u4ef6\u4e3aai * aj = ak (mod 100000000) \u53ef\u662f\u77f3\u95e8\u4e0a\u7684\u6570\u5b57\u592a\u591a\u4e86\uff0c\u4f5c\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u7684\u4f60\u80fd\u5e2e\u52a9\u4ed6\u8ba1\u7b97\u4e48? Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u6709\u77f3\u95e8\u4e0a\u6709n( \\(n \\leq 2000\\) )\u4e2a\u6570\u5b57. \u540e\u9762\u63a5\u7740n\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570ai(\\(0 \\leq ai\\) < 10^8) Output Format \u8f93\u51fa\u4e00\u4e2a\u6570m,\u8868\u793a\u6709m\u4e2a\u4e09\u5143\u7ec4\u6ee1\u8db3\u6761\u4ef6 Hint \u6570\u5b57\u662f\u968f\u673a\u7684\uff0c\u4f46\u662f\u4fdd\u8bc1\u6709\u4e09\u5143\u7ec4\u5b58\u5728 \u5bf9\u4e8e60%\u7684\u6570\u636e, \\(n \\leq 300\\) \u5bf9\u4e8e100%\u7684\u6570\u636e, \\(n \\leq 2000\\) Sample Input 5 1 2 3 4 6 Sample Output 2 FineArtz's solution Star /* \u4e09\u5143\u7ec4 */ #include <iostream> #include <algorithm> using namespace std; const unsigned long long MOD = 100000000, MOD2 = 5000005; const unsigned long long SEED = 13131313131313LL; int h[5000005], cnt[5000005]; int Hash(int x){ unsigned long long t = 0; while (x){ t = t * SEED + x % 10; x /= 10; } return (t % MOD2); } int find(int x){ int hs = Hash(x); while (h[hs] != 0){ if (h[hs] == x) return cnt[hs]; hs = (hs + 1) % MOD2; } return 0; } int main(){ long long a[2005]; int n; bool flag = false; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; int hs = Hash(a[i]); while (h[hs] != 0){ if (h[hs] == a[i]){ ++cnt[hs]; flag = true; break; } hs = (hs + 1) % MOD2; } if (!flag){ h[hs] = a[i]; cnt[hs] = 1; } } sort(a + 1, a + n + 1); int ans = 0; long long k = 0; for (int i = 1; i <= n - 1; ++i){ for (int j = i + 1; j <= n; ++j){ if (i != j){ k = a[i] * a[j] % MOD; int c = find(k); if (c != 0){ ans += 2 * c; if (a[i] == k) ans -= 2; if (a[j] == k) ans -= 2; } } } } cout << ans << endl; return 0; }","title":"1059"},{"location":"nr/1059/#1059","text":"\u9898\u76ee","title":"1059 \u4e09\u5143\u7ec4"},{"location":"nr/1059/#fineartzs-solution-star","text":"/* \u4e09\u5143\u7ec4 */ #include <iostream> #include <algorithm> using namespace std; const unsigned long long MOD = 100000000, MOD2 = 5000005; const unsigned long long SEED = 13131313131313LL; int h[5000005], cnt[5000005]; int Hash(int x){ unsigned long long t = 0; while (x){ t = t * SEED + x % 10; x /= 10; } return (t % MOD2); } int find(int x){ int hs = Hash(x); while (h[hs] != 0){ if (h[hs] == x) return cnt[hs]; hs = (hs + 1) % MOD2; } return 0; } int main(){ long long a[2005]; int n; bool flag = false; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; int hs = Hash(a[i]); while (h[hs] != 0){ if (h[hs] == a[i]){ ++cnt[hs]; flag = true; break; } hs = (hs + 1) % MOD2; } if (!flag){ h[hs] = a[i]; cnt[hs] = 1; } } sort(a + 1, a + n + 1); int ans = 0; long long k = 0; for (int i = 1; i <= n - 1; ++i){ for (int j = i + 1; j <= n; ++j){ if (i != j){ k = a[i] * a[j] % MOD; int c = find(k); if (c != 0){ ans += 2 * c; if (a[i] == k) ans -= 2; if (a[j] == k) ans -= 2; } } } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1060/","text":"1060 \u5c0fX\u7684\u673a\u5668\u4eba \u9898\u76ee Description \u5c0fX\u6700\u8fd1\u5728\u5b9e\u9a8c\u5ba4\u8fdb\u884c\u4e00\u9879\u673a\u5668\u4eba\u5b9e\u9a8c\uff0c\u4ed6\u6709\u4e09\u4e2a\u673a\u5668\u4eba\uff0c\u9700\u8981\u5728\u4e00\u4e2a\u5e7f\u573a\u4e0a\u63d0\u4f9b\u670d\u52a1\u3002\u5982\u679c\u67d0\u9879\u670d\u52a1\u8bf7\u6c42\u53d1\u751f\u5728\u67d0\u5904\uff0c\u5982\u679c\u8be5\u5904\u6ca1\u6709\u673a\u5668\u4eba\uff0c\u4e00\u4e2a\u673a\u5668\u4eba\u5fc5\u987b\u7acb\u523b\u79fb\u52a8\u5230\u8be5\u5904\u4e3a\u5176\u63d0\u4f9b\u670d\u52a1\u3002\u4f46\u662f\u5c0fX\u7684\u7f51\u7edc\u7cfb\u7edf\u51fa\u73b0\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u67d0\u4e2a\u65f6\u523b\u53ea\u80fd\u8ba9\u4e00\u4e2a\u673a\u5668\u4eba\u79fb\u52a8\u3002\u4ed6\u4eec\u5fc5\u987b\u4e3a\u4e86\u63d0\u4f9b\u670d\u52a1\u800c\u79fb\u52a8\uff0c\u4e14\u4e24\u4e2a\u673a\u5668\u4eba\u4e0d\u80fd\u5728\u67d0\u4e00\u65f6\u523b\u79fb\u52a8\u5230\u540c\u4e00\u4f4d\u7f6e\u3002 \u5c06\u67d0\u4e2a\u673a\u5668\u4eba\u4ece\u4f4d\u7f6ep\u79fb\u52a8\u5230\u4f4d\u7f6eq\u9700\u8981C(p,q)\u7684\u82b1\u8d39\u3002C(p,q)\u4e0d\u4e00\u5b9a\u7b49\u4e8eC(q,p), \u4f46C(p,p)\u4e00\u5b9a\u7b49\u4e8e0\u3002\u88ab\u673a\u5668\u4eba\u670d\u52a1\u7684\u4f4d\u7f6e\u987a\u5e8f\u4e0e\u670d\u52a1\u8bf7\u6c42\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u73b0\u5728\u5c0fX\u627e\u5230\u4e86\u4f60\uff0c\u5e0c\u671b\u80fd\u5b89\u6392\u673a\u5668\u4eba\u670d\u52a1\u7684\u987a\u5e8f\u4f7f\u5f97\u603b\u8d39\u7528\u6700\u5c11\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570L\u548cN, L(\\(3 \\leq L \\leq 200\\))\u662f\u53ef\u80fd\u7684\u8bf7\u6c42\u4f4d\u7f6e\u7684\u603b\u6570, N\u662f\u603b\u8bf7\u6c42\u6570. \u4f4d\u7f6e\u75281, 2, ... , L\u8868\u793a. \u63a5\u4e0b\u6765L\u884c\u6bcf\u884c\u5305\u542bL\u4e2a\u975e\u8d1f\u7684\u6574\u6570\uff0c\u5176\u4e2d\u7b2c(i+1)\u884c\u7684\u7b2cj\u5217\u4e2a\u6570\u8868\u793a\u4ecei\u5230j\u7684\u8d39\u7528C(i, j), \u6ee1\u8db3\\(C(i, j) \\leq 2000\\). \u6700\u540e\u4e00\u884c\u6709N\u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8868\u793a\u8bf7\u6c42\u7684\u4f4d\u7f6e\u3002 \u521d\u59cb\u65f6\uff0c\u4e09\u4e2a\u673a\u5668\u4eba\u5206\u522b\u57281, 2, 3\u4f4d\u7f6e\u3002 Output Format \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570M, \u8868\u793a\u6700\u5c0f\u7684\u603b\u8d39\u7528\u3002 Hint Sample Input 5 9 0 1 1 1 1 1 0 2 3 2 1 1 0 4 1 2 1 5 0 1 4 2 3 4 0 4 2 4 1 5 4 3 2 1 Sample Output 5 FineArtz's solution Star /* \u5c0fX\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; const int INF = 0x7fffff; int c[201][201]; int f1[201][201], f2[201][201]; int a[1005]; int minn(initializer_list<int> il){ int ret = INF; for (int i : il) if (ret > i) ret = i; return ret; } int main(){ int n, l; cin >> l >> n; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> c[i][j]; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k) f1[j][k] = f2[j][k] = INF; f1[2][3] = f1[3][2] = 0; a[0] = 1; for (int i = 0; i < n; ++i){ for (int j = 1; j <= l; ++j){ for (int k = 1; k <= l; ++k){ if (a[i] == j || a[i] == k || j == k) continue; f2[j][k] = minn({f1[j][k] + c[a[i]][a[i + 1]], f2[j][k], INF}); f2[a[i]][k] = minn({f1[j][k] + c[j][a[i + 1]], f2[a[i]][k], INF}); f2[a[i]][j] = minn({f1[j][k] + c[k][a[i + 1]], f2[a[i]][j], INF}); } } for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k){ f1[j][k] = f2[j][k]; f2[j][k] = INF; } } int ans = INF; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (ans > f1[i][j]) ans = f1[i][j]; cout << ans << endl; return 0; }","title":"1060"},{"location":"nr/1060/#1060-x","text":"\u9898\u76ee","title":"1060 \u5c0fX\u7684\u673a\u5668\u4eba"},{"location":"nr/1060/#fineartzs-solution-star","text":"/* \u5c0fX\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; const int INF = 0x7fffff; int c[201][201]; int f1[201][201], f2[201][201]; int a[1005]; int minn(initializer_list<int> il){ int ret = INF; for (int i : il) if (ret > i) ret = i; return ret; } int main(){ int n, l; cin >> l >> n; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> c[i][j]; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k) f1[j][k] = f2[j][k] = INF; f1[2][3] = f1[3][2] = 0; a[0] = 1; for (int i = 0; i < n; ++i){ for (int j = 1; j <= l; ++j){ for (int k = 1; k <= l; ++k){ if (a[i] == j || a[i] == k || j == k) continue; f2[j][k] = minn({f1[j][k] + c[a[i]][a[i + 1]], f2[j][k], INF}); f2[a[i]][k] = minn({f1[j][k] + c[j][a[i + 1]], f2[a[i]][k], INF}); f2[a[i]][j] = minn({f1[j][k] + c[k][a[i + 1]], f2[a[i]][j], INF}); } } for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k){ f1[j][k] = f2[j][k]; f2[j][k] = INF; } } int ans = INF; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (ans > f1[i][j]) ans = f1[i][j]; cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1061/","text":"1061 \u5c0fM\u7684\u670d\u52a1\u5668 \u9898\u76ee Description \u5c0fM\u9700\u8981\u5c06\u4e00\u4e2a\u6587\u4ef6\u590d\u5236\u5230n\u4e2a\u670d\u52a1\u5668\u4e0a\uff0c\u8fd9\u4e9b\u670d\u52a1\u5668\u7684\u7f16\u53f7\u4e3aS1, S2, \u2026, Sn\u3002 \u9996\u5148\uff0c\u5c0fM\u53ef\u4ee5\u9009\u62e9\u4e00\u4e9b\u670d\u52a1\u5668\uff0c\u76f4\u63a5\u628a\u6587\u4ef6\u590d\u5236\u5230\u5b83\u4eec\u4e2d\uff1b\u5c06\u6587\u4ef6\u590d\u5236\u5230\u670d\u52a1\u5668Si\u4e0a\uff0c\u9700\u8981\u82b1\u8d39ci > 0\u7684\u7f6e\u653e\u8d39\u7528\u3002 \u5bf9\u4e8e\u6ca1\u6709\u76f4\u63a5\u88ab\u590d\u5236\u6587\u4ef6\u7684\u670d\u52a1\u5668Si\u6765\u8bf4\uff0c\u5b83\u4f9d\u6b21\u5411\u540e\u68c0\u67e5Si+1, Si+2, \u2026\u76f4\u5230\u627e\u5230\u4e00\u53f0\u670d\u52a1\u5668Sj\uff1aSj\u4e2d\u7684\u6587\u4ef6\u662f\u901a\u8fc7\u76f4\u63a5\u590d\u5236\u5f97\u5230\u7684\uff0c\u4e8e\u662fSi\u4eceSj\u5904\u95f4\u63a5\u590d\u5236\u5f97\u5230\u8be5\u6587\u4ef6\uff0c\u8fd9\u79cd\u590d\u5236\u65b9\u5f0f\u7684\u8bfb\u53d6\u8d39\u7528\u662fj-i\uff08\u6ce8\u610fj>i\uff09\u3002 \u53e6\u5916\uff0cSn\u4e2d\u7684\u6587\u4ef6\u5fc5\u987b\u662f\u901a\u8fc7\u76f4\u63a5\u590d\u5236\u5f97\u5230\u7684\uff0c\u56e0\u4e3a\u5b83\u4e0d\u53ef\u80fd\u95f4\u63a5\u7684\u901a\u8fc7\u522b\u7684\u670d\u52a1\u5668\u8fdb\u884c\u590d\u5236\u3002\u6211\u4eec\u8bbe\u8ba1\u4e00\u79cd\u590d\u5236\u65b9\u6848\uff0c\u5373\u5bf9\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u786e\u5b9a\u5b83\u662f\u901a\u8fc7\u76f4\u63a5\u8fd8\u662f\u95f4\u63a5\u7684\u65b9\u5f0f\u8fdb\u884c\u590d\u5236\uff08Sn\u53ea\u80fd\u901a\u8fc7\u76f4\u63a5\u65b9\u5f0f\uff09\uff0c\u6700\u7ec8\u4f7f\u6bcf\u4e00\u53f0\u670d\u52a1\u5668\u90fd\u5f97\u5230\u6587\u4ef6\uff0c\u4e14\u603b\u82b1\u8d39\u6700\u5c0f\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u670d\u52a1\u5668\u7684\u6570\u76ee\u3002\u7b2c\u4e8c\u884c\u6709n\u4e2a\u6574\u6570\uff0c\u987a\u6570\u7b2ci\u4e2a\u8868\u793aci\uff1a\u5728Si\u4e0a\u76f4\u63a5\u590d\u5236\u6587\u4ef6\u7684\u8d39\u7528\u3002 Output Format \u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u6700\u5c11\u9700\u8981\u82b1\u8d39\u7684\u8d39\u7528\u3002 Hint 60%\u7684\u6570\u636e\u4e2d\uff0c\\(1 \\leq n \\leq 1000\\) 100%\u7684\u6570\u636e\u4e2d\uff0c\\(1 \\leq n \\leq 1000000\\) 80%\u7684\u6570\u636e\u4e2d\uff0c \\(1 \\leq ci \\leq 50\\) 100%\u7684\u6570\u636e\u4e2d\uff0c\\(1 \\leq ci \\leq 1000000000\\) \u6700\u7ec8\u7ed3\u679c\u53ef\u80fd\u8f83\u5927\uff0c\u8bf7\u6ce8\u610f\u9009\u62e9\u9002\u5f53\u7684\u6570\u636e\u7c7b\u578b\u8fdb\u884c\u8ba1\u7b97\u3002 Sample Input 10 2 3 1 5 4 5 6 3 1 2 Sample Output 18 FineArtz's solution Star /* \u5c0fM\u7684\u670d\u52a1\u5668 */ #include <iostream> using namespace std; const long long INF = 131313131313131313LL; long long f[1000005], c[1000005]; long long q[1000005], front = 1, rear = 1; inline double g(long long j, long long k){ return (2 * (f[j] - f[k]) + j * (j - 1) - k * (k - 1)) * 0.5 / (j - k); } int main(){ int n; cin >> n; c[0] = 0; for (int i = 1; i <= n; ++i) cin >> c[i]; f[n] = c[n]; q[front] = n; for (int i = n - 1; i >= 0; --i){ while (front < rear && g(q[front], q[front + 1]) > i) ++front; f[i] = f[q[front]] + (q[front] - i) * (q[front] - i - 1) / 2 + c[i]; while (front < rear && g(q[rear - 1], q[rear]) < g(q[rear], i)) --rear; q[++rear] = i; } cout << f[0] << endl; return 0; }","title":"1061"},{"location":"nr/1061/#1061-m","text":"\u9898\u76ee","title":"1061 \u5c0fM\u7684\u670d\u52a1\u5668"},{"location":"nr/1061/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u670d\u52a1\u5668 */ #include <iostream> using namespace std; const long long INF = 131313131313131313LL; long long f[1000005], c[1000005]; long long q[1000005], front = 1, rear = 1; inline double g(long long j, long long k){ return (2 * (f[j] - f[k]) + j * (j - 1) - k * (k - 1)) * 0.5 / (j - k); } int main(){ int n; cin >> n; c[0] = 0; for (int i = 1; i <= n; ++i) cin >> c[i]; f[n] = c[n]; q[front] = n; for (int i = n - 1; i >= 0; --i){ while (front < rear && g(q[front], q[front + 1]) > i) ++front; f[i] = f[q[front]] + (q[front] - i) * (q[front] - i - 1) / 2 + c[i]; while (front < rear && g(q[rear - 1], q[rear]) < g(q[rear], i)) --rear; q[++rear] = i; } cout << f[0] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1062/","text":"1062 \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 \u9898\u76ee Description \u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u5c0fM\u6709N\u4e2a\u673a\u5668\u4eba\u3002PPCA\u6c34\u5e73\u6d4b\u8bd5\u4e4b\u540e\uff0c\u5c0fM\u5fc3\u8840\u6765\u6f6e\uff0c\u8ba9N\u4e2a\u673a\u5668\u4eba\u7ad9\u6210\u4e00\u6392\u5531\u673a\u5668\u4eba\u4e4b\u6b4c\u3002\u5c0fM\u8981\u8bf7\u5176\u4e2d\u7684(N-K)\u53ea\u673a\u5668\u4eba\u51fa\u5217\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684K\u4e2a\u673a\u5668\u4eba\u6392\u6210\u673a\u5668\u4eba\u961f\u5f62\u3002\uff08\u51b7\u6b7b\u4eba\u4e0d\u507f\u547d-.+\uff09 \u673a\u5668\u4eba\u961f\u5f62\u662f\u6307\u8fd9\u6837\u7684\u4e00\u79cd\u961f\u5f62\uff1a\u8bbeK\u53ea\u673a\u5668\u4eba\u4ece\u5de6\u5230\u53f3\u4f9d\u6b21\u7f16\u53f7\u4e3a1\uff0c2\u2026\uff0cK\uff0c\u4ed6\u4eec\u7684\u8eab\u9ad8\u5206\u522b\u4e3aT1\uff0cT2\uff0c\u2026\uff0cTK\uff0c \u5219\u4ed6\u4eec\u7684\u8eab\u9ad8\u6ee1\u8db3\\( T1 < ... < Ti > Ti+1 > \u2026 > TK (1 \\leq i \\leq K) \\)\u3002 \u56e0\u4e3a\u673a\u5668\u4eba\u5f88\u5361\u54c7\u4f0aO(\u2229_\u2229)O~\uff0c\u5c0fM\u60f3\u8ba9\u5c3d\u91cf\u5c11\u7684\u673a\u5668\u4eba\u51fa\u5217\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u673a\u5668\u4eba\u6392\u6210\u673a\u5668\u4eba\u961f\u5f62\u3002\u73b0\u5728\u628aN\u53ea\u673a\u5668\u4eba\u7684\u544a\u8bc9\u4f60\uff0c\u806a\u660e\u7684\u4f60\uff0c\u80fd\u5e2e\u5e2e\u5c0fM\u5417\uff1f Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570N( \\( 2 \\leq N \\leq 1000000 \\) )\uff0c\u8868\u793a\u673a\u5668\u4eba\u7684\u603b\u6570\u3002\u7b2c\u4e00\u884c\u6709n\u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u5206\u9694\uff0c\u7b2ci\u4e2a\u6574\u6570Ti(\\(0 \\leq Ti \\leq 10000000 \\) )\u662f\u7b2ci\u53ea\u673a\u5668\u4eba\u7684\u9ad8\u5ea6(\u7eb3\u7c73)\u3002 Output Format \u8f93\u51fa\u5305\u62ec\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u5c31\u662f\u6700\u5c11\u9700\u8981\u51e0\u53ea\u673a\u5668\u4eba\u51fa\u5217\u3002 \u8bf4\u660e \u5bf9\u4e8e30\u5206\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6709\\( n \\leq 100 \\) \uff1b \u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6709\\( n \\leq 1000000 \\)\u3002 \u6539\u7f16\u81eaNOIP2004\u3002 Sample Input 8 186 186 150 200 160 130 197 220 Sample Output 4 FineArtz's solution Star /* \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 */ #include <iostream> using namespace std; int a[1000005], n; int ans1[1000005], ans2[1000005], t[1000005]; int len; int bisearch(int i){ int l = 1, r = len, mid; while (l < r){ mid = (l + r) / 2; if (t[mid] >= a[i]) r = mid; else l = mid + 1; } return l; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; ans1[i] = 1; ans2[i] = 1; } t[1] = a[1]; len = 1; for (int i = 2; i <= n; ++i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans1[i] = len; } len = 1; t[1] = a[n]; for (int i = n - 1; i >= 1; --i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans2[i] = len; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, ans1[i] + ans2[i] - 1); cout << n - ans << endl; return 0; }","title":"1062"},{"location":"nr/1062/#1062-m","text":"\u9898\u76ee","title":"1062 \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62"},{"location":"nr/1062/#fineartzs-solution-star","text":"/* \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 */ #include <iostream> using namespace std; int a[1000005], n; int ans1[1000005], ans2[1000005], t[1000005]; int len; int bisearch(int i){ int l = 1, r = len, mid; while (l < r){ mid = (l + r) / 2; if (t[mid] >= a[i]) r = mid; else l = mid + 1; } return l; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; ans1[i] = 1; ans2[i] = 1; } t[1] = a[1]; len = 1; for (int i = 2; i <= n; ++i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans1[i] = len; } len = 1; t[1] = a[n]; for (int i = n - 1; i >= 1; --i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans2[i] = len; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, ans1[i] + ans2[i] - 1); cout << n - ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1063/","text":"1063 \u5c0fM\u7231\u6ed1\u96ea \u9898\u76ee Description \u5c0fM\u8d85\u7ea7\u559c\u6b22\u6ed1\u96ea~~ \u6ed1\u96ea\u7684\u786e\u5f88\u523a\u6fc0\u3002\u53ef\u662f\u4e3a\u4e86\u83b7\u5f97\u901f\u5ea6\uff0c\u6ed1\u7684\u533a\u57df\u5fc5\u987b\u5411\u4e0b\u503e\u659c\uff0c\u800c\u4e14\u5f53\u5c0fM\u6ed1\u5230\u5761\u5e95\uff0c\u4fbf\u4e0d\u5f97\u4e0d\u518d\u6b21\u8d70\u4e0a\u5761\u6216\u8005\u7b49\u5f85\u5347\u964d\u673a\u6765\u8f7d\u4f60\u3002\u5c0fM\u60f3\u77e5\u9053\u6ed1\u96ea\u573a\u4e2d\u6700\u957f\u5e95\u7684\u6ed1\u5761\u3002\u6ed1\u96ea\u573a\u7531\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed9\u51fa\u3002\u6570\u7ec4\u7684\u6bcf\u4e2a\u6570\u5b57\u4ee3\u8868\u70b9\u8ddd\u79bb\u6c34\u5e73\u9762\u7684\u76f8\u5bf9\u8ddd\u79bb\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u4f8b\u5b50 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 \u5c0fM\u53ef\u4ee5\u4ece\u67d0\u4e2a\u70b9\u6ed1\u5411\u4e0a\u4e0b\u5de6\u53f3\u76f8\u90bb\u56db\u4e2a\u70b9\u4e4b\u4e00\uff0c\u5f53\u4e14\u4ec5\u5f53\u9ad8\u5ea6\u51cf\u5c0f\u3002\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u4e00\u6761\u53ef\u6ed1\u884c\u7684\u6ed1\u5761\u4e3a24-17-16-1\u3002\u5f53\u713625-24-23-...-3-2-1\u66f4\u957f\u3002\u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u662f\u6700\u957f\u7684\u4e00\u6761\u3002 Input Format \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u8868\u793a\u533a\u57df\u7684\u884c\u6570R\u548c\u5217\u6570C(\\(1 \\leq R,C \\leq 500\\))\u3002\u4e0b\u9762\u662fR\u884c\uff0c\u6bcf\u884c\u6709C\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u9ad8\u5ea6h\uff0c\\(-2^31-1 \\leq h \\leq 2^31\\)\u3002 Output Format \u8f93\u51fa\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570L\uff0c\u8868\u793a\u6ed1\u96ea\u573a\u6700\u957f\u6ed1\u5761\u7684\u957f\u5ea6\u3002 Sample Input 5 5 1 2 3 4 5 16 17 18 19 6 15 24 25 20 7 14 23 22 21 8 13 12 11 10 9 Sample Output 25 Hint 70%\u7684\u6570\u636e \\(1 \\leq R,C \\leq 100\\) 100%\u7684\u6570\u636e \\(1 \\leq R,C \\leq 500\\) \u6539\u7f16\u81eaSHTSC 2002 FineArtz's solution Star /* \u5c0fM\u7231\u6ed1\u96ea */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505], f[505][505] = {0}; int r, c; int search(int x, int y){ if (f[x][y] != 0) return f[x][y]; int t[4] = {0}; for (int i = 0; i < 4; ++i){ int nx = x + dx[i]; int ny = y + dy[i]; if (nx >= 1 && ny >= 1 && nx <= r && ny <= c) if (a[x][y] > a[nx][ny]) t[i] = 1 + search(nx, ny); } int ret = 1; for (int i = 0; i < 4; ++i) if (ret < t[i]) ret = t[i]; f[x][y] = ret; return ret; } int main(){ cin >> r >> c; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) cin >> a[i][j]; int ans = 0; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) ans = max(ans, search(i, j)); cout << ans << endl; return 0; }","title":"1063"},{"location":"nr/1063/#1063-m","text":"\u9898\u76ee","title":"1063 \u5c0fM\u7231\u6ed1\u96ea"},{"location":"nr/1063/#fineartzs-solution-star","text":"/* \u5c0fM\u7231\u6ed1\u96ea */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505], f[505][505] = {0}; int r, c; int search(int x, int y){ if (f[x][y] != 0) return f[x][y]; int t[4] = {0}; for (int i = 0; i < 4; ++i){ int nx = x + dx[i]; int ny = y + dy[i]; if (nx >= 1 && ny >= 1 && nx <= r && ny <= c) if (a[x][y] > a[nx][ny]) t[i] = 1 + search(nx, ny); } int ret = 1; for (int i = 0; i < 4; ++i) if (ret < t[i]) ret = t[i]; f[x][y] = ret; return ret; } int main(){ cin >> r >> c; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) cin >> a[i][j]; int ans = 0; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) ans = max(ans, search(i, j)); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1064/","text":"1064 \u5c0fM\u7231\u7092\u80a1 \u9898\u76ee Description \u5c0fM\u6700\u8fd1\u559c\u6b22\u4e0a\u4e86\u7092\u80a1\u3002\u4f5c\u4e3a\u4e00\u4e2a\u7231\u601d\u8003\u7684\u5b69\u5b50\uff0c\u5c0fM\u53d1\u73b0\u4e86\u4e00\u6761\u7092\u80a1\u79d8\u8bc0\u2014\u2014\"\u9022\u4f4e\u5438\u7eb3,\u8d8a\u4f4e\u8d8a\u4e70\"! \u8fd9\u53e5\u8bdd\u7684\u610f\u601d\u662f\uff1a\u6bcf\u6b21\u4f60\u8d2d\u4e70\u80a1\u7968\u65f6\u7684\u80a1\u4ef7\u4e00\u5b9a\u8981\u6bd4\u4f60\u4e0a\u6b21\u8d2d\u4e70\u65f6\u7684\u80a1\u4ef7\u4f4e\uff0c\u6309\u7167\u8fd9\u4e2a\u89c4\u5219\u8d2d\u4e70\u80a1\u7968\u7684\u6b21\u6570\u8d8a\u591a\u8d8a\u597d\uff0c\u770b\u770b\u4f60\u6700\u591a\u80fd\u6309\u8fd9\u4e2a\u89c4\u5219\u4e70\u51e0\u6b21\u3002\u7ed9\u5b9a\u8fde\u7eed\u7684N\u5929\u4e2d\u6bcf\u5929\u7684\u80a1\u4ef7\u3002\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u5929\u8d2d\u4e70\u4e00\u6b21\u80a1\u7968\uff0c\u4f46\u662f\u8d2d\u4e70\u65f6\u7684\u80a1\u4ef7\u4e00\u5b9a\u8981\u6bd4\u4f60\u4e0a\u6b21\u8d2d\u4e70\u65f6\u7684\u80a1\u4ef7\u4f4e\u3002\u5c0fM\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6c42\u51fa\u6700\u591a\u80fd\u4e70\u51e0\u6b21\u80a1\u7968\u3002 \u4ee5\u4e0b\u9762\u8fd9\u4e2a\u8868\u4e3a\u4f8b, \u67d0\u51e0\u5929\u7684\u80a1\u4ef7\u662f: (Here put the table) \u8fd9\u4e2a\u4f8b\u5b50\u4e2d, \u5c0fM\u5982\u679c\u6bcf\u6b21\u4e70\u80a1\u7968\u65f6\u7684\u80a1\u4ef7\u90fd\u6bd4\u4e0a\u4e00\u6b21\u4e70\u65f6\u4f4e\uff0c\u90a3\u4e48\u4ed6\u6700\u591a\u80fd\u4e704\u6b21\u80a1\u7968\u3002\u4e00\u79cd\u4e70\u6cd5\u5982\u4e0b(\u53ef\u80fd\u6709\u5176\u4ed6\u7684\u4e70\u6cd5): (Here put the table) Input Format \u7b2c1\u884c: N (\\( 1 \\leq N \\leq 5000 \\) ), \u8868\u793a\u80fd\u4e70\u80a1\u7968\u7684\u5929\u6570\u3002 \u7b2c2\u884c\u4ee5\u4e0b: N\u4e2a\u6b63\u6574\u6570 (\u53ef\u80fd\u5206\u591a\u884c) \uff0c\u7b2ci\u4e2a\u6b63\u6574\u6570\u8868\u793a\u7b2ci\u5929\u7684\u80a1\u4ef7. \u8fd9\u4e9b\u6b63\u6574\u6570\u5927\u5c0f\u4e0d\u4f1a\u8d85\u8fc7longint(pascal)/long(c++) Output Format \u53ea\u6709\u4e00\u884c\uff0c\u8f93\u51fa\u4e24\u4e2a\u6574\u6570\uff1a \u80fd\u591f\u4e70\u8fdb\u80a1\u7968\u7684\u5929\u6570 \u957f\u5ea6\u8fbe\u5230\u8fd9\u4e2a\u503c\u7684\u80a1\u7968\u8d2d\u4e70\u65b9\u6848\u6570\u91cf \u5728\u8ba1\u7b97\u65b9\u6848\u7684\u6570\u91cf\u7684\u65f6\u5019\uff0c\u5982\u679c\u4e24\u4e2a\u65b9\u6848\u7684\u80a1\u4ef7\u5e8f\u5217\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u6837\u7684\u4e24\u4e2a\u65b9\u6848\u88ab\u8ba4\u4e3a\u662f\u76f8\u540c\u7684\uff08\u53ea\u80fd\u7b97\u505a\u4e00\u4e2a\u65b9\u6848\uff09\u3002\u56e0\u6b64\uff0c\u4e24\u4e2a\u4e0d\u540c\u7684\u5929\u6570\u5e8f\u5217\u53ef\u80fd\u4ea7\u751f\u540c\u4e00\u4e2a\u80a1\u4ef7\u5e8f\u5217\uff0c\u8fd9\u6837\u53ea\u80fd\u8ba1\u7b97\u4e00\u6b21\u3002 Sample Input 12 68 69 54 64 68 64 70 67 78 62 98 87 Sample Output 4 2 FineArtz's solution Star /* \u5c0fM\u7231\u7092\u80a1 */ #include <iostream> #include <cassert> using namespace std; class Bignum{ public: int len = 1; long long data[1005] = {0}; long long &operator [](int x){ return data[x]; } void clear(){ for (int i = 1; i <= len; ++i) data[i] = 0; len = 1; } Bignum &operator =(const Bignum &b){ clear(); len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; return *this; } }; Bignum operator +(const Bignum &b1, const Bignum &b2){ Bignum c; c.len = max(b1.len, b2.len); for (int i = 1; i <= c.len; ++i){ c.data[i] = c.data[i] + b1.data[i] + b2.data[i]; c.data[i + 1] += c.data[i] / 10; c.data[i] %= 10; } ++c.len; while (c.data[c.len] != 0){ c.data[c.len + 1] += c.data[c.len] / 10; c.data[c.len] %= 10; ++c.len; } if (c.data[c.len] == 0 && c.len != 1) --c.len; return c; } long long a[5005], len; int n; long long t[5005]; Bignum c, cnt[5005]; int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; t[i] = 1; cnt[i][1] = 1; } len = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j < i; ++j){ if (a[j] > a[i]){ if (t[i] < t[j] + 1){ t[i] = t[j] + 1; cnt[i] = cnt[j]; } else if (t[i] == t[j] + 1) cnt[i] = cnt[i] + cnt[j]; } } for (int j = 1; j < i; ++j){ if (a[i] == a[j] && t[i] == t[j]) cnt[j].clear(); } if (t[i] > len) len = t[i]; } for (int i = 1; i <= n; ++i){ if (t[i] == len) c = c + cnt[i]; } cout << len << ' '; for (int i = c.len; i >= 1; --i) cout << c[i]; cout << endl; return 0; }","title":"1064"},{"location":"nr/1064/#1064-m","text":"\u9898\u76ee","title":"1064 \u5c0fM\u7231\u7092\u80a1"},{"location":"nr/1064/#fineartzs-solution-star","text":"/* \u5c0fM\u7231\u7092\u80a1 */ #include <iostream> #include <cassert> using namespace std; class Bignum{ public: int len = 1; long long data[1005] = {0}; long long &operator [](int x){ return data[x]; } void clear(){ for (int i = 1; i <= len; ++i) data[i] = 0; len = 1; } Bignum &operator =(const Bignum &b){ clear(); len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; return *this; } }; Bignum operator +(const Bignum &b1, const Bignum &b2){ Bignum c; c.len = max(b1.len, b2.len); for (int i = 1; i <= c.len; ++i){ c.data[i] = c.data[i] + b1.data[i] + b2.data[i]; c.data[i + 1] += c.data[i] / 10; c.data[i] %= 10; } ++c.len; while (c.data[c.len] != 0){ c.data[c.len + 1] += c.data[c.len] / 10; c.data[c.len] %= 10; ++c.len; } if (c.data[c.len] == 0 && c.len != 1) --c.len; return c; } long long a[5005], len; int n; long long t[5005]; Bignum c, cnt[5005]; int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; t[i] = 1; cnt[i][1] = 1; } len = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j < i; ++j){ if (a[j] > a[i]){ if (t[i] < t[j] + 1){ t[i] = t[j] + 1; cnt[i] = cnt[j]; } else if (t[i] == t[j] + 1) cnt[i] = cnt[i] + cnt[j]; } } for (int j = 1; j < i; ++j){ if (a[i] == a[j] && t[i] == t[j]) cnt[j].clear(); } if (t[i] > len) len = t[i]; } for (int i = 1; i <= n; ++i){ if (t[i] == len) c = c + cnt[i]; } cout << len << ' '; for (int i = c.len; i >= 1; --i) cout << c[i]; cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1065/","text":"1065 \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c1 \u9898\u76ee Description \u5c0fM\u6700\u8fd1\u5728\u505a\u548c\u9057\u4f20\u751f\u7269\u5b66\u6709\u5173\u7684\u5b9e\u9a8c\u3002\u5177\u4f53\u8fc7\u7a0b\u662f\u8fd9\u6837\u7684\uff0c\u5c0fM\u4ece\u82e5\u5e72\u79cd\u751f\u7269\u4f53\u5185\u63d0\u53d6DNA\u7247\u6bb5\uff0c\u5e76\u5bf9\u5176\u8fdb\u884c\u6d4b\u5e8f\u3002 DNA\u5206\u5b50\u662f\u75314\u79cd\u78b1\u57faA\u3001T\u3001C\u3001G\u6309\u7167\u4e00\u5b9a\u6b21\u5e8f\u6392\u5217\u6210\u7684\u3002\u5c0fM\u73b0\u5728\u7684\u4efb\u52a1\u662f\u8981\u5c06\u63d0\u53d6\u51fa\u7684\u67d0\u4e24\u79cd\u751f\u7269\u4f53\u7684DNA\u7247\u6bb5\u8fdb\u884c\u5bf9\u6bd4\uff0c\u6c42\u51fa\u5176\u76f8\u4f3c\u7a0b\u5ea6\u3002 \u76f8\u4f3c\u7a0b\u5ea6\u662f\u7528\u4e24\u4e2a\u78b1\u57fa\u5e8f\u5217\u7684\u6700\u5927\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u8868\u8ff0\u7684\u3002 Input Format \u8f93\u5165\u5171\u4e24\u884c\uff0c\u5206\u522b\u662f\u7531A\u3001T\u3001C\u3001G\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\uff0c\u4ee3\u8868\u78b1\u57fa\u5e8f\u5217\u3002 \u5b57\u7b26\u4e32\u957f\u5ea6 \\( \\leq 1000\\) Output Format \u8f93\u51fa\u5171\u4e00\u884c\uff0c\u4e3a\u4e24\u4e2a\u78b1\u57fa\u5e8f\u5217\u7684\u76f8\u4f3c\u7a0b\u5ea6\u3002 Hint Sample Input1 CTT CAT Sample Output1 2 Sample Input2 TATGCAATAATAATTTTGCTTAGTCCTGGTGCGCGCTGGCGTTATAG CACCCCGAATATGCGGCACTCCGCTGATAATGGCAAACACAGCGCGCAATG Sample Output2 27 FineArtz's solution Star /* \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> #include <cstring> using namespace std; int f[1005][1005] = {0}; char s1[1005], s2[1005]; int main(){ cin >> s1 >> s2; int l1 = strlen(s1), l2 = strlen(s2); for (int i = 0; i <= l1; ++i){ for (int j = 0; j <= l2; ++j){ if (i == 0 || j == 0) f[i][j] = 0; else if (s1[i - 1] == s2[j - 1]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i][j - 1], f[i - 1][j]); } } cout << f[l1][l2] << endl; return 0; }","title":"1065"},{"location":"nr/1065/#1065-m1","text":"\u9898\u76ee","title":"1065 \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c1"},{"location":"nr/1065/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> #include <cstring> using namespace std; int f[1005][1005] = {0}; char s1[1005], s2[1005]; int main(){ cin >> s1 >> s2; int l1 = strlen(s1), l2 = strlen(s2); for (int i = 0; i <= l1; ++i){ for (int j = 0; j <= l2; ++j){ if (i == 0 || j == 0) f[i][j] = 0; else if (s1[i - 1] == s2[j - 1]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i][j - 1], f[i - 1][j]); } } cout << f[l1][l2] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1066/","text":"1066 \u5c0fM\u5bb6\u7684\u725b\u4eec \u9898\u76ee Description \u5c0fM\u662f\u4e00\u4f4d\u8fdc\u8fd1\u95fb\u540d\u7684\u5e84\u56ed\u4e3b\u3002\u56e0\u4e3a\u8fd1\u6765\u725b\u8089\u6da8\u4ef7\uff0c\u7cbe\u660e\u5c0fM\u51b3\u5b9a\u5f00\u59cb\u517b\u725b\u3002\u4e3a\u4e86\u65b9\u4fbf\u8ddf\u8e2a\u6240\u6709\u7684\u725b\uff0c\u5c0fM\u5728\u5e84\u56ed\u4e0a\u88c5\u4e86\u4e00\u5957\u81ea\u52a8\u7cfb\u7edf\u3002\u4ed6\u7ed9\u4e86\u6bcf\u4e00\u4e2a\u5934\u725b\u4e00\u4e2a\u7535\u5b50\u724c\u53f7\u3002\u5f53\u725b\u8d70\u8fc7\u8fd9\u4e2a\u7cfb\u7edf\u65f6\uff0c\u725b\u7684\u540d\u5b57\u5c06\u88ab\u81ea\u52a8\u8bfb\u5165\u3002 \u6bcf\u4e00\u5934\u725b\u7684\u7535\u5b50\u540d\u5b57\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3aM\u7684\uff0c\u7531N\u4e2a\u4e0d\u540c\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u7684\u5b57\u7b26\u4e32\u3002 \u5f88\u5feb\uff0c\u6dd8\u6c14\u7684\u725b\u627e\u5230\u4e86\u7cfb\u7edf\u7684\u6f0f\u6d1e\uff1a\u5b83\u4eec\u53ef\u4ee5\u5012\u7740\u8d70\u8fc7\u8bfb\u7801\u5668\u3002\u4e00\u5934\u540d\u5b57\u4e3aabcba\u4e0d\u4f1a\u5bfc\u81f4\u4efb\u4f55\u95ee\u9898\uff0c\u4f46\u662f\u540d\u4e3aabcb\u7684\u725b\u4f1a\u53d8\u6210\u4e24\u5934\u725b\uff08abcb\u548cbcba\uff09\u3002 \u4e8e\u662f\u4e4e\u5c0fM\u51b3\u5b9a\u7ed9\u725b\u4eec\u6539\u540d\u5b57\uff0c\u4f7f\u5f97\u725b\u7684\u540d\u5b57\u6b63\u8bfb\u548c\u53cd\u8bfb\u90fd\u4e00\u6837\u3002\u5c0fM\u53ef\u4ee5\u5728\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u6216\u5220\u9664\u5b57\u6bcd\u3002\u4f46\u662f\uff0c\u6dfb\u52a0\u548c\u5220\u9664\u6bcf\u4e00\u4e2a\u5b57\u6bcd\u90fd\u6709\u4e00\u5b9a\u7684\u8d39\u7528\u3002\u5bf9\u4e8e\u4e00\u4e2a\u725b\u7684\u540d\u5b57\u548c\u6240\u6709\u6dfb\u52a0\u6216\u5220\u9664\u5b57\u6bcd\u7684\u8d39\u7528\uff0c\u627e\u51fa\u4fee\u6539\u540d\u5b57\u7684\u6700\u5c0f\u7684\u8d39\u7528\u3002\u6ce8\u610f\uff1a\u7a7a\u5b57\u7b26\u4e32\u4e5f\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u540d\u5b57\u3002 Input Format \u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6570\uff0cN\u548cM\u3002 \u7b2c\u4e8c\u884c\uff1aM\u4e2a\u5b57\u7b26\uff0c\u521d\u59cb\u7684\u725b\u7684\u540d\u5b57\u3002 \u7b2c3\u5230N\uff0b2\u884c\uff1a\u6bcf\u884c\u542b\u6709\u4e00\u4e2a\u5b57\u6bcd\u548c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u662f\u6dfb\u52a0\u548c\u5220\u9664\u8fd9\u4e2a\u5b57\u6bcd\u7684\u8d39\u7528\u3002 \\( 0 \\leq N \\leq 26\uff0c0 \\leq M \\leq 2000 \\) \uff0c \\( 0 \\leq \u8d39\u7528 \\leq 10000 \\) Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u6539\u53d8\u6240\u6709\u540d\u5b57\u7684\u6700\u5c0f\u8d39\u7528\u3002 Sample Input 3 4 abcb a 1000 1100 b 350 700 c 200 800 Sample Output 900 FineArtz's solution Star /* \u5c0fM\u5bb6\u7684\u725b\u4eec */ #include <iostream> #include <cstring> using namespace std; int f[2005][2005] = {0}; int main(){ int n, m; cin >> n >> m; char s[2005]; cin >> s; int add[26], del[26]; for (int i = 1; i <= n; ++i){ char ch; int x, y; cin >> ch >> x >> y; add[ch - 'a'] = x; del[ch - 'a'] = y; } for (int i = m - 2; i >= 0; --i){ for (int j = i; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ int t = 200000000; t = min(f[i + 1][j] + add[s[i] - 'a'], t); t = min(f[i + 1][j] + del[s[i] - 'a'], t); t = min(f[i][j - 1] + add[s[j] - 'a'], t); t = min(f[i][j - 1] + del[s[j] - 'a'], t); f[i][j] = t; } } } cout << f[0][m - 1] << endl; return 0; }","title":"1066"},{"location":"nr/1066/#1066-m","text":"\u9898\u76ee","title":"1066 \u5c0fM\u5bb6\u7684\u725b\u4eec"},{"location":"nr/1066/#fineartzs-solution-star","text":"/* \u5c0fM\u5bb6\u7684\u725b\u4eec */ #include <iostream> #include <cstring> using namespace std; int f[2005][2005] = {0}; int main(){ int n, m; cin >> n >> m; char s[2005]; cin >> s; int add[26], del[26]; for (int i = 1; i <= n; ++i){ char ch; int x, y; cin >> ch >> x >> y; add[ch - 'a'] = x; del[ch - 'a'] = y; } for (int i = m - 2; i >= 0; --i){ for (int j = i; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ int t = 200000000; t = min(f[i + 1][j] + add[s[i] - 'a'], t); t = min(f[i + 1][j] + del[s[i] - 'a'], t); t = min(f[i][j - 1] + add[s[j] - 'a'], t); t = min(f[i][j - 1] + del[s[j] - 'a'], t); f[i][j] = t; } } } cout << f[0][m - 1] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1067/","text":"1067 Dividing \u9898\u76ee Description Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles. Input Format Each line in the input file describes one collection of marbles to be divided. The lines contain six non-negative integers \\(n_1,...,n_6\\), where \\(n_i\\) is the number of marbles of value \\(i\\). So, the example from above would be described by the input-line \" 1 0 1 2 0 0 \". The maximum total number of marbles will be 20000. The last line of the input file will be \" 0 0 0 0 0 0 \"; do not process this line. Output Format For each collection, output \" Collection #k: \", where k is the number of the test case, and then either \" Can be divided. \" or \" Can't be divided. \". Output a blank line after each test case. Sample Input 1 0 1 2 0 0 1 0 0 0 1 1 0 0 0 0 0 0 Sample Output Collection #1: Can't be divided. Collection #2: Can be divided. Source Mid-Central European Regional Contest 1999 FineArtz's solution Star /* Dividing */ #include <iostream> using namespace std; bool work(int *a){ int v = 0; bool ret; for (int i = 1; i <= 6; ++i){ v += a[i] * i; } if (v % 2) return false; v /= 2; int *f[7]; for (int i = 0; i <= 6; ++i) f[i] = new int[v + 1]; f[0][0] = 0; for (int i = 1; i <= v; ++i) f[0][i] = -1; for (int i = 1; i <= 6; ++i){ for (int j = 0; j <= v; ++j){ if (f[i - 1][j] >= 0) f[i][j] = a[i]; else f[i][j] = -1; } for (int j = 0; j <= v - i; ++j){ if (f[i][j] > 0){ f[i][j + i] = max(f[i][j + i], f[i][j] - 1); } } } if (f[6][v] != -1) ret = true; else ret = false; for (int i = 0; i <= 6; ++i) delete [] f[i]; return ret; } int main(){ int n[7], t = 0; bool eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } while (!eof){ ++t; bool flag = work(n); cout << \"Collection #\" << t << \": \\n\"; if (flag) cout << \"Can be divided.\\n\\n\"; else cout << \"Can't be divided.\\n\\n\"; eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } } return 0; }","title":"1067"},{"location":"nr/1067/#1067-dividing","text":"\u9898\u76ee","title":"1067 Dividing"},{"location":"nr/1067/#fineartzs-solution-star","text":"/* Dividing */ #include <iostream> using namespace std; bool work(int *a){ int v = 0; bool ret; for (int i = 1; i <= 6; ++i){ v += a[i] * i; } if (v % 2) return false; v /= 2; int *f[7]; for (int i = 0; i <= 6; ++i) f[i] = new int[v + 1]; f[0][0] = 0; for (int i = 1; i <= v; ++i) f[0][i] = -1; for (int i = 1; i <= 6; ++i){ for (int j = 0; j <= v; ++j){ if (f[i - 1][j] >= 0) f[i][j] = a[i]; else f[i][j] = -1; } for (int j = 0; j <= v - i; ++j){ if (f[i][j] > 0){ f[i][j + i] = max(f[i][j + i], f[i][j] - 1); } } } if (f[6][v] != -1) ret = true; else ret = false; for (int i = 0; i <= 6; ++i) delete [] f[i]; return ret; } int main(){ int n[7], t = 0; bool eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } while (!eof){ ++t; bool flag = work(n); cout << \"Collection #\" << t << \": \\n\"; if (flag) cout << \"Can be divided.\\n\\n\"; else cout << \"Can't be divided.\\n\\n\"; eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1068/","text":"1068 \u5c0fX\u7684\u90ae\u7968 \u9898\u76ee Description \u5c0fX\u559c\u6b22\u6536\u96c6\u90ae\u7968\uff0c\u5df2\u77e5\u4e00\u4e2aN\u679a\u90ae\u7968\u7684\u9762\u503c\u96c6\u5408\uff08\u5982\uff0c{ 1\u5206\uff0c3\u5206 }\uff09\u548c\u4e00\u4e2a\u4e0a\u9650K-\u8868\u793a\u4fe1\u5c01\u4e0a\u80fd\u591f\u8d34K\u5f20\u90ae\u7968\u3002\u8ba1\u7b97\u4ece1\u5230M\u7684\u6700\u5927\u8fde\u7eed\u53ef\u8d34\u51fa\u7684\u90ae\u8d44\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u67091\u5206\u548c3\u5206\u7684\u90ae\u7968\uff1b\u6700\u591a\u53ef\u4ee5\u8d345\u5f20\u90ae\u7968\u3002\u5f88\u5bb9\u6613\u8d34\u51fa1\u52305\u5206\u7684\u90ae\u8d44\uff08\u75281\u5206\u90ae\u7968\u8d34\u5c31\u884c\u4e86\uff09\uff0c\u63a5\u4e0b\u6765\u7684\u90ae\u8d44\u4e5f\u4e0d\u96be\uff1a 6 = 3 + 3 7 = 3 + 3 + 1 8 = 3 + 3 + 1 + 1 9 = 3 + 3 + 3 10 = 3 + 3 + 3 + 1 11 = 3 + 3 + 3 + 1 + 1 12 = 3 + 3 + 3 + 3 13 = 3 + 3 + 3 + 3 + 1\u3002 \u7136\u800c\uff0c\u4f7f\u7528 5 \u679a 1 \u5206\u6216\u8005 3 \u5206\u7684\u90ae\u7968\u6839\u672c\u4e0d\u53ef\u80fd\u8d34\u51fa 14 \u5206\u7684\u90ae\u8d44\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u8fd9\u4e24\u79cd\u90ae\u7968\u7684\u96c6\u5408\u548c\u4e0a\u9650 K=5\uff0c\u7b54\u6848\u662f M=13\u3002 Input Format \u4e24\u4e2a\u6574\u6570\uff0cK \u548c N K\uff08 \\(1 \\leq K \\leq 200\\) \uff09\u662f\u53ef\u7528\u7684\u90ae\u7968\u603b\u6570\u3002 N\uff08 \\(1 \\leq N \\leq 50\\) \uff09\u662f\u90ae\u7968\u9762\u503c\u7684\u6570\u91cf\u3002 Output Format N \u4e2a\u6574\u6570\uff0c\u6bcf\u884c 15 \u4e2a\uff0c\u5217\u51fa\u6240\u6709\u7684 N \u4e2a\u90ae\u7968\u7684\u9762\u503c\uff0c\u9762\u503c\u4e0d\u8d85\u8fc7 10000\u3002 Hint Sample Input 5 2 1 3 Sample Output 13 FineArtz's solution Star /* \u5c0fX\u7684\u90ae\u7968 */ #include <iostream> using namespace std; int k, n, m = 0, ans = 0; int a[205] = {0}, f[2000005] = {0}; int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; f[a[i]] = 1; if (a[i] > m) m = a[i]; } for (int i = 1; i <= m * k; ++i) if (f[i] == 0) f[i] = 500; ans = m * k; for (int i = 1; i <= m * k; ++i){ for (int j = 1; j <= n; ++j){ f[i + a[j]] = min(f[i + a[j]], f[i] + 1); } if (f[i] > k){ ans = i - 1; break; } } cout << ans << endl; return 0; }","title":"1068"},{"location":"nr/1068/#1068-x","text":"\u9898\u76ee","title":"1068 \u5c0fX\u7684\u90ae\u7968"},{"location":"nr/1068/#fineartzs-solution-star","text":"/* \u5c0fX\u7684\u90ae\u7968 */ #include <iostream> using namespace std; int k, n, m = 0, ans = 0; int a[205] = {0}, f[2000005] = {0}; int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; f[a[i]] = 1; if (a[i] > m) m = a[i]; } for (int i = 1; i <= m * k; ++i) if (f[i] == 0) f[i] = 500; ans = m * k; for (int i = 1; i <= m * k; ++i){ for (int j = 1; j <= n; ++j){ f[i + a[j]] = min(f[i + a[j]], f[i] + 1); } if (f[i] > k){ ans = i - 1; break; } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1069/","text":"1069 \u4e8c\u54e5\u7684\u786c\u5e01 \u9898\u76ee Description \u5feb\u653e\u5047\u4e86\uff0c\u4e8c\u54e5\u60f3\u7ed9\u5973\u670b\u53cb\u4e70\u4e00\u4e2a\u793c\u7269\u3002 \u8d70\u5230\u5546\u5e97\u524d\uff0c\u53d1\u73b0\u94b1\u5305\u91cc\u53ea\u6709\u786c\u5e01\u4e86\u3002\u4e8c\u54e5\u6570\u4e86\u4e00\u4e0b\uff0c\u4e00\u5171\u6709n\u79cd\u786c\u5e01\uff0c\u9762\u503c\u5206\u522b\u4e3aA1, A2, ..., An\uff0c\u6bcf\u79cd\u786c\u5e01\u7684\u4e2a\u6570\u5206\u522b\u4e3aC1, C2, ..., Cn\u3002 \u4e8c\u54e5\u5fc3\u91cc\u6ca1\u6709\u5e95\uff0c\u4ed6\u4f30\u8ba1\u8981\u4e70\u7684\u793c\u7269\u4ef7\u683c\u4e0d\u4f1a\u8d85\u8fc7m\uff0c\u4f46\u4e0d\u77e5\u9053\u5230\u5e95\u8981\u4e70\u591a\u5c11\u94b1\u7684\u793c\u7269\u3002 \u4e8c\u54e5\u7684\u786c\u5e01\u5df2\u7ecf\u5f88\u591a\u4e86\uff0c\u4ed6\u4e0d\u60f3\u518d\u8981\u66f4\u591a\u7684\u786c\u5e01\u4e86\uff0c\u6240\u4ee5\u4ed6\u60f3\u77e5\u9053\uff0c\u7528\u624b\u5934\u8fd9\u4e9b\u786c\u5e01\uff0c\u53ef\u4ee5\u6b63\u597d\u51d1\u51fa1\u5230m\u4e2d\u591a\u5c11\u79cd\u91d1\u989d\uff08\u6b63\u597d\u76f8\u7b49\uff0c\u5305\u62ec1\u548cm\uff09\u3002 Input Format \u8f93\u5165\u5305\u542b\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u7a7a\u683c\u5206\u9694\u7684\u4e24\u4e2a\u6574\u6570n\u548cm\uff0c\\( 1 \\leq n \\leq 100\uff0c1 \\leq m \\leq 100000 \\) \u3002 \u63a5\u4e0b\u6765\u67092n\u4e2a\u6574\u6570\uff0c\u5206\u522b\u662f\u9762\u503cA1, A2, ..., An\uff0c\u4ee5\u53ca\u786c\u5e01\u4e2a\u6570C1, C2, ..., Cn\uff0c\u7528\u7a7a\u767d\u5206\u9694\uff0c\\( 1 \\leq Ai \\leq 100000\uff0c1 \\leq Ci \\leq 1000 \\) \u3002 \u5f53\u8bfb\u5165\u7684n=0\u4e14m=0\u65f6\uff0c\u8868\u793a\u8f93\u5165\u7ed3\u675f\uff1b\u8fd9\u7ec4\u6570\u636e\u4e0d\u9700\u8981\u5904\u7406\u3002 Output Format \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\u7528\u8fd9\u4e9b\u786c\u5e01\u53ef\u4ee5\u6b63\u597d\u51d1\u51fa1\u5230m\u8303\u56f4\u5185\u7684\u591a\u5c11\u79cd\u91d1\u989d\u3002 \u8bf4\u660e http://poj.org/problem?id=1742 Sample Input 2 5 1 4 2 1 3 10 1 2 4 2 1 1 0 0 Sample Output 4 8 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u786c\u5e01 */ #include <iostream> #include <cstring> using namespace std; int a[100005], c[1005], f[100005]; void work(int n, int m){ memset(a, 0, sizeof(a)); memset(c, 0, sizeof(c)); memset(f, -1, sizeof(f)); f[0] = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= n; ++i) cin >> c[i]; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= m; ++j){ if (f[j] >= 0) f[j] = c[i]; else if (j < a[i] || f[j - a[i]] < 0) f[j] = -1; else f[j] = f[j - a[i]] - 1; } } int ans = 0; for (int i = 1; i <= m; ++i) if (f[i] >= 0) ++ans; cout << ans << '\\n'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; while (n != 0 || m != 0){ work(n, m); cin >> n >> m; } return 0; }","title":"1069"},{"location":"nr/1069/#1069","text":"\u9898\u76ee","title":"1069 \u4e8c\u54e5\u7684\u786c\u5e01"},{"location":"nr/1069/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u786c\u5e01 */ #include <iostream> #include <cstring> using namespace std; int a[100005], c[1005], f[100005]; void work(int n, int m){ memset(a, 0, sizeof(a)); memset(c, 0, sizeof(c)); memset(f, -1, sizeof(f)); f[0] = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= n; ++i) cin >> c[i]; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= m; ++j){ if (f[j] >= 0) f[j] = c[i]; else if (j < a[i] || f[j - a[i]] < 0) f[j] = -1; else f[j] = f[j - a[i]] - 1; } } int ans = 0; for (int i = 1; i <= m; ++i) if (f[i] >= 0) ++ans; cout << ans << '\\n'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; while (n != 0 || m != 0){ work(n, m); cin >> n >> m; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1070/","text":"1070 \u4e8c\u54e5\u7684\u9e45 \u9898\u76ee Description \u9e45\uff0c\u9e45\uff0c\u9e45\uff0c \u66f2\u9879\u5411\u5929\u6b4c\u3002 \u767d\u6bdb\u6d6e\u7eff\u6c34\uff0c \u7ea2\u638c\u62e8\u6e05\u6ce2\u3002 \u9996\u53e5\u8fde\u7528\u4e09\u4e2a\u201c\u9e45\u201d\u5b57\uff0c\u8868\u8fbe\u4e86\u4e8c\u54e5\u5bf9\u9e45\u5341\u5206\u559c\u7231\u4e4b\u60c5\u3002\u8fd9\u4e09\u4e2a\u201c\u9e45\u201d\u5b57\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e8c\u54e5\u542c\u5230\u9e45\u53eb\u4e86\u4e09\u58f0\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e8c\u54e5\u770b\u5230\u9e45\u5728\u6c34\u4e2d\u5b09\u620f\uff0c\u5341\u5206\u6b23\u559c\uff0c\u9ad8\u5174\u5730\u8fde\u547c\u4e09\u58f0\u201c\u9e45\u3001\u9e45\u3001\u9e45\u201d\u3002\u4e8c\u54e5\u5982\u6b64\u559c\u6b22\u9e45\uff0c\u4e5f\u517b\u4e86\u5f88\u591a\u9e45\uff0c\u51c6\u786e\u7684\u8bf4\uff0c\u4e8c\u54e5\u517b\u4e86 K \u53ea\u9e45\u3002 \u6709\u8da3\u7684\u662f\uff0c\u8fd9 K \u53ea\u9e45\u6bcf\u53ea\u6bcf\u5929\u8981\u5403\u603b\u8ba1 V \u884c\u7684 code\uff0c\u4e00\u884c\u4e0d\u80fd\u591a\uff0c\u4e00\u884c\u4e0d\u80fd\u5c11\uff0c\u5426\u5219\u5c31\u4f1a\u201c\u9e45\u9e45\u9e45\u201d\u5730\u53eb\u3002 \u51e0\u5e74\u4e0b\u6765\uff0c\u7ecf\u5386\u4e86Tiger, Mips, Nachos, Fatworm, Tenet\u7b49\u7b49\u4e4b\u540e\uff0c\u4e8c\u54e5\u79ef\u6512\u4e86 N \u79cd code \u53ef\u4ee5\u5582\u9e45\uff0c\u7b2c i \u79cd code \u6709\u56fa\u5b9a\u7684\u884c\u6570 V[i] \u548c\u8425\u517b\u4ef7\u503c W[i]\u3002 \u7136\u800c\uff0c\u8fd9 K \u53ea\u9e45\u7684\u813e\u6c14\u5341\u5206\u53e4\u602a\uff0c\u5b83\u4eec\u4e2d\u7684\u67d0\u4e00\u53ea\u4e00\u65e6\u53d1\u73b0\u81ea\u5df1\u5403\u7684 V \u884c code \u548c\u522b\u7684\u9e45\u5403\u7684\u5b8c\u5168\u76f8\u540c\u4e5f\u4f1a\u201c\u9e45\u9e45\u9e45\u201d\u5730\u53eb\uff1b\u4e00\u65e6\u53d1\u73b0\u76f8\u540c\u79cd\u7c7b\u7684 code \u81ea\u5df1\u5403\u4e86\u4e24\u6b21\u4e5f\u4f1a\u201c\u9e45\u9e45\u9e45\u201d\u5730\u53eb\u3002 \u4e8c\u54e5\u4e3a\u4e86\u8ba9\u6240\u6709\u9e45\u80fd\u5403\u5230\u8425\u517b\u4ef7\u503c\u603b\u548c\u6700\u591a\u7684 code \u4e14\u4e0d\u8ba9\u4efb\u4e00\u53ea\u201c\u9e45\u9e45\u9e45\u201d\u5730\u53eb\uff0c\u5f88\u4f24\u8111\u7b4b\u3002\u806a\u660e\u7684\u4f60\uff0c\u80fd\u5e2e\u5e2e\u4ed6\u5417\uff1f Input Format \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6574\u6570 K\u3001V\u3001N \u5206\u522b\u8868\u793a\u4e8c\u54e5\u517b\u7684\u9e45\u7684\u6570\u91cf\u3001\u6bcf\u53ea\u9e45\u6bcf\u5929\u7684\u98df\u91cf\u3001\u4e8c\u54e5\u62e5\u6709\u7684 code \u79cd\u7c7b\u3002 \u7b2c\u4e8c\u884c\u5f00\u59cb\u5230 N+1 \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4ee3\u8868\u4e8c\u54e5\u62e5\u6709\u7684\u4e00\u79cd code \u7684\u884c\u6570\u548c\u8425\u517b\u4ef7\u503c\u3002 \uff08\u5177\u6709\u76f8\u540c\u884c\u6570\u548c\u4ef7\u503c\u7684 code \u4e5f\u662f\u4e0d\u540c\u79cd\u7c7b\uff09 Output Format \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u4ec5\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728\u4e0d\u51fa\u73b0\u201c\u9e45\u9e45\u9e45\u201d\u7684\u60c5\u51b5\u4e0b\uff0c\u4e8c\u54e5\u6bcf\u5929\u5582\u7ed9\u9e45\u4eec\u7684 code \u7684\u6700\u5927\u603b\u8425\u517b\u4ef7\u503c\u3002 Hint \u6570\u636e\u8303\u56f4\uff1a \u5bf9\u4e8e70\u5206\u7684\u6570\u636e\uff0c\u4e8c\u54e5\u517b\u4e86\u4e0d\u8d85\u8fc710\u53ea\u9e45\uff0c\u6bcf\u53ea\u9e45\u7684\u98df\u91cf\u4e0d\u8d85\u8fc71200\u884c\uff0ccode\u4e0d\u8d85\u8fc7100\u79cd\u3002 \u5bf9\u4e8e95\u5206\u7684\u6570\u636e\uff0c\u4e8c\u54e5\u517b\u4e86\u4e0d\u8d85\u8fc750\u53ea\u9e45\uff0c\u6bcf\u53ea\u9e45\u7684\u98df\u91cf\u4e0d\u8d85\u8fc75000\u884c\uff0ccode\u4e0d\u8d85\u8fc7200\u79cd\u3002\u4efb\u4f55\u6b63\u6574\u6570\u4e0d\u8d85\u8fc75000\u3002 \u5bf9\u4e8e100\u5206\u7684\u6570\u636e\uff0c\u4e8c\u54e5\u517b\u4e86\u4e0d\u8d85\u8fc770\u53ea\u9e45\uff0c\u6bcf\u53ea\u9e45\u7684\u98df\u91cf\u4e0d\u8d85\u8fc76000\u884c\uff0ccode\u4e0d\u8d85\u8fc7300\u79cd\uff0c\u6700\u540e\u7ed3\u679c\u4e0d\u8d85\u8fc72^31-1\u3002 \u6837\u4f8b\u8bf4\u660e\uff1a \u4e00\u79cd\u53ef\u4ee5\u5f97\u5230\u6700\u5927\u603b\u4ef7\u503c\u7684\u5582\u9e45\u65b9\u6848\u662f\uff1a\u7b2c\u4e00\u53ea\u9e45\u5403\u884c\u6570\u4e3a7\u30012\u30011\u7684code\uff0c\u4ef7\u503c\u4e3a25\u3002\u7b2c\u4e8c\u53ea\u9e45\u5403\u884c\u6570\u4e3a3\u30017\u7684code\uff0c\u4ef7\u503c\u4e3a32\u3002\u603b\u4ef7\u503c\u4e3a57\u3002\u4e24\u53ea\u9e45\u90fd\u5582\u9971\u4e86\uff0c\u4e14\u6ca1\u6709\u201c\u9e45\u9e45\u9e45\u201d~ Sample Input 2 10 5 3 12 7 20 2 4 5 6 1 1 Sample Output 57 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u9e45 */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int k, V, n; int v[305], w[305]; int f[6001][72]; int t1[72], t2[72]; int main(){ cin >> k >> V >> n; for (int i = 1; i <= n; ++i) cin >> v[i] >> w[i]; for (int i = 0; i <= V; ++i) for (int j = 0; j <= k; ++j) f[i][j] = -INF; f[0][1] = 0; for (int i = 1; i <= n; ++i){ for (int j = V; j >= v[i]; --j){ for (int l = 1; l <= k; ++l){ t1[l] = f[j - v[i]][l] + w[i]; t2[l] = f[j][l]; } int x = 1, y = 1; for (int z = 1; z <= k; ++z){ if (t1[x] > t2[y]) f[j][z] = t1[x++]; else f[j][z] = t2[y++]; } } } int ans = 0; for (int i = 1; i <= k; ++i){ ans += f[V][i]; } cout << ans << endl; return 0; }","title":"1070"},{"location":"nr/1070/#1070","text":"\u9898\u76ee","title":"1070 \u4e8c\u54e5\u7684\u9e45"},{"location":"nr/1070/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u9e45 */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int k, V, n; int v[305], w[305]; int f[6001][72]; int t1[72], t2[72]; int main(){ cin >> k >> V >> n; for (int i = 1; i <= n; ++i) cin >> v[i] >> w[i]; for (int i = 0; i <= V; ++i) for (int j = 0; j <= k; ++j) f[i][j] = -INF; f[0][1] = 0; for (int i = 1; i <= n; ++i){ for (int j = V; j >= v[i]; --j){ for (int l = 1; l <= k; ++l){ t1[l] = f[j - v[i]][l] + w[i]; t2[l] = f[j][l]; } int x = 1, y = 1; for (int z = 1; z <= k; ++z){ if (t1[x] > t2[y]) f[j][z] = t1[x++]; else f[j][z] = t2[y++]; } } } int ans = 0; for (int i = 1; i <= k; ++i){ ans += f[V][i]; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1071/","text":"1071 \u5c0fM\u7684\u56de\u6587\u4e32 \u9898\u76ee Description \u5c0fM\u559c\u6b22\u56de\u6587\u4e32\uff0c\u56de\u6587\u4e32\u5c31\u662f\u4ece\u5de6\u5f80\u53f3\u548c\u4ece\u53f3\u5f80\u5de6\u8bfb\u90fd\u4e00\u6837\u7684\u5b57\u7b26\u4e32\u3002 \u73b0\u5728\u5c0fX\u627e\u5230\u5c0fM\u7ed9\u4e86\u4ed6\u4e00\u4e2a\u5b57\u7b26\u4e32S\uff0c\u5e0c\u671b\u5c0fM\u5c06\u5b83\u53d8\u6210\u56de\u6587\u4e32\u3002 \u5c0fM\u53ef\u4ee5\u8fdb\u884c\u5982\u4e0b\u4e09\u7c7b\u64cd\u4f5c: add \u5728\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26 erase \u5220\u9664\u4e00\u4e2a\u5b57\u7b26 change one letter to another \u5c06\u67d0\u4e2a\u5b57\u7b26\u53d8\u6210\u53e6\u4e00\u4e2a \u7136\u800c\uff0c\u6bcf\u79cd\u64cd\u4f5c\u53ea\u80fd\u5bf9\u89c4\u5b9a\u7684\u5b57\u7b26\u6709\u6548\u3002\u5982\uff0c\u5c0fM\u53ea\u80fd\u5141\u8bb8erase 'a', add 'b', change 'c' to 'd'\uff0c\u4e14\u6ca1\u6709\u5176\u4ed6\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u3002 \u4e16\u754c\u4e0a\u6ca1\u6709\u514d\u8d39\u7684\u5348\u9910\uff0c\u5c0fM\u7684\u6bcf\u6b21\u64cd\u4f5c\u90fd\u6709\u4e00\u5b9a\u7684\u82b1\u8d39\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5c0fM\u9700\u8981\u4fee\u6539\u7684\u5b57\u7b26\u4e32 (\\( length \\leq 50 \\)) \u7b2c\u4e8c\u884c\u4e00\u4e2a\u6570N, \u8868\u793a\u5c0fM\u53ef\u4ee5\u4f7f\u7528\u7684\u64cd\u4f5c (\\( N \\leq 50 \\) ) \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u53ef\u4ee5\u4f7f\u7528\u7684\u64cd\u4f5c\uff0c\u6709\u4e0b\u9762\u4e09\u79cd\u5f62\u5f0f\uff1a \"add c x\" : \u8868\u793a\u5c06\u4e00\u4e2a\u5b57\u7b26c\u52a0\u5165\u5230\u4e32\u4e2d\u9700\u8981\u7684\u82b1\u8d39\u4e3ax \"erase c x\" : \u8868\u793a\u5c06\u4e00\u4e2a\u5b57\u7b26c\u4ece\u4e32\u4e2d\u5220\u9664\u9700\u8981\u7684\u82b1\u8d39\u4e3ax \"change c1 c2 x\" : \u8868\u793a\u5c06\u67d0\u4e2a\u5b57\u7b26c1\u53d8\u4e3ac2\u9700\u8981\u7684\u82b1\u8d39\u4e3ax \u6ce8\u610f\uff0c\"change c1 c2 x\" \u4e0d\u5141\u8bb8\u5c06c2\u53d8\u6210c1 \u6ee1\u8db3 \\( x \\leq 100000, c1 <> c2 \\) , \u4e14\u4efb\u4e24\u884c\u64cd\u4f5c\u4e0d\u540c Output Format \u4e00\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u5c0fM\u5c06\u521d\u59cb\u7684\u5b57\u7b26\u4e32\u8f6c\u4e3a\u56de\u6587\u4e32\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8f93\u51fa-1 Sample Input caaaaaab 6 change b a 100000 change c a 100000 change c d 50000 change b e 50000 erase d 50000 erase e 49999 Sample Output 199999 FineArtz's solution Star /* \u5c0fM\u7684\u56de\u6587\u4e32 */ #include <iostream> #include <cstring> using namespace std; const long long INF = 100000000000000LL; int main(){ char s[51]; cin >> s; int n, m = strlen(s); cin >> n; long long a[256], e[256], c[256][256]; long long cost[256]; for (int i = 0; i < 256; ++i){ a[i] = INF; e[i] = INF; cost[i] = INF; for (int j = 0; j < 256; ++j){ if (i == j) c[i][j] = 0; else c[i][j] = INF; } } for (int i = 1; i <= n; ++i){ char t[10]; char x, y; int w; cin >> t; switch(t[0]){ case 'a': cin >> x >> w; a[x] = w; break; case 'e': cin >> x >> w; e[x] = w; break; case 'c': cin >> x >> y >> w; c[x][y] = w; break; } } for (int k = 0; k < 256; ++k){ for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ if (i != j && i != k && j != k) if (c[i][j] > c[i][k] + c[k][j]) c[i][j] = c[i][k] + c[k][j]; } } } for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ cost[i] = min(cost[i], min(a[i], e[i])); cost[i] = min(cost[i], c[i][j] + min(a[j], e[j])); cost[i] = min(cost[i], a[j] + c[j][i]); for (int k = 0; k < 256; ++k) cost[i] = min(cost[i], c[i][j] + a[k] + c[k][j]); } } long long f[51][51] = {0}; for (int i = m - 2; i >= 0; --i){ for (int j = i + 1; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ f[i][j] = INF; f[i][j] = min(f[i][j], f[i + 1][j] + cost[s[i]]); f[i][j] = min(f[i][j], f[i][j - 1] + cost[s[j]]); f[i][j] = min(f[i][j], f[i + 1][j - 1] + min(c[s[j]][s[i]], c[s[i]][s[j]])); for (int k = 0; k < 256; ++k) f[i][j] = min(f[i][j], f[i + 1][j - 1] + c[s[i]][k] + c[s[j]][k]); } } } if (f[0][m - 1] == INF) cout << \"-1\" << endl; else cout << f[0][m - 1] << endl; return 0; }","title":"1071"},{"location":"nr/1071/#1071-m","text":"\u9898\u76ee","title":"1071 \u5c0fM\u7684\u56de\u6587\u4e32"},{"location":"nr/1071/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u56de\u6587\u4e32 */ #include <iostream> #include <cstring> using namespace std; const long long INF = 100000000000000LL; int main(){ char s[51]; cin >> s; int n, m = strlen(s); cin >> n; long long a[256], e[256], c[256][256]; long long cost[256]; for (int i = 0; i < 256; ++i){ a[i] = INF; e[i] = INF; cost[i] = INF; for (int j = 0; j < 256; ++j){ if (i == j) c[i][j] = 0; else c[i][j] = INF; } } for (int i = 1; i <= n; ++i){ char t[10]; char x, y; int w; cin >> t; switch(t[0]){ case 'a': cin >> x >> w; a[x] = w; break; case 'e': cin >> x >> w; e[x] = w; break; case 'c': cin >> x >> y >> w; c[x][y] = w; break; } } for (int k = 0; k < 256; ++k){ for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ if (i != j && i != k && j != k) if (c[i][j] > c[i][k] + c[k][j]) c[i][j] = c[i][k] + c[k][j]; } } } for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ cost[i] = min(cost[i], min(a[i], e[i])); cost[i] = min(cost[i], c[i][j] + min(a[j], e[j])); cost[i] = min(cost[i], a[j] + c[j][i]); for (int k = 0; k < 256; ++k) cost[i] = min(cost[i], c[i][j] + a[k] + c[k][j]); } } long long f[51][51] = {0}; for (int i = m - 2; i >= 0; --i){ for (int j = i + 1; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ f[i][j] = INF; f[i][j] = min(f[i][j], f[i + 1][j] + cost[s[i]]); f[i][j] = min(f[i][j], f[i][j - 1] + cost[s[j]]); f[i][j] = min(f[i][j], f[i + 1][j - 1] + min(c[s[j]][s[i]], c[s[i]][s[j]])); for (int k = 0; k < 256; ++k) f[i][j] = min(f[i][j], f[i + 1][j - 1] + c[s[i]][k] + c[s[j]][k]); } } } if (f[0][m - 1] == INF) cout << \"-1\" << endl; else cout << f[0][m - 1] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1072/","text":"1072 \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c \u9898\u76ee Description \u5c0fX\u68a6\u89c1\u4ed6\u6765\u5230\u4e86\u4e00\u4e2a\u795e\u5947\u7684\u661f\u7403\uff0c\u8fd9\u4e2a\u661f\u7403\u4e0a\u751f\u7269\u7684DNA\u5e8f\u5217\u7531\u65e0\u6570\u79cd\u78b1\u57fa\u5bf9\u6784\u6210\uff0c \u66f4\u5947\u602a\u7684\u662f\uff0c\u7ec4\u6210DNA\u5e8f\u5217\u7684\u6bcf\u4e00\u79cd\u78b1\u57fa\u5728\u8be5\u5e8f\u5217\u4e2d\u6b63\u597d\u51fa\u73b05\u6b21\uff01\u8fd9\u6837\u5982\u679c\u4e00\u4e2aDNA\u5e8f\u5217\u6709N\u79cd\u4e0d\u540c\u7684\u78b1\u57fa\u6784\u6210\uff0c\u90a3\u4e48\u5b83\u7684\u957f\u5ea6\u4e00\u5b9a\u662f5N\u3002 \u82e5\u4ece\u4e00\u4e2aDNA\u5e8f\u5217\uff08\u5b57\u7b26\u4e32\uff09s\u4e2d\u4efb\u610f\u62bd\u53d6\u4e00\u4e9b\u78b1\u57fa\uff08\u5b57\u7b26\uff09\uff0c\u5c06\u5b83\u4eec\u4ecd\u6309\u5728s\u4e2d\u7684\u987a\u5e8f\u6392\u5217\u6210\u4e00\u4e2a\u65b0\u4e32u\uff0c\u5219\u79f0u\u662fs\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u3002\u5bf9\u4e8e\u4e24 \u4e2aDNA\u5e8f\u5217s1\u548cs2\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u5e8f\u5217u\u540c\u65f6\u6210\u4e3as1\u548cs2\u7684\u5b50\u5e8f\u5217\uff0c\u5219\u79f0u\u662fs1\u548cs2\u7684\u516c\u5171\u5b50\u5e8f\u5217\u3002 \u5c0fX\u5df2\u77e5\u4e24\u4e2aDNA\u5e8f\u5217s1, s2\uff0c\u6c42s1\u548cs2\u7684\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u8fd9\u4e2a\u661f\u7403\u4e0a\u67d0\u79cd\u751f\u7269\u4f7f\u7528\u4e86N\u79cd\u4e0d\u540c\u7684\u78b1\u57fa\uff0c\u4ee5\u540e\u5c06\u5b83\u4eec\u7f16\u53f7\u4e3a1\u2026N\u7684\u6574\u6570\u3002 \u4ee5\u4e0b\u8fd8\u6709\u4e24\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2aDNA\u5e8f\u5217\uff1a\u5305\u542b5N\u4e2a1\u2026N\u7684\u6574\u6570\uff0c\u6574\u6570\u4e4b\u95f4\u7531\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u4e14\u6bcf\u4e00\u4e2a\u6574\u6570\u5728\u5bf9\u5e94\u7684\u5e8f\u5217\u4e2d\u6b63\u597d\u51fa\u73b05\u6b21\u3002 Output Format \u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u4e24\u4e2aDNA\u5e8f\u5217\u7684\u6700\u5927\u5339\u914d\u6570\u76ee\u3002 Hint 60%\u7684\u6d4b\u8bd5\u6570\u636e\u4e2d\uff1a\\(1 \\leq N \\leq 1000\\) 100%\u7684\u6d4b\u8bd5\u6570\u636e\u4e2d\uff1a\\(1 \\leq N \\leq 20000\\) Sample Input 2 1 1 2 2 1 1 2 1 2 2 1 2 2 2 1 1 2 2 1 1 Sample Output 7 FineArtz's solution Star /* \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> using namespace std; int pos[1000005][5], a[1000005]; int n; inline int lowbit(int x){ return x & (-x); } void change(int x, int y){ while (x <= n){ a[x] = max(a[x], y); x += lowbit(x); } } int find(int x){ int ret = 0; while (x != 0){ ret = max(ret, a[x]); x -= lowbit(x); } return ret; } int main(){ cin >> n; n *= 5; for (int i = 1; i <= n; ++i){ int x, j = 0; cin >> x; while (pos[x][j]) ++j; pos[x][j] = i; } int ans = 0; for (int i = 1; i <= n; ++i){ int x; cin >> x; for (int j = 4; ~j; --j){ int t = find(pos[x][j] - 1) + 1; ans = max(t, ans); change(pos[x][j], t); } } cout << ans << endl; return 0; }","title":"1072"},{"location":"nr/1072/#1072-x","text":"\u9898\u76ee","title":"1072 \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c"},{"location":"nr/1072/#fineartzs-solution-star","text":"/* \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> using namespace std; int pos[1000005][5], a[1000005]; int n; inline int lowbit(int x){ return x & (-x); } void change(int x, int y){ while (x <= n){ a[x] = max(a[x], y); x += lowbit(x); } } int find(int x){ int ret = 0; while (x != 0){ ret = max(ret, a[x]); x -= lowbit(x); } return ret; } int main(){ cin >> n; n *= 5; for (int i = 1; i <= n; ++i){ int x, j = 0; cin >> x; while (pos[x][j]) ++j; pos[x][j] = i; } int ans = 0; for (int i = 1; i <= n; ++i){ int x; cin >> x; for (int j = 4; ~j; --j){ int t = find(pos[x][j] - 1) + 1; ans = max(t, ans); change(pos[x][j], t); } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1073/","text":"1073 \u80fd\u91cf\u9879\u94fe \u9898\u76ee Description \u5728Mars\u661f\u7403\u4e0a\uff0c\u6bcf\u4e2aMars\u4eba\u90fd\u968f\u8eab\u4f69\u5e26\u7740\u4e00\u4e32\u80fd\u91cf\u9879\u94fe\u3002\u5728\u9879\u94fe\u4e0a\u6709N\u9897\u80fd\u91cf\u73e0\u3002\u80fd\u91cf\u73e0\u662f\u4e00\u9897\u6709\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u7684\u73e0\u5b50\uff0c\u8fd9\u4e9b\u6807\u8bb0\u5bf9\u5e94\u7740\u67d0\u4e2a\u6b63\u6574\u6570\u3002\u5e76\u4e14\uff0c\u5bf9\u4e8e\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u524d\u4e00\u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u4e00\u5b9a\u7b49\u4e8e\u540e\u4e00\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002\u56e0\u4e3a\u53ea\u6709\u8fd9\u6837\uff0c\u901a\u8fc7\u5438\u76d8\uff08\u5438\u76d8\u662fMars\u4eba\u5438\u6536\u80fd\u91cf\u7684\u4e00\u79cd\u5668\u5b98\uff09\u7684\u4f5c\u7528\uff0c\u8fd9\u4e24\u9897\u73e0\u5b50\u624d\u80fd\u805a\u5408\u6210\u4e00\u9897\u73e0\u5b50\uff0c\u540c\u65f6\u91ca\u653e\u51fa\u53ef\u4ee5\u88ab\u5438\u76d8\u5438\u6536\u7684\u80fd\u91cf\u3002\u5982\u679c\u524d\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3am\uff0c\u5c3e\u6807\u8bb0\u4e3ar\uff0c\u540e\u4e00\u9897\u80fd\u91cf\u73e0\u7684\u5934\u6807\u8bb0\u4e3ar\uff0c\u5c3e\u6807\u8bb0\u4e3an\uff0c\u5219\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3am\u00d7r\u00d7n\uff08Mars\u5355\u4f4d\uff09\uff0c\u65b0\u4ea7\u751f\u7684\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e3am\uff0c\u5c3e\u6807\u8bb0\u4e3an\u3002 \u9700\u8981\u65f6\uff0cMars\u4eba\u5c31\u7528\u5438\u76d8\u5939\u4f4f\u76f8\u90bb\u7684\u4e24\u9897\u73e0\u5b50\uff0c\u901a\u8fc7\u805a\u5408\u5f97\u5230\u80fd\u91cf\uff0c\u76f4\u5230\u9879\u94fe\u4e0a\u53ea\u5269\u4e0b\u4e00\u9897\u73e0\u5b50\u4e3a\u6b62\u3002\u663e\u7136\uff0c\u4e0d\u540c\u7684\u805a\u5408\u987a\u5e8f\u5f97\u5230\u7684\u603b\u80fd\u91cf\u662f\u4e0d\u540c\u7684\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\uff0c\u4f7f\u4e00\u4e32\u9879\u94fe\u91ca\u653e\u51fa\u7684\u603b\u80fd\u91cf\u6700\u5927\u3002 \u4f8b\u5982\uff1a\u8bbeN=4\uff0c4\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u4e0e\u5c3e\u6807\u8bb0\u4f9d\u6b21\u4e3a(2\uff0c3) (3\uff0c5) (5\uff0c10) (10\uff0c2)\u3002 \u6211\u4eec\u7528\u8bb0\u53f7\u2295\u8868\u793a\u4e24\u9897\u73e0\u5b50\u7684\u805a\u5408\u64cd\u4f5c\uff0c(j\u2295k)\u8868\u793a\u7b2cj\uff0ck\u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u6240\u91ca\u653e\u7684\u80fd\u91cf\u3002 \u5219\u7b2c4\u30011\u4e24\u9897\u73e0\u5b50\u805a\u5408\u540e\u91ca\u653e\u7684\u80fd\u91cf\u4e3a\uff1a (4\u22951)=10\u00d72\u00d73=60\u3002 \u8fd9\u4e00\u4e32\u9879\u94fe\u53ef\u4ee5\u5f97\u5230\u6700\u4f18\u503c\u7684\u4e00\u4e2a\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u4e3a ((4\u22951)\u22952)\u22953\uff09=10\u00d72\u00d73+10\u00d73\u00d75+10\u00d75\u00d710=710 Input Format \u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570N\uff08\\( 4 \\leq N \\leq 100 \\) \uff09\uff0c\u8868\u793a\u9879\u94fe\u4e0a\u73e0\u5b50\u7684\u4e2a\u6570\u3002\u7b2c\u4e8c\u884c\u662fN\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u6240\u6709\u7684\u6570\u5747\u4e0d\u8d85\u8fc71000\u3002 \u7b2ci\u4e2a\u6570\u4e3a\u7b2ci\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\uff08\\( 1 \\leq i \\leq N \\) \uff09\uff0c\u5f53\\( 1 \\leq i\uff1cN \\) \u65f6\uff0c\u7b2ci\u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2ci+1\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002\u7b2cN\u9897\u73e0\u5b50\u7684\u5c3e\u6807\u8bb0\u5e94\u8be5\u7b49\u4e8e\u7b2c1\u9897\u73e0\u5b50\u7684\u5934\u6807\u8bb0\u3002 \u81f3\u4e8e\u73e0\u5b50\u7684\u987a\u5e8f\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u786e\u5b9a\uff1a\u5c06\u9879\u94fe\u653e\u5230\u684c\u9762\u4e0a\uff0c\u4e0d\u8981\u51fa\u73b0\u4ea4\u53c9\uff0c\u968f\u610f\u6307\u5b9a\u7b2c\u4e00\u9897\u73e0\u5b50\uff0c\u7136\u540e\u6309\u987a\u65f6\u9488\u65b9\u5411\u786e\u5b9a\u5176\u4ed6\u73e0\u5b50\u7684\u987a\u5e8f\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u53ea\u6709\u4e00\u884c\uff0c\u662f\u4e00\u4e2a\u6b63\u6574\u6570E\uff08\\( E \\leq 2100000000 \\) \uff09\uff0c\u4e3a\u4e00\u4e2a\u6700\u4f18\u805a\u5408\u987a\u5e8f\u6240\u91ca\u653e\u7684\u603b\u80fd\u91cf\u3002 \u8bf4\u660e NOIP2006\u63d0\u9ad8\u7ec4 Sample Input 4 2 3 5 10 Sample Output 710 FineArtz's solution Star /* \u80fd\u91cf\u9879\u94fe */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int main(){ int n; cin >> n; int a[205], m[205][205]; for (int i = 1; i <= n; ++i){ cin >> a[i]; a[n + i] = a[i]; } int ans = 0; for (int t = 0; t <= n - 1; ++t){ memset(m, 0, sizeof(0)); for (int l = 2; l <= n; ++l){ for (int i = t + 1; i <= t + n - l + 1; ++i){ int j = i + l - 1; m[i][j] = 0; for (int k = i; k <= j - 1; ++k){ int tmp = m[i][k] + m[k + 1][j] + a[i] * a[k + 1] * a[j + 1]; if (tmp > m[i][j]) m[i][j] = tmp; } } } if (m[t + 1][t + n] > ans) ans = m[t + 1][t + n]; } cout << ans << endl; return 0; }","title":"1073"},{"location":"nr/1073/#1073","text":"\u9898\u76ee","title":"1073 \u80fd\u91cf\u9879\u94fe"},{"location":"nr/1073/#fineartzs-solution-star","text":"/* \u80fd\u91cf\u9879\u94fe */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int main(){ int n; cin >> n; int a[205], m[205][205]; for (int i = 1; i <= n; ++i){ cin >> a[i]; a[n + i] = a[i]; } int ans = 0; for (int t = 0; t <= n - 1; ++t){ memset(m, 0, sizeof(0)); for (int l = 2; l <= n; ++l){ for (int i = t + 1; i <= t + n - l + 1; ++i){ int j = i + l - 1; m[i][j] = 0; for (int k = i; k <= j - 1; ++k){ int tmp = m[i][k] + m[k + 1][j] + a[i] * a[k + 1] * a[j + 1]; if (tmp > m[i][j]) m[i][j] = tmp; } } } if (m[t + 1][t + n] > ans) ans = m[t + 1][t + n]; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1074/","text":"1074 LSZ\u7684\u96ea\u5730\u811a\u5370 \u9898\u76ee Description 2006\u5e74\u51ac\u7684\u67d0\u4e00\u5929\u4e0a\u5348\u4e0b\u4e86\u4e00\u573a\u5927\u96ea\uff0cTSYZ\u6559\u5b66\u697c\u4e0b\u7684\u6392\u7403\u573a\u4e0a\u8986\u76d6\u4e86\u4e00\u5c42\u96ea\u3002 \u4e0b\u8bfe\u4e86\uff0c\u5f88\u591a\u4eba\u6765\u5230\u8fd9\u91cc\uff0c\u7559\u4e0b\u4e86\u5f88\u591a\u811a\u5370\u3002 \u6392\u7403\u573a\u53ef\u4ee5\u770b\u4f5c\u662f\u7531N\u00d7M\u7684\u65b9\u683c\u7ec4\u6210\u7684\u4e00\u4e2a\u77e9\u5f62\uff0c \u5176\u4e2d\u67d0\u4e9b\u65b9\u683c\u5df2\u7ecf\u6709\u811a\u5370\u4e86\uff0c\u800c\u5269\u4e0b\u7684\u5219\u662f\u5b8c\u597d\u7684\u3002 lsz\u60f3\u5728\u4e0a\u9762\u5199\u4e0b\u81ea\u5df1\u7684\u540d\u5b57\uff0c\u4e5f\u5c31\u662f\"lsz\"\u4e09\u4e2a\u5b57\u6bcd\uff0c\u4e3a\u4e86\u7f8e\u89c2\uff0c\u8981\u6c42\u8fd9\u4e09\u4e2a\u5b57\u6bcd\u5fc5\u987b\u5360\u636e\u4e00\u4e2a2:1(\u6a2a\u5411\u7684\uff0c\u4e0d\u80fd\u662f1:2)\u7684\u5b8c\u597d\u77e9\u5f62\uff0c \u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u8fd9\u4e2a2:1\u7684\u77e9\u5f62\u5185\u4e0d\u5f97\u6709\u811a\u5370\u3002 \u73b0\u5728\u7ed9\u4f60\u573a\u5730\u7684\u811a\u5370\u60c5\u51b5\uff0clsz\u60f3\u77e5\u9053\u81ea\u5df1\u7684\u540d\u5b57\u6700\u5927\u53ef\u4ee5\u5360\u636e\u591a\u5927\u9762\u79ef\u3002 40%\u7684\u6570\u636e\u6ee1\u8db3N,M<123 100%\u7684\u6570\u636e\u6ee1\u8db30<N,M<1234 Input Format \u7b2c\u4e00\u884c\u4e3a\u7a7a\u683c\u5206\u9694\u7684\u4e24\u4e2a\u6b63\u6574\u6570\uff0cN\u548cM\uff0c\u8868\u793a\u573a\u5730\u7684\u5927\u5c0f\u3002 \u4e0b\u9762\u6709N\u884c\uff0c\u6bcf\u884cM\u4e2a\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5b57\u7b26\u8981\u4e48\u662f-(\u51cf\u53f7)\uff0c\u8868\u793a\u8be5\u65b9\u683c\u5b8c\u597d\uff0c\u8981\u4e48\u662fX(\u5927\u5199\u7684x)\uff0c\u8868\u793a\u8be5\u65b9\u683c\u6709\u811a\u5370\u3002 Output Format \u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\"lsz\"\u6700\u5927\u53ef\u4ee5\u5360\u636e\u591a\u5927\u9762\u79ef\u3002 Hint \u6765\u6e90\uff1a2008\u5e74TSOI\u7b2c\u4e00\u6b21\u6a21\u62df\u8d5b \u6837\u4f8b\u89e3\u91ca \u5360\u636e\u7b2c\u4e8c\u884c\u548c\u7b2c\u4e09\u884c\u7684\u524d4\u4e2a\u65b9\u683c\u3002 Sample Input 4 6 X--XXX ----X- ------ -X--X- Sample Output 8 FineArtz's solution Star /* LSZ\u7684\u96ea\u5730\u811a\u5370 */ #include <iostream> #include <cstring> using namespace std; int a[1235][1235], s[1235][1235], f[1235][1235]; int main(){ int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i][j] = (ch == 'X' ? 1 : 0); s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } memset(f, 0, sizeof(f)); for (int i = 1; i <= n; ++i){ for (int j = 2; j <= m; ++j){ if (a[i][j]) continue; for (int t = f[i - 1][j] + 1; t >= 1; --t){ int x = i - t + 1, y = j - 2 * t + 1; if (x <= 0 || y <= 0) continue; int p = s[i][j] - s[x - 1][j] - s[i][y - 1] + s[x - 1][y - 1]; if (p == 0){ f[i][j] = t; break; } } } } int ans = 0; for (int i = 1; i <= n; ++i) for (int j = 2; j <= m; ++j) if (f[i][j] > ans) ans = f[i][j]; cout << ans * ans * 2 << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; char map[1500][1500]; int m,n,d,ans,h[1500],l[1500],r[1500],curl,curr; int main(){ ios::sync_with_stdio(false); cin>>m>>n; for (int i=0;i<m;++i) for (int j=0;j<n;++j) cin>>map[i][j]; for (int i=0;i<n;++i) r[i]=n-1; for (int i=0;i<m;++i){ for (int j=0;j<n;++j) if (map[i][j]=='-') h[j]++; else h[j]=0; curl=0; for (int j=0;j<n;++j) if (map[i][j]=='-') l[j]=max(curl,l[j]); else {l[j]=0; curl=j+1;} curr=n-1; for (int j=n-1;j>=0;--j) { if (map[i][j] == '-') r[j] = min(curr, r[j]); else {r[j] = n-1; curr=j-1;} d=min((r[j]-l[j]+1)/2,h[j]); if (2*d*d>ans) ans=2*d*d; } } cout<<ans; }","title":"1074"},{"location":"nr/1074/#1074-lsz","text":"\u9898\u76ee","title":"1074 LSZ\u7684\u96ea\u5730\u811a\u5370"},{"location":"nr/1074/#fineartzs-solution-star","text":"/* LSZ\u7684\u96ea\u5730\u811a\u5370 */ #include <iostream> #include <cstring> using namespace std; int a[1235][1235], s[1235][1235], f[1235][1235]; int main(){ int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i][j] = (ch == 'X' ? 1 : 0); s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } memset(f, 0, sizeof(f)); for (int i = 1; i <= n; ++i){ for (int j = 2; j <= m; ++j){ if (a[i][j]) continue; for (int t = f[i - 1][j] + 1; t >= 1; --t){ int x = i - t + 1, y = j - 2 * t + 1; if (x <= 0 || y <= 0) continue; int p = s[i][j] - s[x - 1][j] - s[i][y - 1] + s[x - 1][y - 1]; if (p == 0){ f[i][j] = t; break; } } } } int ans = 0; for (int i = 1; i <= n; ++i) for (int j = 2; j <= m; ++j) if (f[i][j] > ans) ans = f[i][j]; cout << ans * ans * 2 << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1074/#washswangs-solution-star","text":"#include <iostream> using namespace std; char map[1500][1500]; int m,n,d,ans,h[1500],l[1500],r[1500],curl,curr; int main(){ ios::sync_with_stdio(false); cin>>m>>n; for (int i=0;i<m;++i) for (int j=0;j<n;++j) cin>>map[i][j]; for (int i=0;i<n;++i) r[i]=n-1; for (int i=0;i<m;++i){ for (int j=0;j<n;++j) if (map[i][j]=='-') h[j]++; else h[j]=0; curl=0; for (int j=0;j<n;++j) if (map[i][j]=='-') l[j]=max(curl,l[j]); else {l[j]=0; curl=j+1;} curr=n-1; for (int j=n-1;j>=0;--j) { if (map[i][j] == '-') r[j] = min(curr, r[j]); else {r[j] = n-1; curr=j-1;} d=min((r[j]-l[j]+1)/2,h[j]); if (2*d*d>ans) ans=2*d*d; } } cout<<ans; }","title":"WashSwang's solution Star"},{"location":"nr/1075/","text":"1075 \u62ec\u53f7\u5339\u914d 11.07 \u9898\u76ee Description \u62ec\u53f7\u5339\u914d\u53d1\u5e03\u4e8611.07\u7248XD \u7ed9\u5b9a\u4e00\u4e2aN\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u95ee\u6b64\u957f\u5ea6\u7684\u7531\u5de6\u53f3\u5c0f\u62ec\u53f7\u548c\u5c0f\u5199\u5b57\u6bcda\u6784\u6210\u7684\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u6709\u591a\u5c11\u4e2a \u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u5982\u4e0b\u5b9a\u4e49\uff1a 1 \u7a7a\u4e32\u662f\u5408\u6cd5\u7684 2 \u5982\u679cP\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48aP\u4e5f\u662f\u5408\u6cd5\u7684 3 \u5982\u679cP\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48(P)\u4e5f\u662f\u5408\u6cd5\u7684 4 \u5982\u679cP\u548cQ\u90fd\u662f\u5408\u6cd5\u7684\uff0c\u90a3\u4e48PQ\u4e5f\u662f\u5408\u6cd5\u7684 \u8bf7\u8f93\u51fa\u7b54\u6848\u9664\u4ee519301\u7684\u4f59\u6570 Input Format \\( N. (0 < N \\leq 3333) \\) Output Format \u7b54\u6848\u9664\u4ee519301\u7684\u4f59\u6570 Sample Input 1 1 Sample Output 1 1 Sample Input 2 3 Sample Output 2 4 Sample Input 3 4 Sample Output 3 9 VictriD's solution Star #include <iostream> using namespace std; int main() { unsigned short ans[3335] = {1,1,2,4,9,21,51,127,323,835,2188,5798,15511,3233,17129,1756,4223,2057,12644,17742,13185,9674,16560,14982,14280,15456,9603,3212,14660,18549,2234,2214,12614,4301,15589,17775,10176,12374,6701,13423,3195,16695,13109,33,12490,11545,12863,10973,13555,5069,19213,9441,2024,10011,10412,12158,2060,3304,16174,6172,14014,16503,2036,12600,9402,17905,12310,15883,19283,16513,12181,9760,6455,9879,3430,16409,16099,763,4556,18296,3898,4284,1769,6337,4109,3803,6662,4606,10364,12751,1667,8546,1333,13840,13630,12355,6264,9678,622,15638,3108,10635,510,4426,17861,2490,16795,13477,4710,18897,13299,2348,308,2601,6534,17534,15451,18533,7488,6482,2126,15169,9578,6210,1720,17030,10050,12314,15493,16633,18653,11212,6733,7174,18474,9553,5562,18216,11838,3812,7511,14048,11667,6861,11376,18655,7379,18151,14399,9025,10694,16311,2725,2827,8421,15411,7671,9210,12963,1610,5259,18241,5738,5793,17571,17683,5482,11695,1078,3761,1769,13479,11309,8456,5483,1789,3021,7171,8337,15832,750,13400,4249,15322,15232,17442,10787,9787,12058,1795,18965,13935,3481,15704,15552,6720,17176,7103,6276,1473,11822,16984,10192,11785,18019,4045,8788,6231,1137,19130,4844,9114,10061,2864,8377,29,1292,13228,4832,7609,13505,3649,3,10807,7815,1690,8971,18951,13195,2372,11424,19205,3948,4276,17574,6546,514,6119,4275,1558,3560,493,1008,8664,3733,11608,18029,8389,14374,6228,6738,16906,12250,12714,13949,5351,7563,8251,232,18718,16546,3507,2751,6113,11900,8402,589,1127,17714,12366,799,9222,12613,4165,14663,15258,6451,14324,15311,3392,9689,9224,12926,16120,18073,555,2887,16341,6875,1707,807,9441,13304,1250,5349,319,17427,704,11662,16578,3847,17340,16921,3740,6807,18308,4710,15981,8008,12343,5861,16891,140,17014,9973,10133,13026,3101,3689,12050,8158,5505,14297,15784,9089,9057,14685,17616,10471,14730,15401,7858,10985,3867,15200,11465,16459,3665,3218,19287,3785,16780,2084,18639,3987,13146,9917,9185,15141,14416,6685,7203,14929,15764,11450,1415,12781,2353,13115,8955,8229,11290,892,12683,11621,12501,10597,17664,4381,1098,5418,2262,14127,17579,15051,18509,479,13773,9054,16325,3538,1869,15310,5784,16994,951,11045,13672,9194,4275,8660,11122,15120,15254,18968,3574,16653,18281,4945,10859,640,5209,9753,15644,7494,16989,6640,10263,15228,13995,767,6616,12811,1609,6008,4268,14764,5237,17051,17671,11363,16695,7760,17966,203,5694,11096,5064,776,7363,10419,6908,8920,290,9358,5824,3003,17007,16877,8816,18821,8451,2243,12217,16668,18203,9137,14812,1810,4610,15779,17966,8907,13607,13036,5849,9676,8968,4254,14401,19204,12340,14619,11633,2650,18177,4421,3241,7402,16550,1573,18929,18240,2627,14239,17890,953,5148,16362,14865,16871,16216,13203,5347,939,16348,8619,18327,17021,13148,16593,12820,1781,8557,13812,6610,4370,15699,18356,18464,2895,10222,4086,14018,18930,16054,3665,14954,12253,11243,11239,18245,10724,8979,16114,11876,18239,11995,1712,18335,9170,17731,15234,772,8012,3192,8771,14025,14950,16585,18791,11594,1433,8764,18333,10844,1376,12285,19278,3711,3202,15645,13118,382,14872,2327,10728,8090,12069,17875,9774,11017,10271,9749,11143,14550,16509,2076,635,11177,15672,16686,12085,7079,6057,5021,906,7700,17860,7158,19055,7633,7666,15246,3832,10662,11534,6426,10104,17276,13481,17770,9155,6963,2481,1071,11708,7678,15128,4011,15760,5559,8124,783,12631,15218,7287,15142,3997,13929,7466,6445,5650,3394,1852,15321,5461,14797,18296,14022,12770,15417,5666,15150,14430,18462,6458,402,12860,19119,1663,8599,12100,7847,11238,19254,4354,9805,9310,3376,14927,3914,11676,2582,138,2137,14266,15998,6603,15417,3218,15265,3414,5174,4982,13160,5572,16810,10926,3245,14976,2272,11893,16431,7634,5693,12598,14316,16182,1110,16254,13479,10763,12246,5198,12655,13357,3430,1883,11873,16392,16090,13827,11054,8565,8255,4136,4171,18321,3445,9806,14316,7574,14370,5270,9274,17753,19037,13479,5134,9702,14895,14180,2252,15570,17862,15792,9822,14221,13750,18865,8850,17950,2715,17075,583,2774,3630,13248,881,10296,2120,8714,17705,12981,18717,16889,4018,15450,10930,1568,16082,18174,15368,5213,1548,6495,670,17966,8024,4670,19286,13318,382,1532,12239,7900,15980,11159,13366,15825,1358,10536,6952,8773,2394,2479,11689,17305,18581,17341,13545,6051,17733,4305,8395,12153,14861,17218,4133,4153,9459,7291,5958,2108,4573,10376,92,13644,18723,16768,8947,14928,6278,12223,11265,15252,13541,1122,12260,4576,7985,19152,7781,14645,10232,18953,14253,1441,14460,5317,17540,1631,4038,8983,12419,13037,12317,12501,1913,6382,3339,2190,18931,10261,1512,10588,9194,17689,13005,18648,18124,9214,12721,15398,5473,15871,13612,11414,14386,15218,16557,5015,12899,5738,6322,10192,3902,8583,7059,13581,4607,12997,7219,14615,16790,15781,11899,10407,2827,4295,14072,3406,5947,16237,9587,11369,3207,2741,13812,13682,6585,12938,5763,1097,10928,19226,12320,2042,13537,16719,8857,17135,17357,12956,17985,1062,11690,13603,16792,4937,4611,4577,5939,9810,16677,10461,2172,12912,5787,13723,4307,10852,1700,7041,15420,18128,10631,10042,2641,8575,18728,10116,14409,7037,1231,5358,13885,8938,924,4390,14029,6144,6933,8631,10406,522,2728,51,3958,14341,18928,8223,7963,14023,14977,4220,9295,15339,5926,5805,12917,15327,13601,5499,9114,1635,1328,3992,16752,17720,7839,15430,6175,11271,12051,10236,2212,12030,10433,11137,2494,7023,12291,15798,10338,14382,10721,1456,3308,13636,6702,2086,13618,1694,16821,14781,10768,3642,1878,4811,2296,17191,19134,12837,13618,14043,18695,8733,8431,897,88,12826,14889,5779,16184,15559,6942,17009,12998,9667,7561,7881,181,18843,3968,420,3222,4883,18531,18690,13562,13275,4379,18917,10356,15471,1359,1044,12744,3146,10051,4625,4615,6550,18355,4835,3402,5987,13541,16761,18911,6128,2210,17538,12427,14349,7280,18119,13763,16528,4273,18899,12939,5506,7959,578,14439,7310,16754,789,3187,2117,2740,5489,16534,13571,15965,5557,62,1206,9626,6415,17208,9917,18356,6157,12671,15710,13158,1354,1924,18807,177,10884,2783,1504,339,7598,11659,14228,1215,4157,9871,13682,9462,10166,14323,18847,7611,285,1609,6007,2932,12759,6996,238,15341,18216,8358,4938,9952,11823,13753,17519,14574,3695,5414,18273,18850,3076,2428,16522,7266,11393,14706,4447,13452,8220,11067,12631,17724,12612,961,18659,7242,12892,16037,1901,18353,17350,2007,2087,17080,17581,961,18543,18489,19237,14316,14778,11525,11341,5202,6389,16303,12974,1677,4369,11901,11540,16240,3650,18640,7545,15384,14175,11492,10359,6646,2406,7670,12666,7590,5463,18528,7,1531,4858,9522,9429,5258,4546,18296,16721,3667,8255,5479,17209,6281,10887,16858,4715,19139,15490,14578,17434,6607,19290,3035,6194,7879,1704,14217,10109,16868,16018,3302,3298,3198,15375,6818,8652,11347,14429,8028,19003,1968,15885,4365,11240,7622,1820,15671,487,75,8986,16532,6353,1479,1059,10440,2077,15305,394,790,9979,18418,16965,7450,18688,18047,14278,2417,7256,1776,13187,702,16012,1601,8834,1369,6985,16490,8708,488,13518,1954,11782,2948,7466,16880,15740,17023,4234,14310,2561,1769,17362,2494,3608,3631,131,5966,19048,1593,5116,15559,6570,4980,10464,517,17897,14368,7596,18145,14226,5826,2929,5364,7445,72,9248,5217,1,18815,8089,3434,19261,6781,16021,15168,11545,9376,19174,2265,13931,10418,13847,14545,10489,1950,18378,2881,13979,4065,11208,16693,3469,3684,7061,9727,15835,8403,7887,17275,17046,12744,7381,12106,7007,15526,1383,4908,333,4590,1888,7115,8181,6590,8156,15453,2800,12100,9439,18802,1892,16407,4356,10998,14482,19003,14413,5789,11650,11439,11956,4622,11643,4873,5027,1317,2110,11020,16109,11480,17188,4700,7429,239,12532,9181,17467,15595,2880,15079,3193,10481,18058,13532,429,5286,9806,6597,9695,17852,15978,9944,18789,5897,938,12035,7989,7615,3182,15075,7516,10613,4719,610,13952,15403,13749,16361,9993,13308,7688,18218,752,1433,8396,12983,5845,18657,15918,2613,9722,8486,14342,9113,9185,14455,14145,17364,1061,5799,9543,6101,4774,7550,10322,13536,11670,7156,17082,11639,5123,11914,9284,17541,7272,4957,2203,5696,10001,15239,14297,3509,4141,7192,5958,10091,6267,14896,6983,17103,13067,17676,2912,17624,12659,3152,15728,2217,4351,542,16028,6377,7687,5424,16088,15878,5757,4046,9902,15183,5475,888,14691,5433,10253,10648,7487,13050,7566,3370,1108,3003,11181,6480,14697,19265,19051,13964,16908,16027,17126,5390,17059,1292,2294,4206,2020,3726,14669,5625,8954,12141,7103,1552,807,1040,13065,1728,16890,14128,19258,4194,18549,2627,18896,10805,10764,14441,326,5711,15801,8831,8362,13225,4492,4036,6216,5164,17471,15186,4333,4395,6058,5668,7481,18829,19250,11021,18761,17796,2204,7928,11519,14013,4356,3516,3046,2147,8515,2548,11828,12289,16560,7693,18024,8660,910,3354,13799,10150,12340,7603,6130,5604,2590,827,13345,18684,18225,17512,14562,14855,1346,689,17955,15058,11227,17349,6830,14868,16982,5591,8459,17445,12859,3243,12255,10789,201,14662,2805,2232,1192,17579,11989,16983,12346,1809,14729,16280,15977,15996,5053,18256,5478,17400,7962,1169,3675,2926,11758,13598,9646,1821,14785,4753,9524,18245,7978,4331,15259,12714,10454,2804,17099,4478,12558,3940,16681,5626,2748,15188,10476,16380,7106,9341,9987,16017,5416,3280,10485,15930,499,16824,11324,8681,8030,17026,12342,7967,18389,15210,11344,17162,18945,4951,2909,5658,17079,19141,12681,18689,6069,18304,595,15801,14547,412,10649,19067,3395,11596,11615,6893,4462,3776,15539,18578,8374,7707,6403,7498,1845,11092,5566,16843,2477,5344,15582,7634,10956,5677,1679,12039,14447,2991,2544,10595,1715,7671,15219,16551,341,12769,6960,849,8224,17922,17717,1080,16807,2296,9248,1660,10342,14795,16931,19074,8848,3284,8916,9395,18555,9352,7971,12960,7802,7038,1768,4359,9903,5173,17713,1117,7296,18668,16362,17621,5219,9748,3708,4771,7453,1009,2009,6857,1358,8278,17880,18375,3511,10695,2031,7220,3694,5315,8961,10329,9186,18088,6152,18461,9957,16328,10871,8501,14196,3799,3114,8850,14114,11670,7532,5072,15639,16207,4682,18731,6420,9606,12205,6930,8454,5162,5379,6382,5196,7254,2603,12115,1569,15928,18372,6776,14320,1457,8274,16385,10411,8791,3046,3708,6318,2208,10662,16098,8059,1808,8524,11637,19152,3699,2805,4269,8186,8648,9458,1801,7305,1883,19179,8314,14576,219,39,6932,863,19246,11452,14955,10989,7407,13932,4858,7656,13050,13641,179,11135,14874,1635,1818,1414,16538,17326,12235,12884,11807,11880,11659,11462,18157,6794,17055,10129,8397,6516,6101,1842,7129,1964,88,1233,4730,8210,1732,6887,12297,18707,15622,2368,5968,11361,5574,12057,9437,2440,2114,8101,4311,4187,11198,18077,10932,12645,949,1127,16758,7789,10006,17112,10043,12151,3279,14367,6649,950,3964,9265,9154,1923,5838,2653,16662,18261,7750,2968,15823,5337,8349,16886,7358,6950,18505,14758,18972,11660,14667,2515,18027,14963,8188,10704,9812,4422,13682,16218,18194,5748,469,12115,15485,13979,2356,7604,14353,12888,9393,3612,1282,16883,17132,2808,7434,16298,16567,6959,15203,479,9606,580,15404,6440,5825,6505,4347,12823,3157,8569,16248,9288,6988,6129,13193,4373,14314,6111,8240,3579,12236,89,6536,16387,9075,7776,18975,17366,12246,2366,1664,10314,4463,14949,7368,9657,11125,18,9138,19121,16837,12543,3404,16246,5795,1745,11034,4604,3338,5869,5180,4660,9293,8346,18395,14133,18844,16770,1585,7190,12162,1144,11789,9170,17665,4026,10796,609,527,12644,9267,13533,13905,9575,1554,2759,14958,17557,5463,1489,6848,8659,10332,7956,2758,6916,13943,1269,8948,6720,10407,1724,16753,12226,12580,2201,1897,3404,10198,14573,18186,16072,6692,17060,258,6958,15590,17099,15829,17464,4291,13301,17911,16999,2470,11141,13283,9515,4273,13893,13684,404,14614,14204,11853,15023,15309,7209,9155,10321,13494,8452,1249,15026,16943,7183,9163,10430,18590,11298,16808,16160,5686,8472,7637,8775,15835,12371,12425,2036,17157,3932,2299,17348,9838,1769,16495,18872,15953,6356,6798,13825,10788,4602,18171,7985,4320,6700,12144,4819,14174,18946,11683,11753,429,2349,4080,13439,4578,3796,14275,8194,2418,17488,4434,4061,17298,6720,3077,367,6496,4049,16167,18421,16480,11909,2304,11248,7629,15471,282,8028,7860,14858,4849,13473,4969,15309,17756,11275,12604,17143,11059,7836,18916,4567,11802,16753,11179,2918,774,10720,2413,12421,10949,7756,9808,14666,18167,1636,4087,12989,7755,16936,116,15974,6387,4671,15775,7294,14195,12359,6868,13351,1527,16604,11353,16759,8752,1450,1873,16515,13560,9246,2926,18705,18662,5872,1739,8309,11279,8851,18548,11263,13498,7757,11452,12883,8635,6389,18925,12866,14740,15489,17275,7092,16200,2973,18316,3211,11285,17017,15072,13150,18143,15303,18185,10428,9961,8951,15686,17973,3381,9482,255,18346,9743,8020,9410,175,5254,2267,17700,6102,11102,4774,6258,17756,19262,248,10698,18399,16447,17443,2722,14285,565,11621,2420,6869,18763,10532,2480,11445,17649,13512,2293,16182,11335,15415,4164,15810,5780,14937,6657,15871,2607,16375,10910,11506,13429,12575,1331,13365,359,1427,8080,8839,829,7532,19089,9230,6913,13611,4863,19120,13574,5132,7526,12738,8106,7395,8028,12065,15681,7464,18988,15267,6188,16506,11693,17466,18655,1158,7576,10093,10228,19293,6035,630,11560,11629,17487,6977,6848,10256,9799,15273,12779,11548,16827,10803,17900,12795,2183,10630,8760,11204,11507,7137,8215,14373,10736,8731,16356,7792,7346,270,223,2304,16497,12526,1996,1779,11185,11055,4674,13159,10864,16541,8473,6323,14459,4183,17727,1189,14837,6898,11747,14974,3922,15919,10465,6997,16916,10461,743,18279,13331,2006,17630,8645,7107,6929,6090,3892,13728,7750,5440,12502,11041,12232,430,8136,6250,15332,4735,18978,2665,9989,7388,14023,17735,7625,5826,13084,5659,5212,3253,15247,15099,11215,15007,11775,14118,5540,10459,14229,8801,7857,2486,2148,3065,9655,5402,140,1524,11509,8293,2328,1504,13334,10293,8724,15416,8182,9899,16807,5247,13254,12701,11147,7026,6625,3020,14276,18901,7291,15261,7995,2893,18987,5453,13700,14988,15001,5660,15645,14246,97,8663,4786,12329,15830,13845,4332,14523,3194,16243,9022,12523,3874,14647,17558,9111,18523,6044,18413,7307,10559,2645,15763,13635,1360,17399,13250,9390,505,11014,14727,8026,7758,16237,6148,11953,8276,10522,9232,11837,13815,6622,3035,14075,3741,13963,16890,8428,9490,18864,15244,8437,11136,15564,11330,3801,18566,6936,8000,13150,19186,4097,2950,218,3308,18357,18690,6096,16135,4655,7911,1166,6742,6419,17063,2756,12318,5087,5379,17739,6371,14340,1295,14946,14858,9839,14723,1160,6866,10827,14443,7783,13297,15912,10471,16312,11461,11751,10443,17923,2846,18428,6836,14410,12229,6595,4856,12299,1069,260,15299,1566,8402,12300,18986,11839,2018,18348,18949,9737,16219,3332,12532,8708,11940,1358,12813,395,18623,13103,4461,15802,12333,15499,562,6676,1543,1479,1694,5003,14830,15806,11596,2552,9146,13019,16726,637,9123,18560,8637,8875,71,4279,9330,13239,16627,9301,6198,15387,12260,19063,17331,14258,9241,17708,7142,9879,18074,15341,12202,8482,142,15199,14857,15704,4249,11975,15470,14859,9460,5378,187,4574,9960,537,11435,8024,4998,9753,534,10004,613,14462,15852,9373,15764,11509,10581,8126,5562,8715,14604,2322,9088,11742,6,1827,12375,9405,10871,13679,12298,7815,9859,215,18068,18865,1976,14079,7559,7581,3558,2176,19132,12195,15953,18739,15233,12285,9791,277,8618,9800,1065,7897,12802,17623,16801,11777,18284,15696,14562,7531,15791,14648,1597,12334,5088,8744,10847,9111,10455,13289,3293,11719,10849,18459,13347,9443,2467,11632,8998,14733,2079,3104,5453,15926,6878,15855,2836,14487,15024,9458,2264,3672,10806,16684,16119,16615,9820,17037,5969,1257,16667,13633,17754,431,8467,9148,17607,14000,11009,14661,759,1935,11844,8301,5374,13195,3885,6956,1589,9881,19207,1008,3711,5510,4621,16137,331,1135,5906,3748,10631,11126,3959,10596,15636,12449,18465,2544,4114,2966,14662,8942,484,19071,13640,7275,4280,16762,9731,4696,3883,1326,12726,4320,2721,17401,8894,5270,4207,12680,1863,10327,1754,7420,4421,8582,8721,14410,4452,11557,6382,1285,7704,6381,12377,6087,4136,17694,2357,3235,8090,13136,11804,4434,13002,1821,692,6861,1823,8396,17421,12714,16648,14810,1184,17658,5038,16098,6682,1609,6634,8988,5829,9755,13935,15730,17758,10114,11125,16618,11095,12385,15004,8689,6731,7161,3100,17610,11867,18078,12355,13172,16491,654,19234,4902,17728,12188,14753,3536,10823,14327,11385,16373,4632,12166,5983,14355,16745,10678,5682,3607,17807,6090,12854,18918,12583,14103,15603,8204,9137,8302,10258,1682,6692,15434,10379,300,17663,16565,12329,2686,4777,13976,17944,1390,7036,3200,5984,6918,1879,38,1537,713,15682,17592,18907,1102,15385,2574,1687,6697,7427,9235,8038,3083,13592,2115,6221,19270,973,13660,10703,12915,10340,4639,10835,8440,13213,12808,1508,14275,13971,14813,3592,11512,14634,11923,17310,15479,19185,2299,2024,14379,10401,2272,1376,9671,2564,17812,17852,17835,8713,12187,8383,2217,13088,7638,3519,14427,5948,17190,2522,17384,1089,7459,16287,16427,17295,8693,740,13597,12974,11859,3576,6741,14717,15422,5826,12791,18981,4130,3957,9178,6707,11836,7195,17256,1585,4543,8887,15777,8075,9856,4740,14164,8891,14047,3802,4584,1064,17010,5765,18271,13182,1914,2997,15065,957,18429,1747,2225,16412,11053,14410,13804,8309,2451,15374,16169,15721,15983,6282,5640,346,3226,15446,15142,11621,13697,8319,17155,11202,12754,12845,4097,19223,11659,9407,14364,13321,12080,14068,6601,17130,17098,9886,14471,17162,8880,5892,1555,4938,15031,917,730,5616,9020,13706,5211,574,18827,3042,7893,12933,6285,18313,14596,18768,1625,16790,6475,12769,5042,17501,5412,5173,1414,16280,117,5480,16342,2925,17751,15525,17912,16484,18060,352,6263,9621,1768,10278,13171,4826,8724,10246,17886,4610,3592,18295,13877,14963,19017,8530,11035,13242,3772,4192,8169,18747,7239,9232,2783,12723,12714,10111,3071,13143,14549,1998,4260,11141,14366,5831,17266,11667,13619,9744,691,15718,14530,12188,2044,12458,6650,16412,4256,126,5623,7211,15912,13609,14751,4601,8743,13942,5997,13143,4254,9900,16688,6476,4545,7597,1714,14472,7919,9327,6582,2443,17931,6323,5074,39,668,16687,15072,11877,14984,10114,4705,11029,14263,17165,8290,8262,13040,7151,8626,9889,15345,10394,16871,6121,1305,12558,14190,6407,9001,8130,14469,5819,4688,5088,13022,7088,13836,4652,1035,11627,10662,9031,18946,298,2055,18589,2479,4031,590,7543,2896,4331,14112,7472,3677,11759,10349,15855,11178,6143,6444,16252,1661,2695,9522,662,10191,13047,5723,8848,14823,12587,3938,6119,373,14493,14224,3414,6112,10906,10029,14319,1263,19049,1652,5544,13187,3598,7830,19144,13501,630,3040,4110,7366,12248,5667,18341,1581,2906,16372,16150,2549,19068,10526,17856,12266,4769,12065,18616,492,1638,15983,6860,8737,4816,1789,17440,4891,10343,4511,7168,2476,5605,10042,15782,11085,13444,17995,19193,14766,5051,4605,15591,8641,70,10444,15552,17894,4304,8550,9955,7697,5069,17640,3781,7471,8729,17532,9122,4446,10005,10810,16275,11487,13888,16888,12144,19109,15319,269,19146,15174,9750,3534,16175,5840,4915,3692,6063,5902,11070,1027,18381,70}; int n; cin >> n; if(ans[n]!=0){ cout << ans[n]; return 0; } long long tmp; for (int i = 2; i <= n; i++) { tmp = ans[i - 1]; /*add a at back*/ for (int j = 0; j < i; j++) { /*add ) at back. the ) must not belong to any original pairs.*/ /*a ( should be inserted between legals*/ tmp += ans[j] * ans[i - j - 2]; tmp %= 19301; } ans[i] = tmp; } cout << ans[n]; return 0; } FineArtz's solution Star /* \u62ec\u53f7\u5339\u914d 11.07 */ #include <iostream> using namespace std; const int MOD = 19301; int main(){ long long f[3335] = {0}; int n; cin >> n; f[0] = 1; f[1] = 1; for (int i = 2; i <= n; ++i){ f[i] += f[i - 1]; for (int j = 1; j <= i - 1; ++j){ f[i] += f[j - 1] * f[i - j - 1]; f[i] %= MOD; } f[i] %= MOD; } cout << f[n] << endl; return 0; }","title":"1075"},{"location":"nr/1075/#1075-1107","text":"\u9898\u76ee","title":"1075 \u62ec\u53f7\u5339\u914d 11.07"},{"location":"nr/1075/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { unsigned short ans[3335] = {1,1,2,4,9,21,51,127,323,835,2188,5798,15511,3233,17129,1756,4223,2057,12644,17742,13185,9674,16560,14982,14280,15456,9603,3212,14660,18549,2234,2214,12614,4301,15589,17775,10176,12374,6701,13423,3195,16695,13109,33,12490,11545,12863,10973,13555,5069,19213,9441,2024,10011,10412,12158,2060,3304,16174,6172,14014,16503,2036,12600,9402,17905,12310,15883,19283,16513,12181,9760,6455,9879,3430,16409,16099,763,4556,18296,3898,4284,1769,6337,4109,3803,6662,4606,10364,12751,1667,8546,1333,13840,13630,12355,6264,9678,622,15638,3108,10635,510,4426,17861,2490,16795,13477,4710,18897,13299,2348,308,2601,6534,17534,15451,18533,7488,6482,2126,15169,9578,6210,1720,17030,10050,12314,15493,16633,18653,11212,6733,7174,18474,9553,5562,18216,11838,3812,7511,14048,11667,6861,11376,18655,7379,18151,14399,9025,10694,16311,2725,2827,8421,15411,7671,9210,12963,1610,5259,18241,5738,5793,17571,17683,5482,11695,1078,3761,1769,13479,11309,8456,5483,1789,3021,7171,8337,15832,750,13400,4249,15322,15232,17442,10787,9787,12058,1795,18965,13935,3481,15704,15552,6720,17176,7103,6276,1473,11822,16984,10192,11785,18019,4045,8788,6231,1137,19130,4844,9114,10061,2864,8377,29,1292,13228,4832,7609,13505,3649,3,10807,7815,1690,8971,18951,13195,2372,11424,19205,3948,4276,17574,6546,514,6119,4275,1558,3560,493,1008,8664,3733,11608,18029,8389,14374,6228,6738,16906,12250,12714,13949,5351,7563,8251,232,18718,16546,3507,2751,6113,11900,8402,589,1127,17714,12366,799,9222,12613,4165,14663,15258,6451,14324,15311,3392,9689,9224,12926,16120,18073,555,2887,16341,6875,1707,807,9441,13304,1250,5349,319,17427,704,11662,16578,3847,17340,16921,3740,6807,18308,4710,15981,8008,12343,5861,16891,140,17014,9973,10133,13026,3101,3689,12050,8158,5505,14297,15784,9089,9057,14685,17616,10471,14730,15401,7858,10985,3867,15200,11465,16459,3665,3218,19287,3785,16780,2084,18639,3987,13146,9917,9185,15141,14416,6685,7203,14929,15764,11450,1415,12781,2353,13115,8955,8229,11290,892,12683,11621,12501,10597,17664,4381,1098,5418,2262,14127,17579,15051,18509,479,13773,9054,16325,3538,1869,15310,5784,16994,951,11045,13672,9194,4275,8660,11122,15120,15254,18968,3574,16653,18281,4945,10859,640,5209,9753,15644,7494,16989,6640,10263,15228,13995,767,6616,12811,1609,6008,4268,14764,5237,17051,17671,11363,16695,7760,17966,203,5694,11096,5064,776,7363,10419,6908,8920,290,9358,5824,3003,17007,16877,8816,18821,8451,2243,12217,16668,18203,9137,14812,1810,4610,15779,17966,8907,13607,13036,5849,9676,8968,4254,14401,19204,12340,14619,11633,2650,18177,4421,3241,7402,16550,1573,18929,18240,2627,14239,17890,953,5148,16362,14865,16871,16216,13203,5347,939,16348,8619,18327,17021,13148,16593,12820,1781,8557,13812,6610,4370,15699,18356,18464,2895,10222,4086,14018,18930,16054,3665,14954,12253,11243,11239,18245,10724,8979,16114,11876,18239,11995,1712,18335,9170,17731,15234,772,8012,3192,8771,14025,14950,16585,18791,11594,1433,8764,18333,10844,1376,12285,19278,3711,3202,15645,13118,382,14872,2327,10728,8090,12069,17875,9774,11017,10271,9749,11143,14550,16509,2076,635,11177,15672,16686,12085,7079,6057,5021,906,7700,17860,7158,19055,7633,7666,15246,3832,10662,11534,6426,10104,17276,13481,17770,9155,6963,2481,1071,11708,7678,15128,4011,15760,5559,8124,783,12631,15218,7287,15142,3997,13929,7466,6445,5650,3394,1852,15321,5461,14797,18296,14022,12770,15417,5666,15150,14430,18462,6458,402,12860,19119,1663,8599,12100,7847,11238,19254,4354,9805,9310,3376,14927,3914,11676,2582,138,2137,14266,15998,6603,15417,3218,15265,3414,5174,4982,13160,5572,16810,10926,3245,14976,2272,11893,16431,7634,5693,12598,14316,16182,1110,16254,13479,10763,12246,5198,12655,13357,3430,1883,11873,16392,16090,13827,11054,8565,8255,4136,4171,18321,3445,9806,14316,7574,14370,5270,9274,17753,19037,13479,5134,9702,14895,14180,2252,15570,17862,15792,9822,14221,13750,18865,8850,17950,2715,17075,583,2774,3630,13248,881,10296,2120,8714,17705,12981,18717,16889,4018,15450,10930,1568,16082,18174,15368,5213,1548,6495,670,17966,8024,4670,19286,13318,382,1532,12239,7900,15980,11159,13366,15825,1358,10536,6952,8773,2394,2479,11689,17305,18581,17341,13545,6051,17733,4305,8395,12153,14861,17218,4133,4153,9459,7291,5958,2108,4573,10376,92,13644,18723,16768,8947,14928,6278,12223,11265,15252,13541,1122,12260,4576,7985,19152,7781,14645,10232,18953,14253,1441,14460,5317,17540,1631,4038,8983,12419,13037,12317,12501,1913,6382,3339,2190,18931,10261,1512,10588,9194,17689,13005,18648,18124,9214,12721,15398,5473,15871,13612,11414,14386,15218,16557,5015,12899,5738,6322,10192,3902,8583,7059,13581,4607,12997,7219,14615,16790,15781,11899,10407,2827,4295,14072,3406,5947,16237,9587,11369,3207,2741,13812,13682,6585,12938,5763,1097,10928,19226,12320,2042,13537,16719,8857,17135,17357,12956,17985,1062,11690,13603,16792,4937,4611,4577,5939,9810,16677,10461,2172,12912,5787,13723,4307,10852,1700,7041,15420,18128,10631,10042,2641,8575,18728,10116,14409,7037,1231,5358,13885,8938,924,4390,14029,6144,6933,8631,10406,522,2728,51,3958,14341,18928,8223,7963,14023,14977,4220,9295,15339,5926,5805,12917,15327,13601,5499,9114,1635,1328,3992,16752,17720,7839,15430,6175,11271,12051,10236,2212,12030,10433,11137,2494,7023,12291,15798,10338,14382,10721,1456,3308,13636,6702,2086,13618,1694,16821,14781,10768,3642,1878,4811,2296,17191,19134,12837,13618,14043,18695,8733,8431,897,88,12826,14889,5779,16184,15559,6942,17009,12998,9667,7561,7881,181,18843,3968,420,3222,4883,18531,18690,13562,13275,4379,18917,10356,15471,1359,1044,12744,3146,10051,4625,4615,6550,18355,4835,3402,5987,13541,16761,18911,6128,2210,17538,12427,14349,7280,18119,13763,16528,4273,18899,12939,5506,7959,578,14439,7310,16754,789,3187,2117,2740,5489,16534,13571,15965,5557,62,1206,9626,6415,17208,9917,18356,6157,12671,15710,13158,1354,1924,18807,177,10884,2783,1504,339,7598,11659,14228,1215,4157,9871,13682,9462,10166,14323,18847,7611,285,1609,6007,2932,12759,6996,238,15341,18216,8358,4938,9952,11823,13753,17519,14574,3695,5414,18273,18850,3076,2428,16522,7266,11393,14706,4447,13452,8220,11067,12631,17724,12612,961,18659,7242,12892,16037,1901,18353,17350,2007,2087,17080,17581,961,18543,18489,19237,14316,14778,11525,11341,5202,6389,16303,12974,1677,4369,11901,11540,16240,3650,18640,7545,15384,14175,11492,10359,6646,2406,7670,12666,7590,5463,18528,7,1531,4858,9522,9429,5258,4546,18296,16721,3667,8255,5479,17209,6281,10887,16858,4715,19139,15490,14578,17434,6607,19290,3035,6194,7879,1704,14217,10109,16868,16018,3302,3298,3198,15375,6818,8652,11347,14429,8028,19003,1968,15885,4365,11240,7622,1820,15671,487,75,8986,16532,6353,1479,1059,10440,2077,15305,394,790,9979,18418,16965,7450,18688,18047,14278,2417,7256,1776,13187,702,16012,1601,8834,1369,6985,16490,8708,488,13518,1954,11782,2948,7466,16880,15740,17023,4234,14310,2561,1769,17362,2494,3608,3631,131,5966,19048,1593,5116,15559,6570,4980,10464,517,17897,14368,7596,18145,14226,5826,2929,5364,7445,72,9248,5217,1,18815,8089,3434,19261,6781,16021,15168,11545,9376,19174,2265,13931,10418,13847,14545,10489,1950,18378,2881,13979,4065,11208,16693,3469,3684,7061,9727,15835,8403,7887,17275,17046,12744,7381,12106,7007,15526,1383,4908,333,4590,1888,7115,8181,6590,8156,15453,2800,12100,9439,18802,1892,16407,4356,10998,14482,19003,14413,5789,11650,11439,11956,4622,11643,4873,5027,1317,2110,11020,16109,11480,17188,4700,7429,239,12532,9181,17467,15595,2880,15079,3193,10481,18058,13532,429,5286,9806,6597,9695,17852,15978,9944,18789,5897,938,12035,7989,7615,3182,15075,7516,10613,4719,610,13952,15403,13749,16361,9993,13308,7688,18218,752,1433,8396,12983,5845,18657,15918,2613,9722,8486,14342,9113,9185,14455,14145,17364,1061,5799,9543,6101,4774,7550,10322,13536,11670,7156,17082,11639,5123,11914,9284,17541,7272,4957,2203,5696,10001,15239,14297,3509,4141,7192,5958,10091,6267,14896,6983,17103,13067,17676,2912,17624,12659,3152,15728,2217,4351,542,16028,6377,7687,5424,16088,15878,5757,4046,9902,15183,5475,888,14691,5433,10253,10648,7487,13050,7566,3370,1108,3003,11181,6480,14697,19265,19051,13964,16908,16027,17126,5390,17059,1292,2294,4206,2020,3726,14669,5625,8954,12141,7103,1552,807,1040,13065,1728,16890,14128,19258,4194,18549,2627,18896,10805,10764,14441,326,5711,15801,8831,8362,13225,4492,4036,6216,5164,17471,15186,4333,4395,6058,5668,7481,18829,19250,11021,18761,17796,2204,7928,11519,14013,4356,3516,3046,2147,8515,2548,11828,12289,16560,7693,18024,8660,910,3354,13799,10150,12340,7603,6130,5604,2590,827,13345,18684,18225,17512,14562,14855,1346,689,17955,15058,11227,17349,6830,14868,16982,5591,8459,17445,12859,3243,12255,10789,201,14662,2805,2232,1192,17579,11989,16983,12346,1809,14729,16280,15977,15996,5053,18256,5478,17400,7962,1169,3675,2926,11758,13598,9646,1821,14785,4753,9524,18245,7978,4331,15259,12714,10454,2804,17099,4478,12558,3940,16681,5626,2748,15188,10476,16380,7106,9341,9987,16017,5416,3280,10485,15930,499,16824,11324,8681,8030,17026,12342,7967,18389,15210,11344,17162,18945,4951,2909,5658,17079,19141,12681,18689,6069,18304,595,15801,14547,412,10649,19067,3395,11596,11615,6893,4462,3776,15539,18578,8374,7707,6403,7498,1845,11092,5566,16843,2477,5344,15582,7634,10956,5677,1679,12039,14447,2991,2544,10595,1715,7671,15219,16551,341,12769,6960,849,8224,17922,17717,1080,16807,2296,9248,1660,10342,14795,16931,19074,8848,3284,8916,9395,18555,9352,7971,12960,7802,7038,1768,4359,9903,5173,17713,1117,7296,18668,16362,17621,5219,9748,3708,4771,7453,1009,2009,6857,1358,8278,17880,18375,3511,10695,2031,7220,3694,5315,8961,10329,9186,18088,6152,18461,9957,16328,10871,8501,14196,3799,3114,8850,14114,11670,7532,5072,15639,16207,4682,18731,6420,9606,12205,6930,8454,5162,5379,6382,5196,7254,2603,12115,1569,15928,18372,6776,14320,1457,8274,16385,10411,8791,3046,3708,6318,2208,10662,16098,8059,1808,8524,11637,19152,3699,2805,4269,8186,8648,9458,1801,7305,1883,19179,8314,14576,219,39,6932,863,19246,11452,14955,10989,7407,13932,4858,7656,13050,13641,179,11135,14874,1635,1818,1414,16538,17326,12235,12884,11807,11880,11659,11462,18157,6794,17055,10129,8397,6516,6101,1842,7129,1964,88,1233,4730,8210,1732,6887,12297,18707,15622,2368,5968,11361,5574,12057,9437,2440,2114,8101,4311,4187,11198,18077,10932,12645,949,1127,16758,7789,10006,17112,10043,12151,3279,14367,6649,950,3964,9265,9154,1923,5838,2653,16662,18261,7750,2968,15823,5337,8349,16886,7358,6950,18505,14758,18972,11660,14667,2515,18027,14963,8188,10704,9812,4422,13682,16218,18194,5748,469,12115,15485,13979,2356,7604,14353,12888,9393,3612,1282,16883,17132,2808,7434,16298,16567,6959,15203,479,9606,580,15404,6440,5825,6505,4347,12823,3157,8569,16248,9288,6988,6129,13193,4373,14314,6111,8240,3579,12236,89,6536,16387,9075,7776,18975,17366,12246,2366,1664,10314,4463,14949,7368,9657,11125,18,9138,19121,16837,12543,3404,16246,5795,1745,11034,4604,3338,5869,5180,4660,9293,8346,18395,14133,18844,16770,1585,7190,12162,1144,11789,9170,17665,4026,10796,609,527,12644,9267,13533,13905,9575,1554,2759,14958,17557,5463,1489,6848,8659,10332,7956,2758,6916,13943,1269,8948,6720,10407,1724,16753,12226,12580,2201,1897,3404,10198,14573,18186,16072,6692,17060,258,6958,15590,17099,15829,17464,4291,13301,17911,16999,2470,11141,13283,9515,4273,13893,13684,404,14614,14204,11853,15023,15309,7209,9155,10321,13494,8452,1249,15026,16943,7183,9163,10430,18590,11298,16808,16160,5686,8472,7637,8775,15835,12371,12425,2036,17157,3932,2299,17348,9838,1769,16495,18872,15953,6356,6798,13825,10788,4602,18171,7985,4320,6700,12144,4819,14174,18946,11683,11753,429,2349,4080,13439,4578,3796,14275,8194,2418,17488,4434,4061,17298,6720,3077,367,6496,4049,16167,18421,16480,11909,2304,11248,7629,15471,282,8028,7860,14858,4849,13473,4969,15309,17756,11275,12604,17143,11059,7836,18916,4567,11802,16753,11179,2918,774,10720,2413,12421,10949,7756,9808,14666,18167,1636,4087,12989,7755,16936,116,15974,6387,4671,15775,7294,14195,12359,6868,13351,1527,16604,11353,16759,8752,1450,1873,16515,13560,9246,2926,18705,18662,5872,1739,8309,11279,8851,18548,11263,13498,7757,11452,12883,8635,6389,18925,12866,14740,15489,17275,7092,16200,2973,18316,3211,11285,17017,15072,13150,18143,15303,18185,10428,9961,8951,15686,17973,3381,9482,255,18346,9743,8020,9410,175,5254,2267,17700,6102,11102,4774,6258,17756,19262,248,10698,18399,16447,17443,2722,14285,565,11621,2420,6869,18763,10532,2480,11445,17649,13512,2293,16182,11335,15415,4164,15810,5780,14937,6657,15871,2607,16375,10910,11506,13429,12575,1331,13365,359,1427,8080,8839,829,7532,19089,9230,6913,13611,4863,19120,13574,5132,7526,12738,8106,7395,8028,12065,15681,7464,18988,15267,6188,16506,11693,17466,18655,1158,7576,10093,10228,19293,6035,630,11560,11629,17487,6977,6848,10256,9799,15273,12779,11548,16827,10803,17900,12795,2183,10630,8760,11204,11507,7137,8215,14373,10736,8731,16356,7792,7346,270,223,2304,16497,12526,1996,1779,11185,11055,4674,13159,10864,16541,8473,6323,14459,4183,17727,1189,14837,6898,11747,14974,3922,15919,10465,6997,16916,10461,743,18279,13331,2006,17630,8645,7107,6929,6090,3892,13728,7750,5440,12502,11041,12232,430,8136,6250,15332,4735,18978,2665,9989,7388,14023,17735,7625,5826,13084,5659,5212,3253,15247,15099,11215,15007,11775,14118,5540,10459,14229,8801,7857,2486,2148,3065,9655,5402,140,1524,11509,8293,2328,1504,13334,10293,8724,15416,8182,9899,16807,5247,13254,12701,11147,7026,6625,3020,14276,18901,7291,15261,7995,2893,18987,5453,13700,14988,15001,5660,15645,14246,97,8663,4786,12329,15830,13845,4332,14523,3194,16243,9022,12523,3874,14647,17558,9111,18523,6044,18413,7307,10559,2645,15763,13635,1360,17399,13250,9390,505,11014,14727,8026,7758,16237,6148,11953,8276,10522,9232,11837,13815,6622,3035,14075,3741,13963,16890,8428,9490,18864,15244,8437,11136,15564,11330,3801,18566,6936,8000,13150,19186,4097,2950,218,3308,18357,18690,6096,16135,4655,7911,1166,6742,6419,17063,2756,12318,5087,5379,17739,6371,14340,1295,14946,14858,9839,14723,1160,6866,10827,14443,7783,13297,15912,10471,16312,11461,11751,10443,17923,2846,18428,6836,14410,12229,6595,4856,12299,1069,260,15299,1566,8402,12300,18986,11839,2018,18348,18949,9737,16219,3332,12532,8708,11940,1358,12813,395,18623,13103,4461,15802,12333,15499,562,6676,1543,1479,1694,5003,14830,15806,11596,2552,9146,13019,16726,637,9123,18560,8637,8875,71,4279,9330,13239,16627,9301,6198,15387,12260,19063,17331,14258,9241,17708,7142,9879,18074,15341,12202,8482,142,15199,14857,15704,4249,11975,15470,14859,9460,5378,187,4574,9960,537,11435,8024,4998,9753,534,10004,613,14462,15852,9373,15764,11509,10581,8126,5562,8715,14604,2322,9088,11742,6,1827,12375,9405,10871,13679,12298,7815,9859,215,18068,18865,1976,14079,7559,7581,3558,2176,19132,12195,15953,18739,15233,12285,9791,277,8618,9800,1065,7897,12802,17623,16801,11777,18284,15696,14562,7531,15791,14648,1597,12334,5088,8744,10847,9111,10455,13289,3293,11719,10849,18459,13347,9443,2467,11632,8998,14733,2079,3104,5453,15926,6878,15855,2836,14487,15024,9458,2264,3672,10806,16684,16119,16615,9820,17037,5969,1257,16667,13633,17754,431,8467,9148,17607,14000,11009,14661,759,1935,11844,8301,5374,13195,3885,6956,1589,9881,19207,1008,3711,5510,4621,16137,331,1135,5906,3748,10631,11126,3959,10596,15636,12449,18465,2544,4114,2966,14662,8942,484,19071,13640,7275,4280,16762,9731,4696,3883,1326,12726,4320,2721,17401,8894,5270,4207,12680,1863,10327,1754,7420,4421,8582,8721,14410,4452,11557,6382,1285,7704,6381,12377,6087,4136,17694,2357,3235,8090,13136,11804,4434,13002,1821,692,6861,1823,8396,17421,12714,16648,14810,1184,17658,5038,16098,6682,1609,6634,8988,5829,9755,13935,15730,17758,10114,11125,16618,11095,12385,15004,8689,6731,7161,3100,17610,11867,18078,12355,13172,16491,654,19234,4902,17728,12188,14753,3536,10823,14327,11385,16373,4632,12166,5983,14355,16745,10678,5682,3607,17807,6090,12854,18918,12583,14103,15603,8204,9137,8302,10258,1682,6692,15434,10379,300,17663,16565,12329,2686,4777,13976,17944,1390,7036,3200,5984,6918,1879,38,1537,713,15682,17592,18907,1102,15385,2574,1687,6697,7427,9235,8038,3083,13592,2115,6221,19270,973,13660,10703,12915,10340,4639,10835,8440,13213,12808,1508,14275,13971,14813,3592,11512,14634,11923,17310,15479,19185,2299,2024,14379,10401,2272,1376,9671,2564,17812,17852,17835,8713,12187,8383,2217,13088,7638,3519,14427,5948,17190,2522,17384,1089,7459,16287,16427,17295,8693,740,13597,12974,11859,3576,6741,14717,15422,5826,12791,18981,4130,3957,9178,6707,11836,7195,17256,1585,4543,8887,15777,8075,9856,4740,14164,8891,14047,3802,4584,1064,17010,5765,18271,13182,1914,2997,15065,957,18429,1747,2225,16412,11053,14410,13804,8309,2451,15374,16169,15721,15983,6282,5640,346,3226,15446,15142,11621,13697,8319,17155,11202,12754,12845,4097,19223,11659,9407,14364,13321,12080,14068,6601,17130,17098,9886,14471,17162,8880,5892,1555,4938,15031,917,730,5616,9020,13706,5211,574,18827,3042,7893,12933,6285,18313,14596,18768,1625,16790,6475,12769,5042,17501,5412,5173,1414,16280,117,5480,16342,2925,17751,15525,17912,16484,18060,352,6263,9621,1768,10278,13171,4826,8724,10246,17886,4610,3592,18295,13877,14963,19017,8530,11035,13242,3772,4192,8169,18747,7239,9232,2783,12723,12714,10111,3071,13143,14549,1998,4260,11141,14366,5831,17266,11667,13619,9744,691,15718,14530,12188,2044,12458,6650,16412,4256,126,5623,7211,15912,13609,14751,4601,8743,13942,5997,13143,4254,9900,16688,6476,4545,7597,1714,14472,7919,9327,6582,2443,17931,6323,5074,39,668,16687,15072,11877,14984,10114,4705,11029,14263,17165,8290,8262,13040,7151,8626,9889,15345,10394,16871,6121,1305,12558,14190,6407,9001,8130,14469,5819,4688,5088,13022,7088,13836,4652,1035,11627,10662,9031,18946,298,2055,18589,2479,4031,590,7543,2896,4331,14112,7472,3677,11759,10349,15855,11178,6143,6444,16252,1661,2695,9522,662,10191,13047,5723,8848,14823,12587,3938,6119,373,14493,14224,3414,6112,10906,10029,14319,1263,19049,1652,5544,13187,3598,7830,19144,13501,630,3040,4110,7366,12248,5667,18341,1581,2906,16372,16150,2549,19068,10526,17856,12266,4769,12065,18616,492,1638,15983,6860,8737,4816,1789,17440,4891,10343,4511,7168,2476,5605,10042,15782,11085,13444,17995,19193,14766,5051,4605,15591,8641,70,10444,15552,17894,4304,8550,9955,7697,5069,17640,3781,7471,8729,17532,9122,4446,10005,10810,16275,11487,13888,16888,12144,19109,15319,269,19146,15174,9750,3534,16175,5840,4915,3692,6063,5902,11070,1027,18381,70}; int n; cin >> n; if(ans[n]!=0){ cout << ans[n]; return 0; } long long tmp; for (int i = 2; i <= n; i++) { tmp = ans[i - 1]; /*add a at back*/ for (int j = 0; j < i; j++) { /*add ) at back. the ) must not belong to any original pairs.*/ /*a ( should be inserted between legals*/ tmp += ans[j] * ans[i - j - 2]; tmp %= 19301; } ans[i] = tmp; } cout << ans[n]; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1075/#fineartzs-solution-star","text":"/* \u62ec\u53f7\u5339\u914d 11.07 */ #include <iostream> using namespace std; const int MOD = 19301; int main(){ long long f[3335] = {0}; int n; cin >> n; f[0] = 1; f[1] = 1; for (int i = 2; i <= n; ++i){ f[i] += f[i - 1]; for (int j = 1; j <= i - 1; ++j){ f[i] += f[j - 1] * f[i - j - 1]; f[i] %= MOD; } f[i] %= MOD; } cout << f[n] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1076/","text":"1076 \u5c0fF\u7684\u82f9\u679c\u6811 \u9898\u76ee Description \u5c0fF\u6709\u4e00\u9897\u82f9\u679c\u6811\uff0c\u5982\u679c\u6811\u679d\u6709\u5206\u53c9\uff0c\u4e00\u5b9a\u662f\u52062\u53c9\uff08\u5c31\u662f\u8bf4\u6ca1\u6709\u53ea\u67091\u4e2a\u513f\u5b50\u7684\u7ed3\u70b9\uff09 \u8fd9\u68f5\u6811\u5171\u6709N\u4e2a\u7ed3\u70b9\uff08\u53f6\u5b50\u70b9\u6216\u8005\u6811\u679d\u5206\u53c9\u70b9\uff09\uff0c\u7f16\u53f7\u4e3a1-N,\u6811\u6839\u7f16\u53f7\u4e00\u5b9a\u662f1\u3002 \u6211\u4eec\u7528\u4e00\u6839\u6811\u679d\u4e24\u7aef\u8fde\u63a5\u7684\u7ed3\u70b9\u7684\u7f16\u53f7\u6765\u63cf\u8ff0\u4e00\u6839\u6811\u679d\u7684\u4f4d\u7f6e\u3002\u4e0b\u9762\u662f\u4e00\u9897\u67094\u4e2a\u6811\u679d\u7684\u6811 2 5 \\ / 3 4 \\ / 1 \u73b0\u5728\u8fd9\u9897\u6811\u679d\u6761\u592a\u591a\u4e86\uff0c\u9700\u8981\u526a\u679d\u3002\u4f46\u662f\u4e00\u4e9b\u6811\u679d\u4e0a\u957f\u6709\u82f9\u679c\u3002 \u7ed9\u5b9a\u9700\u8981\u4fdd\u7559\u7684\u6811\u679d\u6570\u91cf\uff0c\u6c42\u51fa\u6700\u591a\u80fd\u7559\u4f4f\u591a\u5c11\u82f9\u679c\u3002 Input Format \u7b2c1\u884c2\u4e2a\u6570\uff0cN\u548cQ(\\(1 \\leq Q \\leq N\\),1 < N < 101)\u3002 N\u8868\u793a\u6811\u7684\u7ed3\u70b9\u6570\uff0cQ\u8868\u793a\u8981\u4fdd\u7559\u7684\u6811\u679d\u6570\u91cf\u3002\u63a5\u4e0b\u6765N-1\u884c\u63cf\u8ff0\u6811\u679d\u7684\u4fe1\u606f\u3002 \u6bcf\u884c3\u4e2a\u6574\u6570\uff0c\u524d\u4e24\u4e2a\u662f\u5b83\u8fde\u63a5\u7684\u7ed3\u70b9\u7684\u7f16\u53f7\u3002\u7b2c3\u4e2a\u6570\u662f\u8fd9\u6839\u6811\u679d\u4e0a\u82f9\u679c\u7684\u6570\u91cf\u3002 \u6bcf\u6839\u6811\u679d\u4e0a\u7684\u82f9\u679c\u4e0d\u8d85\u8fc730000\u4e2a\u3002\u7b2c1\u884c2\u4e2a\u6570\uff0cN\u548cQ(\\(1 \\leq Q \\leq N\\),1 < N < 101)\u3002 N\u8868\u793a\u6811\u7684\u7ed3\u70b9\u6570\uff0cQ\u8868\u793a\u8981\u4fdd\u7559\u7684\u6811\u679d\u6570\u91cf\u3002\u63a5\u4e0b\u6765N-1\u884c\u63cf\u8ff0\u6811\u679d\u7684\u4fe1\u606f\u3002 \u6bcf\u884c3\u4e2a\u6574\u6570\uff0c\u524d\u4e24\u4e2a\u662f\u5b83\u8fde\u63a5\u7684\u7ed3\u70b9\u7684\u7f16\u53f7\u3002\u7b2c3\u4e2a\u6570\u662f\u8fd9\u6839\u6811\u679d\u4e0a\u82f9\u679c\u7684\u6570\u91cf\u3002 \u6bcf\u6839\u6811\u679d\u4e0a\u7684\u82f9\u679c\u4e0d\u8d85\u8fc730000\u4e2a\u3002 Output Format \u4e00\u4e2a\u6570\uff0c\u6700\u591a\u80fd\u7559\u4f4f\u7684\u82f9\u679c\u7684\u6570\u91cf\u3002 Hint Sample Input 5 2 1 3 1 1 4 10 2 3 20 3 5 20 Sample Output 21 FineArtz's solution Star /* \u5c0fF\u7684\u82f9\u679c\u6811 */ #include <iostream> #include <set> using namespace std; class Node{ public: set<int> edge; int father = 0; int apple = 0, sumApple = 0, sum = 0; }; class Edge{ public: int u = 0, v = 0, w = 0; }; Node a[105]; Edge e[105]; int n, q; int f[105][105] = {0}; void buildTree(int x, int f){ a[x].father = f; for (int i : a[x].edge){ if (i != f) buildTree(i, x); } } void countApple(int x){ a[x].sumApple = a[x].apple; a[x].sum = 1; for (int i : a[x].edge){ if (i != a[x].father){ countApple(i); a[x].sumApple += a[i].sumApple; a[x].sum += a[i].sum; } } } int dp(int x, int m){ if (f[x][m] != 0) return f[x][m]; if (m == 0){ f[x][m] = 0; return 0; } if (m >= a[x].sum){ f[x][m] = a[x].sumApple; return f[x][m]; } if (a[x].edge.size() == 1){ f[x][m] = a[x].apple; return f[x][m]; } int s1 = 0, s2 = 0; for (int i : a[x].edge){ if (i != a[x].father){ if (s1 == 0) s1 = i; else s2 = i; } } for (int k = 0; k < m; ++k){ f[x][m] = max(f[x][m], dp(s1, k) + dp(s2, m - k - 1) + a[x].apple); } return f[x][m]; } void print(int x){ cout << x << ' ' << a[x].father << ' ' << a[x].apple << ' ' << a[x].sumApple << ' ' << a[x].sum << endl; for (int i : a[x].edge) if (i != a[x].father) print(i); } int main(){ cin >> n >> q; for (int i = 1; i < n; ++i){ cin >> e[i].u >> e[i].v >> e[i].w; a[e[i].u].edge.insert(e[i].v); a[e[i].v].edge.insert(e[i].u); } buildTree(1, 0); for (int i = 1; i < n; ++i){ if (a[e[i].u].father == e[i].v) a[e[i].u].apple = e[i].w; else a[e[i].v].apple = e[i].w; } countApple(1); //print(1); ++q; dp(1, q); cout << f[1][q] << endl; return 0; }","title":"1076"},{"location":"nr/1076/#1076-f","text":"\u9898\u76ee","title":"1076 \u5c0fF\u7684\u82f9\u679c\u6811"},{"location":"nr/1076/#fineartzs-solution-star","text":"/* \u5c0fF\u7684\u82f9\u679c\u6811 */ #include <iostream> #include <set> using namespace std; class Node{ public: set<int> edge; int father = 0; int apple = 0, sumApple = 0, sum = 0; }; class Edge{ public: int u = 0, v = 0, w = 0; }; Node a[105]; Edge e[105]; int n, q; int f[105][105] = {0}; void buildTree(int x, int f){ a[x].father = f; for (int i : a[x].edge){ if (i != f) buildTree(i, x); } } void countApple(int x){ a[x].sumApple = a[x].apple; a[x].sum = 1; for (int i : a[x].edge){ if (i != a[x].father){ countApple(i); a[x].sumApple += a[i].sumApple; a[x].sum += a[i].sum; } } } int dp(int x, int m){ if (f[x][m] != 0) return f[x][m]; if (m == 0){ f[x][m] = 0; return 0; } if (m >= a[x].sum){ f[x][m] = a[x].sumApple; return f[x][m]; } if (a[x].edge.size() == 1){ f[x][m] = a[x].apple; return f[x][m]; } int s1 = 0, s2 = 0; for (int i : a[x].edge){ if (i != a[x].father){ if (s1 == 0) s1 = i; else s2 = i; } } for (int k = 0; k < m; ++k){ f[x][m] = max(f[x][m], dp(s1, k) + dp(s2, m - k - 1) + a[x].apple); } return f[x][m]; } void print(int x){ cout << x << ' ' << a[x].father << ' ' << a[x].apple << ' ' << a[x].sumApple << ' ' << a[x].sum << endl; for (int i : a[x].edge) if (i != a[x].father) print(i); } int main(){ cin >> n >> q; for (int i = 1; i < n; ++i){ cin >> e[i].u >> e[i].v >> e[i].w; a[e[i].u].edge.insert(e[i].v); a[e[i].v].edge.insert(e[i].u); } buildTree(1, 0); for (int i = 1; i < n; ++i){ if (a[e[i].u].father == e[i].v) a[e[i].u].apple = e[i].w; else a[e[i].v].apple = e[i].w; } countApple(1); //print(1); ++q; dp(1, q); cout << f[1][q] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1077/","text":"1077 \u52a0\u5206\u4e8c\u53c9\u6811 \u9898\u76ee Description \u8bbe\u4e00\u4e2an\u4e2a\u8282\u70b9\u7684\u4e8c\u53c9\u6811tree\u7684\u4e2d\u5e8f\u904d\u5386\u4e3a\uff08l,2,3,\u2026,n\uff09\uff0c\u5176\u4e2d\u6570\u5b571,2,3\u2026,n\u4e3a\u8282\u70b9\u7f16\u53f7\u3002 \u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u5206\u6570\uff08\u5747\u4e3a\u6b63\u6574\u6570\uff09\uff0c\u8bb0\u7b2cj\u4e2a\u8282\u70b9\u7684\u5206\u6570\u4e3adi\uff0ctree\u53ca\u5b83\u7684\u6bcf\u4e2a\u5b50\u6811\u90fd\u6709\u4e00\u4e2a\u52a0\u5206\uff0c\u4efb\u4e00\u68f5\u5b50\u6811subtree\uff08\u4e5f\u5305\u542btree\u672c\u8eab\uff09\u7684\u52a0\u5206\u8ba1\u7b97\u65b9\u6cd5\u5982\u4e0b\uff1a subtree\u7684\u5de6\u5b50\u6811\u7684\u52a0\u5206\u00d7 subtree\u7684\u53f3\u5b50\u6811\u7684\u52a0\u5206\uff0bsubtree\u7684\u6839\u7684\u5206\u6570 \u82e5\u67d0\u4e2a\u5b50\u6811\u4e3a\u4e3b\uff0c\u89c4\u5b9a\u5176\u52a0\u5206\u4e3a1\uff0c\u53f6\u5b50\u7684\u52a0\u5206\u5c31\u662f\u53f6\u8282\u70b9\u672c\u8eab\u7684\u5206\u6570\u3002\u4e0d\u8003\u8651\u5b83\u7684\u7a7a\u5b50\u6811\u3002 \u8bd5\u6c42\u4e00\u68f5\u7b26\u5408\u4e2d\u5e8f\u904d\u5386\u4e3a\uff081,2,3,\u2026,n\uff09\u4e14\u52a0\u5206\u6700\u9ad8\u7684\u4e8c\u53c9\u6811tree\u3002\u8981\u6c42\u8f93\u51fa\uff1b \uff081\uff09tree\u7684\u6700\u9ad8\u52a0\u5206 \uff082\uff09tree\u7684\u524d\u5e8f\u904d\u5386 Input Format \u7b2c1\u884c\uff1a\u4e00\u4e2a\u6574\u6570n\uff08\\( n\uff1c30 \\)\uff09\uff0c\u4e3a\u8282\u70b9\u4e2a\u6570 \u7b2c2\u884c\uff1an\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\uff0c\u4e3a\u6bcf\u4e2a\u8282\u70b9\u7684\u5206\u6570\uff08\u5206\u6570\uff1c100\uff09 Output Format tree\u7684\u6700\u9ad8\u52a0\u5206\u3002 tree\u7684\u524d\u5e8f\u904d\u5386\u3002 Sample Input 5 5 7 1 2 10 Sample Output 145 3 1 2 4 5 FineArtz's solution Star /* \u52a0\u5206\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; int n; int a[35] = {0}, r[35][35] = {0}; int f[35][35] = {0}; int calc(int l, int h){ if (l > h) return 1; if (f[l][h] >= 0) return f[l][h]; if (l == h){ r[l][h] = l; f[l][h] = a[l]; return f[l][h]; } for (int k = l; k <= h; ++k){ int p = calc(l, k - 1), q = calc(k + 1, h); if (f[l][h] < p * q + a[k]){ f[l][h] = p * q + a[k]; r[l][h] = k; } } return f[l][h]; } void ldr(int l, int h){ if (l > h) return; cout << r[l][h] << ' '; ldr(l, r[l][h] - 1); ldr(r[l][h] + 1, h); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; memset(f, -1, sizeof(f)); memset(r, -1, sizeof(r)); calc(1, n); cout << f[1][n] << endl; ldr(1, n); cout << endl; return 0; }","title":"1077"},{"location":"nr/1077/#1077","text":"\u9898\u76ee","title":"1077 \u52a0\u5206\u4e8c\u53c9\u6811"},{"location":"nr/1077/#fineartzs-solution-star","text":"/* \u52a0\u5206\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; int n; int a[35] = {0}, r[35][35] = {0}; int f[35][35] = {0}; int calc(int l, int h){ if (l > h) return 1; if (f[l][h] >= 0) return f[l][h]; if (l == h){ r[l][h] = l; f[l][h] = a[l]; return f[l][h]; } for (int k = l; k <= h; ++k){ int p = calc(l, k - 1), q = calc(k + 1, h); if (f[l][h] < p * q + a[k]){ f[l][h] = p * q + a[k]; r[l][h] = k; } } return f[l][h]; } void ldr(int l, int h){ if (l > h) return; cout << r[l][h] << ' '; ldr(l, r[l][h] - 1); ldr(r[l][h] + 1, h); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; memset(f, -1, sizeof(f)); memset(r, -1, sizeof(r)); calc(1, n); cout << f[1][n] << endl; ldr(1, n); cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1078/","text":"1078 Jerry\u7684\u751f\u65e5\u793c\u7269 \u9898\u76ee Description \u5e78\u798f\u7684\u8001\u9f20Jerry\u8981\u8fc7\u751f\u65e5\u4e86\uff0c\u5c0f\u72d7\u5927\u72d7\u5206\u522b\u9001\u4e86\u5b83\u4e00\u4efd\u751f\u65e5\u793c\u7269\u3002\u73b0\u5728Jerry\u6253\u7b97\u4ece\u81ea\u5df1\u5bb6X\u51fa\u53d1\uff0c\u5148\u5230\u5c0f\u72d7\u5bb6Y\uff08\u56e0\u4e3a\u5c0f\u72d7\u5bb6Y\u79bb\u8001\u9f20\u5bb6X\u7684\u8ddd\u79bb \u5c0f\u4e8e\u7b49\u4e8e\u5927\u72d7\u5bb6Z\u79bb\u8001\u9f20\u5bb6X\u7684\u8ddd\u79bb\uff09\uff0c\u518d\u5230\u5927\u72d7\u5bb6Z\uff0c\u5c06\u4e24\u4efd\u793c\u7269\u53d6\u56de\u3002 \u5361\u901a\u57ce\u7531N(\\(3 \\leq N \\leq 200000\\))\u4e2a\u5c45\u4f4f\u70b9\u548cN-1\u6761\u8fde\u63a5\u5c45\u4f4f\u70b9\u7684\u53cc\u5411\u8857\u9053\u7ec4\u6210\uff0c\u7ecf\u8fc7\u7b2ci\u6761\u8857\u9053\u9700\u82b1\u8d39Ti\uff081 \u2264 Ti \u2264 1000000000\uff09\u5206\u949f\u7684\u65f6\u95f4\u3002 \u53ef\u4ee5\u4fdd\u8bc1\uff0c\u4efb\u4e24\u4e2a\u5c45\u4f4f\u70b9\u95f4\u90fd\u5b58\u5728\u901a\u8def\u3002 \u4e0d\u59a8\u8bbeJerry\u5bb6\u5728\u70b9X\uff0c\u5c0f\u72d7\u5bb6\u5728\u70b9Y\uff0c\u5927\u72d7\u5bb6\u5728\u70b9Z\u3002\u73b0\u5728\uff0c\u8bf7\u4f60\u8ba1\u7b97\uff0cJerry\u6700\u5feb\u9700\u8981\u8017\u8d39\u591a\u957f\u65f6\u95f4\u624d\u80fd\u62ff\u5230\u751f\u65e5\u793c\u7269\uff1f \u5b9a\u4e49\uff1a\u4ee4|AB|\u8868\u793a\u5361\u901a\u57ce\u4e2d\u4eceA\u70b9\u8d70\u5230B\u70b9\u9700\u8981\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u7ed9\u51fa\u5361\u901a\u57ce\u7684\u5730\u56fe\uff0c\u627e\u5230\u4e00\u7ec4X\u3001Y\u3001Z\uff0c\u4f7f\u5f97\uff1a |XY|\u2264|XZ| |XY|+|YZ|\u6700\u5927\u3002 \u5e76\u6c42\u51fa\u6b64\u65f6|XY|+|YZ|\u7684\u503c\u3002 Input Format \u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570N(\\(3 \\leq N \\leq 200000\\))\u548cM\uff08M=N-1\uff09\uff0c\u5206\u522b\u8868\u793a\u5c45\u4f4f\u70b9\u603b\u6570\u548c\u8857\u9053\u603b\u6570\u3002 \u4ece\u7b2c2\u884c\u5f00\u59cb\u5230\u7b2cN\u884c\uff0c\u6bcf\u884c\u7ed9\u51fa\u4e00\u6761\u8857\u9053\u7684\u4fe1\u606f\u3002\u7b2ci+1\u884c\u5305\u542b\u6574\u6570Ui\u3001Vi\u3001Ti(\\(1 \\leq Ui, Vi \\leq N\\), \\(1 \\leq Ti \\leq 1000000000\\) )\uff0c\u8868\u793a\u8857\u9053i\u8fde\u63a5\u5c45\u4f4f\u70b9Ui\u548cVi\uff0c\u5e76\u4e14\u7ecf\u8fc7\u8857\u9053i\u9700\u82b1\u8d39Ti\u5206\u949f\u3002 Output Format \u4ec5\u5305\u542b\u4e00\u4e2a\u6574\u6570T\uff0c\u5373|XY|+|YZ|\u7684\u6700\u5927\u503c Hint Source: NOI 2003 Sample Input 4 3 1 2 1 2 3 1 3 4 1 Sample Output 4 FineArtz's solution Star /* Jerry\u7684\u751f\u65e5\u793c\u7269 */ #include <iostream> #include <cstring> using namespace std; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[400005]; int head[200005], cnt = 0; long long d1[200005] = {0}, d2[200005] = {0}; int n, m; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int distance(int x, long long *a){ int ret = 0; bool v[200005] = {0}; int q[200005], front = 0, rear = 0; a[x] = 0; v[x] = true; q[rear++] = x; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != -1; i = e[i].next){ int next = e[i].v; if (!v[next]){ a[next] = a[now] + e[i].w; if (a[ret] < a[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ memset(head, -1, sizeof(head)); cin >> n >> m; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } int p1 = distance(1, d1); int p2 = distance(p1, d1); distance(p2, d2); long long ans = 0; for (int i = 1; i <= n; ++i){ ans = max(ans, min(d1[i], d2[i])); } ans += d1[p2]; cout << ans << endl; return 0; }","title":"1078"},{"location":"nr/1078/#1078-jerry","text":"\u9898\u76ee","title":"1078 Jerry\u7684\u751f\u65e5\u793c\u7269"},{"location":"nr/1078/#fineartzs-solution-star","text":"/* Jerry\u7684\u751f\u65e5\u793c\u7269 */ #include <iostream> #include <cstring> using namespace std; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[400005]; int head[200005], cnt = 0; long long d1[200005] = {0}, d2[200005] = {0}; int n, m; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int distance(int x, long long *a){ int ret = 0; bool v[200005] = {0}; int q[200005], front = 0, rear = 0; a[x] = 0; v[x] = true; q[rear++] = x; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != -1; i = e[i].next){ int next = e[i].v; if (!v[next]){ a[next] = a[now] + e[i].w; if (a[ret] < a[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ memset(head, -1, sizeof(head)); cin >> n >> m; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } int p1 = distance(1, d1); int p2 = distance(p1, d1); distance(p2, d2); long long ans = 0; for (int i = 1; i <= n; ++i){ ans = max(ans, min(d1[i], d2[i])); } ans += d1[p2]; cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1079/","text":"1079 \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 \u9898\u76ee Description \u4f20\u8bf4\u4e2d\u7684\u4e5d\u5934\u9f99\u662f\u4e00\u79cd\u7279\u522b\u8d2a\u5403\u7684\u52a8\u7269\u3002\u867d\u7136\u540d\u5b57\u53eb\u201c\u4e5d\u5934\u9f99\u201d\uff0c\u4f46\u8fd9\u53ea\u662f\u8bf4\u5b83\u51fa\u751f\u7684\u65f6\u5019\u6709\u4e5d\u4e2a\u5934\uff0c\u800c\u5728\u6210\u957f\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u6709\u65f6\u4f1a\u957f\u51fa\u5f88\u591a\u7684\u65b0\u5934\uff0c\u5934\u7684\u603b\u6570\u4f1a\u8fdc\u5927\u4e8e\u4e5d\uff0c\u5f53\u7136\u4e5f\u4f1a\u6709\u65e7\u5934\u56e0\u8870\u8001\u800c\u81ea\u5df1\u8131\u843d\u3002 \u6709\u4e00\u5929\uff0c\u6709M\u4e2a\u8111\u888b\u7684\u4e5d\u5934\u9f99\u770b\u5230\u4e00\u68f5\u957f\u6709N\u4e2a\u679c\u5b50\u7684\u679c\u6811\uff0c\u559c\u51fa\u671b\u5916\uff0c\u6068\u4e0d\u5f97\u4e00\u53e3\u628a\u5b83\u5168\u90e8\u5403\u6389\u3002\u53ef\u662f\u5fc5\u987b\u7167\u987e\u5230\u6bcf\u4e2a\u5934\uff0c\u56e0\u6b64\u5b83\u9700\u8981\u628aN\u4e2a\u679c\u5b50\u5206\u6210M\u7ec4\uff0c\u6bcf\u7ec4\u81f3\u5c11\u6709\u4e00\u4e2a\u679c\u5b50\uff0c\u8ba9\u6bcf\u4e2a\u5934\u5403\u4e00\u7ec4\u3002 \u8fd9M\u4e2a\u8111\u888b\u4e2d\u6709\u4e00\u4e2a\u6700\u5927\uff0c\u79f0\u4e3a\u201c\u5927\u5934\u201d\uff0c\u662f\u4f17\u5934\u4e4b\u9996\uff0c\u5b83\u8981\u5403\u6389\u6070\u597dK\u4e2a\u679c\u5b50\uff0c\u800c\u4e14K\u4e2a\u679c\u5b50\u4e2d\u7406\u6240\u5f53\u7136\u5730\u5e94\u8be5\u5305\u62ec\u552f\u4e00\u7684\u4e00\u4e2a\u6700\u5927\u7684\u679c\u5b50\u3002\u679c\u5b50\u7531N-1\u6839\u6811\u679d\u8fde\u63a5\u8d77\u6765\uff0c\u7531\u4e8e\u679c\u6811\u662f\u4e00\u4e2a\u6574\u4f53\uff0c\u56e0\u6b64\u53ef\u4ee5\u4ece\u4efb\u610f\u4e00\u4e2a\u679c\u5b50\u51fa\u53d1\u6cbf\u7740\u6811\u679d\u201c\u8d70\u5230\u201d\u4efb\u4f55\u4e00\u4e2a\u5176\u4ed6\u7684\u679c\u5b50\u3002 \u5bf9\u4e8e\u6bcf\u6bb5\u6811\u679d\uff0c\u5982\u679c\u5b83\u6240\u8fde\u63a5\u7684\u4e24\u4e2a\u679c\u5b50\u9700\u8981\u7531\u4e0d\u540c\u7684\u5934\u6765\u5403\u6389\uff0c\u90a3\u4e48\u4e24\u4e2a\u5934\u4f1a\u5171\u540c\u628a\u6811\u679d\u5f04\u65ad\u800c\u628a\u679c\u5b50\u5206\u5f00\uff1b\u5982\u679c\u8fd9\u4e24\u4e2a\u679c\u5b50\u662f\u7531\u540c\u4e00\u4e2a\u5934\u6765\u5403\u6389\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5934\u4f1a\u61d2\u5f97\u628a\u5b83\u5f04\u65ad\u800c\u76f4\u63a5\u628a\u679c\u5b50\u8fde\u540c\u6811\u679d\u4e00\u8d77\u5403\u6389\u3002\u5f53\u7136\uff0c\u5403\u6811\u679d\u5e76\u4e0d\u662f\u5f88\u8212\u670d\u7684\uff0c\u56e0\u6b64\u6bcf\u6bb5\u6811\u679d\u90fd\u6709\u4e00\u4e2a\u5403\u4e0b\u53bb\u7684\u201c\u96be\u53d7\u503c\u201d\uff0c\u800c\u4e5d\u5934\u9f99\u7684\u96be\u53d7\u503c\u5c31\u662f\u6240\u6709\u5934\u5403\u6389\u7684\u6811\u679d\u7684\u201c\u96be\u53d7\u503c\u201d\u4e4b\u548c\u3002 \u4e5d\u5934\u9f99\u5e0c\u671b\u5b83\u7684\u201c\u96be\u53d7\u503c\u201d\u5c3d\u91cf\u5c0f\uff0c\u4f60\u80fd\u5e2e\u5b83\u7b97\u7b97\u5417\uff1f Input Format \u7b2c1\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570\\( N ( 1 \\leq N \\leq 300 )\uff0cM (2 \\leq M \\leq N)\uff0cK (1 \\leq K \\leq N) \\)\u3002N\u4e2a\u679c\u5b50\u4f9d\u6b21\u7f16\u53f71,2,...,N\uff0c\u4e14\u6700\u5927\u7684\u679c\u5b50\u7684\u7f16\u53f7\u603b\u662f1\u3002 \u7b2c2\u884c\u5230\u7b2cN\u884c\u63cf\u8ff0\u4e86\u679c\u6811\u7684\u5f62\u6001\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570\\( a (1 \\leq a \\leq N)\uff0cb (1 \\leq b \\leq N)\uff0cc (0 \\leq c \\leq 105) \\)\uff0c\u8868\u793a\u5b58\u5728\u4e00\u6bb5\u96be\u53d7\u503c\u4e3ac\u7684\u6811\u679d\u8fde\u63a5\u679c\u5b50a\u548c\u679c\u5b50b\u3002 Output Format \u4ec5\u6709\u4e00\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728\u6ee1\u8db3\u201c\u5927\u5934\u201d\u7684\u8981\u6c42\u7684\u524d\u63d0\u4e0b\uff0c\u4e5d\u5934\u9f99\u7684\u96be\u53d7\u503c\u7684\u6700\u5c0f\u503c\u3002\u5982\u679c\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\uff0c\u8f93\u51fa-1\u3002 \u8bf4\u660e \u63d0\u793a \u5bf9\u4e8e\u65e0\u89e3\u7684\u60c5\u51b5\uff0c\u53ea\u8981\u5224\u65ad\u679c\u5b50\u662f\u5426\u591f\u5403\u5c31\u884c\uff0c\u5373\uff1aM+K-1>N\u5219\u65e0\u89e3 \u53ef\u4ee5\u6ce8\u610f\u5230\u5f53\\(n \\geq 3 \\)\u65f6\uff0c\u6700\u4f18\u89e3\u4e00\u5b9a\u4e0d\u4f1a\u5b58\u5728\u4e24\u4e2a\u679c\u5b50\u540c\u65f6\u88ab\u4e00\u4e2a\u5c0f\u5934\u6240\u5403\uff0c\u56e0\u4e3a\u53ef\u4ee5\u8ba9\u5176\u4e2d\u4e00\u4e2a\u8ba9\u53e6\u4e00\u4e2a\u5934\u5403\uff0c\u4e00\u65b9\u9762\u51cf\u5c11\u4e86\u96be\u53d7\u503c\uff0c\u53e6\u4e00\u65b9\u9762\u53ef\u4ee5\u66f4\u6ee1\u8db3\u6bcf\u4e2a\u5934\u81f3\u5c11\u5403\u4e00\u4e2a\u7684\u6761\u4ef6\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u7528\u8003\u8651\u4e24\u7aef\u90fd\u88ab\u5927\u5934\u5403\u7684\u60c5\u51b5\u3002 \u6211\u4eec\u4ee4\u72b6\u6001d[i,j,0]\u8868\u793ai\u7684\u7236\u4eb2\u8282\u70b9\u4e3a\u5c0f\u5934\u5403\uff0ci\u7684\u53f3\u8fb9\u6240\u6709\u5144\u5f1f\u53ca\u5176\u5b50\u6811\u4ee5\u53cai\u8fd9\u9897\u5b50\u6811\u5927\u5934\u5403\u7684\u4e00\u5171\u6709j\u4e2a\uff0c\u6700\u5c0f\u7684\u96be\u53d7\u503c\u3002d[i,j,1]\u4e3ai\u7684\u7236\u4eb2\u4e3a\u5927\u5934\u5403\u3002 \u5219\u4ee4child[i]\u4e3ai\u7684\u6700\u5de6\u513f\u5b50\uff0csibling[i]\u4e3ai\u7684\u53f3\u5144\u5f1f\u3002 Source: NOI 2002 Sample Input 8 2 4 1 2 20 1 3 4 1 4 13 2 5 10 2 6 12 3 7 15 3 8 5 Sample Output 4 FineArtz's solution Star /* \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 */ #include <iostream> #include <cstring> #include <vector> using namespace std; const int INF = 1000000000; class Node{ public: int child = 0, sibling = 0, father = 0; int lenf = 0; int ecnt = 0, edge[305] = {0}, w[305] = {0}; }; int n, m, k; Node a[305]; int f[305][305][2] = {0}; void makeTree(int x, int f){ a[x].father = f; if (a[x].ecnt == 1) return; for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].edge[i] != f){ if (a[x].child == 0){ a[x].child = a[x].edge[i]; a[a[x].child].lenf = a[x].w[i]; } else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; a[a[t].sibling].lenf = a[x].w[i]; } makeTree(a[x].edge[i], x); } } } void printTree(int x){ if (x == 0) return; cout << x << endl; printTree(a[x].child); printTree(a[x].sibling); } int factor(int x, int y){ if (x > 0 && y > 0) return 1; if (x == 0 && y == 0 && m == 2) return 1; return 0; } int dp(int x, int k, int b){ if (f[x][k][b] != -1) return f[x][k][b]; int ret = INF; for (int i = 0; i <= k; ++i){ int t = dp(a[x].child, i, 0) + dp(a[x].sibling, k - i, b) + factor(b, 0) * a[x].lenf; ret = min(ret, t); } for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i, 1) + dp(a[x].sibling, k - i - 1, b) + factor(b, 1) * a[x].lenf; ret = min(ret, t); } f[x][k][b] = ret; return ret; } int main(){ cin >> n >> m >> k; if (m + k - 1 > n){ cout << \"-1\" << endl; return 0; } for (int i = 1; i <= n - 1; ++i){ int u, v, w; cin >> u >> v >> w; a[u].edge[++a[u].ecnt] = v; a[u].w[a[u].ecnt] = w; a[v].edge[++a[v].ecnt] = u; a[v].w[a[v].ecnt] = w; } makeTree(1, 0); memset(f, -1, sizeof(f)); f[0][0][0] = f[0][0][1] = 0; for (int i = 1; i <= k; ++i){ f[0][i][0] = INF; f[0][i][1] = INF; } cout << dp(a[1].child, k - 1, 1) << endl; return 0; }","title":"1079"},{"location":"nr/1079/#1079","text":"\u9898\u76ee","title":"1079 \u8d2a\u5403\u7684\u4e5d\u5934\u9f99"},{"location":"nr/1079/#fineartzs-solution-star","text":"/* \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 */ #include <iostream> #include <cstring> #include <vector> using namespace std; const int INF = 1000000000; class Node{ public: int child = 0, sibling = 0, father = 0; int lenf = 0; int ecnt = 0, edge[305] = {0}, w[305] = {0}; }; int n, m, k; Node a[305]; int f[305][305][2] = {0}; void makeTree(int x, int f){ a[x].father = f; if (a[x].ecnt == 1) return; for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].edge[i] != f){ if (a[x].child == 0){ a[x].child = a[x].edge[i]; a[a[x].child].lenf = a[x].w[i]; } else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; a[a[t].sibling].lenf = a[x].w[i]; } makeTree(a[x].edge[i], x); } } } void printTree(int x){ if (x == 0) return; cout << x << endl; printTree(a[x].child); printTree(a[x].sibling); } int factor(int x, int y){ if (x > 0 && y > 0) return 1; if (x == 0 && y == 0 && m == 2) return 1; return 0; } int dp(int x, int k, int b){ if (f[x][k][b] != -1) return f[x][k][b]; int ret = INF; for (int i = 0; i <= k; ++i){ int t = dp(a[x].child, i, 0) + dp(a[x].sibling, k - i, b) + factor(b, 0) * a[x].lenf; ret = min(ret, t); } for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i, 1) + dp(a[x].sibling, k - i - 1, b) + factor(b, 1) * a[x].lenf; ret = min(ret, t); } f[x][k][b] = ret; return ret; } int main(){ cin >> n >> m >> k; if (m + k - 1 > n){ cout << \"-1\" << endl; return 0; } for (int i = 1; i <= n - 1; ++i){ int u, v, w; cin >> u >> v >> w; a[u].edge[++a[u].ecnt] = v; a[u].w[a[u].ecnt] = w; a[v].edge[++a[v].ecnt] = u; a[v].w[a[v].ecnt] = w; } makeTree(1, 0); memset(f, -1, sizeof(f)); f[0][0][0] = f[0][0][1] = 0; for (int i = 1; i <= k; ++i){ f[0][i][0] = INF; f[0][i][1] = INF; } cout << dp(a[1].child, k - 1, 1) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1080/","text":"1080 \u5c0fF\u7684\u516c\u5bd3 \u9898\u76ee Description \u6539\u7f16\u81ea NOIP2006 \u6811\u7f51\u7684\u6838. \u5c0fF\u6240\u5728\u7684\u57ce\u5e02\u201c\u7231\u5403\u7c73\u201d\u662f\u4e00\u4e2a\u8fde\u901a\u65e0\u5708\u7684\u65e0\u5411\u56fe\uff0c\u6bcf\u4e2a\u8282\u70b9\u662f\u4e00\u5e62\u516c\u5bd3\uff0c\u4e24\u4e24\u516c\u5bd3\u4e4b\u95f4\u7531\u957f\u5ea6\u4e0d\u540c\u7684\u9053\u8def\u76f8\u8fde\u3002 \u201c\u7231\u5403\u7c73\u201d\u4e3a\u4e86\u65b9\u4fbf\u5927\u5bb6\u5403\u7c73\uff0c\u4e24\u4e24\u516c\u5bd3\u4e4b\u95f4\u90fd\u5b58\u5728\u552f\u4e00\u4e00\u6761\u7b80\u5355\u8def\u5f84\u3002 \u6211\u4eec\u7528d(a,b)\u8868\u793a\u4ee5a,b\u4e24\u4e2a\u516c\u5bd3\u4e3a\u7aef\u70b9\u7684\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u5b83\u662f\u8be5\u8def\u5f84\u4e0a\u5404\u9053\u8def\u957f\u5ea6\u4e4b\u548c\u3002\u6211\u4eec\u79f0d(a,b)\u4e3aa,b\u4e24\u516c\u5bd3\u95f4\u7684\u8ddd\u79bb\u3002 \u4e00\u4e2a\u516c\u5bd3 v \u5230\u4e00\u6761\u8def\u5f84 P \u7684\u8ddd\u79bb\u4e3a\u8be5\u516c\u5bd3\u4e0e P \u4e0a\u7684\u6700\u8fd1\u7684\u516c\u5bd3\u7684\u8ddd\u79bb\uff1a \\( d(v\uff0cP) = min { d(v\uff0cu)\uff0cu\u4e3a\u8def\u5f84 P \u4e0a\u7684\u516c\u5bd3 } \\) \u3002 \u201c\u7231\u5403\u7c73\u201d\u7684\u76f4\u5f84\uff1a\u201c\u7231\u5403\u7c73\u201d\u4e2d\u6700\u957f\u7684\u8def\u5f84\u79f0\u4e3a\u201c\u7231\u5403\u7c73\u201d\u7684\u76f4\u5f84\u3002 \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u57ce\u5e02T\uff0c\u76f4\u5f84\u4e0d\u4e00\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u4f46\u53ef\u4ee5\u8bc1\u660e\uff1a \u5404\u76f4\u5f84\u7684\u4e2d\u70b9\uff08\u4e0d\u4e00\u5b9a\u6070\u597d\u662f\u67d0\u4e2a\u7ed3\u70b9\uff0c\u53ef\u80fd\u5728\u67d0\u6761\u8fb9\u7684\u5185\u90e8\uff09\u662f\u552f\u4e00\u7684\uff0c\u6211\u4eec\u79f0\u8be5\u70b9\u4e3a\u201c\u7231\u5403\u7c73\u201d\u7684\u4e2d\u5fc3\u3002 \u504f\u5fc3\u8dddECC(F)\uff1a\u201c\u7231\u5403\u7c73\u201d T \u4e2d\u8ddd\u8def\u5f84 F \u6700\u8fdc\u7684\u7ed3\u70b9\u5230\u8def\u5f84 F \u7684\u8ddd\u79bb\uff0c\u5373 \\( ECC(F) = max{ d(v,F), v\u2208V } \\)\u3002 \u4efb\u52a1\uff1a\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u57ce\u5e02 T = (V, E,W ) \u548c\u975e\u8d1f\u6574\u6570 s \uff0c\u5c0fF\u60f3\u8bf7\u4f60\u627e\u4e00\u4e2a\u8def\u5f84 F \uff0c\u628a\u8fd9\u4e2a\u8def\u5f84\u4e0a\u6240\u6709\u7684\u516c\u5bd3\u5168\u90e8\u79df\u4e0b\u6765\u3002 \u4f46\u662f\uff0c F \u5fc5\u987b\u662f\u67d0\u76f4\u5f84\u4e0a\u7684\u4e00\u6bb5\u8def\u5f84\uff08\u8be5\u8def\u5f84\u4e24\u7aef\u5747\u4e3a\u57ce\u5e02\u4e2d\u7684\u516c\u5bd3\u7ed3\u70b9\uff09\uff0c\u5176\u957f\u5ea6\u4e0d\u8d85\u8fc7s\uff08\u53ef\u4ee5\u7b49\u4e8es\uff09\uff0c\u4f7f\u504f\u5fc3\u8dddECC(F)\u6700\u5c0f\u3002 \u6211\u4eec\u79f0\u8fd9\u4e2a\u8def\u5f84\u4e3a\u57ce\u5e02 T = ( V , E, W) \u7684\u6838\uff08Core\uff09\u3002 \u5fc5\u8981\u65f6\uff0cF\u53ef\u4ee5\u9000\u5316\u4e3a\u5355\u4e2a\u516c\u5bd3\u7ed3\u70b9\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5728\u4e0a\u8ff0\u5b9a\u4e49\u4e0b\uff0c\u6838\u4e0d\u4e00\u5b9a\u53ea\u6709\u4e00\u4e2a\uff0c\u4f46\u6700\u5c0f\u504f\u5fc3\u8ddd\u662f\u552f\u4e00\u7684\u3002 \u6837\u4f8b\u4e2d\uff0cA-B \u4e0e A-C \u662f\u4e24\u6761\u76f4\u5f84\uff0c\u957f\u5ea6\u5747\u4e3a20\u3002\u70b9 W \u662f\u201c\u7231\u5403\u7c73\u201d\u7684\u4e2d\u5fc3\uff0cEF \u8fb9\u7684\u957f\u5ea6\u4e3a5\u3002 \u5982\u679c\u6307\u5b9a s = 11\uff0c\u5219\u201c\u7231\u5403\u7c73\u201d\u7684\u6838\u4e3a\u8def\u5f84 DEFG\uff08\u4e5f\u53ef\u4ee5\u53d6\u4e3a\u8def\u5f84 DEF \uff09\uff0c\u504f\u5fc3\u8ddd\u4e3a 8 \u3002 \u5982\u679c\u6307\u5b9as=0\uff08\u6216s=1\u3001s=2\uff09\uff0c\u5219\u201c\u7231\u5403\u7c73\u201d\u7684\u6838\u4e3a\u7ed3\u70b9F\uff0c\u504f\u5fc3\u8ddd\u4e3a12\u3002 Input Format \u8f93\u5165\u5305\u542bn\u884c\uff1a \u7b2c1\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570n\u548cs\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u5176\u4e2dn\u4e3a\u6811\u7f51\u7ed3\u70b9\u7684\u4e2a\u6570\uff0cs\u4e3a\u6811\u7f51\u7684\u6838\u7684\u957f\u5ea6\u7684\u4e0a\u754c\u3002\u8bbe\u7ed3\u70b9\u7f16\u53f7\u4f9d\u6b21\u4e3a1, 2, ..., n\u3002 \u4ece\u7b2c2\u884c\u5230\u7b2cn\u884c\uff0c\u6bcf\u884c\u7ed9\u51fa3\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u7f16\u53f7\u548c\u957f\u5ea6\u3002\u4f8b\u5982\uff0c\u201c2 4 7\u201d\u8868\u793a\u8fde\u63a5\u7ed3\u70b92\u4e0e4\u7684\u8fb9\u7684\u957f\u5ea6\u4e3a7\u3002 \u6240\u7ed9\u7684\u6570\u636e\u90fd\u662f\u6b63\u786e\u7684\uff0c\u4e0d\u5fc5\u68c0\u9a8c\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4e3a\u6307\u5b9a\u610f\u4e49\u4e0b\u7684\u6700\u5c0f\u504f\u5fc3\u8ddd\u3002 \u8bf4\u660e 20\u5206\u7684\u6570\u636e\u6ee1\u8db3\uff1a\\( 5 \\leq n \\leq 15 \\)\u3002 70\u5206\u7684\u6570\u636e\u6ee1\u8db3\uff1a\\( 5 \\leq n \\leq 80 \\)\u3002 \u8fd9\u91cc\u679a\u4e3e\u76f4\u5f84\uff0cFloyd\uff0c\u679a\u4e3ecore\uff0c\u679a\u4e3e\u6811\u5916\u7684\u70b9\u90fd\u53ef\u4ee5\u505a\u6389\u3002 100\u5206\u7684\u6570\u636e\u6ee1\u8db3\uff1a\\( 5 \\leq n \\leq 300, 0 \\leq s \\leq 1000 \\)\u3002\u8fb9\u957f\u5ea6\u4e3a\u4e0d\u8d85\u8fc71000\u7684\u6b63\u6574\u6570\u3002 100\u5206\u90e8\u5206\u6539\u7f16\u81eaNOIP2007\u7b2c\u56db\u9898\u3002 110\u5206\u7684\u6570\u636e\u6ee1\u8db3\uff1a\\( 5 \\leq n \\leq 500000, 0 \\leq s \\leq n \\) \u3002\u6700\u540e\u7ed3\u679c\u4e0d\u8d85\u8fc7\\( 2^{31}-1 \\)\u3002 \u89e3\u9898\u601d\u8def\uff1a \u672c\u9898\u662fNOIP\u9898\u76ee\uff0c\u7531\u4e8e\u6570\u636e\u8303\u56f4\u5f88\u5c0f\uff0cO\uff08N3\uff09\u3001O\uff08N2\uff09\u3001O\uff08N\u00d7S\uff09\u7b49\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u90fd\u53ef\u4ee5\u83b7\u5f97\u6ee1\u5206\uff0c\u4f46\u5b9e\u9645\u4e0a\u5b58\u5728\u66f4\u4f18\u79c0\u7684\u7b97\u6cd5\u3002 \u9898\u76ee\u4e2d\u8981\u6c42\u627e\u7684\u8def\u5f84\u5fc5\u987b\u5728\u6811\u7684\u76f4\u5f84\u4e0a\uff0c\u5982\u679c\u76f4\u63a5\u6309\u7167\u63cf\u8ff0\u6765\uff0c\u9700\u8981\u627e\u51fa\u6811\u7684\u6240\u6709\u76f4\u5f84\uff0c\u800c\u6811\u7684\u76f4\u5f84\u6700\u591a\u53ef\u4ee5\u662fO\uff08N2\uff09\u7ea7\u522b\u7684\uff0c \u8fd9\u6837\u505a\u7684\u8bdd\u6700\u7ec8\u590d\u6742\u5ea6\u5fc5\u7136\u4f1a\u5f88\u9ad8\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u5bf9\u6b64\u4f5c\u51fa\u7b80\u5316\u3002 \u6811\u7684\u76f4\u5f84\u867d\u7136\u53ef\u80fd\u5f88\u591a\uff0c\u4f46\u5b83\u4eec\u7684\u5f62\u6001\u662f\u5f88\u6709\u89c4\u5f8b\u7684\uff0c\u9898\u76ee\u63cf\u8ff0\u4e2d\u5c31\u5df2\u7ecf\u7ed9\u4e86\u6211\u4eec\u4e00\u4e2a\u5f88\u6709\u7528\u7684\u89c4\u5f8b\uff1a \u6240\u6709\u76f4\u5f84\u7684\u4e2d\u70b9\u662f\u91cd\u5408\u4e8e\u6811\u7684\u4e2d\u5fc3\u3002 \u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5165\u624b\uff1a\u6811\u6709\u591a\u6761\u76f4\u5f84\uff0c\u957f\u5ea6\u5747\u4e3aD\uff0c\u6240\u6709\u76f4\u5f84\u552f\u4e00\u7684\u4ea4\u96c6\u5c31\u662f\u6811\u7684\u4e2d\u5fc3\uff08\u90a3\u4e48\u6811\u7684\u4e2d\u5fc3\u4e00\u5b9a\u5904\u4e8e\u4e00\u4e2a\u7ed3\u70b9\u4e0a\uff09\u3002 \u90a3\u4e48\u663e\u800c\u6613\u89c1\uff0c\u6811\u7684\u5f62\u6001\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\u4ece\u6811\u7684\u4e2d\u5fc3\u51fa\u53d1\u67094\u6761\u4ee5\u4e0a\u6ca1\u6709\u4ea4\u96c6\u7684\u957f\u5ea6\u4e3aD\uff0f2\u7684\u8def\u5f84\uff0c\u4e0d\u59a8\u79f0\u5b83\u4eec\u4e3a\u534a\u5f84\u3002 \u663e\u7136\u65e0\u8bba\u600e\u6837\u9009\u62e9\u6838\u7684\u4f4d\u7f6e\uff0c\u5b83\u6700\u591a\u53ea\u80fd\u8986\u76d6\u5230\u4e24\u6761\u534a\u5f84\uff0c\u90a3\u4e48\u504f\u5fc3\u8ddd\u4e0d\u53ef\u80fd\u5c0f\u4e8eD\uff0f2\uff0c\u800c\u76f4\u63a5\u9009\u62e9\u6811\u7684\u4e2d\u5fc3\u4f5c\u4e3a\u6838\uff0c \u504f\u5fc3\u8ddd\u5c31\u5df2\u7ecf\u662fD\uff0f2\u4e86\uff0c\u6240\u4ee5\u6811\u7684\u4e2d\u5fc3\u5c31\u662f\u6838\uff0c\u800c\u8fd9\u4e2a\u6838\u4f4d\u4e8e\u6240\u6709\u7684\u76f4\u5f84\u4e0a\u3002 \u5982\u679c\u6240\u6709\u76f4\u5f84\u7684\u4ea4\u96c6\u4e0d\u662f\u4e00\u4e2a\u70b9\u5462\uff1f\u7531\u4e8e\u76f4\u5f84\u662f\u6811\u4e0a\u7684\u8fde\u7eed\u8def\u5f84\uff0c\u800c\u4e24\u6761\u8fde\u7eed\u8def\u5f84\u7684\u4ea4\u96c6\u5982\u679c\u4e0d\u662f\u7a7a\u96c6\uff0c\u4e00\u5b9a\u4e5f\u662f\u8fde\u7eed\u8def\u5f84\u3002 \u800c\u9898\u76ee\u5df2\u7ecf\u544a\u8bc9\u4e86\u6211\u4eec\uff0c\u6240\u6709\u76f4\u5f84\u5fc5\u5b9a\u662f\u6709\u4ea4\u96c6\u7684\uff0c\u90a3\u4e48\u4ea4\u96c6\u4e0d\u662f\u4e00\u4e2a\u70b9\u7684\u8bdd\uff0c\u5c31\u5fc5\u7136\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u8def\u5f84\uff0c\u8bbe\u8fd9\u4e2a\u4ea4\u96c6\u4e3aW\u3002 \u6bcf\u4e00\u6761\u76f4\u5f84\u90fd\u662fW\u4e24\u5934\u518d\u5ef6\u4f38\u51fa\u53bb\u4e00\u6bb5\u8def\u5f84\u5f62\u6210\u7684\uff0c\u7a0d\u52a0\u5206\u6790\u5c31\u80fd\u8bc1\u660e\uff0c\u5bf9\u4e8eW\u7684\u67d0\u4e00\u5934\uff0c\u76f4\u5f84\u5ef6\u4f38\u51fa\u53bb\u7684\u6240\u6709\u8def\u5f84\u957f\u5ea6\u90fd\u662f\u76f8\u7b49\u7684\uff0c \u5373\u5982\u4e0b\u56fe\uff08\u7ea2\u8272\u90e8\u5206\u4e3aW\uff0c\u84dd\u8272\u90e8\u5206\u4e3a\u76f4\u5f84\u5ef6\u4f38\u51fa\u53bb\u7684\u90e8\u5206\uff09\uff1a \u8054\u7cfb\u524d\u9762\u8ba8\u8bba\u7684\u201c\u4ea4\u96c6\u4e3a\u4e00\u4e2a\u70b9\u201d\u7684\u60c5\u51b5\uff0c\u4f1a\u53d1\u73b0\u8fd9\u91cc\u60c5\u51b5\u662f\u7c7b\u4f3c\u7684\uff0c\u5982\u679c\u6838\u8986\u76d6\u5230\u4e86\u84dd\u8272\u7684\u8fb9\uff0c\u90a3\u4e48\u5c06\u6838\u5728\u84dd\u8272\u8fb9\u4e0a\u7684\u90e8\u5206\u5220\u6389\uff0c\u504f\u5fc3\u8ddd\u662f\u4e0d\u4f1a\u53d8\u5316\u7684\uff0c\u6240\u4ee5\u6838\u4e00\u5b9a\u662f\u5728\u7ea2\u8272\u7684\u90e8\u5206\u4e0a\u7684\uff0c\u6362\u53e5\u8bdd\u8bf4\uff1a\u6838\u5728\u4efb\u610f\u4e00\u6761\u76f4\u5f84\u4e0a\uff0c\u8fd9\u548c\u524d\u4e00\u79cd\u60c5\u51b5\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u76f8\u540c\u7684\u3002 \u6709\u4e86\u8fd9\u4e2a\u7ed3\u8bba\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u968f\u4fbf\u627e\u51fa\u4e00\u6761\u6811\u7684\u76f4\u5f84\uff0c\u518d\u5728\u4e0a\u9762\u627e\u6838\u4e86\u3002\u627e\u6811\u7684\u76f4\u5f84\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7b97\u6cd5\u6216\u8005\u4e24\u6b21dfs\u7684\u65b9\u6cd5\uff0c\u590d\u6742\u5ea6\u5747\u4e3aO\uff08N\uff09\uff0c\u5177\u4f53\u65b9\u6cd5\u4e0d\u5728\u6b64\u6587\u53d9\u8ff0\u3002\u4e0b\u9762\u6765\u7814\u7a76\u600e\u6837\u627e\u5230\u6838\u7684\u4f4d\u7f6e\u3002 \u4e00\u6761\u76f4\u5f84\u4e0a\u6700\u591a\u6709O\uff08N\uff09\u4e2a\u70b9\uff0c\u90a3\u662f\u5426\u6709O\uff08N2\uff09\u79cd\u6838\u7684\u9009\u62e9\u65b9\u6848\u5462\uff1f\u6ce8\u610f\u5230\u8fd9\u6837\u4e00\u4e2a\u6027\u8d28\uff0c\u5411\u4e00\u6761\u8def\u5f84\u591a\u52a0\u5165\u4e00\u6761\u8fb9\uff0c\u504f\u5fc3\u8ddd\u662f\u4e0d\u4f1a\u53d8\u5f97\u66f4\u5927\u7684\uff0c\u6240\u4ee5\u5982\u679c\u6838\u5728\u76f4\u5f84\u4e0a\u7684\u8d77\u70b9\u786e\u5b9a\u4e86\uff0c\u5c31\u53ef\u4ee5\u4e00\u76f4\u6cbf\u7740\u76f4\u5f84\u5411\u4e0b\u8d70\uff0c\u76f4\u5230\u8d70\u5230\u5934\u6216\u8005\u603b\u957f\u5ea6\u5c06\u8981\u8d85\u8fc7S\u4e3a\u6b62\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u6838\u5c31\u53ea\u6709O\uff08N\uff09\u79cd\u9009\u62e9\u65b9\u6848\u4e86\u3002 \u5f53\u9009\u5b9a\u4e86\u4e00\u79cd\u6838\u7684\u4f4d\u7f6e\u540e\uff0c\u5c31\u9700\u8981\u786e\u5b9a\u5b83\u7684\u504f\u5fc3\u8ddd\u3002\u56e0\u4e3a\u6838\u5b8c\u5168\u4f4d\u4e8e\u76f4\u5f84\u4e0a\uff0c\u6240\u4ee5\u4efb\u610f\u70b9\u8981\u8d70\u5230\u6838\u4e0a\uff0c\u4e00\u5b9a\u8981\u5148\u8d70\u5230\u76f4\u5f84\u4e0a\uff0c\u4e0d\u59a8\u5c06\u5176\u8d70\u5230\u76f4\u5f84\u4e0a\u7684\u7b2c\u4e00\u4e2a\u70b9\u79f0\u4e3a\u201c\u8fdb\u5165\u70b9\u201d\u3002\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u79bb\u6838\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\uff0c\u6240\u4ee5\u6811\u7684\u7ed3\u6784\u53ef\u4ee5\u7b80\u5316\u4e3a\u94fe\uff1a\u5bf9\u4e8e\u76f4\u5f84\u4e0a\u7684\u6bcf\u4e2a\u70b9\uff0c\u627e\u51fa\u4ee5\u5b83\u4f5c\u4e3a\u8fdb\u5165\u70b9\u7684\u70b9\u4e2d\u8ddd\u79bb\u6700\u8fdc\u7684\u4e00\u4e2a\uff0c\u79f0\u4e3a\u6700\u8fdc\u65c1\u679d\uff0c\u8fd9\u4e00\u6b65\u662fO\uff08N\uff09\u7684\u3002\u73b0\u5728\u8981\u786e\u5b9a\u6838\u7684\u504f\u5fc3\u8ddd\uff0c\u5b83\u7531\u4e09\u90e8\u5206\u4ea7\u751f\uff0c\u7b2c\u4e00\u90e8\u5206\u662f\u6838\u4e0a\u6240\u6709\u70b9\u7684\u6700\u8fdc\u65c1\u679d\uff0c\u7b2c\u4e8c\u90e8\u5206\u662f\u6838\u5934\u90e8\u8ddd\u79bb\u76f4\u5f84\u5934\u90e8\u7684\u8ddd\u79bb\uff0c\u7b2c\u4e09\u90e8\u5206\u662f\u6838\u5c3e\u90e8\u8ddd\u79bb\u76f4\u5f84\u5c3e\u90e8\u7684\u8ddd\u79bb\u3002\u540e\u4e24\u4e2a\u90e8\u5206\u5f88\u5bb9\u6613\u5f97\u5230\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u90e8\u5206\uff0c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2aRMQ\u95ee\u9898\uff0c\u5f53\u7136\u53ef\u4ee5\u4f7f\u7528\u5404\u79cdRMQ\u7b97\u6cd5\u89e3\u51b3\u3002\u4f46\u4e8b\u5b9e\u4e0a\uff0cRMQ\u4e5f\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u524d\u5411\u540e\u5728\u76f4\u5f84\u4e0a\u679a\u4e3e\u6838\u7684\u8d77\u70b9\uff0c\u7ec8\u70b9\u7684\u4f4d\u7f6e\u4e5f\u662f\u4e0d\u4f1a\u56de\u5934\u7684\uff0c\u6240\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u5355\u8c03\u961f\u5217\u5c31\u53ef\u4ee5\u5728O\uff08N\uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u7efc\u5408\u4ee5\u4e0a\u6240\u8ff0\u7684\u5404\u4e2a\u6b65\u9aa4\uff0c\u6574\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6O\uff08N\uff09\uff0c\u548c\u8f93\u5165\u89c4\u6a21\u540c\u9636\uff0c\u5df2\u7ecf\u662f\u7406\u8bba\u4e0b\u754c\u3002 Sample Input 5 2 1 2 5 2 3 2 2 4 4 2 5 3 Sample Output 5 FineArtz's solution Star /* \u5c0fF\u7684\u516c\u5bd3 */ #include <iostream> #include <cstring> using namespace std; const int MAXN = 500005, INF = 2147483647; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[MAXN]; int head[MAXN], cnt = 0; int n, s; int dist[MAXN], father[MAXN]; int p1, p2; int q[MAXN] = {0}; bool v[MAXN] = {0}; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int dis(int x, int indicator){ memset(q, 0, sizeof(q)); memset(v, 0, sizeof(v)); int front = 0, rear = 0, ret = 0; if (indicator){ for (int i = p2; i != 0; i = father[i]) v[i] = true; } v[x] = true; q[rear++] = x; dist[x] = 0; if (!indicator) father[x] = 0; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != 0; i = e[i].next){ int next = e[i].v; if (!v[next]){ dist[next] = dist[now] + e[i].w; if (!indicator) father[next] = now; if (dist[ret] < dist[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ cin >> n >> s; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } p1 = dis(1, 0); p2 = dis(p1, 0); int ans = INF, p = p2; for (int i = p2; i != 0; i = father[i]){ while (father[p] != 0 && dist[i] - dist[father[p]] <= s) p = father[p]; ans = min(ans, max(dist[p], dist[p2] - dist[i])); } for (int i = p2; i != 0; i = father[i]) dis(i, 1); for (int i = 1; i <= n; ++i) ans = max(ans, dist[i]); cout << ans << endl; return 0; }","title":"1080"},{"location":"nr/1080/#1080-f","text":"\u9898\u76ee","title":"1080 \u5c0fF\u7684\u516c\u5bd3"},{"location":"nr/1080/#fineartzs-solution-star","text":"/* \u5c0fF\u7684\u516c\u5bd3 */ #include <iostream> #include <cstring> using namespace std; const int MAXN = 500005, INF = 2147483647; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[MAXN]; int head[MAXN], cnt = 0; int n, s; int dist[MAXN], father[MAXN]; int p1, p2; int q[MAXN] = {0}; bool v[MAXN] = {0}; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int dis(int x, int indicator){ memset(q, 0, sizeof(q)); memset(v, 0, sizeof(v)); int front = 0, rear = 0, ret = 0; if (indicator){ for (int i = p2; i != 0; i = father[i]) v[i] = true; } v[x] = true; q[rear++] = x; dist[x] = 0; if (!indicator) father[x] = 0; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != 0; i = e[i].next){ int next = e[i].v; if (!v[next]){ dist[next] = dist[now] + e[i].w; if (!indicator) father[next] = now; if (dist[ret] < dist[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ cin >> n >> s; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } p1 = dis(1, 0); p2 = dis(p1, 0); int ans = INF, p = p2; for (int i = p2; i != 0; i = father[i]){ while (father[p] != 0 && dist[i] - dist[father[p]] <= s) p = father[p]; ans = min(ans, max(dist[p], dist[p2] - dist[i])); } for (int i = p2; i != 0; i = father[i]) dis(i, 1); for (int i = 1; i <= n; ++i) ans = max(ans, dist[i]); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1081/","text":"1081 \u9009\u8bfe \u9898\u76ee Description \u5927\u5b66\u91cc\u5b9e\u884c\u5b66\u5206\u3002\u6bcf\u95e8\u8bfe\u7a0b\u90fd\u6709\u4e00\u5b9a\u7684\u5b66\u5206\uff0c\u5b66\u751f\u53ea\u8981\u9009\u4fee\u4e86\u8fd9\u95e8\u8bfe\u5e76\u8003\u6838\u901a\u8fc7\u5c31\u80fd\u83b7\u5f97\u76f8\u5e94\u7684\u5b66\u5206\u3002\u5b66\u751f\u6700\u540e\u7684\u5b66\u5206\u662f\u4ed6\u9009\u4fee\u7684\u5404\u95e8\u8bfe\u7684\u5b66\u5206\u7684\u603b\u548c\u3002 \u6bcf\u4e2a\u5b66\u751f\u90fd\u8981\u9009\u62e9\u89c4\u5b9a\u6570\u91cf\u7684\u8bfe\u7a0b\u3002\u5176\u4e2d\u6709\u4e9b\u8bfe\u7a0b\u53ef\u4ee5\u76f4\u63a5\u9009\u4fee\uff0c\u6709\u4e9b\u8bfe\u7a0b\u9700\u8981\u4e00\u5b9a\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u5fc5\u987b\u5728\u9009\u4e86\u5176\u5b83\u7684\u4e00\u4e9b\u8bfe\u7a0b\u7684\u57fa\u7840\u4e0a\u624d\u80fd\u9009\u4fee\u3002\u4f8b\u5982\uff0c\u300a\u6570\u636e\u7ed3\u6784\u300b\u5fc5\u987b\u5728\u9009\u4fee\u4e86\u300a\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b\u4e4b\u540e\u624d\u80fd\u9009\u4fee\u3002\u6211\u4eec\u79f0\u300a\u9ad8\u7ea7\u8bed\u8a00\u7a0b\u5e8f\u8bbe\u8ba1\u300b\u662f\u300a\u6570\u636e\u7ed3\u6784\u300b\u7684\u5148\u4fee\u8bfe\u3002\u6bcf\u95e8\u8bfe\u7684\u76f4\u63a5\u5148\u4fee\u8bfe\u6700\u591a\u53ea\u6709\u4e00\u95e8\u3002\u4e24\u95e8\u8bfe\u4e5f\u53ef\u80fd\u5b58\u5728\u76f8\u540c\u7684\u5148\u4fee\u8bfe\u3002\u4e3a\u4fbf\u4e8e\u8868\u8ff0\u6bcf\u95e8\u8bfe\u90fd\u6709\u4e00\u4e2a\u8bfe\u53f7\uff0c\u8bfe\u53f7\u4f9d\u6b21\u4e3a1\uff0c2\uff0c3\uff0c\u2026\u2026\u3002\u4e0b\u9762\u4e3e\u4f8b\u8bf4\u660e (Here put the table) \u4e0a\u4f8b\u4e2d1\u662f2\u7684\u5148\u4fee\u8bfe\uff0c\u5373\u5982\u679c\u8981\u9009\u4fee2\uff0c\u52191\u5fc5\u5b9a\u5df2\u88ab\u9009\u8fc7\u3002\u540c\u6837\uff0c\u5982\u679c\u8981\u9009\u4fee3\uff0c\u90a3\u4e481\u548c2\u90fd\u4e00\u5b9a\u5df2\u88ab\u9009\u4fee\u8fc7\u3002 \u5b66\u751f\u4e0d\u53ef\u80fd\u5b66\u5b8c\u5927\u5b66\u6240\u5f00\u8bbe\u7684\u6240\u6709\u8bfe\u7a0b\uff0c\u56e0\u6b64\u5fc5\u987b\u5728\u5165\u5b66\u65f6\u9009\u5b9a\u81ea\u5df1\u8981\u5b66\u7684\u8bfe\u7a0b\u3002\u6bcf\u4e2a\u5b66\u751f\u53ef\u9009\u8bfe\u7a0b\u7684\u603b\u6570\u662f\u7ed9\u5b9a\u7684\u3002\u73b0\u5728\u8bf7\u4f60\u627e\u51fa\u4e00\u79cd\u9009\u8bfe\u65b9\u6848\uff0c\u4f7f\u5f97\u4f60\u80fd\u5f97\u5230\u5b66\u5206\u6700\u591a\uff0c\u5e76\u4e14\u5fc5\u987b\u6ee1\u8db3\u5148\u4fee\u8bfe\u4f18\u5148\u7684\u539f\u5219\u3002\u5047\u5b9a\u8bfe\u7a0b\u4e4b\u95f4\u4e0d\u5b58\u5728\u65f6\u95f4\u4e0a\u7684\u51b2\u7a81\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570M\u3001N\uff08\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff09\u5176\u4e2dM\u8868\u793a\u5f85\u9009\u8bfe\u7a0b\u603b\u6570\uff08\\( 1 \\leq M \\leq 200 \\) )\uff0cN\u8868\u793a\u5b66\u751f\u53ef\u4ee5\u9009\u7684\u8bfe\u7a0b\u603b\u6570\uff08\\( 1 \\leq N \\leq M \\))\u3002 \u4ee5\u4e0bM\u884c\u6bcf\u884c\u4ee3\u8868\u4e00\u95e8\u8bfe\uff0c\u8bfe\u53f7\u4f9d\u6b21\u4e3a1\uff0c2\u2026\u2026M\u3002\u6bcf\u884c\u6709\u4e24\u4e2a\u6570\uff08\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff09\uff0c\u7b2c\u4e00\u4e2a\u6570\u4e3a\u8fd9\u95e8\u8bfe\u7684\u5148\u4fee\u8bfe\u7684\u8bfe\u53f7\uff08\u82e5\u4e0d\u5b58\u5728\u5148\u4fee\u8bfe\u5219\u8be5\u9879\u4e3a0\uff09\uff0c\u7b2c\u4e8c\u4e2a\u6570\u4e3a\u8fd9\u95e8\u8bfe\u7684\u5b66\u5206\u3002\u5b66\u5206\u662f\u4e0d\u8d85\u8fc710\u7684\u6b63\u6574\u6570\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u7b2c\u4e00\u884c\u53ea\u6709\u4e00\u4e2a\u6570\uff0c\u5373\u53ef\u9009\u7684\u6700\u5927\u5b66\u5206\u603b\u6570\u3002 \u8bf4\u660e \u6570\u636e\u662f\u4e3a\u539f\u521b\u6570\u636e\u751f\u6210\u5668\u751f\u6210\u3002 \u9898\u76ee\u6765\u6e90\uff1aCTSC 1997 Sample Input 7 4 2 2 0 1 0 4 2 1 7 1 7 6 2 2 Sample Output 13 2 6 7 3 FineArtz's solution Star /* \u9009\u8bfe */ #include <iostream> #include <cstring> using namespace std; const int INF = 100000000; class Node{ public: int edge[201] = {0}, ecnt = 0, score = 0; int child = 0, sibling = 0, father = 0; }; Node a[205]; int m, n; int f[205][205] = {0}; void makeTree(int x){ for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].child == 0) a[x].child = a[x].edge[i]; else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; } makeTree(a[x].edge[i]); } } void printTree(int x){ cout << x << endl; if (a[x].child != 0) printTree(a[x].child); if (a[x].sibling != 0) printTree(a[x].sibling); } int dp(int x, int k){ if (f[x][k] != -1) return f[x][k]; int ret = -INF; for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i) + dp(a[x].sibling, k - i - 1) + a[x].score; ret = max(ret, t); } ret = max(ret, dp(a[x].sibling, k)); f[x][k] = ret; return ret; } int main(){ cin >> m >> n; for (int i = 1; i <= m; ++i){ int v, w; cin >> v >> w; a[v].edge[++a[v].ecnt] = i; a[i].score = w; a[i].father = v; } makeTree(0); //printTree(0); memset(f, -1, sizeof(f)); for (int i = 0; i <= m; ++i) f[i][0] = 0; for (int i = 0; i <= n; ++i) f[0][i] = 0; cout << dp(a[0].child, n) << endl; return 0; }","title":"1081"},{"location":"nr/1081/#1081","text":"\u9898\u76ee","title":"1081 \u9009\u8bfe"},{"location":"nr/1081/#fineartzs-solution-star","text":"/* \u9009\u8bfe */ #include <iostream> #include <cstring> using namespace std; const int INF = 100000000; class Node{ public: int edge[201] = {0}, ecnt = 0, score = 0; int child = 0, sibling = 0, father = 0; }; Node a[205]; int m, n; int f[205][205] = {0}; void makeTree(int x){ for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].child == 0) a[x].child = a[x].edge[i]; else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; } makeTree(a[x].edge[i]); } } void printTree(int x){ cout << x << endl; if (a[x].child != 0) printTree(a[x].child); if (a[x].sibling != 0) printTree(a[x].sibling); } int dp(int x, int k){ if (f[x][k] != -1) return f[x][k]; int ret = -INF; for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i) + dp(a[x].sibling, k - i - 1) + a[x].score; ret = max(ret, t); } ret = max(ret, dp(a[x].sibling, k)); f[x][k] = ret; return ret; } int main(){ cin >> m >> n; for (int i = 1; i <= m; ++i){ int v, w; cin >> v >> w; a[v].edge[++a[v].ecnt] = i; a[i].score = w; a[i].father = v; } makeTree(0); //printTree(0); memset(f, -1, sizeof(f)); for (int i = 0; i <= m; ++i) f[i][0] = 0; for (int i = 0; i <= n; ++i) f[0][i] = 0; cout << dp(a[0].child, n) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1082/","text":"1082 \u4e8c\u54e5\u7684\u9e45\u5858 \u9898\u76ee Description \u201c\u9e45\u9e45\u9e45\u201d\u4e8b\u4ef6\u8fc7\u540e\uff0c\u4e8c\u54e5\u4e3a\u4ed6\u7684\u9e45\u4eec\u5efa\u7acb\u4e86\u5e9e\u5927\u7684\u9e45\u5858\u3002 \u4e8c\u54e5\u7684\u9e45\u5858\u6709\u5f88\u591a\u5c0f\u6c34\u6c60\uff0c\u6c34\u6c60\u4e4b\u95f4\u6709\u6cb3\u9053\u76f8\u8fde\u3002 \u62bd\u8c61\u5730\u8bf4\uff0c\u4e8c\u54e5\u7684\u9e45\u5858\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u5177\u6709N\u4e2a\u7ed3\u70b9\u7684\u8fde\u901a\u7684\u65e0\u73af\u65e0\u5411\u56fe\u3002 \u9e45\u5858\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u5305\u62ec\u5165\u53e3\u5728\u5185\uff0c\u56fe\u4e0a\u6bcf\u4e00\u4e2a\u8282\u70b9\uff08\u5bf9\u5e94\u9e45\u5858\u6bcf\u4e00\u4e2a\u6c34\u6c60\uff09\u90fd\u4f4f\u7740\u4e00\u7fa4\u9e45\u3002 \u5982\u679c\u4e8c\u54e5\u6bcf\u5929\u90fd\u4eb2\u81ea\u770b\u7ba1\u8fd9\u4e9b\u9e45\uff0c\u4ed6\u5c31\u5f88\u96be\u62bd\u7a7a\u518d\u5199code\u4e86\uff0c\u4e8e\u662f\u4e8c\u54e5\u51b3\u5b9a\u96c7\u4f63TA\uff01 \u9057\u61be\u7684\u662f\uff0c\u88ab\u653e\u7f6e\u5728 i \u70b9\u7684TA\u53ea\u80fd\u76d1\u7763 i \u70b9\u6240\u4ee3\u8868\u7684\u6c34\u6c60\u4e2d\u7684\u9e45, i \u7684\u7236\u8282\u70b9\u6240\u4ee3\u8868\u6c34\u6c60\u4e2d\u7684\u9e45\u4ee5\u53ca i \u7684\u6240\u6709\u513f\u5b50\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u6c34\u6c60\u4e0a\u7684\u9e45\u3002 \u5982\u56fe\uff0c\u5982\u679c\u5728\u7ed3\u70b92\u653e\u7f6eTA\uff0c\u90a3\u4e48\u7ed3\u70b91\u30012\u30015\u30016\u4e2d\u7684\u9e45\u53ef\u4ee5\u88ab\u76d1\u7763\u5230\u3002 \u7136\u800c\uff0c\u5728\u7b2ci\u4e2a\u8282\u70b9\u4e0a\u653e\u7f6eTA\u662f\u8981\u4ed8\u51fa w[i] \u7684\u8d44\u91d1\u7684\u3002\u5982\u56fe\uff0c\u5728\u7ed3\u70b92\u4e0a\u653e\u7f6eTA\u9700\u8981\u82b1\u8d3916\u3002 \u4e8c\u54e5\u6700\u8fd1\u624b\u5934\u5b9e\u5728\u5f88\u7d27\uff0c\u4e8e\u662f\u4e4e\uff0c\u4e8c\u54e5\u627e\u5230\u4e86\u806a\u660e\u7684\u4f60\uff0c\u60f3\u8ba9\u4f60\u5e2e\u4ed6\u8bbe\u8ba1\u4e00\u4e2a\u65e2\u80fd\u76d1\u7763\u5230\u6240\u6709\u9e45\uff0c\u53c8\u80fd\u4fdd\u8bc1\u82b1\u8d39\u7684\u8d44\u91d1\u6700\u5c11\u7684\u65b9\u6848\u3002 Input Format \u7b2c1\u884c\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u8868\u793a\u9e45\u5858\u4e2d\u6c34\u6c60\u7684\u6570\u76ee\u3002 \u7b2c2\u884c\u81f3\u7b2c n+1 \u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u6bcf\u4e2a\u7ed3\u70b9\u6240\u4ee3\u8868\u7684\u6c34\u6c60\u7684\u4fe1\u606f\uff0c\u4f9d\u6b21\u4e3a\uff1a \u8be5\u7ed3\u70b9\u6807\u53f7i(\\(0 < i \\leq n\\))\uff0c\u5728\u8be5\u70b9\u5b89\u6392TA\u6240\u9700\u7684\u7ecf\u8d39k\uff0c\u8be5\u70b9\u7684\u513f\u5b50\u4e2a\u6570 c\uff0c\u63a5\u4e0b\u6765 c \u4e2a\u6570\uff0c\u5206\u522b\u662f\u8fd9\u4e2a\u8282\u70b9\u7684 c \u4e2a\u513f\u5b50\u7684\u6807\u53f7r1\uff0cr2\uff0c...\uff0crc\u3002 \u5bf9\u4e8e\u4e00\u4e2an(\\(0 < n \\leq 100000\\))\u4e2a\u7ed3\u70b9\u7684\u9e45\u5858\uff0c\u7ed3\u70b9\u6807\u53f7\u57281\u5230n\u4e4b\u95f4\uff0c\u4e14\u6807\u53f7\u4e0d\u91cd\u590d\u3002 Output Format \u8bf7\u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u4e3a\u6240\u6c42\u7684\u6700\u5c11\u7684\u7ecf\u8d39\u3002 Hint \u5bf9\u4e8e100\u5206\u7684\u6570\u636e,\\(0 < N \\leq 100000\\) \u6570\u636e\u4e2d\u5b58\u5728\u94fe\u3001\u5b8c\u5168\u4e8c\u53c9\u6811\u3001\u591a\u53c9\u6811\u7b49\u591a\u79cd\u591a\u6837\u7684\u60c5\u51b5\uff0c\u4f46\u672c\u9898\u6570\u636e\u4f9d\u7136\u5f88\u5f31\uff0c\u96be\u5ea6\u7cfb\u6570\u4f9d\u7136\u5f88\u4f4e\u3002O(\u2229_\u2229)O~ Sample Input 6 1 30 3 2 3 4 2 16 2 5 6 3 5 0 4 4 0 5 11 0 6 5 0 Sample Output 25 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u9e45\u5858 */ #include <iostream> #include <set> using namespace std; const int INF = 2147483647; class Node{ public: int w = 0; set<int> child; }; Node a[100005]; int n, root = 0; int f[100005][3] = {0}; bool b[100005] = {0}; void dp(int x){ int t = INF; for (int i : a[x].child){ dp(i); f[x][0] += min(min(f[i][0], f[i][1]), f[i][2]); f[x][1] += min(f[i][0], f[i][1]); f[x][2] += min(f[i][0], f[i][1]); t = min(t, f[i][0] - min(f[i][0], f[i][1])); } f[x][0] += a[x].w; f[x][1] += t; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ int x, w, c; cin >> x >> w >> c; a[x].w = w; for (int i = 1; i <= c; ++i){ int y; cin >> y; a[x].child.insert(y); b[y] = true; } } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } dp(root); cout << min(f[root][0], f[root][1]) << endl; return 0; }","title":"1082"},{"location":"nr/1082/#1082","text":"\u9898\u76ee","title":"1082 \u4e8c\u54e5\u7684\u9e45\u5858"},{"location":"nr/1082/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u9e45\u5858 */ #include <iostream> #include <set> using namespace std; const int INF = 2147483647; class Node{ public: int w = 0; set<int> child; }; Node a[100005]; int n, root = 0; int f[100005][3] = {0}; bool b[100005] = {0}; void dp(int x){ int t = INF; for (int i : a[x].child){ dp(i); f[x][0] += min(min(f[i][0], f[i][1]), f[i][2]); f[x][1] += min(f[i][0], f[i][1]); f[x][2] += min(f[i][0], f[i][1]); t = min(t, f[i][0] - min(f[i][0], f[i][1])); } f[x][0] += a[x].w; f[x][1] += t; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ int x, w, c; cin >> x >> w >> c; a[x].w = w; for (int i = 1; i <= c; ++i){ int y; cin >> y; a[x].child.insert(y); b[y] = true; } } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } dp(root); cout << min(f[root][0], f[root][1]) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1083/","text":"1083 \u8db3\u7403\u6bd4\u8d5b \u9898\u76ee Description \u4e8c\u54e5\u6240\u5728\u7684\u73ed\u7ea7\u53c2\u52a0\u4e86\u5728\u8ba1\u79d1\u5c9b\u4e0a\u4e3e\u529e\u7684\u8db3\u7403\u6bd4\u8d5b\u3002 \u7531\u4e8e\u8ba1\u79d1\u5c9b\u4e0a\u6c14\u5019\u6076\u52a3\uff0c\u540c\u4e8c\u54e5\u4e00\u8d77\u6765\u7684\u961f\u5458\u90fd\u75c5\u5012\u4e86\u3002\u53ea\u6709\u8eab\u4f53\u5f3a\u58ee\u7684\u4e8c\u54e5\u53ef\u4ee5\u53c2\u52a0\u6bd4\u8d5b\u3002\u6b64\u65f6\u6b64\u523b\uff0c\u4e8c\u54e5\u4e00\u4e2a\u4eba\uff0c\u6b63\u9762\u5bf9\u7740\u5bf9\u65b9\u768410:0:0\u9635\u578b\u3002 \u4f46\u4ed6\u77e5\u9053\uff1a\u8fd9\u4e00\u523b\uff0c\u4ed6\u4e0d\u662f\u4e00\u4e2a\u4eba\u5728\u6218\u6597\uff01\uff01\uff01\uff01 \u4e3a\u4e86\u8d62\u5f97\u6bd4\u8d5b\uff0c\u4ed6\u51b3\u5b9a\u5c06\u6bd4\u8d5b\u62d6\u5165\u52a0\u65f6\u8d5b\uff0c\u518d\u62d6\u5165\u70b9\u7403\u5927\u6218\uff0c\u7136\u540e\u7528\u4ed6\u7cbe\u6e5b\u7684\u811a\u6cd5\u83b7\u80dc\u3002 \u4e3a\u6b64\uff0c\u4ed6\u8981\u505a\u4e00\u4e2a\u957f\u8fbe120\u5206\u949f\u7684\u5e26\u7403\u3002 \u4e8c\u54e5\u4e0d\u6127\u662f\u4e00\u540d\u4f18\u79c0\u7684\u8db3\u7403\u8fd0\u52a8\u5458\uff0c\u7ecf\u8fc7\u7cbe\u786e\u7684\u8ba1\u7b97\uff0c\u4e8c\u54e5\u5df2\u7ecf\u627e\u5230\u4e86\u4e00\u4e2a\u80fd\u8eb2\u907f\u6240\u6709\u5bf9\u624b\u7684\u65b9\u6cd5\u3002 \u786e\u5207\u7684\u8bf4\uff1a\u4e8c\u54e5\u53d1\u73b0\uff0c\u5982\u679c\u5c06\u6bd4\u8d5b\u65f6\u95f4\u5206\u6210K\u4e2a\u65f6\u95f4\u533a\u95f4\uff0c\u5728\u6bcf\u4e2a\u65f6\u95f4\u533a\u95f4\u91cc\uff0c\u4e8c\u54e5\u53ea\u80fd\u9009\u62e9\u6bcf\u79d2\u5411\u56fa\u5b9a\u7684\u65b9\u5411\u79fb\u52a8\u6216\u8005\u505c\u5728\u539f\u5730\uff0c\u5982\u679c\u5411\u5176\u4ed6\u65b9\u5411\u79fb\u52a8\u5c31\u4f1a\u6709\u88ab\u62a2\u65ad\u7684\u98ce\u9669\u3002\uff08\u5047\u8bbe\u4e8c\u54e5\u6bcf\u79d2\u949f\u53ef\u4ee5\u79fb\u52a8\u4e00\u4e2a\u5355\u4f4d\uff09\u3002\u8ba1\u79d1\u5c9b\u7684\u6bd4\u8d5b\u573a\u5730\u4e0a\u6709\u8bb8\u591a\u7684\u969c\u788d\u7269\u3002\u4e8c\u54e5\u78b0\u5230\u969c\u788d\u7269\u5c31\u4f1a\u6454\u5012\u3002\u56e0\u6b64\uff0c\u5982\u679c\u6cbf\u7740\u5f53\u524d\u7684\u65b9\u5411\uff0c\u5728\u4e0b\u4e00\u79d2\u5c06\u4f1a\u79fb\u52a8\u5230\u969c\u788d\u7269\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u8fd9\u4e00\u79d2\u4e8c\u54e5\u5fc5\u987b\u505c\u5728\u539f\u5730\u3002 \u4e8c\u54e5\u60f3\u8dd1\u51fa\u4e00\u4e2a\u5c3d\u91cf\u957f\u7684\u8ddd\u79bb\uff0c\u8fd9\u6837\u88ab\u62a2\u65ad\u7684\u51e0\u7387\u5c31\u6bd4\u8f83\u4f4e\u3002 \u5e0c\u671b\u4f60\u5e2e\u4ed6\u51b3\u5b9a\u6bcf\u4e00\u79d2\u7a76\u7adf\u8be5\u505c\u5728\u539f\u5730\u8fd8\u662f\u5411\u56fa\u5b9a\u7684\u65b9\u5411\u79fb\u52a8\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u542b5\u4e2a\u6570N, M, x, y\u548cK\u3002N\u548cM\u63cf\u8ff0\u6bd4\u8d5b\u573a\u5730\u7684\u5927\u5c0f\uff0cx\u548cy\u4e3a\u4e8c\u54e5\u7684\u521d\u59cb\u4f4d\u7f6e\uff1b \u4ee5\u4e0bN\u884c\uff0c\u6bcf\u884cM\u4e2a\u5b57\u7b26\uff0c\u63cf\u8ff0\u573a\u5730\u91cc\u7684\u5730\u5f62\u3002\u7b2ci \u884c\u7b2cj \u5217\u7684\u5b57\u7b26\u82e5\u4e3a'.'\uff0c\u5219\u8868\u793a\u8be5\u4f4d\u7f6e\u662f\u7a7a\u5730\uff1b\u82e5\u4e3a'x'\uff0c\u5219\u8868\u793a\u6709\u969c\u788d\u7269\u3002 \u4ee5\u4e0bK\u884c\uff0c\u987a\u5e8f\u63cf\u8ff0K\u4e2a\u65f6\u95f4\u533a\u95f4\uff0c\u683c\u5f0f\u4e3a\uff1asi ti di(\\( 1 \\leq i \\leq K \\) )\u3002 \u8868\u793a\u5728\u65f6\u95f4\u533a\u95f4[si,ti]\u5185\uff0c\u4e8c\u54e5\u5fc5\u987b\u5411di\u65b9\u5411\u79fb\u52a8\uff08\u6216\u8005\u505c\u5728\u539f\u5730\uff09\u3002di\u4e3a1, 2, 3, 4\u4e2d\u7684\u4e00\u4e2a\uff0c\u4f9d\u6b21\u8868\u793a\u5317\u3001\u5357\u3001\u897f\u3001\u4e1c\uff08\u5206\u522b\u5bf9\u5e94\u77e9\u9635\u4e2d\u7684\u4e0a\u3001\u4e0b\u3001\u5de6\u3001\u53f3\uff09\u3002\u8f93\u5165\u4fdd\u8bc1\u533a\u95f4\u662f\u8fde\u7eed\u7684\uff0c\u5373 s1=1 ; si=T(i-1)+1,\\( ( 1 < i \\leq K) \\) ; tK=T \u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u4ec5\u67091\u884c\uff0c\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e8c\u54e5\u80fd\u8dd1\u51fa\u7684\u6700\u957f\u8ddd\u79bb(\u5373\u683c\u5b50\u6570)\u3002 \u8bf4\u660e \u6837\u4f8b\u8bf4\u660e \u4e8c\u54e5\u7684\u79fb\u52a8\u8def\u7ebf\uff1a \u4e8c\u54e5\u5728\u201c\u00d7\u201d\u4f4d\u7f6e\u4e0a\u65f6\u505c\u7559\u4e00\u6b21\uff0c\u56e0\u6b64\u603b\u5171\u7684\u79fb\u52a8\u8ddd\u79bb\u4e3a6\u3002 \u6570\u636e\u8303\u56f4 50%\u7684\u6570\u636e\u4e2d\uff0c\\( 1 \\leq N, M \\leq 200\uff0cT \\leq 200 \\)\uff1b 100%\u7684\u6570\u636e\u4e2d\uff0c\\( 1 \\leq N, M \\leq 200\uff0cK \\leq 200\uff0cT \\leq 40000 \\)\u3002 Sample Input 4 5 4 1 3 ..xx. ..... ...x. ..... 1 3 4 4 5 1 6 7 2 Sample Output 6 FineArtz's solution Star /* \u8db3\u7403\u6e38\u620f */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {-1, 1, 0, 0}; const int dy[4] = {0, 0, -1, 1}; pair<int, int> q[205], tmp; int f[205][205]; bool a[205][205]; int n, m, k, x, y, ans = 0; void dp(int x, int y, int l, int d) { int front = 0, rear = 0; int i = 0; while (x >= 1 && x <= n && y >= 1 && y <= m){ if (!a[x][y]){ front = 0; rear = 0; } else{ tmp = make_pair(f[x][y], i); while (front < rear && q[rear - 1].first + i - q[rear - 1].second <= tmp.first) --rear; q[rear++] = tmp; while (front < rear && i - q[front].second > l) ++front; f[x][y] = q[front].first + i - q[front].second; ans = max(ans, f[x][y]); } ++i; x += dx[d]; y += dy[d]; } } int main(){ cin >> n >> m >> x >> y >> k; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; if (ch == '.') a[i][j] = true; else a[i][j] = false; } } memset(f, 0x80, sizeof(f)); f[x][y] = 0; while (k--){ int s, e, d, l; cin >> s >> e >> d; l = e - s + 1; if (d == 1) for (int j = 1; j <= m; ++j) dp(n, j, l, 0); else if (d == 2) for (int j = 1; j <= m; ++j) dp(1, j, l, 1); else if (d == 3) for (int i = 1; i <= n; ++i) dp(i, m, l, 2); else for (int i = 1; i <= n; ++i) dp(i, 1, l, 3); } cout << ans << endl;; return 0; }","title":"1083"},{"location":"nr/1083/#1083","text":"\u9898\u76ee","title":"1083 \u8db3\u7403\u6bd4\u8d5b"},{"location":"nr/1083/#fineartzs-solution-star","text":"/* \u8db3\u7403\u6e38\u620f */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {-1, 1, 0, 0}; const int dy[4] = {0, 0, -1, 1}; pair<int, int> q[205], tmp; int f[205][205]; bool a[205][205]; int n, m, k, x, y, ans = 0; void dp(int x, int y, int l, int d) { int front = 0, rear = 0; int i = 0; while (x >= 1 && x <= n && y >= 1 && y <= m){ if (!a[x][y]){ front = 0; rear = 0; } else{ tmp = make_pair(f[x][y], i); while (front < rear && q[rear - 1].first + i - q[rear - 1].second <= tmp.first) --rear; q[rear++] = tmp; while (front < rear && i - q[front].second > l) ++front; f[x][y] = q[front].first + i - q[front].second; ans = max(ans, f[x][y]); } ++i; x += dx[d]; y += dy[d]; } } int main(){ cin >> n >> m >> x >> y >> k; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; if (ch == '.') a[i][j] = true; else a[i][j] = false; } } memset(f, 0x80, sizeof(f)); f[x][y] = 0; while (k--){ int s, e, d, l; cin >> s >> e >> d; l = e - s + 1; if (d == 1) for (int j = 1; j <= m; ++j) dp(n, j, l, 0); else if (d == 2) for (int j = 1; j <= m; ++j) dp(1, j, l, 1); else if (d == 3) for (int i = 1; i <= n; ++i) dp(i, m, l, 2); else for (int i = 1; i <= n; ++i) dp(i, 1, l, 3); } cout << ans << endl;; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1084/","text":"1084 \u4e8c\u54e5\u7684\u5ba0\u7269 \u9898\u76ee Description \u4e8c\u54e5\u517b\u4e86\u5f88\u591a\u5ba0\u7269\uff0c\u800c\u4e14\u5ba0\u7269\u4eec\u7684\u5173\u7cfb\u5f88\u597d\uff0c\u6bcf\u4e2a\u5ba0\u7269\u90fd\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u5b83\u76f4\u63a5\u8ba4\u8bc6\u7684\u6216\u8005\u95f4\u63a5\u8ba4\u8bc6\u7684\u5ba0\u7269\uff0c\u6765\u8ba4\u8bc6\u4efb\u610f\u4e00\u4e2a\u5176\u4ed6\u7684\u5ba0\u7269\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u5ba0\u7269\u662f\u8fde\u901a\u7684\uff0c\u4e0d\u5b58\u5728\u5b64\u7acb\u7684\u4e00\u4e2a\u6216\u51e0\u4e2a\u5ba0\u7269\u3002 \u4e8c\u54e5\u65f6\u5e38\u62c5\u5fc3\u5ba0\u7269\u4eec\u8054\u5408\u8d77\u6765\u5bf9\u4ed8\u4ed6\uff0c\u4f46\u662f\u4ed6\u542c\u4e0d\u61c2\u5ba0\u7269\u7684\u8bed\u8a00\uff0c\u6240\u4ee5\u4ed6\u60f3\u77e5\u9053\u8fd9\u4e9b\u5ba0\u7269\u6700\u591a\u6709\u591a\u5c11\u79cd\u4e92\u76f8\u8ba4\u8bc6\u7684\u53ef\u80fd\u3002 \u6bd4\u5982\uff0c\u5982\u679c\u4e8c\u54e5\u6709\u4e09\u53ea\u5ba0\u7269\uff0c\u90a3\u4e48\u4e00\u5171\u6709\u56db\u79cd\u53ef\u80fd\uff1a Input Format \u8f93\u5165\u5305\u542b\u591a\u884c\uff0c\u6bcf\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8868\u793a\u4e8c\u54e5\u62e5\u6709\u7684\u5ba0\u7269\u7684\u4e2a\u6570,\u6ee1\u8db3 \\(1 \\leq n \\leq 100\\)\u3002 \u8f93\u5165\u7684\u672b\u5c3e\u4f1a\u6709\u4e00\u4e2a\u6574\u6570 0\uff0c\u8868\u793a\u8f93\u5165\u7684\u7ed3\u675f\u3002 Output Format \u5bf9\u8f93\u5165\u7684\u6bcf\u4e00\u884c\u4e2d\u7684 n\uff0c\u8f93\u51fa\u5728\u8fd9\u4e00\u60c5\u51b5\u4e0b\u7684\u7ed3\u679c\u3002 Hint \u6b64\u9898\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u523b\u5f97\u51fa\u7ed3\u679c\uff0c\u9009\u624b\u7a0b\u5e8f\u4f1a\u7ecf\u8fc7\u4eba\u5de5\u8bc4\u5224\u540e\u8ba1\u5206\u3002 Sample Input 1 2 3 4 0 Sample Output 1 1 4 38 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5ba0\u7269 */ #include <iostream> #include <string> using namespace std; string a[101] = {\"0\", \"1\", \"1\", \"4\", \"38\", \"728\", \"26704\", \"1866256\", \"251548592\", \"66296291072\", \"34496488594816\", \"35641657548953344\", \"73354596206766622208\", \"301272202649664088951808\", \"2471648811030443735290891264\", \"40527680937730480234609755344896\", \"1328578958335783201008338986845427712\", \"87089689052447182841791388989051400978432\", \"11416413520434522308788674285713247919244640256\", \"2992938411601818037370034280152893935458466172698624\", \"1569215570739406346256547210377768575765884983264804405248\", \"1645471602537064877722485517800176164374001516327306287561310208\", \"3450836972295011606260171491426093685143754611532806996347023345844224\", \"14473931784581530777452916362195345689326195578125463551466449404195748970496\", \"121416458387840348322477378286414146687038407628418077332783529218671227143860518912\", \"2037032940914341967692256158580080063148397956869956844427355893688994716051486372603625472\", \"68351532186533737864736355381396298734910952426503780423683990730318777915378756861378792989392896\", \"4586995386487343986845036190980325929492297212632066142611360844233962960637520118252235915249481987129344\", \"615656218382741242234508631976838051282411931197630362747033724174222395343543109861028695816566950855890811486208\", \"165263974343528091996230919398813154847833461047104477666952257939564080953537482898938408257044203946031706125367800496128\", \"88725425253946309579607515290733826999038832348034303708272765654674479763074364231597119435621862686597717341418971119460584259584\", \"95268202520385449790227094691687836722278710954949736428196756305746453532341035148366531266372862653739009088659598082113309304400438624256\", \"204586909944926298207861553173799965921067126517774603507480126827588404754232387878919170016875623577048105576068684204467114231315623298308706926592\", \"878694093745349914731889727208157807680003171098920968952145189548012830636076748530741378813207711246134152874638123892704663922045456803250047261786444398592\", \"7547924819767483287594694542205326068855891655862820018679189530528628155893698967796630219069788201405972928386025644172169109953194652176102437455457970998547197198336\", \"129672361263353660216004848405397154497075914498088480263529787446798464815868889966259599220355751574955667311875199310825316757090836792227021420332597263591744872066219249762304\", \"4455508410978470003213152055317479855991723332650114280703483486331017198541367912550307040027205813596014620050254013798901452927850711294962075802234712748298505435020109941966616435621888\", \"306180206751230090930313674296749763317292930219833760674864513181351793147422958983304199997791891477494238067606067864147691875149221011750587805454462256284237767964756224079011437145490032917741568\", \"42081087200752140195116730773102052524009718837902621183664949269856744858385083976643391056195246283737633254986683196506525739229100562028667655727478159896469450443625002559600024194689577683162985133342982144\", \"11567161173227696466220457283329529101751379197153495724502457893891478829937149071434453800538222228465001645119757350054456753856800058471020811256328606811309950183460999195585736337722940242137574318489684508433109221376\", \"6359114105601017351375465630036218352726964545083913061809864302427743340641476112983635151514041188995967358659226381513838435962182371853731281705837980150384424607870600516842502175922529566100381861494213531965265765000213275082752\", \"6991919901710702396948942815573257427744311018004588489866790612959056357721564695830748688904669995738081555372234543689358610668809196548322563461899302515136978058611651369187392760821440875968116963440793130046454847480988052748303630065467392\", \"15375394465098365435098131065240195173750887603455691084898736566282027607324662718653380384318359771738669872579070523864682029424324656980343742654131923883848453279046887366030428581980234722002609397042921130626427482776226373410811403774539364168814821376\", \"67621699984704009571087635348261788647460730411971168452281282746962798999895717916292043207408657855232972628889146834646084600650980317820241001687549180689983916950502853108787655643356237905731863505593837387547463783553663104052737827256888296815897621036524900450304\", \"594806763388137870319868932592503661181879874998563369872608575294390559331829154567126246824792929668641338543467328561106071308881273503814138669414317911219402066314092130747535752627679688399993515689603622744525243838714230998285264232171322066511990049433899384262102238508351488\", \"10463951242026625501784363274596214619943325701401522513836100192928357652762255136769619473700702276949844553770347735730521468871772581157963359677917896206658361141741863952608795675733168160935829452838892433190712974942475048711118429563334205007874224852816312589287727030417085994911901155328\", \"368167554019320956145827247050509963076959450983143444578072117098399777382502455552633802915095691807005512740224345254318634273382517137823997743877511866703540358482988273801636313118482363728678083259725882776454656507629131210255280738244476783496709369751571318821222548711309212127848471930415455355797504\", \"25907488423318455274080473672019976083009208996271003791416218114322853582878049179546761491016196610119349803222490393175612695149120594742502991139032865749979736985340247224801444473477196529096332604358326020598992443433363048888842556850935198901353471923472154386768107635993449205071378228596636214817388982756553261056\", \"3646154850293767810262810894999553363628589110640769385457986485984919161321600546344826908488589572223649058216506920510786720770519258252897810249930214560211056122090333850686659187132094273815095247787669459869137017783625755540375408272361426098383313551230976557640520636974573279383371834513917048967432546435999569365350430111956992\", \"1026301351570055077911628972867042177680735585635225345203536190737910863123857244548313982876228994987864700400759811456244128889754306386459557887432298148719591734971030611474690885904247396313959818854940592795291449937598794070517570167551607950979266237997797283563645242105244737520881371410960067902176629829514256225641238164014573644333472284672\", \"577756298062641319815321284633539861082132919998722885657507672188606317696301924134068233518707877841769252356274834883678320922291785288952259324960085933885572481476441044041666245632947630667669900623389069655523344952222114179660086674251300523449279256078271770682664276058349275922600493471476178420154378012048571333436567365397136152469165480980158369042006016\", \"650495762166495477049126323135876318273689681848540624671370401580424011707162281131874777891951503105221076274206308369224621272710248847898644721591374081392315437731137521644741106470103228306068513445077567577759224701817392098928890368445616786745312044636747096695167005610121205887220109397673253742184348518525369694090203109381704783091461721987447307918039340904839741702144\", \"1464786236049590434905743465154834598132355497608894876510808585746419735067502787890582396494347558422474842415011089660246867245007266628607389880573882877099589550204678203845246689309630827338361387275704277378981317198263843596236997858716498559366445563601411902505934820064618988319029356625117742223082330892236724944835950440451959043477212107968975925814225544648469704696327244310651076608\", \"6596810746850441581553741638437133878444100984914995111203228311198422920021730076302736770058507457561739633654821527052663625754699898928864908678172201480861483296508425461830100080632973981464823469287933878068177995869539554196618389179088255964611967766110824001442691305558890492766731389138330826914817901785290963600400486344007295383644067266812831967815359419564822489294496368074103199128409309873963008\", \"59418788842699007286030480482037551781086816518719458901529650548505461981736007647325052554252104577614821998495391611146285973896536304263518428421038283628014629967780363129922753302892370100289203385250328504710452844933297300223410448320574275700175842947863734545488809774714537227937142556380919033925693467413145184453004990132273599027454926341233079086397901429129121226567105760262121249035781279641457326197323348312064\", \"1070393741163144887106615725518187221164827267699838924941429042678015413882651446929712001300151465871728577307205707021448851664333385933136430832515358732818320497413305015116049899373739367567209398371486986269029698657375971164924756243534674819543255950500591340656293625482134115970340292836556047012322113544254716741475859208792966031290424379672317719493307898931567517548584798871734411473994613033976601216732790555673242528784890986496\", \"38564998830736461475232360560156337966477348543296912889954776563675952005803759329026012158190250656580460811860874628507378311411897292577254418389448910905327056052797875798842792071073082430615801921085131131904757124588213704965920153847872450901008531674129047768773427247462524176465028689131927919136292147469532989878308252810375908959339599706002710056647586337338708479719120400093637067181749947785834158813571780515974374915817776558307508219923136512\", \"2778901029818375590546117527113114484672357455708956458559767524713958201136583184473289527084437311422003736261722974999190979804089170182702556345446090853597627957791428943237561460453948820826044402874700085219613186824681247053637361670079745545538760409994919879728163876182404159565945053379193278698412233683308535462584192461927046046954945918295926157611800368404072086536709250328493882019435613967167210380399155555522069960451187550123144941460117476399723285873426432\", \"400481844556464920523193301963548462516578084749184743083267818116741738265896446803172276592132293252437641736702255678378020196583340296017305874056519669809172152689985358609594809953605859607651136943082150984660224920236376533603437055104197777495922382739000180430899893144169886679392314610966836210270498841529621493656328107364628256418118251142035446109798082585681169855601232173112571965711982733300383206840363094872481786693475424067353434014392840965058481963714484088640289118355456\", \"115431032698441259178673461431539816804206560773290015329752057694361406287772982036348831580901053883786820225009164463194923913410481248523137503562832299161248644837345953402272735282023494552277991382048997937502814909766236452236042332348226712434481947847353513149957685283099674458330104764410900543839986538076131534512057453216182889638360661447159929719038137745297045422073030824702000367475935702409104944531286067327756014628229036477812226374985599170883462080044700596715126592005803474078444367642624\", \"66541459948504530753768001471967959005419270466392022376423196257352976210252231110776428917476541274201459799058134101431331651507589475543199220149255661274003622762600440522835716155938101196289870455661584211035932845926991202557502792508928257976034266748831325772712875897333588717997864632732269693862392376895484988100730881126788959023903443606984779460581668713024441641390541816676610856286270482222156605510545493102132623215776624360768719348650259733692284804333540615561426033624780283661594114483349878253572218421248\", \"76717080122566093821769685096126348533333473476467287384688464345938248178907664863997779681772756752248435944393141184684335502950038499120052644845523026290523967017049073841718549772543323063556827399978478369606041313091683152436264099738986001869449728241878051097299490346519709940072925771948423485287163683973638746946665903940559428339549671501951366758811934677713877697895985005675231034179471691071272017966072759772829253585757141696413574898893832700332786265611996951692169618777516061171657897591184709381293230866625925902597785387008\", \"176897542887905871219682320710977054236195649885063012362481396897734368357286640762534683869872454244965040941272673502081845723150073431314902876590063750291880747723373712553100967508591749025216728994450514913101518001942052715995996702853037108622706150538094527668150620325050600397804418215191951248956872701409360022148099889945949951861965724898241732379974444442496212430718580253162145373014620079716222565944061670809250442497036511157273485606161593361700328707960218011162454162007820030744669545335519576035998639857914596707003622015954868692249187713024\", \"815795925230314728472279878236737085279030008004087855200500253014521127932527128885526410079762726469052612960044757453969861227317756805998981185503567039023299711652054131188006022549457417220933970982834312592735950018140458892761438537780953919908520972424194333073566878903608241070602967242198518658785846712295881224990958086451508342599371247161586427138348503778645201994004844323438189596157833085813059876353232318194433926472472721167826033215849712613785917626426916362350843199290384456011109377462267805156630427320614561083409274195307889411889718484406121375645508304896\", \"7524389324549354397801356452497913315011856161220801079509832008387666589604883373478014222580188830567037081935247887471482015360231314985337371942258260203939385162133586803144818348737122953633073095311149299883377463508309942219401299471541246964546345431980238535104248587410994668651719506647795652245245554349367125874876857244463618620318409144382509135849823322281027831591776097430363314021419414112824899028177671521886101096498126608165633326609228360352179238517061393227845320505045325556800426634899317480155864592599566076697068950579585675093167699329114669170699282474246401375197684826112\", \"138800484180914219712302326702802178157199288232020595807277716126392223926378591106707444859275463719229793836868708566284214501034414350853953266220225267143110257976471425551046069188570083369926289319954847285366348113154356458064601023126402119434759466643127870774164330686826589960109594089450465218173504187629454166226956526893875704969830626191585408807750322734960949314956738111993543735454414687779759714418712814531990126168027465140158764806953148937003185611158186683710455705012527082070237294364612667375625499788792257633923591324431260942827864659312843059529051940423114231494336335031596966318114835791872\", \"5120834017984591508986196650065047859699487038531864872635535284283315978236936642420834010902075350279505030004929465260242709345543639607773292077878134208602538275675583291265091714165339973428948005412040306127424871883645428230099148597465376635988368766640399372989825771523406030249994650100922593829267846687164394890395819287595146104752914215989543479798744485929580105447067545921706479084744307701783961846379120774460652838797753591500884374455393738762296647298620272890585944839720089999678022333082241138676080978538250644075914296491130999134389552091536501062762239568676983303712605272693429283100038671180467889093013820932096\", \"377850858294830139838638168215802092780038016602930573386515946416793198547039558262312467737983791635617168394411969746507772874148609641823047539163751702795222543019832005050328750907817266011479872405194806971268312167361692167252264172308895865348006664059299281805475888130387673484492108151111580147260086383832520506586231416515603233997674460633596201408249791703064288265123527797821759134838692448305207214785761264716189372084001112451765465433790033294520780568581946672132819009648620644554402766169507017541323003802706124203538173216779197391804429690913463400974547381070314833068900826395193921989122329834973335902668475423445184142471801333612544\", \"55760944647969803670700104936214276703418163826995146359366204907044372012038677422264811105212208511896356887262636526183807942536962683892431622381836246229948915236688130772335083840340164566252593033456468067431824060655193648039047729492243521453659694976501348803027093149539558317506748282678449645476135444887620474073150584355618406489856724494778877248633096276333595253012324971556730152755517558771607015456132912441957343723080458999749642050073369491042934979499196330203687831072108842525817786487718330792237747903510779174647553481994747676505530130774120520992243739532835809026595726937806053709668585200132001928488893296032814032593470714031341128788015283655671808\", \"16457726003670133055417812568315364737988338091091158251312218326569690437329616374734311914582020944472605890775510313408995229945334428903149322954095977105538611859157732272142218910153195403882467339866867514689726296672183682245219818625526941796560720064398728108321973000668550555252478306592014867281505767941252819608443162177328479455349999796039100621984127936729292132133658786719597197026368569007070051265672548312538134671161616981076484145578090055142565698834977734201790225311549466577004090807674343450549348281679151820330720056062429425106600701862306503156298835813445970932240447683526593536474768158583387967420140597105075176709672146585790993414230521376105364124607719448434966528\", \"9714926707998003497718782308204867881257332841251319104019251661662078248472412849177443834719209846072890969112505190791521670568847217287900651388254009260893186449634906395947258912533825379952975574267692934453193448473582640346042005495779590606640145643546455897110212759693094531702427850930065930059087543375832598108458827966338082930996711422212365503397867678374095016967422223554998394728346746184104609217211434235921413989212902495715550346122809777850604006668985053310528899731071820378305013097600934873846566724277063928654788793525614245817619281114401978980664096560907385299343778407890641151612145820588886332311587915398642804667189516333751031708296465506171453584391360087376886911691929540273723408384\", \"11469361067346228139061290587410929131577014568110496688276418026955029594788581734004182558070243437294012019588007382083610607182844994696799404722615974341317582970970611119434169515561820251265423739294548120506992391634591611979489654468463805254079641813986025304493914559074598262421276707860129809170482330724144138654242163986215204652850047416839186796163611459903547291938328181880669569697402627328163780396917201828272931792001080746707586621220450566380523358637421182469701231595854399029891888218578194053518468936172836983839399973914348397348853954542155795507799041130970804676688024813219676288924903523361447196493001392106550459363194374483729803668023599952850411152543047134333298142753046466271137690851320100397548574867456\", \"27081263142182923705501438690346729644366169641890975200940224634899233357027305456098025828938256775730428250700042672061879467659775786109270214017400414730550717646764413685560504054752678761496333535462048459532310810850944499706114710087119300200386999778156133504707983214878525514030819131644566263775100878971333483921191196677604836038344345713681506795660383625847999025848387503252627087123810199602209736789251013592140350653789925166247304234275183401500965673264564118890108142386036612704878688584239891999402890249937747483538525730024451957228223487693576454809145508346713566109971233755721615615541699881507959564802699414518867803796875388820464217613358292766134784246846225933733964457118146376268664384930394850083875401244024404677211216194568192\", \"127887649376417730093987279874959223434721837246292331790917063950188729173028315759621896868158290081514515507040745144760792797823633908454006170576076502414693250894106361156560785379061367900176197886105345551337014727607175137429409356509566678878892301335749917768757736874986255879172148219235433109220536222947985410156430631198989839450653517682104192025553044438491302114330030708413109133455822728120385022163636885141373386501141437603043967266969398520991275859042260783846015712638067373948888022989044395018434846317186459497805536942698964388726979258686557435667015119532122951846919014762751763697421103190009550551618834333461563415885034137500289032913017481647033658280717154859412697249820107204787634625302450046563003063271237239035013300852448256747732484360232763392\", \"1207864697976360344004012227247920888639797409727122316897149158619548357003386839595277447480050222229755160424883841049667706398252985767648761505658798805705483818948145043846805798252718763198773949764524391311922585251930658943514880587114466091998359273880405562907971318653747449298492952317155131191389647143269756802329984760064400111534136685383016769482782470510189713148691904881460827613361492986302460604018243380460062237283777296680408995854722178672186340582248073608246597487997996727778923589063949568687445482828106340010509284144324249363087064053541676878960707338041805779222724163855812417132661743952010731862369503046986946390659365322689414219648115087529954241488153772440114952646316128087077458262160905070776858191151099418724403865049128440558534241986453577283804960401031258177536\", \"22815919062260124281152347745317946282499579478225597764574987977890436887342808688976104870501061001773054587258294277087629301404254109854698281411452483911515333869047289946682697200251295383986440024239768987066961455306194374925383606676134093060944618688873828831817047682632360199699859850429151216871375843121094838459770748652491707914440551120759984840014318213588376033324534706939152455147493348994191284132793119476478152895835885120922180961499244045197171870808185699701000954429438301547575023578186676196514302877768734218786100354676154662786362643297064588417951625865838644112663945438422903965631834834286845607775985393677609226691814900584152243827917896815053685577316437526380790714230190441356975781684843354219992565785219238182282944422109986937230806375424197394063092770725539384275108964882307216209608704\", \"861961051643870695033992674309167199578105149265233755210531854655231695397841004315959353027863558941657347500708643835423572563996478981306319460173986864777848780732983020805504470333843984052335038327425867973338726313713394015863184128736960592170557471580379096716220939019137394671906098154759362286405347117756282996324206888088511302786754450046253062823707670337933613136463847028931076142175904578261359112314542477854319529897272403096490917617306617230616929156849561255541209838477962351678643611991108950807979740003711227545873058144232220086179444498450303055818969391304322654078530378763631851290884183055211356745609244035732915526643359273101408520908814846151929353857331307333376242939350958475788986570007129909972502782539037568776176785630826524683118125938788719786452442536511157641824521635493463680327860150633805208792583897088\", \"65127935677153380382865185934274607003809960083882113575904452876844683838733438985378527792717887288633549869389571008816175507184003390016151103667922703813694168133543286906006619259801862725474132003554787212850475990051192824704286086540817697867429105927870186318285789727070512775058927469565476598274691716076624233000916216924267413077907582882858390035886551173428350967423049718850381838273593522869951186720847511491298899945704308588400058202402152809162079122392664547523094139833577784509259690805435447849929045565614525326648793526939236259772149276548447129383535568258395264132188956867234872718835130548777951150687288332054343674708520307204427672825585402265653936878224215857325219693714506068560692809753122953929706240310498642459877441196692449645157645608368089254403626888143912472399649232865837206145663257925780776465599877881580977029065444654317568\", \"9841855377288937415447390527231202153455842504453720133695252668347974830556252658165124696077028515425450817398864910351369537663145194651524976959489344422342678620249318340219396467577024661445943481570099095051466855916105352197401418823197333060719088251811727514193408994320463954214844162261862784685360298544690445126145717267192561783034685015351169199621832667438357641444674326219345728642642810383270263207024107718687791371935471036611514436885033062917586993481519048858779374906457859727159564998688713546817221409312620181458595605735567354514662070437659126186571537250777009752135321513030182853798578098183302050213033735441339449132035723102074102608058173098386835602150956587572082729353578408870524492053406609959895082296706792813195516720142380910984191192058619168004260360406908231467668856024213138928977873340747895988011573647696979952041806565288571629194205319609339346944\", \"2974518269629418528183287790477136251735910545127811453581427978652616595356264947596803694136956008490398064656516155566449480802126524149773164759834362082131166150716512353779536812482810691172500096955277388103877578185522501050975722169225735084006254948179019599295302692801913945714653547245381255101505823092605145670553437793402069282072525939401386025809950055516559950442695132557924347603342238606705629548222231798775806790816221090616893894075208306706441784819763638100453946855836708310557947239099829716518949394166020681049804222110845249797452263905896008961178967788697771854957750815454116222278431207930315307657684846475482296389849704058050160567727933075981675002752008068830293647504821134818557279858111732545257603978153335616168268017033759698373368401020455509630395172047291096383128279778093350191660686534827468465888318399898946663053750353392007034469364011320175688955268074582072057057509376\", \"1797985968535216664944496004358374343509215650341798479179149327882744856269384291198729303430246126786296404980032302297595321012017030109348902525782020152869169168103786838160971087949766031760966165088431500871032856892630935020296595275794596862255427336247497580566862623617828330908541493541620179354512119159465555098806510076367231285395350427706814288025394425311199341223803743711901601363242903937561139477254670558878981639393540138916953147434506441014886808593769334222234806383248792522888870969370949886460255917591946332579170909412934639579841074787276447361698764837594275020389043099798673018624087957854927708503877067844690693442538677396545931297397648367060721363215700703756001913096856289455202558557910153695779883053213934571432082681799264975524318394406468304991326159530064043518011450002265972635234478858907973613954232713746104325413245975244731376790951869506877730874537309836484170950393167194460275028036788682752\", \"2173631660667039668984700210504885053440928931228016968965086163132981468236861730220650615341556676372390169253173663975604972422799230677469382999040739918660505042707350940039158107159615121292539651123423839519892067444431141415696638802524213998886911802250235334571816037172981430612313299911451638833319256606144115247938014691467553565583171950286615569501171685975138361651226678322938521468241227063106367669095067595036366075438176281290762289972128921040048601125493529421744568045636939974591348776120862370258685194871440497997150914743247310031723729047398691202330795910597987059012621074699271039180200868097247527739438513318700030869621175396951306037350507573405975936434558250220627536245142479496350755496129335743086027107995603956511019080962065525636789266925387728572058586368191713971116529410717355420618449465142442751933353701890082063024439478090834757150128353040614478610732917566732586611767430096272067443300328432386109177489664665391726592\", \"5255518873824416903687803876194048725247752898708723075400668615965863831097504375635433308251233312048766247203558991200300620604352830581371079358415600051856585617870548568853727962171206228838685195506282971294399499303895277316297475177391396052015391373638242535040410011356735654520539030774295796715732427912629667212872847331320104357084583959675197253788558473621399678098642683473186288639035344063284608566440925823269704605624728610522888231646442049910695279679867245611325888962734642379522278023969951318701822462788591894615137353613973715030604692169572118664406895529953104274682423559238462070772015190463321220193526066575719162798151641256508174006193296918203760563494424336058173574113652876628387389451824223353697906827208646762120751479222210763512531024245609024917500334574939012212142182012886145075543595440047786301032733174842410966880567247632878258658501902293739821318940798139131150532395191264792406363668485361473716058166829221766502063622860809609374204952576\", \"25414129848153344382239046897534255136864521417635453001949051913908008017589994776563072587258641569635169539843558219339898856799795550740114907758401382615586013383249715747685160392075349258895929797263710613473430715202959682477495625471587772024353861775261592839627899201402421403611533883626952118240064757854923766827852704270112197847296922231727833551789394804850015287585616422446284637918585983652563298394561000416031695531401833364842751130703739822989388553144317621145745267154316694067048460653278566883611037700900712951971174897018912094363532275197525030498768913128642048052245473015542133101610800292377142229909140813067890327977587612374256490950151387690850702665871528622422488218998292603704602845544390430472959633468730170707212307541907704068706263624064757253792800438322442280680208276567472614596049578405156513315480908601331728074386844924953235857764254017071297807352372985532421088761665700077101926014576813351504491800867886066292771827600730820974245370379226881215895758057875963904\", \"245790382051771145194669866894836910650556797239594091009564556094208680880385711256968483532036630553012696778687561627507545193814498941635315835729920960696181542215264784065507701869720671223676101099353987093462192745536443134197781431963673038992527374561993263849109824317641227672017365759894960530209333364608880281716979214697744534329835952620212452175318901237502886135186934978829477739282741742463317312408182343727949724617066098419258568662187079326746979739256946508422770714367934068496850270170914550232625314799613867752312747219996567995096961698243188569100429655378495055153354475585733921880831879481810931891716484123049081788090773434225820431784823304849740004530328772651097505402025158298202188494201095511281651444752927982930763983954415168881036388577694117158262320578043318594452254802839305491844927280242797782517788247605610352883705938120703000495886781538988526418037366343673014976532093358437076518455391019224639618634791307581630232102879919570031098419290868853038999379573603903698174015732092112667148288\", \"4754277425205284348419700021630306277819594231233501230274079687799467644054135605503230129926332349420230389354913481405631900846560126740972623150513354604812764296700223272603691459770389554281239817726014489139642075985146416079527934723846940733028576245558806856190369354829628769259495000019520989386279686123550085284290723479476495490251306436556499879513551255369276501430084910060650993432598538521963629786218092168813008486686208663842405885584127376723206295073712408381830384872882201818580321523948863465001771326380631696080635169634702135509782794877790215871455710398557059080949521117364655342307459593315672499574566292033600369306924572956925857747918561084493161074930593618524757397139122151276957016232310604754600441814037150264405820812712473632113348468670018469205747317973765171453782809770173332276553416124997311925329492467790550540501909006793762652043767805766864940022827298142023240656641608308615139677412693510719636885245539823207642584410041148586299456069104425074059269820037128974415771475065750800677599200925738481518877425532928\", \"183922199454132071495017823964418310581035406572387504095987895436081451427269845904015231638351142645264081103180227541271451365150525668792523811951920983449796386090707905234081639758289351098916600319954314214739003095905554767950528555878593983004951826460936168704827155870671617785932969020911837828609522973050883825772466142655647998378335201711464031707332067150969028021867868389473054701483504799207493496645907024311973634384571281857910076605223416442905086352637873582453410486641390607011647949375681392616293062480185677371974876115847216728138297648805710092860746366490654417856746317198280144869511204123264164871277050086466424866703174359826517646856972142290028705846976532181422669511747014463404242288528973412024975676890338662938337757856074384364339356083599371465548188364416530842160345010023360362483494062918047030071997896814424896606706549895245984904287294230594215953285058745214997435008275358198968506044384302940532876166219914266007756627767084845862423632952768871427161354405086474339970874829101971565739027195569986512650622291178085460852417483570155618304\", \"14230290926106362696122823080900243390433637603738005980259256943076641934110047856047930936624261107065873276268866892129520861084943649470982048717667479189501485633082120086890043142529883906164212808832912392961907330376138246467342868411536805615807438750065284882454125993437721429983886048307606930604235628569909434642167805909036554588490943154103935654425049741224775566548184310090004630537149855892839604622098137866677563942134239018715827888851797693649972687262803167679273941031847686625493987462422961116672112718087518225845931540765028692301246265348320493394163085411775758928448982724437500928134715366069109427038422359115771379766765196397901369125451039366900914606586395405788872163194382539222468491685209309855588395152929300280637903265687859426941368397203392235565456592313650006533521900447920576960664398554574517989911235388198873021876268539325888745001742701006972571124700950509875664721962959074741875601534435168338346227795552921813004231344377034549191699793014816843400294624064798743130698839294408616753325638646891105123642086095450609986686265602874213403600381488503940327309049856\", \"2202030863513312636321648671199054913516907653916117901691073240331946949863609577429103609768169530057061150257812445918850882107295806716261922661873456575008462513930989865443088129815261641695694727139738398910795613789657579567145298371226907217165026098057292665267014375216701372544800681475251578425365803666392971936154604673186923792317585313347474824913333286141786013706495579188805111583422817277983447913522288753851140140298470878371671693168302912742449635443426252167133192325519362889999795065866161674664045744937691390513161259299795724130181676271790579219732523976512872421586460443531041590095088702197493073534521730651562660076260725779111547176801999555637621415828252121886867337943124107994539715634932451000531052857363478368528085250607996565755450014011136148530448605458410763120164515711184313904476263429889138719447777588955617173003740328837793642742694803800382429624785218054344673298995026566192583108066449617442357672139272143399705781655242683874485399562078829739034234890154629296748941812930969047270839666047356933906313878622053623830144119219493279649297348864882853168553417766003229354994299768397627392\", \"681495543421322523798250098264197076688919625958868418051257990807837505987067866825123436248548151617593050477933088878988725616693867642608945945631683668808920027335934509944595182753117263717153639384270889156418840143434508108959849341896430415323256371070439120964777671194974820410861700069983389120638933918384576328554056534884715070073463424017931484262224244178189712770038390094700448535327494765406085737371568739744341162316251925288406054781369086525369352729762667669545632444718852477943084555268217269638560935219999355178152037404795500578151227281876968952880289646845711858918761125794160153470339887122101679017501147006350697819037781317970228904772048069836759470844867315694361705735640487911731623505352045680782420840435221438759307816194240462082712870054773448930061307949400029335513342976500230415962364278988431128471484008507777022768323222041382259130004343803395915550804325522392895772799286658817920775143921572624046023809896700137235863078674317453334741645449227070394628081947440649638541663098093102136271335498004902830344217486971653700556946784724621786596785109259982139470453695479515213359593022702300618283691568046193527092150272\", \"421825309897901792033244672821110328299858989707320804064743460440378944278718899967483820889500393998461711016514890252423164387537957829397741981629563196442380706822615641303536830456737698720856576796868658302341222149714994387839750913288493530488399884211939106903442707727486907385104784548836801887386742034876056259719489444284360238544475786244576709606346211662844260424616033577969445316367204486111572367285640386091135291959984634422111712349759041118545253088840329164781300635291094309773199799826699372727611147119659553696450965456120066708558577226901489783972447442763036558587711792714453122484632779364568230182763680136226900406180666607672585851460988484857124096940950351734765101605500343045700786559855265307726320299273751542009158879475999601867487052671938980988256280155920054084490029016709123154004397781949851274185859499943694823590844099419935550431660671065019508782626806522506993199944432863289827772158833515744104897499056696354128803738029780167294572595638534858576429012401607594066492590155477361329834229701436120365111259179709996155203535570930542745295974256870862760463624390717318046431243895818155132716064271455360415503340367605714430365452122210697216\", \"522194440706576253345876316972208990580919049498421082022576245723338982949140665003069105356289960330012593457390089303605667555601975047929042951212257072969361472940671364497640560926303318696033977690013916299289897514430165053790577048324222670321529537703571049002002781496203041840885524183107689558500581565215216577563341157701608110023823872559743334999271082619563560280418676667879029748783809416089306700738269364207260585249367415340646003895272439817409712720628709186805339184886626135322714400892646570899815363346885190935443883452361028600618727769686519016015986764715716391321987102312006857869149534994401613005059522899531855293803271313823719971973219135479955395552948879584294859168854149701603115968970497705944630998036477284824110938251324804171310134265550546919153058666691227110757309673571239737301459200948415973231968942428964722213969080035992841969252161263696664840384740535815264710623196642175113986088252118165109143235875193394237324905378681185642555776110635771578478214224063683755982931585626906161982220149238402132222785443508999378746610588801774393984778889853240279610734678193984258732940104186823817787172451622424479651829089774622333472658481415909711059052348233311555046866944\", \"1292890812885812375326210375759313154211806521142431703162139930204968350236396725479547430643054992083384091678994104761926923090140278035592984448790716805009586451615907562797344555527547953445569311346246656769519102613509006067117867848915904121110567926032487744880576751263549555669836582853473577131677246570878306726999866626996407253193693750074690839456622301350210262608948487854303552851457588750397583838082565400229544094825591011830544878252598176845253713291152353908500013649150377819823624076948121475534934827830863105098168949697035713668331158385332977381594870339821974004772810156175706056012478014462296965405817213211526586897970505560483618297113724652703794740872652190327308714457458457671976780831051175817949061815796584223532376976086077476481020253820853076974471059429483166667385436819022696990718396965711803590967567007032387580746632670642413715993429910692606590587827599844803982723137238986268051229340705304873811721964082001288954293134307920127141244439259670441346023410871394876521183127283057449596610425438679047943453709142013860841099237821998572066845392465348422795746000762231545335664623042607618925127125687803489756219911499975270654928221265205667650525684108930707566429764080749180245487621238064939008\", \"6402085214782279240215667419755299131524078858723655272948045632556476258728081241282224086781391936405539025009341590521693193386436490558248164393639913596873843138484718638733705545361161459118962635989994244912935782863002854452377442507617461316723550726006230344853562913627216388293856589795406711937391467566905042511687052944700963643661331442779802427261444468463746079440195054078750317913034432559960393187084518849088424684193033209762743037198319778223351150580968633827175119987765536804793455915510742702612201851443845921999214636047945678379752799393177469410571489245952655702508168565110193630939307909000782817948038441995201513210380008881955309548003770230868600243884200147184249133532135457066512231145258757869051682728759963857462438544040369800435760020981848338630787860638556405691711659197515718952391739002729042333111853089655129001219247291883199006831601000416411759400499972543122010466340378214154214264753389820650904928827549477270321278381079187818606788531124987988392956165916193914784801268268235648908517360393026575942019266375548137727501265090469564111477799597596462831665874541952688731042519741567723389896236895946383694712621870846145560224747919013358384009198985492354234309963979256675597935679594702431599530353132865618694486622208\", \"63403180978367415821309274946297067883877259318587866180545192179873251234024057122438043938346934018064402935929079725551013124750893668732866656438958416877428659544947175649222226350410354053304037407285263027742656926195684920350873977031531977117393899620145508261471596492667990267374247119411938906051221560288163888494940827408883645041289107923326280594975299582732093176297559093243319651847663381189148739254118740760683251268770860610364971014257718132322662993400462723041979552544043247309413454403017490412923702397366293918458594927220825783569515516498613647493542268637194003350434213617513461273400338809813920895663463363247859385737241337948895731991543335318621562472121750689097894229554250127034442715997616911313974856673940304231994761018954589749398269172339562324862795012955362211949117823507377780394667326502146542683401056903289898178853920495032817341587170762830228787960209813642366205321384101719785933919351423732356316716472524486444036272429428153831673413788549230823082493754465058942259000583671702976617386677699167861858091938074365982017699085450997562670768862704782078193633647021017872847941986726359652935580704732361989006186837416869603398747869170555637398488742768464768452034024359320496406508094293240522745199848449629940597204965057665414817199919279965732864\", \"1255829381618851745843939813162800704298382133625846814224576543837929306862487043403613671691796278314758724772891576106178879232671738229170952547575146504508999388463189077390718663065465139512563257376721686308667894337081904473700501451284072606805263409406162948187574343746459682980041852684213198304781289243877974712637944889033542516361940449303697964287412064454816314869415430215941969303231295534182937231337233928794493597318564192804797309557098139190130815956634614416930803981119285633896897477273820223265909390628295335746137224340995704708759288876800112737285539324537940458904632694853367688632930078926069962806962151985488848240208636811697886816181397641065060234508220101117574005754861073847528126195807422137989781827241548062333268861770114890971921143176307587625777432801329694125042082997858291756521028910278742226462503170935773824014532726362279487804852642625914063586084317328008408237653234716716056792097957687674162407334579817410344391534511456377332909067033131887491200492635061656303435842265594631198130167892273698894118908473502560911713314815766049451261795858816213523278903054857664316894475748404017820593032620658376301987967016324223870860747215810014131438047371746755894742158573728541978843161985626931648804227861987028287101265196697102807792583599996464364915511454252370644570101252096\", \"49748527168543236721217601181701787859412164184544981614021132152531407544755875595715223534937387027814400236784519752457163875312653024878808819261897816182049857562175142502664920126662282397287500919615856683661037726718551357866517035838294570557312647785183961656447017236408492576412491933241124498007986482023687708270806909964726962454428889809121509126703306096801309583649294538265745551262893038667109768947942584564986046357259555432390720779636591426560199120727335150844849791136385442593615377298690191141619484579081882966457602567673475027107757696120192807009449746430724720362204881883533358914349307829848269869773943199352024084642105643418234794472904996993789612991098814405633839362168444219985270745390334404281633531610515239911600270124765918723756244113179536100218842580810350953235956905299884158637846183854907123681882696681963760189001542900172446562530778777599312587511581507032388059832452415715329931134942694903849614695379375686995163260981165532882315572043312707177653268134629524148679542470830862853196065894885604510044117513694327827461877798923014301568856988500200842727469644981284082974998272244853501444493758472723476216286626588118926382688627409464658264654757634470533785470480202198639301517931585656134842389907260888628356169810472955154515203224997997562067268287191747713068764885441400545692502662653596833677312\", \"3941484395354638233538289175687367867592105475775706532607033481929862522953984448984124904076414779518065278170783738324688922152389130205437011719923988459918771927989210378507306385597674277709820835943850912312152185369810430427235293842952042618038177698910452587876065686843021184453985614615401176263423364407780619503789421456129207959050468910855420316069710275776886905782248938603902750169283607018303335844945658961365762587223541329787394772159734244936768703203377414117876498328023783201742397734284557793518805392879159072376728619721788157628888344885071289254492212066462609897371427802672624420468887108637999413923906918609154894786217991242150407245961961210264630635727082083499613184110924860468687904057567797574662878324087753939198982072282100267692628525208200651528096222226725761759777593209326929086554425269126423894387884436123797407184297632756634823932612007791785650341799222376223152005096407550736174028700944082763172420809390328542708804075250570034803026246036242639836615637887046181963204853103334122812628083321526481217092301247280493561517877165608935730379717606928307804713776181202402762892404134887938937031472708163645278187958477215529193445999427556392813076702686366226841259047880288438181039317934007049986967628669913469712745089488991641441449029377170846478308256948772452974369303745729777296889496265230364682344462873485908123670305342226432\", \"624553132445188374261017074910616651175684707033259989385970576608272316008064282918553047835861650538769914221991117220314396825604654124698761475620179598269259451407347168821591908915006873583380941955761610066160419567573390994630710233968901049175302599016666711451478872117095481672759695244736634085608900894427917277279996666119899843535724293953977717958753458753357574723232246031618566245134658698123460418782651119733400238852030909225084923720522062420308747615009191365697834033073271039095844599773798762889402205099782304958420658723821787855439775874016767512412532198575938481672972682436959872295438912425558239249896718667429033268570400796096855935950685905131932457788106766442890916357395897157536035262349579159094919232732624415986912959633675763868654888183379449084913996554618036170262832802999896987764687885078128708244981252908659559465878438903039807006949176027373201571918960978899368559454220738639019793775514107863498115935799189994914365281539305546543929936288848983376399359033566087234260524743328530634575237604448475923058984710325860168462459215792962475145307334652023116341661884016135961156794587175220705121250776592668568939514651460613351346012177225037868348882433579230141987465079270609005162061040175430229143459252137656401517672603677784011449981446402694557290874473546041589279084003029095969861040882648929229818815574607038430536241540767276013988435192299755547347910656\", \"197928788304640974341464850666479258600695049180808534124773095918685736886422750739311447234778847629379668922704179983751531364810359217713950668062565097782274752622181167719275215689807351092393652552210337871389593058507678810223056187979434630641203353919939495644767541545786906958837361968513995391044381927429678621588331901314460099470258669197354576703557407380031846807594524889233271913479072348055039559544348544781413192221607714121652514827686561139424546526972239487807277994496241865504072090118208118502668454523872999822924264148549447534537779884400733379795206408770083054875651690478960015238056556281653478045174894788418982313952718858245870557399909731671315524677379965742000641203192670806788653922982959777967379801448037982832956836725494414074449883228976663077489903296666163245859454357672076855154287795385752729475959381491602479668526791941876464824655451499200095483798976893981760998404467355203056966910895989444496771910506370624957508433199903387685562868293528306920853313928386878452173404723245851705283387042199433227699011440553292089827210283867137777224255168276367800718781387589924414286880529284397361540991020952506223721979879403820291922270484166768214979758659415044167154680904882962898181811062835177741059706090419385648245030626512884839233314262775620355296399275958674182930499283811645655644832080683138115417619825958599349430173169550456628534028988718669931851398764813092655430959864659914522624\", \"125452273648412141401139200773089339811437122262323352216462286700734387627331522885709312904647210371328794107858418293356140610389233010890575674923332327423429917033308833625087865757067009121643735335562957720919464360279849562024268481514680519466433342816295305461792608710076067024418040646132922593872156786882042514851134725907407734998659047116141535192232282791034794601497425933135733739224548153792567839779141913680549722028773475603674523853169051845195421079685934332310882053907313995168923535704556709136009686053259752740308577712484995569783650846269720521608249582420017860918845622644663874987575160515268766971368721963159046529551370104575096202684311358624098672672476994761800126366704378281769378475834662925454186722285874859694872242026068795039642380038691501013387521486053366727435218916045301026547623117868196574350026663672938544838421549439678291079144887169351257353939537143880911795509769485297854345823362270660712007071953958048732807833151699233932553517365602355625760928908188344900652899469143373311896574182769657272933821876553379518700197938172155010185719146936187180903250543579433005278984692348282568379624191843385007057047580846112172322370992146748764340302424100769640802926078370838482052406435490036434092467614465282934547622486501083341846045800849550829377015688082924233744178977266360888077466658752803757886543953371541948150838050857811138739570190403175194723845806878286855221273591078542964296886759202533689916185534005248\"}; int main(){ int n; cin >> n; while (n != 0){ cout << a[n] << endl; cin >> n; } return 0; }","title":"1084"},{"location":"nr/1084/#1084","text":"\u9898\u76ee","title":"1084 \u4e8c\u54e5\u7684\u5ba0\u7269"},{"location":"nr/1084/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5ba0\u7269 */ #include <iostream> #include <string> using namespace std; string a[101] = {\"0\", \"1\", \"1\", \"4\", \"38\", \"728\", \"26704\", \"1866256\", \"251548592\", \"66296291072\", \"34496488594816\", \"35641657548953344\", \"73354596206766622208\", \"301272202649664088951808\", \"2471648811030443735290891264\", \"40527680937730480234609755344896\", \"1328578958335783201008338986845427712\", \"87089689052447182841791388989051400978432\", \"11416413520434522308788674285713247919244640256\", \"2992938411601818037370034280152893935458466172698624\", \"1569215570739406346256547210377768575765884983264804405248\", \"1645471602537064877722485517800176164374001516327306287561310208\", \"3450836972295011606260171491426093685143754611532806996347023345844224\", \"14473931784581530777452916362195345689326195578125463551466449404195748970496\", \"121416458387840348322477378286414146687038407628418077332783529218671227143860518912\", \"2037032940914341967692256158580080063148397956869956844427355893688994716051486372603625472\", \"68351532186533737864736355381396298734910952426503780423683990730318777915378756861378792989392896\", \"4586995386487343986845036190980325929492297212632066142611360844233962960637520118252235915249481987129344\", \"615656218382741242234508631976838051282411931197630362747033724174222395343543109861028695816566950855890811486208\", \"165263974343528091996230919398813154847833461047104477666952257939564080953537482898938408257044203946031706125367800496128\", \"88725425253946309579607515290733826999038832348034303708272765654674479763074364231597119435621862686597717341418971119460584259584\", \"95268202520385449790227094691687836722278710954949736428196756305746453532341035148366531266372862653739009088659598082113309304400438624256\", \"204586909944926298207861553173799965921067126517774603507480126827588404754232387878919170016875623577048105576068684204467114231315623298308706926592\", \"878694093745349914731889727208157807680003171098920968952145189548012830636076748530741378813207711246134152874638123892704663922045456803250047261786444398592\", \"7547924819767483287594694542205326068855891655862820018679189530528628155893698967796630219069788201405972928386025644172169109953194652176102437455457970998547197198336\", \"129672361263353660216004848405397154497075914498088480263529787446798464815868889966259599220355751574955667311875199310825316757090836792227021420332597263591744872066219249762304\", \"4455508410978470003213152055317479855991723332650114280703483486331017198541367912550307040027205813596014620050254013798901452927850711294962075802234712748298505435020109941966616435621888\", \"306180206751230090930313674296749763317292930219833760674864513181351793147422958983304199997791891477494238067606067864147691875149221011750587805454462256284237767964756224079011437145490032917741568\", \"42081087200752140195116730773102052524009718837902621183664949269856744858385083976643391056195246283737633254986683196506525739229100562028667655727478159896469450443625002559600024194689577683162985133342982144\", \"11567161173227696466220457283329529101751379197153495724502457893891478829937149071434453800538222228465001645119757350054456753856800058471020811256328606811309950183460999195585736337722940242137574318489684508433109221376\", \"6359114105601017351375465630036218352726964545083913061809864302427743340641476112983635151514041188995967358659226381513838435962182371853731281705837980150384424607870600516842502175922529566100381861494213531965265765000213275082752\", \"6991919901710702396948942815573257427744311018004588489866790612959056357721564695830748688904669995738081555372234543689358610668809196548322563461899302515136978058611651369187392760821440875968116963440793130046454847480988052748303630065467392\", \"15375394465098365435098131065240195173750887603455691084898736566282027607324662718653380384318359771738669872579070523864682029424324656980343742654131923883848453279046887366030428581980234722002609397042921130626427482776226373410811403774539364168814821376\", \"67621699984704009571087635348261788647460730411971168452281282746962798999895717916292043207408657855232972628889146834646084600650980317820241001687549180689983916950502853108787655643356237905731863505593837387547463783553663104052737827256888296815897621036524900450304\", \"594806763388137870319868932592503661181879874998563369872608575294390559331829154567126246824792929668641338543467328561106071308881273503814138669414317911219402066314092130747535752627679688399993515689603622744525243838714230998285264232171322066511990049433899384262102238508351488\", \"10463951242026625501784363274596214619943325701401522513836100192928357652762255136769619473700702276949844553770347735730521468871772581157963359677917896206658361141741863952608795675733168160935829452838892433190712974942475048711118429563334205007874224852816312589287727030417085994911901155328\", \"368167554019320956145827247050509963076959450983143444578072117098399777382502455552633802915095691807005512740224345254318634273382517137823997743877511866703540358482988273801636313118482363728678083259725882776454656507629131210255280738244476783496709369751571318821222548711309212127848471930415455355797504\", \"25907488423318455274080473672019976083009208996271003791416218114322853582878049179546761491016196610119349803222490393175612695149120594742502991139032865749979736985340247224801444473477196529096332604358326020598992443433363048888842556850935198901353471923472154386768107635993449205071378228596636214817388982756553261056\", \"3646154850293767810262810894999553363628589110640769385457986485984919161321600546344826908488589572223649058216506920510786720770519258252897810249930214560211056122090333850686659187132094273815095247787669459869137017783625755540375408272361426098383313551230976557640520636974573279383371834513917048967432546435999569365350430111956992\", \"1026301351570055077911628972867042177680735585635225345203536190737910863123857244548313982876228994987864700400759811456244128889754306386459557887432298148719591734971030611474690885904247396313959818854940592795291449937598794070517570167551607950979266237997797283563645242105244737520881371410960067902176629829514256225641238164014573644333472284672\", \"577756298062641319815321284633539861082132919998722885657507672188606317696301924134068233518707877841769252356274834883678320922291785288952259324960085933885572481476441044041666245632947630667669900623389069655523344952222114179660086674251300523449279256078271770682664276058349275922600493471476178420154378012048571333436567365397136152469165480980158369042006016\", \"650495762166495477049126323135876318273689681848540624671370401580424011707162281131874777891951503105221076274206308369224621272710248847898644721591374081392315437731137521644741106470103228306068513445077567577759224701817392098928890368445616786745312044636747096695167005610121205887220109397673253742184348518525369694090203109381704783091461721987447307918039340904839741702144\", \"1464786236049590434905743465154834598132355497608894876510808585746419735067502787890582396494347558422474842415011089660246867245007266628607389880573882877099589550204678203845246689309630827338361387275704277378981317198263843596236997858716498559366445563601411902505934820064618988319029356625117742223082330892236724944835950440451959043477212107968975925814225544648469704696327244310651076608\", \"6596810746850441581553741638437133878444100984914995111203228311198422920021730076302736770058507457561739633654821527052663625754699898928864908678172201480861483296508425461830100080632973981464823469287933878068177995869539554196618389179088255964611967766110824001442691305558890492766731389138330826914817901785290963600400486344007295383644067266812831967815359419564822489294496368074103199128409309873963008\", \"59418788842699007286030480482037551781086816518719458901529650548505461981736007647325052554252104577614821998495391611146285973896536304263518428421038283628014629967780363129922753302892370100289203385250328504710452844933297300223410448320574275700175842947863734545488809774714537227937142556380919033925693467413145184453004990132273599027454926341233079086397901429129121226567105760262121249035781279641457326197323348312064\", \"1070393741163144887106615725518187221164827267699838924941429042678015413882651446929712001300151465871728577307205707021448851664333385933136430832515358732818320497413305015116049899373739367567209398371486986269029698657375971164924756243534674819543255950500591340656293625482134115970340292836556047012322113544254716741475859208792966031290424379672317719493307898931567517548584798871734411473994613033976601216732790555673242528784890986496\", \"38564998830736461475232360560156337966477348543296912889954776563675952005803759329026012158190250656580460811860874628507378311411897292577254418389448910905327056052797875798842792071073082430615801921085131131904757124588213704965920153847872450901008531674129047768773427247462524176465028689131927919136292147469532989878308252810375908959339599706002710056647586337338708479719120400093637067181749947785834158813571780515974374915817776558307508219923136512\", \"2778901029818375590546117527113114484672357455708956458559767524713958201136583184473289527084437311422003736261722974999190979804089170182702556345446090853597627957791428943237561460453948820826044402874700085219613186824681247053637361670079745545538760409994919879728163876182404159565945053379193278698412233683308535462584192461927046046954945918295926157611800368404072086536709250328493882019435613967167210380399155555522069960451187550123144941460117476399723285873426432\", \"400481844556464920523193301963548462516578084749184743083267818116741738265896446803172276592132293252437641736702255678378020196583340296017305874056519669809172152689985358609594809953605859607651136943082150984660224920236376533603437055104197777495922382739000180430899893144169886679392314610966836210270498841529621493656328107364628256418118251142035446109798082585681169855601232173112571965711982733300383206840363094872481786693475424067353434014392840965058481963714484088640289118355456\", \"115431032698441259178673461431539816804206560773290015329752057694361406287772982036348831580901053883786820225009164463194923913410481248523137503562832299161248644837345953402272735282023494552277991382048997937502814909766236452236042332348226712434481947847353513149957685283099674458330104764410900543839986538076131534512057453216182889638360661447159929719038137745297045422073030824702000367475935702409104944531286067327756014628229036477812226374985599170883462080044700596715126592005803474078444367642624\", \"66541459948504530753768001471967959005419270466392022376423196257352976210252231110776428917476541274201459799058134101431331651507589475543199220149255661274003622762600440522835716155938101196289870455661584211035932845926991202557502792508928257976034266748831325772712875897333588717997864632732269693862392376895484988100730881126788959023903443606984779460581668713024441641390541816676610856286270482222156605510545493102132623215776624360768719348650259733692284804333540615561426033624780283661594114483349878253572218421248\", \"76717080122566093821769685096126348533333473476467287384688464345938248178907664863997779681772756752248435944393141184684335502950038499120052644845523026290523967017049073841718549772543323063556827399978478369606041313091683152436264099738986001869449728241878051097299490346519709940072925771948423485287163683973638746946665903940559428339549671501951366758811934677713877697895985005675231034179471691071272017966072759772829253585757141696413574898893832700332786265611996951692169618777516061171657897591184709381293230866625925902597785387008\", \"176897542887905871219682320710977054236195649885063012362481396897734368357286640762534683869872454244965040941272673502081845723150073431314902876590063750291880747723373712553100967508591749025216728994450514913101518001942052715995996702853037108622706150538094527668150620325050600397804418215191951248956872701409360022148099889945949951861965724898241732379974444442496212430718580253162145373014620079716222565944061670809250442497036511157273485606161593361700328707960218011162454162007820030744669545335519576035998639857914596707003622015954868692249187713024\", \"815795925230314728472279878236737085279030008004087855200500253014521127932527128885526410079762726469052612960044757453969861227317756805998981185503567039023299711652054131188006022549457417220933970982834312592735950018140458892761438537780953919908520972424194333073566878903608241070602967242198518658785846712295881224990958086451508342599371247161586427138348503778645201994004844323438189596157833085813059876353232318194433926472472721167826033215849712613785917626426916362350843199290384456011109377462267805156630427320614561083409274195307889411889718484406121375645508304896\", \"7524389324549354397801356452497913315011856161220801079509832008387666589604883373478014222580188830567037081935247887471482015360231314985337371942258260203939385162133586803144818348737122953633073095311149299883377463508309942219401299471541246964546345431980238535104248587410994668651719506647795652245245554349367125874876857244463618620318409144382509135849823322281027831591776097430363314021419414112824899028177671521886101096498126608165633326609228360352179238517061393227845320505045325556800426634899317480155864592599566076697068950579585675093167699329114669170699282474246401375197684826112\", \"138800484180914219712302326702802178157199288232020595807277716126392223926378591106707444859275463719229793836868708566284214501034414350853953266220225267143110257976471425551046069188570083369926289319954847285366348113154356458064601023126402119434759466643127870774164330686826589960109594089450465218173504187629454166226956526893875704969830626191585408807750322734960949314956738111993543735454414687779759714418712814531990126168027465140158764806953148937003185611158186683710455705012527082070237294364612667375625499788792257633923591324431260942827864659312843059529051940423114231494336335031596966318114835791872\", \"5120834017984591508986196650065047859699487038531864872635535284283315978236936642420834010902075350279505030004929465260242709345543639607773292077878134208602538275675583291265091714165339973428948005412040306127424871883645428230099148597465376635988368766640399372989825771523406030249994650100922593829267846687164394890395819287595146104752914215989543479798744485929580105447067545921706479084744307701783961846379120774460652838797753591500884374455393738762296647298620272890585944839720089999678022333082241138676080978538250644075914296491130999134389552091536501062762239568676983303712605272693429283100038671180467889093013820932096\", \"377850858294830139838638168215802092780038016602930573386515946416793198547039558262312467737983791635617168394411969746507772874148609641823047539163751702795222543019832005050328750907817266011479872405194806971268312167361692167252264172308895865348006664059299281805475888130387673484492108151111580147260086383832520506586231416515603233997674460633596201408249791703064288265123527797821759134838692448305207214785761264716189372084001112451765465433790033294520780568581946672132819009648620644554402766169507017541323003802706124203538173216779197391804429690913463400974547381070314833068900826395193921989122329834973335902668475423445184142471801333612544\", \"55760944647969803670700104936214276703418163826995146359366204907044372012038677422264811105212208511896356887262636526183807942536962683892431622381836246229948915236688130772335083840340164566252593033456468067431824060655193648039047729492243521453659694976501348803027093149539558317506748282678449645476135444887620474073150584355618406489856724494778877248633096276333595253012324971556730152755517558771607015456132912441957343723080458999749642050073369491042934979499196330203687831072108842525817786487718330792237747903510779174647553481994747676505530130774120520992243739532835809026595726937806053709668585200132001928488893296032814032593470714031341128788015283655671808\", \"16457726003670133055417812568315364737988338091091158251312218326569690437329616374734311914582020944472605890775510313408995229945334428903149322954095977105538611859157732272142218910153195403882467339866867514689726296672183682245219818625526941796560720064398728108321973000668550555252478306592014867281505767941252819608443162177328479455349999796039100621984127936729292132133658786719597197026368569007070051265672548312538134671161616981076484145578090055142565698834977734201790225311549466577004090807674343450549348281679151820330720056062429425106600701862306503156298835813445970932240447683526593536474768158583387967420140597105075176709672146585790993414230521376105364124607719448434966528\", \"9714926707998003497718782308204867881257332841251319104019251661662078248472412849177443834719209846072890969112505190791521670568847217287900651388254009260893186449634906395947258912533825379952975574267692934453193448473582640346042005495779590606640145643546455897110212759693094531702427850930065930059087543375832598108458827966338082930996711422212365503397867678374095016967422223554998394728346746184104609217211434235921413989212902495715550346122809777850604006668985053310528899731071820378305013097600934873846566724277063928654788793525614245817619281114401978980664096560907385299343778407890641151612145820588886332311587915398642804667189516333751031708296465506171453584391360087376886911691929540273723408384\", \"11469361067346228139061290587410929131577014568110496688276418026955029594788581734004182558070243437294012019588007382083610607182844994696799404722615974341317582970970611119434169515561820251265423739294548120506992391634591611979489654468463805254079641813986025304493914559074598262421276707860129809170482330724144138654242163986215204652850047416839186796163611459903547291938328181880669569697402627328163780396917201828272931792001080746707586621220450566380523358637421182469701231595854399029891888218578194053518468936172836983839399973914348397348853954542155795507799041130970804676688024813219676288924903523361447196493001392106550459363194374483729803668023599952850411152543047134333298142753046466271137690851320100397548574867456\", \"27081263142182923705501438690346729644366169641890975200940224634899233357027305456098025828938256775730428250700042672061879467659775786109270214017400414730550717646764413685560504054752678761496333535462048459532310810850944499706114710087119300200386999778156133504707983214878525514030819131644566263775100878971333483921191196677604836038344345713681506795660383625847999025848387503252627087123810199602209736789251013592140350653789925166247304234275183401500965673264564118890108142386036612704878688584239891999402890249937747483538525730024451957228223487693576454809145508346713566109971233755721615615541699881507959564802699414518867803796875388820464217613358292766134784246846225933733964457118146376268664384930394850083875401244024404677211216194568192\", \"127887649376417730093987279874959223434721837246292331790917063950188729173028315759621896868158290081514515507040745144760792797823633908454006170576076502414693250894106361156560785379061367900176197886105345551337014727607175137429409356509566678878892301335749917768757736874986255879172148219235433109220536222947985410156430631198989839450653517682104192025553044438491302114330030708413109133455822728120385022163636885141373386501141437603043967266969398520991275859042260783846015712638067373948888022989044395018434846317186459497805536942698964388726979258686557435667015119532122951846919014762751763697421103190009550551618834333461563415885034137500289032913017481647033658280717154859412697249820107204787634625302450046563003063271237239035013300852448256747732484360232763392\", \"1207864697976360344004012227247920888639797409727122316897149158619548357003386839595277447480050222229755160424883841049667706398252985767648761505658798805705483818948145043846805798252718763198773949764524391311922585251930658943514880587114466091998359273880405562907971318653747449298492952317155131191389647143269756802329984760064400111534136685383016769482782470510189713148691904881460827613361492986302460604018243380460062237283777296680408995854722178672186340582248073608246597487997996727778923589063949568687445482828106340010509284144324249363087064053541676878960707338041805779222724163855812417132661743952010731862369503046986946390659365322689414219648115087529954241488153772440114952646316128087077458262160905070776858191151099418724403865049128440558534241986453577283804960401031258177536\", \"22815919062260124281152347745317946282499579478225597764574987977890436887342808688976104870501061001773054587258294277087629301404254109854698281411452483911515333869047289946682697200251295383986440024239768987066961455306194374925383606676134093060944618688873828831817047682632360199699859850429151216871375843121094838459770748652491707914440551120759984840014318213588376033324534706939152455147493348994191284132793119476478152895835885120922180961499244045197171870808185699701000954429438301547575023578186676196514302877768734218786100354676154662786362643297064588417951625865838644112663945438422903965631834834286845607775985393677609226691814900584152243827917896815053685577316437526380790714230190441356975781684843354219992565785219238182282944422109986937230806375424197394063092770725539384275108964882307216209608704\", \"861961051643870695033992674309167199578105149265233755210531854655231695397841004315959353027863558941657347500708643835423572563996478981306319460173986864777848780732983020805504470333843984052335038327425867973338726313713394015863184128736960592170557471580379096716220939019137394671906098154759362286405347117756282996324206888088511302786754450046253062823707670337933613136463847028931076142175904578261359112314542477854319529897272403096490917617306617230616929156849561255541209838477962351678643611991108950807979740003711227545873058144232220086179444498450303055818969391304322654078530378763631851290884183055211356745609244035732915526643359273101408520908814846151929353857331307333376242939350958475788986570007129909972502782539037568776176785630826524683118125938788719786452442536511157641824521635493463680327860150633805208792583897088\", \"65127935677153380382865185934274607003809960083882113575904452876844683838733438985378527792717887288633549869389571008816175507184003390016151103667922703813694168133543286906006619259801862725474132003554787212850475990051192824704286086540817697867429105927870186318285789727070512775058927469565476598274691716076624233000916216924267413077907582882858390035886551173428350967423049718850381838273593522869951186720847511491298899945704308588400058202402152809162079122392664547523094139833577784509259690805435447849929045565614525326648793526939236259772149276548447129383535568258395264132188956867234872718835130548777951150687288332054343674708520307204427672825585402265653936878224215857325219693714506068560692809753122953929706240310498642459877441196692449645157645608368089254403626888143912472399649232865837206145663257925780776465599877881580977029065444654317568\", \"9841855377288937415447390527231202153455842504453720133695252668347974830556252658165124696077028515425450817398864910351369537663145194651524976959489344422342678620249318340219396467577024661445943481570099095051466855916105352197401418823197333060719088251811727514193408994320463954214844162261862784685360298544690445126145717267192561783034685015351169199621832667438357641444674326219345728642642810383270263207024107718687791371935471036611514436885033062917586993481519048858779374906457859727159564998688713546817221409312620181458595605735567354514662070437659126186571537250777009752135321513030182853798578098183302050213033735441339449132035723102074102608058173098386835602150956587572082729353578408870524492053406609959895082296706792813195516720142380910984191192058619168004260360406908231467668856024213138928977873340747895988011573647696979952041806565288571629194205319609339346944\", \"2974518269629418528183287790477136251735910545127811453581427978652616595356264947596803694136956008490398064656516155566449480802126524149773164759834362082131166150716512353779536812482810691172500096955277388103877578185522501050975722169225735084006254948179019599295302692801913945714653547245381255101505823092605145670553437793402069282072525939401386025809950055516559950442695132557924347603342238606705629548222231798775806790816221090616893894075208306706441784819763638100453946855836708310557947239099829716518949394166020681049804222110845249797452263905896008961178967788697771854957750815454116222278431207930315307657684846475482296389849704058050160567727933075981675002752008068830293647504821134818557279858111732545257603978153335616168268017033759698373368401020455509630395172047291096383128279778093350191660686534827468465888318399898946663053750353392007034469364011320175688955268074582072057057509376\", \"1797985968535216664944496004358374343509215650341798479179149327882744856269384291198729303430246126786296404980032302297595321012017030109348902525782020152869169168103786838160971087949766031760966165088431500871032856892630935020296595275794596862255427336247497580566862623617828330908541493541620179354512119159465555098806510076367231285395350427706814288025394425311199341223803743711901601363242903937561139477254670558878981639393540138916953147434506441014886808593769334222234806383248792522888870969370949886460255917591946332579170909412934639579841074787276447361698764837594275020389043099798673018624087957854927708503877067844690693442538677396545931297397648367060721363215700703756001913096856289455202558557910153695779883053213934571432082681799264975524318394406468304991326159530064043518011450002265972635234478858907973613954232713746104325413245975244731376790951869506877730874537309836484170950393167194460275028036788682752\", \"2173631660667039668984700210504885053440928931228016968965086163132981468236861730220650615341556676372390169253173663975604972422799230677469382999040739918660505042707350940039158107159615121292539651123423839519892067444431141415696638802524213998886911802250235334571816037172981430612313299911451638833319256606144115247938014691467553565583171950286615569501171685975138361651226678322938521468241227063106367669095067595036366075438176281290762289972128921040048601125493529421744568045636939974591348776120862370258685194871440497997150914743247310031723729047398691202330795910597987059012621074699271039180200868097247527739438513318700030869621175396951306037350507573405975936434558250220627536245142479496350755496129335743086027107995603956511019080962065525636789266925387728572058586368191713971116529410717355420618449465142442751933353701890082063024439478090834757150128353040614478610732917566732586611767430096272067443300328432386109177489664665391726592\", \"5255518873824416903687803876194048725247752898708723075400668615965863831097504375635433308251233312048766247203558991200300620604352830581371079358415600051856585617870548568853727962171206228838685195506282971294399499303895277316297475177391396052015391373638242535040410011356735654520539030774295796715732427912629667212872847331320104357084583959675197253788558473621399678098642683473186288639035344063284608566440925823269704605624728610522888231646442049910695279679867245611325888962734642379522278023969951318701822462788591894615137353613973715030604692169572118664406895529953104274682423559238462070772015190463321220193526066575719162798151641256508174006193296918203760563494424336058173574113652876628387389451824223353697906827208646762120751479222210763512531024245609024917500334574939012212142182012886145075543595440047786301032733174842410966880567247632878258658501902293739821318940798139131150532395191264792406363668485361473716058166829221766502063622860809609374204952576\", \"25414129848153344382239046897534255136864521417635453001949051913908008017589994776563072587258641569635169539843558219339898856799795550740114907758401382615586013383249715747685160392075349258895929797263710613473430715202959682477495625471587772024353861775261592839627899201402421403611533883626952118240064757854923766827852704270112197847296922231727833551789394804850015287585616422446284637918585983652563298394561000416031695531401833364842751130703739822989388553144317621145745267154316694067048460653278566883611037700900712951971174897018912094363532275197525030498768913128642048052245473015542133101610800292377142229909140813067890327977587612374256490950151387690850702665871528622422488218998292603704602845544390430472959633468730170707212307541907704068706263624064757253792800438322442280680208276567472614596049578405156513315480908601331728074386844924953235857764254017071297807352372985532421088761665700077101926014576813351504491800867886066292771827600730820974245370379226881215895758057875963904\", \"245790382051771145194669866894836910650556797239594091009564556094208680880385711256968483532036630553012696778687561627507545193814498941635315835729920960696181542215264784065507701869720671223676101099353987093462192745536443134197781431963673038992527374561993263849109824317641227672017365759894960530209333364608880281716979214697744534329835952620212452175318901237502886135186934978829477739282741742463317312408182343727949724617066098419258568662187079326746979739256946508422770714367934068496850270170914550232625314799613867752312747219996567995096961698243188569100429655378495055153354475585733921880831879481810931891716484123049081788090773434225820431784823304849740004530328772651097505402025158298202188494201095511281651444752927982930763983954415168881036388577694117158262320578043318594452254802839305491844927280242797782517788247605610352883705938120703000495886781538988526418037366343673014976532093358437076518455391019224639618634791307581630232102879919570031098419290868853038999379573603903698174015732092112667148288\", \"4754277425205284348419700021630306277819594231233501230274079687799467644054135605503230129926332349420230389354913481405631900846560126740972623150513354604812764296700223272603691459770389554281239817726014489139642075985146416079527934723846940733028576245558806856190369354829628769259495000019520989386279686123550085284290723479476495490251306436556499879513551255369276501430084910060650993432598538521963629786218092168813008486686208663842405885584127376723206295073712408381830384872882201818580321523948863465001771326380631696080635169634702135509782794877790215871455710398557059080949521117364655342307459593315672499574566292033600369306924572956925857747918561084493161074930593618524757397139122151276957016232310604754600441814037150264405820812712473632113348468670018469205747317973765171453782809770173332276553416124997311925329492467790550540501909006793762652043767805766864940022827298142023240656641608308615139677412693510719636885245539823207642584410041148586299456069104425074059269820037128974415771475065750800677599200925738481518877425532928\", \"183922199454132071495017823964418310581035406572387504095987895436081451427269845904015231638351142645264081103180227541271451365150525668792523811951920983449796386090707905234081639758289351098916600319954314214739003095905554767950528555878593983004951826460936168704827155870671617785932969020911837828609522973050883825772466142655647998378335201711464031707332067150969028021867868389473054701483504799207493496645907024311973634384571281857910076605223416442905086352637873582453410486641390607011647949375681392616293062480185677371974876115847216728138297648805710092860746366490654417856746317198280144869511204123264164871277050086466424866703174359826517646856972142290028705846976532181422669511747014463404242288528973412024975676890338662938337757856074384364339356083599371465548188364416530842160345010023360362483494062918047030071997896814424896606706549895245984904287294230594215953285058745214997435008275358198968506044384302940532876166219914266007756627767084845862423632952768871427161354405086474339970874829101971565739027195569986512650622291178085460852417483570155618304\", \"14230290926106362696122823080900243390433637603738005980259256943076641934110047856047930936624261107065873276268866892129520861084943649470982048717667479189501485633082120086890043142529883906164212808832912392961907330376138246467342868411536805615807438750065284882454125993437721429983886048307606930604235628569909434642167805909036554588490943154103935654425049741224775566548184310090004630537149855892839604622098137866677563942134239018715827888851797693649972687262803167679273941031847686625493987462422961116672112718087518225845931540765028692301246265348320493394163085411775758928448982724437500928134715366069109427038422359115771379766765196397901369125451039366900914606586395405788872163194382539222468491685209309855588395152929300280637903265687859426941368397203392235565456592313650006533521900447920576960664398554574517989911235388198873021876268539325888745001742701006972571124700950509875664721962959074741875601534435168338346227795552921813004231344377034549191699793014816843400294624064798743130698839294408616753325638646891105123642086095450609986686265602874213403600381488503940327309049856\", \"2202030863513312636321648671199054913516907653916117901691073240331946949863609577429103609768169530057061150257812445918850882107295806716261922661873456575008462513930989865443088129815261641695694727139738398910795613789657579567145298371226907217165026098057292665267014375216701372544800681475251578425365803666392971936154604673186923792317585313347474824913333286141786013706495579188805111583422817277983447913522288753851140140298470878371671693168302912742449635443426252167133192325519362889999795065866161674664045744937691390513161259299795724130181676271790579219732523976512872421586460443531041590095088702197493073534521730651562660076260725779111547176801999555637621415828252121886867337943124107994539715634932451000531052857363478368528085250607996565755450014011136148530448605458410763120164515711184313904476263429889138719447777588955617173003740328837793642742694803800382429624785218054344673298995026566192583108066449617442357672139272143399705781655242683874485399562078829739034234890154629296748941812930969047270839666047356933906313878622053623830144119219493279649297348864882853168553417766003229354994299768397627392\", \"681495543421322523798250098264197076688919625958868418051257990807837505987067866825123436248548151617593050477933088878988725616693867642608945945631683668808920027335934509944595182753117263717153639384270889156418840143434508108959849341896430415323256371070439120964777671194974820410861700069983389120638933918384576328554056534884715070073463424017931484262224244178189712770038390094700448535327494765406085737371568739744341162316251925288406054781369086525369352729762667669545632444718852477943084555268217269638560935219999355178152037404795500578151227281876968952880289646845711858918761125794160153470339887122101679017501147006350697819037781317970228904772048069836759470844867315694361705735640487911731623505352045680782420840435221438759307816194240462082712870054773448930061307949400029335513342976500230415962364278988431128471484008507777022768323222041382259130004343803395915550804325522392895772799286658817920775143921572624046023809896700137235863078674317453334741645449227070394628081947440649638541663098093102136271335498004902830344217486971653700556946784724621786596785109259982139470453695479515213359593022702300618283691568046193527092150272\", \"421825309897901792033244672821110328299858989707320804064743460440378944278718899967483820889500393998461711016514890252423164387537957829397741981629563196442380706822615641303536830456737698720856576796868658302341222149714994387839750913288493530488399884211939106903442707727486907385104784548836801887386742034876056259719489444284360238544475786244576709606346211662844260424616033577969445316367204486111572367285640386091135291959984634422111712349759041118545253088840329164781300635291094309773199799826699372727611147119659553696450965456120066708558577226901489783972447442763036558587711792714453122484632779364568230182763680136226900406180666607672585851460988484857124096940950351734765101605500343045700786559855265307726320299273751542009158879475999601867487052671938980988256280155920054084490029016709123154004397781949851274185859499943694823590844099419935550431660671065019508782626806522506993199944432863289827772158833515744104897499056696354128803738029780167294572595638534858576429012401607594066492590155477361329834229701436120365111259179709996155203535570930542745295974256870862760463624390717318046431243895818155132716064271455360415503340367605714430365452122210697216\", \"522194440706576253345876316972208990580919049498421082022576245723338982949140665003069105356289960330012593457390089303605667555601975047929042951212257072969361472940671364497640560926303318696033977690013916299289897514430165053790577048324222670321529537703571049002002781496203041840885524183107689558500581565215216577563341157701608110023823872559743334999271082619563560280418676667879029748783809416089306700738269364207260585249367415340646003895272439817409712720628709186805339184886626135322714400892646570899815363346885190935443883452361028600618727769686519016015986764715716391321987102312006857869149534994401613005059522899531855293803271313823719971973219135479955395552948879584294859168854149701603115968970497705944630998036477284824110938251324804171310134265550546919153058666691227110757309673571239737301459200948415973231968942428964722213969080035992841969252161263696664840384740535815264710623196642175113986088252118165109143235875193394237324905378681185642555776110635771578478214224063683755982931585626906161982220149238402132222785443508999378746610588801774393984778889853240279610734678193984258732940104186823817787172451622424479651829089774622333472658481415909711059052348233311555046866944\", \"1292890812885812375326210375759313154211806521142431703162139930204968350236396725479547430643054992083384091678994104761926923090140278035592984448790716805009586451615907562797344555527547953445569311346246656769519102613509006067117867848915904121110567926032487744880576751263549555669836582853473577131677246570878306726999866626996407253193693750074690839456622301350210262608948487854303552851457588750397583838082565400229544094825591011830544878252598176845253713291152353908500013649150377819823624076948121475534934827830863105098168949697035713668331158385332977381594870339821974004772810156175706056012478014462296965405817213211526586897970505560483618297113724652703794740872652190327308714457458457671976780831051175817949061815796584223532376976086077476481020253820853076974471059429483166667385436819022696990718396965711803590967567007032387580746632670642413715993429910692606590587827599844803982723137238986268051229340705304873811721964082001288954293134307920127141244439259670441346023410871394876521183127283057449596610425438679047943453709142013860841099237821998572066845392465348422795746000762231545335664623042607618925127125687803489756219911499975270654928221265205667650525684108930707566429764080749180245487621238064939008\", \"6402085214782279240215667419755299131524078858723655272948045632556476258728081241282224086781391936405539025009341590521693193386436490558248164393639913596873843138484718638733705545361161459118962635989994244912935782863002854452377442507617461316723550726006230344853562913627216388293856589795406711937391467566905042511687052944700963643661331442779802427261444468463746079440195054078750317913034432559960393187084518849088424684193033209762743037198319778223351150580968633827175119987765536804793455915510742702612201851443845921999214636047945678379752799393177469410571489245952655702508168565110193630939307909000782817948038441995201513210380008881955309548003770230868600243884200147184249133532135457066512231145258757869051682728759963857462438544040369800435760020981848338630787860638556405691711659197515718952391739002729042333111853089655129001219247291883199006831601000416411759400499972543122010466340378214154214264753389820650904928827549477270321278381079187818606788531124987988392956165916193914784801268268235648908517360393026575942019266375548137727501265090469564111477799597596462831665874541952688731042519741567723389896236895946383694712621870846145560224747919013358384009198985492354234309963979256675597935679594702431599530353132865618694486622208\", \"63403180978367415821309274946297067883877259318587866180545192179873251234024057122438043938346934018064402935929079725551013124750893668732866656438958416877428659544947175649222226350410354053304037407285263027742656926195684920350873977031531977117393899620145508261471596492667990267374247119411938906051221560288163888494940827408883645041289107923326280594975299582732093176297559093243319651847663381189148739254118740760683251268770860610364971014257718132322662993400462723041979552544043247309413454403017490412923702397366293918458594927220825783569515516498613647493542268637194003350434213617513461273400338809813920895663463363247859385737241337948895731991543335318621562472121750689097894229554250127034442715997616911313974856673940304231994761018954589749398269172339562324862795012955362211949117823507377780394667326502146542683401056903289898178853920495032817341587170762830228787960209813642366205321384101719785933919351423732356316716472524486444036272429428153831673413788549230823082493754465058942259000583671702976617386677699167861858091938074365982017699085450997562670768862704782078193633647021017872847941986726359652935580704732361989006186837416869603398747869170555637398488742768464768452034024359320496406508094293240522745199848449629940597204965057665414817199919279965732864\", \"1255829381618851745843939813162800704298382133625846814224576543837929306862487043403613671691796278314758724772891576106178879232671738229170952547575146504508999388463189077390718663065465139512563257376721686308667894337081904473700501451284072606805263409406162948187574343746459682980041852684213198304781289243877974712637944889033542516361940449303697964287412064454816314869415430215941969303231295534182937231337233928794493597318564192804797309557098139190130815956634614416930803981119285633896897477273820223265909390628295335746137224340995704708759288876800112737285539324537940458904632694853367688632930078926069962806962151985488848240208636811697886816181397641065060234508220101117574005754861073847528126195807422137989781827241548062333268861770114890971921143176307587625777432801329694125042082997858291756521028910278742226462503170935773824014532726362279487804852642625914063586084317328008408237653234716716056792097957687674162407334579817410344391534511456377332909067033131887491200492635061656303435842265594631198130167892273698894118908473502560911713314815766049451261795858816213523278903054857664316894475748404017820593032620658376301987967016324223870860747215810014131438047371746755894742158573728541978843161985626931648804227861987028287101265196697102807792583599996464364915511454252370644570101252096\", \"49748527168543236721217601181701787859412164184544981614021132152531407544755875595715223534937387027814400236784519752457163875312653024878808819261897816182049857562175142502664920126662282397287500919615856683661037726718551357866517035838294570557312647785183961656447017236408492576412491933241124498007986482023687708270806909964726962454428889809121509126703306096801309583649294538265745551262893038667109768947942584564986046357259555432390720779636591426560199120727335150844849791136385442593615377298690191141619484579081882966457602567673475027107757696120192807009449746430724720362204881883533358914349307829848269869773943199352024084642105643418234794472904996993789612991098814405633839362168444219985270745390334404281633531610515239911600270124765918723756244113179536100218842580810350953235956905299884158637846183854907123681882696681963760189001542900172446562530778777599312587511581507032388059832452415715329931134942694903849614695379375686995163260981165532882315572043312707177653268134629524148679542470830862853196065894885604510044117513694327827461877798923014301568856988500200842727469644981284082974998272244853501444493758472723476216286626588118926382688627409464658264654757634470533785470480202198639301517931585656134842389907260888628356169810472955154515203224997997562067268287191747713068764885441400545692502662653596833677312\", \"3941484395354638233538289175687367867592105475775706532607033481929862522953984448984124904076414779518065278170783738324688922152389130205437011719923988459918771927989210378507306385597674277709820835943850912312152185369810430427235293842952042618038177698910452587876065686843021184453985614615401176263423364407780619503789421456129207959050468910855420316069710275776886905782248938603902750169283607018303335844945658961365762587223541329787394772159734244936768703203377414117876498328023783201742397734284557793518805392879159072376728619721788157628888344885071289254492212066462609897371427802672624420468887108637999413923906918609154894786217991242150407245961961210264630635727082083499613184110924860468687904057567797574662878324087753939198982072282100267692628525208200651528096222226725761759777593209326929086554425269126423894387884436123797407184297632756634823932612007791785650341799222376223152005096407550736174028700944082763172420809390328542708804075250570034803026246036242639836615637887046181963204853103334122812628083321526481217092301247280493561517877165608935730379717606928307804713776181202402762892404134887938937031472708163645278187958477215529193445999427556392813076702686366226841259047880288438181039317934007049986967628669913469712745089488991641441449029377170846478308256948772452974369303745729777296889496265230364682344462873485908123670305342226432\", \"624553132445188374261017074910616651175684707033259989385970576608272316008064282918553047835861650538769914221991117220314396825604654124698761475620179598269259451407347168821591908915006873583380941955761610066160419567573390994630710233968901049175302599016666711451478872117095481672759695244736634085608900894427917277279996666119899843535724293953977717958753458753357574723232246031618566245134658698123460418782651119733400238852030909225084923720522062420308747615009191365697834033073271039095844599773798762889402205099782304958420658723821787855439775874016767512412532198575938481672972682436959872295438912425558239249896718667429033268570400796096855935950685905131932457788106766442890916357395897157536035262349579159094919232732624415986912959633675763868654888183379449084913996554618036170262832802999896987764687885078128708244981252908659559465878438903039807006949176027373201571918960978899368559454220738639019793775514107863498115935799189994914365281539305546543929936288848983376399359033566087234260524743328530634575237604448475923058984710325860168462459215792962475145307334652023116341661884016135961156794587175220705121250776592668568939514651460613351346012177225037868348882433579230141987465079270609005162061040175430229143459252137656401517672603677784011449981446402694557290874473546041589279084003029095969861040882648929229818815574607038430536241540767276013988435192299755547347910656\", \"197928788304640974341464850666479258600695049180808534124773095918685736886422750739311447234778847629379668922704179983751531364810359217713950668062565097782274752622181167719275215689807351092393652552210337871389593058507678810223056187979434630641203353919939495644767541545786906958837361968513995391044381927429678621588331901314460099470258669197354576703557407380031846807594524889233271913479072348055039559544348544781413192221607714121652514827686561139424546526972239487807277994496241865504072090118208118502668454523872999822924264148549447534537779884400733379795206408770083054875651690478960015238056556281653478045174894788418982313952718858245870557399909731671315524677379965742000641203192670806788653922982959777967379801448037982832956836725494414074449883228976663077489903296666163245859454357672076855154287795385752729475959381491602479668526791941876464824655451499200095483798976893981760998404467355203056966910895989444496771910506370624957508433199903387685562868293528306920853313928386878452173404723245851705283387042199433227699011440553292089827210283867137777224255168276367800718781387589924414286880529284397361540991020952506223721979879403820291922270484166768214979758659415044167154680904882962898181811062835177741059706090419385648245030626512884839233314262775620355296399275958674182930499283811645655644832080683138115417619825958599349430173169550456628534028988718669931851398764813092655430959864659914522624\", \"125452273648412141401139200773089339811437122262323352216462286700734387627331522885709312904647210371328794107858418293356140610389233010890575674923332327423429917033308833625087865757067009121643735335562957720919464360279849562024268481514680519466433342816295305461792608710076067024418040646132922593872156786882042514851134725907407734998659047116141535192232282791034794601497425933135733739224548153792567839779141913680549722028773475603674523853169051845195421079685934332310882053907313995168923535704556709136009686053259752740308577712484995569783650846269720521608249582420017860918845622644663874987575160515268766971368721963159046529551370104575096202684311358624098672672476994761800126366704378281769378475834662925454186722285874859694872242026068795039642380038691501013387521486053366727435218916045301026547623117868196574350026663672938544838421549439678291079144887169351257353939537143880911795509769485297854345823362270660712007071953958048732807833151699233932553517365602355625760928908188344900652899469143373311896574182769657272933821876553379518700197938172155010185719146936187180903250543579433005278984692348282568379624191843385007057047580846112172322370992146748764340302424100769640802926078370838482052406435490036434092467614465282934547622486501083341846045800849550829377015688082924233744178977266360888077466658752803757886543953371541948150838050857811138739570190403175194723845806878286855221273591078542964296886759202533689916185534005248\"}; int main(){ int n; cin >> n; while (n != 0){ cout << a[n] << endl; cin >> n; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1085/","text":"1085 \u7eff\u8272\u901a\u9053 \u9898\u76ee Description \u300a\u601d\u8fdc\u9ad8\u8003\u7eff\u8272\u901a\u9053\u300b(Green Passage)\u662f\u5510\u5c71\u4e00\u4e2d\u5e38\u7528\u7684\u7ec3\u4e60\u518c\u4e4b\u4e00\uff0c\u5176\u4e2d\u53c8\u4ee5\u6570\u5b66\u7eff\u8272\u901a\u9053\u4e3a\u6700\u3002 2007\u5e74\u67d0\u6708\u67d0\u65e5\uff0c\u53c8\u4e00\u6b21\u8981\u4ea4\u8fd9\u672c\u4f5c\u4e1a\uff0c\u800clsz\u8fd8\u4e00\u70b9\u4e5f\u6ca1\u6709\u5199\u2026\u2026 \u9ad8\u4e8c\u6570\u5b66\u300a\u7eff\u8272\u901a\u9053\u300b\u603b\u5171\u6709n\u9053\u9898\u76ee\u8981\u5199(\u5176\u5b9e\u662f\u6284)\uff0c\u7f16\u53f71..n\uff0c\u6284\u6bcf\u9053\u9898\u6240\u82b1\u65f6\u95f4\u4e0d\u4e00\u6837\uff0c\u6284\u7b2ci\u9898\u8981\u82b1a[i]\u5206\u949f\u3002 \u7531\u4e8e(\u5f53\u5e74)lsz\u8fd8\u8981\u51c6\u5907NOIP\uff0c\u663e\u7136\u4e0d\u80fd\u6210\u5929\u5199\u7eff\u8272\u901a\u9053\u3002 lsz\u51b3\u5b9a\u53ea\u7528\u4e0d\u8d85\u8fc7t\u5206\u949f\u65f6\u95f4\u6284\u8fd9\u4e2a\uff0c\u56e0\u6b64\u5fc5\u7136\u6709\u7a7a\u7740\u7684\u9898\u3002 \u6bcf\u9053\u9898\u8981\u4e48\u4e0d\u5199\uff0c\u8981\u4e48\u6284\u5b8c\uff0c\u4e0d\u80fd\u5199\u4e00\u534a\u3002 \u4e00\u6bb5\u8fde\u7eed\u7684\u7a7a\u9898\u79f0\u4e3a\u4e00\u4e2a\u7a7a\u9898\u6bb5\uff0c\u5b83\u7684\u957f\u5ea6\u5c31\u662f\u6240\u5305\u542b\u7684\u7a7a\u767d\u9898\u76ee\u6570\u3002 \u8fd9\u6837\u5e94\u4ed8\u4f5c\u4e1a\u81ea\u7136\u4f1a\u5f15\u8d77P\u8001\u5e08\u7684\u6124\u6012\u3002P\u8001\u5e08\u53d1\u6012\u7684\u7a0b\u5ea6(\u7b80\u79f0\u53d1\u6012\u5ea6)\u7b49\u4e8e\u6700\u957f\u7684\u7a7a\u9898\u6bb5\u957f\u5ea6\u3002 \u73b0\u5728\uff0clsz\u60f3\u77e5\u9053\u4ed6\u5728\u8fd9t\u5206\u949f\u5185\u5199\u54ea\u4e9b\u9898\uff0c\u624d\u80fd\u591f\u5c3d\u91cf\u964d\u4f4eP\u8001\u5e08\u7684\u53d1\u6012\u3002\u7531\u4e8elsz\u5f88\u806a\u660e\uff0c\u4f60\u53ea\u8981\u544a\u8bc9\u4ed6\u53d1\u6012\u5ea6\u7684\u6570\u503c\u5c31\u53ef\u4ee5\u4e86\uff0c\u4e0d\u9700\u8f93\u51fa\u65b9\u6848\u3002 (lsz@2011:\u6211\u4eec\u5f53\u5e74\u7684\u65e5\u5b50\u4e0d\u597d\u8fc7\u554a\u2026\u2026) (drf@2011:\u540c\u505a\u8fc7\u7eff\u8272\u901a\u9053\u7684\u5b69\u7eb8\u4f24\u4e0d\u8d77\u554a\u2026\u2026) Input Format \u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570n,t\uff0c\u4ee3\u8868\u5171\u6709n\u9053\u9898\u76ee\uff0ct\u5206\u949f\u65f6\u95f4\u3002 \u4ee5\u4e0b\u4e00\u884c\uff0c\u4e3an\u4e2a\u6574\u6570\uff0c\u4f9d\u6b21\u4e3aa[1], a[2],... a[n]\uff0c\u4e3a\u6bcf\u9053\u9898\u6240\u9700\u65f6\u95f4\u3002 Output Format \u8f93\u51fa\u4ec5\u4e00\u884c\uff0c\u4e00\u4e2a\u6574\u6570w\uff0c\u4e3a\u6700\u4f4e\u7684\u53d1\u6012\u5ea6\u3002 \u8bf4\u660e \u6837\u4f8b1\u89e3\u91ca \u5206\u522b\u5199\u7b2c4,6,10,14\u9898\uff0c\u5171\u7528\u65f62+3+3+3=11\u5206\u949f\u3002\u7a7a\u9898\u6bb5\uff1a1-3(\u957f\u5ea6\u4e3a3), 5-5(1), 7-9(3), 11-13(3), 15-17(3)\u3002\u6240\u4ee5\u53d1\u6012\u5ea6\u4e3a3\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u6b64\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u4f7f\u5f97\u53d1\u6012\u5ea6<=2\u7684\u4f5c\u6cd5\u3002 \u6570\u636e\u89c4\u6a21 40%\u6570\u636e \\( n \\leq 2000 \\) 60%\u6570\u636e \\( n \\leq 60000 \\) 100%\u6570\u636e \\( 0 < n \\leq 201107\uff0c0 < a[i] \\leq 3000\uff0c0 < t \\leq 100000000 \\) \u9898\u76ee\u6765\u6e90 TSOI2007\u6a21\u62df\u8d5b [2007-09-08], \u6570\u636e\u6709\u53d8\u5316 Sample Input 17 11 6 4 5 2 5 3 4 5 2 3 4 5 2 3 6 3 5 Sample Output 3 Sample Input 8 3 1 1 1 1 1 1 1 1 Sample Output 2 FineArtz's solution Star /* \u7eff\u8272\u901a\u9053 */ #include <iostream> #include <cstring> using namespace std; int f[201110], a[201110]; pair<int, int> q[201110]; int n, t; bool check(int lim){ memset(f, 0, sizeof(f)); memset(q, 0, sizeof(q)); int front = 0, rear = 0; q[rear++] = make_pair(0, 0); for (int i = 1; i <= n; ++i){ while (front != rear && q[front].first < i - lim - 1) ++front; f[i] = q[front].second + a[i]; while (front != rear && f[i] <= q[rear - 1].second) --rear; q[rear++] = make_pair(i, f[i]); } for (int i = n - lim; i <= n; ++i) if (f[i] <= t) return true; return false; } int main(){ cin >> n >> t; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int l = 0, r = n, mid; while (l < r){ mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"1085"},{"location":"nr/1085/#1085","text":"\u9898\u76ee","title":"1085 \u7eff\u8272\u901a\u9053"},{"location":"nr/1085/#fineartzs-solution-star","text":"/* \u7eff\u8272\u901a\u9053 */ #include <iostream> #include <cstring> using namespace std; int f[201110], a[201110]; pair<int, int> q[201110]; int n, t; bool check(int lim){ memset(f, 0, sizeof(f)); memset(q, 0, sizeof(q)); int front = 0, rear = 0; q[rear++] = make_pair(0, 0); for (int i = 1; i <= n; ++i){ while (front != rear && q[front].first < i - lim - 1) ++front; f[i] = q[front].second + a[i]; while (front != rear && f[i] <= q[rear - 1].second) --rear; q[rear++] = make_pair(i, f[i]); } for (int i = n - lim; i <= n; ++i) if (f[i] <= t) return true; return false; } int main(){ cin >> n >> t; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int l = 0, r = n, mid; while (l < r){ mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1086/","text":"1086 \u70ae\u5175\u9635\u5730 \u9898\u76ee Description \u53f8\u4ee4\u90e8\u7684\u5c06\u519b\u4eec\u6253\u7b97\u5728N*M\u7684\u7f51\u683c\u5730\u56fe\u4e0a\u90e8\u7f72\u4ed6\u4eec\u7684\u70ae\u5175\u90e8\u961f\u3002 \u4e00\u4e2aN*M\u7684\u5730\u56fe\u7531N\u884cM\u5217\u7ec4\u6210\uff0c\u5730\u56fe\u7684\u6bcf\u4e00\u683c\u53ef\u80fd\u662f\u5c71\u5730\uff08\u7528\u201cH\u201d\u8868\u793a\uff09\uff0c\u4e5f\u53ef\u80fd\u662f\u5e73\u539f\uff08\u7528\u201cP\u201d\u8868\u793a\uff09\uff0c\u5982\u4e0b\u56fe\u3002 \u5728\u6bcf\u4e00\u683c\u5e73\u539f\u5730\u5f62\u4e0a\u6700\u591a\u53ef\u4ee5\u5e03\u7f6e\u4e00\u652f\u70ae\u5175\u90e8\u961f\uff08\u5c71\u5730\u4e0a\u4e0d\u80fd\u591f\u90e8\u7f72\u70ae\u5175\u90e8\u961f\uff09\uff1b\u4e00\u652f\u70ae\u5175\u90e8\u961f\u5728\u5730\u56fe\u4e0a\u7684\u653b\u51fb\u8303\u56f4\u5982\u56fe\u4e2d\u9ed1\u8272\u533a\u57df\u6240\u793a\uff1a \u5982\u679c\u5728\u5730\u56fe\u4e2d\u7684\u7070\u8272\u6240\u6807\u8bc6\u7684\u5e73\u539f\u4e0a\u90e8\u7f72\u4e00\u652f\u70ae\u5175\u90e8\u961f\uff0c\u5219\u56fe\u4e2d\u7684\u9ed1\u8272\u7684\u7f51\u683c\u8868\u793a\u5b83\u80fd\u591f\u653b\u51fb\u5230\u7684\u533a\u57df\uff1a\u6cbf\u6a2a\u5411\u5de6\u53f3\u5404\u4e24\u683c\uff0c\u6cbf\u7eb5\u5411\u4e0a\u4e0b\u5404\u4e24\u683c\u3002 \u56fe\u4e0a\u5176\u5b83\u767d\u8272\u7f51\u683c\u5747\u653b\u51fb\u4e0d\u5230\u3002\u4ece\u56fe\u4e0a\u53ef\u89c1\u70ae\u5175\u7684\u653b\u51fb\u8303\u56f4\u4e0d\u53d7\u5730\u5f62\u7684\u5f71\u54cd\u3002 \u73b0\u5728\uff0c\u5c06\u519b\u4eec\u89c4\u5212\u5982\u4f55\u90e8\u7f72\u70ae\u5175\u90e8\u961f\uff0c\u5728\u9632\u6b62\u8bef\u4f24\u7684\u524d\u63d0\u4e0b\uff08\u4fdd\u8bc1\u4efb\u4f55\u4e24\u652f\u70ae\u5175\u90e8\u961f\u4e4b\u95f4\u4e0d\u80fd\u4e92\u76f8\u653b\u51fb\uff0c \u5373\u4efb\u4f55\u4e00\u652f\u70ae\u5175\u90e8\u961f\u90fd\u4e0d\u5728\u5176\u4ed6\u652f\u70ae\u5175\u90e8\u961f\u7684\u653b\u51fb\u8303\u56f4\u5185\uff09\uff0c\u5728\u6574\u4e2a\u5730\u56fe\u533a\u57df\u5185\u6700\u591a\u80fd\u591f\u6446\u653e\u591a\u5c11\u6211\u519b\u7684\u70ae\u5175\u90e8\u961f\u3002 Input Format \u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u7531\u7a7a\u683c\u5206\u5272\u5f00\u7684\u6b63\u6574\u6570\uff0c\u5206\u522b\u8868\u793aN\u548cM\uff0c\\( N \\leq 100, M \\leq 10 \\) \u3002 \u63a5\u4e0b\u6765\u7684N\u884c\uff0c\u6bcf\u4e00\u884c\u542b\u6709\u8fde\u7eed\u7684M\u4e2a\u5b57\u7b26\uff08\u2018P\u2019\u6216\u8005\u2018H\u2019\uff09\uff0c\u4e2d\u95f4\u6ca1\u6709\u7a7a\u683c\u3002\u6309\u987a\u5e8f\u8868\u793a\u5730\u56fe\u4e2d\u6bcf\u4e00\u884c\u7684\u6570\u636e\u3002 Output Format \u6587\u4ef6\u4ec5\u5728\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570K\uff0c\u8868\u793a\u6700\u591a\u80fd\u6446\u653e\u7684\u70ae\u5175\u90e8\u961f\u7684\u6570\u91cf\u3002 Sample Input 5 4 PHPP PPHH PPPP PHPP PHHP Sample Output 6 FineArtz's solution Star /* \u70ae\u5175\u9635\u5730 */ #include <iostream> using namespace std; int mapping[1025]; long long f[105][65][65]; long long sum[65], sta[65], a[105]; int cnt = 0, n, m; inline bool check(int x){ return !((x & (x << 1)) || (x & (x << 2))); } int calcSum(int x){ int ret = 0; while (x){ ++ret; x = x & (x - 1); } return ret; } void init(){ for (int i = 0; i < (1 << m); ++i){ if (check(i)){ sta[++cnt] = i; mapping[i] = cnt; sum[cnt] = calcSum(i); } } } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i] <<= 1; if (ch == 'H') a[i] = a[i] | 1; } } init(); long long ans = 0; for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[1])){ f[1][i][0] = max(f[1][i][0], sum[i]); ans = max(ans, f[1][i][0]); } } if (n == 1){ cout << ans << endl; return 0; } for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[2])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[1])){ if (!(sta[i] & sta[j])){ f[2][i][j] = max(f[2][i][j], f[1][j][0] + sum[i]); ans = max(ans, f[1][i][0]); } } } } } if (n == 2){ cout << ans << endl; return 0; } for (int l = 3; l <= n; ++l){ for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[l])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[l - 1])){ for (int k = 1; k <= cnt; ++k){ if (!(sta[k] & a[l - 2])){ if (!((sta[i] & sta[j]) | (sta[i] & sta[k]) | (sta[j] & sta[k]))){ f[l][i][j] = max(f[l][i][j], f[l - 1][j][k] + sum[i]); ans = max(ans, f[l][i][j]); } } } } } } } } cout << ans << endl; return 0; }","title":"1086"},{"location":"nr/1086/#1086","text":"\u9898\u76ee","title":"1086 \u70ae\u5175\u9635\u5730"},{"location":"nr/1086/#fineartzs-solution-star","text":"/* \u70ae\u5175\u9635\u5730 */ #include <iostream> using namespace std; int mapping[1025]; long long f[105][65][65]; long long sum[65], sta[65], a[105]; int cnt = 0, n, m; inline bool check(int x){ return !((x & (x << 1)) || (x & (x << 2))); } int calcSum(int x){ int ret = 0; while (x){ ++ret; x = x & (x - 1); } return ret; } void init(){ for (int i = 0; i < (1 << m); ++i){ if (check(i)){ sta[++cnt] = i; mapping[i] = cnt; sum[cnt] = calcSum(i); } } } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i] <<= 1; if (ch == 'H') a[i] = a[i] | 1; } } init(); long long ans = 0; for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[1])){ f[1][i][0] = max(f[1][i][0], sum[i]); ans = max(ans, f[1][i][0]); } } if (n == 1){ cout << ans << endl; return 0; } for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[2])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[1])){ if (!(sta[i] & sta[j])){ f[2][i][j] = max(f[2][i][j], f[1][j][0] + sum[i]); ans = max(ans, f[1][i][0]); } } } } } if (n == 2){ cout << ans << endl; return 0; } for (int l = 3; l <= n; ++l){ for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[l])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[l - 1])){ for (int k = 1; k <= cnt; ++k){ if (!(sta[k] & a[l - 2])){ if (!((sta[i] & sta[j]) | (sta[i] & sta[k]) | (sta[j] & sta[k]))){ f[l][i][j] = max(f[l][i][j], f[l - 1][j][k] + sum[i]); ans = max(ans, f[l][i][j]); } } } } } } } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1088/","text":"1088 \u90ae\u9012\u5458\u5c0fF \u9898\u76ee Description \u56e0\u4e3a\u5236\u9020\u7c7b\u4e13\u4e1a\u5f88\u96be\u5728\u5927\u57ce\u5e02\u7acb\u8db3\uff0c\u66fe\u7ecf\u7acb\u5fd7\u632f\u5174\u4e2d\u534e\u4e4b\u5de5\u4e1a\u7684\u5c0fF\uff0c\u679c\u65ad\u5728\u672c\u79d1\u6bd5\u4e1a\u540e\u8f6c\u884c\u505a\u4e86\u4e00\u540d\u5149\u8363\u7684\u90ae\u9012\u5458\u3002 \u4ed6\u7684\u4efb\u52a1\u662f\u6bcf\u5929\u4ece\u603b\u5c40\u51fa\u53d1\uff0c\u884c\u8d70\u4e8e\u6240\u7ba1\u8f96\u533a\u57df\u7684\u82e5\u5e72\u7684\u90ae\u5c40\uff0c\u6536\u96c6\u6240\u6709\u7684\u4fe1\uff0c\u7136\u540e\u518d\u6c47\u603b\u8fd4\u56de\u603b\u5c40\u3002 \u56e0\u4e3a\u5de5\u4f5c\u7e41\u5fd9\uff0c\u540c\u4e00\u4e2a\u90ae\u5c40\u4ed6\u6bcf\u5929\u53ea\u5e0c\u671b\u53bb\u4e00\u6b21\u3002 \u6765\u5f80\u4e8e\u4efb\u610f\u4e24\u4e2a\u90ae\u5c40\u662f\u6709\u4e00\u5b9a\u4ee3\u4ef7\u7684\u3002\u800c\u4e14\u4e3a\u4e86\u65b9\u4fbf\u7edf\u8ba1\uff0c\u5047\u5b9a\u6765\u56de\u4e24\u6761\u9053\u8def\u4e0a\u7684\u4ee3\u4ef7\u5047\u8bbe\u662f\u4e00\u6837\u7684\u3002 \u73b0\u5728\u5c0fF\u5e0c\u671b\u4f60\u80fd\u7ed9\u51fa\u4ed6\u6bcf\u5929\u7684\u6700\u4f18\u884c\u8d70\u65b9\u6848\uff0c\u4f7f\u5f97\u603b\u7684\u4ee3\u4ef7\u6700\u5c11\u3002 Input Format \u8f93\u5165\u6570\u636e\u5305\u62ec\u4e24\u90e8\u5206\u3002 \u7b2c\u4e00\u884c\u4e3a\u90ae\u5c40\u6570N\u3002 \u63a5\u4e0b\u6765\u7684N\u884c\u4e3a\u4e00\u4e2aN\u00d7N\u7684\u5bf9\u79f0\u77e9\u9635\u3002\u77e9\u9635\u7684\u7b2ci\u884c\uff0c\u7b2cj\u5217\u5143\u7d20Aij\u4ee3\u8868\u4ece\u90ae\u5c40i\u5230\u90ae\u5c40j\u7684\u6d88\u8017\u7684\u4ee3\u4ef7\u3002 \u89c4\u5b9a\u603b\u5c40\u7684\u6807\u53f7\u4e3a1\u3002 \\( 1 \\leq N \\leq 15 \\) \\( 0 \\leq Aij \\leq 2000 \\) Output Format \u5171\u4e00\u884c\uff0c\u4e3a\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u6700\u5c0f\u7684\u4ee3\u4ef7\u3002 Sample Input 4 0 6 7 9 6 0 6 5 7 6 0 8 9 5 8 0 Sample Output 26 FineArtz's solution Star /* \u90ae\u9012\u5458\u5c0fF */ #include <iostream> #include <cstring> using namespace std; const int INF = 2000000000; int n; int a[16][16]; int f[16][32768]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; if (n == 1){ cout << 0 << endl; return 0; } for (int i = 1; i <= (1 << n) - 1; i += 2){ for (int j = 2; j <= n; ++j){ if (i & (1 << (j - 1))){ if (i ^ ((1 << (j - 1)) + 1)){ f[j][i] = INF; for (int k = 2; k <= n; ++k){ if (k != j && i & (1 << (k - 1))){ f[j][i] = min(f[j][i], f[k][i ^ (1 << (j - 1))] + a[k][j]); } } } else f[j][i] = a[1][j]; } } } int ans = INF; for (int i = 2; i <= n; ++i){ ans = min(ans, f[i][(1 << n) - 1] + a[i][1]); } cout << ans << endl; return 0; }","title":"1088"},{"location":"nr/1088/#1088-f","text":"\u9898\u76ee","title":"1088 \u90ae\u9012\u5458\u5c0fF"},{"location":"nr/1088/#fineartzs-solution-star","text":"/* \u90ae\u9012\u5458\u5c0fF */ #include <iostream> #include <cstring> using namespace std; const int INF = 2000000000; int n; int a[16][16]; int f[16][32768]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; if (n == 1){ cout << 0 << endl; return 0; } for (int i = 1; i <= (1 << n) - 1; i += 2){ for (int j = 2; j <= n; ++j){ if (i & (1 << (j - 1))){ if (i ^ ((1 << (j - 1)) + 1)){ f[j][i] = INF; for (int k = 2; k <= n; ++k){ if (k != j && i & (1 << (k - 1))){ f[j][i] = min(f[j][i], f[k][i ^ (1 << (j - 1))] + a[k][j]); } } } else f[j][i] = a[1][j]; } } } int ans = INF; for (int i = 2; i <= n; ++i){ ans = min(ans, f[i][(1 << n) - 1] + a[i][1]); } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1089/","text":"1089 \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 \u9898\u76ee Description \u5c0fM\u6709\u4e00\u72472 N\u4e2a\u77e9\u5f62\u7684\u77e9\u5f62\u8bd5\u9a8c\u7530\uff0c\u5e76\u4e14\u5c0fM\u5bf9\u6bcf\u4e2a\u77e9\u5f62\u5185\u7684\u9002\u7528\u5ea6\u8fdb\u884c\u4e86\u8bc4\u4f30\u3002\u4ed6\u4ece\u5b9e\u9a8c\u7530\u4e2d\u9009\u53d62 Q\u7684\u533a\u57df\u76d6\u5b9e\u9a8c\u5ba4\uff0c\u4e3a\u4e86\u7814\u7a76\u65b9\u4fbf\uff0c \u89c4\u5b9a\u57282*Q\u7684\u533a\u57df\u4e2d\u7b2c\u4e00\u884c\u9009\u4e00\u6bb5\u957f\u5ea6\u4e3aP\u7684\u533a\u57df\u7a7a\u51fa\u6765\uff0c\u4f5c\u4e3a\u91c7\u96c6\u6837\u54c1\u7684\u573a\u6240\uff0c\u6b64\u573a\u6240\u5c06\u4e0d\u7b97\u4f5c\u5b9e\u9a8c\u5ba4\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u5b9e\u9a8c\u5ba4\u7684\u5f62\u72b6\u770b\u8d77\u6765 \u5c31\u662f\u4e00\u4e2a\u201c\u51f9\u201d\u5b57\u578b\u3002 \u4f8b\u5982\uff0c\u4e0b\u56fe\u5c31\u662f\u4e00\u4e2a\u9009\u53d6\u65b9\u6848\uff0c\u7c97\u7ebf\u6761\u7684\u533a\u57df\u5c31\u662f\u5b9e\u9a8c\u57fa\u5730\uff0c\u5b83\u5f00\u8f9f\u51fa\u4e86\u4e00\u4e2a2*5\u7684\u533a\u57df\uff0c\u5e76\u4e14\u5728\u7b2c\u4e00\u884c\u4e2d\u9009\u51fa\u4e86\u957f\u5ea6\u4e3a2\u7684\u6837\u54c1\u91c7\u96c6\u533a\uff0c \u6837\u54c1\u91c7\u96c6\u533a\u7684\u9002\u7528\u5ea6\u5206\u522b\u4e3a-4\u548c-5\u3002 \u6ce8\u610f\uff1aQ\u548cP\u5728N\u7684\u8303\u56f4\u5185\u53ef\u4ee5\u81ea\u884c\u4efb\u610f\u9009\u53d6\uff0c\u4f46\u662f\u5fc5\u987b\u8981\u8bbe\u7f6e\u6837\u54c1\u91c7\u96c6\u533a\uff0c\u800c\u4e14\u6837\u54c1\u91c7\u96c6\u533a\u7684\u5de6\u53f3\u4e24\u4fa7\u5fc5\u987b\u5b58\u5728\u5b9e\u9a8c\u5ba4\u3002\u6545\u4ee5\u4e0b\u5f62\u72b6\u7684\u5b9e\u9a8c \u5ba4\u662f\u4e0d\u5141\u8bb8\u51fa\u73b0\u7684\uff1a \u5b9a\u4e49\u5b9e\u9a8c\u5ba4\u7684\u9002\u7528\u5ea6\u5373\u4e3a\u5b9e\u9a8c\u5ba4\u6240\u5360\u636e\u7684\u5404\u4e2a\u77e9\u5f62\u571f\u5730\u7684\u9002\u7528\u5ea6\u4e4b\u548c\uff0c\u5c0fM\u5e0c\u671b\u5efa\u7acb\u7684\u5b9e\u9a8c\u5ba4\u7684\u9002\u7528\u5ea6\u5c3d\u53ef\u80fd\u7684\u5927\uff0c\u5e76\u628a\u5b9e\u9a8c\u5ba4\u9009\u5740\u7684\u8ba4\u4e3a \u4ea4\u7ed9\u4e86\u4f60\uff0c\u73b0\u5728\u8bf7\u4f60\u7528\u4e00\u4e2a\u7b97\u6cd5\u4e3a\u5176\u9009\u5740\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6574\u6570N ( 3 < N < 2000 )\uff0c \u8868\u793a\u8bd5\u9a8c\u7530\u7684\u5927\u5c0f\u662f2*N\uff0c \u968f\u540e\u7684\u4e24\u884c\u6bcf\u884c\u6709N\u4e2a\u6574\u6570(\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc710^6)\uff0c\u8868\u793a\u5bf9\u5e94\u77e9\u5f62\u571f\u5730\u7684\u9002\u7528\u5ea6\u8bc4\u4f30\u503c\uff0c\u5404\u4e2a\u6574\u6570\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 Output Format \u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\uff0c\u4e3a\u6574\u6570M\uff0c\u5373\u6240\u786e\u5b9a\u7684\u5b9e\u9a8c\u5ba4\u7684\u9002\u7528\u5ea6\u3002 Hint Sample Input 4 -1 2 -3 4 5 6 7 8 Sample Output 31 FineArtz's solution Star /* \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 */ #include <iostream> using namespace std; const int INF = 2000000000; int main(){ int n; int a[3][2005] = {0}, sum[3][2005] = {0}; int maxx = -INF, ans = -INF; cin >> n; for (int i = 1; i <= 2; ++i){ for (int j = 1; j <= n; ++j){ cin >> a[i][j]; sum[i][j] = a[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } for (int i = 3; i <= n; ++i){ int t = INF, tsum = 0; for (int j = i - 2; j >= 1; --j){ tsum += a[1][j + 1]; t = min(t, tsum); tsum = min(tsum, 0); ans = max(ans, sum[2][i] - sum[2][j - 1] - t); } } cout << ans << endl; return 0; }","title":"1089"},{"location":"nr/1089/#1089-m","text":"\u9898\u76ee","title":"1089 \u5c0fM\u7684\u5b9e\u9a8c\u5ba4"},{"location":"nr/1089/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 */ #include <iostream> using namespace std; const int INF = 2000000000; int main(){ int n; int a[3][2005] = {0}, sum[3][2005] = {0}; int maxx = -INF, ans = -INF; cin >> n; for (int i = 1; i <= 2; ++i){ for (int j = 1; j <= n; ++j){ cin >> a[i][j]; sum[i][j] = a[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } for (int i = 3; i <= n; ++i){ int t = INF, tsum = 0; for (int j = i - 2; j >= 1; --j){ tsum += a[1][j + 1]; t = min(t, tsum); tsum = min(tsum, 0); ans = max(ans, sum[2][i] - sum[2][j - 1] - t); } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1090/","text":"1090 \u5c0fM\u7684\u5976\u725b \u9898\u76ee Description \u5c0fM\u7684\u5976\u725b\u4eec\u60f3\u5411\u793e\u4f1a\u8bc1\u660e\u5176\u5b9e\u4ed6\u4eec\u662f\u806a\u660e\u800c\u4e14\u98ce\u8da3\u7684\u3002 \u4e3a\u6b64\uff0c\u5c0fM\u7b79\u5907\u4e86\u4e00\u4e2a\u4e13\u95e8\u5c55\u89c8\u5976\u725b\u7684\u535a\u89c8\u4f1a\uff0c\u5979\u5df2\u7ecf\u5bf9\\( N (1 \\leq N \\leq 100) \\)\u5934\u5976\u725b\u8fdb\u884c\u4e86\u9762\u8bd5\uff0c\u786e\u5b9a\u4e86\u6bcf \u5934\u5976\u725b\u7684\u806a\u660e\u6307\u6570\\( Si (\u22121000 \\leq Si \\leq 1000) \\) \u548c\u98ce\u8da3\u6307\u6570\\( Fi (\u22121000 \\leq Fi \\leq 1000) \\)\u3002 \u5c0fM\u9700\u8981\u51b3\u5b9a\u8ba9\u54ea\u4e9b\u5976\u725b\u4e0a\u535a\u89c8\u4f1a\u3002 \u8bbe\u603b\u806a\u660e\u6307\u6570TS\u4e3a\u5404\u5976\u725b\u806a\u660e\u6307\u6570Si\u7684\u548c\uff0c\u603b\u98ce\u8da3\u6307\u6570TF\u4e3a\u5404\u5976\u725b\u98ce\u8da3\u6307\u6570Fi\u7684\u548c\u3002\u5c0fM\u60f3\u4f7fTS\u4e0eTF\u7684\u548c\u6700\u5927\uff0c\u540c\u65f6\u5979\u5e0c\u671b\u8fd9\u4e24\u4e2a\u503c\u4e0d\u8981\u5c0f\u4e8e\u96f6\uff08\u56e0\u4e3a\u5979\u8981\u8bc1\u660e\u5976\u725b\u4eec\u662f\u51fa\u8272\u7684\uff0c\u8d1f\u7684TS\u6216TF\u4f1a\u9020\u6210\u8d1f\u9762\u7684\u6548\u679c\uff09\u3002\u8bf7\u5e2e\u52a9\u5c0fM\u6c42\u51faTS\u4e0eTF\u5728\u975e\u8d1f\u6761\u4ef6\u4e0b\u7684\u6700\u5927\u548c\u3002 Input Format \u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u5976\u725b\u7684\u6570\u91cf \u7b2c\u4e8c\u884c\u5230\u7b2cN + 1\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6574\u6570\uff1aSi\u548cFi\uff0c\u5206\u522b\u4ee3\u8868\u6bcf\u5934\u5976\u725b\u7684\u806a\u660e\u6307\u6570\u548c\u98ce\u8da3\u6307\u6570 Output Format \u7b2c\u4e00\u884c\uff1a\u5355\u72ec\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5728TS\u548cTF\u975e\u8d1f\u6761\u4ef6\u4e0b\u7684\u6700\u5927\u548c\u3002\u5982\u679c\u65e0\u89e3\uff0c\u5219\u8f93\u51fa 0 \u8bf4\u660e \u6837\u4f8b\u89e3\u91ca \uff08\u5c0fM\u53ef\u4ee5\u9009\u62e9 1\uff0c3\uff0c4 \u53f7\u5976\u725b\uff0c\u6b64\u65f6 TS = \u22125 + 6 + 2 = 3\uff0cTF = 7 \u2212 3 + 1 = 5\uff0c \u603b\u548c\u4e3a8\u3002\u6ce8\u610f\u5982\u679c\u52a0\u5165 2 \u53f7\u5976\u725b\u53ef\u4ee5\u4f7f\u603b\u548c \u63d0\u5347\u523010\uff0c\u4e0d\u8fc7TF\u53d8\u8d1f\u4e86\uff0c\u800c\u8fd9\u662f\u4e0d\u5141\u8bb8\u7684\u3002\uff09 Sample Input 5 -5 7 8 -6 6 -3 2 1 -8 -5 Sample Output 8 FineArtz's solution Star /* \u5c0fM\u7684\u5976\u725b */ #include <iostream> using namespace std; const int DEL = 100000; const int INF = 2000000000; int main(){ int n; int s[105], f[105]; int a[100005 + DEL]; cin >> n; for (int i = 1; i <= n; ++i){ cin >> s[i] >> f[i]; } for (int i = 0; i <= 100000 + DEL; ++i) a[i] = -INF; a[DEL] = 0; for (int i = 1; i <= n; ++i){ if (s[i] > 0){ for (int j = 100000 + DEL; j >= s[i]; --j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } else{ for (int j = 0; j <= s[i] + 100000 + DEL; ++j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } } int ans = 0; for (int i = 0; i <= 100000; ++i) if (a[i + DEL] >= 0) ans = max(ans, a[i + DEL] + i); cout << ans << endl; return 0; }","title":"1090"},{"location":"nr/1090/#1090-m","text":"\u9898\u76ee","title":"1090 \u5c0fM\u7684\u5976\u725b"},{"location":"nr/1090/#fineartzs-solution-star","text":"/* \u5c0fM\u7684\u5976\u725b */ #include <iostream> using namespace std; const int DEL = 100000; const int INF = 2000000000; int main(){ int n; int s[105], f[105]; int a[100005 + DEL]; cin >> n; for (int i = 1; i <= n; ++i){ cin >> s[i] >> f[i]; } for (int i = 0; i <= 100000 + DEL; ++i) a[i] = -INF; a[DEL] = 0; for (int i = 1; i <= n; ++i){ if (s[i] > 0){ for (int j = 100000 + DEL; j >= s[i]; --j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } else{ for (int j = 0; j <= s[i] + 100000 + DEL; ++j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } } int ans = 0; for (int i = 0; i <= 100000; ++i) if (a[i + DEL] >= 0) ans = max(ans, a[i + DEL] + i); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1092/","text":"1092 \u5c0fF\u7684\u5730\u677f \u9898\u76ee Description \u5c0fF\u6700\u8fd1\u8d2d\u7f6e\u4e86\u4e00\u5e62\u8c6a\u5b85\uff0c\u4ed6\u5bb6\u7684\u5927\u5385\u662f\u4e00\u4e2aM\u00d7N\u7684\u77e9\u5f62\uff0c\u73b0\u5728\u9700\u8981\u5728\u5927\u5385\u4e2d\u653e\u7f6e\u5730\u677f\uff0c \u4ed6\u627e\u5230\u597d\u57fa\u53cb\u5c0fX\uff0c\u5c0fX\u8868\u793a\u4ed6\u53ea\u6709\u4e24\u7c7b\u5730\u677f\uff1a 2\u00d71,1\u00d72\u7684\u77e9\u5f62 2\u00d72\u7684\u77e9\u5f62\u4f46\u7f3a\u4e00\u4e2a1\u00d71\u7684\u89d2 \u5c0fF\u8981\u6c42\u5730\u9762\u5168\u90e8\u88ab\u5730\u677f\u8986\u76d6\u4e14\u5730\u677f\u4e0d\u80fd\u91cd\u53e0\uff0c\u95ee\u6709\u591a\u5c11\u79cd\u653e\u7f6e\u65b9\u6848\uff1f Input Format \u4e00\u884c\u7528\u7a7a\u683c\u9694\u5f00\u7684\u4e24\u4e2a\u6574\u6570\\( M, N\uff0c(1 \\leq M,N \\leq 9) \\) \u5206\u522b\u8868\u793a\u5927\u5385\u7684\u957f\u548c\u5bbd Output Format \u4e00\u4e2a\u6570X\u8868\u793a\u653e\u7f6e\u65b9\u6848\u7684\u79cd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u7b26\u5408\u8981\u6c42\u7684\u653e\u7f6e\u65b9\u6848\u8f93\u51fa0 Sample Input 1 2 1 Sample Output 1 1 Sample Input 2 1 2 Sample Output 2 1 Sample Input 3 2 3 Sample Output 3 5 FineArtz's solution Star /* \u5c0fF\u7684\u5730\u677f */ #include <iostream> #include <cstring> using namespace std; unsigned long long f[10][1 << 9]; int m, n; void dp(int lim, int col, int now, int last, int exNow, int exLast){ if (exNow == 1 && exLast == 1){ exNow = 0; exLast = 0; ++col; } if (col > n || (col == n && (exNow || exLast))) return; if (col == n && exNow == 0 && exLast == 0){ f[lim][now] += f[lim - 1][last]; return; } if (exNow == 0 && exLast == 0){ dp(lim, col + 1, (now << 1) | 1, last << 1, 0, 0); //2 * 1 dp(lim, col + 2, (now << 2) | 3, (last << 2) | 3, 0, 0); //1 * 2, exNow = 0 dp(lim, col + 1, (now << 2) | 3, (last << 1) | 1, 1, 0); //1 * 2, exNow = 1 dp(lim, col + 1, (now << 1) | 1, last << 2, 0, 1); //bottom right dp(lim, col + 2, (now << 2) | 2, last << 2, 0, 0); //bottom right dp(lim, col + 2, (now << 2) | 1, last << 2, 0, 0); //bottom left dp(lim, col + 1, (now << 2) | 3, last << 1, 1, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 1, 0, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 2, 0, 0); //top left //dp(lim, col, now << 1, last, 1, 0); //none, exNow = 1 dp(lim, col + 1, now << 1, (last << 1) | 1, 0, 0); //none, exNow = 0 //dp(lim, col, now, (last << 1) | 1, 0, 1); //none, exLast = 1 } else if (exNow == 1 && exLast == 0){ //dp(lim, col + 2, (now << 1) | 1, (last << 2) | 2, 0, 0); //2 * 1 dp(lim, col + 2, (now << 1) | 1, last << 2, 0, 0); //bottom left } else{ dp(lim, col + 1, (now << 2) | 3, last, 1, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, (last << 1) | 1, 0, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, last << 1, 0, 0); //top left //dp(lim, col + 2, (now << 2) | 1, last << 1, 0, 0); //2 * 1 } } int main(){ cin >> m >> n; if (m > n) m ^= n ^= m ^= n; memset(f, 0, sizeof(f)); f[0][(1 << n) - 1] = 1; for (int i = 1; i <= m; ++i) dp(i, 0, 0, 0, 0, 0); cout << f[m][(1 << n) - 1] << endl; return 0; }","title":"1092"},{"location":"nr/1092/#1092-f","text":"\u9898\u76ee","title":"1092 \u5c0fF\u7684\u5730\u677f"},{"location":"nr/1092/#fineartzs-solution-star","text":"/* \u5c0fF\u7684\u5730\u677f */ #include <iostream> #include <cstring> using namespace std; unsigned long long f[10][1 << 9]; int m, n; void dp(int lim, int col, int now, int last, int exNow, int exLast){ if (exNow == 1 && exLast == 1){ exNow = 0; exLast = 0; ++col; } if (col > n || (col == n && (exNow || exLast))) return; if (col == n && exNow == 0 && exLast == 0){ f[lim][now] += f[lim - 1][last]; return; } if (exNow == 0 && exLast == 0){ dp(lim, col + 1, (now << 1) | 1, last << 1, 0, 0); //2 * 1 dp(lim, col + 2, (now << 2) | 3, (last << 2) | 3, 0, 0); //1 * 2, exNow = 0 dp(lim, col + 1, (now << 2) | 3, (last << 1) | 1, 1, 0); //1 * 2, exNow = 1 dp(lim, col + 1, (now << 1) | 1, last << 2, 0, 1); //bottom right dp(lim, col + 2, (now << 2) | 2, last << 2, 0, 0); //bottom right dp(lim, col + 2, (now << 2) | 1, last << 2, 0, 0); //bottom left dp(lim, col + 1, (now << 2) | 3, last << 1, 1, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 1, 0, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 2, 0, 0); //top left //dp(lim, col, now << 1, last, 1, 0); //none, exNow = 1 dp(lim, col + 1, now << 1, (last << 1) | 1, 0, 0); //none, exNow = 0 //dp(lim, col, now, (last << 1) | 1, 0, 1); //none, exLast = 1 } else if (exNow == 1 && exLast == 0){ //dp(lim, col + 2, (now << 1) | 1, (last << 2) | 2, 0, 0); //2 * 1 dp(lim, col + 2, (now << 1) | 1, last << 2, 0, 0); //bottom left } else{ dp(lim, col + 1, (now << 2) | 3, last, 1, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, (last << 1) | 1, 0, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, last << 1, 0, 0); //top left //dp(lim, col + 2, (now << 2) | 1, last << 1, 0, 0); //2 * 1 } } int main(){ cin >> m >> n; if (m > n) m ^= n ^= m ^= n; memset(f, 0, sizeof(f)); f[0][(1 << n) - 1] = 1; for (int i = 1; i <= m; ++i) dp(i, 0, 0, 0, 0, 0); cout << f[m][(1 << n) - 1] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1104/","text":"1104 game \u9898\u76ee game Description \u4f60\u770b\u5230\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\u5728\u73a9\u201c\u7b7e\u5230\u6e38\u620f\u201d\u3002\u6e38\u620f\u89c4\u5219\u662f\u8fd9\u6837\u7684\uff0c\u684c\u9762\u4e0a\u6709n\u5f20\u5361\u7247\uff0cn\u4e3a\u5947\u6570\uff0c\u5361\u7247\u4e0a\u5199\u7740\u4e0d\u540c\u7684\u6574\u65701~n\u3002\u6e38\u620f\u9996\u5148\u7531\u4e0d\u77e5\u4ece\u4f55\u5904\u6765\u7684\u5361\u5c14\u5c06\u724c\u5168\u90e8\u5206\u7ed9\u7231\u4e3d\u4e1d\u548c\u9c8d\u52c3\uff0c\u7531\u4e8e\u5361\u5c14\u975e\u5e38\u7684\u968f\u610f\uff0c\u751a\u81f3\u4f1a\u6709\u4eba\u53ef\u80fd\u5f97\u4e0d\u5230\u724c\u3002\u63a5\u4e0b\u6765\u6709n\u8f6e\uff0c\u7b2ci\u8f6e\u4e2d\uff0c\u53cc\u65b9\u5fc5\u987b\u6253\u51fa\u624b\u4e2d\u724c\u4e0a\u6570\u5b57\u6700\u63a5\u8fd1\u4e8ei\u7684\u5361\u7247\uff08\u6709\u591a\u5f20\u53ef\u4ee5\u6253\u51fa\u4efb\u610f\u4e00\u5f20\uff09\uff0c\u8c01\u7684\u5361\u7247\u66f4\u63a5\u8fd1\u4e8ei\u5c31\u80fd\u591f\u83b7\u5f97\u7b2ci\u8f6e\u80dc\u5229\uff0c\u83b7\u5f971\u5206\uff0c\u4e4b\u540e\u8d25\u8005\u5c06\u81ea\u5df1\u6253\u51fa\u7684\u5361\u7247\u6536\u56de\uff1b\u82e5\u540c\u6837\u63a5\u8fd1\u4e8ei\uff0c\u5219\u82e5i\u4e3a\u5947\u6570\uff0c\u7231\u4e3d\u4e1d\u83b7\u80dc\uff0c\u5426\u5219\u9c8d\u52c3\u83b7\u80dc\uff0c\u540c\u6837\u83b7\u80dc\u8005\u5f971\u5206\uff0c\u8d25\u8005\u8981\u6536\u56de\u81ea\u5df1\u6253\u51fa\u7684\u5361\u7247\u3002\u53e6\u5916\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u82e5\u4e00\u65b9\u7684\u624b\u4e2d\u5df2\u7ecf\u6ca1\u6709\u5361\u7247\uff0c\u90a3\u4e48\u8ba4\u4e3a\u662f\u5bf9\u65b9\u7684\u724c\u66f4\u63a5\u8fd1\u800c\u5bf9\u65b9\u80fd\u591f\u83b7\u5f971\u5206\uff1b\u82e5\u53cc\u65b9\u90fd\u6ca1\u6709\u5361\u7247\uff0c\u5219\u90fd\u4e0d\u5f97\u5206\u3002 \u9edb\u62c9\u4e86\u89e3\u4e86\u6e38\u620f\u89c4\u5219\u540e\u611f\u5230\u975e\u5e38\u6124\u6012\uff0c\u6240\u4ee5\u7231\u83b2\u60f3\u77e5\u9053\uff0c\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5206\u724c\u65b9\u6848\u80fd\u591f\u4f7f\u5f97\u7231\u4e3d\u4e1d\u83b7\u80dc\uff1f\u4e24\u79cd\u5206\u724c\u65b9\u6848\u4e0d\u540c\u53ef\u4ee5\u8ba4\u4e3a\u662f\u7231\u4e3d\u4e1d\u624b\u4e2d\u7684\u724c\u4e0d\u540c\u3002 \u5f17\u5170\u514b\u6084\u6084\u544a\u8bc9\u4f60\uff0c\u6700\u8fd1\u4f60\u5927\u6982\u770b\u4e0d\u5230\u6bd4\u8fd9\u66f4\u8f7b\u677e\u6109\u5feb\u7684\u9898\u4e86\u3002 Input Format \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u4e0d\u8d85\u8fc710\u7684\u6b63\u6574\u6570T\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002\u63a5\u4e0b\u6765\u6709T\u4e2a\u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u4e0d\u8d85\u8fc730\u7684\u6b63\u5947\u6570\uff0c\u8868\u793a\u5361\u7247\u6570\u91cf\u3002 Output Format \u8f93\u51fa\u5305\u542bT\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e00\u4e2a\u6574\u6570\u8868\u793a\u5206\u724c\u7684\u65b9\u6848\u6570\u3002 Sample Input 2 1 3 Sample Output 1 4 FineArtz's solution Star /* game */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n; cin >> n; cout << (1 << (n - 1)) << endl; } return 0; }","title":"1104"},{"location":"nr/1104/#1104-game","text":"\u9898\u76ee","title":"1104 game"},{"location":"nr/1104/#fineartzs-solution-star","text":"/* game */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n; cin >> n; cout << (1 << (n - 1)) << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1105/","text":"1105 path \u9898\u76ee path Description \u4ee5\u4e0b\u6458\u81ea\u662f\u67d0ACM\u961f\u67d0\u6b21\u5bf9\u8bdd\u7684\u67d0\u6c11\u95f4\u8bb0\u8f7d\uff1a \u2026\u2026 \u201d\u63a5\u4e0b\u6765\u6765\u8ba8\u8bba\u4e00\u4e0b\u5173\u4e8e\u5982\u4f55\u5403\u996d\u7684\u95ee\u9898\u3002\u201c \u5530\u5530\u5530\u3002\u753b\u51fa\u4e86\u4e00\u5f20\u65e0\u5411\u56fe\u3002 \u201d\u6211\u4eec\u73b0\u5728\u5904\u4e8eS\u70b9\uff0c\u98df\u5802\u5904\u4e8eT\u70b9\u3002\u201c \u6307\u6307\u70b9\u70b9\u3002 \u201d\u672c\u6765\u5403\u996d\u662f\u4e2a\u5f88\u7b80\u5355\u7684\u95ee\u9898\uff0c\u8fd9\u6761\u8def\u662f\u6700\u77ed\u8def\u5f84\uff0c\u6211\u4eec\u987a\u7740\u8d70\u8fc7\u53bb\u5c31\u597d\u3002\u201c \u961f\u957f\u753b\u51fa\u4e86\u4e00\u6761\u6700\u77ed\u8def\u5f84\u3002 \u201d\u4f46\u662f\u4f60\u4eec\u4e24\u4e2a\u975e\u8981\u63d0\u51fa\u53e4\u602a\u7684\u8981\u6c42\u3002\u201c \u62ff\u8d77\u7b14\u6307\u5411\u5176\u4e2d\u4e00\u4eba\u3002 \u201d\u9996\u5148\u662f\u4f60\uff0c\u60f3\u8981\u8d70\u4e00\u6761\u4eba\u6700\u5c11\u7684\u8def\u7ebf\uff0c\u8ba9\u6211\u611f\u5230\u975e\u5e38\u5934\u75bc\uff0c\u56e0\u4e3a\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ef\u80fd\u8981\u7ed5\u5f88\u8fdc\u7684\u4e00\u6bb5\u8def\u3002\u201c \u7b14\u5c16\u4e00\u8f6c\u3002 \u201d\u7136\u540e\u662f\u4f60\uff0c\u5c45\u7136\u975e\u8981\u8d70\u4e00\u6761\u6700\u9634\u6697\u7684\u8def\u7ebf\uff0c\u6211\u5df2\u7ecf\u5b8c\u5168\u4e0d\u80fd\u591f\u7406\u89e3\u4f60\u5728\u601d\u8003\u4e9b\u4ec0\u4e48\u4e86\u3002\u201c \u2026\u2026 \u8bb0\u8f7d\u5230\u6b64\u7ed3\u675f\u3002 \u6211\u4eec\u5bf9\u8fd9\u6bb5\u5386\u53f2\u5f88\u6709\u5174\u8da3\u3002\u73b0\u5728\u5df2\u77e5\u4e0a\u8ff0\u961f\u957f\u753b\u51fa\u7684\u56fe\uff0c\u4ee5\u53ca\u56fe\u4e2d\u7684S\u3001T\u548c\u5404\u8fb9\u7684\u6743\u503c\uff0c\u6c42\u4e09\u4eba\u6240\u8981\u6c42\u7684\u8def\u7ebf\u3002 \u63d0\u793a\uff1a\u6ca1\u6709\u5b66\u4e60\u8fc7\u6700\u77ed\u8def\u5f84\u7684\u540c\u5b66\u53ef\u4ee5\u4e0a\u7f51\u67e5\u627e\u4e00\u4e0b\u76f8\u5173\u8d44\u6599\uff0c\u63a8\u8350\u4f7f\u7528SPFA\u6216\u8005dijkstra\u7b97\u6cd5\u3002 Input Format \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u4e0d\u8d85\u8fc710\u7684\u6b63\u6574\u6570T\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765\u6709T\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e2a\u90e8\u5206\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u56db\u4e2a\u6b63\u6574\u6570n\u3001m\u3001s\u3001t\uff0c(1<=n<=1000\uff0c0<=m<=10000)\uff0cs\u3001t\u8868\u793a\u8d77\u70b9\u7ec8\u70b9\u3002\u63a5\u4e0b\u6765\u6709m\u884c\uff0c\u7b2ci\u884c\u63cf\u8ff0\u7b2ci\u6761\u8fb9\u7684\u4fe1\u606f\uff0c\u6240\u6709\u6743\u5747\u4e3a\u6b63\u6574\u6570\uff0c\u5e76\u4e14\u4e0d\u8d85\u8fc732768\uff0c\u683c\u5f0f\u89c1\u6837\u4f8b\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6570\u636e\u4e2d\u7684\u683c\u5f0f\u4e0e\u6837\u4f8b\u4e00\u81f4\u3002 \u9876\u70b9\u6807\u53f7\u4e3a1~n\u6807\u53f7\u3002 Output Format \u8f93\u51fa\u5305\u542bT\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e09\u4e2a\u6b63\u6574\u6570\u5206\u522b\u6309\u987a\u5e8f\u8868\u793a\u8def\u5f84\u7684\u6700\u5c0f\u957f\u5ea6\u548c\u3001\u8def\u5f84\u7684\u6700\u5c11\u4eba\u6570\u548c\uff0c\u4ee5\u53ca\u8def\u5f84\u7684\u6700\u5c0f\u4eae\u5ea6\u503c\u3002 Sample Input 1 3 3 1 3 Name: Short but crowd road, From: 1, To: 2, Length: 1, People number: 10, Light: 1; Name: Normal road, From: 2, To: 3, Length: 1, People number: 1, Light: 1; Name: Long but not crowd road, From: 1, To: 3, Length: 10, People number: 1, Light: 1; Sample Output 2 1 1 FineArtz's solution Star /* path */ #include <iostream> #include <cstring> using namespace std; const int INF = 400000000; int a[1005][1005][3] = {0}; inline int getNum(char *s){ int i = 0; while (i < strlen(s) && !isdigit(s[i])) ++i; int ret = 0; while (i < strlen(s) && isdigit(s[i])){ ret = ret * 10 + s[i] - '0'; ++i; } return ret; } inline void addEdge(int u, int v, int *w){ for (int i = 0; i < 3; ++i){ if (a[u][v][i] > w[i]){ a[u][v][i] = w[i]; a[v][u][i] = w[i]; } } } int dijkstra(int n, int m, int k){ bool vis[10005] = {0}; int dis[10005] = {0}; int q[10005], front = 0, rear = 0; for (int i = 1; i <= n; ++i) dis[i] = INF; dis[1] = 0; vis[1] = true; q[rear++] = 1; while (front != rear){ int x = q[front++]; vis[x] = false; for (int i = 1; i <= n; ++i){ if (x != i){ if (dis[i] > dis[x] + a[x][i][k]){ dis[i] = dis[x] + a[x][i][k]; if (!vis[i]){ q[rear++] = i; vis[i] = true; } } } } } return (dis[n] != INF ? dis[n] : -1); } void solve(int n, int m, int s, int t){ memset(a, 0, sizeof(a)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (i != j) for (int k = 0; k < 3; ++k) a[i][j][k] = INF; for (int i = 1; i <= m; ++i){ char ss[1000]; int len; int u, v, w[3]; char ch; len = 0; while ((ch = getchar()) != ';'){ ss[len++] = ch; } ss[len] = '\\0'; //cout << ss << endl; auto p = strstr(ss, \"From: \"); u = getNum(p); p = strstr(ss, \"To: \"); v = getNum(p); p = strstr(ss, \"Length: \"); w[0] = getNum(p); p = strstr(ss, \"People number: \"); w[1] = getNum(p); p = strstr(ss, \"Light: \"); w[2] = getNum(p); if (u == 1) u = s; else if (u == s) u = 1; else if (u == n) u = t; else if (u == t) u = n; if (v == 1) v = s; else if (v == s) v = 1; else if (v == n) v = t; else if (v == t) v = n; if (u != v) addEdge(u, v, w); } for (int i = 0; i < 3; ++i) cout << dijkstra(n, m, i) << ' '; cout << '\\n'; } int main(){ int tt; cin >> tt; while (tt--){ int n, m, s, t; cin >> n >> m >> s >> t; solve(n, m, s, t); } return 0; }","title":"1105"},{"location":"nr/1105/#1105-path","text":"\u9898\u76ee","title":"1105 path"},{"location":"nr/1105/#fineartzs-solution-star","text":"/* path */ #include <iostream> #include <cstring> using namespace std; const int INF = 400000000; int a[1005][1005][3] = {0}; inline int getNum(char *s){ int i = 0; while (i < strlen(s) && !isdigit(s[i])) ++i; int ret = 0; while (i < strlen(s) && isdigit(s[i])){ ret = ret * 10 + s[i] - '0'; ++i; } return ret; } inline void addEdge(int u, int v, int *w){ for (int i = 0; i < 3; ++i){ if (a[u][v][i] > w[i]){ a[u][v][i] = w[i]; a[v][u][i] = w[i]; } } } int dijkstra(int n, int m, int k){ bool vis[10005] = {0}; int dis[10005] = {0}; int q[10005], front = 0, rear = 0; for (int i = 1; i <= n; ++i) dis[i] = INF; dis[1] = 0; vis[1] = true; q[rear++] = 1; while (front != rear){ int x = q[front++]; vis[x] = false; for (int i = 1; i <= n; ++i){ if (x != i){ if (dis[i] > dis[x] + a[x][i][k]){ dis[i] = dis[x] + a[x][i][k]; if (!vis[i]){ q[rear++] = i; vis[i] = true; } } } } } return (dis[n] != INF ? dis[n] : -1); } void solve(int n, int m, int s, int t){ memset(a, 0, sizeof(a)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (i != j) for (int k = 0; k < 3; ++k) a[i][j][k] = INF; for (int i = 1; i <= m; ++i){ char ss[1000]; int len; int u, v, w[3]; char ch; len = 0; while ((ch = getchar()) != ';'){ ss[len++] = ch; } ss[len] = '\\0'; //cout << ss << endl; auto p = strstr(ss, \"From: \"); u = getNum(p); p = strstr(ss, \"To: \"); v = getNum(p); p = strstr(ss, \"Length: \"); w[0] = getNum(p); p = strstr(ss, \"People number: \"); w[1] = getNum(p); p = strstr(ss, \"Light: \"); w[2] = getNum(p); if (u == 1) u = s; else if (u == s) u = 1; else if (u == n) u = t; else if (u == t) u = n; if (v == 1) v = s; else if (v == s) v = 1; else if (v == n) v = t; else if (v == t) v = n; if (u != v) addEdge(u, v, w); } for (int i = 0; i < 3; ++i) cout << dijkstra(n, m, i) << ' '; cout << '\\n'; } int main(){ int tt; cin >> tt; while (tt--){ int n, m, s, t; cin >> n >> m >> s >> t; solve(n, m, s, t); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1106/","text":"1106 sudoku \u9898\u76ee sudoku Description \u6570\u72ec\uff08\u3059\u3046\u3069\u304f\uff0cSudoku\uff09\u662f\u4e00\u79cd\u8fd0\u7528\u7eb8\u3001\u7b14\u8fdb\u884c\u6f14\u7b97\u7684\u903b\u8f91\u6e38\u620f\u3002\u73a9\u5bb6\u9700\u8981\u6839\u636e9\u00d79\u76d8\u9762\u4e0a\u7684\u5df2\u77e5\u6570\u5b57\uff0c\u63a8\u7406\u51fa\u6240\u6709\u5269\u4f59\u7a7a\u683c\u7684\u6570\u5b57\uff0c\u5e76\u6ee1\u8db3\u6bcf\u4e00\u884c\u3001\u6bcf\u4e00\u5217\u3001\u6bcf\u4e00\u4e2a\u7c97\u7ebf\u5bab\u5185\u7684\u6570\u5b57\u5747\u542b1-9\uff0c\u4e0d\u91cd\u590d\u3002 \u6bcf\u4e00\u9053\u5408\u683c\u7684\u6570\u72ec\u8c1c\u9898\u90fd\u6709\u4e14\u4ec5\u6709\u552f\u4e00\u7b54\u6848\uff0c\u63a8\u7406\u65b9\u6cd5\u4e5f\u4ee5\u6b64\u4e3a\u57fa\u7840\uff0c\u4efb\u4f55\u65e0\u89e3\u6216\u591a\u89e3\u7684\u9898\u76ee\u90fd\u662f\u4e0d\u5408\u683c\u7684\u3002 \u2015\u2015\u6458\u81ea\u767e\u5ea6\u767e\u79d1 \u6570\u72ec\u662f\u8001\u5c11\u54b8\u5b9c\u7684\u6e38\u620f\u3002\u73b0\u5728\u6211\u4eec\u60f3\u77e5\u9053\uff0c\u6211\u4eec\u7ed9\u5b9a\u7684\u6570\u72ec\u662f\u5426\u662f\u5408\u683c\u7684\u6570\u72ec\uff08\u4e5f\u5c31\u662f\u8bf4\u6709\u89e3\u4e14\u552f\u4e00\uff09\u3002 Input Format \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u4e0d\u8d85\u8fc710\u7684\u6574\u6570T\uff0c\u8868\u793a\u6570\u636e\u7684\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765\u6709T\u4e2a\u90e8\u5206\uff0c\u6bcf\u4e24\u4e2a\u90e8\u5206\u4e4b\u95f4\u7528\u4e00\u4e2a\u6362\u884c\u7b26\u9694\u5f00\uff0c\u6bcf\u4e2a\u90e8\u5206\u63cf\u8ff0\u4e00\u4e2a\u6570\u72ec\u5c40\u9762\u3002 \u6bcf\u4e2a\u5c40\u9762\u75319*9\u7684\u65b9\u9635\u63cf\u8ff0\uff0c\u82e5\u65b9\u9635\u4e2d\u7684\u6570\u5b57\u4e3a1~9\uff0c\u5219\u8bf4\u660e\u8be5\u4f4d\u7f6e\u662f\u5df2\u7ecf\u88ab\u586b\u597d\uff1b\u82e5\u662f0,\u5219\u8868\u793a\u8be5\u4f4d\u7f6e\u4e3a\u7a7a\u3002 Output Format \u8f93\u51fa\u5305\u542bT\u884c\uff0c\u6bcf\u884c\u5305\u62ec\u4e00\u4e2a\u201cYes\u201d\u6216\u201cNo\u201d\u8868\u793a\u8be5\u6570\u72ec\u662f\u5426\u5408\u683c\u3002 Sample Input 2 0 7 2 1 0 0 4 0 0 0 1 0 8 0 4 0 2 0 0 4 0 3 0 0 5 9 0 1 0 0 9 0 0 0 4 7 3 0 0 5 0 6 0 0 9 4 2 0 0 3 0 0 0 8 0 5 1 0 0 7 0 3 0 0 9 0 2 0 3 0 6 0 0 0 4 0 0 9 8 7 0 0 0 0 0 7 0 0 0 6 2 0 4 0 5 1 0 7 0 8 0 0 0 0 2 0 1 9 5 0 0 6 0 0 2 0 0 0 0 1 0 0 4 9 5 0 0 0 8 0 0 0 0 0 1 3 7 0 1 0 0 0 0 5 0 1 0 3 0 0 7 0 2 9 0 0 0 2 0 1 0 0 Sample Output Yes No FineArtz's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXNODE = 2000005, MAXN = 1050; const int SLOT = 0, ROW = 1, COL = 2, SUB = 3; class DancingLink{ private: int n, m; int U[MAXNODE], D[MAXNODE], L[MAXNODE], R[MAXNODE]; int row[MAXNODE], col[MAXNODE]; int head[MAXN], sum[MAXN]; int ansd, size; public: int solution; void init(int n = 0, int m = 0){ this->n = n; this->m = m; size = m + 1; solution = 0; memset(sum, 0, sizeof(sum)); memset(head, -1, sizeof(head)); for (int i = 0; i <= m; ++i){ L[i] = i - 1; R[i] = i + 1; U[i] = i; D[i] = i; } L[0] = m; R[m] = 0; } void addNode(int r, int c){ row[size] = r; col[size] = c; U[size] = U[c]; D[size] = c; U[D[size]] = size; D[U[size]] = size; if (head[r] == -1){ //empty row L[size] = size; R[size] = size; head[r] = size; } else{ L[size] = L[head[r]]; R[size] = head[r]; L[R[size]] = size; R[L[size]] = size; } ++sum[col[size++]]; } void delNode(int x){ R[L[x]] = R[x]; L[R[x]] = L[x]; for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]){ U[D[j]] = U[j]; D[U[j]] = D[j]; --sum[col[j]]; } } } void resNode(int x){ for (int i = U[x]; i != x; i = U[i]){ for (int j = L[i]; j != i; j = L[j]){ U[D[j]] = j; D[U[j]] = j; ++sum[col[j]]; } } R[L[x]] = x; L[R[x]] = x; } void dfs(int depth){ if (R[0] == 0){ ++solution; return; } int x = R[0]; for (int i = R[0]; i != 0; i = R[i]){ if (sum[x] > sum[i]) x = i; } delNode(x); for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]) delNode(col[j]); dfs(depth + 1); if (solution >= 2) return; for (int j = L[i]; j != i; j = L[j]) resNode(col[j]); } resNode(x); } }; inline int encode(int x, int y, int z){ return 81 * x + 9 * y + z + 1; } inline void decode(int code, int &x, int &y, int &z){ --code; z = code % 9; code /= 9; y = code % 9; code /= 9; x = code % 9; } DancingLink dlx; void solve(){ int a[9][9]; dlx.init(9 * 9 * 9, 9 * 9 * 4); for (int i = 0; i < 9; ++i) for (int j = 0; j < 9; ++j) cin >> a[i][j]; for (int i = 0; i < 9; ++i){ for (int j = 0; j < 9; ++j){ for (int k = 0; k < 9; ++k){ if (a[i][j] == 0 || a[i][j] == k + 1){ int x = encode(i, j, k); dlx.addNode(x, encode(0, i, j)); dlx.addNode(x, encode(1, i, k)); dlx.addNode(x, encode(2, j, k)); dlx.addNode(x, encode(3, i / 3 * 3 + j / 3, k)); } } } } dlx.dfs(0); if (dlx.solution == 1) cout << \"Yes\" << endl; else cout << \"No\" << endl; } int main(){ int t; cin >> t; while (t--){ solve(); } return 0; }","title":"1106"},{"location":"nr/1106/#1106-sudoku","text":"\u9898\u76ee","title":"1106 sudoku"},{"location":"nr/1106/#fineartzs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNODE = 2000005, MAXN = 1050; const int SLOT = 0, ROW = 1, COL = 2, SUB = 3; class DancingLink{ private: int n, m; int U[MAXNODE], D[MAXNODE], L[MAXNODE], R[MAXNODE]; int row[MAXNODE], col[MAXNODE]; int head[MAXN], sum[MAXN]; int ansd, size; public: int solution; void init(int n = 0, int m = 0){ this->n = n; this->m = m; size = m + 1; solution = 0; memset(sum, 0, sizeof(sum)); memset(head, -1, sizeof(head)); for (int i = 0; i <= m; ++i){ L[i] = i - 1; R[i] = i + 1; U[i] = i; D[i] = i; } L[0] = m; R[m] = 0; } void addNode(int r, int c){ row[size] = r; col[size] = c; U[size] = U[c]; D[size] = c; U[D[size]] = size; D[U[size]] = size; if (head[r] == -1){ //empty row L[size] = size; R[size] = size; head[r] = size; } else{ L[size] = L[head[r]]; R[size] = head[r]; L[R[size]] = size; R[L[size]] = size; } ++sum[col[size++]]; } void delNode(int x){ R[L[x]] = R[x]; L[R[x]] = L[x]; for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]){ U[D[j]] = U[j]; D[U[j]] = D[j]; --sum[col[j]]; } } } void resNode(int x){ for (int i = U[x]; i != x; i = U[i]){ for (int j = L[i]; j != i; j = L[j]){ U[D[j]] = j; D[U[j]] = j; ++sum[col[j]]; } } R[L[x]] = x; L[R[x]] = x; } void dfs(int depth){ if (R[0] == 0){ ++solution; return; } int x = R[0]; for (int i = R[0]; i != 0; i = R[i]){ if (sum[x] > sum[i]) x = i; } delNode(x); for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]) delNode(col[j]); dfs(depth + 1); if (solution >= 2) return; for (int j = L[i]; j != i; j = L[j]) resNode(col[j]); } resNode(x); } }; inline int encode(int x, int y, int z){ return 81 * x + 9 * y + z + 1; } inline void decode(int code, int &x, int &y, int &z){ --code; z = code % 9; code /= 9; y = code % 9; code /= 9; x = code % 9; } DancingLink dlx; void solve(){ int a[9][9]; dlx.init(9 * 9 * 9, 9 * 9 * 4); for (int i = 0; i < 9; ++i) for (int j = 0; j < 9; ++j) cin >> a[i][j]; for (int i = 0; i < 9; ++i){ for (int j = 0; j < 9; ++j){ for (int k = 0; k < 9; ++k){ if (a[i][j] == 0 || a[i][j] == k + 1){ int x = encode(i, j, k); dlx.addNode(x, encode(0, i, j)); dlx.addNode(x, encode(1, i, k)); dlx.addNode(x, encode(2, j, k)); dlx.addNode(x, encode(3, i / 3 * 3 + j / 3, k)); } } } } dlx.dfs(0); if (dlx.solution == 1) cout << \"Yes\" << endl; else cout << \"No\" << endl; } int main(){ int t; cin >> t; while (t--){ solve(); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1107/","text":"1107 \u4e8c\u54e5\u7684\u8d4c\u535a \u9898\u76ee Description \u4e8c\u54e5\u542c\u8bf4\u4e86\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\uff0c\u4e8e\u662f\u62ff\u6765\u548c\u4ed6\u7684\u5ba4\u53cb\u8d4c\u535a. \u684c\u5b50\u4e0a1~n\u6709n\u4e2a\u6570(n\u4e3a0\u5c31\u8868\u793a\u4e00\u4e2a\u6570\u90fd\u6ca1\u6709),\u4e24\u4e2a\u4eba\u8f6e\u6d41\u9009\u6570,\u6bcf\u6b21\u4e00\u4e2a\u4eba\u8981\u9009\u4e00\u4e2a\u6ca1\u88ab\u62ff\u8d70\u7684\u6570x,\u7136\u540e\u628ax\u548cx\u6240\u6709\u7684\u7ea6\u6570\u62ff\u8d70,\u4e0d\u80fd\u64cd\u4f5c\u4e86\u5c31\u7b97\u8f93. \u8fd9\u4e24\u4e2a\u65e0\u804a\u7684\u4eba\u8981\u73a9m\u5c40,\u6bcf\u6b21\u4e8c\u54e5\u90fd\u5148\u624b\u62ff\u6570,\u800c\u4e14\u4e8c\u54e5\u662f\u4e00\u4e2a\u8d85\u7ea7\u806a\u660e\u7684\u4eba,\u95ee\u4e8c\u54e5\u5728\u6bcf\u4e00\u5c40\u91cc\u662f\u5426\u80fd\u8d62? \u6709\u4e00\u53ea\u5c0f\u9e1f\u8bf4\u8fd9\u9053\u9898\u662f\u9001\u5206\u7684 Input Format \u7b2c1\u884c,\u4e00\u4e2a\u6570\u5b57m,\u8868\u793a\u6e38\u620f\u4e00\u5171\u6709m\u5c40. \u7b2c2~m+1\u884c,\u4e00\u4e2a\u6570\u5b57n_i\u8868\u793a\u8fd9\u5c40\u6e38\u620f\u4e24\u4e2a\u4eba\u8981\u53d6\u7684\u6570\u662f1~n_i. Output Format m\u884c,\u6bcf\u884c\u4e00\u4e2a\u5355\u8bcd \"yes\" \u6216\u8005 \"no\",\u8868\u793a\u8fd9\u4e00\u5c40\u4e8c\u54e5\u662f\u5426\u80fd\u591f\u83b7\u80dc. Restrictions m<=2,000 n<=10,000,000 Sample Input 1 1 1 Sample Output 1 yes Sample Input 2 2 1 2 Sample Output 2 yes yes Sample Input 3 1 0 Sample Output 3 no FineArtz's solution Star /* \u4e8c\u54e5\u7684\u8d4c\u535a */ #include <iostream> using namespace std; int main(){ int m; cin >> m; while (m--){ int t; cin >> t; if (t == 0) cout << \"no\" << endl; else cout << \"yes\" << endl; } return 0; } WashSwang's solution Star #include <iostream> using namespace std; int m,n; int main() { cin>>m; for (int i=0;i<m;++i) { cin>>n; if (n!=0) cout<<\"yes\"<<endl; else cout<<\"no\"<<endl; } return 0; }","title":"1107"},{"location":"nr/1107/#1107","text":"\u9898\u76ee","title":"1107 \u4e8c\u54e5\u7684\u8d4c\u535a"},{"location":"nr/1107/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u8d4c\u535a */ #include <iostream> using namespace std; int main(){ int m; cin >> m; while (m--){ int t; cin >> t; if (t == 0) cout << \"no\" << endl; else cout << \"yes\" << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1107/#washswangs-solution-star","text":"#include <iostream> using namespace std; int m,n; int main() { cin>>m; for (int i=0;i<m;++i) { cin>>n; if (n!=0) cout<<\"yes\"<<endl; else cout<<\"no\"<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1108/","text":"1108 \u4e8c\u54e5\u7684\u722c\u6811 \u9898\u76ee Description \u4e8c\u54e5\u7684\u5ba4\u53cb\u8d4c\u535a\u7ecf\u5e38\u8f93\u7ed9\u4e8c\u54e5,\u88ab\u6fc0\u6012\u4e86. \u4ed6\u8ffd\u6253\u7740\u4e8c\u54e5,\u628a\u4e8c\u54e5\u8ffd\u4e0a\u4e86\u4e00\u68f5\u6811(\u6811\u7531\u8282\u70b9\u548c\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u6784\u6210,\u6ca1\u6709\u73af,\u4f46\u662f\u662f\u5168\u8fde\u901a\u7684),\u4e24\u4e2a\u4eba\u5728\u6811\u7684\u67d0\u4e24\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e.\u4f60\u8981\u5e2e\u4e8c\u54e5\u8ba1\u7b97\u4ed6\u4eec\u4e4b\u95f4\u9694\u4e86\u591a\u8fdc\u7684\u8ddd\u79bb(\u6cbf\u7740\u6811\u7684\u8fb9\u8ba1\u7b97\u8ddd\u79bb). \u6709\u4e00\u53ea\u5c0f\u9e1f\u8bf4\u4e0d\u4f1a\u7684\u8bdd\u53ef\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u5b58\u50a8... Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n, \u8868\u793a\u6811\u4e00\u5171\u6709n\u4e2a\u8282\u70b9, \u4ed6\u4eec\u7684\u7f16\u53f7\u662f1~n. \u4e4b\u540e\u7684n-1\u884c,\u6bcf\u884c\u6709\u4e09\u4e2a\u6570a_i,b_i\u548cc_i\u4e2d\u95f4\u5404\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00. a_i, b_i\u8868\u793a\u6811\u6709\u4e00\u6761\u4ecea_i\u53f7\u8282\u70b9\u5230b_i\u53f7\u8282\u70b9\u7684\u8fb9,c_i\u662f\u8fd9\u6761\u8fb9\u7684\u957f\u5ea6. \u518d\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570m, \u8868\u793a\u6709m\u6b21\u8be2\u95ee. \u4e4b\u540em\u884c\u6bcf\u884c\u6709\u4e24\u4e2a\u6570d_j\u548ce_j,\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00,\u8868\u793a\u4e8c\u54e5\u548c\u5ba4\u53cb\u5728\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u4f4d\u7f6e\u4e0a,\u8bf7\u4f60\u5e2e\u52a9\u8ba1\u7b97\u4ed6\u4eec\u7684\u8ddd\u79bb. Output Format m\u884c,\u662f\u8fd9m\u6b21\u8be2\u95ee\u5f97\u5230\u7684\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb. Restrictions \u5bf9\u4e8e100%\u7684\u6570\u636en<=100. \u5bf9\u4e8e100%\u7684\u6570\u636em<=10. Sample Input 3 2 1 4 3 1 5 3 1 2 1 3 2 3 Sample Output 4 5 9 WashSwang's solution Star #include <iostream> using namespace std; int x,y,v,n,m,dis[101][101]; int main() { cin>>n; for (int i=0;i<n;++i) for (int j=0;j<n;++j) dis[i][j]=0x3f3f3f3f; for (int i=0;i<n-1;++i){ cin>>x>>y>>v; dis[x-1][y-1]=v; dis[y-1][x-1]=v; dis[i][i]=0; } for (int k=0;k<n;++k) for (int i=0;i<n;++i) for (int j=0;j<n;++j) if (dis[i][k]+dis[k][j]<dis[i][j]) dis[i][j]=dis[i][k]+dis[k][j]; cin>>m; for (int i=0;i<m;++i){ cin>>x>>y; cout<<dis[x-1][y-1]<<endl; } return 0; }","title":"1108"},{"location":"nr/1108/#1108","text":"\u9898\u76ee","title":"1108 \u4e8c\u54e5\u7684\u722c\u6811"},{"location":"nr/1108/#washswangs-solution-star","text":"#include <iostream> using namespace std; int x,y,v,n,m,dis[101][101]; int main() { cin>>n; for (int i=0;i<n;++i) for (int j=0;j<n;++j) dis[i][j]=0x3f3f3f3f; for (int i=0;i<n-1;++i){ cin>>x>>y>>v; dis[x-1][y-1]=v; dis[y-1][x-1]=v; dis[i][i]=0; } for (int k=0;k<n;++k) for (int i=0;i<n;++i) for (int j=0;j<n;++j) if (dis[i][k]+dis[k][j]<dis[i][j]) dis[i][j]=dis[i][k]+dis[k][j]; cin>>m; for (int i=0;i<m;++i){ cin>>x>>y; cout<<dis[x-1][y-1]<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1111/","text":"1111 \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 \u9898\u76ee Description \u4e8c\u54e5\u5b66\u4e86\u4e8c\u53c9\u6811\u7684\u987a\u5e8f\u5b58\u50a8\u540e\uff0c\u88ab\u4e0b\u9762\u4e00\u4e2a\u95ee\u9898\u96be\u4f4f\u4e86\uff0c\u4e8e\u662f\u4ed6\u8bf7\u4f60\u5e2e\u4ed6\u89e3\u51b3\u3002\u7ed9\u4f60\u4e00\u4e2a\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\uff0c\u95ee\u987a\u5e8f\u5b58\u50a8\u7684\u6570\u7ec4\u662f\u4ec0\u4e48\u6837\u5b50\u7684\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\u524d\u5e8f\u904d\u5386\uff0c\u7b2c\u4e8c\u884c\u4e3a\u4e2d\u5e8f\u904d\u5386\uff0c\u8282\u70b9\u4e2a\u6570\u4e0d\u8d85\u8fc726. Output Format \u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u987a\u5e8f\u5b58\u50a8\u7684\u6570\u7ec4\uff0c\u4ee5\u7a7a\u683c\u9694\u5f00\uff0cNULL\u8868\u793a\u7a7a\u8282\u70b9\uff0c\u6570\u7ec4\u7a7a\u95f4\u4e0d\u8d85\u8fc71000\u4e2a\u8282\u70b9. Sample Input ABCD BADC Sample Output A B C NULL NULL D FineArtz's solution Star /* \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; char a[1005]; char dlr[30], ldr[30]; void restoreTree(char *dlr, char *ldr, int len, int root){ if (len <= 0) return; char r = dlr[0]; a[root] = r; int i = 0; while (ldr[i] != r) ++i; restoreTree(dlr + 1, ldr, i, root * 2); restoreTree(dlr + i + 1, ldr + i + 1, len - i - 1, root * 2 + 1); } int main(){ cin >> dlr >> ldr; for (int i = 1; i <= 1004; ++i) a[i] = ' '; restoreTree(dlr, ldr, strlen(dlr), 1); int n = 1000; while (a[n] == ' ') --n; for (int i = 1; i <= n; ++i){ if (a[i] == ' ') cout << \"NULL \"; else cout << a[i] << ' '; } cout << endl; return 0; } WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; char pre[100],in[100],ans[2000]; int maxn; void dfs(int ps,int pe,int is,int it,int p) { int root,leftlen,rightlen; for (root=is;root<it;++root){ if (in[root]==pre[ps]) break; } ans[p]=in[root]; if (p>maxn) maxn=p; leftlen=root-is; if (leftlen>0) dfs(ps+1,ps+leftlen,is,root,p*2); rightlen=it-root-1; if (rightlen>0) dfs(ps+leftlen+1,pe,root+1,it,p*2+1); } int main() { cin>>pre; cin>>in; dfs(0,strlen(pre),0,strlen(in),1); for (int i=1;i<=maxn;++i) if (ans[i]) cout<<ans[i]<<\" \"; else cout<<\"NULL \"; return 0; }","title":"1111"},{"location":"nr/1111/#1111","text":"\u9898\u76ee","title":"1111 \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811"},{"location":"nr/1111/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; char a[1005]; char dlr[30], ldr[30]; void restoreTree(char *dlr, char *ldr, int len, int root){ if (len <= 0) return; char r = dlr[0]; a[root] = r; int i = 0; while (ldr[i] != r) ++i; restoreTree(dlr + 1, ldr, i, root * 2); restoreTree(dlr + i + 1, ldr + i + 1, len - i - 1, root * 2 + 1); } int main(){ cin >> dlr >> ldr; for (int i = 1; i <= 1004; ++i) a[i] = ' '; restoreTree(dlr, ldr, strlen(dlr), 1); int n = 1000; while (a[n] == ' ') --n; for (int i = 1; i <= n; ++i){ if (a[i] == ' ') cout << \"NULL \"; else cout << a[i] << ' '; } cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1111/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; char pre[100],in[100],ans[2000]; int maxn; void dfs(int ps,int pe,int is,int it,int p) { int root,leftlen,rightlen; for (root=is;root<it;++root){ if (in[root]==pre[ps]) break; } ans[p]=in[root]; if (p>maxn) maxn=p; leftlen=root-is; if (leftlen>0) dfs(ps+1,ps+leftlen,is,root,p*2); rightlen=it-root-1; if (rightlen>0) dfs(ps+leftlen+1,pe,root+1,it,p*2+1); } int main() { cin>>pre; cin>>in; dfs(0,strlen(pre),0,strlen(in),1); for (int i=1;i<=maxn;++i) if (ans[i]) cout<<ans[i]<<\" \"; else cout<<\"NULL \"; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1112/","text":"1112 \u4e8c\u54e5\u53d1\u8bba\u6587 \u9898\u76ee Description \u4e8c\u54e5\u662f\u4e00\u4e2a\u70ed\u7231\u79d1\u7814\u7684\u4eba\u3002\u524d\u51e0\u5929\u4e8c\u54e5\u7684\u4e00\u7bc7\u8bba\u6587\u88ab\u67d0\u4e2a\u56fd\u9645\u9876\u7ea7\u4f1a\u8bae\u5f55\u7528\uff0c\u4eca\u5929\uff0c\u4e8c\u54e5\u8981\u5728\u5b66\u6821\u91cc\u4e3e\u884c\u4e00\u4e2a\u5b66\u672f\u95ee\u7b54\u4f1a\uff0c\u63a5\u53d7\u540c\u5b66\u4eec\u7684\u63d0\u95ee\u3002 \u5728\u4ea4\u5927\uff0c\u6709n\u4e2a\u4eba\u5bf9\u4e8c\u54e5\u7684\u7814\u7a76\u65b9\u5411\u611f\u5174\u8da3\uff08\u4ee51-n\u7f16\u53f7\uff09.\u4ed6\u4eec\u5e76\u4e0d\u4e92\u76f8\u8ba4\u8bc6\uff0c\u4f46\u662f\u5982\u679c\u7532\u8ba4\u8bc6\u4e59\u90a3\u4e48\u4e59\u4e00\u5b9a\u8ba4\u8bc6\u7532. \u8fd9n\u4e2a\u4eba\u4e2d\u6709k\u4e2a\u4eba\u5f97\u77e5\u4e8c\u54e5\u8981\u4e3e\u884c\u95ee\u7b54\u4f1a\u3002\u4e8c\u54e5\u5e76\u4e0d\u662f\u968f\u4fbf\u63a5\u53d7\u63d0\u95ee\u7684\uff0c\u4ed6\u4f1a\u5728\u6392\u961f\u63d0\u95ee\u7684\u4eba\u5f53\u4e2d\u6311\u9009\u5b66\u672f\u6c34\u5e73\u6700\u9ad8\u7684\u4eba\u63a5\u53d7\u63d0\u95ee\u3002\u800c\u63d0\u95ee\u5b8c\u4e4b\u540e\uff0c\u8fd9\u4f4d\u540c\u5b66\u4f1a\u7acb\u523b\u53bb\u627e\u4ed6\u8ba4\u8bc6\u7684\u5e76\u5bf9\u4e8c\u54e5\u7684\u7814\u7a76\u65b9\u5411\u611f\u5174\u8da3\u7684\u4eba\uff0c\u800c\u8fd9\u4e9b\u4eba\u4e5f\u4f1a\u7b2c\u4e00\u65f6\u95f4\u8d76\u5230\u73b0\u573a\u6392\u961f\u63d0\u95ee\u3002\u73b0\u5728\u4e8c\u54e5\u60f3\u77e5\u9053\u63d0\u95ee\u7684\u540c\u5b66\u662f\u6309\u4ec0\u4e48\u987a\u5e8f\u63d0\u95ee\u7684\u3002 Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e86\u4e24\u4e2a\u6574\u6570n,k(k<=n<=1000). \u63a5\u4e0b\u6765\u4e00\u884c\u6709n\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u540c\u5b66\u7684\u5b66\u672f\u6c34\u5e73\uff08<=100000).\u6bcf\u4e2a\u540c\u5b66\u7684\u5b66\u672f\u6c34\u5e73\u5404\u4e0d\u76f8\u540c. \u63a5\u4e0b\u6765\u4e00\u884c\u6709k\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u5f00\u59cb\u5c31\u77e5\u9053\u4e8c\u54e5\u7684\u8bb2\u5ea7\u7684\u540c\u5b66\u7684\u6807\u53f7(\u4ece1\u5f00\u59cb). \u6700\u540e\u662f\u4e00\u4e2an*n\u7684\u77e9\u9635\uff0c\u82e5\u7b2ci\u884c\u7b2cj\u5217\u662f1\u5219\u8868\u793a\u6807\u53f7\u4e3ai\u7684\u540c\u5b66\u548c\u6807\u53f7\u4e3aj\u7684\u540c\u5b66\u8ba4\u8bc6\uff0c\u5426\u5219\u4e3a\u4e0d\u8ba4\u8bc6\u3002 Output Format \u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u6309\u987a\u5e8f\u8868\u793a\u63d0\u95ee\u7684\u540c\u5b66\u7684\u7f16\u53f7. Sample Input 5 2 76708 24510 69869 85113 61546 3 4 0 1 1 1 1 1 0 1 0 1 1 1 0 0 0 1 0 0 0 0 1 1 0 0 0 Sample Output 4 1 3 5 2 FineArtz's solution Star /* \u4e8c\u54e5\u53d1\u8bba\u6587 */ #include <iostream> using namespace std; class Heap{ private: int a[1005] = {0}; int b[1005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; t = b[x]; b[x] = b[y]; b[y] = t; } public: void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i] > a[i / 2]){ swap(i, i / 2); i *= 2; } else break; } } void insert(int x, int y){ a[++heapsize] = x; b[heapsize] = y; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return b[1]; } bool empty(){ return (heapsize == 0); } }; Heap heap; int n, k; int a[1005], m[1005][1005]; bool v[1005] = {false}; int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= k; ++i){ int t; cin >> t; heap.insert(a[t], t); v[t] = true; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cin >> m[i][j]; } } while (!heap.empty()){ int x = heap.getMax(); cout << x << endl; heap.remove(); for (int i = 1; i <= n; ++i) if (m[x][i] && !v[i]){ heap.insert(a[i], i); v[i] = true; } } return 0; }","title":"1112"},{"location":"nr/1112/#1112","text":"\u9898\u76ee","title":"1112 \u4e8c\u54e5\u53d1\u8bba\u6587"},{"location":"nr/1112/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u53d1\u8bba\u6587 */ #include <iostream> using namespace std; class Heap{ private: int a[1005] = {0}; int b[1005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; t = b[x]; b[x] = b[y]; b[y] = t; } public: void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i] > a[i / 2]){ swap(i, i / 2); i *= 2; } else break; } } void insert(int x, int y){ a[++heapsize] = x; b[heapsize] = y; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return b[1]; } bool empty(){ return (heapsize == 0); } }; Heap heap; int n, k; int a[1005], m[1005][1005]; bool v[1005] = {false}; int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= k; ++i){ int t; cin >> t; heap.insert(a[t], t); v[t] = true; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cin >> m[i][j]; } } while (!heap.empty()){ int x = heap.getMax(); cout << x << endl; heap.remove(); for (int i = 1; i <= n; ++i) if (m[x][i] && !v[i]){ heap.insert(a[i], i); v[i] = true; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1113/","text":"1113 \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 \u9898\u76ee Description \u4e8c\u54e5\u53d1\u8868\u8bba\u6587\u540e\uff0c\u6709\u4e00\u4e2a\u795e\u79d8\u4eba\u7269\u8981\u4e3a\u4e8c\u54e5\u7684\u5b66\u6821\u53d1\u5956\u5b66\u91d1\u3002\u4e8c\u54e5\u7684\u5b66\u6821\u6709C\u540d\u5b66\u751f\uff0c\u8981\u4ece\u4e2d\u6311\u51faN\u4e2a\u3002\u8fd9\u4e2a\u795e\u79d8\u4eba\u7269\u7684\u7231\u597d\u6bd4\u8f83\u5947\u7279\uff0c\u4ed6\u5e0c\u671b\u5f97\u5230\u5956\u5b66\u91d1\u7684\u540c\u5b66\u7684\u6210\u7ee9\u7684\u4e2d\u4f4d\u6570\u5c3d\u91cf\u5927\u3002\u4f46\u540c\u65f6\uff0c\u4ed6\u4eec\u7684\u5956\u5b66\u91d1\u603b\u989d\u4e0d\u80fd\u8d85\u8fc7F\u3002 Input Format \u7b2c\u4e00\u884c\u6574\u6570\u662fN\u3001C\u548cF\u3002N\u4e00\u5b9a\u662f\u5947\u6570\uff0cN <= C\uff0c0 <=F<= 2000000000\uff0cN<=100000\uff0cC<=20000\u3002 \u63a5\u4e0b\u6765\u7684C\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e00\u540d\u5b66\u751f\u7684\u6210\u7ee9\u548c\u5956\u5b66\u91d1\u30020<=\u6210\u7ee9<=2000000000\uff1b0 <=\u5956\u5b66\u91d1<=100000\u3002 Output Format \u6ee1\u8db3\u6761\u4ef6\u7684\u6700\u5927\u4e2d\u4f4d\u6570\u3002\u5982\u679c\u65e0\u89e3\uff0c\u8f93\u51fa-1\u3002 Sample Input 3 5 70 30 25 50 21 20 20 5 18 35 30 Sample Output 35 FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 */ #include <iostream> #include <algorithm> using namespace std; const int INF = 2000000005; class Heap{ private: int a[200005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } public: void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return a[1]; } void removeAndInsert(int x){ a[1] = x; siftdown(); } }; pair<int, int> a[200005]; int sum1[200005] = {0}, sum2[200005] = {0}; int n, c, f; Heap heap1, heap2; void qsort(int l, int h){ if (l >= h) return; int i = l, j = h; pair<int, int> key = a[l]; while (i < j){ while (i < j && a[j] > key) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; qsort(l, i - 1); qsort(i + 1, h); } int main(){ cin >> n >> c >> f; for (int i = 1; i <= c; ++i){ cin >> a[i].first >> a[i].second; } sort(a + 1, a + c + 1); // for (int i = 1; i <= c; ++i) // cout << a[i].first << ' ' << a[i].second << endl; for (int i = 1; i <= n / 2; ++i){ sum1[n / 2] += a[i].second; heap1.insert(a[i].second); } for (int i = n / 2 + 1; i <= c; ++i){ int t = a[i].second; if (t > heap1.getMax()) sum1[i] = sum1[i - 1]; else{ sum1[i] = sum1[i - 1] - heap1.getMax() + t; heap1.remove(); heap1.insert(t); } } for (int i = c; i >= c - n / 2 + 1; --i){ sum2[c - n / 2 + 1] += a[i].second; heap2.insert(a[i].second); } for (int i = c - n / 2; i >= 1; --i){ int t = a[i].second; if (t > heap2.getMax()) sum2[i] = sum2[i + 1]; else{ sum2[i] = sum2[i + 1] - heap2.getMax() + t; heap2.remove(); heap2.insert(t); } } int ans = -1; for (int i = n / 2 + 1; i <= c - n / 2; ++i){ int t = sum1[i - 1] + sum2[i + 1] + a[i].second; if (t <= f && ans < a[i].first) ans = a[i].first; } cout << ans << endl; return 0; }","title":"1113"},{"location":"nr/1113/#1113","text":"\u9898\u76ee","title":"1113 \u4e8c\u54e5\u7684\u5956\u5b66\u91d1"},{"location":"nr/1113/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 */ #include <iostream> #include <algorithm> using namespace std; const int INF = 2000000005; class Heap{ private: int a[200005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } public: void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return a[1]; } void removeAndInsert(int x){ a[1] = x; siftdown(); } }; pair<int, int> a[200005]; int sum1[200005] = {0}, sum2[200005] = {0}; int n, c, f; Heap heap1, heap2; void qsort(int l, int h){ if (l >= h) return; int i = l, j = h; pair<int, int> key = a[l]; while (i < j){ while (i < j && a[j] > key) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; qsort(l, i - 1); qsort(i + 1, h); } int main(){ cin >> n >> c >> f; for (int i = 1; i <= c; ++i){ cin >> a[i].first >> a[i].second; } sort(a + 1, a + c + 1); // for (int i = 1; i <= c; ++i) // cout << a[i].first << ' ' << a[i].second << endl; for (int i = 1; i <= n / 2; ++i){ sum1[n / 2] += a[i].second; heap1.insert(a[i].second); } for (int i = n / 2 + 1; i <= c; ++i){ int t = a[i].second; if (t > heap1.getMax()) sum1[i] = sum1[i - 1]; else{ sum1[i] = sum1[i - 1] - heap1.getMax() + t; heap1.remove(); heap1.insert(t); } } for (int i = c; i >= c - n / 2 + 1; --i){ sum2[c - n / 2 + 1] += a[i].second; heap2.insert(a[i].second); } for (int i = c - n / 2; i >= 1; --i){ int t = a[i].second; if (t > heap2.getMax()) sum2[i] = sum2[i + 1]; else{ sum2[i] = sum2[i + 1] - heap2.getMax() + t; heap2.remove(); heap2.insert(t); } } int ans = -1; for (int i = n / 2 + 1; i <= c - n / 2; ++i){ int t = sum1[i - 1] + sum2[i + 1] + a[i].second; if (t <= f && ans < a[i].first) ans = a[i].first; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1114/","text":"1114 Problem A \u9898\u76ee Description \u7ed9\u5b9an\u4e2a\u6570a[1], a[2], ..., a[n]\uff0cm\u4e2a\u8be2\u95ee(l, r, k)\uff0c\u8be2\u95eea[l], a[l+1], ..., a[r]\u4e2d\u7b2ck\u5c0f\u7684\u6570\u662f\u591a\u5c11\u3002\u4fdd\u8bc10<=k<=r\u2013l+1\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570n\u3002 \u7b2c\u4e8c\u884cn\u4e2a\u6570\uff0c\u8868\u793aa[i]\u3002 \u63a5\u4e0b\u6765\u4e00\u4e2a\u6b63\u6574\u6570m\u3002 \u4ee5\u4e0bm\u884c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570l, r, k\u3002 Output Format \u8f93\u51fa\u5171m\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u8868\u793aa[l], a[l+1], ..., a[r]\u4e2d\u7684\u7b2ck\u5c0f\u6570\u3002 Sample Input 5 1 2 3 4 5 3 1 3 2 1 4 1 2 5 4 Sample Output 2 1 5 Restrictions 60%\uff1a n, m <= 1000\u3002 80%\uff1a \u6570\u636e\u6ee1\u8db3\u8be2\u95ee\u533a\u95f4\u4e92\u76f8\u4e0d\u5305\u542b\u3002 100%\uff1an, m <= 300000\uff0c|a[i]| <= 10^9\u3002 \u5185\u5b58\u9650\u5236\uff1a512MB \u65f6\u95f4\u9650\u5236\uff1a2000ms FineArtz's solution Star /* Problem A */ #include <iostream> #include <algorithm> using namespace std; const int MAXN = 300005; class Node{ public: int sum = 0, l = 0, r = 0; }; int a[MAXN], s[MAXN], root[MAXN] = {0}; int cnt = 0; Node tree[MAXN << 5]; int createNode(int sum, int l, int r){ tree[++cnt].sum = sum; tree[cnt].l = l; tree[cnt].r = r; return cnt; } void insert(int &root, int preroot, int pos, int l, int r){ root = createNode(tree[preroot].sum + 1, tree[preroot].l, tree[preroot].r); if (l == r) return; int mid = (l + r) / 2; if (pos <= mid) insert(tree[root].l, tree[preroot].l, pos, l, mid); else insert(tree[root].r, tree[preroot].r, pos, mid + 1, r); } int query(int left, int right, int k, int l, int r){ if (l == r) return l; int mid = (l + r) / 2; int sum = tree[tree[right].l].sum - tree[tree[left].l].sum; if (k <= sum) return query(tree[left].l, tree[right].l, k, l, mid); else return query(tree[left].r, tree[right].r, k - sum, mid + 1, r); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; s[i] = a[i]; } sort(s + 1, s + n + 1); int num = unique(s + 1, s + n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos = lower_bound(s + 1, s + num + 1, a[i]) - s; insert(root[i], root[i - 1], pos, 1, num); } cin >> m; while (m--){ int x, y, k; cin >> x >> y >> k; int t = query(root[x - 1], root[y], k, 1, num); cout << s[t] << '\\n'; } return 0; }","title":"1114"},{"location":"nr/1114/#1114-problem-a","text":"\u9898\u76ee","title":"1114 Problem A"},{"location":"nr/1114/#fineartzs-solution-star","text":"/* Problem A */ #include <iostream> #include <algorithm> using namespace std; const int MAXN = 300005; class Node{ public: int sum = 0, l = 0, r = 0; }; int a[MAXN], s[MAXN], root[MAXN] = {0}; int cnt = 0; Node tree[MAXN << 5]; int createNode(int sum, int l, int r){ tree[++cnt].sum = sum; tree[cnt].l = l; tree[cnt].r = r; return cnt; } void insert(int &root, int preroot, int pos, int l, int r){ root = createNode(tree[preroot].sum + 1, tree[preroot].l, tree[preroot].r); if (l == r) return; int mid = (l + r) / 2; if (pos <= mid) insert(tree[root].l, tree[preroot].l, pos, l, mid); else insert(tree[root].r, tree[preroot].r, pos, mid + 1, r); } int query(int left, int right, int k, int l, int r){ if (l == r) return l; int mid = (l + r) / 2; int sum = tree[tree[right].l].sum - tree[tree[left].l].sum; if (k <= sum) return query(tree[left].l, tree[right].l, k, l, mid); else return query(tree[left].r, tree[right].r, k - sum, mid + 1, r); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; s[i] = a[i]; } sort(s + 1, s + n + 1); int num = unique(s + 1, s + n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos = lower_bound(s + 1, s + num + 1, a[i]) - s; insert(root[i], root[i - 1], pos, 1, num); } cin >> m; while (m--){ int x, y, k; cin >> x >> y >> k; int t = query(root[x - 1], root[y], k, 1, num); cout << s[t] << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1116/","text":"1116 Problem C \u9898\u76ee Description \u73b0\u4ee3\u5efa\u7b51\u6709\u7740\u975e\u5e38\u590d\u6742\u7684\u9876\u90e8\u6784\u9020\u3002\u5982\u679c\u6211\u4eec\u628a\u4e00\u4e2a\u5c4b\u9876\u7eb5\u5207\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5f88\u591a\u503e\u659c\u7684\u7ebf\u6761\u3002 \u5f53\u4e0b\u96e8\u7684\u65f6\u5019\uff0c\u96e8\u6c34\u4ece\u5929\u4e0a\u5782\u76f4\u843d\u5230\u5c4b\u9876\u4e0a\uff0c\u4e00\u4e9b\u7ebf\u6bb5\u76f4\u63a5\u66b4\u9732\u5728\u96e8\u5929\u91cc\u800c\u53e6\u4e00\u4e9b\u7ebf\u6bb5\u5374\u90e8\u5206\u6216\u5b8c\u6574\u7684\u88ab\u522b\u7684\u7ebf\u6bb5\u6321\u7740\u3002 \u6240\u6709\u7684\u96e8\u6c34\u843d\u5230\u4e00\u6761\u7ebf\u6bb5\u4e0a\uff0c\u5c31\u5982\u4e00\u6761\u5c0f\u6eaa\u4ece\u9ad8\u5904\u5f80\u4f4e\u5904\u6d41\u4e00\u6837\uff0c\u96e8\u6c34\u4f1a\u6d41\u5230\u5730\u4e0a\u6216\u5176\u4ed6\u7684\u7ebf\u6bb5\u4e0a\u3002\u67d0\u79cd\u610f\u4e49\u4e0a\u8bf4\uff0c \u5982\u679c\u67d0\u4e9b\u96e8\u6c34\u4ece\u67d0\u6761\u7ebf\u6bb5\u7684\u5e95\u90e8\u4e0b\u843d\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8ba4\u4e3a\u8fd9\u4e9b\u96e8\u6c34\u5c31\u88ab\u8fd9\u6761\u7ebf\u6bb5\u6536\u96c6\u4e86\u3002 \u6211\u4eec\u5e0c\u671b\u80fd\u591f\u7b97\u51fa\u591a\u5c11\u6c34\u4ece\u6bcf\u4e00\u4e2a\u5c4b\u9876\u4e0a\u6d41\u4e0b\u3002\u5730\u5e73\u7ebf\u4e0a\uff0c\u6bcf\u4e00\u79d2\u6bcf\u9694\u4e00\u7c73\u7684\u8ddd\u79bb\u964d\u6c34\u91cf\u4e3a1\u5347\u3002\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff1a\u8bfb\u5165\u5c4b\u9876\u7684\u63cf\u8ff0\uff0c\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u5c4b\u9876\u6bcf\u79d2\u4f1a\u6d41\u4e0b\u591a\u5c11\u5347\u7684\u6c34\uff0c\u8f93\u51fa\u7ed3\u679c\u3002 Input Format \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6574\u6570n\uff081<=n<=40000\uff09\u4f5c\u4e3a\u5c4b\u9876\u7684\u4e2a\u6570\u3002 \u4ee5\u4e0bn\u884c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u5c4b\u9876\uff0c\u5305\u62ec\u56db\u4e2a\u6574\u6570x1, y1, x2, y2 (0 <= x1, y1, x2, y2 <= 1000000, x1 < x2, y1 != y2)\u7531\u7a7a\u683c\u9694\u5f00\u3002 x1\u63cf\u8ff0\u6d77\u5e73\u9762\u4e0a\u7684\u5750\u6807\uff0cy1\u63cf\u8ff0\u9ad8\u5ea6\uff0cx2\u548cy2\u540c\u7406\u3002\u7ebf\u6bb5\u95f4\u6ca1\u6709\u516c\u5171\u70b9\uff0c\u5e76\u4e14\u6ca1\u6709\u6c34\u5e73\u7684\u7ebf\u6bb5\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u5305\u542bn\u884c\uff0c\u7b2ci\u884c\u5e94\u8be5\u5305\u62ec\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ece\u6bcf\u4e00\u79d2i\u53f7\u5c4b\u9876\u6d41\u4e0b\u7684\u96e8\u6c34\u7684\u91cf\u3002 Sample Input 6 13 7 15 6 3 8 7 7 1 7 5 6 5 5 9 3 6 3 8 2 9 6 12 8 Sample Output 2 4 2 11 0 3 Restrictions \u5185\u5b58\u9650\u5236\uff1a64MB \u65f6\u95f4\u9650\u5236\uff1a1000ms FineArtz's solution Star /* Problem C */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int MAXN = 40000; struct Node{ int l = 0, r = 0; long long sum1 = 0, sum2 = 0; bool lazy1 = false, lazy2 = false; }; struct Line{ long long x[2], y[2]; int d = 0; int index = 0; bool operator <(const Line &l){ if (l.x[0] >= x[0] && l.x[0] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[0] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[0]; } if (l.x[1] >= x[0] && l.x[1] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[1] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[1]; } if (x[0] >= l.x[0] && x[0] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[0] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[0]; } if (x[1] >= l.x[0] && x[1] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[1] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[1]; } return (y[d] > l.y[l.d] || (y[d] == l.y[l.d] && x[1] < l.x[0])); } }; Line line[MAXN + 5]; Node a[MAXN * 8 + 5]; int s[MAXN * 2 + 5]; int n; int ans[MAXN + 5] = {0}; void pushup(int x){ a[x].sum1 = a[x << 1].sum1 + a[x << 1 | 1].sum1; a[x].sum2 = a[x << 1].sum2 + a[x << 1 | 1].sum2; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum1 = s[l] - s[l - 1]; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushup(x); } void pushdown(int x){ if (a[x].lazy1){ a[x << 1].lazy1 = true; a[x << 1 | 1].lazy1 = true; a[x << 1].sum1 = a[x].sum1; a[x << 1 | 1].sum1 = a[x].sum1; a[x].lazy1 = false; } if (a[x].lazy2){ a[x << 1].lazy2 = true; a[x << 1 | 1].lazy2 = true; a[x << 1].sum2 = a[x].sum2; a[x << 1 | 1].sum2 = a[x].sum2; a[x].lazy2 = false; } } int sum1(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum1; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum1(x << 1, l, r); else if (l > mid) return sum1(x << 1 | 1, l, r); else return sum1(x << 1, l, mid) + sum1(x << 1 | 1, mid + 1, r); } int sum2(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum2; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum2(x << 1, l, r); else if (l > mid) return sum2(x << 1 | 1, l, r); else return sum2(x << 1, l, mid) + sum2(x << 1 | 1, mid + 1, r); } void update1(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum1 = 0; a[x].lazy1 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update1(x << 1, l, r); else if (l > mid) update1(x << 1 | 1, l, r); else{ update1(x << 1, l, mid); update1(x << 1 | 1, mid + 1, r); } pushup(x); } void update2(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum2 = 0; a[x].lazy2 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update2(x << 1, l, r); else if (l > mid) update2(x << 1 | 1, l, r); else{ update2(x << 1, l, mid); update2(x << 1 | 1, mid + 1, r); } pushup(x); } void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum2 = d; return; } int mid = (a[x].l + a[x].r) >> 1; pushdown(x); if (p <= mid) update(x << 1, p, d); else update(x << 1 | 1, p, d); pushup(x); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> line[i].x[0] >> line[i].y[0] >> line[i].x[1] >> line[i].y[1]; s[2 * i - 1] = line[i].x[0]; s[2 * i] = line[i].x[1]; if (line[i].y[0] > line[i].y[1]) line[i].d = 1; line[i].index = i; } sort(line + 1, line + n + 1); sort(s + 1, s + 2 * n + 1); int num = unique(s + 1, s + 2 * n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos1 = lower_bound(s + 1, s + num + 1, line[i].x[0]) - s; int pos2 = lower_bound(s + 1, s + num + 1, line[i].x[1]) - s; line[i].x[0] = pos1; line[i].x[1] = pos2; } s[0] = s[1]; buildTree(1, 1, num); for (int i = 1; i <= n; ++i){ long long s = sum1(1, line[i].x[0] + 1, line[i].x[1]) + sum2(1, line[i].x[0], line[i].x[1]); update1(1, line[i].x[0] + 1, line[i].x[1]); update2(1, line[i].x[0], line[i].x[1]); if (line[i].d == 0) update(1, line[i].x[0], s); else update(1, line[i].x[1], s); ans[line[i].index] = s; } for (int i = 1; i <= n; ++i) cout << ans[i] << '\\n'; return 0; }","title":"1116"},{"location":"nr/1116/#1116-problem-c","text":"\u9898\u76ee","title":"1116 Problem C"},{"location":"nr/1116/#fineartzs-solution-star","text":"/* Problem C */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int MAXN = 40000; struct Node{ int l = 0, r = 0; long long sum1 = 0, sum2 = 0; bool lazy1 = false, lazy2 = false; }; struct Line{ long long x[2], y[2]; int d = 0; int index = 0; bool operator <(const Line &l){ if (l.x[0] >= x[0] && l.x[0] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[0] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[0]; } if (l.x[1] >= x[0] && l.x[1] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[1] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[1]; } if (x[0] >= l.x[0] && x[0] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[0] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[0]; } if (x[1] >= l.x[0] && x[1] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[1] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[1]; } return (y[d] > l.y[l.d] || (y[d] == l.y[l.d] && x[1] < l.x[0])); } }; Line line[MAXN + 5]; Node a[MAXN * 8 + 5]; int s[MAXN * 2 + 5]; int n; int ans[MAXN + 5] = {0}; void pushup(int x){ a[x].sum1 = a[x << 1].sum1 + a[x << 1 | 1].sum1; a[x].sum2 = a[x << 1].sum2 + a[x << 1 | 1].sum2; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum1 = s[l] - s[l - 1]; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushup(x); } void pushdown(int x){ if (a[x].lazy1){ a[x << 1].lazy1 = true; a[x << 1 | 1].lazy1 = true; a[x << 1].sum1 = a[x].sum1; a[x << 1 | 1].sum1 = a[x].sum1; a[x].lazy1 = false; } if (a[x].lazy2){ a[x << 1].lazy2 = true; a[x << 1 | 1].lazy2 = true; a[x << 1].sum2 = a[x].sum2; a[x << 1 | 1].sum2 = a[x].sum2; a[x].lazy2 = false; } } int sum1(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum1; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum1(x << 1, l, r); else if (l > mid) return sum1(x << 1 | 1, l, r); else return sum1(x << 1, l, mid) + sum1(x << 1 | 1, mid + 1, r); } int sum2(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum2; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum2(x << 1, l, r); else if (l > mid) return sum2(x << 1 | 1, l, r); else return sum2(x << 1, l, mid) + sum2(x << 1 | 1, mid + 1, r); } void update1(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum1 = 0; a[x].lazy1 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update1(x << 1, l, r); else if (l > mid) update1(x << 1 | 1, l, r); else{ update1(x << 1, l, mid); update1(x << 1 | 1, mid + 1, r); } pushup(x); } void update2(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum2 = 0; a[x].lazy2 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update2(x << 1, l, r); else if (l > mid) update2(x << 1 | 1, l, r); else{ update2(x << 1, l, mid); update2(x << 1 | 1, mid + 1, r); } pushup(x); } void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum2 = d; return; } int mid = (a[x].l + a[x].r) >> 1; pushdown(x); if (p <= mid) update(x << 1, p, d); else update(x << 1 | 1, p, d); pushup(x); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> line[i].x[0] >> line[i].y[0] >> line[i].x[1] >> line[i].y[1]; s[2 * i - 1] = line[i].x[0]; s[2 * i] = line[i].x[1]; if (line[i].y[0] > line[i].y[1]) line[i].d = 1; line[i].index = i; } sort(line + 1, line + n + 1); sort(s + 1, s + 2 * n + 1); int num = unique(s + 1, s + 2 * n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos1 = lower_bound(s + 1, s + num + 1, line[i].x[0]) - s; int pos2 = lower_bound(s + 1, s + num + 1, line[i].x[1]) - s; line[i].x[0] = pos1; line[i].x[1] = pos2; } s[0] = s[1]; buildTree(1, 1, num); for (int i = 1; i <= n; ++i){ long long s = sum1(1, line[i].x[0] + 1, line[i].x[1]) + sum2(1, line[i].x[0], line[i].x[1]); update1(1, line[i].x[0] + 1, line[i].x[1]); update2(1, line[i].x[0], line[i].x[1]); if (line[i].d == 0) update(1, line[i].x[0], s); else update(1, line[i].x[1], s); ans[line[i].index] = s; } for (int i = 1; i <= n; ++i) cout << ans[i] << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1117/","text":"1117 Code \u9898\u76ee Description \u4ee5\u5982\u4e0b\u683c\u5f0f\u7ed9\u51fa\u4e00\u9897\u6811\u5f62\u56fe: T: = \"(\" N S \")\" S: = \" \" T S | empty N: = number \u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u62ec\u53f7\u4ee3\u8868\u4e00\u9897\u5b50\u6811\uff0c\u62ec\u53f7\u91cc\u7684\u7b2c\u4e00\u4e2a\u6570\u8868\u793a\u6811\u6839\uff0c\u5185\u90e8\u5d4c\u4e86\u591a\u5c11\u4e2a\u62ec\u53f7\u8868\u793a\u6709\u591a\u5c11\u4e2a\u513f\u5b50\u3002 \u5982\uff1a(2 (6 (7)) (3) (5 (1) (4)) (8)) \u5373\u8868\u793a\u4e0b\u56fe\uff1a \u6bcf\u6b21\u627e\u5230\u6700\u5c0f\u53f6\u5b50\u8282\u70b9\uff0c\u8f93\u51fa\u5b83\u7684\u76f8\u90bb\u8282\u70b9\uff08\u53f6\u5b50\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\uff09\uff0c\u5220\u9664\u8be5\u53f6\u5b50\u8282\u70b9\u3002\u5faa\u73af\u5bf9\u56fe\u505a\u8fd9\u4e2a\u64cd\u4f5c\uff0c\u76f4\u5230\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\u3002\u6700\u540e\u4e00\u5171\u8981\u8f93\u51faN-1\u4e2a\u6570\u3002 Input Format \u4e00\u884c\uff0c\u8868\u793a\u4e00\u9897\u6811\u5f62\u56fe\u3002 Output Format \u4e00\u884c\uff0c\u82e5\u5e72\u4e2a\u6570\uff0c\u7528\u7a7a\u683c\u9694\u5f00\u3002 Sample Input 1 (2 (6 (7)) (3) (5 (1) (4)) (8)) Sample Output 1 5 2 5 2 6 2 8 Sample Input 2 (6 (1 (4)) (2 (3) (5))) Sample Output 2 2 1 6 2 6 Restrictions \u6811\u7684\u8282\u70b9\u6570N\u6ee1\u8db3: 70%\u7684\u6570\u636e: N<=1000 100%\u7684\u6570\u636e: 2<N<=100000 \u8282\u70b9\u7f16\u53f7\u4e3a1, 2, ..., N\u3002 \u5185\u5b58\u9650\u5236\uff1a64MB \u65f6\u95f4\u9650\u5236\uff1a1000ms FineArtz's solution Star /* Code */ #include <iostream> using namespace std; int a[100005], heap[100005]; int degree[100005] = {0}; bool b[100005]; int head[100005], nxt[200005], prv[200005], e[200005]; int heapsize = 0, n = 0, cnt = 0; void addEdge(int u, int v){ nxt[++cnt] = head[u]; if (head[u] != 0) prv[head[u]] = cnt; head[u] = cnt; e[cnt] = v; ++degree[u]; ++degree[v]; } void delEdge(int u, int x){ //cout << e[x] << ' ' << e[prv[x]] << ' ' << e[nxt[x]] << endl; if (nxt[x] != 0) prv[nxt[x]] = prv[x]; if (prv[x] != 0) nxt[prv[x]] = nxt[x]; else head[u] = nxt[x]; prv[x] = nxt[x] = 0; } void swap(int x, int y){ int t = heap[x]; heap[x] = heap[y]; heap[y] = t; } void siftup(){ int i = heapsize; while (i != 1){ if (heap[i] < heap[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && heap[i + 1] < heap[i]) ++i; if (heap[i / 2] > heap[i]){ swap(i / 2, i); i *= 2; } else break; } } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } void insert(int x){ heap[++heapsize] = x; siftup(); } void buildTree(int x){ char ch; int num = 0; cin >> ch; while (isdigit(ch)){ num = num * 10 + ch - '0'; cin >> ch; } if (num > n) n = num; if (x){ addEdge(num, x); addEdge(x, num); } a[num] = num; while (ch == '('){ buildTree(num); cin >> ch; } } int main(){ char ch; cin >> ch; buildTree(0); for (int i = 1; i <= n; ++i){ if (degree[a[i]] == 2) insert(a[i]); b[i] = true; } for (int i = 1; i < n; ++i){ int t = heap[1]; cout << e[head[t]] << ' '; b[t] = false; remove(); int j = head[t]; int u = e[j]; delEdge(t, j); if (j % 2) delEdge(u, j + 1); else delEdge(u, j - 1); degree[u] -= 2; if (degree[u] == 2) insert(u); } return 0; }","title":"1117"},{"location":"nr/1117/#1117-code","text":"\u9898\u76ee","title":"1117 Code"},{"location":"nr/1117/#fineartzs-solution-star","text":"/* Code */ #include <iostream> using namespace std; int a[100005], heap[100005]; int degree[100005] = {0}; bool b[100005]; int head[100005], nxt[200005], prv[200005], e[200005]; int heapsize = 0, n = 0, cnt = 0; void addEdge(int u, int v){ nxt[++cnt] = head[u]; if (head[u] != 0) prv[head[u]] = cnt; head[u] = cnt; e[cnt] = v; ++degree[u]; ++degree[v]; } void delEdge(int u, int x){ //cout << e[x] << ' ' << e[prv[x]] << ' ' << e[nxt[x]] << endl; if (nxt[x] != 0) prv[nxt[x]] = prv[x]; if (prv[x] != 0) nxt[prv[x]] = nxt[x]; else head[u] = nxt[x]; prv[x] = nxt[x] = 0; } void swap(int x, int y){ int t = heap[x]; heap[x] = heap[y]; heap[y] = t; } void siftup(){ int i = heapsize; while (i != 1){ if (heap[i] < heap[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && heap[i + 1] < heap[i]) ++i; if (heap[i / 2] > heap[i]){ swap(i / 2, i); i *= 2; } else break; } } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } void insert(int x){ heap[++heapsize] = x; siftup(); } void buildTree(int x){ char ch; int num = 0; cin >> ch; while (isdigit(ch)){ num = num * 10 + ch - '0'; cin >> ch; } if (num > n) n = num; if (x){ addEdge(num, x); addEdge(x, num); } a[num] = num; while (ch == '('){ buildTree(num); cin >> ch; } } int main(){ char ch; cin >> ch; buildTree(0); for (int i = 1; i <= n; ++i){ if (degree[a[i]] == 2) insert(a[i]); b[i] = true; } for (int i = 1; i < n; ++i){ int t = heap[1]; cout << e[head[t]] << ' '; b[t] = false; remove(); int j = head[t]; int u = e[j]; delEdge(t, j); if (j % 2) delEdge(u, j + 1); else delEdge(u, j - 1); degree[u] -= 2; if (degree[u] == 2) insert(u); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1118/","text":"1118 Travel \u9898\u76ee Description \u4e00\u5bb6\u57ce\u9645\u65c5\u6e38\u516c\u53f8\u5728N\u4e2a\u57ce\u5e02\u4e4b\u95f4\u5b89\u6392\u65c5\u884c\u3002\u521d\u59cb\u65f6\uff0c\u6bcf\u4e2a\u57ce\u5e02\u5206\u522b\u6709\u4e00\u4e2a\u65c5\u884c\u56e2\uff1b\u4e3a\u4e86\u65b9\u4fbf\u884c\u7a0b\u5b89\u6392\uff0c\u5f53\u4e00\u4e2a\u57ce\u5e02\u7684\u65c5\u884c\u56e2\u4ece\u4e00\u4e2a\u57ce\u5e02\u65c5\u884c\u5230\u53e6\u4e00\u4e2a\u57ce\u5e02\u65f6\uff0c\u8fd9\u4e24\u4e2a\u65c5\u6e38\u56e2\u5c31\u4f1a\u5408\u5e76\u5230\u4e00\u8d77\u3002 Input Format \u7b2c\u4e00\u884c\uff0cN, M\uff1a\u8868\u793a\u6709N\u4e2a\u57ce\u5e02\uff0c\u4ee5\u53ca\u63a5\u4e0b\u6765\u6709M\u884c\u3002(2 < N, M<= 10000) \u7b2c2\u81f3M+1\u884c\uff1a(1 <= a, b <= N) \u6bcf\u884c\u662f\u4e00\u4e2a\u884c\u7a0b\u5b89\u6392\uff1aT a b \u8868\u793aa\u53f7\u65c5\u884c\u56e2\u6240\u5728\u57ce\u5e02\u7684\u65c5\u884c\u56e2\uff0c\u4e00\u8d77\u53bbb\u53f7\u65c5\u884c\u56e2\u6240\u5728\u57ce\u5e02\u65c5\u884c\u3002 \u6216\u8005\u4e00\u4e2a\u67e5\u8be2\uff1aQ a \u8868\u793a\u8be2\u95ee\u5f53\u524d\u72b6\u6001\u4e0b\uff0c\u5f53\u524da\u53f7\u65c5\u884c\u56e2\u6240\u5728\u57ce\u5e02X\uff0c\u4ee5\u53caX\u6240\u5728\u57ce\u5e02\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u539f\u59cb\u65c5\u884c\u56e2C\uff0c\u4ee5\u53caa\u53f7\u65c5\u884c\u56e2\u5f53\u524d\u53bb\u8fc7\u591a\u5c11\u4e2a\u57ce\u5e02T\u3002\uff08\u4e0d\u5305\u542b\u521d\u59cb\u65f6\u6240\u5728\u7684\u57ce\u5e02\uff0c\u4e00\u4e2a\u57ce\u5e02\u53ef\u8ba1\u7b97\u591a\u6b21\uff09 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2Q a\uff0c\u8f93\u51fa\u4e00\u884c\u4e09\u4e2a\u6570X C T Sample Input 1 3 3 T 1 2 T 3 2 Q 2 Sample Output 1 2 3 0 Sample Input 2 3 4 T 1 2 Q 1 T 1 3 Q 1 Sample Output 2 2 2 1 3 3 2 FineArtz's solution Star /* Travel */ #include <iostream> using namespace std; int n, m; int parent[10005], now[10005], nowat[10005], sum[10005], trl[10005], ex[10005]; int find(int x){ if (parent[x] != x){ parent[x] = find(parent[x]); } return parent[x]; } void merge(int x, int y){ int p = find(x), q = find(y); sum[q] += sum[p]; // if (sum[p] > sum[q]){ // int t = p; // p = q; // q = t; // } for (int i = 1; i <= n; ++i){ int t = find(i); if (t == p || t == q) trl[i] += ex[t]; } ex[p] = ex[q] = 0; parent[p] = q; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ parent[i] = i; now[i] = i; nowat[i] = i; sum[i] = 1; trl[i] = 0; ex[i] = 0; } while (m--){ char ch; int x, y, p, q, a, b; cin >> ch; switch(ch){ case 'T': cin >> x >> y; p = find(x); //the set contains x q = find(y); //the set contains y if (p != q){ a = nowat[p]; //where p is b = nowat[q]; //where q is now[a] = -1; nowat[p] = b; ++ex[p]; merge(y, x); } break; case 'Q': cin >> x; p = find(x); cout << nowat[p] << ' ' << sum[p] << ' ' << trl[x] + ex[p] << '\\n'; break; } } return 0; }","title":"1118"},{"location":"nr/1118/#1118-travel","text":"\u9898\u76ee","title":"1118 Travel"},{"location":"nr/1118/#fineartzs-solution-star","text":"/* Travel */ #include <iostream> using namespace std; int n, m; int parent[10005], now[10005], nowat[10005], sum[10005], trl[10005], ex[10005]; int find(int x){ if (parent[x] != x){ parent[x] = find(parent[x]); } return parent[x]; } void merge(int x, int y){ int p = find(x), q = find(y); sum[q] += sum[p]; // if (sum[p] > sum[q]){ // int t = p; // p = q; // q = t; // } for (int i = 1; i <= n; ++i){ int t = find(i); if (t == p || t == q) trl[i] += ex[t]; } ex[p] = ex[q] = 0; parent[p] = q; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ parent[i] = i; now[i] = i; nowat[i] = i; sum[i] = 1; trl[i] = 0; ex[i] = 0; } while (m--){ char ch; int x, y, p, q, a, b; cin >> ch; switch(ch){ case 'T': cin >> x >> y; p = find(x); //the set contains x q = find(y); //the set contains y if (p != q){ a = nowat[p]; //where p is b = nowat[q]; //where q is now[a] = -1; nowat[p] = b; ++ex[p]; merge(y, x); } break; case 'Q': cin >> x; p = find(x); cout << nowat[p] << ' ' << sum[p] << ' ' << trl[x] + ex[p] << '\\n'; break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1120/","text":"1120 \u4e8c\u54e5\u7684\u5632\u8bbd \u9898\u76ee Description \u52a9\u6559\u8bf4\uff0c\u4eca\u665a\u7684\u6700\u540e\u4e00\u6b21\u673a\u8003\u9898\u76ee\u90fd\u4e0d\u96be\uff0c\u6240\u4ee5\u8981\u4e89\u53d6\u62ff\u6ee1\u5206\u54e6~O(\u2229_\u2229)O~\uff0c\u52a0\u6cb9\uff01\uff01 \u4e8c\u54e5\u6709\u4e86\u5973\u670b\u53cb\u540e\uff0c\u5e38\u5e38\u591c\u4e0d\u5f52\u5bbf\uff0c\u95ee\u5176\u53bb\u5e72\u561b\u4e86\uff0c\u4ed6\u8bf4\u8ddf\u5973\u670b\u53cb\u901a\u5bb5\u81ea\u4e60\u53bb\u4e86\u3002\u3002\u3002 \u8fd9\u5929\u665a\u4e0a\uff0c\u4e8c\u54e5\u7684\u820d\u53cb\u5c0fZ\u5728\u5199\u7f16\u8bd1\u5668\u5927\u4f5c\u4e1a\uff0c\u4e8c\u54e5\u53c8\u8981\u53bb\u89c1\u59b9\u5b50\u4e86\u3002\u8d70\u4e4b\u524d\uff0c\u4e8c\u54e5\u5e78\u798f\u5730\u5531 \u9053\uff1a\u201c\u5728\u5bbf\u820d\u91cc\u9762\u6709\u4e24\u4e2a\u53ef\u601c\u7684\u5c0f\u7801\u519c\uff0c\u6df1\u591c\u7801\u4ee3\u7801\uff0c\u5728\u5199\u7f16\u8bd1\u5668\u201d...\u5c0fZ\u9762\u5bf9\u4e8c\u54e5\u7684\u5632\u8bbd \uff0c\u6124\u6124\u5730\u8bf4\uff0c\u4f60\u80fd\u89e3\u51b3\u4e0b\u9762\u8fd9\u4e2a\u95ee\u9898\u518d\u5632\u8bbd\u5427..= = C++\u4e2d\uff0c\u5728\u82b1\u62ec\u53f7\u4e2d\u518d\u6b21\u58f0\u660e\u4e00\u4e2a\u540c\u540d\u53d8\u91cf\u65f6\uff0c\u4f1a\u6709\u4ee5\u4e0b\u7279\u6027\uff1a int x = 0; { int x = 1; printf(\"%d\\n\", x); // \u8f93\u51fa1\uff0c\u4e0d\u518d\u662f\u4e0a\u4e00\u5c42x x = 3; printf(\"%d\\n\", x); // \u8f93\u51fa3 } printf(\"%d\\n\", x); // \u8f93\u51fa0 \u82b1\u62ec\u53f7\u91cc\u7684\u53d8\u91cfx\u7a7a\u95f4\u88ab\u91ca\u653e\u540e\u4e0d\u5b58\u5728\u4e86 \u73b0\u5728\u5047\u8bbe\u6709\u53d8\u91cfx1,x2...xn,\u90fd\u88ab\u521d\u59cb\u5316\u4e3a0\uff0c\u5728\u82b1\u62ec\u53f7\u4e2d\u4ed6\u4eec\u53ef\u80fd\u88ab\u91cd\u65b0\u58f0\u660e\u6216\u8005\u8d4b\u503c\uff0c\u4e5f\u6709\u53ef\u80fd\u9700\u8981\u7528\u5230\u4ed6\u4eec\u7684\u503c\uff0c\u8bf7\u4f60\u5728\u9700\u8981\u7528\u5230\u4ed6\u4eec\u65f6\uff0c\u8f93\u51fa\u4ed6\u4eec\u6b63\u786e\u7684\u503c\u3002 Input Format \u7b2c1\u884c\uff0c \u4e24\u4e2a\u6b63\u6574\u6570 N, K \u4ee3\u8868\u6709N\u4e2a\u53d8\u91cf\uff0c\u5206\u522b\u6807\u53f7x1...xn\uff0c\u4e4b\u540e\u6709k\u884c\u4ee3\u7801 \u4e3a\u8868\u793a\u65b9\u4fbf\uff0c\u63a5\u4e0b\u6765\u7684k\u884c\u8f93\u5165\u90fd\u662f\u6574\u6570\u4ee3\u8868\u4ee3\u7801\uff0c\u6bcf\u884c\u53ea\u6709\u4e00\u79cd\u4ee3\u7801\uff0c\u6709\u8fd9\u51e0\u79cd\u4ee3\u7801\uff1a \u7b2c\u4e00\u79cd\uff0c\u4e00\u4e2a\u6574\u6570 -1 \u4ee3\u8868\u82b1\u62ec\u53f7\u5f00\u59cb \u7b2c\u4e8c\u79cd\uff0c\u4e00\u4e2a\u6574\u6570 -2 \u4ee3\u8868\u82b1\u62ec\u53f7\u7ed3\u675f \u7b2c\u4e09\u79cd\uff0c\u4e24\u4e2a\u6574\u6570 0 m\uff0c\u4ee3\u8868\u4f60\u9700\u8981\u8f93\u51faxm\u7684\u503c,m\u662f\u6b63\u6574\u6570\uff0c\u4e0b\u4e5f\u662f\u3002 \u7b2c\u56db\u79cd\uff0c\u4e24\u4e2a\u6574\u6570 m v\uff0c\u82e5\u8fd9\u4e2a\u82b1\u62ec\u53f7\u4e2d\u8fd8\u6ca1\u58f0\u660exm\uff0c\u5219\u4ee3\u8868\u58f0\u660exm\u53d8\u91cf\u5e76\u8d4b\u503c\u4e3av\uff1b\u82e5\u5df2\u58f0\u660exm\uff0c\u5219\u53ea\u4ee3\u8868xm\u88ab\u8d4b\u503c\u4e3av\u3002 Output Format \u6bcf\u6b21 0 m \u64cd\u4f5c\u8f93\u51fa\u4e00\u884c\uff0c\u8f93\u51faxm\u7684\u503c Sample Input 3 12 1 1 1 2 2 3 0 1 -1 1 4 0 2 0 1 0 3 -2 0 1 0 3 Sample Output 2 3 4 0 2 0 Restrictions \u6570\u636e\u4fdd\u8bc1\u82b1\u62ec\u53f7\u5339\u914d\uff0c\u6240\u6709\u6574\u6570\u5728int\u578b\u91cc\u8db3\u591f\u3002N <= 1000, K <= 400000,\u65f6\u95f4\u9650\u52361.0s FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5632\u8bbd */ #include <iostream> using namespace std; struct Node{ int data = 0; int layer = 0; Node *next = nullptr; Node(int d = 0, int l = 0, Node *n = nullptr) : data(d), layer(l), next(n) {} }; struct LinkStack{ Node *head = new Node(); int size = 0; void push(int d, int l){ Node *p = new Node(d, l, head); head = p; ++size; } int top(){ return head->data; } int topLayer(){ return head->layer; } void pop(){ Node *p = head; head = p->next; delete p; } void resetTop(int x){ head->data = x; } void clear(){ Node *p = head, *q; while (p){ q = p; p = p->next; delete q; } } }; LinkStack a[1005], b[200005]; int n, k, layer = 0; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; while (k--){ int op, x; cin >> op; switch (op){ case -1: ++layer; break; case -2: while (b[layer].top() != 0){ a[b[layer].top()].pop(); b[layer].pop(); } --layer; break; case 0: cin >> x; cout << a[x].top() << '\\n'; break; default: cin >> x; if (a[op].topLayer() == layer) a[op].resetTop(x); else{ a[op].push(x, layer); b[layer].push(op, 0); } break; } } return 0; }","title":"1120"},{"location":"nr/1120/#1120","text":"\u9898\u76ee","title":"1120 \u4e8c\u54e5\u7684\u5632\u8bbd"},{"location":"nr/1120/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5632\u8bbd */ #include <iostream> using namespace std; struct Node{ int data = 0; int layer = 0; Node *next = nullptr; Node(int d = 0, int l = 0, Node *n = nullptr) : data(d), layer(l), next(n) {} }; struct LinkStack{ Node *head = new Node(); int size = 0; void push(int d, int l){ Node *p = new Node(d, l, head); head = p; ++size; } int top(){ return head->data; } int topLayer(){ return head->layer; } void pop(){ Node *p = head; head = p->next; delete p; } void resetTop(int x){ head->data = x; } void clear(){ Node *p = head, *q; while (p){ q = p; p = p->next; delete q; } } }; LinkStack a[1005], b[200005]; int n, k, layer = 0; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; while (k--){ int op, x; cin >> op; switch (op){ case -1: ++layer; break; case -2: while (b[layer].top() != 0){ a[b[layer].top()].pop(); b[layer].pop(); } --layer; break; case 0: cin >> x; cout << a[x].top() << '\\n'; break; default: cin >> x; if (a[op].topLayer() == layer) a[op].resetTop(x); else{ a[op].push(x, layer); b[layer].push(op, 0); } break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1121/","text":"1121 \u4e8c\u54e5\u5435\u67b6 \u9898\u76ee Description \u4e8c\u54e5\u8fd9\u5b66\u671f\u548c\u5973\u670b\u53cb\u5435\u67b6\u53d8\u591a\u4e86\uff0c\u5973\u4eba\u771f\u4e0d\u597d\u5bf9\u4ed8\uff0c\u8fd9\u4e0d\u53c8\u60f3\u51fa\u4e00\u62db\u6765\u5bf9\u4ed8\u4e8c\u54e5\u4e86\uff1a \u77f3\u5934\u526a\u5200\u5e03\u5927\u5bb6\u90fd\u73a9\u8fc7\u5427\uff1f \uff08\u6ca1\u73a9\u8fc7\u6211\u4ecb\u7ecd\u4e0b\uff0c\u73a9\u8fc7\u7684\u8df3\u8fc7\u8fd9\u6bb5\uff09\u5c31\u662f\u77f3\u5934\u8d62\u526a\u5200\uff0c\u526a\u5200\u8d62\u5e03\uff0c\u5e03\u8d62\u77f3\u5934\u3002 \u4f46\u4e8c\u54e5\u59b9\u5b50\u4e0d\u8ddf\u4e8c\u54e5\u73a9\u77f3\u5934\u526a\u5200\u5e03\uff0c\u5979\u6253\u7b97\u51fa\u4e00\u79cd\u65b0\u4e3b\u610f\uff1a \u73b0\u5728\u4e8c\u54e5\u59b9\u5b50\u6709N\u79cd\u624b\u52bf\uff0c\u4ee51-N\u7f16\u53f7\uff0c\u6bcf\u4e2a\u624b\u52bf\u90fd\u662f\u77f3\u5934\uff0c\u526a\u5200\uff0c\u5e03\u4e2d\u7684\u4e00\u79cd\uff0c\u4f46\u5979\u4e0d\u4f1a\u544a\u8bc9\u4e8c\u54e5\u662f\u54ea\u4e00\u79cd\u3002\u5979\u4f1a\u7528\u4e24\u79cd\u65b9\u5f0f\u63cf\u8ff0\u7ed9\u4e8c\u54e5\u542c\uff1a \u7b2c\u4e00\u79cd\uff1a 1, x, y \u4ee3\u8868x\u548cy\u662f\u540c\u4e00\u79cd\u624b\u52bf \u7b2c\u4e8c\u79cd\uff1a 2\uff0cx\uff0cy \u4ee3\u8868x\u8d62y \u4e8c\u54e5\u59b9\u5b50\u5bf9\u4e8c\u54e5\u7528\u4e0a\u9762\u4e24\u79cd\u8bf4\u6cd5\u4e00\u53e5\u63a5\u4e00\u53e5\u8bf4\u51faK\u53e5\u8bdd\uff0c\u5f53\u7136\uff0c\u8fd9\u4e2a\u4efb\u6027\u7684\u5bb6\u4f19\u4e0d\u4f1a\u90fd\u8bf4\u771f\u8bdd\uff0c\u5f53\u8bf4\u7684\u8bdd\u6ee1\u8db3\u4e0b\u9762\u4e09\u4e2a\u6761\u4ef6\u4efb\u4e00\u65f6\uff0c\u5c31\u662f\u5047\u8bdd\uff0c\u5426\u5219\u5c31\u662f\u771f\u8bdd\uff01 \uff081\uff09\u5f53\u524d\u8bdd\u548c\u4e4b\u524d\u8bf4\u7684\u771f\u8bdd\u51b2\u7a81\uff0c\u5c31\u662f\u5047\u8bdd\uff0c\u5982\u8bf4\u8fc72\uff0cx\uff0cy\uff1b\u73b0\u5728\u53c8\u8bf42\uff0cy\uff0cx \uff082\uff09\u5f53\u524d\u7684\u8bdd\u4e2dx\u6216y\u6bd4N\u5927\uff0c\u5c31\u662f\u5047\u8bdd \uff083\uff09\u5f53\u524d\u7684\u8bdd\u4e0e\u77f3\u5934\u526a\u5200\u5e03\u7684\u89c4\u5219\u77db\u76fe\uff0c\u5c31\u662f\u5047\u8bdd\uff0c\u59822\uff0cx\uff0cx \u5f53\u4e0d\u6ee1\u8db3\u4ee5\u4e0a\u4e09\u4e2a\u6761\u4ef6\u65f6\uff0c\u5c31\u8ba4\u4e3a\u662f\u771f\u8bdd\u3002\u4e8c\u54e5\u7684\u5973\u670b\u53cb\u8981\u6c42\u4e8c\u54e5\u5fc5\u987b\u8bf4\u51fa\u5979\u8bb2\u4e86\u51e0\u53e5\u5047\u8bdd\uff0c\u8fd9\u6837\u624d\u7b97\u4e86\u89e3\u5979\u7684\u5fc3\u3002 Input Formats \u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570 N, K \u63a5\u4e0b\u6765K\u884c\u6bcf\u884c\u4e09\u4e2a\u6574\u6570 D, X ,Y, D\u4e3a1\u62162\uff0c\u4ee3\u8868\u4e0a\u9762\u7684\u4e24\u79cd\u8bf4\u6cd5 Output Formats \u53ea\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u4e8c\u54e5\u59b9\u5b50\u8bf4\u4e86\u591a\u5c11\u53e5\u5047\u8bdd Sample Input 100 7 1 101 1 2 1 2 2 2 3 2 3 3 1 1 3 2 3 1 1 5 5 Sample Output 3 Restrictions \u6570\u636e\u8303\u56f4 1 <= N <= 100000\uff0c 0 <= K <= 100000\uff0c\u4e00\u5207\u6570\u5728int\u578b\u5185\u53ef\u8fd0\u7b97\u3002\u65f6\u95f4\u9650\u52360.5s FineArtz's solution Star /* \u4e8c\u54e5\u5435\u67b6 */ #include <iostream> using namespace std; int n, k, ans = 0; int op, x, y; int p[100005], r[100005]; int parent(int x){ if (x != p[x]){ int t = p[x]; p[x] = parent(p[x]); r[x] = (r[x] + r[t]) % 3; } return p[x]; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ p[i] = i; r[i] = 0; } while (k--){ cin >> op >> x >> y; if (x > n || y > n){ ++ans; continue; } if (op == 2 && x == y){ ++ans; continue; } int px = parent(x), py = parent(y); if (px == py){ if (r[y] != (r[x] + op - 1) % 3) ++ans; } else{ p[py] = px; r[py] = (3 - r[y] + r[x] + op - 1) % 3; } } cout << ans << endl; }","title":"1121"},{"location":"nr/1121/#1121","text":"\u9898\u76ee","title":"1121 \u4e8c\u54e5\u5435\u67b6"},{"location":"nr/1121/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5435\u67b6 */ #include <iostream> using namespace std; int n, k, ans = 0; int op, x, y; int p[100005], r[100005]; int parent(int x){ if (x != p[x]){ int t = p[x]; p[x] = parent(p[x]); r[x] = (r[x] + r[t]) % 3; } return p[x]; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ p[i] = i; r[i] = 0; } while (k--){ cin >> op >> x >> y; if (x > n || y > n){ ++ans; continue; } if (op == 2 && x == y){ ++ans; continue; } int px = parent(x), py = parent(y); if (px == py){ if (r[y] != (r[x] + op - 1) % 3) ++ans; } else{ p[py] = px; r[py] = (3 - r[y] + r[x] + op - 1) % 3; } } cout << ans << endl; }","title":"FineArtz's solution Star"},{"location":"nr/1122/","text":"1122 \u4e8c\u54e5\u5f00\u623f\u95f4 \u9898\u76ee Background \u4e5f\u8bb8\u662f\u623f\u95f4\u5f00\u591a\u4e86\uff0c\u4e8c\u54e5\u6700\u8fd1\u4e00\u76f4\u558a\u865a\u3002\u8fd9\u5929\u4e8c\u54e5\u53c8\u548c...\u53bb\u65c5\u9986\u5f00\u623f\u95f4\uff0c\u5374\u9047\u4e0a\u4e86\u865a\u903cP\u548c\u5c0fZ\uff08\u522b\u95ee\u865a\u903cP\u548c\u5c0fZ\u4e3a\u4ec0\u4e48\u4f1a\u5728\u65c5\u9986= =\uff09 \u4e8c\u54e5\u5e0c\u671b\u4e0d\u8981\u628a\u4ed6\u5f00\u623f\u95f4\u7684\u4e8b\u8bf4\u51fa\u53bb\uff0c\u6240\u4ee5\u5c0fZ\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u7684\uff01\u4f46\u865a\u903cP\u5bf9\u4e8c\u54e5\u8bf4\uff1a\u201c\u6211\u51fa\u9053\u5f88\u7b80\u5355\u7684\u9898\u7ed9\u4f60\u505a\uff0c\u505a\u4e0d\u51fa\u6765\u4f60\u5f97\u627f\u8ba4\u4f60\u5f88\u865a\u3002\u201d Description \u8fd9\u4e2a\u65c5\u5e97\u6709\u623f\u95f4\u53f7\u4e3a1...N(1 <= N <= 50000)\u4e2a\u623f\u95f4\u3002 \u6bcf\u5f53\u6709\u4eba\u6765\u5f00\u623f\u65f6\uff0c\u4ed6\u4eec\u603b\u5e0c\u671b\u5f00\u623f\u95f4\u53f7\u76f8\u90bb\u7684\u623f\u95f4\u3002\u4ed6\u4eec\u7ed9\u51fa\u5e0c\u671b\u5f00\u7684\u623f\u95f4\u6570\u91cfD(1 <= D <= N)\uff0c\u65c5\u5e97\u8981\u662f\u6709\u8fd9\u6837\u7684\u53f7\u7801\u8fde\u7eed\u7684\u7a7a\u623f\uff0c\u5c31\u7ed9\u5ba2\u4eba\u623f\u95f4\u53f7\u6700\u5c0f\u7684D\u4e2a\u623f\u95f4\uff0c\u5e76\u544a\u8bc9\u5ba2\u4eba\u8fd9D\u4e2a\u623f\u95f4\u4e2d\u623f\u53f7\u6700\u5c0f\u7684\u90a3\u4e2a\u623f\u53f7\uff0c\u4e4b\u540e\uff0c\u8fd9D\u95f4\u623f\u4fbf\u88ab\u5165\u4f4f\u4e86\u3002\u5426\u5219\uff0c\u65c5\u5e97\u8f93\u51fa0\uff0c\u8fd9\u4e9b\u5ba2\u4eba\u4e00\u4e2a\u90fd\u4e0d\u4f1a\u5165\u4f4f\u3002 \u5f53\u5ba2\u4eba\u9000\u623f\u65f6\uff0c\u4f1a\u7ed9\u51faX\u548cY\u4e24\u4e2a\u6570\uff0c\u8868\u793a\u9000X, X+1...X + Y - 1\u8fd9Y\u4e2a\u623f\u95f4\uff081 <= X <= N - Y + 1\uff09\u3002\u6ce8\u610f\uff1a\u9000\u7684\u623f\u95f4\u53ef\u4ee5\u662f\u6ca1\u4eba\u5f00\u7684\uff0c\u9000\u623f\u7684\u8fd9Y\u4e2a\u4eba\u672a\u5fc5\u662f\u540c\u65f6\u6765\u5f00\u623f\u7684\u90a3\u4e00\u6279\u4eba\u3002 Hints \u865a\u903cP\u8bf4\u8fd9\u662f\u9053\u5f88\u7b80\u5355\u7684\u7ebf\u6bb5\u6811\u9898 Input Format \u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6b63\u6574\u6570N\uff0cM\u3002 N \u5373\u5171\u51e0\u4e2a\u623f\u95f4\uff0c M\u662f\u63a5\u4e0b\u6765\u6709M\u884c\u8f93\u5165 \u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u79cd\u53ef\u80fd\u8f93\u5165\uff1a \uff081\uff09\u4e24\u4e2a\u6574\u65701 \u548c D\uff0c\u4ee3\u8868\u73b0\u5728\u6709\u5ba2\u4eba\u6765\u5f00\u623f\u95f4\u53f7\u8fde\u7eed\u7684D\u95f4\u623f \uff082\uff09\u4e09\u4e2a\u6574\u65702\uff0cX\uff0cY \u4ee3\u8868\u4e0a\u9762\u8bf4\u7684\u4eceX\u623f\u5f00\u59cb\u7684Y\u95f4\u623f\u88ab\u9000\u6389 Output Format \u6bcf\u6b21\u6709\u5ba2\u4eba\u5f00\u623f\uff0c\u8f93\u51fa\u4e00\u884c\u6574\u6570 \u82e5\u65c5\u5e97\u6709\u8fde\u7eed\u623f\u95f4\uff0c\u7ed9\u51faD\u95f4\u623f\u4e2d\u623f\u53f7\u6700\u5c0f\u7684\u53f7\u7801\u3002\u5426\u5219\u8f93\u51fa0\u3002 Sample Input 10 6 1 3 1 3 1 3 1 3 2 5 5 1 6 Sample Output 1 4 7 0 5 FineArtz's solution Star /* \u4e8c\u54e5\u5f00\u623f\u95f4 */ #include <iostream> using namespace std; const int MAXN = 50000; struct Node{ int l = 0, r = 0; int lsum = 0, rsum = 0, sum = 0; int lazy = 0; //0: None, 1: occupied, 2: recycled }; Node a[MAXN * 4 + 5]; int n, m; void pushUp(int x){ a[x].lsum = a[x << 1].lsum; a[x].rsum = a[x << 1 | 1].rsum; int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].lsum == mid - a[x].l + 1) a[x].lsum += a[x << 1 | 1].lsum; if (a[x << 1 | 1].rsum == a[x].r - mid) a[x].rsum += a[x << 1].rsum; a[x].sum = max(a[x << 1].rsum + a[x << 1 | 1].lsum, max(a[x << 1].sum, a[x << 1 | 1].sum)); } void pushDown(int x){ if (a[x].lazy == 0) return; int mid = (a[x].l + a[x].r) >> 1; a[x << 1].lazy = a[x << 1 | 1].lazy = a[x].lazy; if (a[x].lazy == 1){ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = 0; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = 0; } else{ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = mid - a[x].l + 1; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = a[x].r - mid; } a[x].lazy = 0; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].lsum = a[x].rsum = a[x].sum = 1; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int lazy){ if (a[x].l >= l && a[x].r <= r){ a[x].lazy = lazy; if (lazy == 1) a[x].lsum = a[x].rsum = a[x].sum = 0; else a[x].lsum = a[x].rsum = a[x].sum = a[x].r - a[x].l + 1; return; } pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (l <= mid) update(x << 1, l, r, lazy); if (r > mid) update(x << 1 | 1, l, r, lazy); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].sum >= len) return query(x << 1, len); else if (a[x << 1].rsum + a[x << 1 | 1].lsum >= len) return mid - a[x << 1].rsum + 1; else return query(x << 1 | 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; buildTree(1, 1, n); while (m--){ int op, x, y; cin >> op; switch (op){ case 1: cin >> x; if (x > a[1].sum) cout << 0 << '\\n'; else{ y = query(1, x); cout << y << '\\n'; update(1, y, y + x - 1, 1); } break; case 2: cin >> x >> y; update(1, x, x + y - 1, 2); break; } } return 0; }","title":"1122"},{"location":"nr/1122/#1122","text":"\u9898\u76ee","title":"1122 \u4e8c\u54e5\u5f00\u623f\u95f4"},{"location":"nr/1122/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u5f00\u623f\u95f4 */ #include <iostream> using namespace std; const int MAXN = 50000; struct Node{ int l = 0, r = 0; int lsum = 0, rsum = 0, sum = 0; int lazy = 0; //0: None, 1: occupied, 2: recycled }; Node a[MAXN * 4 + 5]; int n, m; void pushUp(int x){ a[x].lsum = a[x << 1].lsum; a[x].rsum = a[x << 1 | 1].rsum; int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].lsum == mid - a[x].l + 1) a[x].lsum += a[x << 1 | 1].lsum; if (a[x << 1 | 1].rsum == a[x].r - mid) a[x].rsum += a[x << 1].rsum; a[x].sum = max(a[x << 1].rsum + a[x << 1 | 1].lsum, max(a[x << 1].sum, a[x << 1 | 1].sum)); } void pushDown(int x){ if (a[x].lazy == 0) return; int mid = (a[x].l + a[x].r) >> 1; a[x << 1].lazy = a[x << 1 | 1].lazy = a[x].lazy; if (a[x].lazy == 1){ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = 0; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = 0; } else{ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = mid - a[x].l + 1; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = a[x].r - mid; } a[x].lazy = 0; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].lsum = a[x].rsum = a[x].sum = 1; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int lazy){ if (a[x].l >= l && a[x].r <= r){ a[x].lazy = lazy; if (lazy == 1) a[x].lsum = a[x].rsum = a[x].sum = 0; else a[x].lsum = a[x].rsum = a[x].sum = a[x].r - a[x].l + 1; return; } pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (l <= mid) update(x << 1, l, r, lazy); if (r > mid) update(x << 1 | 1, l, r, lazy); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].sum >= len) return query(x << 1, len); else if (a[x << 1].rsum + a[x << 1 | 1].lsum >= len) return mid - a[x << 1].rsum + 1; else return query(x << 1 | 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; buildTree(1, 1, n); while (m--){ int op, x, y; cin >> op; switch (op){ case 1: cin >> x; if (x > a[1].sum) cout << 0 << '\\n'; else{ y = query(1, x); cout << y << '\\n'; update(1, y, y + x - 1, 1); } break; case 2: cin >> x >> y; update(1, x, x + y - 1, 2); break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1123/","text":"1123 \u6298\u7ebf\u7edf\u8ba1 Problem \u9898\u76ee Description \u4e8c\u7ef4\u5e73\u9762\u4e0a\u6709n\u4e2a\u70b9(xi, yi)\uff0c\u73b0\u5728\u8fd9\u4e9b\u70b9\u4e2d\u53d6\u82e5\u5e72\u70b9\u6784\u6210\u4e00\u4e2a\u96c6\u5408S\uff0c\u5bf9\u5b83\u4eec\u6309\u7167x\u5750\u6807\u6392\u5e8f\uff0c\u987a\u6b21\u8fde\u63a5\uff0c\u5c06\u4f1a\u6784\u6210\u4e00\u4e9b\u8fde\u7eed\u4e0a\u5347\u3001\u4e0b\u964d\u7684\u6298\u7ebf\uff0c\u8bbe\u5176\u6570\u91cf\u4e3af(S)\u3002\u5982\u4e0b\u56fe\u4e2d\uff0c1->2,2->3,3->5,5->6\uff08\u6570\u5b57\u4e3a\u4e0b\u56fe\u4e2d\u4ece\u5de6\u5230\u53f3\u7684\u70b9\u7f16\u53f7\uff09\uff0c\u5c06\u6298\u7ebf\u5206\u4e3a\u4e864\u90e8\u5206\uff0c\u6bcf\u90e8\u5206\u8fde\u7eed\u4e0a\u5347\u3001\u4e0b\u964d\u3002 \u73b0\u7ed9\u5b9ak\uff0c\u6c42\u6ee1\u8db3f(S) = k\u7684S\u96c6\u5408\u4e2a\u6570\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570n\u548ck\uff0c\u4ee5\u4e0bn\u884c\u6bcf\u884c\u4e24\u4e2a\u6570(xi, yi)\u8868\u793a\u7b2ci\u4e2a\u70b9\u7684\u5750\u6807\u3002\u6240\u6709\u70b9\u7684\u5750\u6807\u503c\u90fd\u5728[1, 100000]\u5185\uff0c\u4e14\u4e0d\u5b58\u5728\u4e24\u4e2a\u70b9\uff0cx\u5750\u6807\u503c\u76f8\u7b49\u6216y\u5750\u6807\u503c\u76f8\u7b49\u3002 Output Format \u8f93\u51fa\u6ee1\u8db3\u8981\u6c42\u7684\u65b9\u6848\u603b\u6570 mod 100007\u7684\u7ed3\u679c\u3002 Sample Input 1: 5 1 5 5 3 2 4 4 2 3 1 1 Sample Output 1: 19 Sample Input 2: 5 2 5 5 3 2 4 4 2 3 1 1 Sample Output 2: 4 Limits n<=50000, k<=10 FineArtz's solution Star /* \u6298\u7ebf\u7edf\u8ba1 Problem */ #include <iostream> using namespace std; const int MOD = 100007; struct Point{ int x = 0, y = 0; bool operator <(const Point &p) const{ return x < p.x; } }; int n, k, maxy; Point a[50005]; long long f[50005][11][2] = {0}, t[100005][11][2] = {0}; int lowbit(int x){ return (x & (-x)); } void qsort(int l, int r){ int i = l, j = r; Point key = a[i]; while (i < j){ while (i < j && key < a[j]) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; if (l < i) qsort(l, i - 1); if (r > j) qsort(j + 1, r); } void add(int x, int j, int k, long long d){ for (int i = x; i <= maxy; i += lowbit(i)) t[i][j][k] = (t[i][j][k] + d) % MOD; } long long sum(int x, int j, int k){ long long ret = 0; for (int i = x; i != 0; i -= lowbit(i)) ret = (ret + t[i][j][k]) % MOD; return ret; } int main(){ cin >> n >> k; maxy = 0; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; if (a[i].y > maxy) maxy = a[i].y; } qsort(1, n); for (int i = 1; i <= n; ++i){ f[i][0][0] = 1; f[i][0][1] = 1; add(a[i].y, 0, 0, 1); add(a[i].y, 0, 1, 1); for (int j = 1; j <= k; ++j){ f[i][j][0] += sum(a[i].y - 1, j, 0) + sum(a[i].y - 1, j - 1, 1); f[i][j][1] += sum(maxy, j, 1) - sum(a[i].y, j, 1) + sum(maxy, j - 1, 0) - sum(a[i].y, j - 1, 0); f[i][j][0] = (f[i][j][0] % MOD + MOD) % MOD; f[i][j][1] = (f[i][j][1] % MOD + MOD) % MOD; add(a[i].y, j, 0, f[i][j][0]); add(a[i].y, j, 1, f[i][j][1]); } } int ans = 0; for (int i = 1; i <= n; ++i) ans = (ans + f[i][k][0] + f[i][k][1]) % MOD; cout << ans << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; const int M=100007; int ftree[262144][11],gtree[262144][11],df[11],dg[11],totalf[11],totalg[11],n,x[100001],y[100001],lastf,lastg,curf,curg,k; inline int lowbit(int x) { return x&-x; } int query(int t[262144][11],int x,int k){ int sum=0; while (x>0){ sum=(sum+t[x][k])%M; x-=lowbit(x); } return sum; } void update(int t[262144][11],int x,int k,int d){ while (x<=100000){ t[x][k]=(t[x][k]+d)%M; x+=lowbit(x); } } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=x[l],keyy=y[l]; while (i<j){ while (i<j&&x[j]>=key) --j; if (i<j){ x[i]=x[j]; y[i]=y[j]; ++i; } while (i<j&&x[i]<=key) ++i; if (i<j){ x[j]=x[i]; y[j]=y[i]; --j; } } x[i]=key; y[i]=keyy; qsort(l,i); qsort(i+1,r); } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n>>k; for (int i=0;i<n;++i) cin >> x[i] >> y[i]; qsort(0,n); for (int i=0;i<n;++i) { lastf=query(ftree,y[i]-1,0); lastg=query(gtree,y[i]-1,0); for (int j=1;j<=k;++j) { curf=query(ftree,y[i]-1,j); curg=query(gtree,y[i]-1,j); df[j]=curf+lastg; dg[j]=totalg[j]-curg+totalf[j-1]-lastf; if (dg[j]<0) dg[j]+=M;//WTF???? Be Cautious!!! update(ftree,y[i],j,df[j]); update(gtree,y[i],j,dg[j]); lastf=curf; lastg=curg; } update(ftree,y[i],0,1); update(gtree,y[i],0,1); totalf[0]++; totalg[0]++; for (int j=1;j<=k;++j){ totalf[j]=(totalf[j]+df[j])%M; totalg[j]=(totalg[j]+dg[j])%M; } } cout<<(totalf[k]+totalg[k])%M; return 0; }","title":"1123"},{"location":"nr/1123/#1123-problem","text":"\u9898\u76ee","title":"1123 \u6298\u7ebf\u7edf\u8ba1 Problem"},{"location":"nr/1123/#fineartzs-solution-star","text":"/* \u6298\u7ebf\u7edf\u8ba1 Problem */ #include <iostream> using namespace std; const int MOD = 100007; struct Point{ int x = 0, y = 0; bool operator <(const Point &p) const{ return x < p.x; } }; int n, k, maxy; Point a[50005]; long long f[50005][11][2] = {0}, t[100005][11][2] = {0}; int lowbit(int x){ return (x & (-x)); } void qsort(int l, int r){ int i = l, j = r; Point key = a[i]; while (i < j){ while (i < j && key < a[j]) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; if (l < i) qsort(l, i - 1); if (r > j) qsort(j + 1, r); } void add(int x, int j, int k, long long d){ for (int i = x; i <= maxy; i += lowbit(i)) t[i][j][k] = (t[i][j][k] + d) % MOD; } long long sum(int x, int j, int k){ long long ret = 0; for (int i = x; i != 0; i -= lowbit(i)) ret = (ret + t[i][j][k]) % MOD; return ret; } int main(){ cin >> n >> k; maxy = 0; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; if (a[i].y > maxy) maxy = a[i].y; } qsort(1, n); for (int i = 1; i <= n; ++i){ f[i][0][0] = 1; f[i][0][1] = 1; add(a[i].y, 0, 0, 1); add(a[i].y, 0, 1, 1); for (int j = 1; j <= k; ++j){ f[i][j][0] += sum(a[i].y - 1, j, 0) + sum(a[i].y - 1, j - 1, 1); f[i][j][1] += sum(maxy, j, 1) - sum(a[i].y, j, 1) + sum(maxy, j - 1, 0) - sum(a[i].y, j - 1, 0); f[i][j][0] = (f[i][j][0] % MOD + MOD) % MOD; f[i][j][1] = (f[i][j][1] % MOD + MOD) % MOD; add(a[i].y, j, 0, f[i][j][0]); add(a[i].y, j, 1, f[i][j][1]); } } int ans = 0; for (int i = 1; i <= n; ++i) ans = (ans + f[i][k][0] + f[i][k][1]) % MOD; cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1123/#washswangs-solution-star","text":"#include <iostream> using namespace std; const int M=100007; int ftree[262144][11],gtree[262144][11],df[11],dg[11],totalf[11],totalg[11],n,x[100001],y[100001],lastf,lastg,curf,curg,k; inline int lowbit(int x) { return x&-x; } int query(int t[262144][11],int x,int k){ int sum=0; while (x>0){ sum=(sum+t[x][k])%M; x-=lowbit(x); } return sum; } void update(int t[262144][11],int x,int k,int d){ while (x<=100000){ t[x][k]=(t[x][k]+d)%M; x+=lowbit(x); } } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=x[l],keyy=y[l]; while (i<j){ while (i<j&&x[j]>=key) --j; if (i<j){ x[i]=x[j]; y[i]=y[j]; ++i; } while (i<j&&x[i]<=key) ++i; if (i<j){ x[j]=x[i]; y[j]=y[i]; --j; } } x[i]=key; y[i]=keyy; qsort(l,i); qsort(i+1,r); } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n>>k; for (int i=0;i<n;++i) cin >> x[i] >> y[i]; qsort(0,n); for (int i=0;i<n;++i) { lastf=query(ftree,y[i]-1,0); lastg=query(gtree,y[i]-1,0); for (int j=1;j<=k;++j) { curf=query(ftree,y[i]-1,j); curg=query(gtree,y[i]-1,j); df[j]=curf+lastg; dg[j]=totalg[j]-curg+totalf[j-1]-lastf; if (dg[j]<0) dg[j]+=M;//WTF???? Be Cautious!!! update(ftree,y[i],j,df[j]); update(gtree,y[i],j,dg[j]); lastf=curf; lastg=curg; } update(ftree,y[i],0,1); update(gtree,y[i],0,1); totalf[0]++; totalg[0]++; for (int j=1;j<=k;++j){ totalf[j]=(totalf[j]+df[j])%M; totalg[j]=(totalg[j]+dg[j])%M; } } cout<<(totalf[k]+totalg[k])%M; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1124/","text":"1124 \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 \u9898\u76ee Description \u6211\u5728PPCA\u671f\u95f4\u523b\u82e6\u5b66\u4e60\uff0c\u5b5c\u5b5c\u4e0d\u5026\uff0c\u7ecf\u5e38\u7cbe\u75b2\u529b\u7aed\uff0c\u4e8e\u662f\u9700\u8981\u4e00\u4e9b\u6d3b\u52a8\u6765\u6062\u590d\u8eab\u5fc3\uff0c\u9700\u6062\u590d\u7684\u6570\u503c\u4e3b\u8981\u6709\u4e24\u9879\uff1a\u4f53\u529b\u3001\u667a\u529b\u3002\u6bcf\u9879\u6d3b\u52a8\u90fd\u4f1a\u5bf9\u8fd9\u4e24\u9879\u6570\u503c\u9020\u6210\u4e00\u5b9a\u5f71\u54cd\uff0c\u4f8b\u5982\uff0c\u73a9\u6e38\u620f\u4f1a\u964d\u4f4e10\u70b9\u4f53\u529b\uff0c\u589e\u52a01\u70b9\u667a\u529b\uff1b\u4e0e\u59b9\u5b50\u5171\u8fdb\u665a\u9910\u4f1a\u589e\u52a04\u70b9\u4f53\u529b\u548c3\u70b9\u667a\u529b\uff1b\u5982\u679c\u8dd1\u5708\u7684\u8bdd\uff0c\u4f1a\u964d\u4f4e3\u70b9\u4f53\u529b\u548c1\u70b9\u667a\u529b\uff0c\u8bf8\u5982\u6b64\u7c7b\u3002\u4f46\u662f\uff0c\u540c\u4e00\u9879\u6d3b\u52a8\u4e0d\u80fd\u91cd\u590d\u8fdb\u884c\uff0c\u4f8b\u5982\u4e0e\u59b9\u5b50\u8fde\u54032\u987f\u665a\u9910\uff08\u751a\u81f3\u66f4\u591a\uff09\u4f1a\u88ab\u8ba8\u538c\u7684\u3002\u3002\u3002 \u73b0\u5728\u6211\u9700\u8981\u4f11\u606f\u4e00\u4f1a\u513f\uff0c\u6709n\u9879\u6d3b\u52a8\u53ef\u4ee5\u53c2\u52a0\uff0c\u6211\u5e0c\u671b\u5728\u4e0d\u8ba1\u65f6\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u6309\u987a\u5e8f\u53c2\u52a0\u5b8c\u82e5\u5e72\u9879\u6d3b\u52a8\u540e\uff0c\u6240\u5f97\u5230\u7684\u4f53\u529b\u503c\u4e0e\u667a\u529b\u503c\u7684\u79ef\u5c3d\u53ef\u80fd\u5927\u3002\u53e6\u5916\uff0c\u73b0\u5728\uff0c\u6211\u662f\u6709\u4e00\u5b9a\u4f53\u529b\u503c\u548c\u667a\u529b\u503c\u7684\uff0c\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u9700\u8981\u4fdd\u6301\u4f53\u529b\u503c\u5927\u4e8e\u7b49\u4e8e0\uff1b\u5728\u53c2\u52a0\u5b8c\u6240\u9009\u6d3b\u52a8\u540e\uff0c\u4f53\u529b\u503c\u5fc5\u987b\u5927\u4e8e0\uff0c\u5426\u5219\u4f1a\u6b7b\u4eba\u7684\uff0c\u667a\u529b\u503c\u5fc5\u987b\u5927\u4e8e70\uff0c\u5426\u5219\u4f1a\u5f31\u667a\u7684\uff0c\u82e5\u65e0\u6cd5\u8fbe\u5230\u4e0a\u8ff0\u8981\u6c42\uff0c\u90a3\u8fd8\u4e0d\u5982\u6b7b\u4e86\u7b97\u4e86\uff0c\u5c31\u8f93\u51fa\u201cDeath\u201d\u597d\u4e86\u3002 Input Format \u5171n+2\u884c\u3002 \u7b2c\u4e00\u884c\uff1a\u6d3b\u52a8\u9879\u6570n \u5bf9\u4e8e30%\u6570\u636e\uff1an<=50 \u5bf9\u4e8e100%\u6570\u636e\uff1an<=400 \u7b2c\u4e8c\u884c\uff1a\u6211\u7684\u521d\u59cb\u4f53\u529b\u503c\u3001\u667a\u529b\u503c\uff0c\u57280-1000\u4e4b\u95f4 \u7b2c3\u81f3n+2\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u8868\u793a\u7b2ci\u9879\u6d3b\u52a8\u5bf9\u4f53\u529b\u7684\u5f71\u54cdxi\u3001\u5bf9\u667a\u529b\u7684\u5f71\u54cdyi xi\u3001yi\u7edd\u5bf9\u503c\u5747\u5c0f\u4e8e1000\uff0c\u5176\u7edd\u5bf9\u503c\u4e4b\u548c\u5747\u5c0f\u4e8e30000 Output Format \u4e00\u884c\uff1a\u5728\u4f53\u529b\u503c\u5927\u4e8e0\uff0c\u667a\u529b\u503c\u5927\u4e8e70\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5927\u4f53\u529b\u503c*\u667a\u529b\u503c\uff1b\u82e5\u65e0\u6cd5\u6ee1\u8db3\u4f53\u529b\u503c\u5927\u4e8e0\u4e14\u667a\u529b\u503c\u5927\u4e8e70\uff0c\u5219\u8f93\u51fa\uff1aDeath\u3002 Sample Input 1 3 10 100 1 3 -2 1 6 \u20135 Sample Output 1 1666 Sample Input 2 3 10 60 -5 6 4 \u20131 -6 5 Sample Output 2 Death Limits 30% n<=50, 100% n<=400 FineArtz's solution Star /* \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 */ #include <iostream> using namespace std; const int INF = 2000000; const int MAXH = 33000; int n; int hp, iq; int a[405], b[405]; int f[405][MAXH + 5] = {0}; int main(){ cin >> n; cin >> hp >> iq; for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i]; for (int i = 0; i <= n; ++i) for (int j = 0; j <= MAXH; ++j) f[i][j] = -INF; f[0][hp] = iq; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= MAXH - 1000; ++j){ if (j >= a[i] && f[i - 1][j - a[i]] != -INF && f[i - 1][j - a[i]] + b[i] > f[i - 1][j]){ f[i][j] = f[i - 1][j - a[i]] + b[i]; } else f[i][j] = f[i - 1][j]; } } int ans = -INF; for (int i = 1; i <= MAXH; ++i){ if (f[n][i] > 70 && f[n][i] * i > ans) ans = f[n][i] * i; } if (ans == -INF) cout << \"Death\" << endl; else cout << ans << endl; return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; int dp[410][33000],x[500],y[500],sx,sy,n,ans; int main() { cin>>n>>sx>>sy; for (int i=1;i<=n;++i) cin>>x[i]>>y[i]; memset(dp,-40000,sizeof(dp)); dp[0][sx]=sy; for (int i=1;i<=n;++i) for (int j = 0; j < 32000; ++j) { dp[i][j] = dp[i - 1][j]; if ((j >= x[i]) && (dp[i - 1][j - x[i]] > -40000) && (dp[i - 1][j - x[i]] + y[i] > dp[i][j])) dp[i][j] = dp[i - 1][j - x[i]] + y[i]; } for (int i=1;i<32000;++i) if ((dp[n][i]>70)&&(i*dp[n][i]>ans)) ans=i*dp[n][i]; if (ans!=0) cout<<ans<<endl; else cout<<\"Death\"<<endl; return 0; }","title":"1124"},{"location":"nr/1124/#1124","text":"\u9898\u76ee","title":"1124 \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86"},{"location":"nr/1124/#fineartzs-solution-star","text":"/* \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 */ #include <iostream> using namespace std; const int INF = 2000000; const int MAXH = 33000; int n; int hp, iq; int a[405], b[405]; int f[405][MAXH + 5] = {0}; int main(){ cin >> n; cin >> hp >> iq; for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i]; for (int i = 0; i <= n; ++i) for (int j = 0; j <= MAXH; ++j) f[i][j] = -INF; f[0][hp] = iq; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= MAXH - 1000; ++j){ if (j >= a[i] && f[i - 1][j - a[i]] != -INF && f[i - 1][j - a[i]] + b[i] > f[i - 1][j]){ f[i][j] = f[i - 1][j - a[i]] + b[i]; } else f[i][j] = f[i - 1][j]; } } int ans = -INF; for (int i = 1; i <= MAXH; ++i){ if (f[n][i] > 70 && f[n][i] * i > ans) ans = f[n][i] * i; } if (ans == -INF) cout << \"Death\" << endl; else cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1124/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int dp[410][33000],x[500],y[500],sx,sy,n,ans; int main() { cin>>n>>sx>>sy; for (int i=1;i<=n;++i) cin>>x[i]>>y[i]; memset(dp,-40000,sizeof(dp)); dp[0][sx]=sy; for (int i=1;i<=n;++i) for (int j = 0; j < 32000; ++j) { dp[i][j] = dp[i - 1][j]; if ((j >= x[i]) && (dp[i - 1][j - x[i]] > -40000) && (dp[i - 1][j - x[i]] + y[i] > dp[i][j])) dp[i][j] = dp[i - 1][j - x[i]] + y[i]; } for (int i=1;i<32000;++i) if ((dp[n][i]>70)&&(i*dp[n][i]>ans)) ans=i*dp[n][i]; if (ans!=0) cout<<ans<<endl; else cout<<\"Death\"<<endl; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1125/","text":"1125 Typist \u9898\u76ee Description \u5bbd\u795e\u7684\u952e\u76d8\u4e0a\u53ea\u67096\u4e2a\u6309\u952e\uff0c\u6211\u4eec\u53ef\u4ee5\u5206\u522b\u8bb0\u4e3akey1, key2, ... , key6\u3002 \u5bbd\u795e\u8f93\u5165\u7684\u65f6\u5019\uff0c\u5f55\u5165\u533a\u4f1a\u51fa\u73b0\u4e00\u4e2a\u968f\u673a\u7684\u516d\u4f4d\u6570\u548c\u4e00\u4e2a\u8f93\u5165\u5149\u6807\u3002\u521d\u59cb\u7684\u8f93\u5165\u5149\u6807\u6307\u5411\u7b2c\u4e00\u4f4d\u6570\u5b57\u3002\u8fd9\u65f6\u5019\u5bbd\u795e\u5c06\u5de7\u5999\u5229\u7528\u4ed6\u76846\u4e2a\u6309\u952e\u5c06\u521d\u59cb\u6570\u5b57\u53d8\u4e3a\u4ed6\u8981\u8f93\u5165\u7684\u76ee\u6807\u6570\u5b57\u3002 \u4e0b\u9762\u5217\u51fa\u6bcf\u4e2a\u952e\u7684\u4f5c\u7528\uff1a key1\uff1a\u6309key1\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u5c06\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u6570\u5b57\u4e0e\u5f55\u5165\u533a\u76841\u53f7\u4f4d\u7f6e\u7684\u6570\u5b57\uff08\u5de6\u8d77\u7b2c\u4e00\u4e2a\u6570\u5b57\uff09\u4ea4\u6362\u3002\u5982\u679c\u5149\u6807\u5df2\u7ecf\u5904\u5728\u5f55\u5165\u533a\u76841\u53f7\u4f4d\u7f6e\uff0c\u5219\u6309key1\u952e\u4e4b\u540e\uff0c\u5f55\u5165\u533a\u7684\u6570\u5b57\u4e0d\u53d8\uff1b key2\uff1a\u6309key2\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u5c06\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u6570\u5b57\u4e0e\u5f55\u5165\u533a\u76846\u53f7\u4f4d\u7f6e\u7684\u6570\u5b57\uff08\u5de6\u8d77\u7b2c\u516d\u4e2a\u6570\u5b57\uff09\u4ea4\u6362\u3002\u5982\u679c\u5149\u6807\u5df2\u7ecf\u5904\u5728\u5f55\u5165\u533a\u76846\u53f7\u4f4d\u7f6e\uff0c\u5219\u6309key2\u952e\u4e4b\u540e\uff0c\u5f55\u5165\u533a\u7684\u6570\u5b57\u4e0d\u53d8\uff1b key3\uff1a\u6309key3\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u5c06\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u6570\u5b57\u52a01\uff08\u9664\u975e\u8be5\u6570\u5b57\u662f9\uff09\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u6570\u5b57\u4e3a2\uff0c\u6309key3\u4e4b\u540e\uff0c\u8be5\u5904\u7684\u6570\u5b57\u53d8\u4e3a3\uff1b\u5982\u679c\u8be5\u5904\u6570\u5b57\u4e3a9\uff0c\u5219\u6309key3\u4e4b\u540e\uff0c\u6570\u5b57\u4e0d\u53d8\uff0c\u5149\u6807\u4f4d\u7f6e\u4e5f\u4e0d\u53d8\uff1b key4\uff1a\u6309key4\uff0c\u5149\u6807\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u5c06\u5149\u6807\u6240\u5728\u4f4d\u7f6e\u7684\u6570\u5b57\u51cf1\uff08\u9664\u975e\u8be5\u6570\u5b57\u662f0\uff09\uff0c\u5982\u679c\u8be5\u5904\u6570\u5b57\u4e3a0\uff0c\u5219\u6309key4\u4e4b\u540e\uff0c\u6570\u5b57\u4e0d\u53d8\uff0c\u5149\u6807\u4f4d\u7f6e\u4e5f\u4e0d\u53d8\uff1b key5\uff1a\u6309key5\uff0c\u5149\u6807\u5de6\u79fb\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5149\u6807\u5df2\u7ecf\u5728\u5f55\u5165\u533a\u76841\u53f7\u4f4d\u7f6e\uff08\u5de6\u8d77\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\uff09\u4e0a\uff0c\u5219\u5149\u6807\u4e0d\u52a8\uff1b key6\uff1a\u6309key6\uff0c\u5149\u6807\u53f3\u79fb\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5982\u679c\u5149\u6807\u5df2\u7ecf\u5728\u5f55\u5165\u533a\u76846\u53f7\u4f4d\u7f6e\uff08\u5de6\u8d77\u7b2c\u516d\u4e2a\u4f4d\u7f6e\uff09\u4e0a\uff0c\u5219\u5149\u6807\u4e0d\u52a8\u3002 \u73b0\u5728\u5bbd\u795e\u60f3\u77e5\u9053\uff0c\u4ed6\u8f93\u5165\u4e00\u4e2a\u6570\u5b57\u6700\u5c11\u9700\u8981\u51fb\u952e\u591a\u5c11\u6b21\u3002 Input Format \u5171\u4e24\u884c\uff0c\u6bcf\u884c\u5404\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3a6\u7684\u6570\uff0c\u524d\u8005\u4e3a\u521d\u59cb\u6570\u5b57\uff0c\u540e\u8005\u4e3a\u76ee\u6807\u6570\u5b57\u3002 Output Format \u4ec5\u4e00\u884c\uff0c\u542b\u6709\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6700\u5c11\u9700\u8981\u7684\u51fb\u952e\u6b21\u6570\u3002 Sample Input 123456 654321 Sample Output 11 FineArtz's solution Star /* typist */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int FACT[6] = {100000, 10000, 1000, 100, 10, 1}; const int MAXS = 2000000; struct String{ int s = 0, cursor = 0; long long step = 0; String() = default; String(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; } String &operator =(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; return *this; } bool operator ==(const String &ss){ return s == ss.s; } const int operator [](int x) const { return s / FACT[x] % 10; } void inc(int x){ s += FACT[x]; } void dec(int x){ s -= FACT[x]; } void swap(int x, int y){ int p = s / FACT[x] % 10, q = s / FACT[y] % 10; s += (q - p) * FACT[x]; s += (p - q) * FACT[y]; } }; String s, a; String q[2000005]; bool v[1000000][7] = {0}; int front = 0, rear = 0; void push(const String &n){ if (v[n.s][n.cursor]) return; rear = (rear + 1) % MAXS; q[rear] = n; v[n.s][n.cursor] = true; } long long bfs(){ push(s); while (front != rear){ front = (front + 1) % MAXS; String t = q[front]; if (t == a){ return t.step; } String n; int i = t.cursor; if (i != 0){ n = t; ++n.step; n.swap(i, 0); push(n); } if (i != 5){ n = t; ++n.step; n.swap(i, 5); push(n); } if (t[i] != a[i]){ if (t[i] != 0){ n = t; ++n.step; n.dec(i); push(n); } if (t[i] != 9){ n = t; ++n.step; n.inc(i); push(n); } } if (i != 0){ n = t; ++n.step; --n.cursor; push(n); } if (i != 5){ n = t; ++n.step; ++n.cursor; push(n); } } return -1; } int main(){ char p[7], q[7]; cin >> p >> q; for (int i = 0; i < 6; ++i){ s.s = s.s * 10 + p[i] - '0'; a.s = a.s * 10 + q[i] - '0'; } long long ans = bfs(); cout << ans << endl; return 0; }","title":"1125"},{"location":"nr/1125/#1125-typist","text":"\u9898\u76ee","title":"1125 Typist"},{"location":"nr/1125/#fineartzs-solution-star","text":"/* typist */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int FACT[6] = {100000, 10000, 1000, 100, 10, 1}; const int MAXS = 2000000; struct String{ int s = 0, cursor = 0; long long step = 0; String() = default; String(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; } String &operator =(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; return *this; } bool operator ==(const String &ss){ return s == ss.s; } const int operator [](int x) const { return s / FACT[x] % 10; } void inc(int x){ s += FACT[x]; } void dec(int x){ s -= FACT[x]; } void swap(int x, int y){ int p = s / FACT[x] % 10, q = s / FACT[y] % 10; s += (q - p) * FACT[x]; s += (p - q) * FACT[y]; } }; String s, a; String q[2000005]; bool v[1000000][7] = {0}; int front = 0, rear = 0; void push(const String &n){ if (v[n.s][n.cursor]) return; rear = (rear + 1) % MAXS; q[rear] = n; v[n.s][n.cursor] = true; } long long bfs(){ push(s); while (front != rear){ front = (front + 1) % MAXS; String t = q[front]; if (t == a){ return t.step; } String n; int i = t.cursor; if (i != 0){ n = t; ++n.step; n.swap(i, 0); push(n); } if (i != 5){ n = t; ++n.step; n.swap(i, 5); push(n); } if (t[i] != a[i]){ if (t[i] != 0){ n = t; ++n.step; n.dec(i); push(n); } if (t[i] != 9){ n = t; ++n.step; n.inc(i); push(n); } } if (i != 0){ n = t; ++n.step; --n.cursor; push(n); } if (i != 5){ n = t; ++n.step; ++n.cursor; push(n); } } return -1; } int main(){ char p[7], q[7]; cin >> p >> q; for (int i = 0; i < 6; ++i){ s.s = s.s * 10 + p[i] - '0'; a.s = a.s * 10 + q[i] - '0'; } long long ans = bfs(); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1127/","text":"1127 Water Problem \u9898\u76ee Description \u636e\u8bf4\u5927\u4e3b\u4efb\u8ba4\u8bc6\u4e00\u4e2a\u81ea\u8ba4\u4e3a\u5f88\u806a\u660e\u7684\u4eba\u3002 \u6709\u4e00\u5929\uff0c\u5927\u4e3b\u4efb\u95ee\u90a3\u4e2a\u4eba\uff1a \u201c\u4f60\u80fd\u544a\u8bc9\u6211\u4e00\u4e2a\u96c6\u5408\u7684\u8868\u793a\u6cd5\u4e48\uff1f\u201d \u201c\u5f53\u7136\uff0c\u6211\u8fd9\u4e48\u806a\u660e\uff01\u201d\u4ed6\u56de\u7b54\u8bf4\uff0c\u201c\u90a3\u662f\u4e00\u7ec4\u5728\u4e24\u4e2a\u5927\u62ec\u53f7\u5305\u56f4\u7684\u5143\u7d20\uff0c\u4f46\u62ec\u53f7\u91cc\u4e5f\u53ef\u4ee5\u4e3a\u7a7a\u3002\u8fd9\u4e9b\u5143\u7d20\u53ef\u4ee5\u662f\u4e00\u4e2a\u65b0\u7684\u96c6\u5408\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u6bcd\uff0c\u4ed6\u4eec\u4e4b\u95f4\u7528\u2018\uff0c\u2019\u9694\u5f00\u3002\u201d \u201c\u90a3\u4e48\u3002\u201d\u5927\u4e3b\u4efb\u8bf4\uff0c\u201c\u5982\u679c\u6211\u7ed9\u4f60\u4e00\u4e2a\u8868\u793a\uff0c\u4f60\u80fd\u544a\u8bc9\u6211\u5b83\u662f\u4e00\u4e2a\u6b63\u786e\u7684\u96c6\u5408\u5417\uff1f\u201d \u201c\u5f53\u7136\uff0c\u6211\u8fd9\u4e48\u806a\u660e\uff01\u201d\u4ed6\u53c8\u56de\u7b54\u8bf4\uff0c\u201c\u50bb\u74dc\u90fd\u4f1a\u505a\u3002\u201d \u201c\u5f88\u597d\u201d\u5927\u4e3b\u4efb\u60f3\uff0c\u201c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u8bc1\u660e\u4ed6\u662f\u50bb\u74dc\u4e86\uff01\u201d \u73b0\u5728\u5927\u4e3b\u4efb\u51c6\u5907\u7528\u8fd9\u6837\u4e00\u9053\u9898\u6765\u8650\u6389\u90a3\u4e2a\u4eba\u3002\u4f60\u5c06\u5f97\u5230\u4e0b\u5217\u89c4\u5b9a\uff1a \u96c6\u5408\uff1a\u201c{\u201d \u5143\u7d20\u5217\u8868 \u201c}\u201d \u5143\u7d20\u5217\u8868\uff1a\u7a7a or \u5143\u7d20\u5b50\u5217\u8868 \u5143\u7d20\u5b50\u5217\u8868\uff1a\u5143\u7d20 or \u5143\u7d20\u201c\uff0c\u201d\u5143\u7d20\u5b50\u5217\u8868 \u5143\u7d20\uff1a\u5b50\u5143\u7d20 or \u96c6\u5408 \u5b50\u5143\u7d20\uff1a\u201c{\u201d or \u201c\uff0c\u201d or\u201c}\u201d \u6ce8\u610f\uff1a\u201c\u7a7a\u201d\uff0c\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u6210\u5206\uff0c\u5e76\u4e0d\u662f\u6709\u4e00\u4e2a\u8868\u793a\u201c\u7a7a\u201d\u7684\u5b57\u7b26\u3002 \u5927\u4e3b\u4efb\u89c9\u5f97\u8fd9\u9898\u592a\u6c34\u4e86\uff0c\u4ed6\u4e0d\u5c51\u4e8e\u5199\u6807\u7a0b\uff0c\u5012\u662f\u7ed9\u51fa\u4e86\u4e00\u5927\u5806\u90aa\u6076\u7684\u6570\u636e\u3002\u4e3a\u4e86\u5e2e\u52a9\u5927\u4e3b\u4efb\u8bc1\u660e\u90a3\u4e2a\u4eba\u662f\u50bb\u74dc\uff0c\u4f5c\u4e3a\u5927\u4e3b\u4efb\u4e0b\u624b\u7684\u4f60\u4e5f\u5c31\u96be\u9003\u5e2e\u4ed6\u5199\u6807\u7a0b\u7684\u5384\u8fd0\u4e86\u3002\u8bf7\u4f60\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5224\u65ad\u4e00\u4e2a\u8868\u8fbe\u5f0f\u662f\u5426\u662f\u6ee1\u8db3\u4e0a\u8ff0\u89c4\u5b9a\u7684\u96c6\u5408\u3002 Input Format \u672c\u9898\u6709\u591a\u7ec4\u6570\u636e\u3002 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3a\u6570\u636e\u7ec4\u6570T\u3002 \u7b2c2\u5230T+1\u884c\uff0c\u6bcf\u884c\u7ed9\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 Output Format \u5171T\u884c\u3002 \u6309\u4e0b\u5217\u683c\u5f0f\u8f93\u51fa\uff1a \u82e5\u662f\u4e00\u4e2a\u6ee1\u8db3\u89c4\u5b9a\u7684\u96c6\u5408\uff0c\u5219\u8f93\u51fa\uff1a\u201cWord #\u6570\u636e\u7ec4\u53f7: Set\u201d \u82e5\u4e0d\u662f\uff0c\u5219\u8f93\u51fa\uff1a\u201cWord #\u6570\u636e\u7ec4\u53f7: No Set\u201d Sample Input 4 {} {{}} {{}},{,}} {,,} Sample Output Word #1: Set Word #2: Set Word #3: Set Word #4: No Set Hint \u5bf9\u4e8e40%\u6570\u636e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc76\uff1b \u5bf9\u4e8e100%\u6570\u636e\uff0c\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7200\uff0cT<=1000\u3002 FineArtz's solution Star /* Water Problem */ #include <iostream> #include <cstring> using namespace std; int t; char s[205]; int isSublist[205][205]; inline bool readSet(const char *, int, int); inline bool readElementSublist(const char *, int, int); inline bool readElement(const char *, int, int); inline bool readSubelement(const char *, int, int); inline bool readSet(const char *s, int first, int last){ if (s[first] != '{' || s[last - 1] != '}') return false; if (last - first == 2) return true; return readElementSublist(s, first + 1, last - 1); } inline bool readElementSublist(const char *s, int first, int last){ if (isSublist[first][last] == 1) return true; if (isSublist[first][last] == -1) return false; for (int i = first; i < last; ++i){ if (s[i] != ',') continue; if (readElement(s, first, i) && readElementSublist(s, i + 1, last)) return true; } bool flag = readElement(s, first, last); if (flag) isSublist[first][last] = 1; else isSublist[first][last] = -1; return flag; } inline bool readElement(const char *s, int first, int last){ if (last - first == 1){ if (s[first] == '{' || s[first] == '}' || s[first] == ',') return true; else return false; } return readSet(s, first, last); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; for (int i = 1; i <= t; ++i){ cin >> s; int len = strlen(s); memset(isSublist, 0, sizeof(isSublist)); if (readSet(s, 0, len)) cout << \"Word #\" << i << \": Set\\n\"; else cout << \"Word #\" << i << \": No Set\\n\"; } return 0; }","title":"1127"},{"location":"nr/1127/#1127-water-problem","text":"\u9898\u76ee","title":"1127 Water Problem"},{"location":"nr/1127/#fineartzs-solution-star","text":"/* Water Problem */ #include <iostream> #include <cstring> using namespace std; int t; char s[205]; int isSublist[205][205]; inline bool readSet(const char *, int, int); inline bool readElementSublist(const char *, int, int); inline bool readElement(const char *, int, int); inline bool readSubelement(const char *, int, int); inline bool readSet(const char *s, int first, int last){ if (s[first] != '{' || s[last - 1] != '}') return false; if (last - first == 2) return true; return readElementSublist(s, first + 1, last - 1); } inline bool readElementSublist(const char *s, int first, int last){ if (isSublist[first][last] == 1) return true; if (isSublist[first][last] == -1) return false; for (int i = first; i < last; ++i){ if (s[i] != ',') continue; if (readElement(s, first, i) && readElementSublist(s, i + 1, last)) return true; } bool flag = readElement(s, first, last); if (flag) isSublist[first][last] = 1; else isSublist[first][last] = -1; return flag; } inline bool readElement(const char *s, int first, int last){ if (last - first == 1){ if (s[first] == '{' || s[first] == '}' || s[first] == ',') return true; else return false; } return readSet(s, first, last); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; for (int i = 1; i <= t; ++i){ cin >> s; int len = strlen(s); memset(isSublist, 0, sizeof(isSublist)); if (readSet(s, 0, len)) cout << \"Word #\" << i << \": Set\\n\"; else cout << \"Word #\" << i << \": No Set\\n\"; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1201/","text":"1201 SuperXOR \u9898\u76ee Description Pangzi recently realized that bitwise XOR operation is just an addition without carries. For example, when computing (1001)_2 XOR (1101)_2, you write down: 1001 + 1101 ------- 0100 You see, everything is like an addition, except that there are no carries. After realizing this, Pangzi invented Super XOR. It is just an addition on decimal numbers without carries. For example, 123 SUPERXOR 789 = 802, since 1+7=8, 2+8=0, 3+9=2. Now comes a question. Given N, find 1 SUPERXOR 2 SUPERXOR 3 SUPERXOR 4 SUPERXOR ... SUPERXOR N Input Format The first line contains an integer T (1 <= T <= 1000), indicating the number of test cases. T lines follow each containing 1 integers N (1 <= N <= 10^12). Output Format Output T lines, each line is an integer: the answer for the corresponding test case. Sample Input 5 1 2 3 4 120001 Sample Output 1 3 6 0 240001 Case Limits Time limit: 500 msec Memory limit: 64 MB VictriD's solution Star #include <iostream> using namespace std; int dremainder[] = {0, 1, 3, 6, 0, 5, 1, 8, 6, 5}; int main() { int total = 0; cin >> total; long long* ans = new long long[total]; long long* dig = new long long[total]; for (int i = 0; i < total; i++) { cin >> ans[i]; long long proc = ans[i]; short lowestdigitpo = (proc + 1) % 10; //lowest digit self's added + n x {123456789} time (mod===5) ans[i] = (dremainder[proc % 10] + (proc / 10 % 2) * 5) % 10; proc /= 10; //higher digits long long zeroph = 1; for (int j = 0; proc != 0; j++) { zeroph *= 10; int procdigit = proc % 10; proc /= 10; // 123 >4< 5: 4~{0,1,2,3,4,5} // lowest digit +1: really effected numbers. procdigit = procdigit * lowestdigitpo % 10; ans[i] += procdigit * zeroph; } dig[i] = zeroph / 10; } for (int i = 0; i < total; i++) { if (i) cout << endl; //! CYKA BLYAT padding zeros //errare // if (ans[i] == 0) { // cout << '0'; // continue; // } //errare 2 // while (ans[i] < dig[i]) { // cout << '0'; // dig[i] /= 10; // } cout << ans[i]; } return 0; }","title":"1201"},{"location":"nr/1201/#1201-superxor","text":"\u9898\u76ee","title":"1201 SuperXOR"},{"location":"nr/1201/#victrids-solution-star","text":"#include <iostream> using namespace std; int dremainder[] = {0, 1, 3, 6, 0, 5, 1, 8, 6, 5}; int main() { int total = 0; cin >> total; long long* ans = new long long[total]; long long* dig = new long long[total]; for (int i = 0; i < total; i++) { cin >> ans[i]; long long proc = ans[i]; short lowestdigitpo = (proc + 1) % 10; //lowest digit self's added + n x {123456789} time (mod===5) ans[i] = (dremainder[proc % 10] + (proc / 10 % 2) * 5) % 10; proc /= 10; //higher digits long long zeroph = 1; for (int j = 0; proc != 0; j++) { zeroph *= 10; int procdigit = proc % 10; proc /= 10; // 123 >4< 5: 4~{0,1,2,3,4,5} // lowest digit +1: really effected numbers. procdigit = procdigit * lowestdigitpo % 10; ans[i] += procdigit * zeroph; } dig[i] = zeroph / 10; } for (int i = 0; i < total; i++) { if (i) cout << endl; //! CYKA BLYAT padding zeros //errare // if (ans[i] == 0) { // cout << '0'; // continue; // } //errare 2 // while (ans[i] < dig[i]) { // cout << '0'; // dig[i] /= 10; // } cout << ans[i]; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1202/","text":"1202 bigint \u9898\u76ee Description \u672c\u9898\u505a\u4e00\u4e9b\u7b80\u5316\uff0c\u9898\u76ee\u8981\u6c42\u6539\u4e3a\u8f93\u5165\u4e24\u4e2a\u6b63\u6574\u6570\uff0c\u8f93\u51fa\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u5305\u62ec\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4fdd\u8bc1\u4f4d\u6570\u4e0d\u8d85\u8fc71000000\u3002 \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4fdd\u8bc1\u4f4d\u6570\u4e0d\u8d85\u8fc71000000\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u5305\u62ec\u4e00\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u6b63\u6574\u6570\u3002 Sample Input 10558 22 Sample Output 10580 Limits 1.\u8bf7\u4f7f\u7528\u94fe\u8868\u7b54\u9898\uff0c\u5426\u5219\u4ee3\u7801\u5206\u7ed90\u5206\u3002 2.\u8bf7\u5b58\u50a8\u4e0b\u6765\u4e24\u4e2a\u6b63\u6574\u6570\u7684\u548c\uff0c\u5426\u5219\u4ee3\u7801\u5206\u7ed90\u5206\u3002 VictriD's solution Star #include <iostream> using namespace std; struct uzel { uzel* niz; uzel* vys; char czs; uzel(char& cz, uzel* lf) : czs(cz), vys(lf->vys), niz(lf) { lf->vys = this; } uzel(char& cz, uzel* hf, int plc) : czs(cz), niz(hf->niz), vys(hf) { hf->niz = this; } uzel() { vys = nullptr; niz = nullptr; czs = '0'; } }; struct uzch { uzel* hf; uzel* lf; uzch() { hf = new uzel; lf = new uzel; hf->niz = lf; lf->vys = hf; } uzch* uchi(char cz) { new uzel(cz, lf); return this; } uzch* uchi(char cz, int plc) { new uzel(cz, hf, 1); return this; } }; int main() { uzch i1, i2, i3; char cz; while (scanf(\"%c\", &cz) && cz != '\\n') { i1.uchi(cz); } while (scanf(\"%c\", &cz) && cz != '\\n') { i2.uchi(cz); } uzel *ptrf1 = i1.lf->vys, *ptrf2 = i2.lf->vys; bool ppf = false; // ! | //! highest should not be ignored! \\ | / //! \\|/ while (ptrf1 != i1.hf || ptrf2 != i2.hf || ppf) { char ans = ptrf1->czs + ptrf2->czs + ppf - '0' - '0'; ppf = ans / 10; i3.uchi('0' + ans % 10, 1); if (ptrf1 != i1.hf) ptrf1 = ptrf1->vys; if (ptrf2 != i2.hf) ptrf2 = ptrf2->vys; } bool stf = false; for (uzel* hff = i3.hf->niz; hff != i3.lf; hff = hff->niz) { if (hff->czs != '0' || stf || hff->niz == i3.lf) { cout << hff->czs; stf = true; } } return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 1000000; class LongLongInt { friend istream &operator>>(istream &is, LongLongInt &num) { char str[MAXNUM]; is >> str; for (int i = 0; i <= strlen(str) - 1; ++i) num.push_back(str[i] - '0'); return is; } friend ostream &operator<<(ostream &os, const LongLongInt &num) { node *p = num.head->next; while (p != num.tail) { os << p->data; p = p->next; } return os; } friend LongLongInt operator+(const LongLongInt &num_1, const LongLongInt &num_2) { node *p = num_1.tail->prev, *q = num_2.tail->prev; int carry = 0, add_1, add_2, result; LongLongInt num_3; while (p != num_1.head || q != num_2.head) { if (p != num_1.head) { add_1 = p->data; p = p->prev; } else add_1 = 0; if (q != num_2.head) { add_2 = q->data; q = q->prev; } else add_2 = 0; result = add_1 + add_2 + carry; num_3.push_front(result % 10); carry = result / 10; } if (carry) num_3.push_front(1); return num_3; } public: LongLongInt() { head = new node; head->next = tail = new node; tail->prev = head; } void push_front(const int &x) { node *tmp = new node(x, head, head->next); head->next = tmp; tmp->next->prev = tmp; } void push_back(const int &x) { node *tmp = new node(x, tail->prev, tail); tmp->prev->next = tmp; tail->prev = tmp; } private: struct node { int data; node *prev, *next; node(const int &x, node *p, node *n) : data(x), prev(p), next(n) {} node() {} ~node() {} }; node *head, *tail; }; int main() { LongLongInt num_1, num_2; cin >> num_1 >> num_2; LongLongInt num_3 = num_1 + num_2; cout << num_3; return 0; }","title":"1202"},{"location":"nr/1202/#1202-bigint","text":"\u9898\u76ee","title":"1202 bigint"},{"location":"nr/1202/#victrids-solution-star","text":"#include <iostream> using namespace std; struct uzel { uzel* niz; uzel* vys; char czs; uzel(char& cz, uzel* lf) : czs(cz), vys(lf->vys), niz(lf) { lf->vys = this; } uzel(char& cz, uzel* hf, int plc) : czs(cz), niz(hf->niz), vys(hf) { hf->niz = this; } uzel() { vys = nullptr; niz = nullptr; czs = '0'; } }; struct uzch { uzel* hf; uzel* lf; uzch() { hf = new uzel; lf = new uzel; hf->niz = lf; lf->vys = hf; } uzch* uchi(char cz) { new uzel(cz, lf); return this; } uzch* uchi(char cz, int plc) { new uzel(cz, hf, 1); return this; } }; int main() { uzch i1, i2, i3; char cz; while (scanf(\"%c\", &cz) && cz != '\\n') { i1.uchi(cz); } while (scanf(\"%c\", &cz) && cz != '\\n') { i2.uchi(cz); } uzel *ptrf1 = i1.lf->vys, *ptrf2 = i2.lf->vys; bool ppf = false; // ! | //! highest should not be ignored! \\ | / //! \\|/ while (ptrf1 != i1.hf || ptrf2 != i2.hf || ppf) { char ans = ptrf1->czs + ptrf2->czs + ppf - '0' - '0'; ppf = ans / 10; i3.uchi('0' + ans % 10, 1); if (ptrf1 != i1.hf) ptrf1 = ptrf1->vys; if (ptrf2 != i2.hf) ptrf2 = ptrf2->vys; } bool stf = false; for (uzel* hff = i3.hf->niz; hff != i3.lf; hff = hff->niz) { if (hff->czs != '0' || stf || hff->niz == i3.lf) { cout << hff->czs; stf = true; } } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1202/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 1000000; class LongLongInt { friend istream &operator>>(istream &is, LongLongInt &num) { char str[MAXNUM]; is >> str; for (int i = 0; i <= strlen(str) - 1; ++i) num.push_back(str[i] - '0'); return is; } friend ostream &operator<<(ostream &os, const LongLongInt &num) { node *p = num.head->next; while (p != num.tail) { os << p->data; p = p->next; } return os; } friend LongLongInt operator+(const LongLongInt &num_1, const LongLongInt &num_2) { node *p = num_1.tail->prev, *q = num_2.tail->prev; int carry = 0, add_1, add_2, result; LongLongInt num_3; while (p != num_1.head || q != num_2.head) { if (p != num_1.head) { add_1 = p->data; p = p->prev; } else add_1 = 0; if (q != num_2.head) { add_2 = q->data; q = q->prev; } else add_2 = 0; result = add_1 + add_2 + carry; num_3.push_front(result % 10); carry = result / 10; } if (carry) num_3.push_front(1); return num_3; } public: LongLongInt() { head = new node; head->next = tail = new node; tail->prev = head; } void push_front(const int &x) { node *tmp = new node(x, head, head->next); head->next = tmp; tmp->next->prev = tmp; } void push_back(const int &x) { node *tmp = new node(x, tail->prev, tail); tmp->prev->next = tmp; tail->prev = tmp; } private: struct node { int data; node *prev, *next; node(const int &x, node *p, node *n) : data(x), prev(p), next(n) {} node() {} ~node() {} }; node *head, *tail; }; int main() { LongLongInt num_1, num_2; cin >> num_1 >> num_2; LongLongInt num_3 = num_1 + num_2; cout << num_3; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1203/","text":"1203 link \u9898\u76ee Description \u5c06\u4e24\u4e2a\u7ebf\u6027\u8868\u5408\u5e76\u6210\u4e3a\u4e00\u4e2a\u7ebf\u6027\u8868\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u5305\u62ec\u56db\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u62ec\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\uff1aint\u3001char\u3001double\uff0c\u4ee3\u8868\u7ebf\u6027\u8868\u7684\u7c7b\u578b\u3002 \u7b2c\u4e8c\u884c\u5305\u62ec\u4e24\u4e2a\u6b63\u6574\u6570n,m. (1<=n,m<=10000) \u7b2c\u4e09\u884c\u5305\u62ecn\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6570\u636e\uff0c\u5185\u5bb9\u53ef\u80fd\u662f\u6574\u5f62\uff0c\u6d6e\u70b9\u6216\u8005\u5b57\u7b26\uff0c\u7531\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\u51b3\u5b9a\uff0c\u4ee3\u8868\u7b2c\u4e00\u4e2a\u7ebf\u6027\u8868\u7684\u5143\u7d20\u3002 \u7b2c\u56db\u884c\u5305\u62ecm\u4e2a\u7528\u7a7a\u683c\u5206\u5f00\u7684\u6570\u636e\uff0c\u5185\u5bb9\u53ef\u80fd\u662f\u6574\u5f62\uff0c\u6d6e\u70b9\u6216\u8005\u5b57\u7b26\uff0c\u7531\u7b2c\u4e00\u884c\u7684\u5185\u5bb9\u51b3\u5b9a\uff0c\u4ee3\u8868\u7b2c\u4e8c\u4e2a\u7ebf\u6027\u8868\u7684\u5143\u7d20\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u5305\u62ec\u4e00\u884c\u5185\u5bb9\uff0c\u5176\u4e2d\u6bcf\u4e2a\u6570\u636e\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u4ee3\u8868\u5408\u5e76\u540e\u7ebf\u6027\u8868\u7684\u5143\u7d20\u3002 Sample Input int 3 3 1 4 6 29 75 1 Sample Output 1 4 6 29 75 1 Limits 1.\u4fdd\u8bc1\u6bcf\u4e2a\u6570\u636e\u5206\u522b\u4e0d\u8d85\u8fc7int,char,double\u7684\u8303\u56f4\u3002 2.\u8bf7\u7528\u4e00\u4e2a\u8fc7\u7a0b\u6216\u91cd\u8f7d\u201c+\u201d\u5c06\u4e24\u4e2a\u7ebf\u6027\u8868\u5408\u6210\u4e3a\u4e00\u4e2a\u65b0\u7684\u7ebf\u6027\u8868\uff0c\u5426\u5219\u4ee3\u7801\u5206\u7ed90\u5206\u3002\uff08\u4f7f\u7528\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u6709\u989d\u5916\u52a0\u5206\uff09 VictriD's solution Star #include <iostream> using namespace std; template <typename T> struct uzel { uzel<T>* next; uzel<T>* last; T value; uzel(T& nos) { last = nullptr; next = nullptr; value = nos; } uzel() { last = nullptr; next = nullptr; } }; template <typename T> class linlist { template <typename Ty> friend linlist<Ty> operator+(linlist<Ty>& lin1, linlist<Ty>& lin2); template <typename Ty> friend ostream& operator<<(ostream& os, const linlist<Ty>& l); private: uzel<T>* start; uzel<T>* end; public: linlist<T>* operator+=(T var) { uzel<T>* temp = new uzel<T>(var); end->last->next = temp; end->last = temp; temp->next = end; return this; } linlist() { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; } linlist(linlist<T>& l) { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; for (uzel<T>* ptr = l.start->next; ptr != l.end; ptr = ptr->next) { *this += ptr->value; } } }; template <typename T> ostream& operator<<(ostream& os, const linlist<T>& l) { uzel<T>* ptr = l.start->next; while (ptr != l.end) { if (ptr != l.start->next) os << ' '; os << ptr->value; ptr = ptr->next; } return os; } template <typename T> linlist<T> operator+(linlist<T>& lin1, linlist<T>& lin2) { linlist<T> ans(lin1); for (uzel<T>* ptr = lin2.start->next; ptr != lin2.end; ptr = ptr->next) ans += ptr->value; return ans; } template <typename T> void process() { int n, m; cin >> n >> m; T proc; linlist<T> lin1, lin2; for (int i = 0; i < n; i++) { cin >> proc; lin1 += proc; } for (int i = 0; i < m; i++) { cin >> proc; lin2 += proc; } cout << (lin1 + lin2); } int main() { char type[7]; cin >> type; switch (type[0]) { case 'd': process<double>(); break; case 'c': process<char>(); break; case 'i': process<int>(); } return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 10010; template <class elemType> class seqList { friend seqList<elemType> operator+(const seqList<elemType> &list_1, const seqList<elemType> list_2) { seqList<elemType> list_3; for (int i = 0; i < list_1.length(); ++i) list_3.insert(list_3.length(), list_1.visit(i)); for (int i = 0; i < list_2.length(); ++i) list_3.insert(list_3.length(), list_2.visit(i)); return list_3; } public: seqList(); int length() const; void insert(int i, const elemType &x); void get_input(int n); elemType visit(int i) const; void traverse() const; ~seqList(); private: elemType data[MAXNUM]; int currentLength; }; template <class elemType> seqList<elemType>::seqList() { currentLength = 0; } template <class elemType> int seqList<elemType>::length() const { return currentLength; } template <class elemType> void seqList<elemType>::insert(int i, const elemType &x) { for (int j = currentLength; j > i; --j) data[j] = data[j - 1]; data[i] = x; ++currentLength; } template <class elemType> void seqList<elemType>::get_input(int n) { elemType x; for (int i = 0; i < n; ++i) { cin >> x; insert(currentLength, x); } } template <class elemType> elemType seqList<elemType>::visit(int i) const { return data[i]; } template <class elemType> void seqList<elemType>::traverse() const { for (int i = 0; i < currentLength; ++i) cout << data[i] << ' '; cout << endl; } template <class elemType> seqList<elemType>::~seqList(){} int main() { string type; int n1, n2; cin >> type >> n1 >> n2; if (!strcmp(type.c_str(), \"int\")) { seqList<int> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<int> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"char\")) { seqList<char> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<char> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"double\")) { seqList<double> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<double> list_3 = list_1 + list_2; list_3.traverse(); } return 0; }","title":"1203"},{"location":"nr/1203/#1203-link","text":"\u9898\u76ee","title":"1203 link"},{"location":"nr/1203/#victrids-solution-star","text":"#include <iostream> using namespace std; template <typename T> struct uzel { uzel<T>* next; uzel<T>* last; T value; uzel(T& nos) { last = nullptr; next = nullptr; value = nos; } uzel() { last = nullptr; next = nullptr; } }; template <typename T> class linlist { template <typename Ty> friend linlist<Ty> operator+(linlist<Ty>& lin1, linlist<Ty>& lin2); template <typename Ty> friend ostream& operator<<(ostream& os, const linlist<Ty>& l); private: uzel<T>* start; uzel<T>* end; public: linlist<T>* operator+=(T var) { uzel<T>* temp = new uzel<T>(var); end->last->next = temp; end->last = temp; temp->next = end; return this; } linlist() { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; } linlist(linlist<T>& l) { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; for (uzel<T>* ptr = l.start->next; ptr != l.end; ptr = ptr->next) { *this += ptr->value; } } }; template <typename T> ostream& operator<<(ostream& os, const linlist<T>& l) { uzel<T>* ptr = l.start->next; while (ptr != l.end) { if (ptr != l.start->next) os << ' '; os << ptr->value; ptr = ptr->next; } return os; } template <typename T> linlist<T> operator+(linlist<T>& lin1, linlist<T>& lin2) { linlist<T> ans(lin1); for (uzel<T>* ptr = lin2.start->next; ptr != lin2.end; ptr = ptr->next) ans += ptr->value; return ans; } template <typename T> void process() { int n, m; cin >> n >> m; T proc; linlist<T> lin1, lin2; for (int i = 0; i < n; i++) { cin >> proc; lin1 += proc; } for (int i = 0; i < m; i++) { cin >> proc; lin2 += proc; } cout << (lin1 + lin2); } int main() { char type[7]; cin >> type; switch (type[0]) { case 'd': process<double>(); break; case 'c': process<char>(); break; case 'i': process<int>(); } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1203/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 10010; template <class elemType> class seqList { friend seqList<elemType> operator+(const seqList<elemType> &list_1, const seqList<elemType> list_2) { seqList<elemType> list_3; for (int i = 0; i < list_1.length(); ++i) list_3.insert(list_3.length(), list_1.visit(i)); for (int i = 0; i < list_2.length(); ++i) list_3.insert(list_3.length(), list_2.visit(i)); return list_3; } public: seqList(); int length() const; void insert(int i, const elemType &x); void get_input(int n); elemType visit(int i) const; void traverse() const; ~seqList(); private: elemType data[MAXNUM]; int currentLength; }; template <class elemType> seqList<elemType>::seqList() { currentLength = 0; } template <class elemType> int seqList<elemType>::length() const { return currentLength; } template <class elemType> void seqList<elemType>::insert(int i, const elemType &x) { for (int j = currentLength; j > i; --j) data[j] = data[j - 1]; data[i] = x; ++currentLength; } template <class elemType> void seqList<elemType>::get_input(int n) { elemType x; for (int i = 0; i < n; ++i) { cin >> x; insert(currentLength, x); } } template <class elemType> elemType seqList<elemType>::visit(int i) const { return data[i]; } template <class elemType> void seqList<elemType>::traverse() const { for (int i = 0; i < currentLength; ++i) cout << data[i] << ' '; cout << endl; } template <class elemType> seqList<elemType>::~seqList(){} int main() { string type; int n1, n2; cin >> type >> n1 >> n2; if (!strcmp(type.c_str(), \"int\")) { seqList<int> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<int> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"char\")) { seqList<char> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<char> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"double\")) { seqList<double> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<double> list_3 = list_1 + list_2; list_3.traverse(); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1204/","text":"1204 edit \u9898\u76ee Description \u9898\u76ee\u5177\u4f53\u63cf\u8ff0\u5982\u4e0b\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u4e00\u5f00\u59cb\u5305\u542b\u82e5\u5e72\u884c\uff0c\u7528\u4e8e\u8868\u793a\u6587\u672c\u5185\u5bb9\u3002\u6700\u540e\u4e00\u884c\u4ee5\u5355\u72ec\u7684\u201c******\u201d\u7ed3\u675f\u3002 \u63a5\u4e0b\u6765\u5305\u62ec\u82e5\u5e72\u6761\u5b50\u547d\u4ee4, \u5982\u4e0b\uff1a list\uff1alist n1 n2\uff0c\u4ec5\u6b64\u683c\u5f0f\u5408\u6cd5\uff0c\u4e00\u4e2a\u5408\u6cd5\u7684list\u6307\u4ee4\u8868\u793a\u8f93\u51fan1\u5230n2\u8fd9n2-n1+1\u884c\u3002 ins\uff1ains i j str\uff0c\u4ec5\u6b64\u683c\u5f0f\u5408\u6cd5\uff0c\u8868\u793a\u4ecei\u884c\u7b2cj\u4e2a\u4f4d\u7f6e\u8d77\u63d2\u5165str\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u6837\u4f8b\uff0c\u6bcf\u6b21\u52a0\u5165\u5b57\u7b26\u4e32\u957f\u5ea6\u5c0f\u4e8e100,\u6ce8\u610f\u53ef\u4ee5\u52a0\u5728\u884c\u672b\uff0c\u6b64\u65f6j\u4e3a\u884c\u7684\u957f\u5ea6\u52a01\u3002 del\uff1adel i j num\uff0c\u4ec5\u6b64\u683c\u5f0f\u5408\u6cd5\uff0c\u8868\u793a\u4ecei\u884c\u7b2cj\u4e2a\u4f4d\u7f6e\u8d77\u5220\u9664num\u4e2a\u5b57\u7b26\uff0c\u6570\u636e\u4fdd\u8bc1\u4e0d\u4f1a\u5220\u9664\u6574\u884c\u3002 quit\uff1aquit\uff0c\u9000\u51fa\u7a0b\u5e8f\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32\u8f93\u51fa\u3002 \u6bcf\u884c\u5305\u542b\u4e00\u6761\u5b50\u547d\u4ee4\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u6761\u5b50\u547d\u4ee4\uff0c\u82e5\u5176\u4e0d\u5408\u6cd5\uff0c\u5219\u8f93\u5165\"Error!\"\u5e76\u6362\u884c(\u4e0d\u542b\"\")\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u5408\u6cd5\u7684list\u6307\u4ee4\uff0c\u8f93\u51fan2-n1+1\u884c\u5b57\u7b26\u4e32\u3002 \u5bf9\u4e8equit\u6307\u4ee4\uff0c\u8f93\u51fa\u5168\u90e8\u4fee\u6539\u540e\u7684\u5b57\u7b26\u4e32\u3002 Sample Input Hello everyone. I hope you can have a good time during our Data Structure Class. Enjoy typing . ****** list 1 1 ins 1 154 s \u89e3\u91ca\uff1ait's too large for the 1st row.(\u8fd9\u4e0d\u662f\u8f93\u5165\u6587\u4ef6\u7684\u5185\u5bb9\uff01) ins 4 1 s \u89e3\u91ca\uff1ait's too large for the line.(\u8fd9\u4e0d\u662f\u8f93\u5165\u6587\u4ef6\u7684\u5185\u5bb9\uff01) ins 2 73 9 \u89e3\u91ca\uff1aalso it's invalid.(\u8fd9\u4e0d\u662f\u8f93\u5165\u6587\u4ef6\u7684\u5185\u5bb9\uff01) del -1 1 2 ins 3 14 by yourself list 2 3 quit Sample Output Hello everyone. Error! Error! Error! Error! I hope you can have a good time during our Data Structure Class. Enjoy typing by yourself. Hello everyone. I hope you can have a good time during our Data Structure Class. Enjoy typing by yourself. Limits 1.quit\u4fdd\u8bc1\u5728\u4e14\u53ea\u5728\u6700\u540e\u4e00\u884c\u51fa\u73b0\u3002 2.\u8f93\u5165\u683c\u5f0f\u4fdd\u8bc1\u5408\u6cd5(\u6ce8\u610f\uff0c\u5185\u5bb9\u53ef\u80fd\u4e0d\u5408\u6cd5)\u3002 3.\u5bf9\u4e8e\u4e00\u6761\u4e0d\u5408\u6cd5\u7684\u5b50\u547d\u4ee4\uff0c\u4e0d\u8fdb\u884c\u4efb\u4f55\u6587\u4ef6\u7f16\u8f91\u64cd\u4f5c\u3002 4.\u4fdd\u8bc1\u6587\u672c\u4e0d\u8d85\u8fc7100\u884c\uff0c\u6bcf\u884c\u5185\u5bb9\u59cb\u7ec8\u4e0d\u8d85\u8fc72000\u4e2a\u5b57\u7b26\u3002 5.\u4fdd\u8bc1\u5bf9\u4e8e\u6bcf\u6b21del\u64cd\u4f5c\uff0c\u4e0d\u4f1a\u5220\u9664\u6574\u884c\u5b57\u7b26\u3002 6.\u5bf9\u4e8eins\u7684\u5217\u53f7i\uff0c\u8868\u793a\u5728\u7b2ci\u4e2a\u5b57\u7b26\u4e4b\u524d\u63d2\u5165\u6570\u503c\u3002 7.\u5bf9\u4e8edel\u7684\u5217\u53f7i\uff0c\u8868\u793a\u4ece\u7b2ci\u4e2a\u5b57\u7b26\u5f00\u59cb\u5220\u9664\u3002 *8.\u4e0d\u5408\u6cd5\u5185\u5bb9\u5305\u62ec\uff1a 1)\u884c\u53f7or\u5217\u53f7\u7684\u7d22\u5f15\u8d85\u51fa\u8303\u56f4\u3002 2) \u5220\u9664\u5b57\u7b26\u8d85\u8fc7\u8be5\u884c\u5269\u4f59\u5b57\u7b26\u3002 9.\u7ea6\u5b9a\u5404\u64cd\u4f5c\u4e4b\u95f4(\u6bd4\u5982ins int int string)\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00 \u6570\u636e\u4fdd\u8bc1\u6ca1\u6709\u591a\u4e8e\u7a7a\u683c\u3002 10.\u63a8\u8350\u5c06list\uff0cins\uff0cdel\u64cd\u4f5c\u5206\u522b\u7528\u4e00\u4e2a\u8fc7\u7a0b\u6765\u5904\u7406(\u5c06\u4ee3\u7801\u5206\u4f5c\u4e00\u4e2a\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u6781\u5927\u63d0\u9ad8\u903b\u8f91\u6027\u548c\u53ef\u8bfb\u6027\uff0c\u8bf7\u5404\u4f4d\u52a1\u5fc5\u517b\u6210\u6b64\u4e60\u60ef)\u3002 vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; void list(char order[]) { int n1 = 0, n2 = 0, i = 0; while (order[i] != ' ') ++i; ++i; while (order[i] != ' ') { n1 *= 10; n1 += order[i] - '0'; ++i; } ++i; while (order[i] != '\\0') { n2 *= 10; n2 += order[i] - '0'; ++i; } if (n1 < 1 || n2 > lines || n1 > n2) { cout << \"Error!\" << endl; return; } else { for (int j = n1; j <= n2; ++j) cout << text[j] << endl; return; } } void ins(char order[]) { int i = 0, j = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') str[strlen(str)] = order[k++]; if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) + 1) { cout << \"Error!\" << endl; return; } int length = strlen(str); for (int m = strlen(text[i]) - 1; m >= j - 1; --m) { text[i][m + length] = text[i][m]; } for (int m = j - 1; m < j - 1 + length; ++m) { text[i][m] = str[m - j + 1]; } } void del(char order[]) { int i = 0, j = 0, num = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') { num *= 10; num += order[k] - '0'; ++k; } if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) || num < 0 || num > strlen(text[i]) - j + 1) { cout << \"Error!\" << endl; return; } int m, length = strlen(text[i]); for (m = j - 1; m < j - 1 + num; ++m) { text[i][m] = '\\0'; } for (; m < length; ++m) { text[i][m - num] = text[i][m]; } for (; m < length + num; ++m) { text[i][m - num] = '\\0'; } } int main() { cin.getline(text[lines], 2005, '\\n'); while (strcmp(text[lines], \"******\")) cin.getline(text[++lines], 2005, '\\n'); --lines; char order[105][155]; int orders = 1; cin.getline(order[orders], 155, '\\n'); while (strcmp(order[orders], \"quit\")) cin.getline(order[++orders], 155, '\\n'); --orders; for (int i = 1; i <= orders; ++i) { switch (order[i][0]) { case 'l': list(order[i]); break; case 'i': ins(order[i]); break; case 'd': del(order[i]); break; } } for (int i = 1; i <= lines; ++i) cout << text[i] << endl; return 0; }","title":"1204"},{"location":"nr/1204/#1204-edit","text":"\u9898\u76ee","title":"1204 edit"},{"location":"nr/1204/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; void list(char order[]) { int n1 = 0, n2 = 0, i = 0; while (order[i] != ' ') ++i; ++i; while (order[i] != ' ') { n1 *= 10; n1 += order[i] - '0'; ++i; } ++i; while (order[i] != '\\0') { n2 *= 10; n2 += order[i] - '0'; ++i; } if (n1 < 1 || n2 > lines || n1 > n2) { cout << \"Error!\" << endl; return; } else { for (int j = n1; j <= n2; ++j) cout << text[j] << endl; return; } } void ins(char order[]) { int i = 0, j = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') str[strlen(str)] = order[k++]; if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) + 1) { cout << \"Error!\" << endl; return; } int length = strlen(str); for (int m = strlen(text[i]) - 1; m >= j - 1; --m) { text[i][m + length] = text[i][m]; } for (int m = j - 1; m < j - 1 + length; ++m) { text[i][m] = str[m - j + 1]; } } void del(char order[]) { int i = 0, j = 0, num = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') { num *= 10; num += order[k] - '0'; ++k; } if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) || num < 0 || num > strlen(text[i]) - j + 1) { cout << \"Error!\" << endl; return; } int m, length = strlen(text[i]); for (m = j - 1; m < j - 1 + num; ++m) { text[i][m] = '\\0'; } for (; m < length; ++m) { text[i][m - num] = text[i][m]; } for (; m < length + num; ++m) { text[i][m - num] = '\\0'; } } int main() { cin.getline(text[lines], 2005, '\\n'); while (strcmp(text[lines], \"******\")) cin.getline(text[++lines], 2005, '\\n'); --lines; char order[105][155]; int orders = 1; cin.getline(order[orders], 155, '\\n'); while (strcmp(order[orders], \"quit\")) cin.getline(order[++orders], 155, '\\n'); --orders; for (int i = 1; i <= orders; ++i) { switch (order[i][0]) { case 'l': list(order[i]); break; case 'i': ins(order[i]); break; case 'd': del(order[i]); break; } } for (int i = 1; i <= lines; ++i) cout << text[i] << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1208/","text":"1208 \u5927\u5723\u5207\u86cb\u7cd5 \u9898\u76ee Description \u5b59\u5927\u5723\u5728\u5927\u4e00\u6691\u671f\u7684\u7b97\u6cd5\u535a\u5f08\u8bba\u8bfe\u7a0b\u4e2d\u6df1\u5165\u7814\u7a76\u4e86\u5982\u4f55\u5207\u86cb\u7cd5\u7684\u95ee\u9898\uff0c\u73b0\u5728\u4ed6\u60f3\u8981\u5b9e\u8df5\u4e00\u4e0b\u3002 \u5b59\u5927\u5723\u6709\u5f88\u591a\u4e0d\u540c\u5927\u5c0f\u7684\u5706\u67f1\u5f62\u86cb\u7cd5\uff0c\u60f3\u8981\u6bcf\u4e2a\u90fd\u5207\u4e00\u5200\uff0c\u53d6\u5c0f\u7684\u90a3\u4e00\u5757\u770b\u4e00\u4e0b\u5927\u5c0f\u3002\u53ef\u662f\u4ed6\u9ad8\u4e2d\u6570\u5b66\u5b66\u5f97\u8fc7\u597d\u4ee5\u81f3\u4e8e\u4e0d\u4f1a\u7b97\u6570\u4e86\uff0c\u4e0d\u77e5\u9053\u600e\u4e48\u8ba1\u7b97\u5207\u51fa\u7684\u86cb\u7cd5\u6709\u591a\u5927\uff0c\u56e0\u6b64\u60f3\u8bf7\u4f60\u5e2e\u4ed6\u8ba1\u7b97\u4e00\u4e0b\u5207\u51fa\u7684\u8f83\u5c0f\u5757\u86cb\u7cd5\u4e0a\u8868\u9762\u9762\u79ef\u662f\u591a\u5c11\u3002 \u6ce8\u610f\u6240\u6709\u86cb\u7cd5\u90fd\u662f\u6241\u5706\u67f1\uff0c\u4e0a\u8868\u9762\u662f\u5706\u5f62\uff0c\u9ad8\u90fd\u4e00\u6837 \u3002\u7531\u4e8e\u4ed6\u4e0d\u662f\u4e00\u4e2a\u90a3\u4e48\u8f83\u771f\u7684\u4eba\uff0c\u6240\u4ee5\u4f60\u7684\u8ba1\u7b97\u7ed3\u679c\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u5c31\u597d\u3002 Input Format \u6bcf\u884c2\u4e2a\u6570r\u548ca\uff0c\u5206\u522b\u8868\u793a\u539f\u86cb\u7cd5\u4e0a\u8868\u9762\u534a\u5f84\u548c\u5b59\u5927\u5723\u5200\u5370\u6240\u5728\u76f4\u7ebf\u5230\u5706\u5fc3\u7684\u8ddd\u79bb\u3002 Output Format \u6240\u6709\u88ab\u5207\u4e0b\u7684\u8f83\u5c0f\u5757\u7684\u86cb\u7cd5\u4e2d\u6700\u5927\u90a3\u4e00\u5757\u7684\u4e0a\u8868\u9762\u9762\u79ef\uff08\u56db\u820d\u4e94\u5165\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff09\u3002 Sample Input 1 10 5 Sample Output 1 61.42 Sample Input 2 10 5 20 8 Sample Output 2 317.07 Hint: \u4e0d\u5b9a\u7684\u591a\u7ec4\u6570\u636e\u8f93\u5165\u8bf7\u53c2\u8003\u4ee5\u4e0b\u8bed\u53e5:while (cin >> a >> b) {cout << a + b << endl;} Limits \u6240\u6709\u8fd0\u7b97\u5747\u5728double\u8303\u56f4\u5185\u3002 FineArtz's solution Star /* \u5927\u5723\u5207\u86cb\u7cd5 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const double pi = 3.1415926; int main(){ double r, a, ans = 0.0; while (cin >> r >> a){ double tans = acos(a/r) * r * r; tans -= a * sqrt(r * r - a * a); if (ans < tans) ans = tans; } cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"1208"},{"location":"nr/1208/#1208","text":"\u9898\u76ee","title":"1208 \u5927\u5723\u5207\u86cb\u7cd5"},{"location":"nr/1208/#fineartzs-solution-star","text":"/* \u5927\u5723\u5207\u86cb\u7cd5 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const double pi = 3.1415926; int main(){ double r, a, ans = 0.0; while (cin >> r >> a){ double tans = acos(a/r) * r * r; tans -= a * sqrt(r * r - a * a); if (ans < tans) ans = tans; } cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1209/","text":"1209 \u6570\u6570 \u9898\u76ee Description Little Jealous Joker\u662f\u4e2a\u6bd4\u8f83\u201c2\u201d\u7684\u4eba,\u7279\u522b\u559c\u6b222\u8fdb\u5236\u3002\u6709\u4e00\u5929\uff0cLittle Jealous\u4ece\u4e66\u4e2d\u7ffb\u51fa\u6765N\u4e2a\u6570a(1),a(2),...,a(n)\uff0c\u4ed6\u5e0c\u671b\u628a\u8fd9\u4e9b\u6570\u5168\u90e8\u8f6c\u5316\u4e3a2\u8fdb\u5236\uff0c\u6570\u4e00\u6570\u91cc\u9762\u4e00\u5171\u6709\u591a\u5c11\u4e2a1\u3002\u7531\u4e8eLittle Jealous Joker\u5df2\u7ecf\u201c2\u201d\u5230\u4e0d\u4f1a\u6570\u6570\u4e86\uff0c\u8bf7\u4f60\u5e2e\u5e2e\u4ed6\u5427\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570N \u7b2c\u4e8c\u884cN\u4e2a\u6570a(1), a(2), ..., a(n)\uff0c\u4ee5\u7a7a\u683c\u9694\u5f00 Output Format \u4e00\u4e2a\u6570\uff0c1\u7684\u603b\u4e2a\u6570 Sample Input 3 3 4 5 Sample Output 5 Limits n<=100,000 a(i)\u4e0d\u8d85\u8fc732\u4f4d\u5e26\u7b26\u53f7\u6574\u6570(int)\u7684\u8303\u56f4 VictriD's solution Star #include <iostream> using namespace std; int main() { int N; cin >> N; int num; int cnt = 0; for (int i = 0; i < N; i++) { cin >> num; while (num != 0) { if (num & 1) cnt++; num = num >> 1; } } cout << cnt; return 0; } FineArtz's solution Star /* \u6570\u6570 */ #include <iostream> using namespace std; int main(){ int n, ans = 0; cin >> n; for (int i = 1; i <= n; ++i){ int a = 0; cin >> a; while (a > 0){ if (a % 2) ++ans; a /= 2; } } cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int find_one(int x) { int sum = 0; while (x > 0) { sum += x % 2; x /= 2; } return sum; } int main() { int n, x, sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> x; sum += find_one(x); } cout << sum; return 0; }","title":"1209"},{"location":"nr/1209/#1209","text":"\u9898\u76ee","title":"1209 \u6570\u6570"},{"location":"nr/1209/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int N; cin >> N; int num; int cnt = 0; for (int i = 0; i < N; i++) { cin >> num; while (num != 0) { if (num & 1) cnt++; num = num >> 1; } } cout << cnt; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1209/#fineartzs-solution-star","text":"/* \u6570\u6570 */ #include <iostream> using namespace std; int main(){ int n, ans = 0; cin >> n; for (int i = 1; i <= n; ++i){ int a = 0; cin >> a; while (a > 0){ if (a % 2) ++ans; a /= 2; } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1209/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int find_one(int x) { int sum = 0; while (x > 0) { sum += x % 2; x /= 2; } return sum; } int main() { int n, x, sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> x; sum += find_one(x); } cout << sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1211/","text":"1211 isCBT \u9898\u76ee Description \u7ed9\u51fa\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u7ed3\u6784,\u5224\u65ad\u8fd9\u68f5\u4e8c\u53c9\u6811\u662f\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\u5fc5\u987b\u4f7f\u7528\u4e8c\u53c9\u6811\u7c7b\u5b9e\u73b0\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u4e00\u5171\u5305\u542bN+1\u884c\u3002 \u7b2c\u4e00\u884c\u542b\u6709\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u4ee3\u8868\u6811\u4e2d\u7ed3\u70b9\u603b\u6570\u3002 \u7b2c\u4e8c\u884c\u5230\u7b2cN+1\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e8c\u4e2a\u6574\u6570\u3002\u5176\u4e2d\u7b2ci\u884c\u7684\u4e8c\u4e2a\u6574\u6570Pi\uff0cQi\uff0c\u4ee3\u8868\u7ed3\u70b9i\u7684\u5de6\u5b69\u5b50\u4e3aPi\uff0c\u53f3\u5b69\u5b50\u4e3aQi\u3002\u82e5Pi=0\uff0c\u5219\u8868\u660e\u7ed3\u70b9i\u6ca1\u6709\u5de6\u5b69\u5b50\u3002\u540c\u6837\u7684\uff0c\u82e5Qi=0\uff0c\u5219\u8868\u660e\u7ed3\u70b9i\u6ca1\u6709\u53f3\u5b69\u5b50\u3002(\u7b2ci\u884c\u6307\u7684\u662f\u8fd9N\u884c\u4e2d\u7684\u7b2ci\u884c) Output Format \u5982\u679c\u7ed9\u51fa\u7684\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5219\u8f93\u51fa'Y',\u5426\u5219\u8f93\u51fa'N'\u3002(\u5747\u4e0d\u5305\u542b\u5f15\u53f7) Sample Input1 4 0 0 0 0 1 0 3 2 Sample Output1 Y Sample Input2 4 0 0 0 0 0 1 3 2 Sample Output2 N Limit \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u6ee1\u8db31<=N<=100000 \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u6ee1\u8db30<=Pi,Qi<=N \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u4fdd\u8bc1\u7ed9\u51fa\u7684\u662f\u4e00\u68f5\u4e8c\u53c9\u6811 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int ls[200000],rs[200000],t[200000],n,d=-1,root; bool ans=true,sec=true; void dfs(int i,int depth) { if (ls[i]) dfs(ls[i],depth+1); if ((!ls[i])||(!rs[i])) { if (d == -1) d = depth; else { if ((depth == d - 1) && sec) { d = depth; sec = false; } if (d != depth) ans = false; } } if (rs[i]) dfs(rs[i],depth+1); } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&ls[i],&rs[i]); t[ls[i]]++; t[rs[i]]++; } for (int i=1;i<=n;++i) if (!t[i]) { root=i; break; } dfs(root,1); if (ans) printf(\"Y\"); else printf(\"N\"); return 0; }","title":"1211"},{"location":"nr/1211/#1211-iscbt","text":"\u9898\u76ee","title":"1211 isCBT"},{"location":"nr/1211/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int ls[200000],rs[200000],t[200000],n,d=-1,root; bool ans=true,sec=true; void dfs(int i,int depth) { if (ls[i]) dfs(ls[i],depth+1); if ((!ls[i])||(!rs[i])) { if (d == -1) d = depth; else { if ((depth == d - 1) && sec) { d = depth; sec = false; } if (d != depth) ans = false; } } if (rs[i]) dfs(rs[i],depth+1); } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&ls[i],&rs[i]); t[ls[i]]++; t[rs[i]]++; } for (int i=1;i<=n;++i) if (!t[i]) { root=i; break; } dfs(root,1); if (ans) printf(\"Y\"); else printf(\"N\"); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1214/","text":"1214 traverse \u9898\u76ee Description \u7ed9\u51fa\u4e00\u68f5\u5b69\u5b50\u5144\u5f1f\u8868\u793a\u6cd5\u4e0b\u7684\u6811\u7684\u7ed3\u6784\u4ee5\u53ca\u5404\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u8981\u6c42\u6309\u5148\u5e8f\u3001\u540e\u5e8f\u3001\u5c42\u6b21\u904d\u5386\u4e8c\u53c9\u6811\u5e76\u8f93\u51fa\u5404\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\u3002 Input Format \u8f93\u5165\u6587\u4ef6\u4e00\u5171\u5305\u542bN+1\u884c\u3002 \u7b2c\u4e00\u884c\u542b\u6709\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u4ee3\u8868\u6811\u4e2d\u7ed3\u70b9\u603b\u6570\u3002 \u7b2c\u4e8c\u884c\u5230\u7b2cN+1\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u4e00\u4e2a\u8282\u70b9\uff0c\u5e8f\u53f7\u4e3a 1 \u7684\u8282\u70b9\u5728\u8fd9 N \u884c\u4e2d\u7684\u7b2c 1 \u884c\uff08\u4e0d\u5305\u62ec\u8282\u70b9\u603b\u6570\u90a3\u4e00\u884c\uff09\u3002\u5176\u4e2d\u7b2ci\u884c\u7684\u4e09\u4e2a\u6574\u6570Pi\uff0cQi\uff0cVi\uff0c\u4ee3\u8868\u5e8f\u53f7\u4e3a i \u7684\u8282\u70b9\u5de6\u5b69\u5b50\u5e8f\u53f7\u4e3aPi\uff0c\u53f3\u5144\u5f1f\u5e8f\u53f7\u4e3aQi\uff0c\u5e8f\u53f7\u4e3a i \u7684\u7ed3\u70b9\u81ea\u8eab\u7684\u6743\u503c\u4e3aVi\u3002\u82e5Pi=0\uff0c\u5219\u8868\u660e\u7ed3\u70b9i\u6ca1\u6709\u5de6\u5b69\u5b50\u3002\u540c\u6837\u7684\uff0c\u82e5Qi=0\uff0c\u5219\u8868\u660ei\u8282\u70b9\u6ca1\u6709\u53f3\u5144\u5f1f\u3002(ps. \u7b2ci\u884c\u6307\u7684\u662f\u8fd9N\u884c\u4e2d\u7684\u7b2ci\u884c) Output Format \u8f93\u51fa\u5305\u542b\u4e09\u884c\u3002 \u7b2c\u4e00\u884c\u5305\u542bN\u4e2a\u6570\uff0c\u8868\u793a\u6309\u5148\u5e8f\u904d\u5386\u8f93\u51fa\u7684\u5404\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c\u4e8c\u884c\u5305\u542bN\u4e2a\u6570\uff0c\u8868\u793a\u6309\u540e\u5e8f\u904d\u5386\u8f93\u51fa\u7684\u5404\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 \u7b2c\u4e09\u884c\u5305\u542bN\u4e2a\u6570\uff0c\u8868\u793a\u6309\u5c42\u6b21\u904d\u5386\u8f93\u51fa\u7684\u5404\u4e2a\u7ed3\u70b9\u7684\u6743\u503c\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 Sample Input 9 2 0 111 5 3 222 0 4 333 7 0 444 0 6 555 0 0 666 0 8 777 0 9 888 0 0 999 Sample Output 111 222 555 666 333 444 777 888 999 555 666 222 333 777 888 999 444 111 111 222 333 444 555 666 777 888 999 Limit \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u6ee1\u8db31<=N<=100000 \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u6ee1\u8db30<=Pi,Qi<=N \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\u5747\u6ee1\u8db3-2147483648<=Vi<=2147483647 FineArtz's solution Star /* traverse */ #include <iostream> using namespace std; struct Node{ int child = 0, sibling = 0; int val = 0; }; Node a[100005]; bool b[100005] = {0}; int n; void foretra(int x){ if (x == 0) return; cout << a[x].val << ' '; int t = a[x].child; while (t){ foretra(t); t = a[t].sibling; } } void backtra(int x){ if (x == 0) return; int t = a[x].child; while (t){ backtra(t); t = a[t].sibling; } cout << a[x].val << ' '; } void hieatra(int root){ int q[100005]; int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front]; front++; cout << a[now].val << ' '; int t = a[now].child; while (t){ q[rear++] = t; t = a[t].sibling; } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].child >> a[i].sibling >> a[i].val; b[a[i].child] = true; b[a[i].sibling] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } foretra(root); cout << '\\n'; backtra(root); cout << '\\n'; hieatra(root); cout << '\\n'; return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int n,l[200000],r[200000],v[200000],s[200000],root,queue[200000],head=0,tail=1,p; void pre(int x){ cout<<v[x]<<\" \"; int p=l[x]; while (p) {pre(p); p=r[p];} } void post(int x){ int p=l[x]; while (p) {post(p); p=r[p];} cout<<v[x]<<\" \"; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d%d\",&l[i],&r[i],&v[i]); s[l[i]]=1; s[r[i]]=1; } for (int i=1;i<=n;++i) if (!s[i]) root=i; pre(root); cout<<endl; post(root); cout<<endl; queue[0]=root; while (head<tail){ cout<<v[queue[head]]<<\" \"; p=l[queue[head++]]; while (p) { queue[tail++]=p; p=r[p]; } } return 0; }","title":"1214"},{"location":"nr/1214/#1214-traverse","text":"\u9898\u76ee","title":"1214 traverse"},{"location":"nr/1214/#fineartzs-solution-star","text":"/* traverse */ #include <iostream> using namespace std; struct Node{ int child = 0, sibling = 0; int val = 0; }; Node a[100005]; bool b[100005] = {0}; int n; void foretra(int x){ if (x == 0) return; cout << a[x].val << ' '; int t = a[x].child; while (t){ foretra(t); t = a[t].sibling; } } void backtra(int x){ if (x == 0) return; int t = a[x].child; while (t){ backtra(t); t = a[t].sibling; } cout << a[x].val << ' '; } void hieatra(int root){ int q[100005]; int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front]; front++; cout << a[now].val << ' '; int t = a[now].child; while (t){ q[rear++] = t; t = a[t].sibling; } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].child >> a[i].sibling >> a[i].val; b[a[i].child] = true; b[a[i].sibling] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } foretra(root); cout << '\\n'; backtra(root); cout << '\\n'; hieatra(root); cout << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1214/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int n,l[200000],r[200000],v[200000],s[200000],root,queue[200000],head=0,tail=1,p; void pre(int x){ cout<<v[x]<<\" \"; int p=l[x]; while (p) {pre(p); p=r[p];} } void post(int x){ int p=l[x]; while (p) {post(p); p=r[p];} cout<<v[x]<<\" \"; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d%d\",&l[i],&r[i],&v[i]); s[l[i]]=1; s[r[i]]=1; } for (int i=1;i<=n;++i) if (!s[i]) root=i; pre(root); cout<<endl; post(root); cout<<endl; queue[0]=root; while (head<tail){ cout<<v[queue[head]]<<\" \"; p=l[queue[head++]]; while (p) { queue[tail++]=p; p=r[p]; } } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1215/","text":"1215 bernoulli \u9898\u76ee Description \u5b9e\u73b0\u4e00\u68f5Bernoulli\u6811\u3002\u5b9e\u73b0\u4e0b\u5217\u64cd\u4f5c\uff1a 1.insert X\uff0c\u5c06\u6574\u6570X\u52a0\u5165\u4f18\u5148\u961f\u5217 2.delete\uff0c\u5c06\u4f18\u5148\u961f\u5217\u4e2d\u6700\u5c0f\u503c\u5f39\u51fa 3.min\uff0c\u8f93\u51fa\u6700\u5c0f\u503c \u521d\u59cb\u4f18\u5148\u961f\u5217\u4e3a\u7a7a\u3002 Input Format \u7b2c\u4e00\u884c\u542b\u6709\u4e00\u4e2a\u6b63\u6574\u6570M\uff081<=M<=20000),\u4ee3\u8868\u603b\u7684\u64cd\u4f5c\u6570\u3002 \u4ee5\u4e0bM\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u64cd\u4f5c\u3002 Output Format \u5bf9\u4e8emin\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u4e2a\u6700\u5c0f\u503c\uff0c\u56de\u8f66\u9694\u5f00\u3002 Sample Input1 9 insert 6 insert 6 insert 4 delete min delete insert 9 insert 3 min Sample Output1 6 3 Limit \u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u5408\u6cd5 WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int n,heap[30000],len,x; char cmd[20]; void minheapify(int x){ int smallest=x,l,r,tmp; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { tmp = heap[smallest]; heap[smallest] = heap[x]; heap[x] = tmp; x = smallest; } else break; } } void insert(int x){ int i=++len,tmp; heap[len]=x; while (i>1 && heap[i/2]>heap[i]) { tmp=heap[i/2]; heap[i/2]=heap[i]; heap[i]=tmp; i=i/2; } } int pop(){ int ret=heap[1]; heap[1]=heap[len--]; minheapify(1); return ret; } int main() { cin>>n; len=0; for (int i=0;i<n;++i){ cin>>cmd; if (strcmp(cmd,\"insert\")==0){ cin>>x; insert(x); } if (strcmp(cmd,\"delete\")==0) pop(); if (strcmp(cmd,\"min\")==0) cout<<heap[1]<<endl; } return 0; }","title":"1215"},{"location":"nr/1215/#1215-bernoulli","text":"\u9898\u76ee","title":"1215 bernoulli"},{"location":"nr/1215/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[30000],len,x; char cmd[20]; void minheapify(int x){ int smallest=x,l,r,tmp; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { tmp = heap[smallest]; heap[smallest] = heap[x]; heap[x] = tmp; x = smallest; } else break; } } void insert(int x){ int i=++len,tmp; heap[len]=x; while (i>1 && heap[i/2]>heap[i]) { tmp=heap[i/2]; heap[i/2]=heap[i]; heap[i]=tmp; i=i/2; } } int pop(){ int ret=heap[1]; heap[1]=heap[len--]; minheapify(1); return ret; } int main() { cin>>n; len=0; for (int i=0;i<n;++i){ cin>>cmd; if (strcmp(cmd,\"insert\")==0){ cin>>x; insert(x); } if (strcmp(cmd,\"delete\")==0) pop(); if (strcmp(cmd,\"min\")==0) cout<<heap[1]<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1233/","text":"1233 Path \u9898\u76ee Description \u5927\u5bb6\u8fd8\u8bb0\u5f97\u90bb\u63a5\u8868\u7c7b\u5417\uff1f\uff08\u5982\u679c\u4f60\u5df2\u7ecf\u4e0d\u8bb0\u5f97\uff0c\u8bf7\u770b\u4e66\u4e0a\u7684P343\u9875\u5f00\u59cb\u7684\u5185\u5bb9\uff09\u6ca1\u9519\uff0c\u90bb\u63a5\u8868\u662f\u8868\u793a\u7a00\u758f\u56fe\uff08\u8fb9\u6570\u6bd4\u8f83\u5c11\u7684\u56fe\uff09\u7684\u4e00\u79cd\u5f88\u597d\u7684\u6570\u636e\u7ed3\u6784\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u8981\u6c42\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff08\u82e5\u5bf9\u6df1\u5ea6\u4f18\u5148\u641c\u7d22DFS\u7684\u5185\u5bb9\u4e0d\u6e05\u695a\uff0c\u8bf7\u770bP348\uff09\u7684\u601d\u60f3\uff0c\u5229\u7528\u90bb\u63a5\u8868\u7c7b\uff0c\u5bf9\u7ed9\u5b9a\u7684\u6709\u5411\u56fe\uff0c\u627e\u51fa\u4ece\u6307\u5b9a\u7ed3\u70b9start\u51fa\u53d1\uff0c\u957f\u5ea6\u4e3aM\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\uff08\u7b80\u5355\u8def\u5f84\u662f\u9876\u70b9\u5e8f\u5217\u4e2d\u9876\u70b9\u4e0d\u91cd\u590d\u51fa\u73b0\u7684\u8def\u5f84\uff09\u7684\u6570\u91cf\u3002 \u4e3a\u7b80\u5316\u9898\u76ee\uff0c\u6211\u4eec\u8fd8\u662f\u7ea6\u5b9a\uff1a\u7528\u6b63\u6574\u65701,2,3\u2026\u2026n\u6765\u8868\u793a\u6bcf\u4e2a\u7ed3\u70b9\u7684ID\uff08\u7f16\u53f7\uff09\u3002(\u8f93\u5165\u53ef\u80fd\u6709\u91cd\u8fb9) Input Format \u7b2c1\u884c\uff1an m start M //\u6b63\u6574\u6570n \uff0c\u4ee3\u8868\u56fe\u4e2d\u7ed3\u70b9\u7684\u6570\u91cf\u3002\u975e\u8d1f\u6574\u6570m\u4ee3\u8868\u8981\u56fe\u4e2d\u6709\u5411\u8fb9\u7684\u6570\u91cf\u3002start\u4e3a\u8d77\u70b9\u7f16\u53f7\uff0cM\u4e3a\u9898\u4e2d\u7684\u7b80\u5355\u8def\u5f84\u957f\u5ea6 \u7b2c2\u884c\u5230\u7b2c1+m\u884c: a b //\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\uff1a\u4ee3\u8868\u7ed3\u70b9a\u5230\u7ed3\u70b9b\u6709\u4e00\u6761\u6709\u5411\u8fb9\uff08a->b\uff09\uff0c\u6743\u503c\u4e3a1 Output Format \u4e00\u4e2a\u6574\u6570k\uff0c\u4ee3\u8868\u957f\u5ea6\u4e3aM\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84\u7684\u6570\u91cf Sample Input1 5 4 1 2 1 2 2 3 3 4 4 5 Sample Output1 1 //\u4ece1\u51fa\u53d1\uff0c\u957f\u5ea6\u4e3a2\u7684\u7b80\u5355\u8def\u5f84\u53ea\u6709\u4e00\u6761\uff1a1->2->3 Sample Input2 6 5 1 2 1 2 2 3 2 4 2 1 5 6 Sample Output2 2 //\u4ece1\u51fa\u53d1\uff0c\u957f\u5ea6\u4e3a2\u7684\u7b80\u5355\u8def\u5f84\u67092\u6761\uff1a1->2->3,1->2->4\u30021->2->1\u4e0d\u662f\uff0c\u56e0\u4e3a\u4e0d\u662f\u7b80\u5355\u8def\u5f84\u3002 Limits 0<n,M<=10 0<=m<=100 \u6570\u636e\u4fdd\u8bc1\u5408\u6cd5 \uff08PS\uff1a\u5173\u4e8e\u7b80\u5355\u8def\u5f84\u7684\u8d77\u70b9\u7ec8\u70b9\u662f\u5426\u80fd\u76f8\u540c\uff0c\u8fd9\u4e2a\u6709\u70b9\u4e89\u8bae\u3002\u672c\u9898\u89c4\u5b9a\u4e0d\u80fd\u76f8\u540c\uff09 FineArtz's solution Star /* Path */ #include <iostream> using namespace std; int n, m, start, len; int head[15] = {0}, nxt[105] = {0}, e[105] = {0}; int cnt = 0, ans = 0; bool vis[15] = {0}; void addEdge(int u, int v){ nxt[++cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x, int step){ if (step == len){ ++ans; return; } for (int i = head[x]; i; i = nxt[i]){ if (!vis[e[i]]){ vis[e[i]] = true; dfs(e[i], step + 1); vis[e[i]] = false; } } } int main(){ cin >> n >> m >> start >> len; for (int i = 1; i <= m; ++i){ int u, v; cin >> u >> v; addEdge(u, v); } vis[start] = true; dfs(start, 0); cout << ans << endl; return 0; }","title":"1233"},{"location":"nr/1233/#1233-path","text":"\u9898\u76ee","title":"1233 Path"},{"location":"nr/1233/#fineartzs-solution-star","text":"/* Path */ #include <iostream> using namespace std; int n, m, start, len; int head[15] = {0}, nxt[105] = {0}, e[105] = {0}; int cnt = 0, ans = 0; bool vis[15] = {0}; void addEdge(int u, int v){ nxt[++cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x, int step){ if (step == len){ ++ans; return; } for (int i = head[x]; i; i = nxt[i]){ if (!vis[e[i]]){ vis[e[i]] = true; dfs(e[i], step + 1); vis[e[i]] = false; } } } int main(){ cin >> n >> m >> start >> len; for (int i = 1; i <= m; ++i){ int u, v; cin >> u >> v; addEdge(u, v); } vis[start] = true; dfs(start, 0); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1239/","text":"1239 \u6b22\u603b\u627e\u5de5\u4f5c \u9898\u76ee Description \u5feb\u8981\u6bd5\u4e1a\u7684\u6b22\u603b\u6700\u8fd1\u627e\u4e86\u4e00\u4efd\u85aa\u6c34\u4e0d\u83f2\u7684\u5de5\u4f5c\uff0c\u4e3a\u6b64\uff0c\u6b22\u603b\u6bcf\u6708\u9700\u8981\u5411\u56fd\u5bb6\u7f34\u7eb3\u5de8\u989d\u7684\u4e2a\u4eba\u6240\u5f97\u7a0e\uff0c\u4e3a\u6b64\u6b22\u603b\u771f\u662f\u4f24\u900f\u4e86\u8111\u7b4b\u3002\u5feb\u6765\u5e2e\u5e2e\u6b22\u603b\u5427\uff01 \u9644\uff1a2011\u5e749\u6708\u8d77\u4e2a\u4eba\u6240\u5f97\u7a0e\u7a0e\u7387\u8868\uff08\u8d77\u5f81\u70b93500\uff09 \u7ea7\u6570 \u5168\u6708\u5e94\u7eb3\u7a0e\u6240\u5f97\u989d\uff08\u542b\u7a0e\u6240\u5f97\u989d\uff09 \u7a0e\u7387% \u4e00 \u4e0d\u8d85\u8fc71500\u5143 3 \u4e8c \u8d85\u8fc71500\u5143\u81f34500\u5143 10 \u4e09 \u8d85\u8fc74500\u5143\u81f39000\u5143 20 \u56db \u8d85\u8fc79000\u5143\u81f335000\u5143 25 \u4e94 \u8d85\u8fc735000\u5143\u81f355000\u5143 30 \u516d \u8d85\u8fc755000\u5143\u81f380000\u5143 35 \u4e03 \u8d85\u8fc780000\u5143 45 Input Format \u6807\u51c6\u8f93\u5165\u5305\u542b1\u884c\uff1a \u7b2c1\u884c\u662f\u6574\u6570A\uff0c\u8868\u793a\u6b22\u603b\u7684\u672c\u6708\u5de5\u8d44\uff08\u5143\uff09\u3002 Output Format \u6807\u51c6\u8f93\u51fa\u5305\u542b1\u884c\uff1a \u7b2c1\u884c\u8f93\u51fa\u6574\u6570B\uff0c\u8868\u793a\u6b22\u603b\u672c\u6708\u6240\u9700\u7f34\u7eb3\u7684\u4e2a\u4eba\u6240\u5f97\u7a0e\uff08\u5143\uff0c\u5411\u4e0b\u53d6\u6574\uff09\u3002 Sample Input1 4000 Sample Output1 15 \u6708\u6536\u5165\u4e3a4000\uff0c\u5e94\u7eb3\u7a0e\u6240\u5f97\u989d\u4e3a4000-3500=500\uff0c\u4e0d\u8d85\u8fc71500\uff0c\u7a0e\u73873%\uff0c\u5e94\u7eb3\u7a0e500*3%=15 Sample Input2 8000 Sample Output2 345 \u6708\u6536\u5165\u4e3a8000\uff0c\u5e94\u7eb3\u7a0e\u6240\u5f97\u989d\u4e3a8000-3500=4500\uff0c\u4e0d\u8d85\u8fc71500\u7684\u90e8\u5206\uff0c\u7a0e\u73873%\uff0c\u5e94\u7eb3\u7a0e1500*3%=45\uff0c\u8d85\u8fc71500\u5143\u81f34500\u5143\u7684\u90e8\u5206\uff0c\u7a0e\u738710%\uff0c\u5e94\u7eb3\u7a0e3000*10%=300\uff0c\u603b\u7eb3\u7a0e\u989d345 Limits 100%\u7684\u6570\u636e\u6ee1\u8db3\uff1a1<=A<=200000 FineArtz's solution Star /* \u6b22\u603b\u627e\u5de5\u4f5c */ #include <iostream> using namespace std; int main(){ int n = 0, ans = 0; cin >> n; if (n > 3500){ n -= 3500; if (n <= 1500) ans = n * 0.03; else if (n <= 4500) ans = 1500 * 0.03 + (n - 1500) * 0.1; else if (n <= 9000) ans = 1500 * 0.03 + 3000 * 0.1 + (n - 4500) * 0.2; else if (n <= 35000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + (n - 9000) * 0.25; else if (n <= 55000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + (n - 35000) * 0.3; else if (n <= 80000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + (n - 55000) * 0.35; else ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + 25000 * 0.35 + (n - 80000) * 0.45; } cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { double n, sum; double tax[] = {0, 45, 345, 1245, 7745, 13745, 22495}; cin >> n; if (n <= 3500) sum = 0.0; else { n -= 3500; if (n <= 1500) sum = n * 0.03; else if (n <= 4500) sum = tax[1] + (n - 1500) * 0.1; else if (n <= 9000) sum = tax[2] + (n - 4500) * 0.2; else if (n <= 35000) sum = tax[3] + (n - 9000) * 0.25; else if (n <= 55000) sum = tax[4] + (n - 35000) * 0.3; else if (n <= 80000) sum = tax[5] + (n - 55000) * 0.35; else sum = tax[6] + (n - 80000) * 0.45; } cout << int(sum); return 0; }","title":"1239"},{"location":"nr/1239/#1239","text":"\u9898\u76ee","title":"1239 \u6b22\u603b\u627e\u5de5\u4f5c"},{"location":"nr/1239/#fineartzs-solution-star","text":"/* \u6b22\u603b\u627e\u5de5\u4f5c */ #include <iostream> using namespace std; int main(){ int n = 0, ans = 0; cin >> n; if (n > 3500){ n -= 3500; if (n <= 1500) ans = n * 0.03; else if (n <= 4500) ans = 1500 * 0.03 + (n - 1500) * 0.1; else if (n <= 9000) ans = 1500 * 0.03 + 3000 * 0.1 + (n - 4500) * 0.2; else if (n <= 35000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + (n - 9000) * 0.25; else if (n <= 55000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + (n - 35000) * 0.3; else if (n <= 80000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + (n - 55000) * 0.35; else ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + 25000 * 0.35 + (n - 80000) * 0.45; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1239/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { double n, sum; double tax[] = {0, 45, 345, 1245, 7745, 13745, 22495}; cin >> n; if (n <= 3500) sum = 0.0; else { n -= 3500; if (n <= 1500) sum = n * 0.03; else if (n <= 4500) sum = tax[1] + (n - 1500) * 0.1; else if (n <= 9000) sum = tax[2] + (n - 4500) * 0.2; else if (n <= 35000) sum = tax[3] + (n - 9000) * 0.25; else if (n <= 55000) sum = tax[4] + (n - 35000) * 0.3; else if (n <= 80000) sum = tax[5] + (n - 55000) * 0.35; else sum = tax[6] + (n - 80000) * 0.45; } cout << int(sum); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1249/","text":"1249 \u6709\u5e8f\u5206\u6570\u5e8f\u5217 \u9898\u76ee Description \u8bf7\u8f93\u51fa[0,1]\u4e4b\u95f4\u4e14\u5206\u6bcd\u5c0f\u4e8e\u7b49\u4e8eN\u7684\u6240\u6709\u7b80\u5206\u6570\u3002 \u6bd4\u5982N=5\u65f6\uff1a0/1, 1/5, 1/4, 1/3, 2/5, 1/2, 3/5, 2/3, 3/4, 4/5, 1/1 Input Format \u4e00\u4e2a\u6b63\u6574\u6570N\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 <= N <= 100\u3002 Output Format \u4ece\u5c0f\u5230\u5927\u8f93\u51fa\uff0c\u6bcf\u884c\u4e00\u4e2a\u5206\u6570\u3002 Sample Input 5 Sample Output 0/1 1/5 1/4 1/3 2/5 1/2 3/5 2/3 3/4 4/5 1/1 FineArtz's solution Star /* \u6709\u5e8f\u5206\u6570\u6570\u5217 */ #include <iostream> using namespace std; int a[10000] = {0}, b[10000] = {0}; double c[10000] = {0.0}; int gcd(int x, int y){ if (x % y == 0) return y; return gcd(y, x % y); } inline void swap(int &x, int &y){ int t = x; x = y; y = t; } inline void swap(double &x, double &y) { double t = x; x = y; y = t; } void qsort(int low, int high){ if (low >= high) return; int i = low, j = high, keya = a[i], keyb = b[i]; double key = c[i]; while (i < j){ while (i < j && c[j] >= key) --j; a[i] = a[j]; b[i] = b[j]; c[i] = c[j]; while (i < j && c[i] <= key) ++i; a[j] = a[i]; b[j] = b[i]; c[j] = c[i]; } a[i] = keya; b[i] = keyb; c[i] = key; qsort(i + 1, high); qsort(low, j - 1); } int main(){ int n, cnt = 0; cin >> n; a[0] = 0; b[0] = 1; //cout << gcd(3, 2) << endl; for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j){ if (gcd(i, j) == 1){ ++cnt; a[cnt] = j; b[cnt] = i; c[cnt] = double(j) / double(i); } } qsort(1, cnt); a[++cnt] = 1; b[cnt] = 1; c[cnt] = 1.0; for (int i = 0; i <= cnt; ++i){ cout << a[i] << '/' << b[i] << endl; } return 0; }","title":"1249"},{"location":"nr/1249/#1249","text":"\u9898\u76ee","title":"1249 \u6709\u5e8f\u5206\u6570\u5e8f\u5217"},{"location":"nr/1249/#fineartzs-solution-star","text":"/* \u6709\u5e8f\u5206\u6570\u6570\u5217 */ #include <iostream> using namespace std; int a[10000] = {0}, b[10000] = {0}; double c[10000] = {0.0}; int gcd(int x, int y){ if (x % y == 0) return y; return gcd(y, x % y); } inline void swap(int &x, int &y){ int t = x; x = y; y = t; } inline void swap(double &x, double &y) { double t = x; x = y; y = t; } void qsort(int low, int high){ if (low >= high) return; int i = low, j = high, keya = a[i], keyb = b[i]; double key = c[i]; while (i < j){ while (i < j && c[j] >= key) --j; a[i] = a[j]; b[i] = b[j]; c[i] = c[j]; while (i < j && c[i] <= key) ++i; a[j] = a[i]; b[j] = b[i]; c[j] = c[i]; } a[i] = keya; b[i] = keyb; c[i] = key; qsort(i + 1, high); qsort(low, j - 1); } int main(){ int n, cnt = 0; cin >> n; a[0] = 0; b[0] = 1; //cout << gcd(3, 2) << endl; for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j){ if (gcd(i, j) == 1){ ++cnt; a[cnt] = j; b[cnt] = i; c[cnt] = double(j) / double(i); } } qsort(1, cnt); a[++cnt] = 1; b[cnt] = 1; c[cnt] = 1.0; for (int i = 0; i <= cnt; ++i){ cout << a[i] << '/' << b[i] << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1252/","text":"1252 \u5546\u5bb6\u7684\u7b79\u5212 \u9898\u76ee Description \u4e00\u5bb6\u4e73\u5236\u54c1\u516c\u53f8\u6bcf\u5929\u9700\u8981\u4e00\u5b9a\u91cf\u7684\u725b\u5976\uff0c\u4e8e\u662f\u4ed6\u4eec\u9700\u8981\u5728\u8bf8\u591a\u5976\u519c\u4e2d\u91c7\u8d2d\u725b\u5976\u3002 \u6bcf\u4f4d\u5976\u519c\u6bcf\u5929\u80fd\u591f\u63d0\u4f9b\u7684\u725b\u5976\u662f\u4e00\u5b9a\u7684\uff0c\u4e73\u5236\u54c1\u516c\u53f8\u53ef\u4ee5\u5411\u4ed6\u4eec\u6536\u8d2d\u5c0f\u4e8e\u6216\u7b49\u4e8e\u6700\u5927\u4ea7\u5976\u91cf\u7684\u725b\u5976\u3002 \u7ed9\u51fa\u516c\u53f8\u6bcf\u5929\u9700\u8981\u7684\u725b\u5976\u6570\u91cf\u548c\u5976\u519c\u63d0\u4f9b\u7684\u725b\u5976\u6700\u5927\u6570\u91cf\u4e0e\u5355\u4ef7\uff0c\u9700\u8981\u4f60\u7ed9\u51fa\u91c7\u8d2d\u8db3\u591f\u725b\u5976\u9700\u8981\u7684\u6700\u5c0f\u8d39\u7528\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff1aN\uff0c\uff080<=N<=200000)\u662f\u9700\u8981\u725b\u5976\u7684\u603b\u6570\uff1bM\uff0c\uff080<=M<=5000)\u662f\u63d0\u4f9b\u725b\u5976\u7684\u5976\u519c\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765\u6709M\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6574\u6570\uff1aP \u4e0e A\u3002 P(0<=P<=1000)\u662f\u725b\u5976\u7684\u5355\u4ef7\u3002 A(0<=A<=2000000)\u662f\u5976\u519c\u80fd\u63d0\u4f9b\u7684\u725b\u5976\u6570\u91cf\u3002 Output Format \u4ec5\u6709\u4e00\u884c\uff0c\u8f93\u51fa\u91c7\u8d2d\u8db3\u591f\u725b\u5976\u9700\u8981\u7684\u6700\u5c0f\u8d39\u7528\u3002 Sample Input 100 5 5 20 9 40 3 10 8 80 6 30 Sample Output 630 WashSwang's solution Star #include <iostream> #include <cstdio> #include <algorithm> long long s[1001]; int n,m,x,y,ans; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); s[x]+=y; } for (int i=0;i<1000;++i) { if (n>s[i]){ n-=s[i]; ans+=s[i]*i; } else { ans+=n*i; break; } } printf(\"%d\",ans); return 0; }","title":"1252"},{"location":"nr/1252/#1252","text":"\u9898\u76ee","title":"1252 \u5546\u5bb6\u7684\u7b79\u5212"},{"location":"nr/1252/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> #include <algorithm> long long s[1001]; int n,m,x,y,ans; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); s[x]+=y; } for (int i=0;i<1000;++i) { if (n>s[i]){ n-=s[i]; ans+=s[i]*i; } else { ans+=n*i; break; } } printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1253/","text":"1253 \u5723\u76d4\u8c37\u4e4b\u6218 \u9898\u76ee Description \u6d1b\u6c57\u6b63\u9762\u4e34\u4ed6\u4eec\u5386\u53f2\u4e0a\u6700\u4e25\u5cfb\u7684\u4e00\u573a\u6218\u5f79\u2014\u2014\u5723\u76d4\u8c37\u4e4b\u6218\u3002\u4f5c\u4e3a\u6d1b\u6c57\u7684\u519b\u961f\u7edf\u5e05\uff0c\u4f0a\u6b27\u58a8\u8981\u8c03\u9063\u519b\u961f\u6765\u62ef\u6551\u6d1b\u6c57\u56fd\u4e8e\u5b58\u4ea1\u4e4b\u9645\u3002\u5728\u5723\u76d4\u8c37\u5916\u7684\u5e7f\u88a4\u5e73\u539f\u4e0a\uff0c\u6563\u5e03\u7740M\u00d7N\u4e2a\u8425\u5730\u3002\u6bcf\u4e2a\u8425\u5730\u9a7b\u624e\u7740\u4e00\u4e9b\u9a91\u5175\u4e14\u6bcf\u4e2a\u8425\u5730\u7684\u9a91\u5175\u6570\u91cf\u5747\u4e0d\u76f8\u540c\uff08\u5982\u679c\u6709\u9a91\u5175\u7684\u8bdd\uff09\u3002\u4f0a\u6b27\u58a8\u6bcf\u6b21\u4f1a\u53bb\u5f53\u524d\u9a91\u5175\u6700\u591a\u7684\u8425\u5730\u53bb\u8c03\u9063\u519b\u961f\uff0c\u7136\u540e\u518d\u53bb\u5269\u4e0b\u8425\u5730\u4e2d\u9a91\u5175\u6700\u591a\u7684\u4e00\u4e2a\u8c03\u9063\u519b\u961f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u4f46\u662f\u827e\u8f9b\u683c\u7684\u534a\u517d\u4eba\u519b\u961f\u5728K\u5c0f\u65f6\u5185\u5c31\u4f1a\u62b5\u8fbe\u5723\u76d4\u8c37\u3002\u6240\u4ee5\u4ed6\u5728K\u5c0f\u65f6\u5185\u5fc5\u987b\u8981\u8fd4\u56de\u5723\u76d4\u8c37\u3002 \u4f0a\u6b27\u58a8\u5728\u6bcf\u4e2a\u5c0f\u65f6\u5185\uff0c\u53ef\u4ee5\u505a\u4e0b\u5217\u56db\u4ef6\u4e8b\u60c5\u4e4b\u4e00\u3002 (1) \u4ece\u5723\u76d4\u8c37\u8d76\u5230\u6700\u8fd1\u7684\u8425\u5730\uff08\u5373\u7b2c\u4e00\u884c\uff09\u3002 (2) \u4ece\u4e00\u4e2a\u8425\u5730\u8d76\u5230\u4e0e\u4e4b\u524d\u540e\u5de6\u53f3\u76f8\u90bb\u7684\u53e6\u4e00\u4e2a\u8425\u5730\u3002 (3) \u8c03\u9063\u4e00\u4e2a\u8425\u5730\u7684\u9a91\u5175\u3002 (4) \u4ece\u6700\u9760\u8fd1\u5723\u76d4\u8c37\u7684\u8425\u5730\u56de\u5230\u5723\u76d4\u8c37\uff0c\u5e76\u7ed3\u675f\u8c03\u9063\u519b\u961f\u7684\u884c\u52a8\u3002 \uff08\u5723\u76d4\u8c37\u53ef\u4ee5\u89c6\u4e3a\u7b2c0\u884c\uff09 \u73b0\u5728\u7ed9\u5b9aM\u00d7N\u4e2a\u8425\u5730\u548c\u5176\u4e2d\u9a91\u5175\u9a7b\u624e\u7684\u6570\u91cf\uff0c\u4f0a\u6b27\u58a8\u60f3\u77e5\u9053\u5728\u827e\u8f9b\u683c\u519b\u961f\u5230\u8fbe\u4e4b\u524d\uff0c\u4ed6\u6700\u591a\u80fd\u8c03\u9063\u591a\u5c11\u9a91\u5175\u5462\uff1f Input Format \u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u5305\u62ec\u4e09\u4e2a\u6574\u6570\uff0cM, N\u548cK\uff0c\u7528\u7a7a\u683c\u9694\u5f00\uff1b\u8868\u793a\u5e73\u539f\u7684\u5927\u5c0f\u4e3aM\u00d7N(1<=M,N<=20)\uff0c\u827e\u8f9b\u683c\u5230\u8fbe\u7684\u65f6\u95f4\u4e3aK(0<=K<=1000)\u5c0f\u65f6\u3002\u63a5\u4e0b\u6765\u7684M\u884c\uff0c\u6bcf\u884c\u5305\u62ecN\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u4e5f\u7528\u7a7a\u683c\u9694\u5f00\uff1b\u7b2ci+1\u884c\u7684\u7b2cj\u4e2a\u6574\u6570Aij(0<=Aij<=500)\u8868\u793a\u8425\u5730(i, j)\u4e2d\u9a7b\u624e\u7684\u9a91\u5175\u6570\u91cf\uff0c0\u8868\u793a\u8be5\u8425\u5730\u4e2d\u6ca1\u6709\u9a91\u5175\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u5305\u62ec\u4e00\u884c\uff0c\u8fd9\u4e00\u884c\u53ea\u5305\u542b\u4e00\u4e2a\u6574\u6570\uff0c\u5373\u5728K\u5c0f\u65f6\u5185\uff0c\u4f0a\u6b27\u58a8\u80fd\u8c03\u9063\u591a\u5c11\u9a91\u5175\u3002 Sample Input 1 6 7 21 0 0 0 0 0 0 0 0 0 0 0 13 0 0 0 0 0 0 0 0 7 0 15 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 Sample Output 1 37 \uff08\u89e3\u91ca\uff1a\u5723\u76d4\u8c37->(1,2)->(2,2)->(3,2)->(4,2)->(4,2)\u8c03\u906315->(3,2)->(2,2)->(2,3)->(2,4)->(2,5)->(2,5)\u8c03\u906313->(2,4)->(3,4)->(4,4)->(5,4)->(5,4)\u8c03\u90639->(4,4)->(3,4)->(2,4)->(1,4)->\u5723\u76d4\u8c37\uff09 Sample Input 2 6 7 20 0 0 0 0 0 0 0 0 0 0 0 13 0 0 0 0 0 0 0 0 7 0 15 0 0 0 0 0 0 0 0 9 0 0 0 0 0 0 0 0 0 0 Sample Output 2 28 WashSwang's solution Star #include <iostream> #include <cstdio> int x[501],y[501],m,n,p,q,k,curx,cury,sum; int main() { scanf(\"%d%d%d\",&m,&n,&k); for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { scanf(\"%d\",&p); x[p]=i; y[p]=j; } for (q=500;q>=1;--q) if (x[q]>0) { if (k-2*x[q]-1>=0) { k-=x[q]+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",0); return 0; } break; } for (--q;q>=1;--q) { if (x[q]>0) { if (k-abs(curx-x[q])-abs(cury-y[q])-x[q]-1>=0) { k-=abs(curx-x[q])+abs(cury-y[q])+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",sum); return 0; } } } printf(\"%d\",sum); return 0; }","title":"1253"},{"location":"nr/1253/#1253","text":"\u9898\u76ee","title":"1253 \u5723\u76d4\u8c37\u4e4b\u6218"},{"location":"nr/1253/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> int x[501],y[501],m,n,p,q,k,curx,cury,sum; int main() { scanf(\"%d%d%d\",&m,&n,&k); for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { scanf(\"%d\",&p); x[p]=i; y[p]=j; } for (q=500;q>=1;--q) if (x[q]>0) { if (k-2*x[q]-1>=0) { k-=x[q]+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",0); return 0; } break; } for (--q;q>=1;--q) { if (x[q]>0) { if (k-abs(curx-x[q])-abs(cury-y[q])-x[q]-1>=0) { k-=abs(curx-x[q])+abs(cury-y[q])+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",sum); return 0; } } } printf(\"%d\",sum); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1254/","text":"1254 \u4f20\u624b\u7ee2 \u9898\u76ee Description \u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u8001\u5e08\u7ecf\u5e38\u5e26\u7740\u540c\u5b66\u4eec\u4e00\u8d77\u505a\u6e38\u620f\u3002\u8fd9\u6b21\uff0c\u8001\u5e08\u5e26\u7740\u540c\u5b66\u4eec\u4e00\u8d77\u4f20\u624b\u7ee2\u3002 \u6e38\u620f\u89c4\u5219\u662f\u8fd9\u6837\u7684\uff1an\u4e2a\u540c\u5b66\u7ad9\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u5176\u4e2d\u7684\u4e00\u4e2a\u540c\u5b66\u624b\u91cc\u62ff\u7740\u624b\u7ee2\uff0c\u5f53\u8001\u5e08\u5439\u54e8\u5b50\u65f6\u5f00\u59cb\u4f20\uff0c\u6bcf\u4e2a\u540c\u5b66\u53ef\u4ee5\u628a\u624b\u7ee2\u4f20\u7ed9\u81ea\u5df1\u5de6\u53f3\u7684\u4e24\u4e2a\u540c\u5b66\u4e2d\u7684\u4e00\u4e2a\uff08\u5de6\u53f3\u4efb\u610f\uff09\uff0c\u5f53\u8001\u5e08\u5728\u6b64\u5439\u54e8\u5b50\u65f6\uff0c\u6e38\u620f\u505c\u6b62\uff0c\u6b64\u65f6\uff0c\u62ff\u7740\u624b\u7ee2\u7684\u90a3\u4e2a\u540c\u5b66\u8981\u7ed9\u5927\u5bb6\u8868\u6f14\u4e00\u4e2a\u8282\u76ee\u3002 abc\u63d0\u51fa\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\uff1a\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u4f20\u624b\u7ee2\u65b9\u6cd5\u53ef\u4ee5\u4f7f\u5f97\u4eceabc\u624b\u91cc\u5f00\u59cb\u4f20\u7684\u624b\u7ee2\uff0c\u4f20\u4e86m\u6b21\u4ee5\u540e\uff0c\u53c8\u56de\u5230abc\u624b\u91cc\u3002\u4e24\u79cd\u4f20\u624b\u7ee2\u65b9\u6cd5\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e24\u79cd\u65b9\u6cd5\u4e2d\uff0c\u63a5\u5230\u7403\u7684\u540c\u5b66\u6309\u63a5\u624b\u7ee2\u987a\u5e8f\u7ec4\u6210\u7684\u5e8f\u5217\u662f\u4e0d\u540c\u7684\u3002\u6bd4\u5982\u6709\u4e09\u4e2a\u540c\u5b661\u53f7\u30012\u53f7\u30013\u53f7\uff0c\u5e76\u5047\u8bbeabc\u4e3a1\u53f7\uff0c\u624b\u7ee2\u4f20\u4e863\u6b21\u56de\u5230abc\u624b\u91cc\u7684\u65b9\u5f0f\u67091->2->3->1\u548c1->3->2->1\uff0c\u51712\u79cd\u3002 Input Format \u5171\u4e00\u884c\uff0c\u6709\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570n\uff0cm\uff083<=n<=30\uff0c1<=m<=30\uff09\u3002 Output Foramt \u5171\u4e00\u884c\uff0c\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b26\u5408\u9898\u610f\u7684\u65b9\u6cd5\u6570\u3002 Sample Input 3 3 Sample Output 2 Hint 40%\u7684\u6570\u636e\u6ee1\u8db3\uff1a3<=n<=30\uff0c1<=m<=20 100%\u7684\u6570\u636e\u6ee1\u8db3\uff1a3<=n<=30\uff0c1<=m<=30 WashSwang's solution Star #include <iostream> using namespace std; long long x[31][31]; int n,m; int main() { x[0][0]=1; cin>>n>>m; for (int i=1;i<=m;++i) { x[i][0] = x[i - 1][n - 1] + x[i - 1][1]; for (int j = 1; j < n - 1; ++j){ x[i][j]=x[i-1][j-1]+x[i-1][j+1]; } x[i][n-1]=x[i-1][0]+x[i-1][n-2]; } cout<<x[m][0]; return 0; }","title":"1254"},{"location":"nr/1254/#1254","text":"\u9898\u76ee","title":"1254 \u4f20\u624b\u7ee2"},{"location":"nr/1254/#washswangs-solution-star","text":"#include <iostream> using namespace std; long long x[31][31]; int n,m; int main() { x[0][0]=1; cin>>n>>m; for (int i=1;i<=m;++i) { x[i][0] = x[i - 1][n - 1] + x[i - 1][1]; for (int j = 1; j < n - 1; ++j){ x[i][j]=x[i-1][j-1]+x[i-1][j+1]; } x[i][n-1]=x[i-1][0]+x[i-1][n-2]; } cout<<x[m][0]; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1255/","text":"1255 \u4f60\u7684\u9b54\u6212\uff1f\u4e0d\uff0c\u662f\u4f60\u7684\u9b54\u6212\u3002 \u9898\u76ee Description \u5728\u524d\u5f80\u672b\u65e5\u706b\u5c71\u7684\u9014\u4e2d\uff0c\u4f5b\u7f57\u591a\u4e0e\u4ed6\u7684\u970d\u6bd4\u7279\u4eba\u540c\u80de\u4e0d\u5e78\u88ab\u534a\u517d\u4eba\u6293\u4f4f\u4e86\u3002 \u534a\u517d\u4eba\u8981\u5bf9\u6bcf\u4e2a\u970d\u6bd4\u7279\u4eba\u8fdb\u884c\u8be2\u95ee\uff0c\u4ee5\u627e\u51fa\u54ea\u4e2a\u970d\u6bd4\u7279\u4eba\u643a\u5e26\u4e86\u81f3\u5c0a\u9b54\u6212\u3002 \u6bcf\u4e2a\u970d\u6bd4\u7279\u4eba\u53ef\u80fd\u4f1a\u8bf4\u4ee5\u4e0b\u51e0\u79cd\u8bdd\uff1a I have the ring. \u6211\u6709\u9b54\u6212\u3002 I have not the ring. \u6211\u6ca1\u6709\u9b54\u6212\u3002 XXX has the ring. XXX\u6709\u9b54\u6212\u3002(XXX\u8868\u793a\u67d0\u4e2a\u970d\u6bd4\u7279\u4eba\u7684\u540d\u5b57) XXX has not the ring. XXX\u6ca1\u6709\u9b54\u6212\u3002 Today is XXX. \u4eca\u5929\u5929\u6c14\u771f\u597d\uff0c\u662fXXX\u5427\uff01(XXX\u8868\u793aMonday/Tuesday/Wednesday/Thursday/Friday/Saturday/Sunday\u5176\u4e2d\u4e4b\u4e00\uff0c\u53ea\u6709\u9996\u5b57\u6bcd\u5927\u5199) \u8be2\u95ee\u4e2d\u6240\u56de\u7b54\u7684\u5176\u4ed6\u8bdd\uff0c\u90fd\u4e0d\u5217\u5165\u8003\u8651\u7684\u8303\u56f4\u4e4b\u5185\u3002 \u534a\u517d\u4eba\u6240\u77e5\u9053\u7684\u662f\uff0c\u970d\u6bd4\u7279\u4eba\u4e2d\u6709N\u4e2a\u4eba\u59cb\u7ec8\u8bf4\u5047\u8bdd\uff0c\u800c\u5176\u4ed6\u4eba\u59cb\u7ec8\u8bf4\u771f\u8bdd\u3002 \u6bcf\u4e2a\u970d\u6bd4\u7279\u4eba\u53ef\u80fd\u4f1a\u56de\u7b54\u591a\u53e5\u8bdd\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u56de\u7b54\u3002 \u4f46\u662f\u73b0\u5728\u6709\u4eba\u542c\u4e0d\u61c2\u8fd9\u4e9b\u8bdd\uff0c\u4f60\u9700\u8981\u5e2e\u5fd9\u4ed6\u5904\u7406\u3002 \u6bcf\u53e5\u8bdd\u5bf9\u5e94\u4e09\u5143\u7ec4(f,t,c)\uff0c\u5bf9\u5e94\u5173\u7cfb\u5982\u4e0b\uff08\u5176\u4e2dspeakerid\u662f\u8bf4\u8bdd\u8005\u7684id\uff09\uff1a I have the ring. -> (speakerid, speakerid, 1) I have not the ring. -> (speakerid, speakerid, 2) XXX has the ring. -> (speakerid, XXX's id, 1) XXX has not the ring. -> (speakerid, XXX's id, 2) Today is XXX. -> (speakerid, xxx, 3)\uff0c\u5176\u4e2d(XXX=Monday->xxx=1, XXX=Tuesday->xxx=2, ..., XXX=Sunday->xxx=7) \u8be2\u95ee\u4e2d\u6240\u56de\u7b54\u7684\u5176\u4ed6\u8bdd\uff0c\u5373\u5e9f\u8bdd\uff0c\u4e0d\u8f93\u51fa\u3002 Input Format \u8f93\u5165\u7531\u82e5\u5e72\u884c\u7ec4\u6210\uff0c\u7b2c\u4e00\u884c\u6709\u4e8c\u4e2a\u6574\u6570\uff0cM(1<=M<=10)\u3001N(1<=N<=M)\u548cP(1<=P<=20)\u3002 M\u662f\u534a\u517d\u4eba\u6293\u5230\u7684\u970d\u6bd4\u7279\u4eba\u6570\uff0cN\u662f\u5176\u4e2d\u59cb\u7ec8\u8bf4\u8c0e\u7684\u4eba\u6570\uff0cP\u662f\u5f97\u5230\u7684\u56de\u7b54\u7684\u603b\u6570\u3002 \u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u662f\u4e00\u4e2a\u970d\u6bd4\u7279\u4eba\u7684\u540d\u5b57(\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0c\u5168\u90e8\u5927\u5199)\uff0c\u4ed6\u4eec\u7684id\u6309\u987a\u5e8f\u4e3a0\u5230M-1\u3002 \u5f80\u540e\u6709P\u884c\uff0c\u6bcf\u884c\u5f00\u59cb\u662f\u67d0\u4e2a\u970d\u6bd4\u7279\u4eba\u7684\u540d\u5b87\uff0c\u7d27\u8ddf\u7740\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c\uff0c\u540e\u9762\u662f\u4e00\u53e5\u56de\u7b54\uff0c\u7b26\u5408\u524d\u8868\u4e2d\u6240\u5217\u683c\u5f0f\u3002 \u56de\u7b54\u6bcf\u884c\u4e0d\u4f1a\u8d85\u8fc7250\u4e2a\u5b57\u7b26\u3002 \u8f93\u5165\u4e2d\u4e0d\u4f1a\u51fa\u73b0\u8fde\u7eed\u7684\u4e24\u4e2a\u7a7a\u683c\uff0c\u800c\u4e14\u6bcf\u884c\u5f00\u5934\u548c\u7ed3\u5c3e\u4e5f\u6ca1\u6709\u7a7a\u683c\u3002 Output Format \u8f93\u51fa\u82e5\u5e72\u884c\uff0c\u5bf9\u6bcf\u53e5\u975e\u5e9f\u8bdd\uff0c\u8f93\u51fa\u4e09\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570\u3002 \u5982\u679c\u5168\u662f\u5e9f\u8bdd\uff0c\u8f93\u51fa\"Orz\"\uff08\u4e0d\u5305\u542b\u5f15\u53f7\uff09. Sample Input 3 1 5 FRODO SAM GOLLUM FRODO: I have the ring. FRODO: Today is Sunday. GOLLUM: FRODO has the ring. SAM: I have the ring. SAM: How are you?? Sample Output 0 0 1 0 7 3 2 0 1 1 1 1 Hint \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0c\u5c06\u4e0d\u6d89\u53ca\u5230\u661f\u671f\u51e0\uff08\u4f46\u662f\u53ef\u80fd\u6709\u5e9f\u8bdd\uff09\u3002 \u8981#include , \u4f7f\u7528string\u3002 \u4f7f\u7528getline(cin,\u53d8\u91cf\u540d)\u6765\u8bfb\u5165\u6574\u884c\u7684\u5b57\u7b26\u4e32,\u5982string name; getline(cin, name)\u3002 \u4f7f\u7528getchar()\u6765\u8bfb\u5165\u53ef\u80fd\u6709\u7684\u591a\u4f59\u7684\u5b57\u7b26\uff08\u5982\u56de\u8f66\u7b49\u7b49\uff09\uff0c\u5982char ch = getchar()\u3002 \u4f7f\u7528.find(str)\u6765\u627e\u5230\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5982strig word; ...; int loc = word.find(\":\")\u3002 \u4f7f\u7528.substr(\u8d77\u59cb\u4f4d\u7f6e\uff0c\u957f\u5ea6)\u6765\u622a\u53d6\u5b57\u7b26\u4e32\uff0c\u5982string name1 = word.substr(0, loc)\u3002 \u4f7f\u7528==\u5224\u65ad\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u5982string name1, name2; ...; name1==name2; \u4f7f\u7528.length()\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff0c\u5982int len = name.length(); WashSwang's solution Star #include <iostream> #include <string> using namespace std; string s,name[30],who,towho,days[7]={\"Monday.\",\"Tuesday.\",\"Wednesday.\",\"Thursday.\",\"Friday.\",\"Saturday.\",\"Sunday.\"}; int m,n,p,mh,f,t,c,succ,pos; char ch; int findname(string name1) { for (int j=0;j<m;++j) if (name1==name[j]) return j; return -1; } int main() { cin>>m>>n>>p; ch=getchar(); for (int i=0;i<m;++i){ getline(cin,name[i]); } for (int i=0;i<p;++i){ getline(cin,s); mh=s.find(':'); who=s.substr(0,mh); c=-1; f=findname(who); if (f==-1) continue; pos=s.find('.'); if (pos!=s.length()-1) continue; pos=s.find(\" have the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 1; } } else{ pos=s.find(\" have not the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 2; } } else{ pos=s.find(\" has the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=1; } else{ pos=s.find(\" has not the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=2; } else{ pos=s.find(\" Today is \"); if (pos!=-1){ t=-1; for (int j=0;j<7;++j) if (s.find(days[j])==pos+10) { t=j+1; break; } if (t!=-1) c=3; } } } } } if (c!=-1) { succ++; cout<<f<<\" \"<<t<<\" \"<<c<<endl; } } if (!succ) cout<<\"Orz\"<<endl; return 0; }","title":"1255"},{"location":"nr/1255/#1255","text":"\u9898\u76ee","title":"1255 \u4f60\u7684\u9b54\u6212\uff1f\u4e0d\uff0c\u662f\u4f60\u7684\u9b54\u6212\u3002"},{"location":"nr/1255/#washswangs-solution-star","text":"#include <iostream> #include <string> using namespace std; string s,name[30],who,towho,days[7]={\"Monday.\",\"Tuesday.\",\"Wednesday.\",\"Thursday.\",\"Friday.\",\"Saturday.\",\"Sunday.\"}; int m,n,p,mh,f,t,c,succ,pos; char ch; int findname(string name1) { for (int j=0;j<m;++j) if (name1==name[j]) return j; return -1; } int main() { cin>>m>>n>>p; ch=getchar(); for (int i=0;i<m;++i){ getline(cin,name[i]); } for (int i=0;i<p;++i){ getline(cin,s); mh=s.find(':'); who=s.substr(0,mh); c=-1; f=findname(who); if (f==-1) continue; pos=s.find('.'); if (pos!=s.length()-1) continue; pos=s.find(\" have the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 1; } } else{ pos=s.find(\" have not the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 2; } } else{ pos=s.find(\" has the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=1; } else{ pos=s.find(\" has not the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=2; } else{ pos=s.find(\" Today is \"); if (pos!=-1){ t=-1; for (int j=0;j<7;++j) if (s.find(days[j])==pos+10) { t=j+1; break; } if (t!=-1) c=3; } } } } } if (c!=-1) { succ++; cout<<f<<\" \"<<t<<\" \"<<c<<endl; } } if (!succ) cout<<\"Orz\"<<endl; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1279/","text":"1279 \u6253\u7535\u8bdd \u9898\u76ee Description \u54c6\u5566A\u68a6\u628a\u6211\u4eec\u7684cxt\u540c\u5b66\u6254\u5230\u8fdc\u53e4\u65f6\u4ee3\u4e86\uff0c\u7136\u540e\u6211\u4eec\u53ef\u7231\u7684\u54c6\u5566A\u68a6\u540c\u5b66\u5c31\u56de\u523022\u4e16\u7eaa\u627e\u53ef\u7231\u7684\u54c6\u5566\u7f8e\u540c\u5b66\u6405\u57fa\u53bb\u4e86\uff0c\u5fc3\u6025\u5982\u711a\u7684cxt\u53d1\u73b0\u8eab\u8fb9\u6709\u4e00\u4e2a\u624b\u673a\uff0c\u4ed6\u65ad\u5b9a\u80af\u5b9a\u662f\u54c6\u5566A\u68a6\u7684\uff0c\u4f46\u662f\u4ed6\u53d1\u73b0\u8fd9\u4e2a\u624b\u673a\u7684\u7535\u8bdd\u7c3f\u597d\u4e71\uff0c\u751a\u81f3\u8fd8\u6709\u3002\u3002\u3002\u5b57\u6bcd\uff01@_@. \u5f88\u5febcxt\u5c31\u53d1\u73b0\u4e86\u5bf9\u5e94\u5173\u7cfb\uff0c\u56e0\u4e3a\u7535\u8bdd\u53f7\u7801\u7684\u6807\u51c6\u683c\u5f0f\u662f\u4e03\u4f4d\u5341\u8fdb\u5236\u6570\uff0c\u5e76\u5728\u7b2c\u4e09\u3001\u7b2c\u56db\u4f4d\u6570\u5b57\u4e4b\u95f4\u6709\u4e00\u4e2a\u8fde\u63a5\u7b26\u3002\u800c\u7535\u8bdd\u62e8\u53f7\u76d8\u63d0\u4f9b\u4e86\u4ece\u5b57\u6bcd\u5230\u6570\u5b57\u7684\u6620\u5c04\uff0c\u6620\u5c04\u5173\u7cfb\u5982\u4e0b\uff1a A, B, \u548cC \u6620\u5c04\u5230 2 D, E, \u548cF \u6620\u5c04\u5230 3 G, H, \u548cI \u6620\u5c04\u5230 4 J, K, \u548cL \u6620\u5c04\u5230 5 M, N, \u548cO \u6620\u5c04\u5230 6 P, R, \u548cS \u6620\u5c04\u5230 7 T, U, \u548cV \u6620\u5c04\u5230 8 W, X, \u548cY \u6620\u5c04\u5230 9 Q\u548cZ\u6ca1\u6709\u6620\u5c04\u5230\u4efb\u4f55\u6570\u5b57\uff0c\u8fde\u5b57\u7b26\u4e0d\u9700\u8981\u62e8\u53f7\uff0c\u53ef\u4ee5\u4efb\u610f\u6dfb\u52a0\u548c\u5220\u9664\u3002 \u4e3e\u4e2a\u4f8b\u5b50\uff0cTUT-GLOP\u7684\u6807\u51c6\u683c\u5f0f\u662f888-4567\uff0c310-GINO\u7684\u6807\u51c6\u683c\u5f0f\u662f310-4466\uff0c3-10-10-10\u7684\u6807\u51c6\u683c\u5f0f\u662f310- 1010\u3002\u5982\u679c\u4e24\u4e2a\u53f7\u7801\u6709\u76f8\u540c\u7684\u6807\u51c6\u683c\u5f0f\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u662f\u7b49\u540c\u7684\uff08\u76f8\u540c\u7684\u62e8\u53f7\uff09\u3002 cxt\u8868\u793a\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684\u7535\u8bdd\u53f7\u7801\u516b\u6210\u5c31\u662f\u54c6\u5566\u7f8e\u7684 = =\u3002\u7136\u800c\u4fdd\u9669\u8d77\u89c1cxt\u6b64\u65f6\u5e76\u4e0d\u6025\u4e8e\u627e\u5230\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684\u7535\u8bdd\u53f7\u7801\uff0c\u9996\u5148\u4ed6\u8981\u5148\u628a\u91cd\u590d\u51fa\u73b0\u7684\u53f7\u7801\u90fd\u627e\u51fa\u6765\u3002 Input Format \u8f93\u5165\u7684\u683c\u5f0f\u662f\uff0c\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u6307\u5b9a\u7535\u8bdd\u53f7\u7801\u8584\u4e2d\u53f7\u7801\u7684\u6570\u91cf\uff081 \u2264 N \u2264 100000\uff09\u3002\u4f59\u4e0b\u7684\u6bcf\u884c\u662f\u4e00\u4e2a\u7535\u8bdd\u53f7\u7801\u3002\u6bcf\u4e2a\u7535\u8bdd\u53f7\u7801\u7531\u6570\u5b57\uff0c\u5927\u5199\u5b57\u6bcd\uff08\u9664\u4e86Q\u548cZ\uff09\u4ee5\u53ca\u8fde\u63a5\u7b26\u7ec4\u6210\u3002\u6bcf\u4e2a\u7535\u8bdd\u53f7\u7801\u4e2d\u53ea\u4f1a\u521a\u597d\u67097\u4e2a\u6570\u5b57\u6216\u8005\u5b57\u6bcd\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u51fa\u73b0\u91cd\u590d\u7684\u53f7\u7801\u4ea7\u751f\u4e00\u884c\u8f93\u51fa\uff0c\u8f93\u51fa\u662f\u53f7\u7801\u7684\u6807\u51c6\u683c\u5f0f\u7d27\u8ddf\u4e00\u4e2a\u7a7a\u683c\u7136\u540e\u662f\u5b83\u7684\u91cd\u590d\u6b21\u6570\u3002\u5982\u679c\u5b58\u5728\u591a\u4e2a\u91cd\u590d\u7684\u53f7\u7801\uff0c\u5219\u6309\u7167\u53f7\u7801\u7684\u5b57\u5178\u5347\u5e8f\u8f93\u51fa\u3002\u5982\u679c\u8f93\u5165\u6570\u636e\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u53f7\u7801\uff0c\u8f93\u51fa\u4e00\u884c\uff1a No duplicates. Sample Input 12 4873279 ITS-EASY 888-4567 3-10-10-10 888-GLOP TUT-GLOP 967-11-11 310-GINO F101010 888-1200 -4-8-7-3-2-7-9- 487-3279 Sample Output 310-1010 2 487-3279 4 888-4567 3 FineArtz's solution Star /* \u6253\u7535\u8bdd */ #include <iostream> #include <string> #include <map> using namespace std; const char res[26] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 0, 7, 7, 8, 8, 8, 9, 9, 9, 0}; bool IsLet(char ch) { return (ch >= 'A' && ch <= 'Z'); } bool IsNum(char ch) { return (ch >= '0' && ch <= '9'); } int main(){ int n, flag = 0; cin >> n; map<string, int> ans; for (int i = 1; i <= n; ++i){ string s, ss = \"\"; cin >> s; for (string::iterator it = s.begin(); it != s.end(); ++it){ if (IsNum(*it)) ss.push_back(*it); else if (IsLet(*it)) ss.push_back(res[*it - 'A'] + '0'); } ss.insert(ss.begin() + 3, '-'); ++ans[ss]; } for (map<string, int>::iterator it = ans.begin(); it != ans.end(); ++it) if (it->second > 1){ cout << it->first << ' ' << it->second << endl; flag = 1; } if (!flag) cout << \"No duplicates.\" << endl; return 0; }","title":"1279"},{"location":"nr/1279/#1279","text":"\u9898\u76ee","title":"1279 \u6253\u7535\u8bdd"},{"location":"nr/1279/#fineartzs-solution-star","text":"/* \u6253\u7535\u8bdd */ #include <iostream> #include <string> #include <map> using namespace std; const char res[26] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 0, 7, 7, 8, 8, 8, 9, 9, 9, 0}; bool IsLet(char ch) { return (ch >= 'A' && ch <= 'Z'); } bool IsNum(char ch) { return (ch >= '0' && ch <= '9'); } int main(){ int n, flag = 0; cin >> n; map<string, int> ans; for (int i = 1; i <= n; ++i){ string s, ss = \"\"; cin >> s; for (string::iterator it = s.begin(); it != s.end(); ++it){ if (IsNum(*it)) ss.push_back(*it); else if (IsLet(*it)) ss.push_back(res[*it - 'A'] + '0'); } ss.insert(ss.begin() + 3, '-'); ++ans[ss]; } for (map<string, int>::iterator it = ans.begin(); it != ans.end(); ++it) if (it->second > 1){ cout << it->first << ' ' << it->second << endl; flag = 1; } if (!flag) cout << \"No duplicates.\" << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1282/","text":"1282 \u4fee\u8def \u9898\u76ee Description \u8e66\u8e66\u8df3\u8df3\u7ed3\u675f\u540e\uff0ccxt\u56de\u5934\u770b\u770b\u81ea\u5df1\u8d70\u8fc7\u7684\u8def\u5751\u5751\u6d3c\u6d3c\u7684\uff0c\u5fc3\u4e2d\u975e\u5e38\u4e0d\u723d\uff0c\u4ed6\u8868\u793a\u8981\u628a\u8fd9\u6bb5\u8def\u7684\u8def\u9762\u9ad8\u5ea6\u4fee\u6210\u5355\u8c03\u4e0a\u5347\u7684\u6216\u8005\u5355\u8c03\u4e0b\u964d\u7684\uff0c\u6574\u6761\u8def\u53ef\u4ee5\u770b\u6210N\u6bb5\uff0cN\u4e2a\u6574\u6570A1\uff0c\u2026..,An\uff081<=n<=2000\uff09\u4f9d\u6b21\u63cf\u8ff0\u4e86\u6bcf\u4e00\u6bb5\u8def\u7684\u9ad8\u5ea6\uff080<=Ai<=1000000000\uff09\u3002\u5e0c\u671b\u627e\u5230\u4e00\u4e2a\u6070\u597d\u542bN\u4e2a\u5143\u7d20\u7684\u4e0d\u4e0a\u5347\u6216\u4e0d\u4e0b\u964d\u7684\u5e8f\u5217B1,\u2026\u2026,Bn\uff0c\u4f5c\u4e3a\u4fee\u8fc7\u7684\u8def\u4e2d\u6bcf\u4e2a\u8def\u6bb5\u7684\u9ad8\u5ea6\u3002 \u7531\u4e8e\u5c06\u6bcf\u4e00\u6bb5\u8def\u57ab\u9ad8\u6216\u6316\u4f4e\u4e00\u4e2a\u5355\u4f4d\u6d88\u8017\u7684\u4f53\u529b\u76f8\u540c\uff0c\u4e8e\u662f\u53ef\u4ee5\u8868\u793a\u4e3a\uff1a |A1-B1|+|A2-B2|+\u2026..+|An-Bn| \u8bf7\u4f60\u8ba1\u7b97\u4e00\u4e0b\uff0c\u8981\u4fee\u597d\u8fd9\u6bb5\u9053\u8def\uff0c\u6700\u5c11\u6d88\u8017\u591a\u5c11\u4f53\u529b\u3002\u6d88\u8017\u7684\u603b\u4f53\u529b\u4e0d\u4f1a\u8d85\u8fc72^31-1 Input Format \u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u4ec5\u6709\u4e00\u6b63\u6574\u6570N\uff0c\u4ee5\u4e0b\u7684N\u884c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570Ai\uff0c\u8868\u793a\u8def\u9762\u7684\u9ad8\u5ea6\u3002 Output Format \u8f93\u51fa\u6587\u4ef6\u4ec5\u6709\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u5982\u679c\u628a\u8def\u4fee\u6210\u9ad8\u5ea6\u4e0d\u4e0a\u5347\u6216\u4e0d\u4e0b\u964d\u7684\u6700\u5c0f\u82b1\u8d39 Sample Input 7 1 3 2 4 5 3 9 Sample Output 3 Hint \u5c06\u7b2c\u4e00\u4e2a\u9ad8\u5ea6\u4e3a3\u7684\u8def\u6bb5\u7684\u9ad8\u5ea6\u51cf\u5c11\u4e3a2\uff0c\u5c06\u7b2c\u4e8c\u4e2a\u9ad8\u5ea6\u4e3a3\u7684\u8def\u6bb5\u7684\u9ad8\u5ea6\u589e\u52a0\u52305\uff0c\u603b\u82b1\u8d39\u4e3a|2-3|+|5-3|=3\uff0c\u5e76\u4e14\u5404\u8def\u6bb5\u7684\u9ad8\u5ea6\u4e3a\u4e00\u4e2a\u4e0d\u4e0b\u964d\u5e8f\u5217 1,2,2,4,5,5,9\u3002 WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int n,h[3000],o[3000]; long long dps[2001][2001],dpt[2001][2001],mins,mint; void qsort(int *s,int *t){ if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]<=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } int main() { cin>>n; for (int i=1;i<=n;++i){ cin>>h[i]; o[i]=h[i]; } qsort(o+1,o+n+1); for (int i=1;i<=n;++i) { mins=1e12; for (int j = 1; j <= n; ++j){ if (dps[i-1][j]<mins) mins=dps[i-1][j]; dps[i][j]=mins+abs(h[i]-o[j]); } mint=1e12; for (int j = n; j>=1;--j){ if (dpt[i-1][j]<mint) mint=dpt[i-1][j]; dpt[i][j]=mint+abs(h[i]-o[j]); } } mins=1e12; mint=1e12; for (int i=1;i<=n;++i) { mins=min(dps[n][i],mins); mint=min(dpt[n][i],mint); } cout<<min(mins,mint); return 0; }","title":"1282"},{"location":"nr/1282/#1282","text":"\u9898\u76ee","title":"1282 \u4fee\u8def"},{"location":"nr/1282/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int n,h[3000],o[3000]; long long dps[2001][2001],dpt[2001][2001],mins,mint; void qsort(int *s,int *t){ if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]<=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } int main() { cin>>n; for (int i=1;i<=n;++i){ cin>>h[i]; o[i]=h[i]; } qsort(o+1,o+n+1); for (int i=1;i<=n;++i) { mins=1e12; for (int j = 1; j <= n; ++j){ if (dps[i-1][j]<mins) mins=dps[i-1][j]; dps[i][j]=mins+abs(h[i]-o[j]); } mint=1e12; for (int j = n; j>=1;--j){ if (dpt[i-1][j]<mint) mint=dpt[i-1][j]; dpt[i][j]=mint+abs(h[i]-o[j]); } } mins=1e12; mint=1e12; for (int i=1;i<=n;++i) { mins=min(dps[n][i],mins); mint=min(dpt[n][i],mint); } cout<<min(mins,mint); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1284/","text":"1284 \u80cc\u5305 \u9898\u76ee Description \u8bdd\u8bf4\u5728\u5927\u4e09ACM\u73edK\u4e2a\u4eba\u5373\u5c06\u4ece\u7f8e\u5e1d\u56de\u5f52\u7956\u56fd\u7684\u6000\u62b1\u4e4b\u65f6\uff0c\u4ed6\u4eec\u6709N\u79cd\u7269\u54c1\u60f3\u5e26\u56de\u6765\uff0c\u6bcf\u79cd\u7269\u54c1\u6709\u7ed9\u5b9a\u7684\u4f53\u79ef\u548c\u4ef7\u503c\uff0c\u4f46\u6bcf\u4e2a\u4eba\u90fd\u53ea\u80fd\u5e26\u603b\u4f53\u79ef\u4e3aV\u7684\u7269\u54c1\u3002 \u5728\u4ed6\u4eec\u773c\u4e2d\uff0c\u5408\u7406\u7684\u65b9\u6848\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a\u4eba\u5e26\u4e86\u6070\u597d\u603b\u4f53\u79ef\u4e3aV\u7684\u7269\u54c1 \u6bcf\u4e2a\u4eba\u5bf9\u4e8e\u540c\u79cd\u7269\u54c1\u6700\u591a\u5e26\u4e00\u4ef6\uff0c\u4f46\u4e0d\u540c\u7684\u4eba\u53ef\u4ee5\u5e26\u540c\u4e00\u79cd\u7269\u54c1 \u4efb\u610f\u4e24\u4e2a\u4eba\uff0c\u5e26\u7684\u7269\u54c1\u4e0d\u80fd\u5b8c\u5168\u76f8\u540c \u4ed6\u4eec\u60f3\u77e5\u9053\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6\u7684\u65b9\u6848\u4e2d\u6240\u6709\u4eba\u5e26\u7684\u7269\u54c1\u7684\u603b\u4ef7\u503c\u6700\u5927\u662f\u591a\u5c11\u3002 Input Format \u7b2c\u4e00\u884c\u4e09\u4e2a\u6570K, V, N\u3002 \u7b2c\u4e8c\u884c\u8d77\u7684N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u3002 30%\u7684\u6570\u636e\uff1a\\( 1 \\le K \\le 10, 1 \\le N \\le 100 \\) 100%\u7684\u6570\u636e\uff1a\\( K \\le 50, V \\le 5000, N \\le 200 \\)\uff0c\u5355\u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u548c\u4ef7\u503c\u4e0d\u8d85\u8fc75000\u3002 Output Format \u4e00\u884c\uff0c\u5373\u6240\u6c42\u6700\u5927\u4ef7\u503c\u3002 Sample Input 2 10 5 3 12 7 20 2 4 5 6 1 1 Sample Output 57 Sample Illustration \u7b2c\u4e00\u4e2a\u4eba\u9009\u62e9\u4f53\u79ef\u4e3a7,2,1\u7684\u4e09\u79cd\u7269\u54c1\uff0c\u4ef7\u503c\u4e3a25\u3002\u7b2c\u4e8c\u4e2a\u4eba\u9009\u62e9\u4f53\u79ef\u4e3a3,7\u7684\u4e24\u79cd\u7269\u54c1\uff0c\u4ef7\u503c\u4e3a32\u3002\u603b\u4ef7\u503c\u4e3a57\u3002 WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int f[51][5001],a[51],b[51],n,k,v,w,c,pa,pb,ans; int main() { scanf(\"%d%d%d\",&k,&v,&n); memset(f,0x80,sizeof(f)); f[0][0]=0; for (int i=0;i<n;++i){ scanf(\"%d%d\",&w,&c); for (int j=v;j>=w;--j){ for (int l=0;l<k;++l){ a[l]=f[l][j]; b[l]=f[l][j-w]+c; } pa=pb=0; for (int l=0;l<k;++l) if (a[pa]>b[pb]) f[l][j]=a[pa++]; else f[l][j]=b[pb++]; } } for (int i=0;i<k;++i) ans+=f[i][v]; printf(\"%d\",ans); return 0; }","title":"1284"},{"location":"nr/1284/#1284","text":"\u9898\u76ee","title":"1284 \u80cc\u5305"},{"location":"nr/1284/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int f[51][5001],a[51],b[51],n,k,v,w,c,pa,pb,ans; int main() { scanf(\"%d%d%d\",&k,&v,&n); memset(f,0x80,sizeof(f)); f[0][0]=0; for (int i=0;i<n;++i){ scanf(\"%d%d\",&w,&c); for (int j=v;j>=w;--j){ for (int l=0;l<k;++l){ a[l]=f[l][j]; b[l]=f[l][j-w]+c; } pa=pb=0; for (int l=0;l<k;++l) if (a[pa]>b[pb]) f[l][j]=a[pa++]; else f[l][j]=b[pb++]; } } for (int i=0;i<k;++i) ans+=f[i][v]; printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1290/","text":"1290 \u7075\u673a\u4e00\u52a8\uff01 \u9898\u76ee Description Black Yellow Bar\uff01 Yellow\u54e5\u559c\u6b22\u7075\u673a\u4e00\u52a8\u3002 \u5728Yellow\u54e5\u7684\u5bb6\u4e61\uff0c\u6709\u673a\u623f\u4e00\u6761\u8857\uff0c\u8857\u4e0a\u6709\u5f88\u591a\u673a\u623f\u3002\u6bcf\u6240\u673a\u623f\u91cc\u90fd\u6709\u4e00\u4e07\u4e2a\u4eba\u5728\u5207\u9898\u3002Yellow\u54e5\u521a\u5237\u5b8ctopcoder\uff0c\u51c6\u5907\u51fa\u6765\u901b\u901b\u3002 \u673a\u623f\u4e00\u6761\u8857\u6709N\u6240\u673a\u623f\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6bcf\u6240\u673a\u623f\u90fd\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u5750\u6807xi\u3002Yellow\u54e5\u7684\u5bb6\u5750\u6807\u4e3a0\u3002 Yellow\u54e5\u5728\u8857\u4e0a\u79fb\u52a8\u7684\u901f\u5ea6\u4e3a1\uff0c\u5373Yellow\u54e5\u4ecex1\u5230x2\u6240\u8017\u8d39\u7684\u65f6\u95f4\u4e3a|x1-x2|\u3002 \u6bcf\u6240\u673a\u623f\u7684\u5b66\u751f\u6570\u91cf\u4e0d\u540c\uff0cACM\u9898\u76ee\u6c34\u5e73\u4e5f\u826f\u83a0\u4e0d\u9f50\u3002Yellow\u54e5\u5230\u8fbe\u7b2ci\u6240\u673a\u623f\u540e\uff0c\u4ed6\u9700\u8981ti\u7684\u65f6\u95f4\u60f3\u9898\uff0c\u7136\u540e\u201c\u7075\u673a\u4e00\u52a8\uff0c\u5e26\u5d29\u4e09\u8def\u201d\uff0c\u5b8c\u6210AK\u3002 \u5f53\u7136\uff0cYellow\u54e5\u53ef\u4ee5\u53ea\u7ecf\u8fc7\u90a3\u6240\u673a\u623f\u800c\u4e0d\u8fdb\u5165\u3002 Yellow\u54e5\u73b0\u5728\u53ea\u6709T\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0c\u8fc7\u4e86T\u4e2a\u65f6\u95f4\u540e\uff0cYellow\u54e5\u5c31\u8be5\u8d76\u7740\u53bb\u6253Codeforces\u4e86\u3002 \u73b0\u5728Yellow\u54e5\u60f3\u77e5\u9053\uff0c\u5728T\u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\uff0c\u4ed6\u6700\u591a\u80fd\u5e26\u5d29\u591a\u5c11\u6240\u673a\u623f\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570\u5b57N\uff0cT\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\u5b57xi,ti. Output Format \u4e00\u4e2a\u6570Ans,\u8868\u793aYellow\u54e5\u6700\u591a\u80fd\u5e26\u5d29\u7684\u673a\u623f\u6570\u91cf\u3002 Sample Input 2 10 1 100 5 5 Sample Output 5 Sample Illustration Yellow\u54e5\u82b15\u4e2a\u5355\u4f4d\u65f6\u95f4\u7ecf\u8fc7\u7b2c1\u6240\u673a\u623f\uff0c\u8d70\u5230\u7b2c2\u6240\u673a\u623f\uff0c\u82b15\u4e2a\u5355\u4f4d\u65f6\u95f4\u5e26\u5d29\u8fd9\u6240\u673a\u623f\u3002\u6b63\u597d\u7528\u4e8610\u4e2a\u5355\u4f4d\u65f6\u95f4\u3002 \u8fd9\u4e5f\u662f\u6700\u4f18\u65b9\u6848\uff0c\u6ca1\u6709\u5176\u5b83\u66f4\u4f18\u65b9\u6848\u3002 Hint 30%\u7684\u6570\u636e\uff1a1\u2264N\u22641024\uff1b 100%\u7684\u6570\u636e\uff1a1\u2264N\u2264262144\u30010\u2264xi\u226410^18\u30010\u2264ti\u226410^9\u30010\u2264T\u226410^18\u3002 WashSwang's solution Star #include <iostream> using namespace std; long long T,x[300000],walktime,aktime,ans; int heap[600000],num,n,t[300000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} void maxheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&heap[ls(x)]>heap[s]) s=ls(x); if (rs(x)<=num&&heap[rs(x)]>heap[s]) s=rs(x); if (s!=x){ swap(heap[s],heap[x]); x=s; } else break; } } void push(int x){ heap[++num]=x; int now=num; while (now>1&&heap[now]>heap[now>>1]){ swap(heap[now],heap[now>>1]); now>>=1; } } int pop(){ int ret=heap[1]; heap[1]=heap[num]; num--; maxheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,keyt=t[l];long long keyx=x[l]; while (i<j){ while (i<j&&x[j]>=keyx) --j; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);++i;} while (i<j&&x[i]<=keyx) ++i; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);--j;} } x[i]=keyx; t[i]=keyt; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d%lld\",&n,&T); for (int i=0;i<n;++i) scanf(\"%lld%d\",&x[i],&t[i]); qsort(0,n); for (int i=0;i<n;++i) { walktime = x[i]; while (num > 0 && walktime + aktime + t[i] > T && heap[1]>t[i]) aktime -= pop(); if (aktime + walktime + t[i] <= T) { aktime += t[i]; push(t[i]); if (num > ans) ans = num; } } printf(\"%lld\",ans); return 0; }","title":"1290"},{"location":"nr/1290/#1290","text":"\u9898\u76ee","title":"1290 \u7075\u673a\u4e00\u52a8\uff01"},{"location":"nr/1290/#washswangs-solution-star","text":"#include <iostream> using namespace std; long long T,x[300000],walktime,aktime,ans; int heap[600000],num,n,t[300000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} void maxheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&heap[ls(x)]>heap[s]) s=ls(x); if (rs(x)<=num&&heap[rs(x)]>heap[s]) s=rs(x); if (s!=x){ swap(heap[s],heap[x]); x=s; } else break; } } void push(int x){ heap[++num]=x; int now=num; while (now>1&&heap[now]>heap[now>>1]){ swap(heap[now],heap[now>>1]); now>>=1; } } int pop(){ int ret=heap[1]; heap[1]=heap[num]; num--; maxheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,keyt=t[l];long long keyx=x[l]; while (i<j){ while (i<j&&x[j]>=keyx) --j; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);++i;} while (i<j&&x[i]<=keyx) ++i; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);--j;} } x[i]=keyx; t[i]=keyt; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d%lld\",&n,&T); for (int i=0;i<n;++i) scanf(\"%lld%d\",&x[i],&t[i]); qsort(0,n); for (int i=0;i<n;++i) { walktime = x[i]; while (num > 0 && walktime + aktime + t[i] > T && heap[1]>t[i]) aktime -= pop(); if (aktime + walktime + t[i] <= T) { aktime += t[i]; push(t[i]); if (num > ans) ans = num; } } printf(\"%lld\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1292/","text":"1292 easy \u9898\u76ee Description \u7b80\u5355\u7684\u9898\u4e0d\u4e00\u5b9a\u6709\u7b80\u5355\u7684\u6570\u636e\u3002\u6709n\u4e2a\u4f4d\u7f6e\u548cn\u4e2a\u6570\uff0c\u521d\u59cb\u65f6\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u90fd\u653e\u6709\u4e00\u4e2a\u6570\u3002\u6211\u4eec\u53ef\u4ee5\u4e0d\u65ad\u7684\u4ea4\u6362\u4e24\u4e2a\u4e0d\u540c\u4f4d\u7f6e\u4e0a\u7684\u6570\uff0c\u76f4\u5230\u8fbe\u5230\u7ec8\u6b62\u72b6\u6001\u3002 \u7ec8\u6b62\u72b6\u6001\u6307\uff1a\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u90fd\u548c\u4f4d\u7f6e\u4e00\u6837\uff0c\u5373i\u53f7\u4f4d\u4e0a\u7684\u6570\u662fi\u3002 \u540c\u65f6\u6211\u4eec\u5047\u8bbe\u8fdb\u884c\u4e00\u6b21\u4ea4\u6362\u7528\u7684\u65f6\u95f4\u4e3a1\uff0c\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u53ef\u4ee5\u5bf9\u4efb\u610f\u5bf9\u6570\u8fdb\u884c\u4ea4\u6362\u64cd\u4f5c\uff0c\u4f46\u4e0d\u80fd\u5bf9\u4e00\u4e2a\u6570\u8fdb\u884c\u4e24\u6b21\u4ea4\u6362\u3002\u4f8b\u5982\u57281\u7684\u65f6\u95f4\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u4ea4\u63621\u8ddf2\u30013\u8ddf4\u30015\u8ddf6\u22ef\u22ef \u4f46\u4e0d\u80fd\u4ea4\u63621\u8ddf2\u30012\u8ddf3 \u6c42\uff1a 1.\u5230\u8fbe\u7ec8\u6b62\u72b6\u6001\u6700\u5c11\u7ecf\u8fc7\u51e0\u6b21\u4ea4\u6362 2.\u5230\u8fbe\u7ec8\u6b62\u72b6\u6001\u6700\u5c11\u9700\u8981\u7684\u65f6\u95f4 Input Format \u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u753110\u7ec4\u4ee5\u5185\u6570\u636e\u7ec4\u6210\uff0c\u6bcf\u7ec4\u6570\u636e\u7531\u4e24\u884c\u7ec4\u6210 \u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u6574\u6570n,n<=1000000 \u7b2c\u4e8c\u884c\uff1an\u4e2a\u6574\u6570\uff0c\u7b2ci\u4e2a\u6574\u6570a[i]\u8868\u793a\u7b2ci\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u662fa[i] 1<=a[i]<=n Output Format \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e24\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\u3002\u5206\u522b\u662f\u95ee\u98981\u548c2\u7684\u7b54\u6848 Sample Input 2 2 1 2 2 1 Sample Output 1 1 1 1 VictriD's solution Star #include <iostream> using namespace std; //Cyka. I'm a blind starcraft player //I'm a blind starcraft player //I'm a blind starcraft player inline int swapi(int& i, int& j) { int temp = i; i = j; j = temp; return 0; } int main() { int numbers; int maxround[10] = {0}; int totalsteps[10] = {0}; int groupcount = 0; while (~scanf(\"%d\", &numbers)) { int* ff = new int[numbers + 1]; maxround[groupcount] = 0; for (int i = 1; i <= numbers; i++) cin >> ff[i]; for (int i = 1; i <= numbers; i++) { if (ff[i] != i) { int round = 0; //looping int tws1 = i, tws2; while (true) { for (tws2 = i; ff[tws2] != tws1; tws2++) ; swap(ff[tws1], ff[tws2]); totalsteps[groupcount]++; round++; if (round > 2) round = 2; if (ff[tws2] == tws2) { maxround[groupcount] = maxround[groupcount] > round ? maxround[groupcount] : round; break; } tws1 = tws2; } } } groupcount++; } for (int i = 0; i < groupcount; i++) { if (i) cout << endl; cout << totalsteps[i] << endl << maxround[i]; } return 0; }","title":"1292"},{"location":"nr/1292/#1292-easy","text":"\u9898\u76ee","title":"1292 easy"},{"location":"nr/1292/#victrids-solution-star","text":"#include <iostream> using namespace std; //Cyka. I'm a blind starcraft player //I'm a blind starcraft player //I'm a blind starcraft player inline int swapi(int& i, int& j) { int temp = i; i = j; j = temp; return 0; } int main() { int numbers; int maxround[10] = {0}; int totalsteps[10] = {0}; int groupcount = 0; while (~scanf(\"%d\", &numbers)) { int* ff = new int[numbers + 1]; maxround[groupcount] = 0; for (int i = 1; i <= numbers; i++) cin >> ff[i]; for (int i = 1; i <= numbers; i++) { if (ff[i] != i) { int round = 0; //looping int tws1 = i, tws2; while (true) { for (tws2 = i; ff[tws2] != tws1; tws2++) ; swap(ff[tws1], ff[tws2]); totalsteps[groupcount]++; round++; if (round > 2) round = 2; if (ff[tws2] == tws2) { maxround[groupcount] = maxround[groupcount] > round ? maxround[groupcount] : round; break; } tws1 = tws2; } } } groupcount++; } for (int i = 0; i < groupcount; i++) { if (i) cout << endl; cout << totalsteps[i] << endl << maxround[i]; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1299/","text":"1299 \u915d\u917f\u7b97\u6cd5 \u9898\u76ee Description Black Yellow Bar\uff01 Yellow\u54e5\u559c\u6b22\u915d\u917f\u7b97\u6cd5\u3002 \u5f88\u4e45\u5f88\u4e45\u4ee5\u524d\uff0c\u5728Yellow\u54e5\u8fd8\u4e0d\u90a3\u4e48\u51fa\u540d\u7684\u65f6\u5019\u3002\u4ed6\u548c\u57fa\u53cb\u4eec\u53c2\u52a0\u4e86\u67d0\u573aACM\u533a\u57df\u8d5b\u3002\u6bd4\u8d5b\u6218\u51b5\u5341\u5206\u6fc0\u70c8\uff0c\u5df2\u7ecf\u6709\u4e00\u652f\u961f\u4f0d\u5207\u4e867\u9898\u4e86\u3002\u800cYellow\u54e5\u7684\u961f\u4f0d\u624d5\u9898\u3002 Yellow\u54e5\u7684\u961f\u53cb\u4eec\u4e00\u76f4\u5728\u52aa\u529bDebug\u4f46\u4ecd\u7136\u67e5\u4e0d\u51fa\u9519\u3002\u770b\u7740\u961f\u53cb\u4eec\u7684\u8270\u8f9b\u52aa\u529b\u548c\u5176\u5b83\u961f\u4f0d\u5bf9\u4ed6\u4eec\u7684\u8086\u610f\u8df5\u8e0f\uff0cYellow\u54e5\u8fd9\u5c31\u4e0d\u80fd\u5fcd\u4e86\u3002\u915d\u917f\u4e0b\u7b97\u6cd5\uff0c\u8f6c\u8eab\u6254\u51fa\u4ee3\u7801\uff0c\u5b8c\u6210\u4e94\u6740\uff01\u4ee510\u9898AK\u7ed3\u675f\u4e86\u8fd9\u573a\u6bd4\u8d5b\u3002 \u5176\u5b9e\u5207\u9898\u662f\u5176\u6b21\uff0cYellow\u54e5\u559c\u6b22\u7528\u6709\u5a01\u6151\u529b\u7684\u7b97\u6cd5\u6765\u78be\u788e\u5176\u5b83\u961f\u4f0d\u7684\u81ea\u5c0a\u3002\u4f46\u67d0\u4e9b\u7b97\u6cd5\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u7b97\u6cd5\u7684\u652f\u6301\u3002\uff08\u5982\uff1a\u5199\u5757\u72b6\u94fe\u8868\u80af\u5b9a\u8981\u652f\u6301\u666e\u901a\u94fe\u8868\u7684\u64cd\u4f5c\uff09\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5047\u8bbeYellow\u54e5\u6709M\u4e2a\u7b97\u6cd5\u601d\u60f3\uff0c\u7f16\u53f71\u5230M\u3002\u6bcf\u4e2a\u7b97\u6cd5\u601d\u60f3\u6700\u591a\u53ea\u6709\u4e00\u4e2a\u524d\u7f6e\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u62e5\u6709\u524d\u7f6e\u7b97\u6cd5\u7684\u7b97\u6cd5\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u524d\u7f6e\u7b97\u6cd5\u3002\u8fd9\u4e2a\u7b97\u6cd5\u4e5f\u5c06\u4e0d\u80fd\u4f7f\u7528\u3002\u6bcf\u4e2a\u7b97\u6cd5\u6709\u4e2a\u601d\u8003\u65f6\u95f4ti\uff0c\u548c\u7b97\u6cd5\u5a01\u6151\u529bdi\uff0c\u4ee5\u53ca\u5b83\u7684\u524d\u7f6e\u7b97\u6cd5\u601d\u60f3\u7f16\u53f7pi(pi=0\u8868\u793a\u8be5\u7b97\u6cd5\u6ca1\u6709\u524d\u7f6e\u7b97\u6cd5\uff0c\u53ef\u4ee5\u81ea\u7531\u4f7f\u7528)\u3002\u800c\u4e14\uff0c\u53ea\u8981\u7ed9Yellow\u54e5\u65e0\u9650\u957f\u7684\u65f6\u95f4\uff0c\u4ed6\u53ef\u4ee5\u60f3\u51fa\u6240\u6709M\u4e2a\u7b97\u6cd5\uff0c\u5373\u4e0d\u5b58\u5728\u4e00\u4e2a\u7b97\u6cd5\u7684\u76f4\u63a5\u6216\u95f4\u63a5\u7684\u524d\u7f6e\u7b97\u6cd5\u5305\u542b\u5b83\u81ea\u5df1\u3002\u53ef\u60dcYellow\u54e5\u5728ACM\u8d5b\u573a\u4e0a\u53ea\u6709N\u4e2a\u5355\u4f4d\u7684\u65f6\u95f4\u3002\u800c\u5f53\u65f6\uff0cYellow\u54e5\u4ee5\u81ea\u5df1\u5f3a\u5927\u7684\u80fd\u529b\u7ed9\u4e88\u4e86\u5168\u573a\u4ee5\u6700\u5927\u7684\u5a01\u6151\u3002 \u4e3a\u4e86\u8fd8\u539f\u771f\u76f8\uff0c\u8bf7\u8ba1\u7b97\u51faYellow\u54e5\u5f53\u65f6\u9009\u7528\u7684\u7b97\u6cd5\u603b\u7684\u5a01\u6151\u529b\u662f\u591a\u5c11\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570N\uff0cM\u3002 \u63a5\u4e0b\u6765\u7684M\u884c\u4e2d\uff0c\u7b2ci\u884c\u7ed9\u51fa\u7684\u662f\u7b2ci\u79cd\u7b97\u6cd5\u7684ti,di,pi\u3002 Output Format \u4e00\u4e2a\u6570\uff0c\u8868\u793aYellow\u54e5\u7ed9\u51fa\u7684\u6700\u5927\u7b97\u6cd5\u5a01\u6151\u529b\u603b\u548c\u3002 Sample Input 1000 5 800 1600 0 400 2000 1 300 1500 1 400 1200 0 500 1000 0 Sample Output 2200 Sample Illustration Yellow\u54e5\u6254\u51fa\u7b2c4\u30015\u4e2a\u7b97\u6cd5\uff0c\u53d1\u51fa\u603b\u548c\u4e3a2200\u7684\u5a01\u6151\u529b\u3002 \u65e0\u6cd5\u5355\u72ec\u9009\u62e9\u7b2c2\u30013\u4e2a\u7b97\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4eec\u65e0\u6cd5\u5728\u7b2c1\u4e2a\u7b97\u6cd5\u4f7f\u7528\u524d\u4f7f\u7528\u3002 Hint 30%\u7684\u6570\u636e\uff1aN\u2264300\u3001M\u226410\u3002 50%\u7684\u6570\u636e\uff1aN\u2264500\u3001M\u226430\u3002 100%\u7684\u6570\u636e\uff1aN\u226430000\u3001M\u2264300\uff0c\u6240\u6709\u8f93\u5165\u6570\u636e\u4e3a\u6b63\u6574\u6570\u4e14\u5c0f\u4e8e32768. WashSwang's solution Star #include <iostream> using namespace std; int dp[301][30001],power[301],ti[301],n,m,nxt[1000],last[1000],to[1000],num,p,ans; void add(int u,int v){ ++num; nxt[num]=last[u]; last[u]=num; to[num]=v; } void dfs(int x,int v){ if (v<0) return; for (int i=last[x];i;i=nxt[i]){ int t=to[i]; for (int j=0;j<=v;++j) dp[t][j]=dp[x][j]; dfs(t,v-ti[t]); for (int j=ti[t];j<=v;++j) dp[x][j]=max(dp[x][j],dp[t][j-ti[t]]+power[t]); } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=m;++i) { scanf(\"%d%d%d\", &ti[i], &power[i], &p); add(p,i); } dfs(0,n); for (int i=0;i<=n;++i) if (ans<dp[0][i]) ans=dp[0][i]; printf(\"%d\",ans); return 0; }","title":"1299"},{"location":"nr/1299/#1299","text":"\u9898\u76ee","title":"1299 \u915d\u917f\u7b97\u6cd5"},{"location":"nr/1299/#washswangs-solution-star","text":"#include <iostream> using namespace std; int dp[301][30001],power[301],ti[301],n,m,nxt[1000],last[1000],to[1000],num,p,ans; void add(int u,int v){ ++num; nxt[num]=last[u]; last[u]=num; to[num]=v; } void dfs(int x,int v){ if (v<0) return; for (int i=last[x];i;i=nxt[i]){ int t=to[i]; for (int j=0;j<=v;++j) dp[t][j]=dp[x][j]; dfs(t,v-ti[t]); for (int j=ti[t];j<=v;++j) dp[x][j]=max(dp[x][j],dp[t][j-ti[t]]+power[t]); } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=m;++i) { scanf(\"%d%d%d\", &ti[i], &power[i], &p); add(p,i); } dfs(0,n); for (int i=0;i<=n;++i) if (ans<dp[0][i]) ans=dp[0][i]; printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1304/","text":"1304 \u52a8\u91cf\u5b88\u6052 \u9898\u76ee Description \u65f6\u95f4\u9650\u5236\uff1a0.5s \u7a7a\u95f4\u9650\u5236\uff1a64MB \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3aL m\u7684\u5e73\u53f0\u4e0a\uff0c\u653e\u7740N\u4e2a\u8d28\u91cf\u76f8\u540c\u7684\u5c0f\u7403\uff0c\u6bcf\u4e2a\u5c0f\u7403\u7684\u521d\u59cb\u901f\u5ea6\u90fd\u4e3a1m/s\uff0c \u5c0f\u7403\u7684\u8fd0\u52a8\u65b9\u5411\u6309\u7167\u6446\u4e0a\u53bb\u7684\u987a\u5e8f\u95f4\u9694\u7740\u5411\u5de6\u6216\u8005\u5411\u53f3\uff0c\u7b2c\u4e00\u4e2a\u6446\u4e0a\u53bb\u5c0f\u7403\u7684\u8fd0\u52a8\u65b9\u5411\u5411\u53f3\u3002 \u7136\u540e\u95ee\u9898\u6765\u4e86\uff0c\u5c0f\u7403\u6211\u4eec\u8ba4\u4e3a\u5c0f\u7403\u7684\u4f53\u79ef\u5f88\u5c0f\uff0c \u78b0\u649e\u6ee1\u8db3\u52a8\u91cf\u5b88\u6052\u5b9a\u5f8b\uff0c\u4e14\u53d1\u751f\u5b8c\u5168\u5f39\u6027\u78b0\u649e\uff0c\u78b0\u649e\u4e0d\u53d1\u751f\u80fd\u91cf\u635f\u5931\uff0c\u78b0\u649e\u7684\u65f6\u95f4\u975e\u5e38\u77ed\u6682\u53ef\u4ee5\u5ffd\u7565\u3002 \u95ee\u5e73\u53f0\u4e0a\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5c0f\u7403\u5206\u522b\u662f\u5728\u4ec0\u4e48\u65f6\u5019\u6389\u4e0b\u53bb\u7684\u3002 Input Format \u8f93\u5165\u5171\u6709\u4e24\u884c\u3002 \u7b2c1\u884c\u67092\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5c0f\u7403\u7684\u6570\u91cfN\u548c\u5e73\u53f0\u7684\u957f\u5ea6L\u3002 \u7b2c2\u884c\u6709N\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u5c0f\u7403\u5728\u5e73\u53f0\u4e0a\u7684\u4f4d\u7f6e\uff0c\u6309\u7167\u5c0f\u7403\u6446\u4e0a\u53bb\u7684\u987a\u5e8f\u7ed9\u51fa\uff0c\u5e73\u53f0\u7684\u5de6\u7aef\u70b9\u4f4d\u7f6e\u4e3a0\uff0c\u53f3\u7aef\u70b9\u4f4d\u7f6e\u4e3aL\u3002 \u4fdd\u8bc1\u5f00\u59cb\u7684\u65f6\u5019\u6ca1\u6709\u4e24\u4e2a\u5c0f\u7403\u5728\u4e00\u4e2a\u4f4d\u7f6e\u3002 Output Format \u8f93\u51fa\u53ea\u6709\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570\u3002 \u5206\u522b\u8868\u793a\u5c0f\u7403\u6700\u65e9\u6389\u4e0b\u53bb\u7684\u65f6\u95f4\u548c\u6700\u665a\u6389\u4e0b\u53bb\u7684\u65f6\u95f4\u3002 Sample Input 5 10 1 3 5 7 9 Sample Output 1 9 Data Range \u5bf9\u4e8e10%\u7684\u6570\u636e\uff0cN,L<=10\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN<=10000\uff0cL<=1000000000\uff0c\u5c0f\u7403\u7684\u4f4d\u7f6e\u57280..L\u4e4b\u95f4\u3002 \u9274\u4e8e\u524d\u9762\u51e0\u6b21\u673a\u8003\u603b\u662f\u6709\u4eba\u5199\u5341\u4e2a\u70b9\u54041s\u7684\u66b4\u529b\uff0c\u4e3a\u4e86\u8282\u7ea6\u5927\u5bb6\u53cd\u590d\u63d0\u4ea4\u8fdb\u884c\u8bc4\u6d4b\u7684\u65f6\u95f4\uff0c\u7279\u6b640.5s\u3002 vvvvv1v's solution Star #include <iostream> using namespace std; int main() { int N, L; cin >> N >> L; bool dir = true; int mint = L, maxt = 0, pos, time; for (int i = 0; i < N; ++i, dir = !dir) { cin >> pos; if (dir) time = L - pos; else time = pos; if (time < mint) mint = time; if (time > maxt) maxt = time; } cout << mint << ' ' << maxt; return 0; }","title":"1304"},{"location":"nr/1304/#1304","text":"\u9898\u76ee","title":"1304 \u52a8\u91cf\u5b88\u6052"},{"location":"nr/1304/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { int N, L; cin >> N >> L; bool dir = true; int mint = L, maxt = 0, pos, time; for (int i = 0; i < N; ++i, dir = !dir) { cin >> pos; if (dir) time = L - pos; else time = pos; if (time < mint) mint = time; if (time > maxt) maxt = time; } cout << mint << ' ' << maxt; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1324/","text":"1324 basketball \u9898\u76ee Description \u8fd0\u52a8\u4f1a\u9a6c\u4e0a\u5c31\u8981\u5f00\u59cb\u4e86\u3002\u52a9\u6559\u5bf9\u7bee\u7403\u5f88\u611f\u5174\u8da3\uff0c\u6240\u4ee5\u7ec4\u7ec7\u4e86\u4e00\u7cfb\u5217\u7684\u7bee\u7403\u8d5b\uff0c\u5e76\u4e14\u4e3a\u5927\u5bb6\u51c6\u5907\u4e86\u4e30\u539a\u7684\u5956\u91d1\u3002 \u52a9\u6559\u5bf9\u53c2\u52a0\u6bd4\u8d5b\u76842n\u652f\u7403\u961f\u7684\u6218\u6597\u529b\u505a\u4e86\u8bc4\u4f30\uff0c\u5e76\u4e14\u6309\u8bc4\u4f30\u503c\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7ed9\u4ed6\u4eec\u7f16\u53f7\u4e3a0, 1, 2, \u2026, 2n-1\u3002\u4f46\u662f\u52a9\u6559\u7684\u8bc4\u4f30\u662f\u4e0d\u51c6\u786e\u3002\u53e6\u5916\uff0c\u6709\u4e9b\u961f\u4f0d\u867d\u7136\u6218\u6597\u529b\u8f83\u4f4e\uff0c\u4f46\u662f\u4ed6\u4eec\u7684\u6218\u672f\u53ef\u80fd\u514b\u5236\u67d0\u4e2a\u6218\u6597\u529b\u9ad8\u7684\u961f\u4f0d\u3002\u6240\u4ee5\uff0c\u5982\u679c\u961f\u4f0di\u7684\u5b9e\u9645\u6218\u6597\u529b\u6570\u503c\u6574\u9664\u961f\u4f0dj\u7684\u5b9e\u9645\u6218\u6597\u529b\uff0c\u90a3\u4e48\u961f\u4f0di\u5c31\u4f1a\u80dc\u51fa\u6bd4\u8d5b\uff0c\u5426\u5219\u5b9e\u9645\u6218\u6597\u529b\u66f4\u9ad8\u7684\u961f\u4f0d\u4f1a\u80dc\u51fa\u6bd4\u8d5b\u3002\u4fdd\u8bc1\u6ca1\u6709\u4e24\u652f\u961f\u4f0d\u7684\u5b9e\u9645\u6218\u6597\u529b\u76f8\u7b49\u3002 \u8d62\u5f97\u6bd4\u8d5b\u7684\u4eba\u4f1a\u83b7\u5f971\u70b9\u7684\u5956\u91d1\u3002\u6b64\u5916\uff0c\u5982\u679c\u6bd4\u8d5b\u7206\u51b7\uff0c\u5373\u8bc4\u4f30\u503c\u8f83\u4f4e\u7684\u961f\u4f0d\u83b7\u5f97\u4e86\u80dc\u5229\uff0c\u90a3\u4e48\u5c06\u989d\u5916\u83b7\u5f971\u70b9\u7684\u5956\u91d1\u3002 \u5728\u6bcf\u4e00\u8f6e\u6bd4\u8d5b\u5f00\u59cb\u524d\uff0c\u6240\u6709\u961f\u4f0d\u7684\u5956\u91d1\u90fd\u662f0\u3002\u52a9\u6559\u4f1a\u5c06\u6240\u6709\u7684\u961f\u4f0d\u8fdb\u884c\u6392\u5e8f\u3002\u5f53\u524d\u5956\u91d1\u8f83\u4f4e\u7684\u961f\u4f0d\u6392\u5728\u524d\u9762\uff1b\u5bf9\u4e8e\u5956\u91d1\u6570\u76f8\u7b49\u7684\u961f\u4f0d\uff0c\u8bc4\u4f30\u503c\u66f4\u4f4e\u7684\u961f\u4f0d\u6392\u5728\u524d\u9762\u3002\u7b2c2i\u652f\u961f\u4f0d\u4e0e\u7b2c2i+1\u652f\u961f\u4f0d\u8fdb\u884c\u6bd4\u8d5b\uff080 <= i < n\uff09\u3002\u4e00\u5171\u8fdb\u884cR\u8f6e\u6bd4\u8d5b\u3002 \u52a9\u6559\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u8fd92n\u652f\u961f\u4f0d\u6700\u540e\u83b7\u5f97\u7684\u5956\u91d1\u6570\u76ee\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6b63\u6574\u6570N,R\uff1b \u7b2c\u4e8c\u884c\u67092n\u4e2a\u6b63\u6574\u6570\uff0c\u7b2ci\u4e2a\u6570\u636e\u8868\u793a\u961f\u4f0di\u7684\u5b9e\u9645\u6218\u6597\u529b\u3002 Output Format \u4e00\u884c2n\u4e2a\u6574\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u7b2ci\u4e2a\u6570\u5b57\u8868\u793a\u961f\u4f0di\u83b7\u5f97\u7684\u5956\u91d1 Sample Input 5 3 1 2 3 4 5 6 7 8 9 10 Sample Output 6 0 1 2 1 1 2 2 1 2 Constraints \u5bf9\u4e8e40%\u7684\u6570\u636e\uff0c1 <= 1000, R<= 10\uff1b \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0c1 <= n <= 10000,R <= 100; \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 <= n <= 50000, R <= 500. WashSwang's solution Star #include <iostream> using namespace std; struct team{ int p,m,t; //p:power m:money t:team number }; team s[110000],tmp[110000],cold[110000],win[110000],lose[110000]; int a,b,r,n,coldn,winn,losen,ans[110000]; void merge(team *r, team *s, team *t, int l1, int l2){ int i=0,j=0,index=0; while (i<l1&&j<l2){ if (s[i].m<t[j].m) r[index++]=s[i++]; else if (s[i].m>t[j].m) r[index++]=t[j++]; else if (s[i].t<t[j].t) r[index++]=s[i++]; else r[index++]=t[j++]; } if (i<l1) while (i<l1) r[index++]=s[i++]; if (j<l2) while (j<l2) r[index++]=t[j++]; } int main() { scanf(\"%d%d\",&n,&r); for (int i=0;i<2*n;++i){ scanf(\"%d\",&s[i].p); s[i].t=i; } for (int i=0;i<r;++i){ coldn=winn=losen=0; for (int j=0;j<n;++j){ a=j<<1; b=a|1; if (s[a].p%s[b].p==0||(s[b].p>s[a].p&&s[b].p%s[a].p!=0)){ if (s[b].t>s[a].t){ s[b].m+=1; win[winn++]=s[b]; lose[losen++]=s[a]; } else{ s[b].m+=2; cold[coldn++]=s[b]; lose[losen++]=s[a]; } } else{ if (s[b].t<s[a].t){ s[a].m+=1; win[winn++]=s[a]; lose[losen++]=s[b]; } else{ s[a].m+=2; cold[coldn++]=s[a]; lose[losen++]=s[b]; } } } merge(tmp,win,cold,winn,coldn); merge(s,tmp,lose,winn+coldn,losen); } for (int i=0;i<2*n;++i) ans[s[i].t]=s[i].m; for (int i=0;i<2*n;++i) printf(\"%d \",ans[i]); return 0; }","title":"1324"},{"location":"nr/1324/#1324-basketball","text":"\u9898\u76ee","title":"1324 basketball"},{"location":"nr/1324/#washswangs-solution-star","text":"#include <iostream> using namespace std; struct team{ int p,m,t; //p:power m:money t:team number }; team s[110000],tmp[110000],cold[110000],win[110000],lose[110000]; int a,b,r,n,coldn,winn,losen,ans[110000]; void merge(team *r, team *s, team *t, int l1, int l2){ int i=0,j=0,index=0; while (i<l1&&j<l2){ if (s[i].m<t[j].m) r[index++]=s[i++]; else if (s[i].m>t[j].m) r[index++]=t[j++]; else if (s[i].t<t[j].t) r[index++]=s[i++]; else r[index++]=t[j++]; } if (i<l1) while (i<l1) r[index++]=s[i++]; if (j<l2) while (j<l2) r[index++]=t[j++]; } int main() { scanf(\"%d%d\",&n,&r); for (int i=0;i<2*n;++i){ scanf(\"%d\",&s[i].p); s[i].t=i; } for (int i=0;i<r;++i){ coldn=winn=losen=0; for (int j=0;j<n;++j){ a=j<<1; b=a|1; if (s[a].p%s[b].p==0||(s[b].p>s[a].p&&s[b].p%s[a].p!=0)){ if (s[b].t>s[a].t){ s[b].m+=1; win[winn++]=s[b]; lose[losen++]=s[a]; } else{ s[b].m+=2; cold[coldn++]=s[b]; lose[losen++]=s[a]; } } else{ if (s[b].t<s[a].t){ s[a].m+=1; win[winn++]=s[a]; lose[losen++]=s[b]; } else{ s[a].m+=2; cold[coldn++]=s[a]; lose[losen++]=s[b]; } } } merge(tmp,win,cold,winn,coldn); merge(s,tmp,lose,winn+coldn,losen); } for (int i=0;i<2*n;++i) ans[s[i].t]=s[i].m; for (int i=0;i<2*n;++i) printf(\"%d \",ans[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1338/","text":"1338 puzzle \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u840c\u840c\u7684\u6b7b\u795e\u6700\u8ba8\u538c\u6570\u5b66\u9898\u4e86\uff0c\u8ba8\u538c\u8ba8\u538c\u771f\u662f\u8ba8\u538c\u6b7b\u4e86\u3002 \u8fd9\u4e0d\uff0c\u6b7b\u795e\u4e00\u751f\u7684\u597d\u670b\u53cbgingkgo\u53c8\u62ff\u6570\u5b66\u9898\u6765\u96be\u4e3a\u4ed6\u4e86\u3002\u63a5\u5230\u9898\u76ee\u540e\uff0c\u6b7b\u795e\u539f\u672c\u7709\u98de\u8272\u821e\u7684\u8138\u77ac\u95f4\u77f3\u5316\u4e86\uff0c\u771f\u662f\u8ba8\u538c\u6b7b\u4e86\u3002 \u5e78\u4e8f\u8fd8\u6709\u4f60\u4eec\u8fd9\u7fa4\u597d\u670b\u53cb\u5462\uff01\u5982\u679c\u6ca1\u6709\u7684\u8bdd\uff0c\u4e8b\u60c5\u624d\u4e0d\u77e5\u9053\u4f1a\u600e\u4e48\u6837\u5462\uff01 \u73b0\u5728\u95ee\u9898\u6765\u4e86\uff0c\u7ed9\u4f602\u4e2a\u6570\u7ec4a[]\u548cb[]\uff0c\u4ed6\u4eec\u6709\u76f8\u540c\u7684\u957f\u5ea6n\uff0c\u4f60\u53ef\u4ee5\u4efb\u610f\u4ea4\u6362\u4e00\u4e2a\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u6211\u4eec\u5b9a\u4e49\u51fd\u6570 $$ x = \\sum a[i] * b[i] $$ \u73b0\u5728\uff0c\u6b7b\u795e\u8bf7\u4f60\u544a\u8bc9\u4ed6\uff0cx\u6700\u5927\u53ef\u4ee5\u53d6\u5230\u591a\u5c11\uff0c\u6700\u5c0f\u53ef\u4ee5\u53d6\u5230\u591a\u5c11\uff1f\u771f\u662f\u8ba8\u538c\u6b7b\u4e86\u3002 \u8f93\u5165\u8bf4\u660e \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570n\uff0c\u4ee3\u8868\u6570\u7ec4\u7684\u957f\u5ea6\uff1b \u7b2c\u4e8c\u884c\u6570\u7ec4a\uff0c\u6700\u540e\u4e00\u884c\u6570\u7ec4b\uff1b \u8f93\u51fa\u8bf4\u660e \u8f93\u51fa\u4e24\u4e2a\u6574\u6570\u4ee3\u8868\u7b54\u6848\uff1b Sample input 2 10 3 10 9 Sample output 127 120 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e40%\u7684\u6570\u636e\uff0c\\( n \\leq 10 \\)\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\( n \\leq 100000 \\)\uff0c\\( 1 \\leq a[i] , b[i] \\leq 100000 \\)\uff1b VictriD's solution Star #include <iostream> using namespace std; long int* MergeSort(long int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { long int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } long int* tmplist = new long int[listSize]; long int* llst = MergeSort(list, listSize / 2); long int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) list[i] = tmplist[i]; return list; } int main() { //Chebyshyov neravyenctvo int m; cin >> m; //! MUST BE A LONG INT! long int* l1 = new long int[m]; long int* l2 = new long int[m]; for (int i = 0; i < m; i++) { cin >> l1[i]; } for (int i = 0; i < m; i++) { cin >> l2[i]; } MergeSort(l1, m); MergeSort(l2, m); // for (int i = 0; i < m; i++) { // cout << l1[i] << ' '; // } long int max = 0, min = 0; for (int i = 0; i < m; i++) { max += l1[i] * l2[i]; min += l1[i] * l2[m - i - 1]; } cout << max << ' ' << min; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; const int MAXNUM = 100005; void quicksort(unsigned long int arr[], int low, int high) { if (low >= high) return; int k = arr[low], lf = low, rh = high, tmp; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(arr, low, lf - 1); quicksort(arr, rh + 1, high); } int main() { unsigned long int n, sum, arr1[MAXNUM], arr2[MAXNUM]; cin >> n; for (int i = 0; i < n; ++i) cin >> arr1[i]; for (int i = 0; i < n; ++i) cin >> arr2[i]; quicksort(arr1, 0, n - 1); quicksort(arr2, 0, n - 1); sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[i]; cout << sum << endl; sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[n - i - 1]; cout << sum << endl; return 0; }","title":"1338"},{"location":"nr/1338/#1338-puzzle","text":"\u9898\u76ee","title":"1338 puzzle"},{"location":"nr/1338/#victrids-solution-star","text":"#include <iostream> using namespace std; long int* MergeSort(long int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { long int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } long int* tmplist = new long int[listSize]; long int* llst = MergeSort(list, listSize / 2); long int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) list[i] = tmplist[i]; return list; } int main() { //Chebyshyov neravyenctvo int m; cin >> m; //! MUST BE A LONG INT! long int* l1 = new long int[m]; long int* l2 = new long int[m]; for (int i = 0; i < m; i++) { cin >> l1[i]; } for (int i = 0; i < m; i++) { cin >> l2[i]; } MergeSort(l1, m); MergeSort(l2, m); // for (int i = 0; i < m; i++) { // cout << l1[i] << ' '; // } long int max = 0, min = 0; for (int i = 0; i < m; i++) { max += l1[i] * l2[i]; min += l1[i] * l2[m - i - 1]; } cout << max << ' ' << min; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1338/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; const int MAXNUM = 100005; void quicksort(unsigned long int arr[], int low, int high) { if (low >= high) return; int k = arr[low], lf = low, rh = high, tmp; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(arr, low, lf - 1); quicksort(arr, rh + 1, high); } int main() { unsigned long int n, sum, arr1[MAXNUM], arr2[MAXNUM]; cin >> n; for (int i = 0; i < n; ++i) cin >> arr1[i]; for (int i = 0; i < n; ++i) cin >> arr2[i]; quicksort(arr1, 0, n - 1); quicksort(arr2, 0, n - 1); sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[i]; cout << sum << endl; sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[n - i - 1]; cout << sum << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1356/","text":"1356 \u6700\u5927\u5b69\u5b50 \u9898\u76ee Description \u73b0\u5728\u7ed9\u5b9a\u4e00\u4e2a\u6811\u5185\u6240\u6709\u8fb9\uff0c\u6811\u7684\u6839\u8282\u70b9\u7f16\u53f7\u4ee5\u53ca\u51e0\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa\u88ab\u8be2\u95ee\u7684\u8282\u70b9\u7684\u6700\u5927\u5b69\u5b50\u7684\u53f7\u7801\u3002\u5982\u679c\u88ab\u8be2\u95ee\u7684\u8282\u70b9\u6ca1\u6709\u5b69\u5b50\uff0c\u8f93\u51fa-1\u3002 Input Format \u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u6574\u6570N\uff0cR\uff0c\u7a7a\u683c\u5206\u5f00\u3002\u5176\u4e2dN (1 <= N <= 100000)\u4e3a\u8282\u70b9\u6570\u91cf\uff0cR\u4e3a\u6839\u8282\u70b9\u7684\u6807\u53f7\u3002 \u63a5\u4e0b\u6765N-1\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u7a7a\u683c\u5206\u9694\u3002\u4ee3\u8868x\u8282\u70b9\u548cy\u8282\u70b9\u76f8\u4e92\u8fde\u63a5\uff0c(0 <= x,y < N)\u3002 \u7b2c(N+1)\u884c\uff1a\u4e00\u4e2a\u6574\u6570Q (1 <= Q <= 100000)\uff0c\u4ee3\u8868\u64cd\u4f5c\u6570\u91cf\u3002 \u63a5\u4e0b\u6765Q\u884c\uff1a\u4e00\u4e2a\u6574\u6570u\u3002u (0 <= u < N)\u4e3a\u88ab\u8be2\u95ee\u7684\u8282\u70b9\u53f7\u7801\u3002 Output Format \u5171Q\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570k\u3002 k\u4e3a\u88ab\u8be2\u95ee\u7684\u8282\u70b9\u7684\u5b69\u5b50\u4e2d\u53f7\u7801\u6700\u5927\u7684\u53f7\u7801\u3002 Input Sample 3 2 0 1 1 2 3 0 1 2 Output Sample -1 0 1 WashSwang's solution Star #include <iostream> #include <cstring> #include <cstdio> using namespace std; int x,y,n,r,q,num=1,last[300000],to[300000],ne[300000],maxson[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); maxson[x]=max(maxson[x],to[i]); } } int main() { memset(maxson,-1,sizeof(maxson)); scanf(\"%d%d\",&n,&r); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } find(r); scanf(\"%d\",&q); for (int i=0;i<q;++i) { scanf(\"%d\",&x); printf(\"%d\\n\",maxson[x]); } return 0; }","title":"1356"},{"location":"nr/1356/#1356","text":"\u9898\u76ee","title":"1356 \u6700\u5927\u5b69\u5b50"},{"location":"nr/1356/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; int x,y,n,r,q,num=1,last[300000],to[300000],ne[300000],maxson[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); maxson[x]=max(maxson[x],to[i]); } } int main() { memset(maxson,-1,sizeof(maxson)); scanf(\"%d%d\",&n,&r); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } find(r); scanf(\"%d\",&q); for (int i=0;i<q;++i) { scanf(\"%d\",&x); printf(\"%d\\n\",maxson[x]); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1358/","text":"1358 \u5206\u5272\u6811 \u9898\u76ee Description \u73b0\u5728\u6709\u4e00\u68f5\u6811T\uff0c\u6709N\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u60f3\u901a\u8fc7\u53bb\u6389\u4e00\u4e2a\u8282\u70b9p\u6765\u628aT\u5206\u5272\u6210\u66f4\u5c0f\u7684\u6811\uff0c\u5e76\u4e14\u6ee1\u8db3\u6bcf\u4e2a\u5c0f\u6811\u4e2d\u7684\u8282\u70b9\u6570\u4e0d\u8d85\u8fc7n/2\u3002 \u8bf7\u6839\u636e\u8f93\u5165\u7684\u6811\u6765\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u7684p\u7684\u53f7\u7801\u3002 Input Format \u7b2c1\u884c\uff1a\u4e00\u4e2a\u6574\u6570N\uff0c\u4ee3\u8868\u6709N\u4e2a\u8282\u70b9\uff0c\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u7f16\u53f7\u4e3a1,2,...,N\u3002 \u7b2c2~N\u884c\uff1a\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x,y\uff0c\u4ee3\u8868\u8282\u70b9x\u548c\u8282\u70b9y\u4e4b\u95f4\u8fde\u901a\u3002 Output Format \u4ece\u5c0f\u5230\u5927\u4e00\u6b21\u8f93\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684p\u7684\u53f7\u7801\uff0c\u6bcf\u884c1\u4e2a\u53ef\u884c\u89e3\u3002 Input Sample 10 1 2 2 3 3 4 4 5 6 7 7 8 8 9 9 10 3 8 Output Sample 3 8 \u6837\u4f8b\u89e3\u91ca \u5f533\u53f7\u8282\u70b9/8\u53f7\u8282\u70b9\u88ab\u5220\u9664\uff0c\u6b64\u65f6\u5269\u4e0b\u7684\u6811\u7684\u8282\u70b9\u6570\u5206\u522b\u4e3a2\u30012\u30015\uff0c\u5747\u4e0d\u5927\u4e8e10/2=5\uff0c\u800c\u5176\u4ed6\u7684\u8282\u70b9\u4e2d\uff0c\u65e0\u8bba\u54ea\u4e00\u4e2a\uff0c\u603b\u6709\u4e00\u68f5\u6811\u7684\u5927\u5c0f\u5927\u4e8e\u7b49\u4e8e6\u3002 FineArtz's solution Star /* \u5206\u5272\u6811 */ #include <iostream> #include <cassert> using namespace std; const int MAXN = 200000; int head[MAXN + 5] = {0}, ed[MAXN * 2 + 5] = {0}, nxt[MAXN * 2+ 5] = {0}, cnt = 0; int sum[MAXN + 5] = {0}, fa[MAXN + 5] = {0}; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nx[MAXN + 5] = {0}, m = 0; int n; bool b[MAXN + 5] = {0}; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; } void addedge(int u, int v){ ++m; nx[m] = h[u]; e[m] = v; h[u] = m; } int buildTree(int x){ sum[x] = 1; for (int i = head[x]; i != 0; i = nxt[i]){ if (!b[ed[i]]){ int k = ed[i]; b[k] = true; addedge(x, k); fa[k] = x; sum[x] += buildTree(k); } } return sum[x]; } bool check(int x){ int k = sum[1] - sum[x]; if (k > n / 2) return false; for (int i = h[x]; i != 0; i = nx[i]){ if (sum[e[i]] > n / 2) return false; } return true; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); addEdge(v, u); } b[1] = true; buildTree(1); for (int i = 1; i <= n; ++i){ if (check(i)){ cout << i << '\\n'; } } return 0; } WashSwang's solution Star #include <iostream> #include <cstring> #include <cstdio> #include <algorithm> using namespace std; int x,y,n,num=1,ans,ansset[300000],last[300000],to[300000],ne[300000],son[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ bool fea=true; vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); if (son[to[i]]>n/2) fea=false; son[x]+=son[to[i]]; } if (n-son[x]>n/2) fea=false; if (fea) ansset[ans++]=x; } int main() { scanf(\"%d\",&n); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } for (int i=1;i<=n;++i) son[i]=1; find(1); sort(ansset,ansset+ans); for (int i=0;i<ans;++i) printf(\"%d\\n\",ansset[i]); return 0; }","title":"1358"},{"location":"nr/1358/#1358","text":"\u9898\u76ee","title":"1358 \u5206\u5272\u6811"},{"location":"nr/1358/#fineartzs-solution-star","text":"/* \u5206\u5272\u6811 */ #include <iostream> #include <cassert> using namespace std; const int MAXN = 200000; int head[MAXN + 5] = {0}, ed[MAXN * 2 + 5] = {0}, nxt[MAXN * 2+ 5] = {0}, cnt = 0; int sum[MAXN + 5] = {0}, fa[MAXN + 5] = {0}; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nx[MAXN + 5] = {0}, m = 0; int n; bool b[MAXN + 5] = {0}; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; } void addedge(int u, int v){ ++m; nx[m] = h[u]; e[m] = v; h[u] = m; } int buildTree(int x){ sum[x] = 1; for (int i = head[x]; i != 0; i = nxt[i]){ if (!b[ed[i]]){ int k = ed[i]; b[k] = true; addedge(x, k); fa[k] = x; sum[x] += buildTree(k); } } return sum[x]; } bool check(int x){ int k = sum[1] - sum[x]; if (k > n / 2) return false; for (int i = h[x]; i != 0; i = nx[i]){ if (sum[e[i]] > n / 2) return false; } return true; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); addEdge(v, u); } b[1] = true; buildTree(1); for (int i = 1; i <= n; ++i){ if (check(i)){ cout << i << '\\n'; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1358/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <cstdio> #include <algorithm> using namespace std; int x,y,n,num=1,ans,ansset[300000],last[300000],to[300000],ne[300000],son[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ bool fea=true; vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); if (son[to[i]]>n/2) fea=false; son[x]+=son[to[i]]; } if (n-son[x]>n/2) fea=false; if (fea) ansset[ans++]=x; } int main() { scanf(\"%d\",&n); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } for (int i=1;i<=n;++i) son[i]=1; find(1); sort(ansset,ansset+ans); for (int i=0;i<ans;++i) printf(\"%d\\n\",ansset[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1359/","text":"1359 \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 \u9898\u76ee Description \u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u742a\u9732\u8bfa\u4e0d\u64c5\u957f\u7b97\u672f\u3002\u53ef\u662f\u5927\u5c0f\u59d0\u4e01\u59d0\u786c\u8981\u5979\u52a0\u5bc6\u4e00\u4e32\u5b57\u7b26\u4e32\u3002\u52a0\u5bc6\u7684\u65b9\u6cd5\u5012\u4e5f\u5f88\u7b80\u5355\uff0c\u5047\u8bbeA=1\uff0cB=2\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff1ba=27\uff0cb=28\u4ee5\u6b64\u7c7b\u63a8\uff1b\u7a7a\u683c=0\u3002\u5bf9\u4e8e\u8f93\u5165\u7684\u5b57\u7b26\u4e32\uff0c\u52a0\u5bc6\u7684\u7ed3\u679c\u5c31\u662f\u5b57\u7b26\u4e32\u6bcf\u4e00\u4f4d\u5bf9\u5e94\u7684\u6570\u503c\u4e58\u4ee5\u8fd9\u4e00\u4f4d\u4e0b\u6807\u4e4b\u548c\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\u3002\u6bd4\u5982ACEe\u52a0\u5bc6\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a ACEeA\u52a0\u5bc6\u4e3a\uff1a1\u00d71 + 2\u00d73 + 3\u00d75 + 4\u00d731 + 5\u00d71= 151 \u53ef\u662f\u5c31\u7b97\u8fd9\u4e48\u7b80\u5355\uff0c\u742a\u9732\u8bfa\u8fd8\u662f\u65e0\u6240\u9002\u4ece\uff0c\u8bf7\u4f60\u5e2e\u5e2e\u5979\u3002 Input Format \u4e00\u884c\u5b57\u7b26\u4e32\uff0c\u4fdd\u8bc1\u53ea\u5305\u542b\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u3002\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc71000\uff0c\u5e76\u4e14\u9996\u4f4d\u548c\u672b\u4f4d\u4e0d\u662f\u7a7a\u683c\u3002 Output Format \u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u52a0\u5bc6\u7ed3\u679c\u3002 Sample Input Welcome to SJTU Sample Output 2748 VictriD's solution Star #include <cstring> #include <iostream> using namespace std; int pharse(char chz) { if (chz == ' ') return 0; return chz - 'A' >= 26 ? chz - 'a' + 27 : chz - 'A' + 1; } int main() { string chs; int ans = 0; getline(cin, chs); for (int i = 0; chs[i] != '\\0'; i++) { ans += (i + 1) * pharse(chs[i]); } cout << ans; return 0; } FineArtz's solution Star /* \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 */ #include <iostream> using namespace std; int main(){ char ch; int ans = 0, i = 0; while (cin.get(ch)){ ++i; int p = 0; if ((ch >= 'A') && (ch <= 'Z')) p = ch - 'A' + 1; if ((ch >= 'a') && (ch <= 'z')) p = ch - 'a' + 27; ans += p * i; } cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; int main() { char arr[1005]; cin.getline(arr, 1001); int sum = 0; for (int i = 0; i < strlen(arr); ++i) { if (arr[i] == ' ') continue; else if (arr[i] >= 'A' && arr[i] <= 'Z') sum += (i + 1) * (arr[i] - 'A' + 1); else sum += (i + 1) * (arr[i] - 'a' + 27); } cout << sum; return 0; }","title":"1359"},{"location":"nr/1359/#1359","text":"\u9898\u76ee","title":"1359 \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6"},{"location":"nr/1359/#victrids-solution-star","text":"#include <cstring> #include <iostream> using namespace std; int pharse(char chz) { if (chz == ' ') return 0; return chz - 'A' >= 26 ? chz - 'a' + 27 : chz - 'A' + 1; } int main() { string chs; int ans = 0; getline(cin, chs); for (int i = 0; chs[i] != '\\0'; i++) { ans += (i + 1) * pharse(chs[i]); } cout << ans; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1359/#fineartzs-solution-star","text":"/* \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 */ #include <iostream> using namespace std; int main(){ char ch; int ans = 0, i = 0; while (cin.get(ch)){ ++i; int p = 0; if ((ch >= 'A') && (ch <= 'Z')) p = ch - 'A' + 1; if ((ch >= 'a') && (ch <= 'z')) p = ch - 'a' + 27; ans += p * i; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1359/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int main() { char arr[1005]; cin.getline(arr, 1001); int sum = 0; for (int i = 0; i < strlen(arr); ++i) { if (arr[i] == ' ') continue; else if (arr[i] >= 'A' && arr[i] <= 'Z') sum += (i + 1) * (arr[i] - 'A' + 1); else sum += (i + 1) * (arr[i] - 'a' + 27); } cout << sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1360/","text":"1360 \u5076\u50cf\u4e01\u59d0\u7684\u70e6\u607c \u9898\u76ee Description \u6210\u4e3aLL\u51a0\u519b\u7684\u4eba\u6c14\u5076\u50cf\u4e01\u59d0\u6700\u8fd1\u6bd4\u8f83\u70e6\uff0c\u8bb8\u591a\u5546\u4e1a\u6d3b\u52a8\u627e\u4e0a\u95e8\u6765\u3002\u56e0\u4e3a\u6bcf\u6b21\u5546\u4e1a\u6d3b\u52a8\u7ed9\u7684\u6bdb\u7237\u7237\u90fd\u4e00\u6837\uff0c\u6240\u4ee5\u4e01\u59d0\u5e0c\u671b\u80fd\u591f\u5c3d\u53ef\u80fd\u591a\u7684\u53c2\u52a0\u8fd9\u4e9b\u6d3b\u52a8\u3002\u7136\u800c\uff0c\u5546\u4e1a\u6d3b\u52a8\u7684\u8d77\u6b62\u65f6\u95f4\u5e76\u4e0d\u7531\u4e01\u59d0\u8bf4\u4e86\u7b97\uff0c\u56e0\u6b64\u4e01\u59d0\u60f3\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u6c42\u51fa\u4ed6\u6700\u591a\u80fd\u591f\u53c2\u52a0\u7684\u5546\u4e1a\u6d3b\u52a8\u7684\u6570\u91cf\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u53ef\u9009\u6d3b\u52a8\u7684\u6570\u91cf\u3002 \u63a5\u4e0bn\u884c\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u6d3b\u52a8\u5f00\u59cb\u65f6\u95f4t1_i\u548c\u7ed3\u675f\u7684\u65f6\u95f4t2_i\u3002 Output Format \u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u4e01\u59d0\u6700\u591a\u80fd\u591f\u53c2\u52a0\u7684\u6d3b\u52a8\u7684\u6570\u91cf\u3002 Sample Input 10 0 3 0 5 10 13 12 15 2 6 4 8 9 11 13 18 14 16 15 20 Sample Output 5 Hint \u6837\u4f8b\u9009\u53d6\u7684\u6d3b\u52a8\u65f6\u95f4\u4e3a\uff1a(0, 3), (4, 8), (9, 11), (12, 15), (15, 20) n\u2264100000 0\u2264t1_i\uff1ct2_i\u22641000000 VictriD's solution Star #include <iostream> using namespace std; struct t { int t1; int t2; }; t* MergeSort(t* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].t2 > list[1].t2) { t temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } t* tmplist = new t[listSize]; t* llst = MergeSort(list, listSize / 2); t* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct].t2 <= rlst[rct].t2 && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } inline int maxi(int i1, int i2) { return i1 > i2 ? i1 : i2; } int main() { int n; cin >> n; t *timeset = new t[n], *moveptr = timeset; for (int i = 0; i < n; i++) { cin >> timeset[i].t1; cin >> timeset[i].t2; } MergeSort(timeset, n); int* totalis = new int[timeset[n - 1].t2 + 1]; totalis[0] = 0; for (int i = 1; i < timeset[n - 1].t2 + 1; i++) { while (moveptr->t2 < i) { moveptr++; } totalis[i] = totalis[i - 1]; while (moveptr->t2 == i) { totalis[i] = maxi(totalis[i], totalis[moveptr->t1] + 1); moveptr++; } } cout << totalis[timeset[n - 1].t2]; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; struct activity { int t1, t2; }arr[100005]; int n; int count = 1; int last; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low].t2; int lf = low, rh = high; activity tmp; while (lf < rh) { while (lf < rh && arr[rh].t2 >= k) --rh; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } while (lf < rh && arr[lf].t2 <= k) ++lf; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int main() { cin >> n; for (int i = 0; i < n; ++i) scanf(\"%d%d\", &arr[i].t1, &arr[i].t2); quicksort(0, n - 1); last = arr[0].t2; for (int i = 1; i < n; ++i) { if (arr[i].t1 >= last) { last = arr[i].t2; ++count; } } printf(\"%d\", count); return 0; }","title":"1360"},{"location":"nr/1360/#1360","text":"\u9898\u76ee","title":"1360 \u5076\u50cf\u4e01\u59d0\u7684\u70e6\u607c"},{"location":"nr/1360/#victrids-solution-star","text":"#include <iostream> using namespace std; struct t { int t1; int t2; }; t* MergeSort(t* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].t2 > list[1].t2) { t temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } t* tmplist = new t[listSize]; t* llst = MergeSort(list, listSize / 2); t* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct].t2 <= rlst[rct].t2 && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } inline int maxi(int i1, int i2) { return i1 > i2 ? i1 : i2; } int main() { int n; cin >> n; t *timeset = new t[n], *moveptr = timeset; for (int i = 0; i < n; i++) { cin >> timeset[i].t1; cin >> timeset[i].t2; } MergeSort(timeset, n); int* totalis = new int[timeset[n - 1].t2 + 1]; totalis[0] = 0; for (int i = 1; i < timeset[n - 1].t2 + 1; i++) { while (moveptr->t2 < i) { moveptr++; } totalis[i] = totalis[i - 1]; while (moveptr->t2 == i) { totalis[i] = maxi(totalis[i], totalis[moveptr->t1] + 1); moveptr++; } } cout << totalis[timeset[n - 1].t2]; return 0; }","title":"VictriD's solution Star"},{"location":"nr/1360/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; struct activity { int t1, t2; }arr[100005]; int n; int count = 1; int last; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low].t2; int lf = low, rh = high; activity tmp; while (lf < rh) { while (lf < rh && arr[rh].t2 >= k) --rh; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } while (lf < rh && arr[lf].t2 <= k) ++lf; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int main() { cin >> n; for (int i = 0; i < n; ++i) scanf(\"%d%d\", &arr[i].t1, &arr[i].t2); quicksort(0, n - 1); last = arr[0].t2; for (int i = 1; i < n; ++i) { if (arr[i].t1 >= last) { last = arr[i].t2; ++count; } } printf(\"%d\", count); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1370/","text":"1370 \u8d6b\u841d\u7684\u6843\u5b50 \u9898\u76ee Description \u8d6b\u841d\u6700\u559c\u6b22\u5403\u8702\u871c\u814c\u6e0d\u7684\u6843\u5b50\u3002\u7136\u800c\u5979\u80fd\u591f\u5f97\u5230\u7684\u6843\u5b50\u6709\u9650\uff0c\u56e0\u6b64\u8d6b\u841d\u5fc5\u987b\u7cbe\u6253\u7ec6\u7b97\u3002\u8d6b\u841d\u5728b\u5929\u5185\u53ef\u4ee5\u5f97\u5230a\u4e2a\u6843\u5b50\uff0c\u6bcf\u5929\u8d6b\u841d\u81f3\u5c11\u5403\u4e00\u4e2a\u6843\u5b50\uff0c\u5979\u60f3\u77e5\u9053\u5979\u5728a\u5929\u5185\u6709\u591a\u5c11\u79cd\u5403\u6843\u5b50\u7684\u65b9\u6cd5\u3002\u5403\u6843\u5b50\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\uff0c\u4e5f\u5c31\u662f\u8bf4\u8d6b\u841d\u8ba4\u4e3a\u201c\u7b2c\u4e00\u5929\u5403\u4e00\u4e2a\u6843\u5b50\u7b2c\u4e8c\u5929\u5403\u4e24\u4e2a\u6843\u5b50\u201d\u548c\u201c\u7b2c\u4e00\u5929\u5403\u4e24\u4e2a\u6843\u5b50\u7b2c\u4e8c\u5929\u5403\u4e00\u4e2a\u6843\u5b50\u201d\u7b97\u4e00\u79cd\u65b9\u6cd5\u3002 Input Format \u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u6709\u591a\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u6d4b\u8bd5\u7684\u6570\u91cf\u3002 \u63a5\u4e0b\u6765n\u884c\u6bcf\u884c\u4e24\u4e2a\u6570a, b\uff08a>b\uff09\u3002 Output Format \u8f93\u51fan\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u65b9\u6cd5\u6570\u91cf\u3002 Sample Input 2 7 3 6 2 Sample Output 4 3 HINTS AND LIMITS \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0ca\u226460\uff0cb\u226415 \u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0ca\u2264160\uff0cb\u226440\u3002 \u63d0\u793a\uff1a\u53ef\u4ee5\u7528\u9012\u5f52\u6216\u8005\u52a8\u6001\u89c4\u5212\u89e3\u51b3\uff0c\u7b54\u6848\u4fdd\u8bc1\u5728int\u8303\u56f4\u5185\u3002 WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int n,a,b,t[41][161][161],ans,sum;//\u7b2ci\u5929\uff0c\u5403j\u4e2a\uff0c\u603b\u5171k\u4e2a int main() { cin>>n; for (int q=0;q<n;++q) { memset(t,0,sizeof(t)); cin>>a>>b; t[0][0][0]=1; for (int i=1;i<=b;++i){ for (int k=0;k<=a;++k){ sum=0; for (int j=0;j<=a-k;++j){ sum+=t[i-1][j][k]; if (j!=0) t[i][j][k+j]=sum; } } } ans=0; for (int i=1;i<=a;++i) ans+=t[b][i][a]; cout<<ans<<endl; } return 0; }","title":"1370"},{"location":"nr/1370/#1370","text":"\u9898\u76ee","title":"1370 \u8d6b\u841d\u7684\u6843\u5b50"},{"location":"nr/1370/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int n,a,b,t[41][161][161],ans,sum;//\u7b2ci\u5929\uff0c\u5403j\u4e2a\uff0c\u603b\u5171k\u4e2a int main() { cin>>n; for (int q=0;q<n;++q) { memset(t,0,sizeof(t)); cin>>a>>b; t[0][0][0]=1; for (int i=1;i<=b;++i){ for (int k=0;k<=a;++k){ sum=0; for (int j=0;j<=a-k;++j){ sum+=t[i-1][j][k]; if (j!=0) t[i][j][k+j]=sum; } } } ans=0; for (int i=1;i<=a;++i) ans+=t[b][i][a]; cout<<ans<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1373/","text":"1373 \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b \u9898\u76ee Description \u201c\u5e74\u8f7b\u4eba\u554a\uff0c\u90fd\u662f\u9761\u9761\u4e4b\u97f3\u5450\uff0c\u90fd\u662f\u8f7b\u6b4c\u66fc\u821e\u5450\uff0c\u5c06\u6765\u90fd\u662f\u6ca1\u6709\u51fa\u606f\u7684\u3002\u8fd9\u4e2a\u554a\uff0c\u5c31\u662f\u8981\u8c6a\u8fc8\uff0c\u6bd4\u5982\u8981\u6bd4\u8d5b\u722c\u5c71\u554a\uff0c\u6bd4\u8d5b\u62d4\u6cb3\u554a\u3002\u201d \u4e8e\u662fwkn\u6bc5\u7136\u6295\u5165\u5230\u4e86\u722c\u5c71\u6bd4\u8d5b\u4e2d\uff08\u5176\u5b9e\u662f\u4e3a\u4e86\u7d20\u62d3\uff09\u3002 \u8fd9\u5ea7\u5c71\u53ef\u4ee5\u770b\u505a\u4e00\u4e2aM x N\u7684\u77e9\u9635\uff0c\u77e9\u9635\u91cc\u7684\u6bcf\u4e00\u9879\u4ee3\u8868\u5f53\u524d\u4f4d\u7f6e\u5c71\u7684\u9ad8\u5ea6\u3002 \u5728\u5c71\u4e0a\u63d2\u7740\u597d\u51e0\u9762\u7ea2\u65d7\uff0c\u53c2\u8d5b\u9009\u624b\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4e00\u9762\u7ea2\u65d7\u6240\u5728\u7684\u70b9\u51fa\u53d1\uff0c\u76ee\u6807\u662f\u7ecf\u8fc7\u6240\u6709\u63d2\u7ea2\u65d7\u7684\u5730\u65b9\u3002 wkn\u5f53\u7136\u60f3\u83b7\u80dc\uff0c\u4e8e\u662f\u5c31\u8981\u627e\u51fa\u4e00\u79cd\u65b9\u6848\uff0c\u4f7f\u5f97\u5728\u722c\u5c71\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4efb\u610f\u76f8\u90bb\u4f4d\u7f6e\u7684\u6d77\u62d4\u5dee\u7684\u6700\u5927\u503c\u6700\u5c0f\u3002 \u4f46\u662f\u4ed6\u6700\u8fd1\u88ab\u6bd5\u4e1a\u8bba\u6587\u903c\u5f97\u7126\u5934\u70c2\u989d\u6ca1\u65f6\u95f4\u5199\u4ee3\u7801\u8ba1\u7b97\u4e86\uff0c\u60c5\u4f60\u5e2e\u5e2e\u4ed6\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570M\uff0cN(M\uff0cN\u4e0d\u8d85\u8fc7500) \u63a5\u4e0b\u91ccM*N\u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e\u5c71\u7684\u9ad8\u5ea6 \u63a5\u4e0b\u91ccM*N\u8868\u793a\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u5426\u6709\u7ea2\u65d7 Output Format \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u6253\u6d77\u62d4\u5dee\u7684\u6700\u5c0f\u503c Input Sample 2 3 0 1 9 4 2 9 1 0 0 0 1 0 Output Sample 1 FineArtz's solution Star /* \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b */ #include <iostream> #include <cstring> #include <queue> #include <vector> #include <cmath> using namespace std; const int INF = 2147483647; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} bool operator ==(Point p){ return (x == p.x && y == p.y); } int x = 0, y = 0, minh = INF; }; int h[505][505]; bool v[505][505]; vector<Point> fl; int m, n; int ans = 0, cnt = 0; bool check(Point p){ if (p.x < 1 || p.x > m || p.y < 1 || p.y > n || v[p.x][p.y]) return false; return true; } bool bfs(Point s, int lim){ memset(v, 0, sizeof(v)); queue<Point> q; q.push(s); v[s.x][s.y] = true; while (!q.empty()){ Point now = q.front(); q.pop(); for (int i = 0; i != 4; ++i){ Point next(now.x + dx[i], now.y + dy[i]); if (check(next)){ int dh = abs(h[now.x][now.y] - h[next.x][next.y]); if (dh > lim) continue; q.push(next); v[next.x][next.y] = true; } } } for (auto f : fl){ if (!v[f.x][f.y]) return false; } return true; } int main(){ memset(h, 0, sizeof(h)); cin >> m >> n; int minn = INF, maxx = 0; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> h[i][j]; minn = min(minn, h[i][j]); maxx = max(maxx, h[i][j]); } int flag; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> flag; if (flag == 1){ fl.emplace_back(i, j); } } Point s = *(fl.begin()); fl.erase(fl.begin()); s.minh = 0; int low = 0, high = maxx - minn, mid = (low + high) / 2; while (low < high){ mid = (low + high) / 2; if (bfs(s, mid)) high = mid; else low = mid + 1; } cout << low << endl; return 0; }","title":"1373"},{"location":"nr/1373/#1373","text":"\u9898\u76ee","title":"1373 \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b"},{"location":"nr/1373/#fineartzs-solution-star","text":"/* \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b */ #include <iostream> #include <cstring> #include <queue> #include <vector> #include <cmath> using namespace std; const int INF = 2147483647; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} bool operator ==(Point p){ return (x == p.x && y == p.y); } int x = 0, y = 0, minh = INF; }; int h[505][505]; bool v[505][505]; vector<Point> fl; int m, n; int ans = 0, cnt = 0; bool check(Point p){ if (p.x < 1 || p.x > m || p.y < 1 || p.y > n || v[p.x][p.y]) return false; return true; } bool bfs(Point s, int lim){ memset(v, 0, sizeof(v)); queue<Point> q; q.push(s); v[s.x][s.y] = true; while (!q.empty()){ Point now = q.front(); q.pop(); for (int i = 0; i != 4; ++i){ Point next(now.x + dx[i], now.y + dy[i]); if (check(next)){ int dh = abs(h[now.x][now.y] - h[next.x][next.y]); if (dh > lim) continue; q.push(next); v[next.x][next.y] = true; } } } for (auto f : fl){ if (!v[f.x][f.y]) return false; } return true; } int main(){ memset(h, 0, sizeof(h)); cin >> m >> n; int minn = INF, maxx = 0; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> h[i][j]; minn = min(minn, h[i][j]); maxx = max(maxx, h[i][j]); } int flag; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> flag; if (flag == 1){ fl.emplace_back(i, j); } } Point s = *(fl.begin()); fl.erase(fl.begin()); s.minh = 0; int low = 0, high = maxx - minn, mid = (low + high) / 2; while (low < high){ mid = (low + high) / 2; if (bfs(s, mid)) high = mid; else low = mid + 1; } cout << low << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1392/","text":"1392 BJ_drunbier \u9898\u76ee Description \u54d4\u9171\u627e\u5230\u4e86\u4e00\u4efd\u9171\u661f\u4eba\u5c45\u4f4f\u5730\u7684\u5730\u56fe\uff0c\u4e0a\u9762\u6807\u6ce8\u7740A\u9171\uff0cB\u9171\uff0cC\u9171\uff0c\u8fa3\u9171\uff0c\u751c\u9762\u9171\uff0c\u86cb\u9ec4\u9171\uff0c\u679c\u9171\uff0c\u4e0a\u9171\uff0c\u87ba\u65cb\u9171\uff0c\u6c99\u8336\u9171\uff0c\u7b49\u7b49\u7b49\u7b49\u7b49\u7b49\u9171\uff08\u597d\u50cf\u6df7\u8fdb\u53bb\u4e86\u5f88\u591a\u5947\u602a\u7684\u4e1c\u897f\uff09\u7684\u5c45\u4f4f\u5730\uff0c\u5b83\u4eec\u90fd\u6563\u5e03\u5728\u4e61\u6751\u7530\u56ed\u4e2d\u3002 \u8fd9N\u4e2a\u5c45\u4f4f\u5730\u7531\u4e61\u95f4\u5c0f\u8def\u8fde\u6210\u4e86\u4e00\u68f5\u6811\u3002 \u54d4\u9171\u5728\u7530\u56ed\u95f4\u5f73\uff08chi\uff09\u4e8d(chu)\u7740\uff0c \u8fd9\u6837\u8fdf\u8fdf\u7684\u65e5\u5f71\uff0c \u8fd9\u6837\u6e29\u6696\u7684\u5bc2\u9759\uff0c \u8fd9\u7247\u5348\u996e\u7684\u9999\u5473\uff0c \u5bf9\u4ed6\u662f\u591a\u4e48\u719f\u7a14\u3002 \u8fd9\u5e26\u9732\u53f0\uff0c\u8fd9\u6247\u7a97, \u540e\u9762\u6709\u5e78\u798f\u5728\u7aa5\u671b\uff0c \u8fd8\u6709\u51e0\u67b6\u4e66\uff0c\u4e24\u5f20\u5e8a\uff0c \u4e00\u74f6\u82b1......\u8fd9\u5df2\u662f\u5929\u5802\u3002 \u8fd9\u6761\u8def\u4ed6\u66fe\u7ecf\u8d70\u4e86\u591a\u5c11\u56de\uff01 \u591a\u5c11\u56de\uff1f......\u8fc7\u53bb\u90fd\u538b\u7f29\u6210\u4e00\u5806\uff0c \u53eb\u4eba\u4e0d\u80fd\u5206\u8fa8\uff0c\u65e5\u5b50\u662f\u90a3\u4e48\u76f8\u7c7b\uff0c \u540c\u6837\u5e78\u798f\u7684\u65e5\u5b50\uff0c\u8fd9\u4e9b\u5b6a\u751f\u59ca\u59b9\uff01 \u662f\u4e0d\u662f\u4eca\u5929\u51fa\u95e8\u65f6\u5fd8\u8bb0\u8bf4\u201c\u518d\u89c1\u201d\uff1f \u662f\u4e0d\u662f\u65e9\u5df2\u5fd8\u8bb0\u4e86\u7530\u95f4\u90a3\u82ac\u82b3\u7684\u6cb9\u83dc\u82b1\u9999 \u5fd8\u8bb0\u4e86\u4ea4\u6a2a\u7684\u4e61\u95f4\u5c0f\u8def \u4e8e\u662f\uff0c\u4ed6\u5f00\u59cb\u6c89\u601d\uff1a \u5bf9\u6240\u6709\u8fd9\u4e61\u95f4\u5c0f\u8def\u4e0a\u7684\u70b9\u5bf9\uff08a\uff0cb\uff09\u7ec4\u6210\u7684\u8def\u5f84\uff0c\u5e73\u5747\u7684\u8def\u5f84\u957f\u5ea6\u662f\u591a\u5c11\uff1f Input Format \u7b2c\u4e00\u884c\uff0c\u4e00\u4e2a\u6b63\u6574\u6570N\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u7b2ci\u884c\u4e00\u4e2a\u6570mi\uff0c\u4ee3\u8868\u8282\u70b9i\u7684\u7236\u8282\u70b9\u662fmi\uff1b\u7b2c\u4e8c\u4e2a\u6570li\uff0c\u4ee3\u8868mi\u5230i\u7684\u8fb9\u6743\u4e3ali\u3002 \u7279\u522b\u7684\uff0c\u5982\u679ci=0\u4ee3\u8868\u65e0\u7236\u8282\u70b9\u3002 Output Format \u4e00\u884c\u4e00\u4e2a\u6570\uff0c\u662f\u5e73\u5747\u8def\u5f84\u957f\u5ea6\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\u3002 Sample Input 4 2 1 0 0 2 1 2 1 Sample Output 1.50 \u6570\u636e\u8303\u56f4\u4e0e\u7ea6\u5b9a N\u226410000\u3002\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e0d\u4f1a\u662f\u81ea\u5df1\u3002 FineArtz's solution Star /* BJ_drunbier */ #include <iostream> #include <vector> #include <iomanip> using namespace std; class Node{ public: vector<int> edge; int sub = 1; }; class Edge{ public: int u = 0, v = 0, len = 0; }; Node a[10005]; Edge e[10005]; int calcSub(int root){ for (auto i : a[root].edge){ a[root].sub += calcSub(i); } return a[root].sub; } int main(){ int n, f, w, root, cnte = 0; cin >> n; if (n == 1){ cout << \"0.00\" << endl; return 0; } for (int i = 1; i <= n; ++i){ cin >> f >> w; if (f == 0){ root = i; } else{ a[f].edge.push_back(i); ++cnte; e[cnte].u = f; e[cnte].v = i; e[cnte].len = w; } } calcSub(root); //for (int i = 1; i <= n; ++i) // cout << i << ' ' << a[i].sub << endl; double ans = 0, tmp; for (int i = 1; i <= cnte; ++i){ tmp = n - a[e[i].v].sub; tmp = tmp * a[e[i].v].sub; tmp = tmp * e[i].len; ans = ans + tmp; } ans = ans / n / (n - 1) * 2; cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; double sum; long long l[10001]; int num,n,nxt[10001],last[10001],to[10001],root,f,v; void add(int x,int y,int v){ num++; nxt[num]=last[x]; last[x]=num; to[num]=y; l[num]=v; } int dfs(int x){ int son=1,tmp; for (int i=last[x];i!=0;i=nxt[i]){ tmp=dfs(to[i]); son+=tmp; sum+=(n-tmp)*tmp*l[i]; } return son; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&f,&v); if (f==0) root=i; else add(f,i,v); } dfs(root); printf(\"%.2f\",sum/(n*(n-1)/2)); return 0; }","title":"1392"},{"location":"nr/1392/#1392-bj_drunbier","text":"\u9898\u76ee","title":"1392 BJ_drunbier"},{"location":"nr/1392/#fineartzs-solution-star","text":"/* BJ_drunbier */ #include <iostream> #include <vector> #include <iomanip> using namespace std; class Node{ public: vector<int> edge; int sub = 1; }; class Edge{ public: int u = 0, v = 0, len = 0; }; Node a[10005]; Edge e[10005]; int calcSub(int root){ for (auto i : a[root].edge){ a[root].sub += calcSub(i); } return a[root].sub; } int main(){ int n, f, w, root, cnte = 0; cin >> n; if (n == 1){ cout << \"0.00\" << endl; return 0; } for (int i = 1; i <= n; ++i){ cin >> f >> w; if (f == 0){ root = i; } else{ a[f].edge.push_back(i); ++cnte; e[cnte].u = f; e[cnte].v = i; e[cnte].len = w; } } calcSub(root); //for (int i = 1; i <= n; ++i) // cout << i << ' ' << a[i].sub << endl; double ans = 0, tmp; for (int i = 1; i <= cnte; ++i){ tmp = n - a[e[i].v].sub; tmp = tmp * a[e[i].v].sub; tmp = tmp * e[i].len; ans = ans + tmp; } ans = ans / n / (n - 1) * 2; cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1392/#washswangs-solution-star","text":"#include <iostream> using namespace std; double sum; long long l[10001]; int num,n,nxt[10001],last[10001],to[10001],root,f,v; void add(int x,int y,int v){ num++; nxt[num]=last[x]; last[x]=num; to[num]=y; l[num]=v; } int dfs(int x){ int son=1,tmp; for (int i=last[x];i!=0;i=nxt[i]){ tmp=dfs(to[i]); son+=tmp; sum+=(n-tmp)*tmp*l[i]; } return son; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&f,&v); if (f==0) root=i; else add(f,i,v); } dfs(root); printf(\"%.2f\",sum/(n*(n-1)/2)); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1405/","text":"1405 \u7545\u7545\u7684\u73a9\u5177 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u7545\u7545\u6709\u4e00\u5957\u73a9\u5177\u5c0f\u706b\u8f66\uff0c\u4e00\u5929\u4ed6\u60f3\u62fc\u51fa\u4e00\u6bb5\u94c1\u8f68\u8ba9\u4ed6\u7684\u5c0f\u706b\u8f66\u80fd\u8d70\u7684\u5c3d\u53ef\u80fd\u957f\u3002\uff08\u4e00\u6bb5\u94c1\u8f68\u75312\u4e2a\u76f8\u540c\u957f\u5ea6\u7684\u8f68\u9053\u7ec4\u6210\uff09 \u7545\u7545\u6709N\uff081<=N<=500\uff09\u6839\u5851\u6599\u68d2\uff0c\u6bcf\u4e2a\u5851\u6599\u68d2\u957f\u4e3aSi\uff0c\u7545\u7545\u8981\u4ece\u8fd9\u4e9b\u5851\u6599\u68d2\u4e2d\u6311\u51fa\u4e00\u4e9b\u9996\u5c3e\u76f8\u8fde\u505a\u51fa\u4e24\u6bb5\u76f8\u540c\u957f\u5ea6\u7684\u8f68\u9053\u7ec4\u6210\u94c1\u8f68\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570N\uff081<=N<=500\uff09 \u8f93\u5165\u7b2c\u4e8c\u884c\u6709N\u4e2a\u6570\u5206\u522b\u4ee3\u8868Si\uff0c\u6570\u636e\u4fdd\u8bc1\u6240\u6709Si\u4e4b\u548c<=2000\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u80fd\u7ec4\u6210\u94c1\u8f68\u7684\u6700\u5927\u957f\u5ea6\uff0c\u5982\u679c\u4e0d\u80fd\u7ec4\u6210\u4e24\u6bb5\u76f8\u540c\u957f\u5ea6\u7684\u8f68\u9053\u5219\u8f93\u51fa\u201cImpossible\u201d\uff08\u4e0d\u5305\u62ec\u5f15\u53f7\uff09 Sample Input 5 1 3 4 5 2 Sample Output 7 \u89e3\u91ca \u6837\u4f8b\u89e3\u91ca\uff1a \u5de6\u4fa7\u8f68\u9053\uff1a3 + 4 = 7 \u53f3\u4fa7\u8f68\u9053\uff1a5 + 2 = 7 40%\u7684\u6570\u636eN<=100\uff1b60%\u7684\u6570\u636eN<=200; WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int s,n; int t[501][4001];//\u524di\u6839\u68d2\u5b50\u4e2d \u53ef\u4ee5\u7ec4\u6210\u7684\u4e24\u6761\u957f\u5ea6\u5dee\u4e3aj\u7684\u8f68\u9053\u4e2d\u8f83\u5927\u7684\u90a3\u6761\u7684\u957f\u5ea6 int main() { cin>>n; memset(t,-1,sizeof(t)); t[0][0]=0; for (int i=1;i<=n;++i) { cin>>s; for (int j=0;j<=2000;++j){ t[i][j]=t[i-1][j];//\u4e0d\u52a0\u8fd9\u6839\u5851\u6599\u68d2 if (j>=s&&t[i-1][j-s]!=-1&&t[i-1][j-s]+s>t[i][j]) t[i][j]=t[i-1][j-s]+s;//\u52a0\u5728\u8f83\u957f\u7684\u90a3\u6761\u4e0a \u5dee\u503c\u53d8\u5927 \u8f83\u957f\u7684\u957f\u5ea6\u53d8\u5927 if (t[i-1][j+s]>t[i][j]) t[i][j]=t[i-1][j+s];//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u4f46\u5e76\u672a\u8d85\u8fc7\u8f83\u957f\u7684\u90a3\u6761 \u5dee\u53d8\u5c0f \u8f83\u957f\u7684\u957f\u5ea6\u4e0d\u53d8 if (s>=j&&t[i-1][s-j]!=-1&&t[i-1][s-j]+j>t[i][j]) t[i][j]=t[i-1][s-j]+j;//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u8d85\u8fc7\u4e86\u539f\u6765\u8f83\u957f\u7684\u90a3\u6761 \u957f\u5ea6\u53d8\u5927 } } if (!t[n][0]) cout<<\"Impossible\"; else cout<<t[n][0]; return 0; }","title":"1405"},{"location":"nr/1405/#1405","text":"\u9898\u76ee","title":"1405 \u7545\u7545\u7684\u73a9\u5177"},{"location":"nr/1405/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int s,n; int t[501][4001];//\u524di\u6839\u68d2\u5b50\u4e2d \u53ef\u4ee5\u7ec4\u6210\u7684\u4e24\u6761\u957f\u5ea6\u5dee\u4e3aj\u7684\u8f68\u9053\u4e2d\u8f83\u5927\u7684\u90a3\u6761\u7684\u957f\u5ea6 int main() { cin>>n; memset(t,-1,sizeof(t)); t[0][0]=0; for (int i=1;i<=n;++i) { cin>>s; for (int j=0;j<=2000;++j){ t[i][j]=t[i-1][j];//\u4e0d\u52a0\u8fd9\u6839\u5851\u6599\u68d2 if (j>=s&&t[i-1][j-s]!=-1&&t[i-1][j-s]+s>t[i][j]) t[i][j]=t[i-1][j-s]+s;//\u52a0\u5728\u8f83\u957f\u7684\u90a3\u6761\u4e0a \u5dee\u503c\u53d8\u5927 \u8f83\u957f\u7684\u957f\u5ea6\u53d8\u5927 if (t[i-1][j+s]>t[i][j]) t[i][j]=t[i-1][j+s];//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u4f46\u5e76\u672a\u8d85\u8fc7\u8f83\u957f\u7684\u90a3\u6761 \u5dee\u53d8\u5c0f \u8f83\u957f\u7684\u957f\u5ea6\u4e0d\u53d8 if (s>=j&&t[i-1][s-j]!=-1&&t[i-1][s-j]+j>t[i][j]) t[i][j]=t[i-1][s-j]+j;//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u8d85\u8fc7\u4e86\u539f\u6765\u8f83\u957f\u7684\u90a3\u6761 \u957f\u5ea6\u53d8\u5927 } } if (!t[n][0]) cout<<\"Impossible\"; else cout<<t[n][0]; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1509/","text":"1509 \u8282\u65e5\u8ba1\u7b97\u5668 \u9898\u76ee Description \u6709\u4e00\u7c7b\u8282\u65e5\u7684\u65e5\u671f\u5e76\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u662f\u4ee5\u201ca\u6708\u7684\u7b2cb\u4e2a\u661f\u671fc\u201d\u7684\u5f62\u5f0f\u5b9a\u4e0b\u6765\u7684\uff0c\u6bd4\u5982\u8bf4\u6bcd\u4eb2\u8282\u5c31\u5b9a\u4e3a\u6bcf\u5e74\u7684\u4e94\u6708\u7684\u7b2c\u4e8c\u4e2a\u661f\u671f\u65e5\u3002 \u73b0\u5728\uff0c\u7ed9\u4f60a\uff0cb\uff0cc\u548cy1, y2(1850 \u2264 y1, y2 \u2264 2050)\uff0c\u5e0c\u671b\u4f60\u8f93\u51fa\u4ece\u516c\u5143y1\u5e74\u5230\u516c\u5143y2\u5e74\u95f4\u7684\u6bcf\u5e74\u7684a\u6708\u7684\u7b2cb\u4e2a\u661f\u671fc\u7684\u65e5\u671f\u3002 \u63d0\u793a\uff1a\u5173\u4e8e\u95f0\u5e74\u7684\u89c4\u5219\uff1a\u5e74\u4efd\u662f400\u7684\u6574\u6570\u500d\u65f6\u662f\u95f0\u5e74\uff0c\u5426\u5219\u5e74\u4efd\u662f4\u7684\u500d\u6570\u5e76\u4e14\u4e0d\u662f100\u7684\u500d\u6570\u65f6\u662f\u95f0\u5e74\uff0c\u5176\u4ed6\u5e74\u4efd\u90fd\u4e0d\u662f\u95f0\u5e74\u3002\u4f8b\u59821900\u5e74\u5c31\u4e0d\u662f\u95f0\u5e74\uff0c\u800c2000\u5e74\u662f\u95f0\u5e74\u3002 \u4e3a\u4e86\u65b9\u4fbf\u4f60\u63a8\u7b97\uff0c\u5df2\u77e51850\u5e741\u67081\u65e5\u662f\u661f\u671f\u4e8c\u3002 Input Format \u8f93\u5165\u5305\u542b\u6070\u597d\u4e00\u884c\uff0c\u6709\u4e94\u4e2a\u6574\u6570a, b, c, y1, y2\u3002\u5176\u4e2dc=1, 2, \u2026\u2026, 6, 7\u5206\u522b\u8868\u793a\u661f\u671f\u4e00\u3001\u4e8c\u3001\u2026\u2026\u3001\u516d\u3001\u65e5\u3002 Output Format \u5bf9\u4e8ey1\u548cy2\u4e4b\u95f4\u7684\u6bcf\u4e00\u4e2a\u5e74\u4efd\uff0c\u5305\u62ecy1\u548cy2\uff0c\u6309\u7167\u5e74\u4efd\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u8f93\u51fa\u4e00\u884c\u3002 \u5982\u679c\u8be5\u5e74\u7684a\u6708\u7b2cb\u4e2a\u661f\u671fc\u786e\u5b9e\u5b58\u5728\uff0c\u5219\u4ee5\"yyyy/mm/dd\"\u7684\u683c\u5f0f\u8f93\u51fa\uff0c\u5373\u8f93\u51fa\u56db\u4f4d\u6570\u7684\u5e74\u4efd\uff0c\u4e24\u4f4d\u6570\u7684\u6708\u4efd\uff0c\u4e24\u4f4d\u6570\u7684\u65e5\u671f\uff0c\u4e2d\u95f4\u7528\u659c\u6760\u201c/\u201d\u5206\u9694\uff0c\u4f4d\u6570\u4e0d\u8db3\u65f6\u524d\u8865\u96f6\u3002 \u5982\u679c\u8be5\u5e74\u7684a\u6708\u7b2cb\u4e2a\u661f\u671fc\u5e76\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa\"none\"\uff08\u4e0d\u5305\u542b\u53cc\u5f15\u53f7)\u3002 Sample Input 5 2 7 2014 2015 Sample Output 2014/05/11 2015/05/10 Limits \u6240\u6709\u8bc4\u6d4b\u7528\u4f8b\u90fd\u6ee1\u8db3\uff1a1 \u2264 a \u2264 12\uff0c1 \u2264 b \u2264 5\uff0c1 \u2264 c \u2264 7\uff0c1850 \u2264 y1, y2 \u2264 2050\u3002 FineArtz's solution Star /* \u8282\u65e5\u8ba1\u7b97\u5668 */ #include <iostream> #include <string> using namespace std; inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } inline string f(int x) { string ret = \"\"; if (x / 10){ ret += char(x / 10 + '0'); } else ret += \"0\"; ret += char(x % 10 + '0'); return ret; } int main(){ int date[205][15][35] = {0}; date[0][1][1] = 2; for (int yy = 0; yy <= 2050 - 1850; ++yy){ int day = 0, lday = 0, year = yy + 1850; for (int mm = 1; mm <= 12; ++mm) { switch(mm){ case 1: case 3: case 5: case 7: case 8: case 10: case 12: day = 31; break; case 4: case 6: case 9: case 11: day = 30; break; case 2: day = ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28; break; } if (mm > 1) date[yy][mm][1] = succ(date[yy][mm - 1][lday]); else if (yy != 0) date[yy][mm][1] = succ(date[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) date[yy][mm][dd] = succ(date[yy][mm][dd - 1]); lday = day; day = 0; } } int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int yy = y1; yy <= y2; ++yy){ int dd = 1, cnt = 0; while (date[yy - 1850][a][dd]){ if (date[yy - 1850][a][dd] == c) ++cnt; if (cnt == b){ cout << yy << \"/\" << f(a) << \"/\" << f(dd) << endl; break; } ++dd; } if (!date[yy - 1850][a][dd]) cout << \"none\" << endl; } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; //const date origin = {2009, 12, 28}; const date origin = {1849, 12, 31}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isLegal(const date &today); int main(void) { int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int i = y1; i <= y2; ++i) { date festival = {i, a, 1}; int weekday_now = GetWeekday(festival); festival.day += (7 + c - weekday_now) % 7 + 7 * (b - 1); if (isLegal(festival)) cout << festival.year << '/' << (festival.month < 10 ? \"0\" : \"\") << festival.month << '/' << (festival.day < 10 ? \"0\" : \"\") << festival.day; else cout << \"none\"; if (i < y2) cout << endl; } } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(today.year) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isLegal(const date &today) { switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day <= 31) return true; break; } case 4: case 6: case 9: case 11: { if (today.day <= 30) return true; break; } case 2: { if (isLeapYear(today.year)) { if (today.day <= 29) return true; } else { if (today.day <= 28) return true; } break; } default: break; } return false; } WashSwang's solution Star #include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"1509"},{"location":"nr/1509/#1509","text":"\u9898\u76ee","title":"1509 \u8282\u65e5\u8ba1\u7b97\u5668"},{"location":"nr/1509/#fineartzs-solution-star","text":"/* \u8282\u65e5\u8ba1\u7b97\u5668 */ #include <iostream> #include <string> using namespace std; inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } inline string f(int x) { string ret = \"\"; if (x / 10){ ret += char(x / 10 + '0'); } else ret += \"0\"; ret += char(x % 10 + '0'); return ret; } int main(){ int date[205][15][35] = {0}; date[0][1][1] = 2; for (int yy = 0; yy <= 2050 - 1850; ++yy){ int day = 0, lday = 0, year = yy + 1850; for (int mm = 1; mm <= 12; ++mm) { switch(mm){ case 1: case 3: case 5: case 7: case 8: case 10: case 12: day = 31; break; case 4: case 6: case 9: case 11: day = 30; break; case 2: day = ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28; break; } if (mm > 1) date[yy][mm][1] = succ(date[yy][mm - 1][lday]); else if (yy != 0) date[yy][mm][1] = succ(date[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) date[yy][mm][dd] = succ(date[yy][mm][dd - 1]); lday = day; day = 0; } } int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int yy = y1; yy <= y2; ++yy){ int dd = 1, cnt = 0; while (date[yy - 1850][a][dd]){ if (date[yy - 1850][a][dd] == c) ++cnt; if (cnt == b){ cout << yy << \"/\" << f(a) << \"/\" << f(dd) << endl; break; } ++dd; } if (!date[yy - 1850][a][dd]) cout << \"none\" << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1509/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; //const date origin = {2009, 12, 28}; const date origin = {1849, 12, 31}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isLegal(const date &today); int main(void) { int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int i = y1; i <= y2; ++i) { date festival = {i, a, 1}; int weekday_now = GetWeekday(festival); festival.day += (7 + c - weekday_now) % 7 + 7 * (b - 1); if (isLegal(festival)) cout << festival.year << '/' << (festival.month < 10 ? \"0\" : \"\") << festival.month << '/' << (festival.day < 10 ? \"0\" : \"\") << festival.day; else cout << \"none\"; if (i < y2) cout << endl; } } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(today.year) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isLegal(const date &today) { switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day <= 31) return true; break; } case 4: case 6: case 9: case 11: { if (today.day <= 30) return true; break; } case 2: { if (isLeapYear(today.year)) { if (today.day <= 29) return true; } else { if (today.day <= 28) return true; } break; } default: break; } return false; }","title":"vvvvv1v's solution Star"},{"location":"nr/1509/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1530/","text":"1530 \u5b57\u7b26\u4e8c\u53c9\u6811 \u9898\u76ee Description Stephen\u6700\u8fd1\u5b66\u4e60\u4e86\u4e8c\u53c9\u6811\u7684\u6709\u5173\u5185\u5bb9\uff0c\u4ed6\u521b\u9020\u4e86\u4e00\u79cd\u6811\u201c\u5b57\u7b26\u4e8c\u53c9\u6811\u201d\u3002\u5b57\u7b26\u4e8c\u53c9\u6811\u662f\u8fd9\u6837\u7684\uff1a \u8be5\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u6bcf\u4e2a\u8282\u70b9\u4e0b\u9762\u67090~2\u4e2a\u5b69\u5b50\u3002 \u4e3a\u4e86\u7b80\u5355\u5316\uff0c\u6211\u4eec\u6309\u7167\u5c42\u5e8f\u65b9\u5f0f\u63d2\u5165\u3002\u6bd4\u5982\u8bf4\uff1aHEADSHOT\uff0cH\u4f5c\u4e3a\u6839\u8282\u70b9\uff0cEA\u4f5c\u4e3aH\u7684\u4e24\u4e2a\u5b69\u5b50\u7ed3\u70b9\u3002\u800cDS\u4f5c\u4e3aE\u7684\u5b69\u5b50\uff0cHO\u4f5c\u4e3aA\u7684\u5b69\u5b50\u3002T\u662fD\u7684\u5de6\u5b69\u5b50\u3002 Stephen\u60f3\u5411TX\u4eec\u70ab\u8000\uff0c\u65e0\u5948\u4ed6\u53ea\u4f1a\u63d2\u5165\u64cd\u4f5c\uff0cTX\u4eec\u8981\u652f\u6301\u7f16\u7801\uff0c\u89e3\u7801\uff0c\u8fd8\u8981\u652f\u6301\u4e09\u79cd\u65b9\u5f0f\u7684\u904d\u5386\u3002Stephen\u8bf7\u4f60\u7f16\u7a0b\u89e3\u51b3\u95ee\u9898\u3002 Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6570\u5b57t\u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765t\u884c\uff0c\u6bcf\u884c\u63cf\u8ff0\u4e86\u4e00\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u6bcf\u7ec4\u6570\u636e\u5982\u4e0b\u683c\u5f0f\uff1a \u6570\u636e\u7684\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6570n\uff0c\u548c\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u5206\u522b\u4ee3\u8868\u6240\u64cd\u4f5c\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u4e24\u4e2a\u547d\u4ee4\u3002\uff08\u7b2c\u4e00\u4e2a\u547d\u4ee4\u4e3a\uff1a\u201cINORDER\u201d\u3001\u201cPREORDER\u201d\u6216\u201cPOSTORDER\u201d\uff0c\u7b2c\u4e8c\u4e2a\u4e3a\u201cENCODE\u201d\u6216\u201cDECODE\u201d\uff09 \u7b2c\u4e8c\u884c\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32S\uff0c\u5373\u6240\u64cd\u4f5c\u5b57\u7b26\u4e32\u3002\uff08\u7531\u2018A\u2019\u5230\u2018Z\u2019\u7ec4\u6210\uff09 Output Format \u8f93\u51fat\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u5f53\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u4e3a\u201cENCODE\u201d\u65f6\uff0c\u5373\u201c\u7f16\u7801\u201d\uff1a\u5c06S\u4f5c\u4e3aHS08TTC\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u8f93\u51fa\u5176\u4e2d\u5e8f\u904d\u5386\uff08\u201cINORDER\u201d\uff09\uff0c\u524d\u5e8f\u904d\u5386\uff08\u201cPREORDER\u201d\uff09\u6216\u540e\u5e8f\u904d\u5386\uff08\u201cPOSTORDER\u201d\uff09\u3002 \u5f53\u7b2c\u4e8c\u4e2a\u547d\u4ee4\u4e3a\u201cDECODE\u201d\u65f6\uff0c\u5373\u201c\u89e3\u7801\u201d\uff1aS\u4f5c\u4e3a\u4e2d\u5e8f\u904d\u5386\uff08\u201cINORDER\u201d\uff09\uff0c\u524d\u5e8f\u904d\u5386\uff08\u201cPREORDER\u201d\uff09\u6216\u540e\u5e8f\u904d\u5386\uff08\u201cPOSTORDER\u201d\uff09\uff0c\u6c42\u5c42\u5e8f\u904d\u5386\u3002 Sample Input 8 10 INORDER ENCODE ENCODETHIS 8 INORDER DECODE FDEBDEAE 8 INORDER ENCODE DEADBEEF 8 POSTORDER ENCODE DEADBEEF 8 POSTORDER DECODE DEADBEEF 8 PREORDER ENCODE DEADBEEF 8 PREORDER DECODE DEDFBAEE 14 POSTORDER DECODE VENSAYONNLAOHJ EEEEEE.. Sample Output HOINSDEECT DEADBEEF FDEBDEAE FDBEEEAD FDEEABED DEDFBAEE DEADBEEF JOHNYLOVESANNA Limit \u5bf9\u4e8e30%\u7684\u6570\u636e\uff1at<=10\uff0cn<=1000\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff1at<=10\uff0cn<=1000000\u3002 WashSwang's solution Star #include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"1530"},{"location":"nr/1530/#1530","text":"\u9898\u76ee","title":"1530 \u5b57\u7b26\u4e8c\u53c9\u6811"},{"location":"nr/1530/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1541/","text":"1541 \u533a\u95f4\u6700\u5927\u95ee\u9898 \u9898\u76ee Description Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. For example, Given nums = [1,3,-1,-3,5,3,6,7], and k = 3. Window position Max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 Therefore, return the max sliding window as [3,3,5,5,6,7]. Note: You may assume k is always valid, ie: 1 \u2264 k \u2264 input array's size for non-empty array. (This is the problem B for SEIEE-Yu Yong Data Structure 2015 Fall Exam 2) Input Format 3 rows, the first rows is a number k and the second rows is a number n. The third row is n numbers separated by a blank. Output Format n-k+1 numbers in a row separated by a blank. Sample Input 3 8 1 3 -1 -3 5 3 6 7 Sample Output 3 3 5 5 6 7 Data Range 50% : n < 1000 100% : n < 200000, k<n, all number is in the range of longint. WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int a[300000],queue[300000],head,tail=-1,n,k; int main() { scanf(\"%d%d\",&k,&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<k-1;++i) { while (a[i]>=a[queue[tail]]&&tail>=0) tail--; queue[++tail]=i; } for (int i=k-1;i<n;++i){ while (queue[head]<=i-k) head++; while (a[i]>=a[queue[tail]]&&tail>=head) tail--; queue[++tail]=i; printf(\"%d \",a[queue[head]]); } return 0; }","title":"1541"},{"location":"nr/1541/#1541","text":"\u9898\u76ee","title":"1541 \u533a\u95f4\u6700\u5927\u95ee\u9898"},{"location":"nr/1541/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int a[300000],queue[300000],head,tail=-1,n,k; int main() { scanf(\"%d%d\",&k,&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<k-1;++i) { while (a[i]>=a[queue[tail]]&&tail>=0) tail--; queue[++tail]=i; } for (int i=k-1;i<n;++i){ while (queue[head]<=i-k) head++; while (a[i]>=a[queue[tail]]&&tail>=head) tail--; queue[++tail]=i; printf(\"%d \",a[queue[head]]); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1550/","text":"1550 \u7559\u4e0b\u7684\u6c34 \u9898\u76ee Description \u4e0b\u96e8\u4e86\uff0c\u7531\u4e8e\u5730\u9762\u5751\u5751\u6d3c\u6d3c\u6240\u4ee5\u5b58\u4e86\u4e0d\u5c11\u7684\u6c34\uff0c\u5c0f\u660e\u5f88\u597d\u5947\uff0c\u60f3\u770b\u770b\u4e00\u5171\u7559\u4e0b\u4e86\u591a\u5c11\u6c34\uff08\u53ea\u8003\u8651\u6bcf\u4e2a\u7eb5\u622a\u9762\u7559\u5b58\u6c34\u7684\u9762\u79ef\uff09\u3002 \u7ed9\u51fan\u4e2a\u975e\u8d1f\u6574\u6570\u4ee3\u8868\u6bcf\u5355\u4f4d\u5bbd\u5ea6\u6a2a\u5750\u6807\u7684\u9ad8\u5ea6\uff0c\u8bf7\u8ba1\u7b97\u4e00\u5171\u53ef\u4ee5\u63a5\u4e0b\u591a\u5c11\u7684\u6c34\u3002 Input Format \u5171\u4e24\u884c\u3002 \u7b2c1\u884c\uff1an(1<=n<=1000)\uff0c\u4ee3\u8868\u6a2a\u5750\u6807\u603b\u4e2a\u6570\u3002 \u7b2c2\u884c\uff1a\u5171n\u4e2a\u975e\u8d1f\u6574\u6570xi(1<=xi<=10000)\uff0c\u4ee5\u6570\u7ec4\u5f62\u5f0f\u51fa\u73b0. \u5982[1,2,3,4,5,6]\u4ee3\u8868\u4ece\u5750\u68070\u5230\u5750\u68075\u7684\u9ad8\u5ea6\u5206\u522b\u4e3a1,2,3,4,5,6\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u7559\u4e0b\u7684\u6c34\u7684\u91cf\u3002 Sample Input 12 [0,1,0,2,1,0,1,3,2,1,2,1] Sample Output 6 \uff08\u89e3\u91ca\uff1a1,0,2\u4e4b\u95f4\u5b58\u7559\u5355\u4f4d\u7684\u6c34\uff1b2,1,0,1,3\u4e4b\u95f4\u5b58\u75594\u5355\u4f4d\u7684\u6c34\uff1b2,1,2\u4e4b\u95f4\u5b58\u75591\u5355\u4f4d\u7684\u6c34\u3002\u603b\u51716\u5355\u4f4d\uff09 VictriD's solution Star #include <iostream> using namespace std; int main() { int n; cin >> n; char tm; int* hgt = new int[n]; int* llm = new int[n]; int* rrm = new int[n]; int water = 0; for (int i = 0; i < n; i++) { cin >> tm; cin >> hgt[i]; } cin >> tm; //\u6bcf\u4e2a\u70b9\u5224\u65ad\u80fd\u591f\u8fbe\u5230\u7684\u9ad8\u5ea6 int l = 0, r = n - 1; llm[0] = hgt[0]; for (int i = 1; i < n; i++) { llm[i] = hgt[i] > llm[i - 1] ? hgt[i] : llm[i - 1]; } rrm[n - 1] = hgt[n - 1]; for (int i = n - 2; i >= 0; i--) { rrm[i] = hgt[i] > rrm[i + 1] ? hgt[i] : rrm[i + 1]; water += (llm[i] > rrm[i] ? rrm[i] : llm[i]) - hgt[i]; } cout << water; } FineArtz's solution Star /* \u7559\u4e0b\u7684\u6c34 */ #include <iostream> #include <cstring> using namespace std; int n; char ch; int a[1005] = {0}, maxx = 0, ans = 0; int main(){ cin >> n; int num = 0, cnt = 0; bool flag = false; while (cin >> ch){ if (!isdigit(ch)){ if (flag){ a[++cnt] = num; if (num > maxx) maxx = num; num = 0; flag = false; } continue; } flag = true; num = num * 10 + ch - '0'; } int l = 1, r = n; for (int h = 1; h <= maxx; ++h){ while (a[l] < h) ++l; while (a[r] < h) --r; for (int i = l; i <= r; ++i) if (a[i] < h) ++ans; } cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { int n; cin >> n; int arr[1005]; int max = 0, sum = 0; char ch; for (int i = 0; i < n; ++i) { cin >> ch >> arr[i]; if (arr[i] > max) max = arr[i]; } for (int i = 1; i <= max; ++i) { int j = 0; while (arr[j] < i) ++j; int k = n - 1; while (arr[k] < i) --k; for (int l = j + 1; l <= k - 1; ++l) { if (arr[l] < i) ++sum; } } cout << sum; //for (int i = 0; i < n; ++i) cout << arr[i]; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int n,x,ans,cur,h[2000],num,lmax[2000],rmax[2000]; char c; int main() { cin>>n; while (cin>>c){ if (c=='[') continue; if (c==']') {h[num++]=cur; break;} if (c==',') {h[num++]=cur; cur=0;} else cur=cur*10+c-48; } for (int i=1;i<n;++i) lmax[i]=max(lmax[i-1],h[i-1]); for (int i=n-2;i>=0;--i) rmax[i]=max(rmax[i+1],h[i+1]); for (int i=0;i<n;++i) ans+=max(min(rmax[i],lmax[i]),h[i])-h[i]; cout<<ans; return 0; }","title":"1550"},{"location":"nr/1550/#1550","text":"\u9898\u76ee","title":"1550 \u7559\u4e0b\u7684\u6c34"},{"location":"nr/1550/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; char tm; int* hgt = new int[n]; int* llm = new int[n]; int* rrm = new int[n]; int water = 0; for (int i = 0; i < n; i++) { cin >> tm; cin >> hgt[i]; } cin >> tm; //\u6bcf\u4e2a\u70b9\u5224\u65ad\u80fd\u591f\u8fbe\u5230\u7684\u9ad8\u5ea6 int l = 0, r = n - 1; llm[0] = hgt[0]; for (int i = 1; i < n; i++) { llm[i] = hgt[i] > llm[i - 1] ? hgt[i] : llm[i - 1]; } rrm[n - 1] = hgt[n - 1]; for (int i = n - 2; i >= 0; i--) { rrm[i] = hgt[i] > rrm[i + 1] ? hgt[i] : rrm[i + 1]; water += (llm[i] > rrm[i] ? rrm[i] : llm[i]) - hgt[i]; } cout << water; }","title":"VictriD's solution Star"},{"location":"nr/1550/#fineartzs-solution-star","text":"/* \u7559\u4e0b\u7684\u6c34 */ #include <iostream> #include <cstring> using namespace std; int n; char ch; int a[1005] = {0}, maxx = 0, ans = 0; int main(){ cin >> n; int num = 0, cnt = 0; bool flag = false; while (cin >> ch){ if (!isdigit(ch)){ if (flag){ a[++cnt] = num; if (num > maxx) maxx = num; num = 0; flag = false; } continue; } flag = true; num = num * 10 + ch - '0'; } int l = 1, r = n; for (int h = 1; h <= maxx; ++h){ while (a[l] < h) ++l; while (a[r] < h) --r; for (int i = l; i <= r; ++i) if (a[i] < h) ++ans; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1550/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; int arr[1005]; int max = 0, sum = 0; char ch; for (int i = 0; i < n; ++i) { cin >> ch >> arr[i]; if (arr[i] > max) max = arr[i]; } for (int i = 1; i <= max; ++i) { int j = 0; while (arr[j] < i) ++j; int k = n - 1; while (arr[k] < i) --k; for (int l = j + 1; l <= k - 1; ++l) { if (arr[l] < i) ++sum; } } cout << sum; //for (int i = 0; i < n; ++i) cout << arr[i]; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1550/#washswangs-solution-star","text":"#include <iostream> using namespace std; int n,x,ans,cur,h[2000],num,lmax[2000],rmax[2000]; char c; int main() { cin>>n; while (cin>>c){ if (c=='[') continue; if (c==']') {h[num++]=cur; break;} if (c==',') {h[num++]=cur; cur=0;} else cur=cur*10+c-48; } for (int i=1;i<n;++i) lmax[i]=max(lmax[i-1],h[i-1]); for (int i=n-2;i>=0;--i) rmax[i]=max(rmax[i+1],h[i+1]); for (int i=0;i<n;++i) ans+=max(min(rmax[i],lmax[i]),h[i])-h[i]; cout<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1551/","text":"1551 \u8dd1\u6b65\u8fd8\u662f\u7ec4\u56e2\u7684\u597d \u9898\u76ee Description N\u4e2a\u597d\u670b\u53cb\u4eec\u7ea6\u5b9a\u597d\u4e00\u8d77\u6162\u8dd1\uff0c\u7ea6\u5b9a\u597d\u4e86\u8def\u7ebf\u548c\u65f6\u95f4\uff0c\u4e0d\u8fc7\u56e0\u4e3a\u5bbf\u820d\u4f4d\u7f6e\u4e0d\u4e00\u6837\u6240\u4ee5\u5927\u5bb6\u8d77\u70b9\u4e5f\u4e0d\u4e00\u6837\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u80fd\u529b\u4e0d\u4e00\u6837\u6240\u4ee5\u901f\u5ea6\u4e5f\u4e0d\u4e00\u6837\u3002\u6240\u4ee5\u5927\u5bb6\u5546\u91cf\u597d\u4e86\uff0c\u5982\u679c\u540e\u9762\u7684\u4eba\u8ffd\u4e0a\u4e86\u524d\u9762\u7684\u4eba\uff0c\u5c31\u964d\u901f\u548c\u524d\u9762\u7684\u4eba\u4fdd\u6301\u4e00\u6837\u7684\u901f\u5ea6\u4e00\u8d77\u8dd1\uff0c\u6240\u4ee5\u8dd1\u5230\u8db3\u591f\u957f\u65f6\u95f4\u4ee5\u540e\uff0c\u5927\u5bb6\u8dd1\u6210\u4e86\u4e00\u4e2a\u4e2a\u5c0f\u56e2\u4f53\u3002\u4e0d\u8fc7\u8fd9\u4e9b\u5c0f\u56e2\u4f53\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u5462\uff1f Input Format \u5171(N+1)\u884c\u3002 \u7b2c1\u884c\uff1aN(1<=N<=10000000)\uff0c\u4ee3\u8868\u603b\u4eba\u6570\u3002 \u7b2c2~(N+1)\u884c\uff1a\u6bcf\u884c2\u4e2a\u6574\u6570\uff0cP, V(1<=P,V<=10000000). \u5176\u4e2dP\u4ee3\u8868\u8d77\u59cb\u4f4d\u7f6e\uff0cV\u4ee3\u8868\u8dd1\u6b65\u901f\u5ea6\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u6700\u540e\u7684\u56e2\u4f53\u4e66\u3002 Sample Input 5 0 1 1 2 2 3 3 2 6 1 Sample Output 2 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int vnow=0x3f3f3f3f,n,ans,p; int main() { int *v; scanf(\"%d\",&n); v=new int[n]; for (int i=0;i<n;++i) scanf(\"%d %d\",&p,&v[i]); for (int i=n-1;i>=0;--i) if (v[i]<=vnow){ ans++; vnow=v[i]; } printf(\"%d\",ans); return 0; }","title":"1551"},{"location":"nr/1551/#1551","text":"\u9898\u76ee","title":"1551 \u8dd1\u6b65\u8fd8\u662f\u7ec4\u56e2\u7684\u597d"},{"location":"nr/1551/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int vnow=0x3f3f3f3f,n,ans,p; int main() { int *v; scanf(\"%d\",&n); v=new int[n]; for (int i=0;i<n;++i) scanf(\"%d %d\",&p,&v[i]); for (int i=n-1;i>=0;--i) if (v[i]<=vnow){ ans++; vnow=v[i]; } printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1557/","text":"1557 \u5976\u725b\u8ba1\u6570 \u9898\u76ee Description Farmer John's N cows (1 <= N <= 50,000) are grazing along a one-dimensional fence. Cow i is standing at location x(i) and has height h(i) (1 <= x(i),h(i) <= 1,000,000,000). A cow feels \"crowded\" if there is another cow at least twice her height within distance D on her left, and also another cow at least twice her height within distance D on her right (1 <= D <= 1,000,000,000). Since crowded cows produce less milk, Farmer John would like to count the number of such cows. Please help him. Input Format Line 1: Two integers, N and D. Lines 2..1+N: Line i+1 contains the integers x(i) and h(i). The locations of all N cows are distinct. Output Format Line 1: The number of crowded cows. Sample Input 6 4 10 3 6 2 5 3 9 7 3 6 11 2 Sample Output 2 Sample Explanation There are 6 cows, with a distance threshold of 4 for feeling crowded. Cow #1 lives at position x=10 and has height h=3, and so on. The cows at positions x=5 and x=6 are both crowded. WashSwang's solution Star #include <iostream> #include <cstdio> void qsort(int *s,int *t,int *p,int *q){ if (t-s<=1) return; int i=0,j=int(t-s)-1,x=s[0],y=p[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) {s[i]=s[j]; p[i++]=p[j];} while (i<j&&s[i]<=x) i++; if (i<j) {s[j]=s[i]; p[j--]=p[i];} } s[j]=x; p[j]=y; qsort(s,s+j,p,p+j); qsort(s+j+1,t,p+j+1,q); } int ans,p,x[100000],n,d,head,tail,h[100000],a[100000],lmax[100000],rmax[100000],bx[100000]; int main() { scanf(\"%d%d\",&n,&d); for (int i=0;i<n;++i) scanf(\"%d%d\",&x[i],&h[i]); qsort(x,x+n,h,h+n); head=0; tail=0; for (;x[p]<=d&&p<n;++p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } for (;p<n;++p){ while (tail<head&&x[a[tail]]+d<x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } head=0; tail=0; for (p=n-1;x[p]>=x[n-1]-d;--p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (;p>=0;--p){ while (tail<head&&x[a[tail]]-d>x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (int i=0;i<n;++i) if (2 * h[i] <= lmax[i] && 2 * h[i] <= rmax[i]) ans++; printf(\"%d\",ans); return 0; }","title":"1557"},{"location":"nr/1557/#1557","text":"\u9898\u76ee","title":"1557 \u5976\u725b\u8ba1\u6570"},{"location":"nr/1557/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> void qsort(int *s,int *t,int *p,int *q){ if (t-s<=1) return; int i=0,j=int(t-s)-1,x=s[0],y=p[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) {s[i]=s[j]; p[i++]=p[j];} while (i<j&&s[i]<=x) i++; if (i<j) {s[j]=s[i]; p[j--]=p[i];} } s[j]=x; p[j]=y; qsort(s,s+j,p,p+j); qsort(s+j+1,t,p+j+1,q); } int ans,p,x[100000],n,d,head,tail,h[100000],a[100000],lmax[100000],rmax[100000],bx[100000]; int main() { scanf(\"%d%d\",&n,&d); for (int i=0;i<n;++i) scanf(\"%d%d\",&x[i],&h[i]); qsort(x,x+n,h,h+n); head=0; tail=0; for (;x[p]<=d&&p<n;++p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } for (;p<n;++p){ while (tail<head&&x[a[tail]]+d<x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } head=0; tail=0; for (p=n-1;x[p]>=x[n-1]-d;--p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (;p>=0;--p){ while (tail<head&&x[a[tail]]-d>x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (int i=0;i<n;++i) if (2 * h[i] <= lmax[i] && 2 * h[i] <= rmax[i]) ans++; printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1564/","text":"1564 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 \u9898\u76ee Description \u6709\u4e00\u4e2a6*6\u7684\u68cb\u76d8\uff0c\u6bcf\u4e2a\u68cb\u76d8\u4e0a\u90fd\u6709\u4e00\u4e2a\u6570\u503c\uff0c\u73b0\u5728\u53c8\u4e00\u4e2a\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ec8\u6b62\u4f4d\u7f6e\uff0c\u8bf7\u627e\u51fa\u4e00\u4e2a\u4ece\u8d77\u59cb\u4f4d\u7f6e\u5230\u7ec8\u6b62\u4f4d\u7f6e\u4ee3\u4ef7\u6700\u5c0f\u7684\u8def\u5f84\uff1a \u53ea\u80fd\u6cbf\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8 \u603b\u4ee3\u4ef7\u662f\u6ca1\u8d70\u4e00\u6b65\u7684\u4ee3\u4ef7\u4e4b\u548c \u6bcf\u6b65\uff08\u4ecea,b\u5230c,d\uff09\u7684\u4ee3\u4ef7\u662fc,d\u4e0a\u7684\u503c\u4e0e\u5176\u5728a,b\u4e0a\u7684\u72b6\u6001\u7684\u4e58\u79ef \u521d\u59cb\u72b6\u6001\u4e3a1 \u6bcf\u8d70\u4e00\u6b65\uff0c\u72b6\u6001\u6309\u5982\u4e0b\u516c\u5f0f\u53d8\u5316\uff1a\uff08\u8d70\u8fd9\u6b65\u7684\u4ee3\u4ef7%4\uff09+1\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8868\u793a\u6709n\u7ec4\u6570\u636e\u3002 \u6bcf\u7ec4\u6570\u636e\u4e00\u5f00\u59cb\u4e3a6*6\u7684\u77e9\u9635\uff0c\u77e9\u9635\u7684\u503c\u4e3a\u5927\u4e8e\u7b49\u4e8e1\u5c0f\u4e8e\u7b49\u4e8e10\u7684\u503c\uff0c\u7136\u540e\u56db\u4e2a\u6574\u6570\u8868\u793a\u8d77\u59cb\u5750\u6807\u548c\u7ec8\u6b62\u5750\u6807\u3002 Output Format \u8f93\u51fa\u6700\u5c0f\u4ee3\u4ef7 Sample Input 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 5 5 Sample Output 23 FineArtz's solution Star /* \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[6][6]; bool v[6][6]; int ans = 0; bool check(int x, int y){ if (x < 0 || x > 5 || y < 0 || y > 5 || v[x][y]) return false; else return true; } void dfs(int x, int y, int ex, int ey, int cost, int state){ if (x == ex && y == ey){ ans = min(ans, cost); return; } for (int k = 0; k < 4; ++k){ int nextx = x + dx[k]; int nexty = y + dy[k]; if (check(nextx, nexty)){ int newcost = a[nextx][nexty] * state; int newstate = newcost % 4 + 1; v[x][y] = true; dfs(nextx, nexty, ex, ey, cost + newcost, newstate); v[x][y] = false; } } } int main(){ int t; cin >> t; while (t--){ for (int i = 0; i < 6; ++i) for (int j = 0; j < 6; ++j) cin >> a[i][j]; memset(v, 0, sizeof(v)); int sx, sy, ex, ey; cin >> sx >> sy >> ex >> ey; v[sx][sy] = true; ans = 2147483647; dfs(sx, sy, ex, ey, 0, 1); cout << ans << endl; } return 0; }","title":"1564"},{"location":"nr/1564/#1564","text":"\u9898\u76ee","title":"1564 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898"},{"location":"nr/1564/#fineartzs-solution-star","text":"/* \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[6][6]; bool v[6][6]; int ans = 0; bool check(int x, int y){ if (x < 0 || x > 5 || y < 0 || y > 5 || v[x][y]) return false; else return true; } void dfs(int x, int y, int ex, int ey, int cost, int state){ if (x == ex && y == ey){ ans = min(ans, cost); return; } for (int k = 0; k < 4; ++k){ int nextx = x + dx[k]; int nexty = y + dy[k]; if (check(nextx, nexty)){ int newcost = a[nextx][nexty] * state; int newstate = newcost % 4 + 1; v[x][y] = true; dfs(nextx, nexty, ex, ey, cost + newcost, newstate); v[x][y] = false; } } } int main(){ int t; cin >> t; while (t--){ for (int i = 0; i < 6; ++i) for (int j = 0; j < 6; ++j) cin >> a[i][j]; memset(v, 0, sizeof(v)); int sx, sy, ex, ey; cin >> sx >> sy >> ex >> ey; v[sx][sy] = true; ans = 2147483647; dfs(sx, sy, ex, ey, 0, 1); cout << ans << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1567/","text":"1567 \u6784\u9020\u83f1\u5f62 \u9898\u76ee Description \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u548c\u5bf9\u89d2\u7ebf\u957f\uff0c\u6784\u9020\u4e00\u4e2a\u503e\u659c\u653e\u7f6e\u7684\u83f1\u5f62\u3002 Input Format \u8f93\u5165\u53ea\u6709\u4e00\u884c\uff0c \u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u548c\u4e00\u4e2a\u6574\u6570n\u3002\u8868\u793a\u7528\u8be5\u5b57\u7b26\u6765\u6784\u9020\u83f1\u5f62\uff0c\u5176\u5bf9\u89d2\u7ebf\u957f\u4e3an\u3002 \u4fdd\u8bc1\u5bf9\u89d2\u7ebf\u957fn\u4e3a\u5947\u6570\u3002 Output Format \u8f93\u51fa\u7528\u8be5\u5b57\u7b26\u6784\u6210\u7684\u83f1\u5f62\u3002 Sample Input * 5 Sample Output * *** ***** *** * FineArtz's solution Star /* \u6784\u9020\u83f1\u5f62 */ #include <iostream> using namespace std; int main(){ char ch; int n; cin >> ch >> n; for (int i = 1; i <= n / 2 + 1; ++i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } for (int i = n / 2; i >= 1; --i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { char c; int n, half; cin >> c >> n; half = (n + 1) / 2; for (int i = 1; i <= half; ++i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } for (int i = half - 1; i >= 1; --i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } return 0; }","title":"1567"},{"location":"nr/1567/#1567","text":"\u9898\u76ee","title":"1567 \u6784\u9020\u83f1\u5f62"},{"location":"nr/1567/#fineartzs-solution-star","text":"/* \u6784\u9020\u83f1\u5f62 */ #include <iostream> using namespace std; int main(){ char ch; int n; cin >> ch >> n; for (int i = 1; i <= n / 2 + 1; ++i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } for (int i = n / 2; i >= 1; --i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1567/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { char c; int n, half; cin >> c >> n; half = (n + 1) / 2; for (int i = 1; i <= half; ++i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } for (int i = half - 1; i >= 1; --i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1570/","text":"1570 number100 \u9898\u76ee Description \u4e8c\u54e5\u624b\u4e0a\u6709N\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u5df2\u7ecf\u88ab\u4e8c\u54e5\u6392\u597d\u987a\u5e8f\u4e86\uff0c\u4e8c\u54e5\u77e5\u9053\u8fd9\u91cc\u9762\u6709\u81ea\u5df1\u559c\u6b22\u7684T\u4e2a\u6570\u5b57\u3002 \u73b0\u5728\u4ed6\u60f3\u77e5\u9053\u5bf9\u4e8e\u81ea\u5df1\u559c\u6b22\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9n\u4e2a\u6570\u5b57\u4e2d\u6bd4\u5b83\u5927\u7684\u6709\u591a\u5c11\u4e2a\u3002 N,T<=100,000 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 N,T \u63a5\u4e0b\u6765\u4e00\u884c N \u4e2a\u6570\u4ee3\u8868\u4e8c\u54e5\u624b\u4e0a\u7684\u6570\u5b57 {X_1,X_2,\u2026,X_N} \u3002 \u63a5\u4e0b\u6765\u4e00\u884c T \u4e2a\u6570\u4ee3\u8868\u4e8c\u54e5\u559c\u6b22\u7684\u6570\u5b57 {Y_1,Y_2,\u2026,Y_N} \u3002 Output Format \u6bcf\u884c\u8f93\u51fa\u4e00\u4e2a\u6570\u5b57\uff0c\u8868\u793a\u4e8c\u54e5\u624b\u4e0a\u7684\u6570\u5b57\u6bd4\u8fd9\u4e2a\u559c\u6b22\u7684\u6570\u5b57 {Y_i} \u5927\u7684\u4e2a\u6570\u3002 Sample Input 5 3 1 3 5 7 9 3 4 9 Sample Output 3 3 0 Sample Input 5 2 1 3 5 7 9 0 10 Sample Output 5 0 Limits \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N,T\\leq 1000\\) \u5bf9\u4e8e\\(70\\%\\)\u7684\u6570\u636e\uff0c\\(N,T\\leq 100000\\), \\(X_i,Y_i \\leq 100000\\) \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(N,T\\leq 100000\\), \\(X_i,Y_i \\leq 2,000,000,000\\), \u6240\u6709\u6570\u5b57\u5747\u4e3a\u975e\u8d1f\u6574\u6570\u3002 vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; const int MAXNUM = 100005; int search(int arr[], int N, int target) { int low = 0, high = N - 1, mid = (low + high + 1) / 2; while (high > low) { if (arr[mid] > target) high = mid - 1; else low = mid; mid = (low + high + 1) / 2; } return mid; } int main() { int N, T; int arr1[MAXNUM], arr2[MAXNUM]; cin >> N >> T; for (int i = 0; i < N; ++i) scanf(\"%d\", &arr1[i]); for (int i = 0; i < T; ++i) scanf(\"%d\", &arr2[i]); for (int i = 0; i < T; ++i) { if (arr2[i] < arr1[0]) printf(\"%d\\n\", N); else printf(\"%d\\n\", N - search(arr1, N, arr2[i]) - 1); } return 0; }","title":"1570"},{"location":"nr/1570/#1570-number100","text":"\u9898\u76ee","title":"1570 number100"},{"location":"nr/1570/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; const int MAXNUM = 100005; int search(int arr[], int N, int target) { int low = 0, high = N - 1, mid = (low + high + 1) / 2; while (high > low) { if (arr[mid] > target) high = mid - 1; else low = mid; mid = (low + high + 1) / 2; } return mid; } int main() { int N, T; int arr1[MAXNUM], arr2[MAXNUM]; cin >> N >> T; for (int i = 0; i < N; ++i) scanf(\"%d\", &arr1[i]); for (int i = 0; i < T; ++i) scanf(\"%d\", &arr2[i]); for (int i = 0; i < T; ++i) { if (arr2[i] < arr1[0]) printf(\"%d\\n\", N); else printf(\"%d\\n\", N - search(arr1, N, arr2[i]) - 1); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1577/","text":"1577 \u963f\u9ed1\u7684\u8d28\u7c92 \u9898\u76ee Description \u201c\u963f\u9ed1\u201d\u662f\u4e00\u79cd\u795e\u5947\u7684\u7269\u79cd\uff0c\u8fd1\u6765\u751f\u7269\u5b66\u5bb6\u5bf9\u5176\u4f53\u5185\u7684\u57fa\u56e0\u7ec4\u6210\u975e\u5e38\u611f\u5174\u8da3\u3002\u6211\u4eec\u90fd\u77e5\u9053\u751f\u7269\u7ec6\u80de\u5185\u5b58\u5728\u7740\u201c\u8d28\u7c92\u201d\uff0c\u201c\u963f\u9ed1\u201d\u7684\u7ec6\u80de\u5185\u4e5f\u662f\u5982\u6b64\u3002\u8d28\u7c92\u662f\u7531\u591a\u79cd\u57fa\u56e0\u62fc\u63a5\u5728\u4e00\u8d77\u7ec4\u6210\u7684\u73af\u72b6\u7ed3\u6784\uff0c\u57fa\u56e0\u5728\u4e0a\u9762\u662f\u8fde\u7eed\u76f8\u63a5\u7684(\u4e0d\u8003\u8651\u6ca1\u6709\u57fa\u56e0\u7684\u90e8\u5206)\u3002\u7531\u4e8e\u201c\u963f\u9ed1\u201d\u7684\u8eab\u4f53\u7ed3\u6784\u8fc7\u4e8e\u7b80\u5355\uff0c\u5176\u8d28\u7c92\u4e0a\u7684\u57fa\u56e0\u6700\u591a\u53ea\u6709 26 \u79cd\uff0c\u5206\u522b\u7528\u5c0f\u5199\u5b57\u6bcd a ~ z \u6765\u8868\u793a\uff0c\u4f46\u6bcf\u79cd\u57fa\u56e0\u53ef\u80fd\u5b58\u5728\u591a\u4e2a\u3002\u751f\u7269\u5b66\u5bb6\u5728\u5bfb\u627e\u4e00\u79cd \u5df2\u77e5\u5e8f\u5217\u7684\u8d28\u7c92 \uff0c\u4e8e\u662f\u4ece\u201c\u963f\u9ed1\u201d\u4f53\u5185\u62bd\u53d6\u4e86 n \u4e2a\u8d28\u7c92\u8fdb\u884c\u7814\u7a76\uff0c\u5c06\u6bcf\u4e2a\u8d28\u7c92\u90fd\u521a\u597d\u5207\u4e86\u4e00\u5200\uff0c\u53d8\u6210\u4e86\u4e00\u6761\u6761\u201c\u957f\u94fe\u201d\uff0c\u4f8b\u5982\uff1a -abhhhgllt- \u3002\u751f\u7269\u5b66\u5bb6\u60f3\u77e5\u9053\u8fd9 n \u4e2a\u957f\u94fe\u4e2d\u6709\u51e0\u4e2a\u5bf9\u5e94\u7684\u539f\u8d28\u7c92\u548c \u5df2\u77e5\u8d28\u7c92 \u662f\u76f8\u540c\u7684\u3002 Hint 1.\u957f\u94fe\u6b63\u7740\u8bfb\u548c\u53cd\u7740\u8bfb\u662f\u7b49\u6548\u7684\uff0c\u4f8b\u5982 -abcd- \u548c -dcba- \u662f\u540c\u4e00\u79cd\u8d28\u7c92\u3002 2.\u5207\u7684\u4f4d\u7f6e\u4e0d\u540c\u4f46\u662f\u62fc\u56de\u8d28\u7c92\u4ee5\u540e\u53ef\u80fd\u4f1a\u76f8\u540c\uff0c\u4f8b\u5982 -abcd- \u548c -bcda- \u662f\u540c\u4e00\u79cd\u8d28\u7c92\u3002 3.\u7b26\u53f7 - \u662f\u6807\u8bb0\u7b26\uff0c\u4e0d\u4ee3\u8868\u57fa\u56e0\uff0c\u6ce8\u610f\u907f\u5f00\u3002 4.\u957f\u5ea6\u4e0d\u540c\u7684\u8d28\u7c92\u5f53\u7136\u4e0d\u662f\u540c\u4e00\u79cd\u5566\u3002 Input Format \u7b2c 1 \u884c\u662f\u4e00\u4e2a\u6574\u6570 n \uff0c\u4ee3\u8868\u62bd\u53d6\u4e86 n \u4e2a\u8d28\u7c92\u3002 \u7b2c 2 \u884c\u662f\u5df2\u77e5\u8d28\u7c92\u7684\u5e8f\u5217\uff0c\u7528\u957f\u94fe\u8868\u793a\u3002 \u7b2c 3 ~ n+2 \u884c\u662f\u62bd\u53d6\u7684n\u4e2a\u8d28\u7c92\u7684\u957f\u94fe\u8868\u793a\uff0c\u6bcf\u884c\u4e00\u6761\u94fe\u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u4ee3\u8868\u5019\u9009\u8d28\u7c92\u4e2d\u6709\u51e0\u4e2a\u4e0e\u7ed9\u5b9a\u8d28\u7c92\u76f8\u540c\u3002 Sample Input 5 -abcdefg- -gfedcba- -abcd- -defgabc- -fedcbag- -ababcdc- Sample Output 3 Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\u8d28\u7c92\u957f\u5ea6\\(\\in [1, 10]\\), \\(n\\in [1,100]\\)\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u8d28\u7c92\u957f\u5ea6\\(\\in [1, 100]\\), \\(n\\in [1,1000]\\)\u3002 FineArtz's solution Star /* \u963f\u9ed1\u7684\u8d28\u7c92 */ #include <iostream> #include <string> using namespace std; int main(){ int n; cin >> n; string s, t; cin >> s; s.erase(s.begin()); s.erase(s.end() - 1); int cnt = 0; while (n--){ cin >> t; t.erase(t.begin()); t.erase(t.end() - 1); if (t.size() != s.size()) continue; t += t; if (t.find(s) != string::npos) ++cnt; else{ string p(t.rbegin(), t.rend()); if (p.find(s) != string::npos) ++cnt; } } cout << cnt << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; int main() { int n; cin >> n; char target[105], plasmid[105]; cin >> target; char head = target[1]; int count = 0; bool flag; for (int i = 0; i < n; ++i) { flag = false; cin >> plasmid; if (strlen(plasmid) != strlen(target)) continue; for (int j = 1; j <= strlen(target) - 2; ++j) { if (flag) break; if (plasmid[j] != head) continue; else { int k = j + 1, l = 2; if (k > strlen(target) - 2) k = 1; bool isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } ++k; ++l; if (k > strlen(target) - 2) k = 1; } if (isTheSame) { flag = true; break; } k = j - 1; if (k < 1) k = strlen(target) - 2; l = 2; isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } --k; ++l; if (k < 1) k = strlen(target) - 2; } if (isTheSame) { flag = true; break; } } } if (flag) ++count; } cout << count; return 0; }","title":"1577"},{"location":"nr/1577/#1577","text":"\u9898\u76ee","title":"1577 \u963f\u9ed1\u7684\u8d28\u7c92"},{"location":"nr/1577/#fineartzs-solution-star","text":"/* \u963f\u9ed1\u7684\u8d28\u7c92 */ #include <iostream> #include <string> using namespace std; int main(){ int n; cin >> n; string s, t; cin >> s; s.erase(s.begin()); s.erase(s.end() - 1); int cnt = 0; while (n--){ cin >> t; t.erase(t.begin()); t.erase(t.end() - 1); if (t.size() != s.size()) continue; t += t; if (t.find(s) != string::npos) ++cnt; else{ string p(t.rbegin(), t.rend()); if (p.find(s) != string::npos) ++cnt; } } cout << cnt << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1577/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int main() { int n; cin >> n; char target[105], plasmid[105]; cin >> target; char head = target[1]; int count = 0; bool flag; for (int i = 0; i < n; ++i) { flag = false; cin >> plasmid; if (strlen(plasmid) != strlen(target)) continue; for (int j = 1; j <= strlen(target) - 2; ++j) { if (flag) break; if (plasmid[j] != head) continue; else { int k = j + 1, l = 2; if (k > strlen(target) - 2) k = 1; bool isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } ++k; ++l; if (k > strlen(target) - 2) k = 1; } if (isTheSame) { flag = true; break; } k = j - 1; if (k < 1) k = strlen(target) - 2; l = 2; isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } --k; ++l; if (k < 1) k = strlen(target) - 2; } if (isTheSame) { flag = true; break; } } } if (flag) ++count; } cout << count; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1579/","text":"1579 LCS \u9898\u76ee Description \u7ed9\u51fa\u4e24\u4e2a\u5e8f\u5217x[1..m]\u548cy[1..n]\uff0c\u627e\u51fa\u4e8c\u8005\u7684\u4e00\u4e2a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u5e8f\u5217\u5220\u9664\u4e00\u4e9b\u5143\u7d20\u540e\u5f97\u5230\u7684\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u5fc5\u987b\u4fdd\u6301\u76f8\u5bf9\u987a\u5e8f\u3002\u4f8b\u5982x = ABCBDAB\uff0cy = BDCABA\uff0c\u5219\u4e00\u4e2a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u4e3aLCS(x, y) = BCBA\u3002\u8fd9\u91ccLCS\u501f\u7528\u51fd\u6570\u8bb0\u53f7\u6765\u8868\u793a\u4e00\u4e2a\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570n,m \uff0c\u5206\u522b\u4ee3\u8868\u5e8f\u5217x\u548cy\u7684\u957f\u5ea6\u3002 \u63a5\u4e0b\u6765\u4e00\u884c n \u4e2a\u5b57\u6bcd\u4ee3\u8868x\u5e8f\u5217\u3002 \u63a5\u4e0b\u6765\u4e00\u884c m \u4e2a\u5b57\u6bcd\u4ee3\u8868y\u5e8f\u5217\u3002 Output Format \u8f93\u51faLCS\uff08x,y\uff09\u7684\u957f\u5ea6 \u6ce8\u610f\uff1a\u7b54\u6848\u6ca1\u6709\u5bf9\u4efb\u4f55\u6570\u53d6\u6a21 \u3002 Sample Input 7 6 ABCBDAB BDCABA Sample Output 4 Limits \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 <= n,m <= 1000\u3002 WashSwang's solution Star #include <iostream> using namespace std; int n,m,dp[1005][1005]; char x[1005],y[1005]; int main() { cin>>n>>m; cin>>x>>y; for (int i=1;i<=n;++i) for (int j=1;j<=m;++j) { if (x[i-1]==y[j-1]) dp[i][j]=dp[i-1][j-1]+1; else dp[i][j]=max(dp[i-1][j],dp[i][j-1]); } cout<<dp[n][m]; return 0; }","title":"1579"},{"location":"nr/1579/#1579-lcs","text":"\u9898\u76ee","title":"1579 LCS"},{"location":"nr/1579/#washswangs-solution-star","text":"#include <iostream> using namespace std; int n,m,dp[1005][1005]; char x[1005],y[1005]; int main() { cin>>n>>m; cin>>x>>y; for (int i=1;i<=n;++i) for (int j=1;j<=m;++j) { if (x[i-1]==y[j-1]) dp[i][j]=dp[i-1][j-1]+1; else dp[i][j]=max(dp[i-1][j],dp[i][j-1]); } cout<<dp[n][m]; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1580/","text":"1580 LIS \u9898\u76ee Description \u7ed9\u4e00\u4e2a\u5e8f\u5217\uff0c\u6c42\u5b83\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u5982 1 6 2 5 4 7 \u8fd9\u4e9b\u6570\u5b57\u4e2d\uff0c 1 2 5(4) 7 \u662f\u6700\u957f\u7684\u4e0a\u5347\u5b50\u5e8f\u5217\uff0c\u957f\u5ea6\u4e3a4. Input Format \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6574\u6570n \uff0c\u4ee3\u8868\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u63a5\u4e0b\u6765\u4e00\u884c n \u4e2a\u6b63\u6574\u6570\u4ee3\u8868\u5e8f\u5217x[1], x[2]\u2026\u2026, x[n]\u3002 Output Format \u8f93\u51fa\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u6ca1\u6709\u5bf9\u4efb\u4f55\u6570\u53d6\u6a21 \u3002 Sample Input 10 17 15 61 17 21 61 100 97 69 7 Sample Output 5 Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0cn <= 100\u3002 \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0cn <= 1000\u3002 \u5bf9\u4e8e90%\u7684\u6570\u636e\uff0cn <= 10000\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cn <= 1000000, 1 <= x[i] <= 10000000\u3002 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int n,st[1100000],a[1000001],top,l,r,m; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); st[0]=-1; for (int i=0;i<n;++i){ if (a[i]>st[top]) st[++top]=a[i]; else{ l=1; r=top; while (l<=r){ m=(l+r)/2; if (st[m]<=a[i]) l=m+1; else r=m-1; } if (st[l-1]!=a[i]) st[l]=a[i]; } } printf(\"%d\",top); return 0; }","title":"1580"},{"location":"nr/1580/#1580-lis","text":"\u9898\u76ee","title":"1580 LIS"},{"location":"nr/1580/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int n,st[1100000],a[1000001],top,l,r,m; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); st[0]=-1; for (int i=0;i<n;++i){ if (a[i]>st[top]) st[++top]=a[i]; else{ l=1; r=top; while (l<=r){ m=(l+r)/2; if (st[m]<=a[i]) l=m+1; else r=m-1; } if (st[l-1]!=a[i]) st[l]=a[i]; } } printf(\"%d\",top); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1582/","text":"1582 NC\u7684\u989c\u6587\u5b57 \u9898\u76ee Description Gaygay\u7684NC\u559c\u6b22\u548c\u840c\u840c\u7684\u7490\u7490\u804a\u5929\u3002 \u4f46\u662f\u7490\u7490\u4e0d\u7231\u642d\u7406\u4ed6\u3002 \u60b2\u4f24\u7684NC\u8dd1\u53bb\u95ee\u5927\u5927\uff0c\u5927\u5927\u8bf4\uff1a\u4e00\u5b9a\u662f\u4f60\u7684\u6bdb\u592a\u591a\u4e86\u3002 \uff08\u256f\u2035\u25a1\u2032\uff09\u256f\ufe35\u2534\u2500\u2534 \u60b2\u4f24double\u7684NC\u8dd1\u53bb\u95eeSpy\uff0cSpy\u8bf4\uff1a\u4f60\u5fc5\u987b\u8981\u53d8\u5f97\u8db3\u591f\u840c\u3002 \u201c-\u8bf7\u544a\u8bc9\u6211\u53d8\u840c\u7684\u65b9\u6cd5\u5427\uff01\u201d \u201c-@\u6bdb\u5976\u5976\u201d \u548c\u7f8e\u4eba\u9c7c\u516c\u4e3b\u4e00\u6837\uff0cNC\u4ece\u6bdb\u5976\u5976\u90a3\u91cc\u7528\u4e24\u5757\u8179\u808c\u6362\u6765\u4e86\u53d8\u840c\u7684\u79d8\u65b9\u3002 \u79d8\u65b9\u4e0a\u7684\u6280\u80fd\u5982\u4e0b\uff1a \u6280\u80fd\uff1a\u521d\u7ea7\u989c\u6587\u5b57 \u8bf4\u660e\uff1a\u7531\u201c\u624b\u201d\u3001\u201c\u773c\u201d\u3001\u201c\u53e3\u201d\u4e09\u4e2a\u4e3b\u8981\u90e8\u5206\u7ec4\u6210\u3002 \u683c\u5f0f\uff1a[\u5de6\u624b][(][\u5de6\u773c][\u53e3][\u53f3\u773c][)][\u53f3\u624b] \u8303\u4f8b\uff1a\u256e(\u256f\u25bd\u2570)\u256d <(\u2022\u02d8_\u02d8\u2022)> \u0e51(\u2022\u0300\u3142\u2022\u0301)\u0648\u2727 \u9664\u4e86\u79d8\u65b9\uff0c\u9760\u8c31\u7684\u6bdb\u5976\u5976\u8fd8\u9644\u8d60\u4e86\u7528\u6765\u7ec4\u5408\u8868\u60c5\u7684\u7b26\u53f7\u5e93\u3002 \u8bf7\u4f60\u6309\u7167NC\u7684\u8981\u6c42\uff0c\u5e2e\u4ed6\u8f93\u51fa\u989c\u6587\u5b57\uff0c\u5411\u7490\u7490\u5356\u840c\u3002 Input Format \u8f93\u5165\u9996\u5148\u5728\u524d\u4e09\u884c\u987a\u5e8f\u5bf9\u5e94\u7ed9\u51fa\u624b\u3001\u773c\u3001\u53e3\u7684\u53ef\u9009\u7b26\u53f7\u96c6\u3002\u6bcf\u79cd\u7b26\u53f7\u62ec\u5728\u4e00\u5bf9\u65b9\u62ec\u53f7[ ]\u5185\u3002\u9898\u76ee\u4fdd\u8bc1\u6bcf\u4e2a\u96c6\u5408\u90fd\u81f3\u5c11\u6709\u4e00\u79cd\u7b26\u53f7\uff0c\u5e76\u4e0d\u8d85\u8fc715\u79cd\u7b26\u53f7\uff1b\u6bcf\u79cd\u7b26\u53f7\u5305\u542b1\u52304\u4e2a\u975e\u7a7a\u5b57\u7b26\u3002 \u4e4b\u540e\u4e00\u884c\u7ed9\u51fa\u4e00\u4e2a\u6b63\u6574\u6570K\uff0c\u4e3a\u7528\u6237\u8bf7\u6c42\u7684\u4e2a\u6570\u3002\u968f\u540eK\u884c\uff0c\u6bcf\u884c\u7ed9\u51fa\u4e00\u4e2aNC\u7684\u7b26\u53f7\u9009\u62e9\uff0c\u987a\u5e8f\u4e3a\u5de6\u624b\u3001\u5de6\u773c\u3001\u53e3\u3001\u53f3\u773c\u3001\u53f3\u624b\u2014\u2014\u8fd9\u91cc\u53ea\u7ed9\u51fa\u7b26\u53f7\u5728\u76f8\u5e94\u96c6\u5408\u4e2d\u7684\u5e8f\u53f7\uff08\u4ece1\u5f00\u59cb\uff09\uff0c\u6570\u5b57\u95f4\u4ee5\u7a7a\u683c\u5206\u9694\u3002 Output Format \u5bf9NC\u7684\u6bcf\u4e2a\u8981\u6c42\uff0c\u5728\u4e00\u884c\u4e2d\u8f93\u51fa\u751f\u6210\u7684\u8868\u60c5\u3002\u82e5NC\u9009\u62e9\u7684\u5e8f\u53f7\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa\u201cAre you kidding me? \\(`\u0414\u00b4)/\u201d\u3002 Sample Input [\u256e][\u256d][o][~\\][/~] [<][>] [\u256f][\u2570][^][-][=][>][<][@][\u2299] [\u0414][\u25bd][_][\u03b5][^] ... 4 1 1 2 2 2 6 8 1 5 5 3 3 4 3 3 2 10 3 9 3 Sample Output \u256e(\u256f\u25bd\u2570)\u256d <(@\u0414=)/~ o(^\u03b5^)o Are you kidding me? \\(`\u0414\u00b4)/ FineArtz's solution Star /* NC\u7684\u989c\u6587\u5b57 */ #include <iostream> #include <cstdio> #include <vector> #include <string> using namespace std; const char none[] = \"Are you kidding me? \\\\(`\u0414\u00b4)/\"; /*void init(vector<string> &vs){ char ch; ch = cin.get(); while (ch != '\\n'){ if (ch == '['){ string temps = \"\"; ch = cin.get(); while (ch != ']'){ if (ch == '\\n') return; temps += ch; ch = cin.get(); } if (temps != \"\" && vs.size() < 15) vs.push_back(temps); } ch = cin.get(); } }*/ int main(){ vector<string> lib[3]; char ch; for (int i = 0; i != 3; ++i){ while ((ch = cin.get()) != '\\n'){ if (ch == '['){ string temps; while ((ch = cin.get()) != ']') temps += ch; //if (lib[i].size() < 15) lib[i].push_back(temps); } } } /*for (int i = 0; i != 3; ++i) for (int j = 0; j != lib[i].size(); ++j) cout << lib[i][j] << endl;*/ int k; cin >> k; for (int query = 0; query != k; ++query){ int q[5] = {0}; string ans = \"\"; for (int i = 0; i != 5; ++i) cin >> q[i]; if (q[0] > lib[0].size() || q[0] <=0){ cout << none << endl; continue; } ans += lib[0][q[0] - 1]; ans += \"(\"; if (q[1] > lib[1].size() || q[1] <=0){ cout << none << endl; continue; } ans += lib[1][q[1] - 1]; if (q[2] > lib[2].size() || q[2] <=0){ cout << none << endl; continue; } ans += lib[2][q[2] - 1]; if (q[3] > lib[1].size() || q[3] <=0){ cout << none << endl; continue; } ans += lib[1][q[3] - 1]; ans += \")\"; if (q[4] > lib[0].size() || q[4] <=0){ cout << none << endl; continue; } ans += lib[0][q[4] - 1]; cout << ans << endl; } /*for (int i = 0; i != 3; ++i) { for (int j = 0; j != lib[i].size(); ++j){ for (int k = 0; k != lib[i][j].size(); ++k) cout << int(lib[i][j][k]) << ' '; cout << endl; } }*/ return 0; }","title":"1582"},{"location":"nr/1582/#1582-nc","text":"\u9898\u76ee","title":"1582 NC\u7684\u989c\u6587\u5b57"},{"location":"nr/1582/#fineartzs-solution-star","text":"/* NC\u7684\u989c\u6587\u5b57 */ #include <iostream> #include <cstdio> #include <vector> #include <string> using namespace std; const char none[] = \"Are you kidding me? \\\\(`\u0414\u00b4)/\"; /*void init(vector<string> &vs){ char ch; ch = cin.get(); while (ch != '\\n'){ if (ch == '['){ string temps = \"\"; ch = cin.get(); while (ch != ']'){ if (ch == '\\n') return; temps += ch; ch = cin.get(); } if (temps != \"\" && vs.size() < 15) vs.push_back(temps); } ch = cin.get(); } }*/ int main(){ vector<string> lib[3]; char ch; for (int i = 0; i != 3; ++i){ while ((ch = cin.get()) != '\\n'){ if (ch == '['){ string temps; while ((ch = cin.get()) != ']') temps += ch; //if (lib[i].size() < 15) lib[i].push_back(temps); } } } /*for (int i = 0; i != 3; ++i) for (int j = 0; j != lib[i].size(); ++j) cout << lib[i][j] << endl;*/ int k; cin >> k; for (int query = 0; query != k; ++query){ int q[5] = {0}; string ans = \"\"; for (int i = 0; i != 5; ++i) cin >> q[i]; if (q[0] > lib[0].size() || q[0] <=0){ cout << none << endl; continue; } ans += lib[0][q[0] - 1]; ans += \"(\"; if (q[1] > lib[1].size() || q[1] <=0){ cout << none << endl; continue; } ans += lib[1][q[1] - 1]; if (q[2] > lib[2].size() || q[2] <=0){ cout << none << endl; continue; } ans += lib[2][q[2] - 1]; if (q[3] > lib[1].size() || q[3] <=0){ cout << none << endl; continue; } ans += lib[1][q[3] - 1]; ans += \")\"; if (q[4] > lib[0].size() || q[4] <=0){ cout << none << endl; continue; } ans += lib[0][q[4] - 1]; cout << ans << endl; } /*for (int i = 0; i != 3; ++i) { for (int j = 0; j != lib[i].size(); ++j){ for (int k = 0; k != lib[i][j].size(); ++k) cout << int(lib[i][j][k]) << ' '; cout << endl; } }*/ return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1591/","text":"1591 Count On Tree \u9898\u76ee Description Crystal\u5bb6\u6709\u4e00\u68f5\u6811\u3002\u6811\u4e0a\u6709n\u4e2a\u8282\u70b9\uff0c\u7f16\u53f7\u75311\u5230n\uff081\u53f7\u70b9\u662f\u8fd9\u68f5\u6811\u7684\u6839\uff09\uff0c\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\u4e3a1\u5f53\u4e14\u4ec5\u5f53\u5b83\u4eec\u76f4\u63a5\u76f8\u8fde\u3002\u6bcf\u4e2a\u70b9\u90fd\u6709\u5404\u81ea\u7684\u6743\u503c\uff0c\u7b2ci\u53f7\u8282\u70b9\u7684\u6743\u503c\u4e3avalue_i\u3002Crystal\u73b0\u5728\u6307\u7740\u7f16\u53f7\u4e3ax\u7684\u70b9\u95ee\uff0c\u5728\u4ee5\u70b9x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u4e0e\u70b9x\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8ek\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u662f\u591a\u5c11\u3002 Input Format \u7b2c1\u884c\u4e24\u4e2a\u6574\u6570n\uff0cQ\uff0c\u5206\u522b\u8868\u793a\u6811\u4e0a\u70b9\u7684\u4e2a\u6570\u548cCrystal\u6709Q\u4e2a\u95ee\u9898\u3002 \u7b2c2\u884c\uff0cn\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a1\u81f3n\u53f7\u70b9\u7684\u70b9\u6743\u3002 \u63a5\u4e0b\u6765\u7684n - 1\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570u\uff0cv\uff0c\u8868\u793a\u7f16\u53f7\u4e3au\u7684\u70b9\u4e0e\u7f16\u53f7\u4e3av\u7684\u70b9\u76f4\u63a5\u76f8\u8fde\u3002 \u63a5\u4e0b\u6765Q\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570x\uff0c k\uff0c\u8868\u793a\u8be2\u95ee\u5728\u4ee5\u70b9x\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\uff0c\u4e0e\u70b9x\u8ddd\u79bb\u5927\u4e8e\u7b49\u4e8e\u4e3ak\u7684\u6240\u6709\u70b9\u7684\u70b9\u6743\u548c\u662f\u591a\u5c11\u3002 Output Format Q\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5bf9\u7b2ci\u4e2a\u8be2\u95ee\u7684\u56de\u7b54\u3002 Sample Input 5 3 1 1 1 1 1 1 2 1 3 3 4 4 5 1 3 1 2 1 1 Sample Output 1 2 4 Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1n <= 1000, k < 1, Q <= 1000\u3002 \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1n <= 1000, k < 1000, Q <= 1000 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1n <= 1000, k < 1000, Q <= 1000000; \u5bf9\u4e8e\u6700\u540e20%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1n <= 50000, k < 100, Q <= 1000000; \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u6570\u636e\u5747\u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u4e14\u5728int\u8303\u56f4\u5185\u3002 FineArtz's solution Star /* Count On Tree*/ #include <iostream> #include <vector> #include <queue> using namespace std; class Node{ public: int father = 0; vector<int> edge; long long w = 0, sumw = 0; int depth = 0; int inT = 0, outT = 0; }; Node a[50005]; vector<int> dep[50105]; void makeTree(){ queue<int> q; q.push(1); int now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int i : a[now].edge){ if (i != a[now].father){ a[i].father = now; if (a[i].edge.size() != 1) q.push(i); } } } } /*void print(int root){ if (root == 0) return; cout << root << ' ' << a[root].sumw << endl; print(a[root].lchild); print(a[root].rchild); }*/ long long calcw(int root){ a[root].sumw = a[root].w; for (auto i : a[root].edge){ if (i != a[root].father){ if (a[i].edge.size() != 1) a[root].sumw += calcw(i); else{ a[i].sumw = a[i].w; a[root].sumw += a[i].w; } } } return a[root].sumw; } void calcDepth(int root, int d){ if (root == 0) return; a[root].depth = d; dep[d].push_back(root); for (auto i : a[root].edge){ if (i != a[root].father){ calcDepth(i, d + 1); } } } int timeStamp = 1; void makeStamp(int root){ a[root].inT = timeStamp; for (auto i : a[root].edge){ if (i != a[root].father){ ++timeStamp; makeStamp(i); } } a[root].outT = timeStamp; } long long query(int root, int h){ long long ret = 0; for (auto i : dep[a[root].depth + h]){ if (a[i].inT >= a[root].inT && a[i].outT <= a[root].outT) ret += a[i].sumw; } return ret; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, q, u, v; cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> a[i].w; for (int i = 1; i < n; ++i){ cin >> u >> v; a[u].edge.push_back(v); a[v].edge.push_back(u); } makeTree(); calcw(1); //print(1); calcDepth(1, 1); makeStamp(1); int x, k; for (int i = 1; i <= q; ++i){ cin >> x >> k; cout << query(x, k) << '\\n'; } return 0; }","title":"1591"},{"location":"nr/1591/#1591-count-on-tree","text":"\u9898\u76ee","title":"1591 Count On Tree"},{"location":"nr/1591/#fineartzs-solution-star","text":"/* Count On Tree*/ #include <iostream> #include <vector> #include <queue> using namespace std; class Node{ public: int father = 0; vector<int> edge; long long w = 0, sumw = 0; int depth = 0; int inT = 0, outT = 0; }; Node a[50005]; vector<int> dep[50105]; void makeTree(){ queue<int> q; q.push(1); int now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int i : a[now].edge){ if (i != a[now].father){ a[i].father = now; if (a[i].edge.size() != 1) q.push(i); } } } } /*void print(int root){ if (root == 0) return; cout << root << ' ' << a[root].sumw << endl; print(a[root].lchild); print(a[root].rchild); }*/ long long calcw(int root){ a[root].sumw = a[root].w; for (auto i : a[root].edge){ if (i != a[root].father){ if (a[i].edge.size() != 1) a[root].sumw += calcw(i); else{ a[i].sumw = a[i].w; a[root].sumw += a[i].w; } } } return a[root].sumw; } void calcDepth(int root, int d){ if (root == 0) return; a[root].depth = d; dep[d].push_back(root); for (auto i : a[root].edge){ if (i != a[root].father){ calcDepth(i, d + 1); } } } int timeStamp = 1; void makeStamp(int root){ a[root].inT = timeStamp; for (auto i : a[root].edge){ if (i != a[root].father){ ++timeStamp; makeStamp(i); } } a[root].outT = timeStamp; } long long query(int root, int h){ long long ret = 0; for (auto i : dep[a[root].depth + h]){ if (a[i].inT >= a[root].inT && a[i].outT <= a[root].outT) ret += a[i].sumw; } return ret; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, q, u, v; cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> a[i].w; for (int i = 1; i < n; ++i){ cin >> u >> v; a[u].edge.push_back(v); a[v].edge.push_back(u); } makeTree(); calcw(1); //print(1); calcDepth(1, 1); makeStamp(1); int x, k; for (int i = 1; i <= q; ++i){ cin >> x >> k; cout << query(x, k) << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1592/","text":"1592 \u6c42\u548c \u9898\u76ee Description \u5b50\u865a\u5e74\u4e4c\u6709\u6708\uff0c\u4ea1\u662f\u56fd\u5175\u8d25\uff0c\u4ea1\u662f\u516c\u6b32\u5272\u5730\u4ee5\u6c42\u548c\u3002 \u5df2\u77e5\uff1a \u4ea1\u662f\u56fd\u7586\u57df\u5185\u6709\\(N\\)\u5ea7\u5c01\u4eba\u53e3\u6570\u4e3a\\({X_1,X_2,\u2026,X_N}\\)\u7684\u5c01\u57ce\u3002 \u4ea1\u662f\u516c\u6709\\(M\\)\u4e2a\u5272\u5730\u65b9\u6848\uff0c\u4ed6\u4f1a\u7ed9\u51fa\u5272\u5730\u7684\u8fb9\u754c \\(l,r\\)\uff0c\u6bcf\u4e2a\u65b9\u6848\u4e2d\u5305\u542b\u7684\u9886\u5730\u662f\u8fde\u7eed\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6848\u5305\u542b\u7684\u4eba\u53e3\u6570\u91cf\uff0c\u4ea1\u662f\u516c\u5e0c\u671b\u4f60\u5e2e\u4ed6\u6c42\u548c\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570\\(N,M\\) \uff0c\u5206\u522b\u4ee3\u8868\u5c01\u57ce\u4e2a\u6570\u548c\u65b9\u6848\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765\u4e00\u884c \\(N\\) \u4e2a\u6570\u4ee3\u8868\u6bcf\u4e2a\u57ce\u5e02\u7684\u4eba\u53e3\\( {X_1,X_2,\u2026,X_N}\\)\u3002 \u63a5\u4e0b\u6765 \\(M\\) \u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570 \\(l,r\\)\u3002\u4ee3\u8868\u6c42\u548c\u533a\u95f4\u4e3a \\([l,r]\\)\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6848\uff0c\u8f93\u51fa\u533a\u95f4\u5185\u4eba\u53e3\u6570\u7684\u603b\u548c\uff0c\u6bcf\u4e2a\u8be2\u95ee\u8f93\u51fa\u4e00\u884c\u3002 Sample Input 6 4 46 97 11 90 35 38 3 4 3 3 4 4 1 4 Sample Output 101 11 90 244 Limits \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(\\forall i, X_i\\in [0,2147483647),l,r\\in [1,N]\\)\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(M,N \\leq 10^4\\) \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(M,N \\leq 10^6\\) WashSwang's solution Star #include <iostream> using namespace std; typedef long long ll; ll t[4000000],ans[1000000]; int n,m,k,l,r; inline int lowbit(int x){ return x&-x;} void update(int x,int k){ while (x<=n){ t[x]+=k; x+=lowbit(x); } } ll query(int x){ ll sum=0; while (x>0){ sum+=t[x]; x-=lowbit(x); } return sum; } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){ scanf(\"%d\",&k); update(i,k); } for (int i=0;i<m;++i){ scanf(\"%d%d\",&l,&r); ans[i]=query(r)-query(l-1); } for (int i=0;i<m;++i) printf(\"%lld\\n\",ans[i]); return 0; }","title":"1592"},{"location":"nr/1592/#1592","text":"\u9898\u76ee","title":"1592 \u6c42\u548c"},{"location":"nr/1592/#washswangs-solution-star","text":"#include <iostream> using namespace std; typedef long long ll; ll t[4000000],ans[1000000]; int n,m,k,l,r; inline int lowbit(int x){ return x&-x;} void update(int x,int k){ while (x<=n){ t[x]+=k; x+=lowbit(x); } } ll query(int x){ ll sum=0; while (x>0){ sum+=t[x]; x-=lowbit(x); } return sum; } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){ scanf(\"%d\",&k); update(i,k); } for (int i=0;i<m;++i){ scanf(\"%d%d\",&l,&r); ans[i]=query(r)-query(l-1); } for (int i=0;i<m;++i) printf(\"%lld\\n\",ans[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1593/","text":"1593 Mouse \u9898\u76ee Description \u9694\u58c1\u6751\u7684\u963f\u9ed1\u7684Mouse\u8dd1\u4e86, \u4e8e\u662fMouse\u53d8\u6210\u4e86\u91ce\u751fMouse. \u91ce\u751fMouse\u4e4b\u95f4\u6709\u7740\u4e25\u683c\u7684\u7b49\u7ea7\u79e9\u5e8f, \u6bcf\u9694\u4e00\u6bb5\u65f6\u95f4\u5c31\u4f1a\u4e3e\u529e\u4e00\u573a\u5927\u578b\u7684\u91ce\u751fMice\u6bd4\u8d5b. \u6709 2N \u53ea\u7f16\u53f7\u4ece 0 \u5230 2N \u7684\u91ce\u751fMouse\u8fdb\u884c R \u8f6e\u6bd4\u8d5b. \u6bcf\u8f6e\u6bd4\u8d5b\u5f00\u59cb\u524d, \u4ee5\u53ca\u6240\u6709\u6bd4\u8d5b\u7ed3\u675f\u540e, \u90fd\u4f1a\u6309\u7167\u6bcf\u53ea\u91ce\u751fMice\u7684\u5206\u6570\u4ece\u9ad8\u5230\u4f4e\u5bf9\u9009\u624b\u8fdb\u884c\u4e00\u6b21\u6392\u540d.\u7ea6\u5b9a\u7f16\u53f7\u8f83\u5c0f\u7684\u9009\u624b\u6392\u540d\u9760\u524d. \u6bcf\u8f6e\u6bd4\u8d5b\u7684\u5bf9\u9635\u5b89\u6392\u4e0e\u8be5\u8f6e\u6bd4\u8d5b\u5f00\u59cb\u524d\u7684\u6392\u540d\u6709\u5173\uff1a\u7b2c 1 \u540d\u548c\u7b2c 2 \u540d\u3001\u7b2c 3 \u540d\u548c\u7b2c 4 \u540d...\u7b2c 2K - 1 \u540d\u548c\u7b2c 2K \u540d...\u7b2c 2N - 1 \u540d\u548c\u7b2c2N\u540d,\u5404\u8fdb\u884c\u4e00\u573a\u6bd4\u8d5b. Mouse\u4e4b\u95f4\u53ea\u8fdb\u884c\u5355\u7eaf\u7684\u529b\u91cf\u8f83\u91cf, \u6bcf\u573a\u6bd4\u8d5b\u80dc\u8005\u5f97 2 \u5206\uff0c\u8d1f\u8005\u5f97 0 \u5206, \u5e73\u624b\u5404\u5f97 1 \u5206. \u4e5f\u5c31\u662f\u8bf4\u9664\u4e86\u9996\u8f6e\u4ee5\u5916, \u5176\u5b83\u8f6e\u6bd4\u8d5b\u7684\u5b89\u6392\u5747\u4e0d\u80fd\u4e8b\u5148\u786e\u5b9a, \u800c\u662f\u8981\u53d6\u51b3\u4e8e\u91ce\u751fMouse\u5728\u4e4b\u524d\u6bd4\u8d5b\u4e2d\u7684\u8868\u73b0. \u73b0\u7ed9\u5b9a\u6bcf\u4e2a\u91ce\u751fMouse\u7684\u521d\u59cb\u5206\u6570\u53ca\u5176\u529b\u91cf\u503c\uff0c\u8bd5\u8ba1\u7b97\u5728 R \u8f6e\u6bd4\u8d5b\u8fc7\u540e\uff0c\u6240\u6709\u91ce\u751fMouse\u7684\u6392\u540d\u3002 Input Format \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6b63\u6574\u6570 N , R , \u542b\u4e49\u5982\u4e0a. \u7b2c\u4e8c\u884c\u662f 2N \u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u975e\u8d1f\u6574\u6570{ P }, \u8868\u793a\u6bcf\u53eaMouse\u7684\u521d\u59cb\u5206\u6570. \u7b2c\u4e09\u884c\u662f 2N \u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u975e\u8d1f\u6574\u6570{ S }, , \u8868\u793a\u6bcf\u53eaMouse\u7684\u529b\u91cf\u503c. Output Format \u6309\u6392\u540d\u4ece\u5c0f\u5230\u5927\u8f93\u51fa R \u8f6e\u6bd4\u8d5b\u540e 2N \u53ea\u91ce\u751fMouse\u7684\u7f16\u53f7. Sample Input 10 10 0 10 49 24 7 1 64 8 52 81 4 9 40 17 52 17 40 0 97 77 0 1 0 1 1 1 0 2 1 0 0 2 1 1 2 0 1 1 1 0 Sample Output 19 10 20 7 15 9 13 17 3 4 14 12 8 2 16 5 6 18 11 1 Limits 10% \u7684\u6570\u636e \\(N \\leq 10, R \\leq 10, P \\leq 10^8, S \\leq 10^8 \\) 30% \u7684\u6570\u636e \\(N \\leq 10^2, R \\leq 60, P \\leq 10^8, S \\leq 10^8 \\) 70% \u7684\u6570\u636e \\(N \\leq 10^4, R \\leq 60, P \\leq 10^8, S \\leq 10^8 \\) 100% \u7684\u6570\u636e \\(N \\leq 10^5, R \\leq 60, P \\leq 10^8, S \\leq 10^8 \\) VictriD's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; struct mouse { int number; int score; int strength; }; mouse tmplist[200005]; mouse ml[200005]; mouse* MergeSort(mouse* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].score < list[1].score || (list[0].score == list[1].score && list[0].number > list[1].number)) { mouse temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } mouse* llst = MergeSort(list, listSize / 2); mouse* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if (((llst[lct].score > rlst[rct].score || (llst[lct].score == rlst[rct].score && llst[lct].number < rlst[rct].number)) && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } memcpy(list, tmplist, listSize * sizeof(mouse)); return list; } int main() { int N, R; cin >> N >> R; for (int i = 0; i < 2 * N; i++) { ml[i].number = i + 1; scanf(\"%d\", &(ml[i].score)); } for (int i = 0; i < 2 * N; i++) { scanf(\"%d\", &(ml[i].strength)); } MergeSort(ml, 2 * N); for (int i = 0; i < R; i++) { for (int i = 0; i < 2 * N; i += 2) { if (ml[i].strength > ml[i + 1].strength) ml[i].score += 2; if (ml[i].strength == ml[i + 1].strength) ml[i].score++, ml[i + 1].score++; if (ml[i].strength < ml[i + 1].strength) ml[i + 1].score += 2; } MergeSort(ml, 2 * N); } for (int i = 0; i < 2 * N; i++) { if (i) printf(\"%c\",' '); printf(\"%d\",ml[i].number); } return 0; } FineArtz's solution Star /* Mouse */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; class Mouse{ public: Mouse() = default; Mouse(int x, int y, int z) : id(x), score(y), abi(z) {} int id = 0, score = 0, abi = 0; bool operator <(const Mouse &m){ return (score > m.score || score == m.score && id < m.id); } }; int n, r; Mouse win[200005], draw[200005], lose[200005], rk[200005]; void merge(int ww, int dd, int ll){ int w = 1, d = 1, l = 1, p = 0; while (p <= 2 * n){ if (win[w] < draw[d] && win[w] < lose[l]){ rk[++p] = win[w++]; } else if (draw[d] < win[w] && draw[d] < lose[l]){ rk[++p] = draw[d++]; } else if (lose[l] < win[w] && lose[l] < draw[d]){ rk[++p] = lose[l++]; } else break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> r; for (int i = 1; i <= 2 * n; ++i){ cin >> rk[i].score; rk[i].id = i; } for (int i = 1; i <= 2 * n; ++i) cin >> rk[i].abi; sort(rk + 1, rk + 2 * n + 1); int w, d, l; for (int round = 1; round <= r; ++round){ w = 0, d = 0, l = 0; for (int race = 1; race <= n; ++race){ if (rk[race * 2 - 1].abi > rk[race * 2].abi){ rk[race * 2 - 1].score += 2; win[++w] = rk[race * 2 - 1]; lose[++l] = rk[race * 2]; } else if (rk[race * 2 - 1].abi == rk[race * 2].abi){ ++rk[race * 2 - 1].score; ++rk[race * 2].score; draw[++d] = rk[race * 2 - 1]; draw[++d] = rk[race * 2]; } else{ rk[race * 2].score += 2; win[++w] = rk[race * 2]; lose[++l] = rk[race * 2 - 1]; } } win[w + 1] = Mouse(0, -1, 0); draw[d + 1] = Mouse(0, -1, 0); lose[l + 1] = Mouse(0, -1, 0); merge(w, d, l); } for (int i = 1; i <= 2 * n; ++i) cout << rk[i].id << \" \"; cout << '\\n'; return 0; }","title":"1593"},{"location":"nr/1593/#1593-mouse","text":"\u9898\u76ee","title":"1593 Mouse"},{"location":"nr/1593/#victrids-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; struct mouse { int number; int score; int strength; }; mouse tmplist[200005]; mouse ml[200005]; mouse* MergeSort(mouse* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].score < list[1].score || (list[0].score == list[1].score && list[0].number > list[1].number)) { mouse temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } mouse* llst = MergeSort(list, listSize / 2); mouse* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if (((llst[lct].score > rlst[rct].score || (llst[lct].score == rlst[rct].score && llst[lct].number < rlst[rct].number)) && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } memcpy(list, tmplist, listSize * sizeof(mouse)); return list; } int main() { int N, R; cin >> N >> R; for (int i = 0; i < 2 * N; i++) { ml[i].number = i + 1; scanf(\"%d\", &(ml[i].score)); } for (int i = 0; i < 2 * N; i++) { scanf(\"%d\", &(ml[i].strength)); } MergeSort(ml, 2 * N); for (int i = 0; i < R; i++) { for (int i = 0; i < 2 * N; i += 2) { if (ml[i].strength > ml[i + 1].strength) ml[i].score += 2; if (ml[i].strength == ml[i + 1].strength) ml[i].score++, ml[i + 1].score++; if (ml[i].strength < ml[i + 1].strength) ml[i + 1].score += 2; } MergeSort(ml, 2 * N); } for (int i = 0; i < 2 * N; i++) { if (i) printf(\"%c\",' '); printf(\"%d\",ml[i].number); } return 0; }","title":"VictriD's solution Star"},{"location":"nr/1593/#fineartzs-solution-star","text":"/* Mouse */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; class Mouse{ public: Mouse() = default; Mouse(int x, int y, int z) : id(x), score(y), abi(z) {} int id = 0, score = 0, abi = 0; bool operator <(const Mouse &m){ return (score > m.score || score == m.score && id < m.id); } }; int n, r; Mouse win[200005], draw[200005], lose[200005], rk[200005]; void merge(int ww, int dd, int ll){ int w = 1, d = 1, l = 1, p = 0; while (p <= 2 * n){ if (win[w] < draw[d] && win[w] < lose[l]){ rk[++p] = win[w++]; } else if (draw[d] < win[w] && draw[d] < lose[l]){ rk[++p] = draw[d++]; } else if (lose[l] < win[w] && lose[l] < draw[d]){ rk[++p] = lose[l++]; } else break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> r; for (int i = 1; i <= 2 * n; ++i){ cin >> rk[i].score; rk[i].id = i; } for (int i = 1; i <= 2 * n; ++i) cin >> rk[i].abi; sort(rk + 1, rk + 2 * n + 1); int w, d, l; for (int round = 1; round <= r; ++round){ w = 0, d = 0, l = 0; for (int race = 1; race <= n; ++race){ if (rk[race * 2 - 1].abi > rk[race * 2].abi){ rk[race * 2 - 1].score += 2; win[++w] = rk[race * 2 - 1]; lose[++l] = rk[race * 2]; } else if (rk[race * 2 - 1].abi == rk[race * 2].abi){ ++rk[race * 2 - 1].score; ++rk[race * 2].score; draw[++d] = rk[race * 2 - 1]; draw[++d] = rk[race * 2]; } else{ rk[race * 2].score += 2; win[++w] = rk[race * 2]; lose[++l] = rk[race * 2 - 1]; } } win[w + 1] = Mouse(0, -1, 0); draw[d + 1] = Mouse(0, -1, 0); lose[l + 1] = Mouse(0, -1, 0); merge(w, d, l); } for (int i = 1; i <= 2 * n; ++i) cout << rk[i].id << \" \"; cout << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1594/","text":"1594 \u6c42\u548c \u9898\u76ee Description \u5b50\u865a\u5e74\u4e4c\u6709\u6708\uff0c\u4ea1\u662f\u56fd\u5175\u8d25\uff0c\u4ea1\u662f\u516c\u6b32\u5272\u5730\u4ee5\u6c42\u548c\u3002 \u5df2\u77e5\uff1a \u4ea1\u662f\u56fd\u7586\u57df\u5185\u6709\\(N*M\\)\u5ea7\u5448\u77e9\u5f62\u5206\u5e03\u7684\u5c01\u57ce\u3002 \u6bcf\u5ea7\u5c01\u57ce\u7684\u4eba\u53e3\u6570\u7531\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed9\u51fa\\({a[1][1],a[1][2],\u2026,a[N][M]}\\). \u4ea1\u662f\u516c\u6709\\(Q\\)\u4e2a\u5272\u5730\u65b9\u6848\uff0c\u4ed6\u4f1a\u7ed9\u51fa\u5272\u5730\u7684\u8fb9\u754c \\(x1,y1,x2,y2\\)\uff0c\u6bcf\u4e2a\u65b9\u6848\u4e2d\u5305\u542b\u7684\u9886\u5730\u662f\u8fde\u7eed\u7684\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6848\u5305\u542b\u7684\u4eba\u53e3\u6570\u91cf\\(a[x1][y1]+a[x1][y1+1]+\u2026+a[x2][y2]\\)\uff0c\u4ea1\u662f\u516c\u5e0c\u671b\u4f60\u5e2e\u4ed6\u6c42\u548c\u3002 Input Format \u7b2c\u4e00\u884c\u6709\u4e09\u4e2a\u6574\u6570\\(N,M,Q\\) \uff0c\u4ee3\u8868\u77e9\u5f62\u8fb9\u957f\u548c\u65b9\u6848\u6570\u3002 \u63a5\u4e0b\u6765 \\(N\\) \u884c\uff0c\u6bcf\u884c\\(M\\) \u4e2a\u6570\uff0c\u4ee3\u8868\u6bcf\u4e2a\u57ce\u5e02\u7684\u4eba\u53e3\u3002 \u63a5\u4e0b\u6765 \\(Q\\) \u884c\uff0c\u6bcf\u884c\u56db\u4e2a\u6574\u6570 \\(x1,y1,x2,y2\\)\uff0c\u4ee3\u8868\u6c42\u548c\u533a\u95f4\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u65b9\u6848\uff0c\u8f93\u51fa\u533a\u95f4\u5185\u4eba\u53e3\u6570\u7684\u603b\u548c\uff0c\u6bcf\u4e2a\u8be2\u95ee\u8f93\u51fa\u4e00\u884c\u3002 Sample Input 3 7 2 5 3 4 8 8 6 3 0 4 1 6 1 3 3 6 2 9 0 4 3 9 1 6 1 7 2 2 3 7 Sample Output 9 45 Limits \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(\\forall i,j, a[i][j]\\in [0,2147483647),1\\leq x1\\leq x2\\leq N, 1\\leq y1\\leq y2\\leq M\\)\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(M*N,Q \\leq 10^4\\) \u5bf9\u4e8e\\(80\\%\\)\u7684\u6570\u636e\uff0c\\(M*N \\leq 10^7, Q \\leq 10^4\\) \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(M*N,Q \\leq 10^7\\) FineArtz's solution Star /* \u6c42\u548c */ #include <iostream> #include <vector> using namespace std; constexpr int MAXS = 5e3 + 5; long long sum[MAXS][MAXS] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m, n, q, t; cin >> n >> m >> q; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } int x1, x2, y1, y2; long long ans = 0; while (q--){ cin >> x1 >> y1 >> x2 >> y2; ans = sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1]; cout << ans << '\\n'; } return 0; } WashSwang's solution Star #include <iostream> using namespace std; int a[10000001],n,m,q,x1,x2,y1,y2; long long map[10000001],ans; int main() { scanf(\"%d%d%d\",&n,&m,&q); for (int i=0;i<n*m;++i){ scanf(\"%d\",&a[i]); if (i>=m) map[i]+=map[i-m]; if (i%m!=0) map[i]+=map[i-1]; if (i>=m&&i%m!=0) map[i]-=map[i-m-1]; map[i]+=a[i]; } for (int i=0;i<q;++i){ scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2); x1-=1; y1-=1; x2-=1; y2-=1; ans=map[x2*m+y2]; if (y1>0) ans-=map[x2*m+y1-1]; if (x1>0) ans-=map[(x1-1)*m+y2]; if (x1>0&&y1>0) ans+=map[(x1-1)*m+y1-1]; printf(\"%lld\\n\",ans); } return 0; }","title":"1594"},{"location":"nr/1594/#1594","text":"\u9898\u76ee","title":"1594 \u6c42\u548c"},{"location":"nr/1594/#fineartzs-solution-star","text":"/* \u6c42\u548c */ #include <iostream> #include <vector> using namespace std; constexpr int MAXS = 5e3 + 5; long long sum[MAXS][MAXS] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m, n, q, t; cin >> n >> m >> q; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } int x1, x2, y1, y2; long long ans = 0; while (q--){ cin >> x1 >> y1 >> x2 >> y2; ans = sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1]; cout << ans << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1594/#washswangs-solution-star","text":"#include <iostream> using namespace std; int a[10000001],n,m,q,x1,x2,y1,y2; long long map[10000001],ans; int main() { scanf(\"%d%d%d\",&n,&m,&q); for (int i=0;i<n*m;++i){ scanf(\"%d\",&a[i]); if (i>=m) map[i]+=map[i-m]; if (i%m!=0) map[i]+=map[i-1]; if (i>=m&&i%m!=0) map[i]-=map[i-m-1]; map[i]+=a[i]; } for (int i=0;i<q;++i){ scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2); x1-=1; y1-=1; x2-=1; y2-=1; ans=map[x2*m+y2]; if (y1>0) ans-=map[x2*m+y1-1]; if (x1>0) ans-=map[(x1-1)*m+y2]; if (x1>0&&y1>0) ans+=map[(x1-1)*m+y1-1]; printf(\"%lld\\n\",ans); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1596/","text":"1596 \u9ec4\u660f\u4e4b\u65f6 \u9898\u76ee Description \u300c\u8ab0\u305d\u5f7c\u3068\u308f\u308c\u3092\u306a\u554f\u3072\u305d\u3001\u4e5d\u6708\u306e\u9732\u306b\u6fe1\u308c\u3064\u3064\u3001\u541b\u5f85\u3064\u308f\u308c\u305d\u300d\u2014\u2014\u300e\u4e07\u8449\u96c6\u300f \u9ec4\u660f\u4e4b\u65f6\uff0c\u663c\u591c\u4ea4\u9519\uff0c\u65f6\u7a7a\u4ea6\u662f\u3002 \u5728\u4e24\u4e2a\u4e0d\u540c\u7684\\(n*n\\)\u65f6\u7a7a\u91cc\uff0c\u6cf7\u548c\u4e09\u53f6\u5206\u522b\u4f4d\u4e8e\\((n,1)\\)\u548c\\((1,n)\\)\u4e24\u4e2a\u9876\u70b9\u5904\uff0c\u4ed6\u4eec\u7ea6\u5b9a\u5728\u9ec4\u660f\u4e4b\u65f6\uff0c\u4e00\u8d77\u5230\u8fbe\\((i,j)\\)\u76f8\u4f1a\u3002 \u4ed6\u4eec\u5404\u81ea\u6cbf\u7f51\u683c\u7684\u884c\u8fdb\u8def\u7ebf\u5982\u56fe\u6240\u793a\uff0c\u662f\u987a\u65f6\u9488\u65cb\u8f6c\u7684\u87ba\u65cb\u7ebf\u3002 \u4e3a\u4e86\u51c6\u65f6\u5728\u9ec4\u660f\u4e4b\u65f6\u5230\u8fbe\u76ee\u7684\u5730\uff0c\u4ed6\u4eec\u9700\u8981\u77e5\u9053\u8def\u7a0b\u957f\u5ea6\u6765\u4f30\u8ba1\u65f6\u95f4\uff0c\u8bf7\u4f60\u5e2e\u4ed6\u4eec\u8ba1\u7b97\u8def\u7a0b\u7684\u957f\u5ea6\u3002 Input Format \u4e00\u884c\u4e09\u4e2a\u6574\u6570\uff0c\\(N,i,j\\)\uff0c\u5206\u522b\u4ee3\u8868\u7f51\u683c\u7684\u5927\u5c0f\uff0c\u76f8\u7ea6\u7684\u5730\u70b9\u3002 Output Format \u4e00\u884c\u8f93\u51fa\u6cf7\u548c\u4e09\u53f6\u5404\u81ea\u9700\u8981\u884c\u8d70\u7684\u6b65\u6570\uff0c\u7a7a\u683c\u5206\u9694\u3002 Sample Input 1 3 2 3 Sample Output 1 5 1 Sample Input 2 8 3 6 Sample Output 2 54 48 Limits \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N\\in [1,3]\\)\u3002 \u5bf9\u4e8e\\(50\\%\\)\u7684\u6570\u636e\uff0c\\(N\\in [1,10]\\)\u3002 \u5bf9\u4e8e\\(90\\%\\)\u7684\u6570\u636e\uff0c\\(N\\in [1,1000]\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(N\\in [1,1000000], i,j\\in [1,N]\\)\u3002 FineArtz's solution Star /* \u9ec4\u660f\u4e4b\u65f6 */ #include <iostream> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ long long n, i, j; cin >> n >> i >> j; cout << step(n, n - i + 1, j) << ' ' << step(n, i, n - j + 1) << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; long N, i, j; long min_len; long out = 0, in = 0; long x, y; long tmp; void walk(long a, long b) { while (a != i || b != j) { while ((a != i || b != j) && a > min_len + 1) { --a; ++in; } while ((a != i || b != j) && b < N - min_len) { ++b; ++in; } while ((a != i || b != j) && a < N - min_len) { ++a; ++in; } while ((a != i || b != j) && b > min_len + 1) { --b; ++in; } } } int main() { cin >> N >> i >> j; min_len = N; if (i - 1 < min_len) min_len = i - 1; if (j - 1 < min_len) min_len = j - 1; if (N - i < min_len) min_len = N - i; if (N - j < min_len) min_len = N - j; out = 4 * min_len * (N - min_len); x = N - min_len; y = 1 + min_len; walk(x, y); cout << out + in << ' '; i = N - i + 1; j = N - j + 1; in = 0; walk(x, y); cout << out + in; return 0; }","title":"1596"},{"location":"nr/1596/#1596","text":"\u9898\u76ee","title":"1596 \u9ec4\u660f\u4e4b\u65f6"},{"location":"nr/1596/#fineartzs-solution-star","text":"/* \u9ec4\u660f\u4e4b\u65f6 */ #include <iostream> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ long long n, i, j; cin >> n >> i >> j; cout << step(n, n - i + 1, j) << ' ' << step(n, i, n - j + 1) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1596/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; long N, i, j; long min_len; long out = 0, in = 0; long x, y; long tmp; void walk(long a, long b) { while (a != i || b != j) { while ((a != i || b != j) && a > min_len + 1) { --a; ++in; } while ((a != i || b != j) && b < N - min_len) { ++b; ++in; } while ((a != i || b != j) && a < N - min_len) { ++a; ++in; } while ((a != i || b != j) && b > min_len + 1) { --b; ++in; } } } int main() { cin >> N >> i >> j; min_len = N; if (i - 1 < min_len) min_len = i - 1; if (j - 1 < min_len) min_len = j - 1; if (N - i < min_len) min_len = N - i; if (N - j < min_len) min_len = N - j; out = 4 * min_len * (N - min_len); x = N - min_len; y = 1 + min_len; walk(x, y); cout << out + in << ' '; i = N - i + 1; j = N - j + 1; in = 0; walk(x, y); cout << out + in; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1599/","text":"1599 Brackets Stack \u9898\u76ee Description \u6a21\u62df\u4e00\u4e2a\u62ec\u53f7\u6808\uff0c\u5176\u5143\u7d20\u662f\u4e09\u79cd\u62ec\u53f7()\u3001[]\u3001{}\u3002 \u7ed9\u51fa\u957f\u4e3an\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u6309\u5e8f\u5217\u8981\u6c42\u5b8c\u6210\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a push pop\uff08\u6808\u7a7a\u5219\u5ffd\u7565\u6b64\u64cd\u4f5c\uff09 \u8f93\u51fa\u6808\u9876\u5143\u7d20\uff08\u6808\u7a7a\u5219\u5ffd\u7565\u6b64\u64cd\u4f5c\uff09 \u8be2\u95ee\u5f53\u524d\u62ec\u53f7\u662f\u5426\u5339\u914d\uff08\u6808\u7a7a\u5219\u8ba4\u4e3a\u5339\u914d\uff09 Input Format \u7b2c1\u884c\u4e00\u4e2a\u6574\u6570n\uff0c\u4ee3\u8868\u603b\u5171\u6709n\u6b21\u64cd\u4f5c\u3002 \u7b2c2~n+1\u884c\uff0c\u6bcf\u884c1\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u6570\u4ee3\u8868\u64cd\u4f5c\u79cd\u7c7b\uff0c\u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u5728\u540c\u884c\u7ed9\u5b9a\u4e00\u4e2a\u5165\u6808\u5143\u7d20\u3002 Output Format \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\u4ee3\u8868\u7b54\u6848\u3002 \u64cd\u4f5c3\uff1a\u8f93\u51fa\u6808\u9876\u5143\u7d20 \u64cd\u4f5c4\uff1a\u5339\u914d\u8f93\u51fa\u201cYES\u201d,\u5426\u5219\u8f93\u51fa\u201cNO\u201d e.g. {[()]} \u5339\u914d {[}] \u4e0d\u5339\u914d Sample Input 6 1 ( 1 ) 3 4 2 4 Sample Output ) YES NO Limits \u5bf9\u4e8e\\(40\\%\\)\u7684\u6570\u636e\uff0c\u53ea\u6709\u524d\u4e09\u79cd\u64cd\u4f5c\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\u5143\u7d20\u53ea\u6709\u5c0f\u62ec\u53f7\u3002 \u5bf9\u4e8e\\(80\\%\\)\u7684\u6570\u636e\uff0cn < 1000. \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e, n < 10^6. FineArtz's solution Star /* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; inline bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } inline char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } inline char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"1599"},{"location":"nr/1599/#1599-brackets-stack","text":"\u9898\u76ee","title":"1599 Brackets Stack"},{"location":"nr/1599/#fineartzs-solution-star","text":"/* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; inline bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } inline char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } inline char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1605/","text":"1605 Brackets Stack \u9898\u76ee Description \u6a21\u62df\u4e00\u4e2a\u62ec\u53f7\u6808\uff0c\u5176\u5143\u7d20\u662f\u4e09\u79cd\u62ec\u53f7()\u3001[]\u3001{}\u3002 \u7ed9\u51fa\u957f\u4e3an\u7684\u64cd\u4f5c\u5e8f\u5217\uff0c\u6309\u5e8f\u5217\u8981\u6c42\u5b8c\u6210\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a push pop\uff08\u6808\u7a7a\u5219\u5ffd\u7565\u6b64\u64cd\u4f5c\uff09 \u8f93\u51fa\u6808\u9876\u5143\u7d20\uff08\u6808\u7a7a\u5219\u5ffd\u7565\u6b64\u64cd\u4f5c\uff09 \u8be2\u95ee\u5f53\u524d\u62ec\u53f7\u662f\u5426\u5339\u914d\uff08\u6808\u7a7a\u5219\u8ba4\u4e3a\u5339\u914d\uff09 Input Format \u7b2c1\u884c\u4e00\u4e2a\u6574\u6570n\uff0c\u4ee3\u8868\u603b\u5171\u6709n\u6b21\u64cd\u4f5c\u3002 \u7b2c2~n+1\u884c\uff0c\u6bcf\u884c1\u4e2a\u6574\u6570\uff0c\u7b2c\u4e00\u4e2a\u6570\u4ee3\u8868\u64cd\u4f5c\u79cd\u7c7b\uff0c\u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u5728\u540c\u884c\u7ed9\u5b9a\u4e00\u4e2a\u5165\u6808\u5143\u7d20\u3002 Output Format \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\u4ee3\u8868\u7b54\u6848\u3002 \u64cd\u4f5c3\uff1a\u8f93\u51fa\u6808\u9876\u5143\u7d20 \u64cd\u4f5c4\uff1a\u5339\u914d\u8f93\u51fa\u201cYES\u201d,\u5426\u5219\u8f93\u51fa\u201cNO\u201d e.g. {[()]} \u5339\u914d {[}] \u4e0d\u5339\u914d Sample Input 6 1 ( 1 ) 3 4 2 4 Sample Output ) YES NO Limits \u5bf9\u4e8e\\(40\\%\\)\u7684\u6570\u636e\uff0c\u53ea\u6709\u524d\u4e09\u79cd\u64cd\u4f5c\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\u5143\u7d20\u53ea\u6709\u5c0f\u62ec\u53f7\u3002 \u5bf9\u4e8e\\(80\\%\\)\u7684\u6570\u636e\uff0cn < 1000. \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e, n < 10^6. FineArtz's solution Star /* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; char rstack[1000001],istack[1000001],c; int rtop,itop,n,x; bool match[1000001]; void push(char c){ if (rstack[rtop-1]=='('&&c==')') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='['&&c==']') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='{'&&c=='}') { rtop--; match[itop]=true; } else rstack[rtop++]=c; } void raw_push(char c){ if (rstack[rtop-1]=='('&&c==')') rtop--; else if (rstack[rtop-1]=='['&&c==']') rtop--; else if (rstack[rtop-1]=='{'&&c=='}') rtop--; else rstack[rtop++]=c; } void pop(){ switch (istack[itop-1]) { case '(': raw_push(')'); break; case ')': if (match[itop-1]) {raw_push('('); match[itop-1]=false;} else rtop--; break; case '[': raw_push(']'); break; case ']': if (match[itop-1]) {raw_push('['); match[itop-1]=false;} else rtop--; break; case '{': raw_push('}'); break; case '}': if (match[itop-1]) {raw_push('{'); match[itop-1]=false;} else rtop--; break; } itop--; } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%d\",&x); if (x==1){ scanf(\" %c\",&c); push(c); istack[itop++]=c; } if (x==2&&itop>=1) pop(); if (x==3&&itop>=1) printf(\"%c\\n\",istack[itop-1]); if (x==4){ if (!rtop) printf(\"YES\\n\"); else printf(\"NO\\n\");} } return 0; }","title":"1605"},{"location":"nr/1605/#1605-brackets-stack","text":"\u9898\u76ee","title":"1605 Brackets Stack"},{"location":"nr/1605/#fineartzs-solution-star","text":"/* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1605/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; char rstack[1000001],istack[1000001],c; int rtop,itop,n,x; bool match[1000001]; void push(char c){ if (rstack[rtop-1]=='('&&c==')') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='['&&c==']') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='{'&&c=='}') { rtop--; match[itop]=true; } else rstack[rtop++]=c; } void raw_push(char c){ if (rstack[rtop-1]=='('&&c==')') rtop--; else if (rstack[rtop-1]=='['&&c==']') rtop--; else if (rstack[rtop-1]=='{'&&c=='}') rtop--; else rstack[rtop++]=c; } void pop(){ switch (istack[itop-1]) { case '(': raw_push(')'); break; case ')': if (match[itop-1]) {raw_push('('); match[itop-1]=false;} else rtop--; break; case '[': raw_push(']'); break; case ']': if (match[itop-1]) {raw_push('['); match[itop-1]=false;} else rtop--; break; case '{': raw_push('}'); break; case '}': if (match[itop-1]) {raw_push('{'); match[itop-1]=false;} else rtop--; break; } itop--; } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%d\",&x); if (x==1){ scanf(\" %c\",&c); push(c); istack[itop++]=c; } if (x==2&&itop>=1) pop(); if (x==3&&itop>=1) printf(\"%c\\n\",istack[itop-1]); if (x==4){ if (!rtop) printf(\"YES\\n\"); else printf(\"NO\\n\");} } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1606/","text":"1606 Interesting Island \u9898\u76ee Description \u5728\u4e00\u4e2an*m\u4e8c\u7ef4\u7f51\u683c\u56fe\u4e2d\uff0c\u6709\u4ee5\u4e0b\u4e09\u79cd\u5730\u5f62\uff1a'#'\u4ee3\u8868\u6e56\u6cca\uff1b'.'\u4ee3\u8868\u9646\u5730\uff1b'?'\u4ee3\u8868\u9646\u5730\u4e0e\u6e56\u6cca\u5747\u6709\u53ef\u80fd\u7684\u672a\u77e5\u5730\u5f62\u3002 \u6c42\u662f\u5426\u5b58\u5728\u4e00\u79cd\u6216\u591a\u79cd\u5728\u672a\u77e5\u5730\u5f62\u586b\u5145\u6e56\u6cca/\u9646\u5730\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6700\u540e\u5730\u4e0a\u5168\u90e8\u7684\u9646\u5730\u533a\u57df\u7ec4\u6210\u4e00\u4e2a\u56db\u8054\u901a\u7684\u8054\u901a\u5757\uff08\u9646\u5730\u56db\u8054\u901a\u662f\u6307\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u9646\u5730\u683c\u5b50\u51fa\u53d1\uff0c\u53ea\u662f\u4efb\u610f\u4f7f\u7528\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8bbf\u95ee\u5230\u4efb\u4f55\u4e00\u5757\u5176\u4ed6\u7684\u9646\u5730\uff09\u3002 \u65e0\u89e3\u8f93\u51fa\u201cImpossible\u201d\uff0c\u591a\u89e3\u8f93\u51fa\u201cAmbiguous\u201d\uff0c\u552f\u4e00\u89e3\u5219\u987b\u8f93\u51fa\u4e00\u4e2an*m\u7684\u7f51\u683c\u56fe\uff0c\u4f7f\u5f97\u4e4b\u524d\u7684\u201c?\u201d\u5747\u88ab\u586b\u5145\u4e3a\u201c#\u201d\u6216\u201c.\u201d\uff0c\u4e14\u9646\u5730\u56db\u8054\u901a\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570n, m\u4ee3\u8868\u5730\u5f62\u7684\u884c\u3001\u5217\u6570\u3002 \u540e\u9762\u4e00\u4e2an\u884cm\u5217\u7684\u77e9\u9635\u4ee3\u8868\u5730\u5f62\u3002 Output Format \u5982\u9898\u610f\uff08\u4e0d\u542b\u5f15\u53f7\uff09\u3002 Sample Input 1 5 7 ####### #..#..# #..?..# #..#..# ####### Sample Output 1 ####### #..#..# #.....# #..#..# ####### Sample Input 2 5 7 ####### #...#.# #.?.?.# #.#...# ####### Sample Output 2 Ambiguous Sample Input 3 5 7 ####### #.#.#.# #.#?#.# #.#.#.# ####### Sample Output 3 Impossible Limits \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0cn\uff0cm\u4e0d\u8d85\u8fc72\uff1b \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0cn\uff0cm\u4e0d\u8d85\u8fc77\uff1b \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0cn\uff0cm\u4e0d\u8d85\u8fc715\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cn\uff0cm\u4e0d\u8d85\u8fc750. FineArtz's solution Star /* Interesting Island */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, m; char a[55][55]; bool v[55][55], isol = true; void floodfill(int x, int y){ v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) floodfill(nx, ny); } } void checkfill(int x, int y){ if (a[x][y] == '.'){ isol = false; return; } v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) checkfill(nx, ny); if (!isol) return; } } void realfill(int x, int y){ v[x][y] = true; a[x][y] = '#'; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] == '?' && !v[nx][ny]) realfill(nx, ny); } } bool check(){ bool flag = true; memset(v, 0, sizeof(v)); for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.'){ floodfill(i, j); flag = false; break; } } if (!flag) break; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.' && !v[i][j]) return false; } } return true; } void checkIso(int i, int j){ isol = true; memset(v, 0, sizeof(v)); checkfill(i, j); if (isol){ memset(v, 0, sizeof(v)); realfill(i, j); } } int main(){ bool flag = false; int cnt = 0; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '.') flag = true; if (a[i][j] == '?') ++cnt; } } if (!flag){ if (cnt >= 2){ cout << \"Ambiguous\" << endl; return 0; } else if (cnt == 0){ cout << \"Impossible\" << endl; return 0; } else{ for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?') cout << '.'; else cout << a[i][j]; } cout << endl; } return 0; } } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?'){ checkIso(i, j); if (a[i][j] != '?') continue; bool flag1 = false, flag2 = false; a[i][j] = '.'; flag1 = check(); a[i][j] = '#'; flag2 = check(); if (flag1 && flag2){ cout << \"Ambiguous\" << endl; return 0; } if (!flag1 && !flag2){ cout << \"Impossible\" << endl; return 0; } a[i][j] = '.'; } } } bool imp = true; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i][j] == '.'){ imp = false; break; } if (imp){ cout << \"Impossible\" << endl; return 0; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j) cout << a[i][j]; cout << endl; } return 0; }","title":"1606"},{"location":"nr/1606/#1606-interesting-island","text":"\u9898\u76ee","title":"1606 Interesting Island"},{"location":"nr/1606/#fineartzs-solution-star","text":"/* Interesting Island */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, m; char a[55][55]; bool v[55][55], isol = true; void floodfill(int x, int y){ v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) floodfill(nx, ny); } } void checkfill(int x, int y){ if (a[x][y] == '.'){ isol = false; return; } v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) checkfill(nx, ny); if (!isol) return; } } void realfill(int x, int y){ v[x][y] = true; a[x][y] = '#'; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] == '?' && !v[nx][ny]) realfill(nx, ny); } } bool check(){ bool flag = true; memset(v, 0, sizeof(v)); for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.'){ floodfill(i, j); flag = false; break; } } if (!flag) break; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.' && !v[i][j]) return false; } } return true; } void checkIso(int i, int j){ isol = true; memset(v, 0, sizeof(v)); checkfill(i, j); if (isol){ memset(v, 0, sizeof(v)); realfill(i, j); } } int main(){ bool flag = false; int cnt = 0; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '.') flag = true; if (a[i][j] == '?') ++cnt; } } if (!flag){ if (cnt >= 2){ cout << \"Ambiguous\" << endl; return 0; } else if (cnt == 0){ cout << \"Impossible\" << endl; return 0; } else{ for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?') cout << '.'; else cout << a[i][j]; } cout << endl; } return 0; } } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?'){ checkIso(i, j); if (a[i][j] != '?') continue; bool flag1 = false, flag2 = false; a[i][j] = '.'; flag1 = check(); a[i][j] = '#'; flag2 = check(); if (flag1 && flag2){ cout << \"Ambiguous\" << endl; return 0; } if (!flag1 && !flag2){ cout << \"Impossible\" << endl; return 0; } a[i][j] = '.'; } } } bool imp = true; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i][j] == '.'){ imp = false; break; } if (imp){ cout << \"Impossible\" << endl; return 0; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j) cout << a[i][j]; cout << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1621/","text":"1621 \u672a\u547d\u540d \u9898\u76ee Description \u4eba\u603b\u4f1a\u6709\u6ca1\u7075\u611f\u7684\u65f6\u5019\u3002 \u6ca1\u7075\u611f\u7684\u65f6\u5019\uff0c\u51fa\u7684\u9898\u591a\u534a\u90fd\u662f\u5e73\u51e1\u7684Idea\u5806\u51fa\u6765\u7684\u3002 \u8fd9\u5927\u6982\u662f\u4e2a\u61d2\u9898\uff0c\u6211\u4e5f\u4e0d\u592a\u6709\u60f3\u6cd5\u7ed9\u5b83\u53d6\u4e2a\u597d\u540d\u5b57\u3002 \u73b0\u5728\u6709\u4e00\u4e2an\u00d7n\u7684\u9ed1\u767d\u77e9\u9635\uff0c\u6211\u60f3\u627e\u5230\u4e00\u4e2a\u9762\u79ef\u6700\u5927\u7684\u5168\u767d\u5b50\u77e9\u5f62\u3002 \u8fd9\u6b21\u4f60\u83b7\u5f97\u4e86\u67d0\u79cd\u7279\u6743\uff0c\u4f60\u4f3c\u4e4e\u53ef\u4ee5\u968f\u610f\u4ea4\u6362\u4e24\u884c\u4efb\u610f\u591a\u6b21\uff0c\u4e8e\u662f\u4f60\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u66f4\u597d\u4e00\u70b9\u7684\u7b54\u6848\u3002 \u4e8e\u662f\u8bf7\u4f60\u8f7b\u677e\u968f\u610f\u7684\u628a\u8fd9\u9898\u5199\u6389\u5427\u3002 Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6570n\uff0c\u63cf\u8ff0\u8fd9\u4e2a\u77e9\u9635\u7684\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765\u5c06\u4f1a\u8bfb\u5165n\u884c\u768401\u5b57\u7b26\u4e32\u6765\u63cf\u8ff0\u8fd9\u4e2a\u77e9\u9635\u3002\u5982\u679c\u662f0\uff0c\u5c31\u4ee3\u8868\u8fd9\u4e2a\u683c\u5b50\u662f\u9ed1\u70b9\uff0c\u5426\u5219\u662f\u767d\u70b9\u3002 Output Format \u4e00\u884c\uff0c\u8f93\u51fa\u6700\u5927\u5168\u767d\u5b50\u77e9\u5f62\u7684\u5927\u5c0f\u3002 Sample Input 2 11 11 Sample Output 4 Limits \u5bf9\u4e8e40%\u7684\u6570\u636e\uff0cn <= 8 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cn <= 1000 WashSwang's solution Star #include <iostream> using namespace std; int n,sorted[1001],pre[1001],cur,ans; char mat[1001][1001]; void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,k=sorted[l]; while (i<j){ while (i<j&&sorted[j]<=k) j--; if (i<j) sorted[i++]=sorted[j]; while (i<j&&sorted[i]>=k) i++; if (i<j) sorted[j--]=sorted[i]; } sorted[i]=k; qsort(l,i); qsort(i+1,r); } int main() { cin>>n; for (int i=0;i<n;++i) cin>>mat[i]; for (int i=0;i<n;++i) { for (int j=0;j<n;++j) if (mat[j][i]!='1') sorted[j]=pre[j]=0; else sorted[j]=pre[j]=pre[j]+1; qsort(0,n); cur=sorted[0]; for (int j=0;j<n;++j){ cur=min(cur,sorted[j]); ans=max(ans,cur*(j+1)); } } cout<<ans; return 0; }","title":"1621"},{"location":"nr/1621/#1621","text":"\u9898\u76ee","title":"1621 \u672a\u547d\u540d"},{"location":"nr/1621/#washswangs-solution-star","text":"#include <iostream> using namespace std; int n,sorted[1001],pre[1001],cur,ans; char mat[1001][1001]; void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,k=sorted[l]; while (i<j){ while (i<j&&sorted[j]<=k) j--; if (i<j) sorted[i++]=sorted[j]; while (i<j&&sorted[i]>=k) i++; if (i<j) sorted[j--]=sorted[i]; } sorted[i]=k; qsort(l,i); qsort(i+1,r); } int main() { cin>>n; for (int i=0;i<n;++i) cin>>mat[i]; for (int i=0;i<n;++i) { for (int j=0;j<n;++j) if (mat[j][i]!='1') sorted[j]=pre[j]=0; else sorted[j]=pre[j]=pre[j]+1; qsort(0,n); cur=sorted[0]; for (int j=0;j<n;++j){ cur=min(cur,sorted[j]); ans=max(ans,cur*(j+1)); } } cout<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/1637/","text":"1637 \u7ec4\u5408\u6570 \u9898\u76ee Description \u4ecen\u4e2a\u4eba\u4e2d\u9009m\u4e2a\u4eba\u53c2\u52a0\u6f14\u51fa\uff0c\u6709\u51e0\u79cd\u9009\u6cd5\uff1f \u5b9a\u4e49\u4e00\u4e2aIntArray\u7c7b\u3002\u8be5\u7c7b\u6709\u4e24\u4e2a\u6210\u5458\uff0c\u7b2c\u4e00\u4e2a\u4e3a\u6570\u7ec4\u957f\u5ea6\uff0c\u7b2c\u4e8c\u4e2a\u4e3aint\u578b\u6570\u7ec4\u3002\u6210\u5458\u51fd\u6570/\u53cb\u5143\u81f3\u5c11\u5305\u542b\u5982\u4e0b\u51fd\u6570\uff1a friend ostream &operator<<(ostream &os,const IntArray &obj); friend istream &operator>>(istream &is,IntArray &obj); friend bool operator==(const IntArray &obj1, const IntArray &obj2); IntArray(int l);//l\u4e3a\u6570\u7ec4\u957f\u5ea6 int &operator[](int index);//\u53f3\u503c const int & operator[](int index) const;//\u5de6\u503c IntArray operator()(int start,int end);//\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684IntArray\u5bf9\u8c61\uff0c\u5305\u542b\u4ecestart\u4e0b\u6807\u5230end\u4e0b\u6807\u7684\u503c ~IntArray();//\u6790\u6784\u51fd\u6570 \u4e00\u7ec4\u6570\u636e\u8868\u793a\u4e3a\uff08n,m\uff09\u3002\u8f93\u5165\u7b2c\u4e00\u884c\u8868\u793a\u6570\u636e\u6709\u51e0\u7ec4\uff0c\u7b2c\u4e8c\u884c\u662f\u6570\u636en1,m1,n2,m2,....\uff0c\u7b2c\u4e09\u884c\u662f\u4e00\u4e2a\u6570\u7ec4a\u3002\u5c06\u6bcf\u7ec4\u6570\u636e\u5bf9\u5e94\u7684\u9009\u62e9\u65b9\u6cd5\u7684\u6570\u76ee\u653e\u5728IntArray b\u4e2d\u3002\u8f93\u51fa\u7ed3\u679cb\u3002\u5c06b\u7684\u7b2c2\u9879\u5230\u6700\u540e\u4e00\u9879\u653e\u5728IntArray c\u4e2d\uff0c\u5224\u65ad\u8be5\u65b0\u6570\u7ec4c\u4e0e\u6570\u7ec4a\u662f\u5426\u662f\u76f8\u540c\u3002\u76f8\u540c\u8f93\u51fayes\uff01\uff0c\u4e0d\u76f8\u540c\u8f93\u51fano\uff01\u3002 \u8bf7\u5927\u5bb6\u52a1\u5fc5\u5b9a\u4e49\u4e00\u4e2a\u7c7b\u5e76\u91cd\u8f7d\u64cd\u4f5c\u7b26\uff0c\u5229\u7528\u91cd\u8f7d\u7684\u64cd\u4f5c\u7b26\u5b8c\u6210\u7f16\u7a0b\u3002\u6211\u4eec\u4f1a\u968f\u673a\u62bd\u67e530\u4f4d\u540c\u5b66\u68c0\u67e5\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u7684\u8bdd\u4e0d\u8ba1\u5206\u6570\u54e6\u3002 Sample Input 1 3 5 1 9 2 3 2 54 32 Sample Output 1 The result is: 5 36 3 no! VictriD's solution Star #include <iostream> using namespace std; int C(int, int); //get combination number class IntArray { friend ostream &operator<<(ostream &os, const IntArray &obj); friend istream &operator>>(istream &is, IntArray &obj); friend bool operator==(const IntArray &obj1, const IntArray &obj2); private: int length; int *list; public: IntArray(int l); //l\u4e3a\u6570\u7ec4\u957f\u5ea6 ~IntArray(); //\u6790\u6784\u51fd\u6570 int &operator[](int index); //\u53f3\u503c const int &operator[](int index) const; //\u5de6\u503c IntArray operator()(int start, int end); //\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684IntArray\u5bf9\u8c61\uff0c\u5305\u542b\u4ecestart\u4e0b\u6807\u5230end\u4e0b\u6807\u7684\u503c }; ostream &operator<<(ostream &os, const IntArray &obj); istream &operator>>(istream &is, IntArray &obj); bool operator==(const IntArray &obj1, const IntArray &obj2); int main() { int n; cin >> n; // int m; // cin >> m; // cout << C(n, m); IntArray data1(2 * n); cin >> data1; IntArray a(n - 1); IntArray b(n); cin >> a; for (int i = 0; i < n; i++) b[i] = C(data1[2 * i], data1[2 * i + 1]); cout << \"The result is:\" << endl; cout << b << endl; if (a == (b(1, n - 1))) { cout << \"yes!\"; } else { cout << \"no!\"; } return 0; } int C(int n, int m) { //n total m select //calculate combination number using Euler equations. //1.validate if (m > n || m < 0 || n < 0) return 0; //2.defined calculation laws if (n == 0 || m == 0) return 1; //3.boost if (m == 1) return n; if ((2 * m) > n) return C(n, n - m); return (C(n - 1, m - 1) + C(n - 1, m)); } ostream &operator<<(ostream &os, const IntArray &obj) { bool SPACE_FLAG = false; for (int i = 0; i < obj.length; i++) { if (SPACE_FLAG) os << ' '; os << obj[i]; SPACE_FLAG = true; } return os; } istream &operator>>(istream &is, IntArray &obj) { for (int i = 0; i < obj.length; i++) is >> obj[i]; return is; } bool operator==(const IntArray &obj1, const IntArray &obj2) { if (obj1.length != obj2.length) return false; for (int i = 0; i < obj1.length; i++) if (obj1[i] != obj2[i]) return false; return true; } IntArray::IntArray(int l) { list = new int[l]; length = l; } IntArray::~IntArray() { delete[] list; } int &IntArray::operator[](int index) { return *(list + index); } const int &IntArray::operator[](int index) const { return *(list + index); } IntArray IntArray::operator()(int start, int end) { IntArray Z(end - start + 1); for (int i = start; i <= end; ++i) { Z[i - start] = *(this->list + i); } return Z; }","title":"1637"},{"location":"nr/1637/#1637","text":"\u9898\u76ee","title":"1637 \u7ec4\u5408\u6570"},{"location":"nr/1637/#victrids-solution-star","text":"#include <iostream> using namespace std; int C(int, int); //get combination number class IntArray { friend ostream &operator<<(ostream &os, const IntArray &obj); friend istream &operator>>(istream &is, IntArray &obj); friend bool operator==(const IntArray &obj1, const IntArray &obj2); private: int length; int *list; public: IntArray(int l); //l\u4e3a\u6570\u7ec4\u957f\u5ea6 ~IntArray(); //\u6790\u6784\u51fd\u6570 int &operator[](int index); //\u53f3\u503c const int &operator[](int index) const; //\u5de6\u503c IntArray operator()(int start, int end); //\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684IntArray\u5bf9\u8c61\uff0c\u5305\u542b\u4ecestart\u4e0b\u6807\u5230end\u4e0b\u6807\u7684\u503c }; ostream &operator<<(ostream &os, const IntArray &obj); istream &operator>>(istream &is, IntArray &obj); bool operator==(const IntArray &obj1, const IntArray &obj2); int main() { int n; cin >> n; // int m; // cin >> m; // cout << C(n, m); IntArray data1(2 * n); cin >> data1; IntArray a(n - 1); IntArray b(n); cin >> a; for (int i = 0; i < n; i++) b[i] = C(data1[2 * i], data1[2 * i + 1]); cout << \"The result is:\" << endl; cout << b << endl; if (a == (b(1, n - 1))) { cout << \"yes!\"; } else { cout << \"no!\"; } return 0; } int C(int n, int m) { //n total m select //calculate combination number using Euler equations. //1.validate if (m > n || m < 0 || n < 0) return 0; //2.defined calculation laws if (n == 0 || m == 0) return 1; //3.boost if (m == 1) return n; if ((2 * m) > n) return C(n, n - m); return (C(n - 1, m - 1) + C(n - 1, m)); } ostream &operator<<(ostream &os, const IntArray &obj) { bool SPACE_FLAG = false; for (int i = 0; i < obj.length; i++) { if (SPACE_FLAG) os << ' '; os << obj[i]; SPACE_FLAG = true; } return os; } istream &operator>>(istream &is, IntArray &obj) { for (int i = 0; i < obj.length; i++) is >> obj[i]; return is; } bool operator==(const IntArray &obj1, const IntArray &obj2) { if (obj1.length != obj2.length) return false; for (int i = 0; i < obj1.length; i++) if (obj1[i] != obj2[i]) return false; return true; } IntArray::IntArray(int l) { list = new int[l]; length = l; } IntArray::~IntArray() { delete[] list; } int &IntArray::operator[](int index) { return *(list + index); } const int &IntArray::operator[](int index) const { return *(list + index); } IntArray IntArray::operator()(int start, int end) { IntArray Z(end - start + 1); for (int i = start; i <= end; ++i) { Z[i - start] = *(this->list + i); } return Z; }","title":"VictriD's solution Star"},{"location":"nr/1991/","text":"1991 \u4e3a\u4e86\u866b\u7fa4 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 Jim Raynor\u7387\u9886\u7684\u4eba\u7c7b\u7684\u90e8\u961f\u5df2\u7ecf\u8e0f\u4e0a\u4e86\u5f02\u866b\u7684\u57fa\u5730\u2014\u2014\u67e5\u5c14\u661f\u3002 \u4f5c\u4e3a\u5f02\u866b\u7684\u9996\u8111\uff0c\u4f60\u51b3\u5b9a\u6d3e\u51fa\u7206\u866b\u6765\u8fce\u51fb\u4eba\u7c7b\u7684\u90e8\u961f\u3002 \u7206\u866b\u8eab\u4e0a\u957f\u6709\u5145\u6ee1\u9178\u6db2\u7684\u56ca\u3002 \u5f53\u5b83\u63a5\u8fd1\u654c\u4eba\u65f6\uff0c\u4f1a\u89e6\u53d1\u4f53\u5185\u7684\u4e0d\u7a33\u5b9a\u5316\u5b66\u7269\u8d28\u8fdb\u884c\u53cd\u5e94\uff0c\u5c06\u81ea\u8eab\u5f15\u7206\uff0c\u5411\u5916\u6cfc\u6d12\u5f3a\u9178\u3002 \u81ea\u7206\u4f1a\u6467\u6bc1\u7206\u866b\uff0c\u4f46\u540c\u65f6\u4e5f\u4f1a\u5bf9\u534a\u5f84\\(R\\)\u4e4b\u5185(\u5305\u62ec\u8ddd\u79bb\u4e3a\\(R\\)\u7684\u70b9)\u7684\u654c\u4eba\u9020\u6210\u5927\u91cf\u4f24\u5bb3\u3002 \u4f60\u89c2\u5bdf\u5230\uff0c\u4eba\u7c7b\u6709\\(n\\)\u540d\u9646\u6218\u961f\u5458\uff0c\u7ad9\u6210\u4e00\u6761\u76f4\u7ebf\u3002 \u6bcf\u4e2a\u9646\u6218\u961f\u5458\u7684\u5750\u6807\u662f\\(x_i\\)\u3002 \u4f60\u6709\\(k\\)\u4e2a\u7206\u866b\u3002 \u7206\u866b\u7684\u9178\u6db2\u4f1a\u5bf9\u9646\u6218\u961f\u5458\u9020\u6210\u5de8\u5927\u4f24\u5bb3\uff0c\u5c06\u5176\u77ac\u95f4\u6d88\u706d\u3002 \u4f60\u53ef\u4ee5\u628a\u6bcf\u53ea\u7206\u866b\u5b89\u6392\u5728\u76f4\u7ebf\u4e0a\u7684\u4efb\u610f\u4f4d\u7f6e\uff0c\u7136\u540e\u5f15\u7206\uff0c\u4ece\u800c\u6d88\u706d\u8ddd\u79bb\u8be5\u7206\u866b\u4e0d\u8d85\u8fc7\\(R\\)\u7684\u6240\u6709\u9646\u6218\u961f\u5458\u3002 \u4e3a\u4e86\u6d88\u706d\u6240\u6709\\(n\\)\u4e2a\u9646\u6218\u961f\u5458\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\uff0c\u7206\u866b\u7684\u7206\u70b8\u534a\u5f84\\(R\\)\u81f3\u5c11\u8981\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u5171\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u662f\u7528\u7a7a\u683c\u9694\u5f00\u7684\u4e24\u4e2a\u6574\u6570\uff0c\\(n\\)\u548c\\(k\\)\u3002\\(1 \\leq k < n \\leq 100,000\\)\u3002 \u7b2c\u4e8c\u884c\u662f\u7528\u7a7a\u683c\u9694\u5f00\u7684\\(n\\)\u4e2a\u5b9e\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u9646\u6218\u961f\u5458\u7684\u5750\u6807\\(x_i\\)\u3002\\(-10^7 \\leq x_i \\leq 10^7\\)\u3002\u6240\u6709\u5750\u6807\u6309\u5347\u5e8f\u7ed9\u51fa\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u5171\u4e00\u884c\u3002\u7206\u866b\u7684\u6700\u5c0f\u7206\u70b8\u534a\u5f84\\(R\\)\u3002\u4fdd\u75596\u4f4d\u5c0f\u6570\u3002 \u6837\u4f8b\u8f93\u5165 5 2 -10.0 -6.0 10 11 15 \u6837\u4f8b\u8f93\u51fa 2.500000 \u6837\u4f8b\u8bf4\u660e \u5c06\u7b2c\u4e00\u53ea\u7206\u866b\u653e\u5728\u5750\u6807\\(-8\\)\u5904\uff0c\u7b2c\u4e8c\u53ea\u7206\u866b\u653e\u5728\u5750\u6807\\(12.5\\)\u5904\u3002 \u8fd9\u65f6\uff0c\u53ea\u8981\u7206\u70b8\u534a\u5f84\u4e3a\\(2.5\\)\uff0c\u5c31\u80fd\u6d88\u706d\u6240\u6709\u9646\u6218\u961f\u5458\u3002 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\\( n \\leq 50 \\)\u3002 \u5bf9\u4e8e\u6240\u6709\u7684\u6570\u636e\uff0c\\( n \\leq 100,000 \\)\u3002 \u63d0\u793a C++\u4e2d\uff0c\u4e0b\u9762\u7684\u7a0b\u5e8f\u53ef\u4ee5\u8f93\u51fa\u4fdd\u75596\u4f4d\u7684\u5c0f\u6570\uff1a #include <iostream> #include <iomanip> using namespace std; int main() { double f = 1.23; cout << fixed << setprecision(6) << f << endl; return 0; } \u9650\u5236 \u65f6\u95f4\u9650\u5236\uff1a1000ms\uff0c\u5185\u5b58\u9650\u5236\uff1a50000kb\u3002 FineArtz's solution Star /* \u4e3a\u4e86\u866b\u7fa4 */ #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double INF = 10e7 * 3.0; double x[100005]; int n, k; bool check(double p){ int nowl = 1, cnt = 1; for (int i = 2; i <= n; ++i){ if (x[i] - x[nowl] - 2 * p < 10e-8) continue; else{ ++cnt; nowl = i; if (cnt > k) return false; } } return true; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> x[i]; double ans = INF, lans = INF; double l = 0.0, r = x[n] - x[1], m = (l + r) / 2; while (l - r < 10e-8){ if (check(m)){ lans = ans; ans = m; r = m; if (abs(lans - ans) < 10e-8) break; } else l = m; m = (l + r) / 2; } cout << fixed << setprecision(6) << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double eps = 1e-8; int n, k; double R, lastR; double minR, maxR, midR; double x[100005]; bool AllKill(double tryR) { int lf = 0, count = 1; for (int rh = 1; rh < n; ++rh) { if (rh < n && x[rh] - x[lf] - 2 * tryR < eps) continue; else { ++count; lf = rh; if (count > k) return false; } } return true; } int main() { scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%lf\", &x[i]); lastR = R = maxR; minR = 0, maxR = x[n - 1] - x[0]; midR = (minR + maxR) / 2; while (true) { if (AllKill(midR)) { lastR = R; R = midR; maxR = midR; if (fabs(lastR - R) < eps) break; } else minR = midR; midR = (minR + maxR) / 2; } cout << fixed << setprecision(6) << R; return 0; }","title":"1991"},{"location":"nr/1991/#1991","text":"\u9898\u76ee","title":"1991 \u4e3a\u4e86\u866b\u7fa4"},{"location":"nr/1991/#fineartzs-solution-star","text":"/* \u4e3a\u4e86\u866b\u7fa4 */ #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double INF = 10e7 * 3.0; double x[100005]; int n, k; bool check(double p){ int nowl = 1, cnt = 1; for (int i = 2; i <= n; ++i){ if (x[i] - x[nowl] - 2 * p < 10e-8) continue; else{ ++cnt; nowl = i; if (cnt > k) return false; } } return true; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> x[i]; double ans = INF, lans = INF; double l = 0.0, r = x[n] - x[1], m = (l + r) / 2; while (l - r < 10e-8){ if (check(m)){ lans = ans; ans = m; r = m; if (abs(lans - ans) < 10e-8) break; } else l = m; m = (l + r) / 2; } cout << fixed << setprecision(6) << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1991/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cmath> #include <iomanip> using namespace std; const double eps = 1e-8; int n, k; double R, lastR; double minR, maxR, midR; double x[100005]; bool AllKill(double tryR) { int lf = 0, count = 1; for (int rh = 1; rh < n; ++rh) { if (rh < n && x[rh] - x[lf] - 2 * tryR < eps) continue; else { ++count; lf = rh; if (count > k) return false; } } return true; } int main() { scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%lf\", &x[i]); lastR = R = maxR; minR = 0, maxR = x[n - 1] - x[0]; midR = (minR + maxR) / 2; while (true) { if (AllKill(midR)) { lastR = R; R = midR; maxR = midR; if (fabs(lastR - R) < eps) break; } else minR = midR; midR = (minR + maxR) / 2; } cout << fixed << setprecision(6) << R; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/1992/","text":"1992 \u7eee\u793c\u7684\u9634\u8c0b \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u7b2c\u56db\u6b21\u5723\u676f\u6218\u4e89\u5f00\u59cb\u4e86\u3002 \u4e3a\u4e86\u6536\u96c6\u654c\u4eba\u7684\u60c5\u62a5\uff0c\u8a00\u5cf0\u7eee\u793c\u547d\u4ee4\u4ed6\u7684\u4f7f\u9b54Assassin\u5c06\u81ea\u5df1\u7684\u7075\u4f53\u5206\u6210\\(n\\)\u4efd\uff0c\u5206\u522b\u76d1\u89c6\u6559\u5802\u5916\u7684\u957f\u76f4\u8d70\u9053\u3002 Assassin\u6bcf\u4efd\u7075\u4f53\u7684\u80fd\u529b\u4e0d\u540c\u3002 \u7b2c\\(i\\)\u4efd\u7075\u4f53\u53ef\u4ee5\u76d1\u89c6\u5230\u7684\u533a\u57df\u662f\u95ed\u533a\u95f4\\([a_i,b_i]\\)\u3002 \u7eee\u793c\u60f3\u77e5\u9053\uff0c\u76d1\u63a7\u8303\u56f4\u5185\u7684\u533a\u57df\u7684\u603b\u957f\u5ea6\u662f\u591a\u5c11\u3002 \u6bd4\u5982\uff0c\u7b2c\u4e00\u4efd\u7075\u4f53\u7684\u89c6\u91ce\u662f\\([-1,1]\\)\uff0c\u7b2c\u4e8c\u4efd\u7075\u4f53\u7684\u89c6\u91ce\u662f\\([0,2]\\)\uff0c\u7b2c\u4e09\u4efd\u7075\u4f53\u7684\u89c6\u91ce\u662f\\([3,4]\\)\u3002 \u90a3\u4e48\u7eee\u793c\u80fd\u83b7\u5f97\u7684\u5168\u90e8\u89c6\u91ce\u662f\\([-1,2]\\cup[3,4]\\)\uff0c\u957f\u5ea6\u4e3a\\(4\\)\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\\(1\\)\u884c\u6709\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7075\u4f53\u6570\u91cf\\(n\\)\u3002 \u63a5\u4e0b\u6765\u6709\\(n\\)\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\\(a_i\\)\u548c\\(b_i\\)\uff0c\u8868\u793a\u7b2c\\(i\\)\u4e2a\u7075\u4f53\u7684\u89c6\u91ce\u4e3a\\([a_i,b_i]\\)\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\\(s\\)\uff0c\u8868\u793a\u83b7\u5f97\u7684\u5168\u90e8\u89c6\u91ce\u7684\u603b\u957f\u5ea6\u3002 \u6837\u4f8b\u8f93\u5165 3 3959 21659 8666 26551 3392 11450 \u6837\u4f8b\u8f93\u5165 23159 \u6837\u4f8b\u89e3\u91ca \\( [3959,21659]\\cup[8666,26551]\\cup[3392,11450] = [3392,26551] \\) \u603b\u957f\u5ea6\u4e3a \\( 26551-3392 = 23159 \\) \u8bf4\u660e \u65f6\u95f4\u9650\u5236\uff1a1000ms\uff0c\u5185\u5b58\u9650\u5236\uff1a50000kb\u3002 \u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff1a\u7075\u4f53\u6570\u91cf\\(1 \\leq n \\leq 10000\\)\u3002 \u6bcf\u4efd\u7075\u4f53\u7684\u89c6\u91ce \\(1 \\leq a_i ,b_i\\leq 2 \\times 10^9\\) \u5bf9\u4e8e30%\u6570\u636e: \u7075\u4f53\u6570\u91cf\\(1 \\leq n \\leq 50\\)\u3002 FineArtz's solution Star /* \u7eee\u793c\u7684\u9634\u8c0b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[10005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"1992"},{"location":"nr/1992/#1992","text":"\u9898\u76ee","title":"1992 \u7eee\u793c\u7684\u9634\u8c0b"},{"location":"nr/1992/#fineartzs-solution-star","text":"/* \u7eee\u793c\u7684\u9634\u8c0b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[10005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/1994/","text":"1994 \u4e8c\u54e5\u7684\u5730\u56fe \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e8c\u54e5\u6700\u8fd1\u62ff\u5230\u4e86\u4e00\u4efd\u4e16\u754c\u5730\u56fe\uff0c\u8fd9\u4e2a\u5730\u56fe\u662f\u4e00\u4e2a\\(N \\times M\\)\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u683c\u5b50\u4ee3\u8868\u4e00\u5757\u5730\u65b9\uff0c\u6709\u53ef\u80fd\u662f\u9646\u5730\u6216\u8005\u6d77\u6d0b\u3002 \u8fd9\u4e2a\u5730\u56fe\u5e76\u6ca1\u6709\u628a\u56fd\u5bb6\u6807\u6ce8\u51fa\u6765\uff0c\u5728\u5f3a\u70c8\u7684\u597d\u5947\u5fc3\u7684\u9a71\u4f7f\u4e0b\uff0c\u4e8c\u54e5\u60f3\u77e5\u9053\u8fd9\u5757\u5730\u56fe\u4e0a\u6709\u6700\u591a\u53ef\u80fd\u6709\u591a\u5c11\u4e2a\u56fd\u5bb6\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u8ba4\u4e3a\u6d77\u6d0b\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u4e00\u4e2a\u56fd\u5bb6\uff0c\u6bcf\u4e00\u5757\u9646\u5730\u5c5e\u4e8e\u4e14\u4ec5\u5c5e\u4e8e\u4e00\u4e2a\u56fd\u5bb6\uff0c\u5e76\u4e14\u76f8\u90bb\u7684\u9646\u5730\u5c5e\u4e8e\u540c\u4e00\u4e2a\u56fd\u5bb6\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570N\u548cM\uff0c\u8868\u793a\u5730\u56fe\u5927\u5c0f\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884cM\u4e2a\u6574\u6570\u3002\u8868\u793a\u8fd9\u4e2a\u5730\u56fe\uff0c0\u4ee3\u8868\u9646\u5730\uff0c-1\u4ee3\u8868\u6d77\u6d0b\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5730\u56fe\u4e0a\u6700\u591a\u53ef\u80fd\u7684\u56fd\u5bb6\u6570\u3002 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e\u5168\u90e8\u6570\u636e\uff1a\\(1 \\leq n, m \\leq 500\\)\u3002 \u5bf9\u4e8e50%\u7684\u6570\u636e\uff1a\\(1 \\leq n, m \\leq 10\\)\u3002 \u6837\u4f8b\u8f93\u5165 3 3 0 -1 0 -1 0 -1 0 -1 0 \u6837\u4f8b\u8f93\u51fa 5 \u9650\u5236 \u65f6\u95f4\u9650\u5236\uff1a1000ms\uff0c\u5185\u5b58\u9650\u5236\uff1a65536kb FineArtz's solution Star /* \u4e8c\u54e5\u7684\u5730\u56fe */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505]; int n, m; bool check(int x, int y){ if (x < 1 || x > n || y < 1 || y > m || a[x][y] != 0) return false; return true; } void floodfill(int x, int y, int cnt){ a[x][y] = cnt; for (int i = 0; i != 4; ++i){ int nextx = x + dx[i]; int nexty = y + dy[i]; if (check(nextx, nexty)){ floodfill(nextx, nexty, cnt); } } } int main(){ memset(a, 0, sizeof(a)); cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> a[i][j]; int cnt = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == 0){ ++cnt; floodfill(i, j, cnt); } } } cout << cnt << endl; return 0; }","title":"1994"},{"location":"nr/1994/#1994","text":"\u9898\u76ee","title":"1994 \u4e8c\u54e5\u7684\u5730\u56fe"},{"location":"nr/1994/#fineartzs-solution-star","text":"/* \u4e8c\u54e5\u7684\u5730\u56fe */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505]; int n, m; bool check(int x, int y){ if (x < 1 || x > n || y < 1 || y > m || a[x][y] != 0) return false; return true; } void floodfill(int x, int y, int cnt){ a[x][y] = cnt; for (int i = 0; i != 4; ++i){ int nextx = x + dx[i]; int nexty = y + dy[i]; if (check(nextx, nexty)){ floodfill(nextx, nexty, cnt); } } } int main(){ memset(a, 0, sizeof(a)); cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> a[i][j]; int cnt = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == 0){ ++cnt; floodfill(i, j, cnt); } } } cout << cnt << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/2104/","text":"2104 \u5927\u8138\u4e0a\u8bfe \u9898\u76ee Description \u7531\u4e8edota\u6c34\u5e73\u592a\u5dee\u88ab\u9ad8\u624b\u6392\u65a5\uff0c\u5927\u8138\u540c\u5b66\u6700\u8fd1\u8ff7\u4e0a\u4e86\u6253FIFA(\u867d\u7136\u8e22\u7684\u4f9d\u65e7\u5f88\u81ed)\u3002\u4e00\u5929\u665a\u4e0a\u5927\u8138\u901a\u5bb5\u8fbe\u65e6\u548c\u5ba4\u53cb\u5927\u6218\u4e86\u4e09\u767e\u56de\u5408\uff0c\u65e9\u4e0a\u81ea\u7136\u8d77\u665a\u4e86\uff0c\u53ef\u4ed6\u53c8\u5341\u5206\u5bb3\u6015\u8fdf\u5230\u3002 \u5371\u96be\u65f6\u523b\uff0c\u4ed6\u62ff\u51fa\u4e86\u81ea\u5df1\u7684GPS\uff0c\u4ed6\u53d1\u73b0\u4ee5\u5bdd\u5ba4\u4e3a\u539f\u70b9(\u5750\u6807\u4e3a\\((0,0)\\))\uff0c\u4e0a\u8bfe\u6559\u5ba4\u7684\u5750\u6807\u4e3a\\((X,Y)\\)\uff0c\u6bcf\u4e2a\u65f6\u95f4\u5355\u4f4d\u4ed6\u53ef\u4ee5\u5411\u4e1c\u897f\u5357\u5317\u67d0\u4e2a\u65b9\u5411\u8d70\u4e00\u6b65\u3002\u5982\\((0,0)\\)\u53ef\u4ee5\u5230\u8fbe\\((0,1),(1,0),(0\uff0c-1),(-1,0)\\)\u3002 \u4ed6\u5e0c\u671b\u5c3d\u5feb\u8d70\u5230\u6559\u5ba4\uff0c\u7136\u800c\u4e8b\u60c5\u6ca1\u6709\u8fd9\u4e48\u7b80\u5355\uff0c\u56e0\u4e3a\u4e00\u8def\u4e0a\u8fd8\u6709\u8bb8\u591a\u8270\u96be\u9669\u963b\uff0c\u6bd4\u5982\u5927\u8138\u4e0d\u4f1a\u6e38\u6cf3\uff0c\u6240\u4ee5\u4ed6\u4e0d\u53ef\u80fd\u8d70\u5230\u601d\u6625\u6e56\u6216\u8005\u601d\u6e90\u6e56\u91cc(\u9664\u975e\u4ed6\u89c9\u5f97\u51c6\u65f6\u5230\u8fbe\u65e0\u671b\uff0c\u4e00\u6012\u6295\u6e56)\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6709N\u4e2a\u969c\u788d\uff0c\u7b2ci\u4e2a\u969c\u788d\u7684\u5750\u6807\u662f\\((A_i, B_i)\\)\u3002 \u4e8e\u662f\u5927\u8138\u6c42\u52a9\u4e8e\u4f60\uff0c\u8bf7\u95ee\u5927\u8138\u5230\u8fbe\u6559\u5ba4\u9700\u8981\u7684\u6700\u5c11\u65f6\u95f4\u662f\u591a\u5c11\uff1f Input Format \u7b2c\u4e00\u884c\uff0c\u4e09\u4e2a\u6574\u6570\\(X,Y,N\\)\u3002 \u7b2c\\(2 \\cdots N+1\\)\u884c\uff0c\u7b2c\\(i+1\\)\u884c\u4e24\u4e2a\u6574\u6570\\((Ai, Bi)\\)\u3002 Output Format \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5927\u8138\u9700\u8981\u7684\u6700\u5c11\u65f6\u95f4\u3002 Sample Input 1 2 7 0 2 -1 3 3 1 1 1 4 2 -1 1 2 2 About Sample Input \u6559\u5ba4\u7684\u5750\u6807\u662f\\((1, 2)\\). \u969c\u788d\u7269\u662f\\((0, 2); (-1, 3); (3, 1); (1, 1); (4, 2); (-1, 1); (2, 2)\\): 4 . . . . . . . . 3 . M . . . . . . 2 . . M C M . M . 1 . M . M . M . . 0 . . * . . . . . -1 . . . . . . . . -2-1 0 1 2 3 4 5 Sample Output 11 About Sample Output *\u4ee3\u8868\u5927\u8138\u7684\u6700\u4f73\u7ebf\u8def\u3002 4 ******* . . . . 3 * M . * . . . . 2 * . M C M . M . 1 * M . M . M . . 0 ***** . . . . . -1 . . . . . . . . -2-1 0 1 2 3 4 5 About Testdata 30%\u7684\u6570\u636e\uff0c\\(-20 \\leq Ai, Bi, X, Y \\leq 20\\) 50%\u7684\u6570\u636e\uff0c\\(-100 \\leq Ai, Bi, X, Y \\leq 100\\) 100%\u7684\u6570\u636e\uff0c\\(N\\leq 10,000, -500 \\leq Ai, Bi, X, Y \\leq 500\\) Limits Time limit: 1000ms, memory limit: 131072kb. FineArtz's solution Star /* \u5927\u8138\u4e0a\u8bfe */ #include <iostream> #include <queue> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; const int D = 502; bool v[1005][1005]; int lBound = 0, rBound = 1005, uBound = 1005, dBound = 0; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy), step(0) {} int x = 0, y = 0, step = 0; }; bool check(const Point &p){ if (p.x < lBound || p.x > rBound || p.y < lBound || p.y > uBound || v[p.x][p.y]) return false; else return true; } int main(){ memset(v, 0, sizeof(v)); v[D][D] = true; int x, y, n; cin >> x >> y >> n; x += D; y += D; /*lBound = min(lBound, x - 1); rBound = max(rBound, x + 1); uBound = max(uBound, y + 1); dBound = min(dBound, y - 1);*/ for (int i = 1; i <= n; ++i){ int a, b; cin >> a >> b; a += D; b += D; v[a][b] = true; /*lBound = min(lBound, a - 1); rBound = max(rBound, a + 1); uBound = max(uBound, b + 1); dBound = min(dBound, b - 1);*/ } queue<Point> q; Point s(D, D); q.push(s); while (!q.empty()){ Point now = q.front(), next; q.pop(); if (now.x == x && now.y == y){ cout << now.step << endl; return 0; } for (int i = 0; i != 4; ++i){ next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.step = now.step + 1; if (check(next)){ q.push(next); v[next.x][next.y] = true; } } } return 0; }","title":"2104"},{"location":"nr/2104/#2104","text":"\u9898\u76ee","title":"2104 \u5927\u8138\u4e0a\u8bfe"},{"location":"nr/2104/#fineartzs-solution-star","text":"/* \u5927\u8138\u4e0a\u8bfe */ #include <iostream> #include <queue> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; const int D = 502; bool v[1005][1005]; int lBound = 0, rBound = 1005, uBound = 1005, dBound = 0; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy), step(0) {} int x = 0, y = 0, step = 0; }; bool check(const Point &p){ if (p.x < lBound || p.x > rBound || p.y < lBound || p.y > uBound || v[p.x][p.y]) return false; else return true; } int main(){ memset(v, 0, sizeof(v)); v[D][D] = true; int x, y, n; cin >> x >> y >> n; x += D; y += D; /*lBound = min(lBound, x - 1); rBound = max(rBound, x + 1); uBound = max(uBound, y + 1); dBound = min(dBound, y - 1);*/ for (int i = 1; i <= n; ++i){ int a, b; cin >> a >> b; a += D; b += D; v[a][b] = true; /*lBound = min(lBound, a - 1); rBound = max(rBound, a + 1); uBound = max(uBound, b + 1); dBound = min(dBound, b - 1);*/ } queue<Point> q; Point s(D, D); q.push(s); while (!q.empty()){ Point now = q.front(), next; q.pop(); if (now.x == x && now.y == y){ cout << now.step << endl; return 0; } for (int i = 0; i != 4; ++i){ next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.step = now.step + 1; if (check(next)){ q.push(next); v[next.x][next.y] = true; } } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/2108/","text":"2108 \u914d\u5bf9 I \u9898\u76ee Description DS\u63a5\u5230\u4e00\u4e2a\u4efb\u52a1\uff0c\u8fd9\u4e2a\u4efb\u52a1\u6709\u5f88\u591a\u90e8\u5206\uff0c\u6bcf\u4e00\u4e2a\u90e8\u5206\u9700\u8981\u4e24\u4e2a\u4eba\u5b8c\u6210\uff0c\u81ea\u7136\u5c31\u8981\u8fdb\u884c\u914d\u5bf9\u3002 \u672c\u6b21\u914d\u5bf9\u7684\u5177\u4f53\u8981\u6c42\u6559\u52a1\u5904\u5df2\u7ecf\u4e0b\u53d1\uff1a 1) \u4e00\u5171\\( 2 \\times N \\)\u4e2a\u4eba\uff0c\u5206\u4e3a\u4e24\u4e2a\u961f\u4f0d\uff0c\u6bcf\u961f\\( N \\)\u4eba\uff0c\u6bcf\u4e2a\u4eba\u90fd\u6709\u4e00\u4e2a\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\uff08\u53ef\u4ee5\u76f8\u540c\uff09\u3002\u603b\u5171\u9700\u8981\u914d\u51fa\\( N \\)\u5bf9\uff0c\u6bcf\u5bf9\u4e24\u4e2a\u4eba\u3002 2) \u6bcf\u4e2a\u4eba\u53ef\u4ee5\u88ab\u914d\u5bf9\u591a\u6b21\uff0c\u6bcf\u4e00\u5bf9\u4e2d\u7684\u4e24\u4e2a\u4eba\u5206\u522b\u6765\u81ea\u4e0d\u540c\u961f\u4f0d\u3002 3) \u8981\u6c42\u4e2d\u63d0\u5230\uff0c\u9700\u8981\u5f97\u5230\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\u4e4b\u548c\u6700\u5c0f\u7684\\( N \\)\u5bf9\u3002 \u8bf7\u4f60\u5e2e\u5fd9\u8fdb\u884c\u914d\u5bf9\u3002 Input Format \u8f93\u5165\u5171\u6709\u4e09\u884c\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\\( N \\)\uff0c\u610f\u4e49\u5982\u4e0a\u3002 \u7b2c\u4e8c\u884c\u6709\\( N \\)\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u7b2c\u4e00\u4e2a\u961f\u4f0d\u4e2d\u6bcf\u4e2a\u4eba\u7684\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\u3002 \u7b2c\u4e09\u884c\u6709\\( N \\)\u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u7b2c\u4e8c\u4e2a\u961f\u4f0d\u4e2d\u6bcf\u4e2a\u4eba\u7684\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\u3002 Output Format \u5171\\( N \\)\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e00\u5bf9\u7684\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\u4e4b\u548c\u3002 \u6309\u7167\u5347\u5e8f\u8f93\u51fa\u3002 Sample Input 4 2 7 4 5 8 3 1 4 Sample Output 3 5 5 6 About Test Data \u5bf9\u4e8e30%\u6570\u636e \\(1 \\leq N \\leq 800\\)\u3002 \u5bf9\u4e8e100%\u6570\u636e \\(1 \\leq N \\leq 200,000\\)\u3002 \u6240\u6709\u5de5\u4f5c\u80fd\u529b\u8bc4\u4f30\u503c\\(\\leq 100,000,000\\)\u3002 \u6837\u4f8b\u89e3\u91ca\uff1a 2+1, 2+3, 4+1, 2+4 WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int n,heap[500000],p[500000],len,a[300000],b[300000],q[500000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d\\n\",pop()); return 0; }","title":"2108"},{"location":"nr/2108/#2108-i","text":"\u9898\u76ee","title":"2108 \u914d\u5bf9 I"},{"location":"nr/2108/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[500000],p[500000],len,a[300000],b[300000],q[500000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d\\n\",pop()); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/2109/","text":"2109 \u4e8c\u6b21\u65b9\u7a0b \u9898\u76ee Description \u5c0fC\u6700\u8fd1\u6b63\u5728\u7814\u7a76\u4e8c\u6b21\u65b9\u7a0b\uff0c\u9047\u5230\u4e86\u4e00\u4e9b\u95ee\u9898\uff0c\u5e0c\u671b\u4f60\u80fd\u5e2e\u4ed6\u89e3\u51b3\u3002\u73b0\u5728\u6709\\(N\\)\u4e2a\u6570\uff0c\u5c0fC\u60f3\u77e5\u9053\uff0c\u8fd9\\(N\\)\u4e2a\u6570\u4e2d\u6709\u591a\u5c11\u6570\u4f5c\u4e3a\\(a\\)\uff0c\u624d\u80fd\u4f7f\u7ed9\u5b9a\\(b\\),\\(c\\)\uff0c\u5bf9\u4e8e\\(ax^2 + bx + c = 0\\)\u6709\u5b9e\u6570\u89e3\u3002 Input Format \u4e00\u4e2a\u6574\u6570\\(N\\)\uff0c\u8868\u793a\u6709\\(N\\)\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765\\(N\\)\u884c\u662f\u8fd9\\(N\\)\u4e2a\u6570\\(a_i\\) (\\( a_i > 0\\))\u3002 \u968f\u540e\u4e00\u4e2a\u6574\u6570\\(K\\)\uff0c\u8868\u793a\u6709\\(K\\)\u4e2a\u8be2\u95ee\u95ee\u9898\u7684\\((b,c)\\)\u5bf9\u3002 \u63a5\u4e0b\u6765\\(k\\)\u884c\uff0c\u8868\u793a\u4e00\u4e2a\u8be2\u95ee\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\uff0c\u5206\u522b\u662f\\(b\\)\u548c\\(c\\)(\\(b,c > 0\\))\u3002 Output Format \u6bcf\u4e00\u884c\u5bf9\u4e8e\u6bcf\u4e2a\u7ed9\u5b9a\u7684\u8be2\u95ee\uff0c\u7ed9\u51fa\u4e00\u4e2a\u7b54\u6848\\(k_i\\)\uff0c\u8868\u793a\u6709\u5bf9\u4e8e\u7b2c\\(i\\)\u4e2a\u8be2\u95ee\u7684\\((b,c)\\)\u6709\\(k_i\\)\u4e2a\u6570\u6ee1\u8db3\u8981\u6c42\u3002 Sample Input 3 1 2 3 2 6 2 3 2 Sample Output 3 1 Specification \\( N \\leq 100000\\); \\( K \\leq 10000\\); \\( b, c \\leq 10000\\); \\( a_i \\leq 100000\\); \u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c\u8fd9\\(N\\)\u4e2a\u6570\u662f\u5df2\u7ecf\u4ece\u5c0f\u5230\u5927\u6392\u597d\u5e8f\u7684\u3002 VictriD's solution Star #include <iostream> #include <stdio.h> using namespace std; int bp(int N, int* spis, int poisk) { int min = 0, max = N - 1, mid; if (poisk >= spis[max]) return N; if (poisk < spis[min]) return 0; while (min <= max) { mid = (min + max) / 2; if (poisk == spis[mid]) return mid + 1; else if (poisk < spis[mid]) max = mid - 1; else min = mid + 1; } return 0; } int main() { //* scanf and printf to reduce time int N, k, b, c; cin >> N; int* spis = new int[N]; for (int i = 0; i < N; i++) scanf(\"%d\", spis + i); scanf(\"%d\", &k); int* otv = new int[k]; for (int i = 0; i < k; i++) { scanf(\"%d %d\", &b, &c); otv[i] = bp(N, spis, (b * b / c / 4)); } for (int i = 0; i < k; i++) { if (i) printf(\"\\n\"); printf(\"%d\", otv[i]); } return 0; } FineArtz's solution Star /* \u4e8c\u6b21\u65b9\u7a0b */ #include <iostream> #include <cmath> using namespace std; int a[100005] = {0}; int search(int low, int high, double dt){ int l = low, h = high, m = (l + h) / 2; while (h > l){ m = (l + h) / 2; if (abs(a[m] - dt) < 10e-6) return m + 1; if (a[m] < dt) l = m + 1; else h = m - 1; } return l; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, k; cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> k; for (int i = 1; i <= k; ++i){ int b, c, cnt = 0; cin >> b >> c; if (c == 0) cnt = n; else{ double dt = b * b * 1.0 / 4 / c; if (a[1] > dt) cnt = 0; else cnt = search(1, n, dt); } cout << cnt << endl; } return 0; } vvvvv1v's solution Star #include <iostream> #include <cmath> #include <cstdio> using namespace std; int search(double *arr, int N, double target) { int low = 0, high = N - 1, mid = (low + high) / 2; while (high > low) { if (arr[mid] > target) high = mid; else low = mid + 1; mid = (low + high) / 2; } return mid; } int main() { int N; cin >> N; double arr[100005]; for (int i = 0; i < N; ++i) scanf(\"%lf\", &arr[i]); int k; cin >> k; double b, c; for (int i = 0; i < k; ++i) { scanf(\"%lf%lf\", &b, &c); double target = b * b / (4.0 * c); if (target > arr[N - 1]) printf(\"%d\\n\", N); else printf(\"%d\\n\", search(arr, N, target)); } return 0; }","title":"2109"},{"location":"nr/2109/#2109","text":"\u9898\u76ee","title":"2109 \u4e8c\u6b21\u65b9\u7a0b"},{"location":"nr/2109/#victrids-solution-star","text":"#include <iostream> #include <stdio.h> using namespace std; int bp(int N, int* spis, int poisk) { int min = 0, max = N - 1, mid; if (poisk >= spis[max]) return N; if (poisk < spis[min]) return 0; while (min <= max) { mid = (min + max) / 2; if (poisk == spis[mid]) return mid + 1; else if (poisk < spis[mid]) max = mid - 1; else min = mid + 1; } return 0; } int main() { //* scanf and printf to reduce time int N, k, b, c; cin >> N; int* spis = new int[N]; for (int i = 0; i < N; i++) scanf(\"%d\", spis + i); scanf(\"%d\", &k); int* otv = new int[k]; for (int i = 0; i < k; i++) { scanf(\"%d %d\", &b, &c); otv[i] = bp(N, spis, (b * b / c / 4)); } for (int i = 0; i < k; i++) { if (i) printf(\"\\n\"); printf(\"%d\", otv[i]); } return 0; }","title":"VictriD's solution Star"},{"location":"nr/2109/#fineartzs-solution-star","text":"/* \u4e8c\u6b21\u65b9\u7a0b */ #include <iostream> #include <cmath> using namespace std; int a[100005] = {0}; int search(int low, int high, double dt){ int l = low, h = high, m = (l + h) / 2; while (h > l){ m = (l + h) / 2; if (abs(a[m] - dt) < 10e-6) return m + 1; if (a[m] < dt) l = m + 1; else h = m - 1; } return l; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, k; cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> k; for (int i = 1; i <= k; ++i){ int b, c, cnt = 0; cin >> b >> c; if (c == 0) cnt = n; else{ double dt = b * b * 1.0 / 4 / c; if (a[1] > dt) cnt = 0; else cnt = search(1, n, dt); } cout << cnt << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/2109/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cmath> #include <cstdio> using namespace std; int search(double *arr, int N, double target) { int low = 0, high = N - 1, mid = (low + high) / 2; while (high > low) { if (arr[mid] > target) high = mid; else low = mid + 1; mid = (low + high) / 2; } return mid; } int main() { int N; cin >> N; double arr[100005]; for (int i = 0; i < N; ++i) scanf(\"%lf\", &arr[i]); int k; cin >> k; double b, c; for (int i = 0; i < k; ++i) { scanf(\"%lf%lf\", &b, &c); double target = b * b / (4.0 * c); if (target > arr[N - 1]) printf(\"%d\\n\", N); else printf(\"%d\\n\", search(arr, N, target)); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/2202/","text":"2202 \u6885\u897f\u7684\u8fc7\u4eba \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u6885\u897f\u6765SJTU\u4e86\uff01\u8fd9\u8ba9\u4ea4\u5927\u5b66\u5b50\u6cb8\u817e\u4e86\uff0c\u4e3a\u4e86\u4f53\u73b0\u963f\u6839\u5ef7\u548c\u4e2d\u56fd\u7684\u56fd\u9645\u53cb\u8c0a\uff0c\u6821\u957f\u51b3\u5b9a\u8ba9\u6885\u897f\u4e0e\u7535\u9662\u7ec4\u7ec7\u4e00\u573a\u53cb\u8c0a\u8d5b\u3002\u8fd9\u573a\u6bd4\u8d5b\u5728\u5357\u4f53\u8fdb\u884c\uff0c\u628a\u5357\u4f53\u5206\u6210\u4e00\u4e2an\u4e58m\u7684\u77e9\u9635\uff0c\u4e00\u5f00\u59cb\u6885\u897f\u5728(1,1)\u4f4d\u7f6e\uff0c\u7403\u95e8\u5728(n,m)\u4f4d\u7f6e\uff0c\u53ea\u8981\u6885\u897f\u80fd\u5e26\u7403\u5230\u7403\u95e8\u5904\u5c31\u7b97\u6885\u897f\u80dc\u5229\u3002\u7535\u9662\u51e0\u4e4e\u6d3e\u51fa\u4e86\u6240\u6709\u5b66\u751f\u6765\u963b\u6321\u6885\u897f\uff0c\u4f46\u662f\u56e0\u4e3a\u6885\u897f\u7684\u6c14\u573a\uff0c\u4ed6\u4eec\u7ad9\u5728\u573a\u4e0a\u90fd\u4e0d\u6562\u52a8\u3002 \u5982\u4e0b\u56fe\uff0c\u662f\u4e00\u4e2a3\u4e584\u7684\u7403\u573a\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684\u6570\u5b57\u8868\u793a\u8fd9\u4e2a\u4f4d\u7f6e\u6709\u6ca1\u6709\u7ad9\u7535\u9662\u7684\u5b66\u751f\u3002m\u662f\u6885\u897f\uff0cd\u662f\u7403\u95e8\u3002 m 0 1 0 0 0 1 0 1 0 1 d \u540c\u65f6\uff0c\u4e3a\u4e86\u516c\u5e73\u8d77\u89c1\uff0c\u9650\u5b9a\u6885\u897f\u53ea\u80fd\u8fc7\u4e00\u4e2a\u4eba\uff0c\u5c31\u662f\u8bf4\u6885\u897f\u80fd\u8de8\u5165\u201c1\u201d\u7684\u683c\u5b50\uff0c\u4f46\u53ea\u80fd\u8fdb\u5165\u4e00\u6b21\u3002\u540c\u65f6\u89c4\u5b9a\u6885\u897f\u53ea\u80fd\u56db\u65b9\u5411\u79fb\u52a8\uff0c\u5c31\u662f\u8bf4\u6885\u897f\u4e0d\u80fd\u4ece\u4e00\u4e2a\u683c\u5b50\u8d70\u5230\u5b83\u53f3\u4e0a\u89d2\u7684\u683c\u5b50\u3002 \u5728\u4e0a\u9762\u7684\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6885\u897f\u80fd\u901a\u8fc7\u8fc7\u4e00\u4e2a\u4eba\u6765\u8d70\u5230\u7403\u95e8\u5904\u3002 m 1 0 0 1 1 1 1 0 0 1 d \u4f46\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6885\u897f\u5c31\u5230\u4e0d\u4e86\u4e86\uff0c\u56e0\u4e3a\u4ed6\u5fc5\u987b\u8fc7\u4e24\u4e2a\u4eba\u3002 \u5728\u7403\u573a\u4e0a\u6ca1\u6709\u65f6\u95f4\u7ed9\u4f60\u601d\u8003\uff01\u53ea\u6709\u4e00\u79d2\u949f\u65f6\u95f4\u5728\u51b3\u5b9a\u80fd\u5426\u5230\u7403\u95e8\u5904\u3002 \u8f93\u5165 k\u7ec4\u6570\u636e\uff0c\u7ed9\u51fan\uff0cm\uff0c\u5206\u522b\u662f\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\uff0c\u4e4b\u540e\u7ed9\u51fan\u884c\uff0c\u6bcf\u884cm\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u662f0\u6216\u80051\uff0c\u5728(1\uff0c1)\u548c(n,m)\u5fc5\u662f0\u3002\u8868\u793a\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u4e0a\u662f\u5426\u6709\u7535\u9662\u7684\u5b66\u751f\u3002 Sample input 1: 1 3 4 0 0 1 0 0 0 1 0 1 0 1 0 \u8f93\u51fa \u8f93\u51fak\u884c\uff0c\u7ed9\u51fa\u6885\u897f\u662f\u5426\u80fd\u5230\u8fbe\u7403\u95e8\uff0c1\u8868\u793a\u80fd\uff0c0\u8868\u793a\u4e0d\u80fd\u3002 Sample output 1: 1 \u6570\u636e\u8303\u56f4\uff1a \u5bf950%\u7684\u6570\u636e 3<=N,m<=100 \u5bf9100%\u7684\u6570\u636e 3<=N,m<=1000\uff0ck<=4 VictriD's solution Star #include <iostream> #include <stack> #include <unordered_map> using namespace std; inline bool valid_messi(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1); } inline bool valid_door(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1 || mat[n1][m1] == 3); } bool check() { int n, m; cin >> n >> m; int** inputmat = new int*[n]; for (int i = 0; i < n; i++) { inputmat[i] = new int[m](); for (int j = 0; j < m; j++) cin >> inputmat[i][j]; } stack<int> lll; stack<int> rrr; lll.push(0); rrr.push(0); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (n0 == n - 1 && m0 == m - 1) return true; if (inputmat[n0][m0] == 0) { if (valid_messi(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_messi(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_messi(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_messi(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 2; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 3; } } lll.push(n - 1); rrr.push(m - 1); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (inputmat[n0][m0] == 3) return true; if (inputmat[n0][m0] == 0) { if (valid_door(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_door(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_door(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_door(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 4; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 5; } } return false; } int main() { int totalis; int* ii = new int[totalis]; cin >> totalis; for (int i = 0; i < totalis; i++) { ii[i] = check(); } for (int i = 0; i < totalis; i++) { if (i) cout << endl; cout << to_string(ii[i]); } return 0; }","title":"2202"},{"location":"nr/2202/#2202","text":"\u9898\u76ee","title":"2202 \u6885\u897f\u7684\u8fc7\u4eba"},{"location":"nr/2202/#victrids-solution-star","text":"#include <iostream> #include <stack> #include <unordered_map> using namespace std; inline bool valid_messi(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1); } inline bool valid_door(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1 || mat[n1][m1] == 3); } bool check() { int n, m; cin >> n >> m; int** inputmat = new int*[n]; for (int i = 0; i < n; i++) { inputmat[i] = new int[m](); for (int j = 0; j < m; j++) cin >> inputmat[i][j]; } stack<int> lll; stack<int> rrr; lll.push(0); rrr.push(0); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (n0 == n - 1 && m0 == m - 1) return true; if (inputmat[n0][m0] == 0) { if (valid_messi(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_messi(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_messi(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_messi(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 2; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 3; } } lll.push(n - 1); rrr.push(m - 1); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (inputmat[n0][m0] == 3) return true; if (inputmat[n0][m0] == 0) { if (valid_door(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_door(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_door(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_door(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 4; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 5; } } return false; } int main() { int totalis; int* ii = new int[totalis]; cin >> totalis; for (int i = 0; i < totalis; i++) { ii[i] = check(); } for (int i = 0; i < totalis; i++) { if (i) cout << endl; cout << to_string(ii[i]); } return 0; }","title":"VictriD's solution Star"},{"location":"nr/3016/","text":"3016 \u5747\u5206\u7eb8\u724c \u9898\u76ee \u3010\u95ee\u9898\u63cf\u8ff0\u3011 \u6709 N \u5806\u7eb8\u724c\uff0c\u7f16\u53f7\u5206\u522b\u4e3a 1\uff0c2\uff0c\u2026, N\u3002\u6bcf\u5806\u4e0a\u6709\u82e5\u5e72\u5f20\uff0c\u4f46\u7eb8\u724c\u603b\u6570\u5fc5\u4e3a N \u7684\u500d\u6570\u3002\u53ef\u4ee5\u5728\u4efb\u4e00\u5806\u4e0a\u53d6\u82e5\u5e72\u5f20\u7eb8\u724c\uff0c\u7136\u540e\u79fb\u52a8\u3002\u3000\u3000\u79fb\u724c\u89c4\u5219\u4e3a\uff1a\u5728\u7f16\u53f7\u4e3a 1 \u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ea\u80fd\u79fb\u5230\u7f16\u53f7\u4e3a 2 \u7684\u5806\u4e0a\uff1b\u5728\u7f16\u53f7\u4e3a N \u7684\u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ea\u80fd\u79fb\u5230\u7f16\u53f7\u4e3a N-1 \u7684\u5806\u4e0a\uff1b\u5176\u4ed6\u5806\u4e0a\u53d6\u7684\u7eb8\u724c\uff0c\u53ef\u4ee5\u79fb\u5230\u76f8\u90bb\u5de6\u8fb9\u6216\u53f3\u8fb9\u7684\u5806\u4e0a\u3002\u3000\u3000\u73b0\u5728\u8981\u6c42\u627e\u51fa\u4e00\u79cd\u79fb\u52a8\u65b9\u6cd5\uff0c\u7528\u6700\u5c11\u7684\u79fb\u52a8\u6b21\u6570\u4f7f\u6bcf\u5806\u4e0a\u7eb8\u724c\u6570\u90fd\u4e00\u6837\u591a\u3002\u3000\u3000\u4f8b\uff1a\u82e5 N=4\uff0c4 \u5806\u7eb8\u724c\u6570\u5206\u522b\u4e3a\uff1a8\u30007\u300016\u30005\u3000\u3000\u79fb\u52a83\u6b21\u53ef\u8fbe\u5230\u76ee\u7684\uff1a\u3000\u3000\u4ece\u7b2c\u4e09\u5806\u53d64\u5f20\u724c\u653e\u5230\u7b2c\u56db\u5806\uff088 7 12 9\uff09->\u4ece\u7b2c\u4e09\u5806\u53d63\u5f20\u724c\u653e\u5230\u7b2c\u4e8c\u5806\uff088 10 9 9\uff09->\u4ece\u7b2c\u4e8c\u5806\u53d61\u5f20\u724c\u653e\u5230\u7b2c\u4e00\u5806\uff089 9 9 9\uff09\u3002 \u3010\u8f93 \u5165\u3011 \u8f93\u5165\u6570\u636e\u5305\u62ec2\u884c\u3000\u3000\u7b2c\u4e00\u884c\u662f\u6574\u6570N\uff0c\u8868\u793aN \u5806\u7eb8\u724c\uff081 <= N <= 100\uff09\u3000\u3000A1 A2 \u2026 An \uff08N \u5806\u7eb8\u724c\uff0c\u6bcf\u5806\u7eb8\u724c\u521d\u59cb\u6570\uff0cl<= Ai <=10000\uff09 \u3010\u8f93 \u51fa\u3011 \u8f93\u51fa\u6574\u6570M\uff0c\u4e3a\u6240\u6709\u5806\u5747\u8fbe\u5230\u76f8\u7b49\u65f6\u7684\u6700\u5c11\u79fb\u52a8\u6b21\u6570\u3002 \u3010\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u3011 \u8f93\u5165 4 8 7 16 5 \u8f93\u51fa 3 \u3010\u6570\u636e\u89c4\u6a21\u3011 100%\u7684\u6570\u636e\u6ee1\u8db3\uff1a1<=N<=100 1<=Ai<=10000 FineArtz's solution Star /* \u5747\u5206\u7eb8\u724c */ #include <iostream> using namespace std; int main(){ int n; int a[105] = {0}; cin >> n; int ave = 0; for (int i = 0; i < n; ++i){ cin >> a[i]; ave += a[i]; } ave /= n; int ans = 0; for (int i = 0; i < n - 1; ++i){ if (a[i] < ave){ ++ans; a[i + 1] -= ave - a[i]; a[i] = ave; } else if (a[i] > ave){ ++ans; a[i + 1] += a[i] - ave; a[i] = ave; } } cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; const int MAXNUM = 200; int main() { int n, arr[MAXNUM], sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; sum += arr[i]; } int ave = sum / n, count = 0; for (int i = 0; i < n; ++i) arr[i] -= ave; sum = 0; for (int i = 0; i < n; ++i) { sum += arr[i]; if (sum == 0) ++count; } cout << n - count << endl; return 0; }","title":"3016"},{"location":"nr/3016/#3016","text":"\u9898\u76ee","title":"3016 \u5747\u5206\u7eb8\u724c"},{"location":"nr/3016/#fineartzs-solution-star","text":"/* \u5747\u5206\u7eb8\u724c */ #include <iostream> using namespace std; int main(){ int n; int a[105] = {0}; cin >> n; int ave = 0; for (int i = 0; i < n; ++i){ cin >> a[i]; ave += a[i]; } ave /= n; int ans = 0; for (int i = 0; i < n - 1; ++i){ if (a[i] < ave){ ++ans; a[i + 1] -= ave - a[i]; a[i] = ave; } else if (a[i] > ave){ ++ans; a[i + 1] += a[i] - ave; a[i] = ave; } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/3016/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; const int MAXNUM = 200; int main() { int n, arr[MAXNUM], sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; sum += arr[i]; } int ave = sum / n, count = 0; for (int i = 0; i < n; ++i) arr[i] -= ave; sum = 0; for (int i = 0; i < n; ++i) { sum += arr[i]; if (sum == 0) ++count; } cout << n - count << endl; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/3020/","text":"3020 \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 \u9898\u76ee Description \u9a86\u6e90\uff0c\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u8ba1\u7b97\u673a\u7cfb\u6559\u6388\u3002\u517c\u4efb\u7f8e\u56fd\u6570\u5b66\u8bc4\u8bba\u8bc4\u8bba\u5458\u3001\u7b2c\u4e94\u5c4a\u4e9a\u6b27\u4fe1\u606f\u8bba\u7814\u8ba8\u4f1aAEW5\u8054\u5408\u4e3b\u5e2d\u3002\u627f\u62c5\u8fc7\u56fd\u5bb6\u81ea\u7136\u79d1\u5b66\u57fa\u91d1\u3001\u6559\u80b2\u90e8\u7559\u5b66\u56de\u56fd\u4eba\u5458\u57fa\u91d1\u53ca\u5fb7\u56fd\u56fd\u5bb6\u79d1\u5b66\u57fa\u91d1DFG\u7684\u9879\u76ee\u3002\u5bf9\u4e8e\u6211\u4eec\u6765\u8bf4\uff0c\u9a86\u6e90\u7684\u79bb\u6563\u6570\u5b66\u8bfe\u662f\u4e00\u6735\u5947\u8469\u3002 \u8fd9\u9053\u9898\u76ee\u662f\u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811\uff0c\u54c8\u592b\u66fc\u6811\u5927\u5bb6\u90fd\u8bb0\u5f97\u662f\u4ec0\u4e48\u5427\uff08\u7fc1\u8001\u5e08\u53c8\u8bb2\u8fc7\u4e00\u6b21\uff0c\u5982\u679c\u4e0d\u8bb0\u5f97\u5c31\u7ffb\u7ffb\u4e66\u5427\uff09\u3002\u4f46\u662f\u4f5c\u4e3a\u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811\uff0c\u81ea\u7136\u8981\u6709\u4e9b\u4e0d\u540c\u3002\u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811\u53ef\u4ee5\u6709\uff2e\u4e2a\u5206\u53c9\uff08\u6ce8\u610f\uff0c\u6709\u65f6\u8981\u8865\u96f6\uff01\uff09\u3002\u54c8\u592b\u66fc\u6811\u7684\u8981\u6c42\u548c\u6784\u9020\u65b9\u5f0f\u548c\u4e8c\u53c9\u5e76\u6ca1\u6709\u4ec0\u4e48\u4e0d\u540c\uff08\u9664\u4e86\u8981\u8865\u96f6\u4e4b\u5916\uff09\u3002 \u4e3a\u4e86\u65b9\u4fbf\uff0c\u8fd9\u9053\u9898\u5e76\u4e0d\u9700\u8981\u4f60\u8f93\u51fa\u5177\u4f53\u7684\u7f16\u7801\uff0c\u53ea\u9700\u8981\u4f60\u8ba1\u7b97\u51fa\u6700\u540e\u7684WPL\uff1d\u2211F[i]\u00d7len[i] \uff08\u5e26\u6743\u8def\u5f84\u957f\u5ea6\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6240\u6709\u7f16\u7801\u7684\u957f\u5ea6\u4e58\u4e0a\u6743\u503c\u3002\uff09\u5373\u53ef\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570N\u3001M\uff0cN\u2264100000\u3002\u8868\u793a\u6570\u636e\u7684\u6570\u91cf\uff0c1<M\u22641000\uff0c\u8868\u793a\u54c8\u592b\u66fc\u6811\u7684\u5206\u53c9\u6570\u3002 \u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c1\u4e2a\u6570\uff0cF[i]\u226410000\uff0c\u8868\u793a\u7b2ci\u4e2a\u6570\u636e\u7684\u6743\u503c\u3002 Output Format \u4e00\u884c, \u4e00\u4e2a\u6574\u6570, \u4ee3\u8868WPL\u7684\u503c\u3002\u4fdd\u8bc1\u7ed3\u679c\u5728long long\u7684\u8303\u56f4\u5185\u3002 Sample Input 4 3 1 2 3 4 Sample Output 13 Sample Explanation \u5148\u8865\uff11\u4e2a\u96f6\u3002 \u54c8\u592b\u66fc\u7f16\u7801\uff1a \uff10\uff1a\uff10\uff10 \uff11\uff1a\uff10\uff11 \uff12\uff1a\uff10\uff12 \uff13\uff1a\uff11 \uff14\uff1a\uff12 Output=1 2+2 2+3 1+4 1=13 Hint \u6709\u65f6\u8981\u8865\u96f6\u3002\u5927\u5bb6\u8fd8\u8bb0\u5f97\u8981\u8865\u51e0\u4e2a\u96f6\u5417\uff1f \u53e6\u5916\uff0c\u8981ac\u6389\uff11\uff10\uff10\uff05\u7684\u6570\u636e\uff0c\u8bf7\u7528\u5806\u4f18\u5316\u5427(\u5176\u5b9e\u5c31\u662f\u4f20\u8bf4\u4e2d\u7684\u4f18\u5148\u7ea7\u961f\u5217)\u53e6\u5916\u4e3a\u4e86\u8868\u793a\u5bf9\u9a86\u6e90\u7684\u5c0a\u656c\uff0c\u4e0d\u5141\u8bb8\u4f7f\u7528\uff33\uff34\uff2c\u54e6^_^\u3002 \u6570\u636e\u8303\u56f4: \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c n <= 1000\u3002\u53e6\u5916\uff0c\u5bf9\u4e8e50%\u7684\u6570\u636e\uff0cm=2\u3002 FineArtz's solution Star /* \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 */ #include <iostream> using namespace std; template <class T> class Heap{ private: T a[200005]; int heapsize = 0; void swap(int x, int y){ T t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i + 1] < a[i]) ++i; if (a[i] < a[i >> 1]){ swap(i, i >> 1); i <<= 1; } else break; } } public: void push(T x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } T top(){ return a[1]; } bool empty(){ return heapsize == 0; } int size(){ return heapsize; } }; int n, m; Heap<long long> heap; long long ans = 0; int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ long long t; cin >> t; heap.push(t); } long long t = n; while (t > m){ t -= m; ++t; } if (t != 0) for (int i = t; i < m; ++i) heap.push(0); while (heap.size() != 1){ long long k = 0; for (int i = 1; i <= m; ++i){ k += heap.top(); heap.pop(); } ans += k; heap.push(k); } cout << ans << endl; return 0; }","title":"3020"},{"location":"nr/3020/#3020","text":"\u9898\u76ee","title":"3020 \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811"},{"location":"nr/3020/#fineartzs-solution-star","text":"/* \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 */ #include <iostream> using namespace std; template <class T> class Heap{ private: T a[200005]; int heapsize = 0; void swap(int x, int y){ T t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i + 1] < a[i]) ++i; if (a[i] < a[i >> 1]){ swap(i, i >> 1); i <<= 1; } else break; } } public: void push(T x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } T top(){ return a[1]; } bool empty(){ return heapsize == 0; } int size(){ return heapsize; } }; int n, m; Heap<long long> heap; long long ans = 0; int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ long long t; cin >> t; heap.push(t); } long long t = n; while (t > m){ t -= m; ++t; } if (t != 0) for (int i = t; i < m; ++i) heap.push(0); while (heap.size() != 1){ long long k = 0; for (int i = 1; i <= m; ++i){ k += heap.top(); heap.pop(); } ans += k; heap.push(k); } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/3030/","text":"3030 mushroom \u9898\u76ee \u3010\u95ee\u9898\u63cf\u8ff0\u3011 \u4ece\u524d\u6709\u5ea7\u5c71\uff0c\u5c71\u4e0a\u6709\u5ea7\u5e99\uff0c\u5e99\u91cc\u6709\u4e2a\u8001\u548c\u5c1a\uff0c\u8001\u548c\u5c1a\u8ba9\u5c0f\u548c\u5c1a\u91c7\u8611\u83c7... \u201c\u91c7\u8611\u83c7\u662f\u4e00\u95e8\u535a\u5927\u7cbe\u6df1\u7684\u5b66\u95ee\u201d\u8001\u548c\u5c1a\u5982\u662f\u8bf4\u3002 \u91c7\u6458\u4e0d\u540c\u7684\u8611\u83c7\uff0c\u9700\u8981\u4e0d\u540c\u7684\u65f6\u95f4\uff1b\u91c7\u96c6\u4e0d\u540c\u7684\u8611\u83c7\uff0c\u6709\u4e0d\u540c\u7684\u4ef7\u503c\u3002 \u5c0f\u548c\u5c1a\u82e6\u607c\u5730\u63c9\u4e86\u63c9\u7709\u5fc3\uff0c\u4ed6\u60f3\u8981\u5728\u89c4\u5b9a\u5730\u65f6\u95f4\u4e2d\uff0c\u91c7\u96c6\u4ef7\u503c\u6700\u5927\u5730\u8611\u83c7\uff0c\u5374\u82e6\u65e0\u826f\u7b56\uff0c \u53ea\u80fd\u6253\u7535\u8bdd\u8be2\u95ee\u6b63\u5728\u5b66\u4e60\u7f16\u7a0b\u7684\u4f60\uff0c\u671f\u671b\u4f60\u80fd\u5e2e\u4ed6\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u3010\u8f93\u5165\u6587\u4ef6\u3011 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570T\uff081 <= T <= 1000\uff09\u548cM\uff081 <= M <= 100\uff09\uff0c\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0cT\u4ee3\u8868\u603b\u5171\u80fd\u591f\u7528\u6765\u91c7\u8611\u83c7\u7684\u65f6\u95f4\uff0cM\u4ee3\u8868\u5c71\u91cc\u7684\u78e8\u83c7\u7684\u6570\u76ee\u3002\u63a5\u4e0b\u6765\u7684M\u884c\u6bcf\u884c\u5305\u62ec\u4e24\u4e2a\u57281\u5230100\u4e4b\u95f4\uff08\u5305\u62ec1\u548c100\uff09\u7684\u6574\u6570\uff0c\u5206\u522b\u8868\u793a\u91c7\u6458\u67d0\u78e8\u83c7\u7684\u65f6\u95f4\u548c\u78e8\u83c7\u7684\u4ef7\u503c\u3002 \u3010\u8f93\u51fa\u6587\u4ef6\u3011 \u8f93\u51fa\u5728\u89c4\u5b9a\u7684\u65f6\u95f4\u5185\uff0c\u53ef\u4ee5\u91c7\u5230\u7684\u78e8\u83c7\u7684\u6700\u5927\u603b\u4ef7\u503c\u3002 \u3010\u6837\u4f8b\u8f93\u5165\u3011 100 4 99 100 101 1 97 3 2 3 \u3010\u6837\u4f8b\u8f93\u51fa\u3011 100 \u3010\u6570\u636e\u89c4\u6a21\u3011 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0cM <= 10\uff1b \u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0cM <= 100\u3002 FineArtz's solution Star /* mushroom */ #include <iostream> using namespace std; int main(){ int f[1005] = {0}; int T, M; cin >> T >> M; int t[105], w[105]; for (int i = 1; i <= M; ++i) cin >> t[i] >> w[i]; for (int i = 1; i <= M; ++i){ for (int j = T; j >= t[i]; --j) f[j] = max(f[j], f[j - t[i]] + w[i]); } cout << f[T] << endl; return 0; }","title":"3030"},{"location":"nr/3030/#3030-mushroom","text":"\u9898\u76ee","title":"3030 mushroom"},{"location":"nr/3030/#fineartzs-solution-star","text":"/* mushroom */ #include <iostream> using namespace std; int main(){ int f[1005] = {0}; int T, M; cin >> T >> M; int t[105], w[105]; for (int i = 1; i <= M; ++i) cin >> t[i] >> w[i]; for (int i = 1; i <= M; ++i){ for (int j = T; j >= t[i]; --j) f[j] = max(f[j], f[j - t[i]] + w[i]); } cout << f[T] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/3031/","text":"3031 \u9732\u5b50\u7684\u91ce\u9910 \u9898\u76ee \u3010\u9898\u76ee\u63cf\u8ff0\u3011 \u4eca\u5929\u662f\u4e2a\u96be\u5f97\u7684\u98ce\u548c\u65e5\u4e3d\u7684\u661f\u671f\u5929\uff0c\u4f60\u73b0\u5728\u8981\u53bb\u548c\u9732\u5b50\u5403\u91ce\u9910\u3002\u4f60\u4eec\u4e00\u5171\u5e26\u4e86n\u888b\u98df\u7269\u51c6\u5907\u4eab\u7528\u3002\u4f46\u662f\u4e0d\u5e78\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff0c\u4f60\u4eec\u5230\u8fbe\u8349\u5730\u65f6\u53d1\u73b0\u6709\u7684\u98df\u7269\u4e0d\u89c1\u4e86\u3002\u4e3a\u4e86\u627e\u51fa\u662f\u54ea\u4e9b\u4e1c\u897f\u4e0d\u89c1\u4e86\uff0c\u4f60\u4eec\u51b3\u5b9a\u901a\u8fc7\u8ba1\u7b97\u6765\u89e3\u51b3\u3002\u9732\u5b50\u544a\u8bc9\u4f60n\u888b\u98df\u7269\u6bcf\u888b\u7684\u91cd\u91cf\uff0c\u4ee5\u53ca\u73b0\u5728\u6240\u6709\u98df\u7269\u7684\u603b\u91cd\u91cf\u3002\u4e3a\u4e86\u80fd\u66f4\u5f00\u5fc3\u5730\u4eab\u53d7\u91ce\u9910\uff0c\u4f60\u638f\u51fa\u4e86\u7535\u8111 \u3010\u8f93\u5165\u683c\u5f0f\u3011 \u7b2c\u4e00\u884c\u6709\u4e00\u4e2a\u6570m\uff0c\u8868\u793a\u5f53\u524d\u6709\u7684\u98df\u7269\u7684\u603b\u91cd\u91cf\u3002 \u7b2c\u4e8c\u884c\u6709\u4e00\u4e2a\u6570n\uff0c\u8868\u793a\u51fa\u95e8\u65f6\u4e00\u5171\u5e26\u4e86n\u888b\u98df\u7269\u3002 \u63a5\u4e0b\u6765\u4e00\u5171\u6709n\u884c\uff0c\u6bcf\u884c\u8868\u793a\u7b2ci\u53f7\u98df\u7269\u7684\u91cd\u91cfMi\u3002 \u3010\u8f93\u51fa\u683c\u5f0f\u3011 \u8f93\u51fa\u4ec5\u5305\u542b\u4e00\u884c\uff1a \u5982\u679c\u65e0\u89e3\uff0c\u8bf7\u8f93\u51fa0\uff1b \u5982\u679c\u6709\u591a\u7ec4\u89e3\uff0c\u8bf7\u8f93\u51fa-1\uff1b \u5426\u5219\uff0c\u8bf7\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u4f9d\u6b21\u8f93\u51fa\u4e22\u5931\u7684\u98df\u7269\u7684\u7f16\u53f7\uff0c\u5b83\u4eec\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002 \u3010\u6837\u4f8b\u8f93\u5165\u3011 500 4 200 400 150 300 \u3010\u6837\u4f8b\u8f93\u51fa\u3011 2 3 \u3010\u6570\u636e\u89c4\u6a21\u3011 1<=n<=100, 1<=Mi<=1000. \u5373\u603b\u888b\u6570\u5c0f\u4e8e\u7b49\u4e8e100\uff0c\u6bcf\u888b\u98df\u7269\u91cd\u91cf\u5c0f\u4e8e\u7b49\u4e8e1000\u3002 \u6bcf\u4e2a\u6d4b\u8bd5\u70b92s\u65f6\u9650\u3002 \u3010\u63d0\u793a\u3011 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u3002 WashSwang's solution Star #include <iostream> using namespace std; int m,n,w[101],dp[101][100001],ans[101],ansn; int main() { cin>>m>>n; for (int i=1;i<=n;++i) { cin>>w[i]; m-=w[i]; } m=-m; dp[0][0]=1; for (int i=1;i<=n;++i) for (int j = m; j >= 0; --j) { dp[i][j] = dp[i - 1][j]; if (j>=w[i]) dp[i][j]+=dp[i - 1][j - w[i]]; } if (dp[n][m]==0) cout<<0<<endl; else if (dp[n][m]>1) cout<<-1<<endl; else{ ansn=0; for (int i=n;i>=1;--i) if (m>=w[i]&&dp[i - 1][m - w[i]]) { ans[ansn++] = i; m-=w[i]; } for (int i=ansn-1;i>=0;--i) cout<<ans[i]<<' '; } return 0; }","title":"3031"},{"location":"nr/3031/#3031","text":"\u9898\u76ee","title":"3031 \u9732\u5b50\u7684\u91ce\u9910"},{"location":"nr/3031/#washswangs-solution-star","text":"#include <iostream> using namespace std; int m,n,w[101],dp[101][100001],ans[101],ansn; int main() { cin>>m>>n; for (int i=1;i<=n;++i) { cin>>w[i]; m-=w[i]; } m=-m; dp[0][0]=1; for (int i=1;i<=n;++i) for (int j = m; j >= 0; --j) { dp[i][j] = dp[i - 1][j]; if (j>=w[i]) dp[i][j]+=dp[i - 1][j - w[i]]; } if (dp[n][m]==0) cout<<0<<endl; else if (dp[n][m]>1) cout<<-1<<endl; else{ ansn=0; for (int i=n;i>=1;--i) if (m>=w[i]&&dp[i - 1][m - w[i]]) { ans[ansn++] = i; m-=w[i]; } for (int i=ansn-1;i>=0;--i) cout<<ans[i]<<' '; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/3034/","text":"3034 Gap \u9898\u76ee Description \u5c0f s \u5bf9\u7d20\u6570\u7684\u7814\u7a76\u6162\u6162\u671d\u7740\u7089\u706b\u7eaf\u9752\u7684\u5730\u6b65\u53d1\u5c55,\u5728\u7814\u7a76\u5b8c\u7d20\u6570\u672c\u8eab\u4e4b\u540e,\u5c0f s \u5f00\u59cb\u7814\u7a76\u8d77\u4e86\u7d20\u6570\u4e4b\u95f4 \u7684 gap\u3002\u5bf9\u4e8e\u7d20\u6570 2,3,5,7,11,13,17,\u7d20\u6570\u4e4b\u95f4\u7684\u95f4\u8ddd\u5206\u522b\u4e3a 1,2,2,4,2,4\u3002\u6bcf\u4e2a\u5408\u6570\u90fd \u5904\u4e8e\u67d0\u4e00\u4e2a\u7d20\u6570 gap \u4e2d,\u6bd4\u5982\u5408\u6570 15 \u5904\u4e8e\u95f4\u8ddd\u4e3a 4 \u7684\u7d20\u6570 gap\u3002\u73b0\u5728\u5c0f s \u60f3\u77e5\u9053,\u5bf9\u4e8e\u4e00\u4e2a\u6b63\u6574\u6570 N, \u5b83\u5904\u4e8e\u7684\u7d20\u6570 gap \u7684\u95f4\u8ddd\u662f\u591a\u5c11\u3002 Input Format \u4e00\u884c,\u4e00\u4e2a\u6b63\u6574\u6570 N Output Format \u4e00\u884c,\u4e00\u4e2a\u6574\u6570 K,\u8868\u793a N \u6240\u5728\u7684\u7d20\u6570 gap \u7684\u95f4\u8ddd\u3002\u82e5 N \u672c\u8eab\u4e3a\u4e00\u4e2a\u7d20\u6570,\u8f93\u51fa 0 Sample Input 1 10 Sample Output 1 4 Sample Input 2 11 Sample Output 2 0 About Testdata 20% 2<=N<=100 40% 2<=N<=1000 100% 2<=N<=1,000,000 Limits Time limit: 1000ms, memory limit: 50000kb. FineArtz's solution Star /* Gap */ #include <iostream> #include <cmath> using namespace std; bool isp(const int &x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int LowerBound = n, UpperBound = n; while (!isp(LowerBound)) --LowerBound; while (!isp(UpperBound)) ++UpperBound; cout << UpperBound - LowerBound << endl; return 0; } vvvvv1v's solution Star #include <iostream> #include <cmath> using namespace std; bool isPrimeNum(int n) { bool flag = true; for (int i = 2; i <= int(sqrt(n)); ++i) { if (!(n % i)) { flag = false; break; } } return flag; } int main() { int N, minN, maxN; cin >> N; for (int i = N; i >= 2; --i) { if (isPrimeNum(i)) { minN = i; break; } } for (int i = N; ; ++i) { if (isPrimeNum(i)) { maxN = i; break; } } cout << maxN - minN; return 0; }","title":"3034"},{"location":"nr/3034/#3034-gap","text":"\u9898\u76ee","title":"3034 Gap"},{"location":"nr/3034/#fineartzs-solution-star","text":"/* Gap */ #include <iostream> #include <cmath> using namespace std; bool isp(const int &x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int LowerBound = n, UpperBound = n; while (!isp(LowerBound)) --LowerBound; while (!isp(UpperBound)) ++UpperBound; cout << UpperBound - LowerBound << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/3034/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cmath> using namespace std; bool isPrimeNum(int n) { bool flag = true; for (int i = 2; i <= int(sqrt(n)); ++i) { if (!(n % i)) { flag = false; break; } } return flag; } int main() { int N, minN, maxN; cin >> N; for (int i = N; i >= 2; --i) { if (isPrimeNum(i)) { minN = i; break; } } for (int i = N; ; ++i) { if (isPrimeNum(i)) { maxN = i; break; } } cout << maxN - minN; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/3044/","text":"3044 palin \u9898\u76ee Description \u5927\u5bb6\u90fd\u77e5\u9053\u56de\u6587\u4e32\u5427~ \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u5de6\u53f3\u5bf9\u79f0\u7684\u4e00\u4e2a\u4e32,\u6bd4\u5982 abcba,werrew\u3002\u5c0f s \u5bf9\u56de\u6587\u4e32\u7684\u7814\u7a76\u5df2 \u7ecf\u591f\u6df1\u523b\u4e86,\u73b0\u5728\u5979\u8f6c\u800c\u7814\u7a76\u5176\u4ed6\u65b9\u9762\u7684\u56de\u6587,\u6bd4\u5982,\u6570\u7684\u56de\u6587\u62c6\u5206\u3002\u5bf9\u4e8e\u81ea\u7136\u6570\u7684\u62c6\u5206,\u5c31\u662f\u628a\u4e00\u4e2a \u81ea\u7136\u6570 N \u7528\u82e5\u5e72\u4e2a\u6574\u6570\u4e4b\u548c\u8868\u793a\u3002\u6bd4\u5982 15=1+2+3+4+5=1+2+1+7+1+2+1\u3002\u90a3\u4e48\u600e\u6837\u7684\u62c6\u5206\u624d\u7b97\u662f\u56de\u6587\u7684 \u5462?\u6211\u4eec\u7528\u4ece\u5f52\u7eb3\u7684\u89d2\u5ea6\u6765\u5b9a\u4e49\u6570\u7684\u56de\u6587\u62c6\u5206\u3002\u9996\u5148\u4e00\u4e2a\u6570 A=A \u662f\u4e00\u4e2a\u56de\u6587\u62c6\u5206\u3002\u5176\u6b21,\u4e00\u4e2a\u81ea\u7136\u6570 N=A+A \u6216\u662f N=A+x+A,\u5176\u4e2d A \u662f\u4e00\u4e2a\u56de\u6587\u62c6\u5206,x \u662f\u4efb\u610f\u4e00\u4e2a\u81ea\u7136\u6570,\u8fd9\u4e24\u79cd\u4e5f\u662f\u56de\u6587\u62c6\u5206\u3002\u4e3e\u4e2a\u4f8b\u5b50, 7 \u7684\u6240\u6709\u56de\u6587\u62c6\u5206\u6709 7,1+5+1,2+3+2,1+1+3+1+1,3+1+3,1+1+1+1+1+1+1\u3002\u73b0\u5728\u5c0f s \u60f3\u77e5\u9053,\u4e00\u4e2a\u6b63\u6574\u6570 N \u7684\u56de\u6587\u62c6\u5206\u5230\u5e95\u6709\u591a\u5c11\u79cd\u3002\u7531\u4e8e\u8fd9\u4e2a\u6570\u5b57\u53ef\u80fd\u5f88\u5927,\u5c0f s \u53ea\u9700\u8981\u4f60\u544a\u8bc9\u5979\u7b54\u6848 mod 1,000,000,007 \u7684 \u503c\u3002 Input Format \u4e00\u884c,\u4e00\u4e2a\u6b63\u6574\u6570 N Output Format \u4e00\u884c,\u4e00\u4e2a\u6574\u6570 M,\u4e3a N \u7684\u56de\u6587\u62c6\u5206\u6570 mod 1,000,000,007 \u7684\u503c Sample Input 20 Sample Output 60 Hints \u5c1d\u8bd5\u627e\u89c4\u5f8b\u6216\u8005\u9012\u63a8\u3001\u9012\u5f52\u89e3\u51b3\u95ee\u9898 About Testdata 30% 1<=N<=20 100% 1<=N<=1000 Limits Time limit: 1000ms, memory limit: 50000kb. FineArtz's solution Star /* palin */ #include <iostream> using namespace std; const long long MOD = 1000000007; long long f[1005] = {0}; int main(){ int n; cin >> n; f[1] = 1; for (int i = 2; i <= n; ++i){ if (i % 2 == 0){ f[i] = (1 + f[i / 2]) % MOD; for (int j = 2; j < i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } else{ f[i] = 1; for (int j = 1; j <= i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } } cout << f[n] << endl; return 0; }","title":"3044"},{"location":"nr/3044/#3044-palin","text":"\u9898\u76ee","title":"3044 palin"},{"location":"nr/3044/#fineartzs-solution-star","text":"/* palin */ #include <iostream> using namespace std; const long long MOD = 1000000007; long long f[1005] = {0}; int main(){ int n; cin >> n; f[1] = 1; for (int i = 2; i <= n; ++i){ if (i % 2 == 0){ f[i] = (1 + f[i / 2]) % MOD; for (int j = 2; j < i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } else{ f[i] = 1; for (int j = 1; j <= i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } } cout << f[n] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/3045/","text":"3045 \u5927\u9c7c \u9898\u76ee Description cnx\u6700\u8fd1\u53d1\u73b0\u4e86\u4e00\u79cd\u5947\u602a\u7684\u9c7c\uff0c\u4ed6\u6709\u7740\u5947\u602a\u7684\u653b\u51fb\u65b9\u5f0f\uff0c\u4f8b\u5982\u5982\u679c\u6709\u4e00\u6761\u9c7c\u4f4d\u4e8e\\((x_1,y_1)\\)\uff0c\u5b83\u80fd\u653b\u51fb\u5230\u6240\u6709\u6ee1\u8db3\\( (x-x_1)^2+(y-y_1)^2 \\leq r^2 \\)\u7684\u6240\u6709\\((x,y)\\)\uff0c\u5176\u4e2dr\u662f\u8fd9\u6761\u9c7c\u7684\u653b\u51fb\u8ddd\u79bb\u3002\u4f5c\u4e3a\u4e00\u53ea\u751f\u547d\u503c\u53ea\u67091\u7684\u6e23\u6e23\uff0ccnx\u60f3\u95ee\u4e00\u4e0b\u5730\u56fe\u4e0a\u54ea\u4e9b\u5730\u65b9\u662f\u4e0d\u5b89\u5168\u7684\uff08\u80fd\u88ab\u67d0\u6761\u9c7c\u653b\u51fb\u5230\uff09\u3002 Input Format \u7b2c\u4e00\u884c\u4e09\u4e2a\u6570\uff0cn\u3001m\u3001k\u5206\u522b\u4ee3\u8868\u5730\u56fe\u957f\u3001\u5bbd\uff0c\u4ee5\u53ca\u73b0\u5728\u6709\u591a\u5c11\u6761\u9c7c\u3002 \u63a5\u4e0b\u6765\u6bcf\u4e00\u884c\u63cf\u8ff0\u4e00\u6761\u9c7c\uff0c(x,y,r)\u5206\u522b\u4ee3\u8868\u6240\u5904\u4f4d\u7f6e\u4ee5\u53ca\u653b\u51fb\u8ddd\u79bb\u3002\u5176\u4e2d 1<=x<=n,1<=y<=m \u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6570\u4ee3\u8868\u6709\u591a\u5c11\u4e2a\u683c\u5b50\u4e0d\u5b89\u5168\u3002 Sample Input 3 3 1 2 2 1 Sample Output 5 About Testdata 60% 1<=n<=100 100% 1<=n<=1,000, 1<=k<=5000 Limits Time limit: 1000ms, memory limit: 50000kb. FineArtz's solution Star /* \u5927\u9c7c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Fish{ public: //constructor Fish() : x(0), y(0), r(0) {}; Fish(const Fish& f) : x(f.x), y(f.y), r(f.r) {}; Fish(const int &xx, const int &yy, const int &rr) : x(xx), y(yy), r(rr) {}; int x, y, r; }; inline bool cmp(const Fish &f1, const Fish &f2){ if (f1.y < f2.y) return true; if (f1.y == f2.y && f1.x < f2.x) return true; return false; } int unsafe[1005] = {0}; int ans = 0; Fish fish[5005]; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool comp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n, m, k; cin >> n >> m >> k; for (int i = 0; i < k; ++i){ cin >> fish[i].x >> fish[i].y >> fish[i].r; } sort(fish, fish + k, cmp); for (int i = 1; i <= n; ++i){ Interval f[5005]; int cnt = 0; for (int j = 0; j < k; ++j){ if (abs(fish[j].x - i) > fish[j].r) continue; int dy = trunc(sqrt(fish[j].r * fish[j].r - (i - fish[j].x) * (i - fish[j].x))); f[cnt].l = max(1, fish[j].y - dy); f[cnt].r = min(m, fish[j].y + dy); ++cnt; } if (cnt == 0) continue; sort(f, f + cnt, comp); int nowl = f[0].l, nowr = f[0].r; for (int j = 1; j < cnt; ++j){ if (nowl <= f[j].l && f[j].l <= nowr){ if (nowr < f[j].r) nowr = f[j].r; } else{ ans += nowr - nowl + 1; nowl = f[j].l; nowr = f[j].r; } } ans += nowr - nowl + 1; } cout << ans << endl; return 0; }","title":"3045"},{"location":"nr/3045/#3045","text":"\u9898\u76ee","title":"3045 \u5927\u9c7c"},{"location":"nr/3045/#fineartzs-solution-star","text":"/* \u5927\u9c7c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Fish{ public: //constructor Fish() : x(0), y(0), r(0) {}; Fish(const Fish& f) : x(f.x), y(f.y), r(f.r) {}; Fish(const int &xx, const int &yy, const int &rr) : x(xx), y(yy), r(rr) {}; int x, y, r; }; inline bool cmp(const Fish &f1, const Fish &f2){ if (f1.y < f2.y) return true; if (f1.y == f2.y && f1.x < f2.x) return true; return false; } int unsafe[1005] = {0}; int ans = 0; Fish fish[5005]; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool comp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n, m, k; cin >> n >> m >> k; for (int i = 0; i < k; ++i){ cin >> fish[i].x >> fish[i].y >> fish[i].r; } sort(fish, fish + k, cmp); for (int i = 1; i <= n; ++i){ Interval f[5005]; int cnt = 0; for (int j = 0; j < k; ++j){ if (abs(fish[j].x - i) > fish[j].r) continue; int dy = trunc(sqrt(fish[j].r * fish[j].r - (i - fish[j].x) * (i - fish[j].x))); f[cnt].l = max(1, fish[j].y - dy); f[cnt].r = min(m, fish[j].y + dy); ++cnt; } if (cnt == 0) continue; sort(f, f + cnt, comp); int nowl = f[0].l, nowr = f[0].r; for (int j = 1; j < cnt; ++j){ if (nowl <= f[j].l && f[j].l <= nowr){ if (nowr < f[j].r) nowr = f[j].r; } else{ ans += nowr - nowl + 1; nowl = f[j].l; nowr = f[j].r; } } ans += nowr - nowl + 1; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4003/","text":"4003 GetMinBottle \u9898\u76ee getMinBottles Description \u4f60\u6709n\u4e2a\u521d\u59cb\u88c5\u6c341L\u7684\u74f6\u5b50\u3002\u4f60\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5305\u542b\u540c\u6837\u591a\u6c34\u7684\u74f6\u5b50\u5408\u5e76\u4e3a\u4e00\u4e2a\u74f6\u5b50\uff0c\u6c34\u91cf\u4e3a\u4e24\u4e2a\u74f6\u5b50\u7684\u548c\u3002 \u6211\u5e0c\u671b\u6700\u7ec8\u5269\u4e0bk\u4e2a\u74f6\u5b50\uff0c\u4f46\u8fd9\u53ef\u80fd\u662f\u65e0\u6cd5\u505a\u5230\u7684\u3002 \u4f46\u4f60\u8fd8\u53ef\u4ee5\u8d2d\u8fdb\u82e5\u5e72\u4e2a\u521d\u59cb\u88c5\u6c341L\u7684\u74f6\u5b50\uff0c\u8fd9\u6837\u5c31\u80fd\u901a\u8fc7\u4e0a\u9762\u7684\u64cd\u4f5c\u8fbe\u5230\u8981\u6c42\u3002 \u8bd5\u95ee\uff0c\u6700\u5c11\u9700\u8981\u8d2d\u8fdb\u591a\u5c11\u4e2a\u74f6\u5b50\u3002 Input Format \u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570n,k (n<=100000000, k<=1000, 30%\u6570\u636ek=1) Output Format \u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c11\u9700\u8981\u8d2d\u8fdb\u591a\u5c11\u4e2a\u74f6\u5b50\u6570 Sample Input 4 1 Sample Output 0 WashSwang's solution Star #include <iostream> using namespace std; int n,k,one,e,t,m,ans; int main() { cin>>n>>k; m=n; if (n<k) {cout<<k-n; return 0;} for (;m>0;m>>=1) if (m&1) one++; if (k>=one) {cout<<0; return 0;} for (e=1;t<=one-k;n>>=1,e<<=1){ if (n&1) t+=1; else ans+=e; } cout<<ans+1; return 0; }","title":"4003"},{"location":"nr/4003/#4003-getminbottle","text":"\u9898\u76ee","title":"4003 GetMinBottle"},{"location":"nr/4003/#washswangs-solution-star","text":"#include <iostream> using namespace std; int n,k,one,e,t,m,ans; int main() { cin>>n>>k; m=n; if (n<k) {cout<<k-n; return 0;} for (;m>0;m>>=1) if (m&1) one++; if (k>=one) {cout<<0; return 0;} for (e=1;t<=one-k;n>>=1,e<<=1){ if (n&1) t+=1; else ans+=e; } cout<<ans+1; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4009/","text":"4009 \u6b65\u6b65\u4e3a\u8d62 \u9898\u76ee Description \u4e01\u59d0\u8d77\u5e8a\u4ee5\u540e\u624d\u60f3\u8d77\u6765\u4eca\u5929\u8981\u53bb\u53c2\u52a0\u6b65\u6b65\u4e3a\u8d62\u6bd4\u8d5b\u7b2c\u4e8c\u8f6e\uff0c\u5979\u6253\u5f00\u6bd4\u8d5b\u9898\u76ee\u4e00\u770b\u53d1\u73b0\u4e00\u5927\u5768\u82f1\u6587\u5bc6\u7801alsdifnpqwoienfskdanfpad...... \u4e01\u59d0\u548c\u5b66\u79d1\u90e8\u7684\u67d0\u4e2a\u5c0f\u76c6\u53cb\u5173\u7cfb\u4e0d\u9519\uff0c\u6240\u4ee5\u95ee\u4ed6\u8981\u5230\u4e86\u7b54\u6848\u548c\u52a0\u5bc6\u7684\u65b9\u6cd5\uff0c\u52a0\u5bc6\u65b9\u5f0f\u5982\u4e0b\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bf9\u957f\u5ea6\u4e3al\u7684\u660e\u6587\uff0c\u53d6\u5b83\u7684\u67d0\u4e2a\u7ea6\u6570a\uff0c\u5c06\u660e\u6587\u5212\u5206\u6210l/a\u6bb5 \u7b2c\u4e8c\u6b65\uff1a\u5c06\u6bcf\u4e00\u6bb5\u7684\u7b2ci\u4e2a\u5b57\u8fde\u5728\u4e00\u8d77\uff0c\u5f97\u5230a\u6bb5\u5bc6\u6587 \u7b2c\u4e09\u6b65\uff1a\u6309\u987a\u5e8f\u5c06a\u6bb5\u5bc6\u6587\u62fc\u63a5\u5728\u4e00\u8d77\uff0c\u5f97\u5230\u5b8c\u6574\u5bc6\u6587 \u4f8b\u5b50\uff1a \u660e\u6587\uff1aTHISISAWATERQUESTION \u53d6a=4\uff0c\u5206\u5272\u4e3a\uff1aTHIS ISAW ATER QUES TION \u6bcf\u6bb5\u7b2ci\u4e2a\u5b57\u6bcd\u76f8\u8fde\uff0c\u5f97\u52304\u6bb5\u5bc6\u6587\uff1aTIAQT HSTUI IAEEO SWRSN \u8fde\u63a5\u5bc6\u6587\uff1aTIAQTHSTUIIAEEOSWRSN \u8bdd\u8bf4\u867d\u7136\u4e01\u59d0\u5df2\u7ecf\u6709\u4e86\u7b54\u6848\uff0c\u4f46\u662f\u5979\u4e0d\u80fd\u786e\u5b9a\u5c0f\u76c6\u53cb\u7ed9\u5979\u7684\u7b54\u6848\u662f\u4e0d\u662f\u5bf9\u7684\uff0c\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417\uff1f Input Format \u7b2c\u4e00\u884c\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u660e\u6587 \u7b2c\u4e8c\u884c\uff1a\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee3\u8868\u5bc6\u6587 \u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u8d85\u8fc7100 Output Format \u5982\u679c\u5b58\u5728\u67d0\u4e2aa(2<=a<=l)\u4f7f\u5f97\u5bc6\u6587\u80fd\u591f\u89e3\u5bc6\u4e3a\u660e\u6587\uff0c\u8f93\u51faa\u3002\u5982\u679c\u6709\u591a\u4e2aa\u6ee1\u8db3\u6761\u4ef6\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u90a3\u4e2a\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684a\uff0c\u8f93\u51fa\"No Solution\"(\u4e0d\u8ba1\u5f15\u53f7) Sample Input THISISAWATERQUESTION TIAQTHSTUIIAEEOSWRSN Sample Output 4 VictriD's solution Star #include <iostream> #include <cstring> using namespace std; inline int div(int length, int index, int division) { return (index * (length / division) % (length - 1) + (length - 1)*(index == length - 1)); } int main() { char cp[100]; char ck[100]; cin.getline(ck, 100); cin.getline(cp, 100); short int size = strlen(cp); if (cp[0] != ck[0] || size != strlen(ck)) { cout << \"No Solution\"; return 0; } for (int i = size / 2; i >= 1; i--) { if (cp[i] == ck[1] && !(size % i)) { for (int j = 2; j < size; j++) { if (cp[div(size, j, size / i)] != ck[j]) goto z; } cout << size / i; return 0; } z:; } cout << \"No Solution\"; return 0; } FineArtz's solution Star /* \u6b65\u6b65\u4e3a\u8d62 */ #include <iostream> #include <string> #include <cmath> using namespace std; bool devide(const string &s, const string &t, const int &x){ string tmp = \"\"; int len = s.size(); for (int j = 0; j < x; ++j){ for (int i = 0; i < len / x; ++i){ tmp += s[i * x + j]; } } if (tmp == t) return true; else return false; } int main(){ string s, t; cin >> s >> t; int len = s.size(); for (int i = 2; i <= len; ++i){ if (len % i == 0){ bool flag = devide(s, t, i); if (flag){ cout << i << endl; return 0; } } } cout << \"No Solution\" << endl; return 0; }","title":"4009"},{"location":"nr/4009/#4009","text":"\u9898\u76ee","title":"4009 \u6b65\u6b65\u4e3a\u8d62"},{"location":"nr/4009/#victrids-solution-star","text":"#include <iostream> #include <cstring> using namespace std; inline int div(int length, int index, int division) { return (index * (length / division) % (length - 1) + (length - 1)*(index == length - 1)); } int main() { char cp[100]; char ck[100]; cin.getline(ck, 100); cin.getline(cp, 100); short int size = strlen(cp); if (cp[0] != ck[0] || size != strlen(ck)) { cout << \"No Solution\"; return 0; } for (int i = size / 2; i >= 1; i--) { if (cp[i] == ck[1] && !(size % i)) { for (int j = 2; j < size; j++) { if (cp[div(size, j, size / i)] != ck[j]) goto z; } cout << size / i; return 0; } z:; } cout << \"No Solution\"; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4009/#fineartzs-solution-star","text":"/* \u6b65\u6b65\u4e3a\u8d62 */ #include <iostream> #include <string> #include <cmath> using namespace std; bool devide(const string &s, const string &t, const int &x){ string tmp = \"\"; int len = s.size(); for (int j = 0; j < x; ++j){ for (int i = 0; i < len / x; ++i){ tmp += s[i * x + j]; } } if (tmp == t) return true; else return false; } int main(){ string s, t; cin >> s >> t; int len = s.size(); for (int i = 2; i <= len; ++i){ if (len % i == 0){ bool flag = devide(s, t, i); if (flag){ cout << i << endl; return 0; } } } cout << \"No Solution\" << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4011/","text":"4011 k\u6811 \u9898\u76ee Description \u4e01\u59d0\u5728\u5e7c\u513f\u56ed\u91cc\u53d1\u73b0\u4e86\u4e00\u9897\u5947\u602a\u7684\u6811\uff0c\u5979\u89c9\u5f97\u81ea\u5df1\u53d1\u73b0\u4e86\u4e00\u4e2a\u4f1f\u5927\u7684\u65b0\u7269\u79cd\u5e76\u7ed9\u5b83\u53d6\u540d\u53ebk\u6811\u3002k\u6811\u6ee1\u8db3\u5982\u4e0b\u6027\u8d28\uff1a \u6839\u8282\u70b9\u81f3\u591a\u53ef\u4ee5\u957f\u51fak\u4e2a\u5b50\u8282\u70b9 \u6bcf\u4e2a\u8282\u70b9\u7684\u7b2ci\u4e2a\u5b50\u8282\u70b9(i=0,1,2...k-1)\u4e0a\u81f3\u591a\u53ef\u4ee5\u957f\u51fak-i\u4e2a\u5b50\u8282\u70b9 \u4e01\u59d0\u60f3\u77e5\u9053\uff0c\u5f53\u8fd9\u68f5\u6811\u957f\u5230h(h>1\uff0c\u6839\u8282\u70b9\u8bb0\u505a\u7b2c\u4e00\u5c42)\u5c42\u90a3\u4e48\u9ad8\u7684\u65f6\u5019\uff0c\u6811\u4e0a\u81f3\u591a\u53ef\u4ee5\u6709\u591a\u5c11\u7247\u53f6\u5b50\u3002 Input Format \u4e24\u4e2a\u6574\u6570 k h 50%\u6570\u636e: \\(2 \\leq k \\leq 10 , 2 \\leq h \\leq 10 \\) 80%\u6570\u636e: \\(2 \\leq k \\leq 20 , 2 \\leq h \\leq 20 \\) 100%\u6570\u636e: \\(2 \\leq k \\leq 50 , 2 \\leq h \\leq 50 \\) Output Format \u6700\u5927\u53f6\u5b50\u6570 Sample Input 3 3 Sample Output 6 Limits \u65f6\u95f4\u9650\u5236\uff1a1000ms WashSwang's solution Star #include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Same as 4152 class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; longint x[51][51]; int h,k; int main() { cin>>k>>h; for (int i=0;i<=k-1;++i) x[1][i]=k-i; for (int i=2;i<=h-1;++i){ for (int j=0;j<=k-1;++j) for (int l=0;l<k-j;++l) x[i][j]=x[i][j]+x[i-1][l]; } cout<<x[h-1][0]; }","title":"4011"},{"location":"nr/4011/#4011-k","text":"\u9898\u76ee","title":"4011 k\u6811"},{"location":"nr/4011/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Same as 4152 class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; longint x[51][51]; int h,k; int main() { cin>>k>>h; for (int i=0;i<=k-1;++i) x[1][i]=k-i; for (int i=2;i<=h-1;++i){ for (int j=0;j<=k-1;++j) for (int l=0;l<k-j;++l) x[i][j]=x[i][j]+x[i-1][l]; } cout<<x[h-1][0]; }","title":"WashSwang's solution Star"},{"location":"nr/4012/","text":"4012 \u5408\u5e76\u679c\u5b50 \u9898\u76ee Description \u5728\u4e00\u4e2a\u679c\u56ed\u91cc\uff0c\u591a\u591a\u5df2\u7ecf\u5c06\u6240\u6709\u7684\u679c\u5b50\u6253\u4e86\u4e0b\u6765\uff0c\u800c\u4e14\u6309\u679c\u5b50\u7684\u4e0d\u540c\u79cd\u7c7b\u5206\u6210\u4e86\u4e0d\u540c\u7684\u5806\u3002\u591a\u591a\u51b3\u5b9a\u628a\u6240\u6709\u7684\u679c\u5b50\u5408\u6210\u4e00\u5806\u3002 \u6bcf\u4e00\u6b21\u5408\u5e76\uff0c\u591a\u591a\u53ef\u4ee5\u628a\u4e24\u5806\u679c\u5b50\u5408\u5e76\u5230\u4e00\u8d77\uff0c\u6d88\u8017\u7684\u4f53\u529b\u7b49\u4e8e\u4e24\u5806\u679c\u5b50\u7684\u91cd\u91cf\u4e4b\u548c\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u6240\u6709\u7684\u679c\u5b50\u7ecf\u8fc7n-1\u6b21\u5408\u5e76\u4e4b\u540e\uff0c\u5c31\u53ea\u5269\u4e0b\u4e00\u5806\u4e86\u3002\u591a\u591a\u5728\u5408\u5e76\u679c\u5b50\u65f6\u603b\u5171\u6d88\u8017\u7684\u4f53\u529b\u7b49\u4e8e\u6bcf\u6b21\u5408\u5e76\u6240\u8017\u4f53\u529b\u4e4b\u548c\u3002 \u56e0\u4e3a\u8fd8\u8981\u82b1\u5927\u529b\u6c14\u628a\u8fd9\u4e9b\u679c\u5b50\u642c\u56de\u5bb6\uff0c\u6240\u4ee5\u591a\u591a\u5728\u5408\u5e76\u679c\u5b50\u65f6\u8981\u5c3d\u53ef\u80fd\u5730\u8282\u7701\u4f53\u529b\u3002\u5047\u5b9a\u6bcf\u4e2a\u679c\u5b50\u91cd\u91cf\u90fd\u4e3a1\uff0c\u5e76\u4e14\u5df2\u77e5\u679c\u5b50\u7684\u79cd\u7c7b\u6570\u548c\u6bcf\u79cd\u679c\u5b50\u7684\u6570\u76ee\uff0c\u4f60\u7684\u4efb\u52a1\u662f\u8bbe\u8ba1\u51fa\u5408\u5e76\u7684\u6b21\u5e8f\u65b9\u6848\uff0c\u4f7f\u591a\u591a\u8017\u8d39\u7684\u4f53\u529b\u6700\u5c11\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5c0f\u7684\u4f53\u529b\u8017\u8d39\u503c\u3002 \u4f8b\u5982\u67093\u79cd\u679c\u5b50\uff0c\u6570\u76ee\u4f9d\u6b21\u4e3a1\uff0c2\uff0c9\u3002\u53ef\u4ee5\u5148\u5c061\u30012\u5806\u5408\u5e76\uff0c\u65b0\u5806\u6570\u76ee\u4e3a3\uff0c\u8017\u8d39\u4f53\u529b\u4e3a3\u3002\u63a5\u7740\uff0c\u5c06\u65b0\u5806\u4e0e\u539f\u5148\u7684\u7b2c\u4e09\u5806\u5408\u5e76\uff0c\u53c8\u5f97\u5230\u65b0\u7684\u5806\uff0c\u6570\u76ee\u4e3a12\uff0c\u8017\u8d39\u4f53\u529b\u4e3a12\u3002\u6240\u4ee5\u591a\u591a\u603b\u5171\u8017\u8d39\u4f53\u529b=3+12=15\u3002\u53ef\u4ee5\u8bc1\u660e15\u4e3a\u6700\u5c0f\u7684\u4f53\u529b\u8017\u8d39\u503c\u3002 Input Format \u4e00\u5171\u4e24\u884c: \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570n(1<\uff1dn<=10000)\uff0c\u8868\u793a\u679c\u5b50\u7684\u79cd\u7c7b\u6570\u3002 \u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u5206\u9694\uff0c\u7b2ci\u4e2a\u6574\u6570ai(1<\uff1dai<=20000)\u662f\u7b2ci\u79cd\u679c\u5b50\u7684\u6570\u76ee\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u4e5f\u5c31\u662f\u6700\u5c0f\u7684\u4f53\u529b\u8017\u8d39\u503c\u3002\u8f93\u5165\u6570\u636e\u4fdd\u8bc1\u8fd9\u4e2a\u503c\u5c0f\u4e8e2^31\u3002 Sample Input 3 1 2 9 Sample Output 15 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e30\uff05\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6709n<=1000\uff1a \u5bf9\u4e8e50\uff05\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6709n<=5000\uff1b \u5bf9\u4e8e\u5168\u90e8\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u6709n<=10000\u3002 Limits \u65f6\u95f4\u9650\u5236\uff1a1000ms WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"4012"},{"location":"nr/4012/#4012","text":"\u9898\u76ee","title":"4012 \u5408\u5e76\u679c\u5b50"},{"location":"nr/4012/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4016/","text":"4016 24\u70b9\u6e38\u620f \u9898\u76ee Description 24\u70b9\u6e38\u620f\u662f\u4e00\u4e2a\u975e\u5e38\u6709\u610f\u601d\u7684\u6e38\u620f\uff0c\u5f88\u6d41\u884c\uff0c\u73a9\u6cd5\u5f88\u7b80\u5355\uff1a\u7ed9\u4f60 4\u5f20\u724c\uff0c\u6bcf\u5f20\u724c\u4e0a\u6709\u6570\u5b57\uff08\u5176\u4e2dA \u4ee3\u88681\uff0cJ \u4ee3\u886811\uff0cQ \u4ee3\u8868 12\uff0cK\u4ee3\u886813\uff09\uff0c\u4f60\u53ef\u4ee5\u5229\u7528\u6570\u5b66\u4e2d\u7684\u52a0\u3001\u51cf\u3001\u4e58\u3001\u9664\u4ee5\u53ca\u62ec\u53f7\u60f3\u529e\u6cd5\u5f97\u523024\u3002\u4f8b\u5982\uff1a((A K)-J) Q \u7b49\u4ef7\u4e8e((1 13)-11) 12=24\u3002 \u52a0\u51cf\u4e58\u4e0d\u7528\u591a\u8bf4\u4e86\uff0c\u4f46\u9664\u6cd5\u5fc5\u987b\u6ee1\u8db3\u80fd\u6574\u9664\u624d\u80fd\u9664\uff01\u8fd9\u6837\u6709\u4e00\u4e9b\u662f\u5f97\u4e0d\u5230 24 \u70b9\u7684\uff0c\u6240\u4ee5\u8fd9\u91cc\u53ea\u8981\u6c42\u6c42\u51fa\u4e0d\u8d85\u8fc724\u7684\u6700\u5927\u503c\u3002 Input Format \u8f93\u5165\u7b2c\u4e00\u884c N (1<=N<=5)\uff0c\u8868\u793a\u6709 N \u7ec4\u6d4b\u8bd5\u6570\u636e\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51654\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6574\u6570 (1 \u5230 13) \u8868\u793a\u724c\u503c\u3002 Output Format \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u8f93\u51fa\u4e00\u884c\u4ec5\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u7684\u4e0d\u8d85\u8fc724\u7684\u503c\u3002 Sample Input 3 3 3 3 3 1 1 1 1 12 5 13 1 Sample Output 24 4 21 VictriD's solution Star #include <iostream> //! Ugly using namespace std; int maxnum = -1000; int inline maxi(int a, int b) { return a > b ? a : b; } int inline mini(int a) { return a <= 24 ? a : -1000; } int polirovat(int a, int b, int calctype) { switch (calctype) { case 0: return a + b; case 1: return a - b; case 2: return a * b; case 3: return a / b; case 4: return b - a; case 5: return b / a; } return 0; } int summation(int c1) { maxnum = maxi(mini(c1), maxnum); return maxnum; } int maxa(int c1, int c2) { for (int i = 0; i < 6; i++) if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(polirovat(c1, c2, i)); return maxnum; } int maxa(int c1, int c2, int c3) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1)); } return maxnum; } int maxa(int c1, int c2, int c3, int c4) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1, c4)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c1 % c4))) || (c1 != 0 && i == 5 && (!(c4 % c1)))) summation(maxa(polirovat(c1, c4, i), c3, c2)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) summation(maxa(polirovat(c2, c4, i), c1, c3)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c3 % c4))) || (c3 != 0 && i == 5 && (!(c4 % c3)))) summation(maxa(polirovat(c3, c4, i), c1, c2)); for (int j = 0; j < 6; j++) { if (((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c3 % c4))) || (c3 != 0 && j == 5 && (!(c4 % c3))))) summation(maxa(polirovat(c1, c2, i), polirovat(c3, c4, j))); if (((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c1 % c4))) || (c1 != 0 && j == 5 && (!(c4 % c1))))) summation(maxa(polirovat(c2, c3, i), polirovat(c1, c4, j))); if (((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) && ((j != 3 && j != 5) || (c3 != 0 && j == 3 && (!(c1 % c3))) || (c1 != 0 && j == 5 && (!(c3 % c1))))) summation(maxa(polirovat(c2, c4, i), polirovat(c1, c3, j))); } } return maxnum; } int main() { int N, c1, c2, c3, c4; cin >> N; int* s = new int[N]; for (int i = 0; i < N; i++) { cin >> c1 >> c2 >> c3 >> c4; s[i] = maxa(c1, c2, c3, c4); maxnum = -1000; } for (int i = 0; i < N; i++) { if (i) cout << endl; cout << s[i]; } // int z = 0; // for (int c1 = 1; c1 < 14; c1++) // for (int c2 = c1; c2 < 14; c2++) // for (int c3 = c2; c3 < 14; c3++) { // for (int c4 = c3; c4 < 14; c4++) { // z += !(maxa(c1, c2, c3, c4) == 24); // maxnum = -1000; // } // } // cout << z; }","title":"4016"},{"location":"nr/4016/#4016-24","text":"\u9898\u76ee","title":"4016 24\u70b9\u6e38\u620f"},{"location":"nr/4016/#victrids-solution-star","text":"#include <iostream> //! Ugly using namespace std; int maxnum = -1000; int inline maxi(int a, int b) { return a > b ? a : b; } int inline mini(int a) { return a <= 24 ? a : -1000; } int polirovat(int a, int b, int calctype) { switch (calctype) { case 0: return a + b; case 1: return a - b; case 2: return a * b; case 3: return a / b; case 4: return b - a; case 5: return b / a; } return 0; } int summation(int c1) { maxnum = maxi(mini(c1), maxnum); return maxnum; } int maxa(int c1, int c2) { for (int i = 0; i < 6; i++) if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(polirovat(c1, c2, i)); return maxnum; } int maxa(int c1, int c2, int c3) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1)); } return maxnum; } int maxa(int c1, int c2, int c3, int c4) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1, c4)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c1 % c4))) || (c1 != 0 && i == 5 && (!(c4 % c1)))) summation(maxa(polirovat(c1, c4, i), c3, c2)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) summation(maxa(polirovat(c2, c4, i), c1, c3)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c3 % c4))) || (c3 != 0 && i == 5 && (!(c4 % c3)))) summation(maxa(polirovat(c3, c4, i), c1, c2)); for (int j = 0; j < 6; j++) { if (((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c3 % c4))) || (c3 != 0 && j == 5 && (!(c4 % c3))))) summation(maxa(polirovat(c1, c2, i), polirovat(c3, c4, j))); if (((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c1 % c4))) || (c1 != 0 && j == 5 && (!(c4 % c1))))) summation(maxa(polirovat(c2, c3, i), polirovat(c1, c4, j))); if (((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) && ((j != 3 && j != 5) || (c3 != 0 && j == 3 && (!(c1 % c3))) || (c1 != 0 && j == 5 && (!(c3 % c1))))) summation(maxa(polirovat(c2, c4, i), polirovat(c1, c3, j))); } } return maxnum; } int main() { int N, c1, c2, c3, c4; cin >> N; int* s = new int[N]; for (int i = 0; i < N; i++) { cin >> c1 >> c2 >> c3 >> c4; s[i] = maxa(c1, c2, c3, c4); maxnum = -1000; } for (int i = 0; i < N; i++) { if (i) cout << endl; cout << s[i]; } // int z = 0; // for (int c1 = 1; c1 < 14; c1++) // for (int c2 = c1; c2 < 14; c2++) // for (int c3 = c2; c3 < 14; c3++) { // for (int c4 = c3; c4 < 14; c4++) { // z += !(maxa(c1, c2, c3, c4) == 24); // maxnum = -1000; // } // } // cout << z; }","title":"VictriD's solution Star"},{"location":"nr/4022/","text":"4022 FZ\u6cdb\u821f \u9898\u76ee Description \u6709\u4e00\u5929FZ\u5728\u601d\u6e90\u6e56\u4e0a\u6cdb\u821f\uff0c\u4ed6\u4e0a\u5348\u6cdb\u821f150\u516c\u91cc\uff0c\u4e0b\u5348\u6cdb\u821f100\u516c\u91cc\uff0c\u665a\u4e0a\u548c\u5468\u672b\u90fd\u4f11\u606f\uff08\u5b9e\u884c\u53cc\u4f11\u65e5)\uff0c\u5047\u8bbe\u4ece\u5468x(1<=x<=7)\u5f00\u59cb\u7b97\u8d77\uff0c\u8bf7\u95ee\u8fd9\u6837\u8fc7\u4e86n\u5929\u4ee5\u540e\uff0cFZ\u4e00\u5171\u7d2f\u8ba1\u6cdb\u821f\u4e86\u591a\u5c11\u516c\u91cc\u5462\uff1f Input Format \u8f93\u5165\u4e24\u4e2a\u6574\u6570x,n(\u8868\u793a\u4ece\u5468x\u7b97\u8d77\uff0c\u7ecf\u8fc7n\u5929\uff0cn\u5728long int\u8303\u56f4\u5185\uff09\u3002 Output Format \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793aFZ\u7d2f\u8ba1\u6cdb\u821f\u4e86\u591a\u5c11\u516c\u91cc\u3002 Sample Input 3 10 Sample Output 2000 FineArtz's solution Star /* FZ\u6cdb\u821f */ #include <iostream> using namespace std; int main(){ int x, n; cin >> x >> n; int p = n / 7 * 5; n %= 7; for (int i = x; i <= x + n - 1; ++i){ if ((i % 6 == 0) || (i % 7 == 0)) continue; ++p; } cout << p * 250 << endl; return 0; }","title":"4022"},{"location":"nr/4022/#4022-fz","text":"\u9898\u76ee","title":"4022 FZ\u6cdb\u821f"},{"location":"nr/4022/#fineartzs-solution-star","text":"/* FZ\u6cdb\u821f */ #include <iostream> using namespace std; int main(){ int x, n; cin >> x >> n; int p = n / 7 * 5; n %= 7; for (int i = x; i <= x + n - 1; ++i){ if ((i % 6 == 0) || (i % 7 == 0)) continue; ++p; } cout << p * 250 << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4023/","text":"4023 \u9762\u5305\u6bd4\u53ef\u7231 \u9898\u76ee Description \u4eba\u6bd4\u4eba\uff0c\u6c14\u6b7b\u4eba\uff1b\u9762\u5305\u6bd4\u9762\u5305\uff0c\u96be\u8fc7\u6b7b\u9762\u5305\u3002\u5c0f\u9762\u5305\u6700\u8fd1\u53c2\u52a0\u4e86\u4e00\u4e2a\u201c\u6bd4\u53ef\u7231\u201d\u6bd4\u8d5b\uff0c\u6bd4\u7684\u662f\u6bcf\u53ea\u9762\u5305\u7684\u53ef\u7231\u7a0b\u5ea6\u3002\u53c2\u8d5b\u7684\u9762\u5305\u88ab\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u5934\u90fd\u671d\u5411\u5de6\u8fb9\uff0c\u7136\u540e\u6bcf\u53ea\u9762\u5305\u4f1a\u5f97\u5230\u4e00\u4e2a\u6574\u6570\u6570\u503c\uff0c\u8868\u793a\u8fd9\u53ea\u9762\u5305\u7684\u53ef\u7231\u7a0b\u5ea6\uff0c\u5f88\u663e\u7136\u6574\u6570\u8d8a\u5927\uff0c\u8868\u793a\u8fd9\u53ea\u9762\u5305\u8d8a\u53ef\u7231\uff0c\u800c\u4e14\u4efb\u610f\u4e24\u53ea\u9762\u5305\u7684\u53ef\u7231\u7a0b\u5ea6\u53ef\u80fd\u4e00\u6837\u3002\u7531\u4e8e\u6240\u6709\u7684\u9762\u5305\u5934\u90fd\u671d\u5411\u5de6\u8fb9\uff0c\u6240\u4ee5\u6bcf\u53ea\u9762\u5305\u53ea\u80fd\u770b\u89c1\u5728\u5b83\u5de6\u8fb9\u7684\u9762\u5305\u7684\u53ef\u7231\u7a0b\u5ea6\uff0c\u5b83\u4eec\u5fc3\u91cc\u90fd\u5728\u8ba1\u7b97\uff0c\u5728\u81ea\u5df1\u7684\u773c\u529b\u8303\u56f4\u5185\u6709\u591a\u5c11\u53ea\u9762\u5305\u4e0d\u5982\u81ea\u5df1\u53ef\u7231\u5462\u3002\u8bf7\u4f60\u5e2e\u8fd9\u4e9b\u53ef\u7231\u4f46\u662f\u5927\u8111\u4e0d\u591f\u7528\u7684\u5c0f\u9762\u5305\u4eec\u8ba1\u7b97\u4e00\u4e0b\u3002 Input Format \u7b2c\u4e00\u884c\u8f93\u5165\u4e00\u4e2a\u6574\u6570n\uff0c\u8868\u793a\u9762\u5305\u7684\u6570\u76ee\u3002(n <= 100) \u7b2c\u4e8c\u884c\u5185\u8f93\u5165n\u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u95f4\u9694\uff0c\u4f9d\u6b21\u8868\u793a\u4ece\u5de6\u5230\u53f3\u6bcf\u53ea\u5c0f\u9762\u5305\u7684\u53ef\u7231\u7a0b\u5ea6\u3002 Output Format \u884c\u5185\u8f93\u51fan\u4e2a\u6574\u6570\uff0c\u7528\u7a7a\u683c\u95f4\u9694\uff0c\u4f9d\u6b21\u8868\u793a\u6bcf\u53ea\u5c0f\u9762\u5305\u773c\u4e2d\u6709\u591a\u5c11\u53ea\u9762\u5305\u4e0d\u5982\u81ea\u5df1\u53ef\u7231\u3002 Sample Input 6 4 3 0 5 1 2 Sample Output 0 0 0 3 1 2 FineArtz's solution Star /* \u9762\u5305\u6bd4\u53ef\u7231 */ #include <iostream> using namespace std; int main(){ int n = 0, a[100], ans[100] = {0}; cin >> n; for (int i = 0; i < n; ++i) cin >> a[i]; for (int i = 0; i < n; ++i) for (int j = 0; j <= i - 1; ++j) if (a[i] > a[j]) ++ans[i]; for (int i = 0; i < n; ++i) cout << ans[i] << ' '; cout << endl; return 0; }","title":"4023"},{"location":"nr/4023/#4023","text":"\u9898\u76ee","title":"4023 \u9762\u5305\u6bd4\u53ef\u7231"},{"location":"nr/4023/#fineartzs-solution-star","text":"/* \u9762\u5305\u6bd4\u53ef\u7231 */ #include <iostream> using namespace std; int main(){ int n = 0, a[100], ans[100] = {0}; cin >> n; for (int i = 0; i < n; ++i) cin >> a[i]; for (int i = 0; i < n; ++i) for (int j = 0; j <= i - 1; ++j) if (a[i] > a[j]) ++ans[i]; for (int i = 0; i < n; ++i) cout << ans[i] << ' '; cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4025/","text":"4025 \u6d2a\u6c34\u6765\u88ad \u9898\u76ee Description \u4e00\u573a\u70ed\u5e26\u98d3\u98ce\u5e2d\u5377\u4e86\u5723\u5b89\u4e1c\u5c3c\u5965\u57ce\uff0c\u767e\u5e74\u4e0d\u9047\u7684\u5f3a\u964d\u6c34\u5bfc\u81f4\u6d2a\u6c34\u7206\u53d1\u3002Oven\u5bb6\u7684\u519c\u573a\u53d7\u6b64\u5f71\u54cd\u8be5\u5730\u5f62\u6210\u4e86\u661f\u7f57\u68cb\u5e03\u7684\u79ef\u6c34\u3002 Oven\u5bb6\u519c\u573a\u5904\u4e8e\u76c6\u5730\uff0c\u4e3a\u4e00\u7247\u957f\u5ea6\u4e3aM,\u5bbd\u5ea6\u4e3aN\u7684\u957f\u65b9\u5f62\u7f51\u683c\u533a\u57df\uff0c\u56db\u5468\u89c6\u4f5c\u65e0\u9650\u9ad8\u7684\u4fa7\u58c1\uff0c\u6bcf\u4e2a\u7f51\u683c\u4f4d\u7f6e(a,b)\u7684\u6d77\u62d4\u9ad8\u5ea6\u7531\u4e00\u4e2aM*N\u7684\u77e9\u9635\u8868\u793a\uff0c\u6bcf\u4e2a\u7f51\u683c\u7684\u9762\u79ef\u89c6\u4e3a1\uff0c\u519c\u573a\u5730\u8868\u7684\u79ef\u6c34\u603b\u4f53\u79ef\u4e3aV\u3002 \u7531\u4e8e\u8fd9\u91cc\u7684\u5730\u5c42\u900f\u6c34\u6027\u5f88\u597d\uff0c\u6240\u4ee5\u5404\u7247\u79ef\u6c34\u89c6\u4f5c\u8fde\u901a\u5668\uff0c\u5373\u5404\u5730\u7684\u6c34\u5e73\u9762\u6d77\u62d4\u9ad8\u5ea6\u4e00\u81f4\uff0c\u4f4e\u4e8e\u6c34\u5e73\u9762\u7684\u7f51\u683c\u5fc5\u6709\u6c34\u3002 \u8bf7\u5e2e\u52a9Oven\u8ba1\u7b97\u51fa\u6c34\u5e73\u9762\u7684\u6d77\u62d4\u9ad8\u5ea6\uff0c\u4ee5\u53ca\u88ab\u6df9\u6ca1\u7684\u5730\u533a(\u6d77\u62d4\u9ad8\u5ea6\u4e25\u683c\u5c0f\u4e8e\u6c34\u5e73\u9762)\u7684\u9762\u79ef\u5360\u603b\u9762\u79ef\u7684\u767e\u5206\u6bd4\u3002(\u5747\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570) Input Format \u7b2c\u4e00\u884c,\u4e24\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570M,N\u3002 (1 <= M,N <= 500) \u7b2c2 ~ M+1\u884c\u8f93\u51fa\u4e00\u4e2aM*N\u7684\u77e9\u9635\u3002 (0 <= \u9ad8\u5ea6 <= 1e8) \u6700\u540e\u4e00\u884c\uff0c\u6574\u6570V\u8868\u793a\u79ef\u6c34\u7684\u4f53\u79ef\u3002(0 <= V <= 1e12) Output Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u4e24\u4f4d\u5c0f\u6570\uff0c\u6c34\u5e73\u9762\u6d77\u62d4\u9ad8\u5ea6\u3002 \u7b2c\u4e8c\u884c\u4e00\u4e2a\u4e24\u4f4d\u5c0f\u6570\uff0c\u88ab\u6df9\u533a\u57df\u9762\u79ef\u5360\u603b\u9762\u79ef\u767e\u5206\u6bd4\u3002 Sample Input 3 3 25 37 45 51 12 34 94 83 27 100 Sample Output 46.67 66.67 Sample Input 2 2 1 4 4 10 3 Sample Output 4.00 25.00 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e60%\u7684\u6570\u636e (1 <= M,N <= 10) \u5bf9\u4e8e40%\u7684\u6570\u636e (10 < M,N <= 500) VictriD's solution Star #include <iomanip> #include <iostream> using namespace std; int* MergeSort(int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int* tmplist = new int[listSize]; int* llst = MergeSort(list, listSize / 2); int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n, m; cin >> n >> m; int size = n * m; int* hgt = new int[size]; long long* hgt2 = new long long[size]; for (int i = 0; i < size; i++) { cin >> hgt[i]; } long long vol, existvol = 0; double ht = 0; cin >> vol; MergeSort(hgt, size); //from small to big hgt2[0] = 0; for (int i = 1; i < size; i++) { hgt2[i] = (hgt[i] - hgt[i - 1]) * i; } int hg = 0; loop: existvol += hgt2[hg]; if (existvol == vol) { ht = hgt[hg]; goto ans; } if (existvol > vol) { ht = hgt[hg]; ht -= (double)(existvol - vol) / (double)hg; goto ans; } hg++; if (hg == size) { ht = hgt[size - 1]; ht += (double)(vol - existvol) / (double)size; goto ans; } goto loop; ans: cout << setiosflags(ios::fixed) << setprecision(2) << ht << endl << (double)hg / (double)size * 100.0; return 0; } FineArtz's solution Star /* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; //const long long INF = 2000000000000; int main(){ int m, n; cin >> m >> n; int a[250005] = {0}; int sub[250005] = {0}; for (int i = 1; i <= m * n; ++i) cin >> a[i]; long long v; cin >> v; sort(a + 1, a + m * n + 1); if (v == 0){ cout << setiosflags(ios::fixed) << setprecision(2) << double(a[1]) << endl; cout << \"0.00\" << endl; return 0; } double SeaLevel = 0.0; int cnt = 0; if (m <= 10 && n <= 10){ /*for (int i = 1; i <= m * n; ++i) cout << a[i] << ' '; cout << endl;*/ sub[1] = 0; for (int i = 2; i <= m * n; ++i) sub[i] = (a[i] - a[i - 1]) * (i - 1) + sub[i - 1]; /*for (int i = 1; i <= m * n; ++i) cout << sub[i] << endl;*/ cnt = 1; for (; cnt <= m * n; ++cnt) if (v <= sub[cnt]) break; --cnt; v -= sub[cnt]; SeaLevel = a[cnt] + v * 1.0 / cnt; //cout << cnt << endl; } else { for (int i = 1; i <= m * n - 1; ++i) sub[i] = a[i + 1] - a[i]; sub[m * n] = -1; cnt = 1; SeaLevel = a[1]; while (1){ if (v != 0 && cnt < m * n && v >= cnt * sub[cnt]){ v -= cnt * sub[cnt]; SeaLevel = a[++cnt]; } else if (cnt >= m * n){ cnt = m * n; SeaLevel += v * 1.0 / cnt; break; } else{ SeaLevel += v * 1.0 / cnt; if (v == 0) --cnt; break; } } } cout << setiosflags(ios::fixed) << setprecision(2) << SeaLevel << endl << cnt * 100.0 / (m * n) << endl; return 0; }","title":"4025"},{"location":"nr/4025/#4025","text":"\u9898\u76ee","title":"4025 \u6d2a\u6c34\u6765\u88ad"},{"location":"nr/4025/#victrids-solution-star","text":"#include <iomanip> #include <iostream> using namespace std; int* MergeSort(int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int* tmplist = new int[listSize]; int* llst = MergeSort(list, listSize / 2); int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n, m; cin >> n >> m; int size = n * m; int* hgt = new int[size]; long long* hgt2 = new long long[size]; for (int i = 0; i < size; i++) { cin >> hgt[i]; } long long vol, existvol = 0; double ht = 0; cin >> vol; MergeSort(hgt, size); //from small to big hgt2[0] = 0; for (int i = 1; i < size; i++) { hgt2[i] = (hgt[i] - hgt[i - 1]) * i; } int hg = 0; loop: existvol += hgt2[hg]; if (existvol == vol) { ht = hgt[hg]; goto ans; } if (existvol > vol) { ht = hgt[hg]; ht -= (double)(existvol - vol) / (double)hg; goto ans; } hg++; if (hg == size) { ht = hgt[size - 1]; ht += (double)(vol - existvol) / (double)size; goto ans; } goto loop; ans: cout << setiosflags(ios::fixed) << setprecision(2) << ht << endl << (double)hg / (double)size * 100.0; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4025/#fineartzs-solution-star","text":"/* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; //const long long INF = 2000000000000; int main(){ int m, n; cin >> m >> n; int a[250005] = {0}; int sub[250005] = {0}; for (int i = 1; i <= m * n; ++i) cin >> a[i]; long long v; cin >> v; sort(a + 1, a + m * n + 1); if (v == 0){ cout << setiosflags(ios::fixed) << setprecision(2) << double(a[1]) << endl; cout << \"0.00\" << endl; return 0; } double SeaLevel = 0.0; int cnt = 0; if (m <= 10 && n <= 10){ /*for (int i = 1; i <= m * n; ++i) cout << a[i] << ' '; cout << endl;*/ sub[1] = 0; for (int i = 2; i <= m * n; ++i) sub[i] = (a[i] - a[i - 1]) * (i - 1) + sub[i - 1]; /*for (int i = 1; i <= m * n; ++i) cout << sub[i] << endl;*/ cnt = 1; for (; cnt <= m * n; ++cnt) if (v <= sub[cnt]) break; --cnt; v -= sub[cnt]; SeaLevel = a[cnt] + v * 1.0 / cnt; //cout << cnt << endl; } else { for (int i = 1; i <= m * n - 1; ++i) sub[i] = a[i + 1] - a[i]; sub[m * n] = -1; cnt = 1; SeaLevel = a[1]; while (1){ if (v != 0 && cnt < m * n && v >= cnt * sub[cnt]){ v -= cnt * sub[cnt]; SeaLevel = a[++cnt]; } else if (cnt >= m * n){ cnt = m * n; SeaLevel += v * 1.0 / cnt; break; } else{ SeaLevel += v * 1.0 / cnt; if (v == 0) --cnt; break; } } } cout << setiosflags(ios::fixed) << setprecision(2) << SeaLevel << endl << cnt * 100.0 / (m * n) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4027/","text":"4027 \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 \u9898\u76ee Description \u56fd\u5e86\u8282\u5230\u4e86\uff0c\u8d1d\u5b66\u957f\u51b3\u5b9a\u6765\u4e00\u573a\u9762\u5411\u5927\u6d77\uff0c\u6625\u6696\u82b1\u5f00\u7684\u65c5\u884c\u3002\u5728\u6d77\u8fb9\uff0c\u8d1d\u5b66\u957f\u7ae5\u8bdd\u822c\u5730\u9047\u5230\u4e86\u4e00\u6761\u5c0f\u4eba\u9c7c\u3002\u5c0f\u4eba\u9c7c\u7ed9\u4e86\u8d1d\u5b66\u957f\u4e24\u5806\u5b8c\u5168\u4e00\u6837\u7684\u8d1d\u58f3\uff0c\u6bcf\u4efd\u8d1d\u58f3\u91cc\u7684\u8d1d\u58f3\u56fe\u6848\u5404\u4e0d\u76f8\u540c\u3002\u5c0f\u4eba\u9c7c\u544a\u8bc9\u8d1d\u5b66\u957f\uff0c\u5982\u679c\u628a\u8fd9\u4e24\u4efd\u8d1d\u58f3\u6446\u6210\u4e24\u4e32\uff0c\u4f1a\u6709\u5e78\u8fd0\u53d1\u751f\u3002\u7136\u800c\uff0c\u7b49\u8d1d\u5b66\u957f\u6446\u597d\u4e4b\u540e\uff0c\u5c0f\u4eba\u9c7c\u624d\u544a\u8bc9\u4ed6\uff0c\u8fd9\u4e24\u4e32\u8d1d\u58f3\u5fc5\u987b\u56fe\u6848\u987a\u5e8f\u5b8c\u5168\u76f8\u540c\uff0c\u9b54\u529b\u624d\u6709\u6548\uff1b\u5e76\u4e14\uff0c\u5979\u8981\u6c42\u8d1d\u5b66\u957f\u53ea\u80fd\u5f80\u4e0b\u53d6\uff0c\u4e0d\u80fd\u5f80\u4e0a\u653e\u3002\u7531\u4e8e\u8d1d\u58f3\u8d8a\u591a\u5e78\u8fd0\u503c\u5c31\u8d8a\u5927\uff0c\u8d1d\u5b66\u957f\u60f3\u77e5\u9053\uff0c\u5728\u4ed6\u53d6\u4e0b\u4e0d\u7b26\u5408\u8981\u6c42\u7684\u8d1d\u58f3\u4e4b\u540e\uff0c\u8981\u60f3\u5e78\u8fd0\u503c\u6700\u5927\uff0c\u6700\u591a\u8fd8\u5269\u591a\u5c11\u8d1d\u58f3\u3002\uff08\u5373\u8fd9\u4e24\u4e32\u8d1d\u58f3\u7684\u516c\u5171\u5e8f\u5217\u6700\u957f\u662f\u591a\u957f\uff0c\u5269\u4e0b\u7684\u8d1d\u58f3\u4e0d\u9700\u8981\u8fde\u7eed\u3002\u5176\u4e2d\u4e0d\u540c\u56fe\u6848\u7531\u4e0d\u540c\u6570\u5b57\u4ee3\u66ff\u3002\uff09 Input Format \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6570n\uff0c\u4ee3\u8868\u6bcf\u5806\u8d1d\u58f3\u7684\u6570\u91cf\uff0c \u63a5\u4e0b\u6765\u4e24\u884c\uff0c\u6bcf\u884c\u4e3an\u4e2a\u6570\uff0c\u4e3a\u81ea\u7136\u65701-n\u7684\u4e00\u4e2a\u6392\u5217\uff0c\u4ee3\u8868\u8d1d\u58f3\u7684\u56fe\u6848\u3002 100%\u7684\u6570\u636e 0<n<100000 50%\u7684\u6570\u636e 0<n<1000 Output Format \u4e00\u4e2a\u6570\uff0c\u5373\u6bcf\u4e32\u8d1d\u58f3\u7684\u6570\u91cf\u3002 Sample Input 5 2 3 5 1 4 1 5 2 3 4 Sample Output 3 FineArtz's solution Star /* \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 */ #include <iostream> using namespace std; int reflection[100005] = {0}, a[100005] = {0}, ans[100005] = {0}; int bisearch(int low, int high, int sought){ if (low >= high) return low; int m = (low + high) / 2; if (ans[m] < sought) return bisearch(m + 1, high, sought); else return bisearch(low, m, sought); } int main(){ int n, len = 0, j = 0, t = 0;; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; reflection[t] = i; } for (int i = 1; i <= n; ++i){ cin >> t; a[i] = reflection[t]; if (a[i] > ans[len]) j = ++len; else j = bisearch(1, len, a[i]); ans[j] = a[i]; } // for (int i = 1; i <= n; ++i) cout << a[i] << ' '; //cout << endl; cout << len << endl; return 0; }","title":"4027"},{"location":"nr/4027/#4027","text":"\u9898\u76ee","title":"4027 \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3"},{"location":"nr/4027/#fineartzs-solution-star","text":"/* \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 */ #include <iostream> using namespace std; int reflection[100005] = {0}, a[100005] = {0}, ans[100005] = {0}; int bisearch(int low, int high, int sought){ if (low >= high) return low; int m = (low + high) / 2; if (ans[m] < sought) return bisearch(m + 1, high, sought); else return bisearch(low, m, sought); } int main(){ int n, len = 0, j = 0, t = 0;; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; reflection[t] = i; } for (int i = 1; i <= n; ++i){ cin >> t; a[i] = reflection[t]; if (a[i] > ans[len]) j = ++len; else j = bisearch(1, len, a[i]); ans[j] = a[i]; } // for (int i = 1; i <= n; ++i) cout << a[i] << ' '; //cout << endl; cout << len << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4028/","text":"4028 \u4e45\u5b50\u7684\u56fe\u7ae0 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e45\u5b50\u5bc4\u6765\u4e86\u4e00\u5e45\u753b\u3002 \u4f60\u5374\u5ffd\u7136\u60f3\u8d77\u90a3\u4e2a\u521d\u590f\u7684\u508d\u665a\uff0c\u5979\u5c06\u4e00\u679a\u6728\u8d28\u56fe\u7ae0\u653e\u5728\u4f60\u7684\u624b\u4e2d\uff0c\u90a3\u662f\u4e24\u5e74\u4ee5\u524d\u7684\u4e8b\u3002 \u4e45\u5b50\u7684\u753b\u662f\u4e00\u5f20 m * n \u7684\u65b9\u683c\u7eb8\uff0c\u7eb8\u4e0a\u6709\u4e9b\u683c\u5b50\u88ab\u5370\u4e0a\u4e86\u9ed1\u8272\uff0c\u5176\u4f59\u7684\u683c\u5b50\u5219\u4fdd\u7559\u4e86\u65b9\u683c\u7eb8\u539f\u6709\u7684\u767d\u8272\u3002 \u90a3\u679a\u6728\u8d28\u56fe\u7ae0\u5462\uff1f\u5b83\u7531 p * q \u7684\u65b9\u683c\u7ec4\u6210\uff0c\u5176\u4e2d\u6709\u4e9b\u683c\u5b50\u662f\u51f8\u8d77\u7684\uff0c\u8fd9\u4e9b\u683c\u5b50\u4f1a\u6cbe\u4e0a\u58a8\u6c34\u3002 \u80fd\u5426\u7528\u8fd9\u4e2a\u56fe\u7ae0\u5728\u7eb8\u4e0a\u5370\u51fa\u4e45\u5b50\u7684\u753b\u5462\uff0c\u4f60\u8fd9\u6837\u60f3\u7740\u3002 \u4f60\u81ea\u7136\u77e5\u9053\uff0c\u4e45\u5b50\u7684\u56fe\u7ae0\u5728\u4f7f\u7528\u65f6\uff0c\u6709\u5982\u4e0b\u7684\u51e0\u70b9\u8981\u6c42\uff1a \u56fe\u7ae0\u4e0d\u53ef\u4ee5\u65cb\u8f6c \u4e0d\u80fd\u628a\u58a8\u6c34\u5370\u5230\u7eb8\u5916 \u7eb8\u4e0a\u7684\u4efb\u4e00\u4e2a\u683c\u5b50\u6700\u591a\u53ea\u80fd\u88ab\u58a8\u6c34\u5370\u4e00\u6b21 \u5982\u679c\u80fd\u591f\u7528\u56fe\u7ae0\u5728\u7eb8\u4e0a\u5370\u51fa\u4e45\u5b50\u7684\u753b\uff0c\u8bf7\u8f93\u51fa\"Yes\"\uff0c\u5426\u5219\u8bf7\u8f93\u51fa\"No\"\uff08\u4e0d\u5305\u542b\u5f15\u53f7\uff09\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570T\uff0c\u8868\u793a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765T\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e2d\uff1a \u7b2c\u4e00\u884c\u4e3a4\u4e2a\u6574\u6570 m, n, p, q\u3002 \u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6570\u5b57\uff08\u4e3a0\u62161\uff09\uff0c\u63cf\u8ff0\u4e45\u5b50\u7684\u753b\u30020\u8868\u793a\u7559\u767d\u7684\u683c\u5b50\uff0c1\u8868\u793a\u5370\u4e0a\u9ed1\u8272\u7684\u683c\u5b50\u3002 \u63a5\u4e0b\u6765p\u884c\uff0c\u6bcf\u884cq\u4e2a\u6570\u5b57\uff08\u4e3a0\u62161\uff09\uff0c\u63cf\u8ff0\u56fe\u7ae0\u30020\u8868\u793a\u4e0d\u6cbe\u58a8\u6c34\u7684\u683c\u5b50\uff0c1\u8868\u793a\u51f8\u8d77\u7684\uff08\u6cbe\u58a8\u6c34\u7684\uff09\u683c\u5b50\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\uff0c\u8f93\u51fa\"Yes\"\u6216\"No\"\u3002 \u6837\u4f8b\u8f93\u5165 2 3 4 4 2 1 1 0 0 0 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 2 2 2 2 1 1 1 1 0 1 1 0 \u6837\u4f8b\u8f93\u51fa Yes No \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e40%\u7684\u6570\u636e\uff0c\u56fe\u7ae0\u4e0a\u6240\u6709\u7684\u683c\u5b50\u90fd\u662f\u51f8\u8d77\u7684\u3002 \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0c1 <= m,n,p,q <= 50\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 <= m,n,p,q <= 1000\uff0c 1 <= T <= 10\u3002 FineArtz's solution Star /* \u4e45\u5b50\u7684\u56fe\u7ae0 */ #include <iostream> #include <cstdio> using namespace std; class Point{ public: Point() : x(0), y(0) {} Point(int xx, int yy) : x(xx), y(yy) {}; int x, y; }; bool gra[1005][1005] = {0}; Point pic[1000000]; void solve(){ int m, n, p, q; int cntg = 0; cin >> m >> n >> p >> q; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ scanf(\"%d\", &gra[i][j]); if (gra[i][j]) ++cntg; } int t = 0, cntp = 0; for (int i = 1; i <= p; ++i) for (int j = 1; j <= q; ++j){ scanf(\"%d\", &t); if (t == 1){ ++cntp; pic[cntp].x = i; pic[cntp].y = j; } } /*if (cntg % cntp != 0){ cout << \"No\" << endl; return; } if (m > 50 && n > 50){ cout << \"No\" << endl; return; }*/ for (int i = 1; i <= m; ++i){ for (int j = 1; j <= n; ++j){ if (gra[i][j]){ for (int l = 2; l <= cntp; ++l){ int nx = i + pic[l].x - pic[1].x, ny = j + pic[l].y - pic[1].y; if (nx <= 0 || ny <= 0 || nx > m || ny > n){ printf(\"No\\n\"); return; } if (gra[nx][ny]) gra[nx][ny] = 0; else{ printf(\"No\\n\"); return; } } } } } printf(\"Yes\\n\"); } int main(){ int t; cin >> t; for (int i = 0; i != t; ++i) solve(); return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"4028"},{"location":"nr/4028/#4028","text":"\u9898\u76ee","title":"4028 \u4e45\u5b50\u7684\u56fe\u7ae0"},{"location":"nr/4028/#fineartzs-solution-star","text":"/* \u4e45\u5b50\u7684\u56fe\u7ae0 */ #include <iostream> #include <cstdio> using namespace std; class Point{ public: Point() : x(0), y(0) {} Point(int xx, int yy) : x(xx), y(yy) {}; int x, y; }; bool gra[1005][1005] = {0}; Point pic[1000000]; void solve(){ int m, n, p, q; int cntg = 0; cin >> m >> n >> p >> q; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ scanf(\"%d\", &gra[i][j]); if (gra[i][j]) ++cntg; } int t = 0, cntp = 0; for (int i = 1; i <= p; ++i) for (int j = 1; j <= q; ++j){ scanf(\"%d\", &t); if (t == 1){ ++cntp; pic[cntp].x = i; pic[cntp].y = j; } } /*if (cntg % cntp != 0){ cout << \"No\" << endl; return; } if (m > 50 && n > 50){ cout << \"No\" << endl; return; }*/ for (int i = 1; i <= m; ++i){ for (int j = 1; j <= n; ++j){ if (gra[i][j]){ for (int l = 2; l <= cntp; ++l){ int nx = i + pic[l].x - pic[1].x, ny = j + pic[l].y - pic[1].y; if (nx <= 0 || ny <= 0 || nx > m || ny > n){ printf(\"No\\n\"); return; } if (gra[nx][ny]) gra[nx][ny] = 0; else{ printf(\"No\\n\"); return; } } } } } printf(\"Yes\\n\"); } int main(){ int t; cin >> t; for (int i = 0; i != t; ++i) solve(); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4028/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4032/","text":"4032 \u4e09\u89d2\u5f62\u5224\u5b9a \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u8f93\u5165\u4e09\u4e2a\u5b9e\u6570\uff0c\u5224\u65ad\u8fd9\u4e09\u4e2a\u6570\u80fd\u5426\u6784\u6210\u4e09\u89d2\u5f62\u7684\u4e09\u6761\u8fb9\u3002 \u5982\u679c\u80fd\u6784\u6210\u4e09\u89d2\u5f62\uff0c\u5f53\u4e09\u6761\u8fb9\u6784\u6210\u76f4\u89d2\u4e09\u89d2\u5f62\u65f6, \u8f93\u51fa1; \u5426\u5219, \u8f93\u51fa0\u3002 \u5982\u679c\u4e0d\u80fd\u6784\u6210\u4e09\u89d2\u5f62\uff0c\u8f93\u51fa-1\u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u7a0b\u5e8f\u8fd0\u884c\u5230\u8f93\u5165\u65f6\uff0c\u4e0d\u8981\u663e\u793a\u8f93\u5165\u63d0\u793a\u4fe1\u606f. \u8f93\u5165\u4e3a3\u4e2a\u5b9e\u6570. \u8f93\u51fa\u4e3a\u76f8\u5e94\u7684\u6570\u5b57\u8868\u793a\uff0c\u7ed3\u5c3e\u5904\u4e0d\u5305\u542b\u6362\u884c\u7b26\u3001\u56de\u8f66\u7b26. \u8fd0\u884c\u793a\u4f8b Sample Input1 1 2 9 Sample Output1 -1 Sample Input2 3.1 4.1 5.1 Sample Output2 0 Sample Input3 -3.1 4.1 5.1 Sample Output3 -1 Sample Input4 3 4 5 Sample Output4 1 VictriD's solution Star #include <cmath> #include <iostream> using namespace std; int main() { double a, b, c, temp; cin >> a >> b >> c; //rank if (a > b) { temp = a; a = b; b = temp; } if (b > c) { temp = b; b = c; c = temp; } //is triangle if (c >= (a + b) || a <= 0) { cout << \"-1\"; return 0; } //is RT if ((c * c - a * a - b * b) <= 1e-6 && (c * c - a * a - b * b) >= -1e-6) { cout << \"1\"; } else { cout << \"0\"; } return 0; }","title":"4032"},{"location":"nr/4032/#4032","text":"\u9898\u76ee","title":"4032 \u4e09\u89d2\u5f62\u5224\u5b9a"},{"location":"nr/4032/#victrids-solution-star","text":"#include <cmath> #include <iostream> using namespace std; int main() { double a, b, c, temp; cin >> a >> b >> c; //rank if (a > b) { temp = a; a = b; b = temp; } if (b > c) { temp = b; b = c; c = temp; } //is triangle if (c >= (a + b) || a <= 0) { cout << \"-1\"; return 0; } //is RT if ((c * c - a * a - b * b) <= 1e-6 && (c * c - a * a - b * b) >= -1e-6) { cout << \"1\"; } else { cout << \"0\"; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/4034/","text":"4034 NaivePalindrome \u9898\u76ee Description \u200b \u4e91\u5b66\u957f\u6027\u683c\u4e25\u8c28\uff0c\u56e0\u6b64\u5bf9\u4e8e\u4e00\u5207\u5177\u6709\u5bf9\u79f0\u7f8e\u7684\u4e8b\u7269\u6709\u7740\u5929\u7136\u7684\u559c\u597d\u3002 \u82e5\u4e00\u4e2a\u5408\u6cd5\uff08\u9996\u4f4d\u4e0d\u4e3a\u96f6\uff09\u7684\u6570\u5b57\u4ece\u5de6\u5411\u53f3\u8bfb\u4e0e\u4ece\u53f3\u5411\u5de6\u8bfb\u90fd\u4e00\u6837\uff0c\u5c31\u5c06\u5176\u79f0\u4e4b\u4e3a\u56de\u6587\u6570\u3002\u663e\u7136\u56de\u6587\u6570\u7b26\u5408\u4e91\u5b66\u957f\u7684\u5ba1\u7f8e\uff0c\u4ed6\u56e0\u800c\u51b3\u5b9a\u5bf9\u4e00\u5207\u6570\u5b57\u8fdb\u884c\u56de\u6587\u5316\u6539\u9020\u3002 \u6539\u9020\u7684\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff0c\u5c06\u4e00\u4e2aN\u8fdb\u5236\u4e0b\u7684\u6570\u5b57\u4e0e\u5b83\u7684\u9006\u53cd\u76f8\u52a0\uff0c\u5f97\u5230\u4e00\u4e2a\u65b0\u6570\u5b57\uff0c\u88ab\u79f0\u4e3a\u4e00\u6b65\u64cd\u4f5c\u3002\u5bf9\u5f97\u5230\u7684\u65b0\u6570\u5b57\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\u76f4\u81f3\u5f97\u5230\u4e00\u4e2a\u56de\u6587\u6570\uff0c\u73b0\u5728\u4e91\u5b66\u957f\u5e0c\u671b\u77e5\u9053\u6700\u5c11\u51e0\u6b65\u53ef\u4ee5\u6210\u529f\u56de\u6587\u5316\u4e00\u4e2a\u7ed9\u5b9a\u6570\u5b57\u3002 \u200b \u4f8b\u5982\uff1a\u7ed9\u5b9a\u4e00\u4e2a10\u8fdb\u5236\u657056\uff0c\u5c0656\u52a065\uff08\u5373\u628a56\u4ece\u53f3\u5411\u5de6\u8bfb\uff09\uff0c\u5f97\u5230121\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u200b \u53c8\u5982\uff1a\u5bf9\u4e8e10\u8fdb\u5236\u657087\uff1a \u200b STEP1\uff1a87+78 = 165 STEP2\uff1a165+561 = 726 \u200b STEP3\uff1a726+627 = 1353 STEP4\uff1a1353+3531 = 4884 \u4e0a\u4f8b\u6700\u5c11\u7528\u4e864\u6b65\u5f97\u5230\u56de\u6587\u65704884\uff0c\u56e0\u6b64\u8f93\u51fa\u201cSTEP=4\u201d(\u7b54\u6848\u8f93\u51fa\u4e0d\u5305\u542b\u5f15\u53f7)\u3002 \u200b \u4f46\u4eba\u751f\u82e6\u77ed\uff0c\u5982\u679c\u572830\u6b65\u4ee5\u5185\uff08\u5305\u542b30\u6b65\uff09\u4e0d\u53ef\u80fd\u5f97\u5230\u56de\u6587\u6570\uff0c\u4e91\u5b66\u957f\u5c31\u4e0d\u5e0c\u671b\u7ee7\u7eed\u5bf9\u8be5\u6570\u5b57\u8fdb\u884c\u56de\u6587\u5316\u6539\u9020\uff0c\u8f93\u51fa\u201cImpossible!\u201d Input Format \u8f93\u5165\u6570\u636e\u4e3a\u4e24\u884c, \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570N(2 <= N <= 20)\uff0c\u4ee3\u8868\u7ed9\u51fa\u6570\u5b57\u4e3aN\u8fdb\u5236 \u6ce8\uff1aN > 10\u65f6\uff0c\u4f1a\u4f7f\u7528\u4eceA\u5f00\u59cb\u7684\u4e00\u7cfb\u5217\u5927\u5199\u5b57\u6bcd\u987a\u5e8f\u4ee3\u66ff\u5927\u4e8e10\u7684\u6570\u5b57 \u4f8b\u5982\uff1a(12\u8fdb\u5236) A = 10 (10\u8fdb\u5236) \u200b (16\u8fdb\u5236) C = 12 (10\u8fdb\u5236) \u7b2c\u4e8c\u884c\u662f\u7ed9\u51fa\u7684\u4e00\u4e2a\u957f\u5ea6\u4e3a L (0 < L <= 100 )\u7684\u6570\u5b57\u4e32 \u5bf9\u4e8e70%\u7684\u6570\u636e N = 10\uff1b Output Format \u5bf9\u4e8e\u80fd\u572830\u6b65\uff08\u5305\u542b30\u6b65\uff09\u4e4b\u5185\u5f97\u5230\u56de\u6587\u6570\u7684\u6570\u5b57\u4e32\uff0c\u8f93\u51fa\u201cSTEP=\u6b65\u6570\u201d \u5426\u5219\u8f93\u51fa\u201cImpossible!\u201d Sample Input 10 56 Sample Output STEP=1 FineArtz's solution Star /* NaivePalindrome */ #include <iostream> #include <string> #include <cstring> using namespace std; const int MAXS = 105; int n = 10; inline int change(const char &ch){ if (isalpha(ch)) return (ch - 'A' + 10); else return (ch - '0'); } class BigInt{ //friend friend void add(BigInt&); public: //constructor BigInt(); BigInt(const string&); BigInt(const BigInt&); int len; int data[MAXS]; }; BigInt::BigInt() : len(0){ memset(data, 0, sizeof(data)); } BigInt::BigInt(const string &s){ memset(data, 0, sizeof(data)); len = s.size(); for (int i = 1; i <= len; ++i) data[i] = change(s[len - i]); } BigInt::BigInt(const BigInt &rhs) : len(rhs.len) { memset(data, 0, sizeof(data)); for (int i = 1; i <= len; ++i) data[i] = rhs.data[i]; } void add(BigInt &x){ BigInt ret; ret.len = x.len; for (int i = 1; i <= x.len; ++i) ret.data[i] = x.data[i] + x.data[x.len - i + 1]; for (int i = 1; i <= x.len; ++i){ if (ret.data[i] >= n){ ret.data[i] -= n; ++ret.data[i + 1]; } } if (ret.data[ret.len + 1] != 0) ++ret.len; x.len = ret.len; for (int i = 1; i <= ret.len; ++i) x.data[i] = ret.data[i]; } bool check(const BigInt &x){ for (int i = 1; i <= x.len / 2; ++i) if (x.data[i] != x.data[x.len - i + 1]) return false; return true; } int main(){ cin >> n; string num; cin >> num; BigInt x(num); int step = 0; while (!check(x)){ add(x); ++step; if (step >= 30){ cout << \"Impossible!\" << endl; return 0; } } cout << \"STEP=\" << step << endl; return 0; }","title":"4034"},{"location":"nr/4034/#4034-naivepalindrome","text":"\u9898\u76ee","title":"4034 NaivePalindrome"},{"location":"nr/4034/#fineartzs-solution-star","text":"/* NaivePalindrome */ #include <iostream> #include <string> #include <cstring> using namespace std; const int MAXS = 105; int n = 10; inline int change(const char &ch){ if (isalpha(ch)) return (ch - 'A' + 10); else return (ch - '0'); } class BigInt{ //friend friend void add(BigInt&); public: //constructor BigInt(); BigInt(const string&); BigInt(const BigInt&); int len; int data[MAXS]; }; BigInt::BigInt() : len(0){ memset(data, 0, sizeof(data)); } BigInt::BigInt(const string &s){ memset(data, 0, sizeof(data)); len = s.size(); for (int i = 1; i <= len; ++i) data[i] = change(s[len - i]); } BigInt::BigInt(const BigInt &rhs) : len(rhs.len) { memset(data, 0, sizeof(data)); for (int i = 1; i <= len; ++i) data[i] = rhs.data[i]; } void add(BigInt &x){ BigInt ret; ret.len = x.len; for (int i = 1; i <= x.len; ++i) ret.data[i] = x.data[i] + x.data[x.len - i + 1]; for (int i = 1; i <= x.len; ++i){ if (ret.data[i] >= n){ ret.data[i] -= n; ++ret.data[i + 1]; } } if (ret.data[ret.len + 1] != 0) ++ret.len; x.len = ret.len; for (int i = 1; i <= ret.len; ++i) x.data[i] = ret.data[i]; } bool check(const BigInt &x){ for (int i = 1; i <= x.len / 2; ++i) if (x.data[i] != x.data[x.len - i + 1]) return false; return true; } int main(){ cin >> n; string num; cin >> num; BigInt x(num); int step = 0; while (!check(x)){ add(x); ++step; if (step >= 30){ cout << \"Impossible!\" << endl; return 0; } } cout << \"STEP=\" << step << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4035/","text":"4035 \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a \u9898\u76ee Description \u6cf0\u5148\u751f\u662f\u65b0\u4efb\u65f6\u7a7a\u7ba1\u7406\u5c40\u7684\u5c40\u957f\uff0c\u4ed6\u5c06\u53c2\u4e0e\u65f6\u5149\u673a\u7684\u8bbe\u8ba1\u5de5\u4f5c\u3002 \u65f6\u5149\u673a\u7684\u5efa\u9020\u9700\u8981\u6602\u8d35\u7684\u9668\u91d1\uff0c\u73b0\u5728\u65f6\u7a7a\u7ba1\u7406\u5c40\u4e2d\u7684\u9668\u91d1\u6570\u91cf\u4ec5\u4ec5\u591f\u5efa\u9020M\u53f0\u65f6\u5149\u673a\uff08\u6bcf\u53f0\u65f6\u5149\u673a\u642d\u8f7d\u4eba\u6570\u76f8\u540c\uff09\u3002 \u6cf0\u5148\u751f\u7ba1\u7406\u7684\u661f\u7cfb\u4e2d\uff0c\u603b\u5171\u6709N\u4e2a\u57ce\u9547\uff0c\u6bcf\u4e2a\u57ce\u9547\u4e2d\u90fd\u6709\u4e00\u5b9a\u6570\u91cf\u7684\u4eba\u60f3\u8981\u8fdb\u884c\u65f6\u5149\u65c5\u884c\u3002 \u8bf7\u4f60\u5e2e\u5e2e\u6cf0\u5148\u751f\uff0c\u6bcf\u53f0\u65f6\u5149\u673a\u7684\u642d\u8f7d\u91cf\u81f3\u5c11\u4e3a\u591a\u5c11\uff0c\u624d\u80fd\u6ee1\u8db3\u6240\u6709\u4eba\u7684\u65f6\u5149\u65c5\u884c\u613f\u671b\u5462 \u6ce8\u610f\uff1a\u4e00\u53f0\u65f6\u5149\u673a\u4e0d\u80fd\u88ab\u6765\u81ea\u4e0d\u540c\u57ce\u9547\u7684\u4e58\u5ba2\u5171\u7528\uff01 Input Format \u7b2c\u4e00\u884c\uff0c\u4e24\u4e2a\u6574\u6570\uff0c\u5206\u522b\u4e3aN,M\uff081 < N < 500000, N < M < 2000000\uff09 \u4ece\u7b2c\u4e8c\u884c\u8d77\uff0cN\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u4e2a\u57ce\u9547\u4e2d\u60f3\u8981\u8fdb\u884c\u65f6\u5149\u65c5\u884c\u7684\u4eba\u6570a[i]\uff080 < a[i] < 500000\uff09 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u65f6\u5149\u673a\u7684\u6700\u5c0f\u642d\u8f7d\u91cf Sample Input 2 7 200000 500000 Sample Output 100000 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c1 < N < 10, N < M < 40 \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0c1 < N < 1000, N < M < 4000 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 < N < 500000, N < M < 2000000 FineArtz's solution Star /* \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a */ #include <iostream> using namespace std; int n, m; int a[500005] = {0}; long long check(long long l, long long r){ if (l >= r) return l; long long mid = (l + r) / 2; int cnt = 0; bool flag = true; for (int i = 1; i <= n; ++i){ cnt += a[i] / mid; if (a[i] % mid != 0) ++cnt; if (cnt > m) { return check(mid + 1, r); flag = false; break; } } if (flag) return check(l, mid); } int main(){ cin >> n >> m; long long sum = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; sum += a[i]; } long long l = sum / m, r = sum; cout << check(l, r) << endl; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int sum,n,m,a[600000],l,r,mid,ans=500000; bool test(int x){ sum=0; for (int i=0;i<n;++i) sum+=(a[i]-1)/x+1; return sum<=m; } int main() { cin>>n>>m; for (int i=0;i<n;++i) cin>>a[i]; l=0; r=500000; while (l<=r) { mid=(l+r)/2; if (test(mid)){ if (mid<ans) ans=mid; r=mid-1; } else l=mid+1; } cout<<ans; return 0; }","title":"4035"},{"location":"nr/4035/#4035","text":"\u9898\u76ee","title":"4035 \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a"},{"location":"nr/4035/#fineartzs-solution-star","text":"/* \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a */ #include <iostream> using namespace std; int n, m; int a[500005] = {0}; long long check(long long l, long long r){ if (l >= r) return l; long long mid = (l + r) / 2; int cnt = 0; bool flag = true; for (int i = 1; i <= n; ++i){ cnt += a[i] / mid; if (a[i] % mid != 0) ++cnt; if (cnt > m) { return check(mid + 1, r); flag = false; break; } } if (flag) return check(l, mid); } int main(){ cin >> n >> m; long long sum = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; sum += a[i]; } long long l = sum / m, r = sum; cout << check(l, r) << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4035/#washswangs-solution-star","text":"#include <iostream> using namespace std; int sum,n,m,a[600000],l,r,mid,ans=500000; bool test(int x){ sum=0; for (int i=0;i<n;++i) sum+=(a[i]-1)/x+1; return sum<=m; } int main() { cin>>n>>m; for (int i=0;i<n;++i) cin>>a[i]; l=0; r=500000; while (l<=r) { mid=(l+r)/2; if (test(mid)){ if (mid<ans) ans=mid; r=mid-1; } else l=mid+1; } cout<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4039/","text":"4039 \u8d28\u56e0\u6570\u5206\u89e3 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u5148\u8bfb\u5165\u4e00\u4e2a\u6b63\u6574\u6570 N \uff0c\u5bf9\u5176\u505a\u8d28\u56e0\u6570\u5206\u89e3\u3002 \u4f8b\u5982\uff1a 90 = 2 * 3 * 3 * 5 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e00\u4e2a \u6b63\u6574\u6570 N(2<=N<=65535) \u3002 \u8f93\u51fa \u5206\u89e3\u5f97\u5230\u7684\u6240\u6709\u8d28\u56e0\u6570\uff0c\u4ece\u5c0f\u5230\u5927\u6392\u5217\uff0c\u4ee5\u7a7a\u683c\u5206\u9694\uff0c\u6700\u540e\u4e00\u4e2a\u56e0\u6570\u540e\u65e0\u7a7a\u683c\u3002 \u5982\u679c N \u672c\u8eab\u4e3a\u8d28\u6570\uff0c\u5219\u8f93\u51fa N \u672c\u8eab\u3002 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 2 Sample Output 1 2 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 90 Sample Output 2 2 3 3 5 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b3 Sample Input 3 1024 Sample Output 3 2 2 2 2 2 2 2 2 2 2 VictriD's solution Star #include <iostream> using namespace std; int main() { int num; bool CF=false; cin >> num; for (int i = 2; i <= num;) { if (!(num % i)) { num /= i; if (CF) cout << ' '; cout << i; CF = true; continue; } ++i; } return 0; } vvvvv1v's solution Star #include <iostream> #include <cmath> using namespace std; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; cin >> n; bool isFirst = true; int num = 2; if (isPrimenumber(n)) { cout << n; return 0; } while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!isFirst) cout << ' '; else isFirst = false; cout << i; n /= i; num = i; break; } } } cout << ' ' << n; return 0; }","title":"4039"},{"location":"nr/4039/#4039","text":"\u9898\u76ee","title":"4039 \u8d28\u56e0\u6570\u5206\u89e3"},{"location":"nr/4039/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int num; bool CF=false; cin >> num; for (int i = 2; i <= num;) { if (!(num % i)) { num /= i; if (CF) cout << ' '; cout << i; CF = true; continue; } ++i; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/4039/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cmath> using namespace std; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; cin >> n; bool isFirst = true; int num = 2; if (isPrimenumber(n)) { cout << n; return 0; } while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!isFirst) cout << ' '; else isFirst = false; cout << i; n /= i; num = i; break; } } } cout << ' ' << n; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4040/","text":"4040 \u8ba1\u7b97\u963f\u59c6\u65af\u7279\u6717\u6570 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4e24\u4e2a \u6b63\u6574\u6570 a\u548cb\uff0c\u5176\u4e2da<=b, \u8ba1\u7b97\u5e76\u8f93\u51fa\u95ed\u533a\u95f4[a,b]\u4e2d\u7684\u963f\u59c6\u65af\u7279\u6717\u6570\u3002 \u963f\u59c6\u65af\u7279\u6570 \u4e3a\u5404\u4e2a\u6570\u4f4d\u4e0a\u6570\u5b57\u7684\u7acb\u65b9\u548c\u7b49\u4e8e\u5176\u81ea\u8eab\u7684\u6570\u5b57\uff0c\u4f8b\u5982\uff1a 153 = 1 * 1 * 1 + 5 * 5 * 5 + 3 * 3 * 3 // 153 is an Armstrong number. 12 is not equal to 1 * 1 * 1 + 2 * 2 * 2 // 12 is not an Armstrong number. \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\uff08\u5728\u95ee\u9898\u63cf\u8ff0\u4e2d\u8bb0\u4f5ca\u548cb\uff0c\u7a0b\u5e8f\u4e2d\u8bf7\u81ea\u5b9a\u53d8\u91cf\u540d\uff09,a\u548cb\u4f7f\u7528 1\u4e2a\u7a7a\u683c \u5206\u9694\u3002 \u8f93\u51fa \u8f93\u51fa\u95ed\u533a\u95f4[a,b]\u4e2d\u7684\u6240\u6709\u963f\u59c6\u65af\u7279\u6717\u6570\u3002 \u6570\u636e\u4e4b\u95f4\u7528\u6362\u884c\u7b26\u5206\u9694\u3002 \u6700\u540e\u7684\u4e00\u884c\u8f93\u51fa\u540e\u9762\u65e0\u6362\u884c\u7b26\u3002 \u5982\u679c\u8f93\u5165\u9519\u8bef\uff0c\u8f93\u51fa\u63d0\u793a\u4fe1\u606f error \u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230\u963f\u59c6\u65af\u7279\u6717\u6570\uff0c\u8f93\u51fa\u63d0\u793a\u4fe1\u606f no \u3002 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 100 400 Sample Output 1 153 370 371 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 -6 7 Sample Output 2 error \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b3 Sample Input 3 12 12 Sample Output 3 no \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u5165\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include <iostream> #include <cmath> using namespace std; int main() { int a, b, armstrong; bool AF = false; cin >> a >> b; if (a > b || a <= 0) { cout << \"error\"; return 0; } for (int i = a; i <= b; i++) { armstrong = 0; for (int OpNumber = i;OpNumber!=0;) { armstrong += pow((OpNumber % 10), 3); OpNumber /= 10; } if (armstrong == i) { if(AF)cout<<endl; cout <<i; AF = true; } } if (!AF)cout << \"no\"; return 0; }","title":"4040"},{"location":"nr/4040/#4040","text":"\u9898\u76ee","title":"4040 \u8ba1\u7b97\u963f\u59c6\u65af\u7279\u6717\u6570"},{"location":"nr/4040/#victrids-solution-star","text":"#include <iostream> #include <cmath> using namespace std; int main() { int a, b, armstrong; bool AF = false; cin >> a >> b; if (a > b || a <= 0) { cout << \"error\"; return 0; } for (int i = a; i <= b; i++) { armstrong = 0; for (int OpNumber = i;OpNumber!=0;) { armstrong += pow((OpNumber % 10), 3); OpNumber /= 10; } if (armstrong == i) { if(AF)cout<<endl; cout <<i; AF = true; } } if (!AF)cout << \"no\"; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4041/","text":"4041 STL\u7cfb\u5217-vector \u9898\u76ee Description \u9762\u5305\u662f\u4e00\u4e2a\u53cb\u5584\u7684\u52a9\u6559\uff0c\u4e3a\u4e86\u540c\u5b66\u4eec\u548c\u52a9\u6559\u4eec\u7684\u8eab\u5fc3\u5065\u5eb7\uff0c\u6240\u4ee5\u51fa\u4e86\u8fd9\u4e00\u5957C++ STL\u4f7f\u7528\u7cfb\u5217\uff0c\u65e8\u5728\u5e2e\u52a9 \u5927\u5bb6\u719f\u6089STL\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 \u8bbe\u4f60\u6709\\(n\\)\u884c(0-based)\u6570\u5b57\uff0c\u5bf9\u8fd9\u5806\u6570\u5b57\u4f1a\u8fdb\u884c\\(m\\)\u6b21\u64cd\u4f5c\uff0c\u5206\u522b\u5982\u4e0b 1. \u5728\u7b2c\\(i\\)\u884c\u7684\u6700\u540e\u6dfb\u52a0\u4e00\u4e2a\u6570\\(x\\)\uff0c\u4e3a\u672c\u6b21\u8f93\u5165\u7684\u6570\u548c\u6700\u8fd1\u4e00\u6b21\u64cd\u4f5c\u4e09\u8f93\u51fa\u7684\u6570\u7684\u5f02\u6216\u7ed3\u679c\uff0c \u5982\u679c\u8fd8\u6ca1\u6709\u8fdb\u884c\u8fc7\u64cd\u4f5c3\uff0c\u5c31\u4e0d\u7528\u5f02\u6216\u4e86OvO\u3002 2. \u5220\u9664\u7b2c\\(i\\)\u884c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u3002 3. \u8be2\u95ee\u7b2c\\(i\\)\u884c\u7b2c\\(j\\)\u5217\u7684\u6570\u7684\u6570\u503c\u3002 \u5bf9\u4e8e\u6240\u6709\u7684\u64cd\u4f5c\uff0c\u4fdd\u8bc1\u90fd\u662f\u5408\u6cd5\u7684\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\\(n\\)\u548c\\(m\\)\uff0c \u63a5\u4e0b\u6765\u7684\\(m\\)\u884c\u4e3a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff0c \u7b2c\u4e00\u4e2a\u6570\\(t\\)\u8868\u793a\u64cd\u4f5c\u7f16\u53f7\uff0c\u5bf9\u4e8e\u5404\u4e2a\u64cd\u4f5c\u4e4b\u540e\u662f \u7b2c\\(i\\)\u884c\u548c\u6570\\(y\\) \u7b2c\\(i\\)\u884c \u7b2c\\(i\\)\u884c\u7b2c\\(j\\)\u5217 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c3\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\u3002 Sample Input 3 10 1 1 1622650073 3 1 0 1 2 1458777923 2 2 1 2 114807987 3 1 0 2 1 1 1 1264817709 3 1 0 1 0 893351816 Sample Output 1622650073 1622650073 735329012 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cN <= 10000\uff0cM <= 100000\uff0cx\u662f\u5728int\u8303\u56f4\u5185\u6b63\u6574\u6570 FineArtz's solution Star /* STL-vector */ #include <iostream> #include <cstdio> #include <vector> #include <stack> using namespace std; int main(){ int n, m; scanf(\"%d%d\", &n, &m); //cin >> n >> m; vector<vector<int>> v; int last3 = -1; v.resize(n); while (m--){ int t, i, x; scanf(\"%d\", &t); switch(t){ case 1: scanf(\"%d%d\", &i, &x); //cin >> i >> x; if (last3 == -1) v[i].push_back(x); else v[i].push_back(x ^ last3); break; case 2: scanf(\"%d\", &i); //cin >> i; v[i].erase(v[i].end() - 1); break; case 3: scanf(\"%d%d\", &i, &x); //cin >> i >> x; last3 = v[i][x]; printf(\"%d\\n\", v[i][x]); //cout << v[i][x] << endl; break; default: break; } } return 0; }","title":"4041"},{"location":"nr/4041/#4041-stl-vector","text":"\u9898\u76ee","title":"4041 STL\u7cfb\u5217-vector"},{"location":"nr/4041/#fineartzs-solution-star","text":"/* STL-vector */ #include <iostream> #include <cstdio> #include <vector> #include <stack> using namespace std; int main(){ int n, m; scanf(\"%d%d\", &n, &m); //cin >> n >> m; vector<vector<int>> v; int last3 = -1; v.resize(n); while (m--){ int t, i, x; scanf(\"%d\", &t); switch(t){ case 1: scanf(\"%d%d\", &i, &x); //cin >> i >> x; if (last3 == -1) v[i].push_back(x); else v[i].push_back(x ^ last3); break; case 2: scanf(\"%d\", &i); //cin >> i; v[i].erase(v[i].end() - 1); break; case 3: scanf(\"%d%d\", &i, &x); //cin >> i >> x; last3 = v[i][x]; printf(\"%d\\n\", v[i][x]); //cout << v[i][x] << endl; break; default: break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4042/","text":"4042 \u9762\u5305\u8981\u7ea6\u4f1a \u9898\u76ee Description \u9762\u5305\u51b3\u5b9a\u8981\u79fb\u6c11\u7f05\u7538\u3002\u4ed6\u4e00\u5230\u8fbe\u76ee\u7684\u5730\u5c31\u5f00\u59cb\u8fdb\u884c\u9ed1\u5ba2\u6d3b\u52a8\u3002\u76ee\u524d\uff0c\u4ed6\u4e00\u5171\u9ed1\u6389\u4e86\u5b83\u6240\u4f4f\u8857\u533a\u4e2d\u7684n\u53f0\u7535\u8111\uff0c\u800c\u8fd9\u4e9b\u7535\u8111\u53c8\u6070\u597d\u5728\u4e00\u6761\u76f4\u7ebf\u4e0a\u3002 \u73b0\u5728\u7528\u5e8f\u53f7\\(1-n\\)\u6765\u8868\u793a\u9762\u5305\u9ed1\u6389\u7684\u7535\u8111\uff0c\u5176\u4e2d\u7b2ci\u53f0\u7535\u8111\u4f4d\u4e8e\u5750\u6807\\(x_i\\)\u5904\uff0c\u4e14\u6bcf\u53f0\u7535\u8111\u7684\u5750\u6807\u90fd\u4e0d\u76f8\u540c\u3002 \u9762\u5305\u51b3\u5b9a\u5728\u7e41\u91cd\u7684\u5de5\u4f5c\u540e\u4f11\u606f\u4e00\u4e0b\u3002\u56e0\u6b64\u4ed6\u9080\u8bf7\u4ed6\u7684\u5c0f\u59d0\u59d0\u5230\u4e00\u5bb6\u9910\u9986\u5403\u996d\u3002\u4f46\u662f\u5c0f\u59d0\u59d0\u8bf4\u5979\u613f\u610f\u53bb\uff0c\u4f46\u662f\u6709\u4e00\u4e2a\u6761\u4ef6\uff1a\u9762\u5305\u5fc5\u987b\u89e3\u51b3\u4e00\u4e2a\u7b80\u5355\u7684\u4efb\u52a1 \u9996\u5148,\\(A\\)\u662f\u6240\u6709\u88ab\u9762\u5305\u9ed1\u6389\u7684\u7535\u8111\u6784\u6210\u7684\u96c6\u5408\uff0c\u51fd\u6570\\(F(a) = \\max_{i,j \\in a} |x_i-x_j|\\) , \u5176\u4e2d\\(a\\)\u662f\\(A\\)\u7684\u4e00\u4e2a\u975e\u7a7a\u5b50\u96c6\u3002\u5c0f\u59d0\u59d0\u8ba9\u9762\u5305\u8ba1\u7b97\u8fd9\u6837\u4e00\u4e2a\u548c\u5f0f \\(\\sum_{a\\subseteq A, a\\not= \\phi}F(a)\\)\uff0c\u7531\u4e8e\u7ed3\u679c\u975e\u5e38\u5927\uff0c\u5c0f\u59d0\u59d0\u8ba9\u9762\u5305\u5bf9\u7ed3\u679c\u6a211e9+7 \u7136\u800c\uff0c\u9762\u5305\u5b9e\u5728\u662f\u592a\u7d2f\u4e86\uff0c\u4ed6\u6ca1\u529e\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u8bf7\u4f60\u6765\u5e2e\u52a9\u4ed6\u6210\u529f\u53c2\u52a0\u7ea6\u4f1a\u5427\u3002 Input Format \u7b2c\u4e00\u884c\uff0c\u6709\u4e00\u4e2a\u6574\u6570n(\\(1\\leq n\\leq 3e5\\)), \u8868\u793a\u88ab\u9ed1\u7684\u7535\u8111\u6570\u76ee \u7b2c\u4e8c\u884c\uff0c\u6709n\u4e2a\u6574\u6570\\(x_1,x_2,\\cdots ,x_n(1\\leq x_i \\leq 1e9)\\) \u4ee3\u8868\u88ab\u9ed1\u7535\u8111\u7684\u5750\u6807\uff0c\u5e76\u4fdd\u8bc1\u6240\u6709\\(x_i\\)\u4e0d\u540c\u3002 Output Format \u4e00\u4e2a\u6574\u6570\u2014\u2014\u8981\u6c42\u6a211e9+7 Sample Input 1 2 4 7 Sample Output 1 3 Sample Input 2 3 4 3 1 Sample Output 2 9 \u6837\u4f8b\u89e3\u91ca \u5728\u6837\u4f8b2\u4e2d\uff0c\u4e00\u5171\u67097\u4e2a\u975e\u7a7a\u5b50\u96c6\u3002\u5176\u4e2d\u53ea\u6709\\(\\{4,3\\},\\{4,1\\},\\{3,1\\},\\{4,3,1\\}\\)\u4f1a\u4f7f\u7ed3\u679c\u589e\u52a0\u3002\u6700\u540e\u7684\u7ed3\u679c\u4e3a\\((4-3)+(4-1)+(3-1)+(4-1)=9\\) Limits \u5bf9\u4e8e50%\u7684\u6570\u636e\uff0c\\(1\\leq n \\leq 20\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1\\leq n\\leq 3e5\\) \u5176\u4e2d\\(1\\leq x_i \\leq 1e9\\) FineArtz's solution Star /* \u9762\u5305\u8981\u7ea6\u4f1a */ #include <iostream> #include <fstream> #include <algorithm> using namespace std; constexpr int MAXN = 3e5 + 5, MOD = 1e9 + 7; int n; long long x[MAXN]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> x[i]; sort(x + 1, x + n + 1); long long ans = 0, doub = 1, sum = 0; for (int i = 2; i <= n; ++i){ sum = sum * 2 % MOD; sum = (sum + x[i - 1]) % MOD; doub = doub * 2 % MOD; ans = (ans + (doub - 1) * x[i] - sum) % MOD; } cout << ans << endl; return 0; }","title":"4042"},{"location":"nr/4042/#4042","text":"\u9898\u76ee","title":"4042 \u9762\u5305\u8981\u7ea6\u4f1a"},{"location":"nr/4042/#fineartzs-solution-star","text":"/* \u9762\u5305\u8981\u7ea6\u4f1a */ #include <iostream> #include <fstream> #include <algorithm> using namespace std; constexpr int MAXN = 3e5 + 5, MOD = 1e9 + 7; int n; long long x[MAXN]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> x[i]; sort(x + 1, x + n + 1); long long ans = 0, doub = 1, sum = 0; for (int i = 2; i <= n; ++i){ sum = sum * 2 % MOD; sum = (sum + x[i - 1]) % MOD; doub = doub * 2 % MOD; ans = (ans + (doub - 1) * x[i] - sum) % MOD; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4043/","text":"4043 STL\u7cfb\u5217-algorithm \u9898\u76ee Description \u9762\u5305\u662f\u4e00\u4e2a\u53cb\u5584\u7684\u52a9\u6559\uff0c\u4e3a\u4e86\u540c\u5b66\u4eec\u548c\u52a9\u6559\u4eec\u7684\u8eab\u5fc3\u5065\u5eb7\uff0c\u6240\u4ee5\u51fa\u4e86\u8fd9\u4e00\u5957C++ STL\u4f7f\u7528\u7cfb\u5217\uff0c\u65e8\u5728\u5e2e\u52a9 \u5927\u5bb6\u719f\u6089STL\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 \u8bbe\u4f60\u6709\\(n\\)\u4e2a(0-based)\u6570\u5b57\uff0c\u4f1a\u8fdb\u884c\\(m\\)\u6b64\u64cd\u4f5c\uff0c\u5206\u522b\u5982\u4e0b 1. \u5c06\u4e0b\u6807\u4e3a\\([i, j)\\)\u95f4\u7684\u6570\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 2. \u5c06\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u7ffb\u8f6c\uff0c\u5373\u7b2c\u4e00\u4e2a\u6570\u5b57\u548c\u6700\u540e\u4e00\u4e2a\u4ea4\u6362\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u548c\u6700\u540e\u7b2c\u4e8c\u4e2a\u4ea4\u6362\u4f4d\u7f6e\uff0cbalabala 3. \u8f93\u51fa\u7b2c\\(i\\)\u4e2a\u5230\u7b2c\\(j-1\\)\u4e2a\u6570\u5b57\uff0c\u4f7f\u7528\u7a7a\u683c\u9694\u5f00\u3002 4. \u8f93\u51fa\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u4e2d\uff0c\u6700\u5c0f\u7684\u4e00\u4e2a\u7684\u6570\u503c\u3002 5. \u8f93\u51fa\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u4e2d\uff0c\u5927\u4e8e\\(a\\)\u7684\u6570\u7684\u4e2a\u6570\u3002 6. \u8f93\u51fa\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u7b49\u4e8e\\(a\\)\u7684\u6570\u7684\u4e0b\u6807\uff0c\u6ca1\u6709\u5219\u8f93\u51fa\\(j\\)\u3002 7. \u5c06\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u4e2d\u6240\u6709\u4e3a\\(a\\)\u7684\u6570\u90fd\u66ff\u6362\u6210\\(b\\)\u3002 8. \u5bf9\u4e8e\u4e0b\u6807\u4e3a\\([i, j)\\)\u7684\u6570\u8fdb\u884c\u4e00\u6b21\u5212\u5206\u3002\u5bf9\u4e8e\u7ed9\u5b9a\u7684\\(a\\)\uff0c\\(b\\)\uff0c\\(c\\)\uff0c\u8bb0\\(f=ax^2+bx+c\\), \u5c06\u533a\u95f4\u4e2d\u7684\u6570\u91cd\u65b0\u6392\u5217\uff0c\u4f7f\u5f97\u4efb\u610f\u6ee1\u8db3\\(f(x)>0\\)\u7684\u6570\u5728\u4efb\u610f\u4e0d\u6ee1\u8db3\u7684\u6570\u4e4b\u524d\uff0c\u5e76\u4e14\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u4e0d\u53d8\u3002 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8981\u6c42\u4f60\u8f93\u51fa\u7684\u64cd\u4f5c\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\\(n\\)\u548c\\(m\\)\uff0c \u63a5\u4e0b\u6765\u7684\\(m\\)\u884c\u4e3a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff0c \u7b2c\u4e00\u4e2a\u6570\u5b57\\(t\\)\u8868\u793a\u8fd9\u4e2a\u64cd\u4f5c\u7684\u7f16\u53f7\uff0c\u4e4b\u540e\u662f\\(i\\), \\(j\\), \\(a\\) (\u5982\u679c\u6709\u7684\u8bdd\uff0c\u4e0b\u540c), \\(b\\), \\(c\\) Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8981\u6c42\u4f60\u8f93\u51fa\u7684\u64cd\u4f5c\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u5185\u5bb9\u3002 Sample Input 3 10 56 78 42 8 0 2 -44 -27 -96 5 0 1 48 1 0 0 5 0 1 116 4 0 2 7 0 2 115 25 5 0 1 28 5 0 1 78 3 0 1 3 0 1 Sample Output 1 0 56 1 0 56 56 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(n \\le 5000\\)\uff0c\\(m \\le 10000\\)\u4fdd\u8bc1\u6240\u6709\u6570\u636e\u5728\u6574\u578b\u8303\u56f4\u5185\u3002 Hint \u5bf9\u81ea\u5df1\u597d\u4e00\u70b9\uff0c\u8fd9\u4e48\u591a\u4e1c\u897f\u5c31\u4e0d\u8981\u624b\u5199\u4e86\uff0c\u8c03\u8c03STL\u5c31\u597d\u5566OvO\uff0c\u57fa\u672c\u4e0a\u6240\u6709\u9700\u8981\u7528\u5230\u7684\u4e1c\u897f\u90fd\u53ef\u4ee5\u5728\u8fd9\u4e9b\u91cc\u9762\u627e\u5230\uff0c\u767e\u884c\u4e0d\u5230\u5c31\u53ef\u4ee5\u5199\u5b8c\u4e86\uff01 http://en.cppreference.com/w/cpp/header/algorithm http://www.cplusplus.com/reference/functional/bind1st/ https://stackoverflow.com/questions/356950/c-functors-and-their-uses http://en.cppreference.com/w/cpp/language/lambda \u53e6\u5916\uff0c\u6211\u4eec\u7684oj\u5df2\u7ecf\u652f\u6301C++17\u4e86 FineArtz's solution Star /* STL-algorithm */ #include <iostream> #include <cstdio> #include <vector> #include <algorithm> using namespace std; int main(){ int n, m, tmp; scanf(\"%d%d\", &n, &m); vector<int> v; //cin >> n >> m; for (int i = 0; i < n; ++i){ scanf(\"%d\", &tmp); //cin >> tmp; v.push_back(tmp); } while (m--){ int t, i, j, a, b, c; int ans; vector<int>::iterator ite = v.begin(); scanf(\"%d%d%d\", &t, &i, &j); switch(t){ case 1: sort(v.begin() + i, v.begin() + j); break; case 2: reverse(v.begin() + i, v.begin() + j); break; case 3: for (auto it = v.begin() + i; it != v.begin() + j; ++it) printf(\"%d \", *it); //cout << *it << ' '; printf(\"\\n\"); //cout << endl; break; case 4: ans = *min_element(v.begin() + i, v.begin() + j); printf(\"%d\\n\", ans); //cout << *minn << endl; break; case 5: scanf(\"%d\", &a); //cin >> a; ans = count_if(v.begin() + i, v.begin() + j, [a](int x){return x > a;}); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 6: scanf(\"%d\", &a); ite = find(v.begin() + i, v.begin() + j, a); ans = distance(v.begin(), ite); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 7: scanf(\"%d%d\", &a, &b); //cin >> a >> b; replace(v.begin() + i, v.begin() + j, a, b); break; case 8: scanf(\"%d%d%d\", &a, &b, &c); stable_partition(v.begin() + i, v.begin() + j, [a, b, c](int x){return a * x * x + b * x + c > 0;}); break; default: break; } } return 0; }","title":"4043"},{"location":"nr/4043/#4043-stl-algorithm","text":"\u9898\u76ee","title":"4043 STL\u7cfb\u5217-algorithm"},{"location":"nr/4043/#fineartzs-solution-star","text":"/* STL-algorithm */ #include <iostream> #include <cstdio> #include <vector> #include <algorithm> using namespace std; int main(){ int n, m, tmp; scanf(\"%d%d\", &n, &m); vector<int> v; //cin >> n >> m; for (int i = 0; i < n; ++i){ scanf(\"%d\", &tmp); //cin >> tmp; v.push_back(tmp); } while (m--){ int t, i, j, a, b, c; int ans; vector<int>::iterator ite = v.begin(); scanf(\"%d%d%d\", &t, &i, &j); switch(t){ case 1: sort(v.begin() + i, v.begin() + j); break; case 2: reverse(v.begin() + i, v.begin() + j); break; case 3: for (auto it = v.begin() + i; it != v.begin() + j; ++it) printf(\"%d \", *it); //cout << *it << ' '; printf(\"\\n\"); //cout << endl; break; case 4: ans = *min_element(v.begin() + i, v.begin() + j); printf(\"%d\\n\", ans); //cout << *minn << endl; break; case 5: scanf(\"%d\", &a); //cin >> a; ans = count_if(v.begin() + i, v.begin() + j, [a](int x){return x > a;}); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 6: scanf(\"%d\", &a); ite = find(v.begin() + i, v.begin() + j, a); ans = distance(v.begin(), ite); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 7: scanf(\"%d%d\", &a, &b); //cin >> a >> b; replace(v.begin() + i, v.begin() + j, a, b); break; case 8: scanf(\"%d%d%d\", &a, &b, &c); stable_partition(v.begin() + i, v.begin() + j, [a, b, c](int x){return a * x * x + b * x + c > 0;}); break; default: break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4044/","text":"4044 STL\u7cfb\u5217-map/pq \u9898\u76ee Description \u9762\u5305\u662f\u4e00\u4e2a\u53cb\u5584\u7684\u52a9\u6559\uff0c\u4e3a\u4e86\u540c\u5b66\u4eec\u548c\u52a9\u6559\u4eec\u7684\u8eab\u5fc3\u5065\u5eb7\uff0c\u6240\u4ee5\u51fa\u4e86\u8fd9\u4e00\u5957C++ STL\u4f7f\u7528\u7cfb\u5217\uff0c\u65e8\u5728\u5e2e\u52a9\u5927\u5bb6\u719f\u6089STL\u7684\u4e00\u4e9b\u64cd\u4f5c\u3002 \u65e5\u5929\u5b66\u957f\u6709\u5f88\u591a\u5f88\u591a\u4e2a\u82f9\u679c\uff0c\u5e76\u4e14\u4ed6\u5e38\u5e38\u53bb\u4e00\u9910\u65c1\u8fb9\u7684\u6c34\u679c\u5e97\u91cc\u4e70\u82f9\u679c\uff0c\u4ed6\u628a\u5b83\u4eec\u4e00\u5806\u5806\u5730\u5806\u5728\u4e86\u5bdd\u5ba4\u91cc\uff0c\u4ed6\u5e0c\u671b\u77e5\u9053\u6bcf\u4e00\u5806\u82f9\u679c\u4e00\u91cc\u9762\u6700\u5927\u7684\u82f9\u679c\u6709\u591a\u5927\u3002\u4f60\u9700\u8981\u5904\u7406\\(n\\)\u4e2a\u64cd\u4f5c\u3002 \u65e5\u5929\u5b66\u957f\u53bb\u4e70\u4e86\u4e00\u4e2a\u5927\u5c0f\u4e3a\\(y\\)\u7684\u82f9\u679c\uff0c\u5e76\u628a\u653e\u5230\u4e86\u7b2c\\(x\\)\u5806\u82f9\u679c\u4e2d\u3002 \u65e5\u5929\u5b66\u957f\u5403\u6389\u4e86\u7b2c\\(x\\)\u5806\u82f9\u679c\u4e2d\u6700\u5927\u7684\u90a3\u4e2a\u82f9\u679c\u3002\uff08\u786e\u4fdd\u90a3\u4e00\u5806\u6709\u82f9\u679c\uff09 \u65e5\u5929\u5b66\u957f\u95ee\u4f60\u7b2c\\(x\\)\u5806\u82f9\u679c\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\u6709\u591a\u5927\u3002 \u5047\u8bbe\u65e5\u5929\u5b66\u957f\u4e00\u5f00\u59cb\u6ca1\u6709\u82f9\u679c. Input Format \u7b2c\u4e00\u884c\u4e3a\\(n\\) \u63a5\u4e0b\u6765\u7684\\(n\\)\u884c\u4e3a\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u64cd\u4f5c\u683c\u5f0f\u5982\u4e0b\uff0c \u7b2c\u4e00\u4e2a\u6570\\(t\\)\u8868\u793a\u64cd\u4f5c\u7f16\u53f7\uff0c\u5bf9\u4e8e\u5404\u4e2a\u64cd\u4f5c\u4e4b\u540e\u662f \u7b2c\\(x\\)\u5806\u548c\u65e5\u5929\u4e70\u7684\u65b0\u82f9\u679c\u7684\u5927\u5c0f\\(y\\) \u7b2c\\(x\\)\u5806 \u7b2c\\(x\\)\u5806 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u64cd\u4f5c3\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u7b54\u6848\u3002 Sample Input 10 1 205994652 166436591 3 205994652 1 205994652 442744844 2 205994652 1 802512269 688107128 1 46206654 191520151 3 205994652 2 205994652 1 802512269 487115216 3 802512269 Sample Output 166436591 166436591 688107128 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u786e\u4fdd\\(x\\)\u548c\\(y\\)\u90fd\u5728\u6574\u578b\u8303\u56f4\u5185\u3002\\(n \\le 50000\\) FineArtz's solution Star /* STL-map/pq */ #include <iostream> #include <cstdio> #include <map> #include <queue> using namespace std; int main(){ int n, t, x, y; scanf(\"%d\", &n); //cin >> n; map<int, priority_queue<int>> apple; while (n--){ scanf(\"%d\", &t); //cin >> t; switch(t){ case 1: scanf(\"%d%d\", &x, &y); //cin >> x >> y; apple[x].push(y); break; case 2: scanf(\"%d\", &x); //cin >> x; apple[x].pop(); break; case 3: scanf(\"%d\", &x); //cin >> x; printf(\"%d\\n\", apple[x].top()); //cout << apple[x].top() << endl; break; default: break; } } return 0; }","title":"4044"},{"location":"nr/4044/#4044-stl-mappq","text":"\u9898\u76ee","title":"4044 STL\u7cfb\u5217-map/pq"},{"location":"nr/4044/#fineartzs-solution-star","text":"/* STL-map/pq */ #include <iostream> #include <cstdio> #include <map> #include <queue> using namespace std; int main(){ int n, t, x, y; scanf(\"%d\", &n); //cin >> n; map<int, priority_queue<int>> apple; while (n--){ scanf(\"%d\", &t); //cin >> t; switch(t){ case 1: scanf(\"%d%d\", &x, &y); //cin >> x >> y; apple[x].push(y); break; case 2: scanf(\"%d\", &x); //cin >> x; apple[x].pop(); break; case 3: scanf(\"%d\", &x); //cin >> x; printf(\"%d\\n\", apple[x].top()); //cout << apple[x].top() << endl; break; default: break; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4045/","text":"4045 \u65e5\u5929\u8981\u8bfb\u4e66 \u9898\u76ee Description \u65e5\u5929\u60f3\u8981\u770b\u4e00\u672c\u6709n\u9875\u7684\u4e66\u3002\u4e3a\u4e86\u80fd\u591f\u63d0\u9ad8\u5bf9\u4e8e\u8fd9\u672c\u4e66\u7684\u7406\u89e3\uff0c\u65f6\u5149\u673a\u5efa\u8bae\u65e5\u5929\u4ee5\u4e00\u5b9a\u7684\u987a\u5e8f\u6765\u8bfb\u8fd9\u672c\u4e66\uff0c\u8be5\u987a\u5e8f\u8868\u793a\u4e3a\u4e00\u4e2a\\([1,2,\\cdots , n]\\)\u7684\u7f6e\u6362\\(P = [p_1,p_2,\\cdots , p_n]\\)\uff0c\u5176\u4e2d \\(p_i\\) \u8868\u793a\u7b2ci\u6b21\u9605\u8bfb\u7684\u9875\u7801\u3002 \u7136\u800c\uff0c\u6709\u4e9b\u65f6\u5019\uff0c\u65e5\u5929\u7684\u5ba4\u53cb\u6708\u6708\u9e1f\u4f1a\u5bf9\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u4f4d\u4e8e\\([l,r]\\)\u5b50\u5e8f\u5217\u505a\u4e00\u4e2a\u6392\u5e8f\u3002\u6bcf\u6b21\u6392\u5e8f\u65f6\uff0c\u65e5\u5929\u90fd\u77e5\u9053\u4ed6\u5c06\u8981\u9605\u8bfb\u7684\u9875\u7801\\(p_x\\)\u5728\u539f\u6765\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\\(x\\)\u3002\u4ed6\u60f3\u77e5\u9053\u6bcf\u6b21\u6392\u5e8f\u540e\uff0c\\(p_x\\)\u7684\u4f4d\u7f6e\u662f\u5426\u53d1\u751f\u4e86\u53d8\u5316\u3002 \u7531\u4e8e\u65e5\u5929\u5df2\u7ecf\u4e60\u60ef\u4e86\u906d\u9047\u8fd9\u6837\u7684\u4e8b\uff0c\u6240\u4ee5\u6bcf\u6b21\u6708\u6708\u9e1f\u5bf9\u5e8f\u5217\u6392\u5e8f\u540e\uff0c\u65e5\u5929\u90fd\u4f1a\u628a\u5e8f\u5217\u6062\u590d\u539f\u6765\u7684\u987a\u5e8f\uff0c\u6240\u4ee5\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u6b21\u6392\u5e8f\u662f\u72ec\u7acb\u7684\u3002 Input Format \u7b2c\u4e00\u884c\uff0c\u6709\u4e24\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u7684\u6b63\u6574\u6570n, m\\(1\\leq n, m \\leq 1e4\\)\uff0c\u5206\u522b\u4ee3\u8868\u5e8f\u5217\u957f\u5ea6\u4ee5\u53ca\u6708\u6708\u9e1f\u5bf9\u5e8f\u5217\u6392\u5e8f\u7684\u6b21\u6570 \u7b2c\u4e8c\u884c\uff0c\u6709m\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u6574\u6570\\(p_1,p_2,\\cdots , p_n (1\\leq p_i \\leq n)\\) (\u6ce8\uff1a\u7f6e\u6362\u4e2d\u4efb\u4f55\u6570\u90fd\u53ea\u51fa\u73b0\u4e00\u6b21) \u4e4b\u540e\u7684m\u884c\uff0c\u6bcf\u884c\u5305\u542b\u4e09\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570\\(l_i, r_i, x_i(1\\leq l_i \\leq r_i \\leq n, 1\\leq x_i \\leq n)\\)\uff0c\u5206\u522b\u4e3a\u6392\u5e8f\u7684\u5de6\u8fb9\u754c\uff0c\u53f3\u8fb9\u754c\u4ee5\u53ca\u65e5\u5929\u8981\u8bfb\u7684\u9875\u7801\u5728\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u6b21\u7684\u6392\u5e8f\uff0c\u8f93\u51fa\u4e00\u884c\"Yes\"\u6216\"No\"(\u4e0d\u542b\u5f15\u53f7),\u6765\u8868\u793a\u65e5\u5929\u8981\u8bfb\u9875\u7801\u7684\u662f\u5426\u5728\u539f\u4f4d\u7f6e Sample Input 1 5 5 5 4 3 2 1 1 5 3 1 3 1 2 4 3 4 4 4 2 5 3 Sample Output 1 Yes No Yes Yes No Sample Input 2 6 5 1 4 3 2 5 6 2 4 3 1 6 2 4 5 4 1 3 3 2 6 3 Sample Output 2 Yes No Yes No Yes \u6837\u4f8b\u89e3\u91ca \u5728\u6837\u4f8b1\u4e2d\uff0c [1,\u20092,\u20093,\u20094,\u20095]\u4e3a\u6392\u5e8f\u540e\u7684\u5e8f\u5217, \u539f\u6765\u7b2c3\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a\"Yes\" [3,\u20094,\u20095,\u20092,\u20091]\u4e3a\u6392\u5e8f\u540e\u7684\u5e8f\u5217, \u539f\u6765\u7b2c1\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a\"No\" [5,\u20092,\u20093,\u20094,\u20091]\u4e3a\u6392\u5e8f\u540e\u7684\u5e8f\u5217, \u539f\u6765\u7b2c3\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a\"Yes\". [5,\u20094,\u20093,\u20092,\u20091]\u4e3a\u6392\u5e8f\u540e\u7684\u5e8f\u5217, \u539f\u6765\u7b2c4\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u6ca1\u6709\u53d8\u5316\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a\"Yes\". [5,\u20091,\u20092,\u20093,\u20094]\u4e3a\u6392\u5e8f\u540e\u7684\u5e8f\u5217, \u539f\u6765\u7b2c3\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u7b54\u6848\u4e3a\"No\". Limits \u5bf9\u4e8e50%\u7684\u6570\u636e\uff0c\\(1\\leq n,m \\leq 100\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1\\leq n,m \\leq 1e4\\) FineArtz's solution Star /* \u65e5\u5929\u8981\u8bfb\u4e66 */ #include <iostream> #include <algorithm> #include <vector> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; vector<int> p(n + 1, 0); for (int i = 1; i <= n; ++i) cin >> p[i]; vector<int> q(p.begin(), p.end()); int l, r, x; while (m--){ q = p; cin >> l >> r >> x; sort(q.begin() + l, q.begin() + r + 1); auto ite = find(q.begin(), q.end(), p[x]); if (distance(q.begin(), ite) == x) cout << \"Yes\\n\"; else cout << \"No\\n\"; } return 0; }","title":"4045"},{"location":"nr/4045/#4045","text":"\u9898\u76ee","title":"4045 \u65e5\u5929\u8981\u8bfb\u4e66"},{"location":"nr/4045/#fineartzs-solution-star","text":"/* \u65e5\u5929\u8981\u8bfb\u4e66 */ #include <iostream> #include <algorithm> #include <vector> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; vector<int> p(n + 1, 0); for (int i = 1; i <= n; ++i) cin >> p[i]; vector<int> q(p.begin(), p.end()); int l, r, x; while (m--){ q = p; cin >> l >> r >> x; sort(q.begin() + l, q.begin() + r + 1); auto ite = find(q.begin(), q.end(), p[x]); if (distance(q.begin(), ite) == x) cout << \"Yes\\n\"; else cout << \"No\\n\"; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4046/","text":"4046 \u77e9\u9635\u65cb\u8f6c \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u8f93\u51fa\u8be5\u77e9\u9635 \u4ee5\u7b2c\u4e00\u884c\u7b2c\u4e00\u5217\u6570\u5b57\u4e3a\u4e2d\u5fc3\uff0c\u987a\u65f6\u9488\u65cb\u8f6c90\u5ea6 \u540e\u7684\u65b0\u77e9\u9635\uff0c\u4f8b\u5982\uff1a \u8f93\u5165\u7684\u77e9\u9635\u4e3a: 1 2 3 4 5 6 \u987a\u65f6\u9488\u65cb\u8f6c90\u5ea6\u540e\u8f93\u51fa\u7684\u77e9\u9635\u4e3a\uff1a 4 1 5 2 6 3 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570m\u548cn\uff0c\u6307\u5b9a\u8f93\u5165\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\uff080<m<=10\uff0c0<n<=10) \u5269\u4e0b\u7684\u8f93\u5165\u4e3a\u77e9\u9635\u7684\u5185\u5bb9\uff0c\u5171m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6574\u6570 \u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u9694 \u8f93\u51fa \u8f93\u51fa\u7684\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570m\u548cn\uff0c\u4e3a\u8f93\u51fa\u7684\u65b0\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570 \u5269\u4e0b\u7684\u8f93\u51fa\u4e3a\u65b0\u77e9\u9635\u7684\u5185\u5bb9\uff0c\u5171m\u884c\uff0c\u6bcf\u884cn\u4e2a\u6574\u6570 \u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u9694 \u6bcf\u884c\u6570\u636e\u7684\u6700\u540e\u65e0\u7a7a\u683c \u6700\u540e\u7684\u4e00\u884c\u8f93\u51fa\u540e\u9762\u65e0\u6362\u884c\u7b26 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 2 3 1 2 3 4 5 6 Sample Output 1 3 2 4 1 5 2 6 3 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 1 5 1 3 5 7 9 Sample Output 2 5 1 1 3 5 7 9 \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u51fa\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include <iostream> using namespace std; int main() { int m, n; int MAT[10][10]={0}; bool ENDL_FLAG = false, SPACE_FLAG = false; cin >> m >> n; for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { cin >> MAT[i][j]; } } cout << n << ' ' << m << endl; for (int j = 0; j < n; j++) { if (ENDL_FLAG) cout << endl; for (int i =(m-1); i >=0; i--) { if (SPACE_FLAG) cout << ' '; cout << MAT[i][j]; SPACE_FLAG = true; } ENDL_FLAG = true; SPACE_FLAG = false; } return 0; } FineArtz's solution Star /* \u77e9\u9635\u65cb\u8f6c */ #include <iostream> using namespace std; int main(){ int m, n; int a[15][15]; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; cout << n << ' ' << m << endl; for (int i = 1; i <= n; ++i){ for (int j = m; j >= 1; --j) cout << a[j][i] << ' '; cout << endl; } return 0; }","title":"4046"},{"location":"nr/4046/#4046","text":"\u9898\u76ee","title":"4046 \u77e9\u9635\u65cb\u8f6c"},{"location":"nr/4046/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int m, n; int MAT[10][10]={0}; bool ENDL_FLAG = false, SPACE_FLAG = false; cin >> m >> n; for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { cin >> MAT[i][j]; } } cout << n << ' ' << m << endl; for (int j = 0; j < n; j++) { if (ENDL_FLAG) cout << endl; for (int i =(m-1); i >=0; i--) { if (SPACE_FLAG) cout << ' '; cout << MAT[i][j]; SPACE_FLAG = true; } ENDL_FLAG = true; SPACE_FLAG = false; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/4046/#fineartzs-solution-star","text":"/* \u77e9\u9635\u65cb\u8f6c */ #include <iostream> using namespace std; int main(){ int m, n; int a[15][15]; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; cout << n << ' ' << m << endl; for (int i = 1; i <= n; ++i){ for (int j = m; j >= 1; --j) cout << a[j][i] << ' '; cout << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4047/","text":"4047 \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u5728\u516c\u5143\u524d3\u4e16\u7eaa\uff0c\u53e4\u5e0c\u814a\u5929\u6587\u5b66\u5bb6\u57c3\u62c9\u6258\u8272\u5c3c\u53d1\u73b0\u4e86\u4e00\u79cd\u627e\u51fa\u4e0d\u5927\u4e8en\u7684\u6240\u6709\u81ea\u7136\u6570\u4e2d\u7684\u7d20\u6570\u7684\u7b97\u6cd5\uff0c\u5373\u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u9009\u6cd5\u3002\u8fd9\u79cd\u7b97\u6cd5\u80fd\u6bd4\u6bd4\u6734\u7d20\u7684\u904d\u5386\u6cd5\u66f4\u5feb\u5730\u627e\u51fa\u7d20\u6570\uff0c\u5b83\u9996\u5148\u9700\u8981\u6309\u987a\u5e8f\u5199\u51fa2\u5230n\u4e2d\u6240\u6709\u7684\u6570\u3002\u4ee5n=20\u4e3a\u4f8b\uff1a 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u7136\u540e\u628a\u7b2c\u4e00\u4e2a\u5143\u7d20\u753b\u5708\uff0c\u8868\u793a\u5b83\u662f\u7d20\u6570\uff0c\u7136\u540e\u4f9d\u6b21\u5bf9\u540e\u7eed\u5143\u7d20\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\u5982\u679c\u540e\u9762\u7684\u5143\u7d20\u662f\u753b\u5708\u5143\u7d20\u7684\u500d\u6570\uff0c\u5c31\u753bX\uff0c\u8868\u793a\u8be5\u6570\u4e0d\u662f\u7d20\u6570\u3002\u5728\u6267\u884c\u5b8c\u7b2c\u4e00\u6b65\u540e\uff0c\u4f1a\u5f97\u5230\u7d20\u65702\uff0c\u800c\u6240\u6709\u662f2\u7684\u500d\u6570\u7684\u6570\u5c06\u5168\u88ab\u753b\u6389\uff0c\u56e0\u4e3a\u4ed6\u4eec\u80af\u5b9a\u4e0d\u662f\u7d20\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u53ea\u9700\u8981\u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u628a\u7b2c\u4e00\u4e2a\u65e2\u6ca1\u6709\u88ab\u5708\u53c8\u6ca1\u6709\u753bX\u7684\u5143\u7d20\u5708\u8d77\u6765\uff0c\u7136\u540e\u628a\u540e\u7eed\u7684\u662f\u5b83\u7684\u500d\u6570\u7684\u6570\u5168\u90e8\u753bX\u3002\u672c\u4f8b\u4e2d\u8fd9\u6b21\u64cd\u4f5c\u5c06\u5f97\u5230\u7d20\u65703\uff0c\u800c\u6240\u6709\u662f3\u7684\u500d\u6570\u7684\u6570\u90fd\u88ab\u53bb\u6389\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u6570\u7ec4\u4e2d\u6240\u6709\u7684\u5143\u7d20\u4e0d\u662f\u753b\u5708\u5c31\u662f\u753bX\u3002\u6240\u6709\u88ab\u5708\u8d77\u6765\u7684\u5143\u7d20\u5747\u662f\u7d20\u6570\uff0c\u800c\u6240\u6709\u753bX\u7684\u5143\u7d20\u5747\u662f\u5408\u6570\u3002\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5b9e\u73b0\u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u9009\u6cd5\u627e\u51fa\u5c0f\u4e8e\u6216\u7b49\u4e8e\u8be5\u6570\u5b57\u7684\u7684\u6240\u6709\u7d20\u6570\u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570n, 2\u2264n\u22642000000 \u8f93\u51fa \u8f93\u51fa\u4e3a\u4e00\u884c\uff0c\u8f93\u51fa\u6240\u6709\u5c0f\u4e8e\u6216\u7b49\u4e8e\u8f93\u5165\u7684\u7d20\u6570 \u6570\u636e\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u9694 \u6700\u540e\u7684\u4e00\u884c\u8f93\u51fa\u540e\u9762\u65e0\u7a7a\u683c \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 5 Sample Output 1 2 3 5 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 20 Sample Output 2 2 3 5 7 11 13 17 19 \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u51fa\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include<iostream> using namespace std; int main() { int n; cin >> n; bool *Isprime = new bool[2000001]; bool SPACE_FLAG = false; Isprime[0] = false; Isprime[1] = false; for (int i = 2; i <= n; i++) { if (!Isprime[i])continue; for (int j = 2; i * j <= n; j++) { Isprime[i * j] = false; } if (SPACE_FLAG)cout << ' '; cout << i; SPACE_FLAG = true; } return 0; } FineArtz's solution Star /* \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 */ #include <iostream> using namespace std; bool isp[2000001]; int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 2; i <= n; ++i){ if (!isp[i]){ cout << i << ' '; for (int j = i; j <= n; j = j + i){ isp[j] = true; } } } return 0; }","title":"4047"},{"location":"nr/4047/#4047","text":"\u9898\u76ee","title":"4047 \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5"},{"location":"nr/4047/#victrids-solution-star","text":"#include<iostream> using namespace std; int main() { int n; cin >> n; bool *Isprime = new bool[2000001]; bool SPACE_FLAG = false; Isprime[0] = false; Isprime[1] = false; for (int i = 2; i <= n; i++) { if (!Isprime[i])continue; for (int j = 2; i * j <= n; j++) { Isprime[i * j] = false; } if (SPACE_FLAG)cout << ' '; cout << i; SPACE_FLAG = true; } return 0; }","title":"VictriD's solution Star"},{"location":"nr/4047/#fineartzs-solution-star","text":"/* \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 */ #include <iostream> using namespace std; bool isp[2000001]; int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 2; i <= n; ++i){ if (!isp[i]){ cout << i << ' '; for (int j = i; j <= n; j = j + i){ isp[j] = true; } } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4048/","text":"4048 Evensgn\u7684\u575a\u5b9a\u4e4b\u684c \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 Evensgn \u8ba2\u8d2d\u4e86\u4e00\u5f20\u6f02\u4eae\u7684\u65b0\u684c\u5b50\uff0c\u62c6\u5f00\u5305\u88c5\u65f6\uff0c\u4ed6\u624d\u53d1\u73b0\u8fd9\u5f20\u684c\u5b50\u662f\u4e0d\u7a33\u5b9a\u7684\u3002 var index = 0; var str = document.getElementById(\"string\").innerHTML; function type() { document.getElementById(\"showStr\").innerText = str.substring(0, index++); } if (index < str.length) setInterval(type, 200); \u8fd9\u5f20\u684c\u5b50\u4e00\u5171\u6709 \\(n\\) \u6761\u817f\uff0c\u7b2c \\(i\\) \u6761\u817f\u7684\u957f\u5ea6\u4e3a \\(l_i\\)\u3002 Evensgn \u51b3\u5b9a\u62c6\u9664\u8fd9\u5f20\u684c\u5b50\u7684\u4e00\u4e9b\u684c\u817f\u6765\u4f7f\u5b83\u53d8\u5f97\u7a33\u5b9a\u3002\u5bf9\u4e8e\u6bcf\u6761\u684c\u817f\uff0c Evensgn \u5df2\u7ecf\u9884\u5224\u51fa\u4e86 \\(d_i\\) \u2014\u2014\u62c6\u9664\u7b2c \\(i\\) \u6761\u684c\u817f\u6240\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u6709\u8fd9\u6837\u4e00\u53e5\u53e4\u8001\u7684\u8c1a\u8bed\uff0c\u201c\u4e00\u5f20\u6709 \\(k\\) \u6761\u817f\u7684\u684c\u5b50\u88ab\u79f0\u4f5c\u662f \u7a33\u5b9a\u7684 \uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u6709 \u591a\u4e8e\u4e00\u534a\u6570\u91cf \u7684\u684c\u817f\u662f\u6700\u5927\u957f\u5ea6\u7684\u3002\u201d \u4f8b\u5982\uff0c\u5982\u679c\u4e00\u5f20\u6709 \\(5\\) \u6761\u684c\u817f\u7684\u684c\u5b50\u662f\u7a33\u5b9a\u7684\uff0c\u90a3\u4e48\u5b83\u7684 \\(5\\) \u6761\u684c\u817f\u4e2d\u81f3\u5c11\u6709 \\(3\\) \u6761\u684c\u817f\u662f\u6700\u5927\u957f\u5ea6\u7684\u3002\u53c8\u4f8b\u5982\uff0c\u4e00\u5f20\u53ea\u6709 \\(1\\) \u6761\u684c\u817f\u7684\u684c\u5b50\u603b\u662f\u7a33\u5b9a\u7684\uff0c\u800c\u4e00\u5f20\u6709 \\(2\\) \u6761\u684c\u817f\u7684\u684c\u5b50\u662f\u7a33\u5b9a\u7684\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e24\u6761\u684c\u817f\u662f\u76f8\u540c\u957f\u5ea6\u7684\u3002 Evensgn \u60f3\u8981\u7559\u51fa\u65f6\u95f4\u770b \u300a\u9003\u907f\u867d\u53ef\u803b\u4f46\u6709\u7528\u300b \u91cc\u7684 gakki \uff0c\u56e0\u6b64\u4ed6\u5e0c\u671b\u5728\u6700\u5c11\u7684\u65f6\u95f4\u5185\u5c06\u8fd9\u5f20\u684c\u5b50\u53d8\u6210 \u7a33\u5b9a\u7684 \u3002\u4ed6\u627e\u5230\u4e86\u4f60\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u8ba1\u7b97\u4ed6\u6240\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u662f\u591a\u5c11\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6574\u6570 \\(n\\) \uff0c\u8868\u793a Evensgn \u7684\u65b0\u684c\u539f\u5148\u7684\u684c\u817f\u6570\u91cf\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\u4e3a \\(n\\) \u4e2a\u6574\u6570 \\(l_i\\)\uff0c\\(l_i\\) \u8868\u793a\u7b2c \\(i\\) \u6761\u684c\u817f\u7684\u957f\u5ea6\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\u4e3a \\(n\\) \u4e2a\u6574\u6570 \\(d_i\\)\uff0c\\(d_i\\) \u8868\u793a Evensgn \u62c6\u9664\u7b2c \\(i\\) \u6761\u684c\u817f\u6240\u9700\u8981\u82b1\u8d39\u7684\u65f6\u95f4\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c Evensgn \u5c06\u65b0\u684c\u53d8\u6210 \u7a33\u5b9a\u7684 \u6240\u9700\u8981\u82b1\u8d39\u7684\u6700\u5c11\u65f6\u95f4\u3002 \u8f93\u5165\u8f93\u51fa\u6837\u4f8b \u4e0d\u77e5\u4e3a\u4f55\uff0c\u8fd9\u9053\u9898\u76ee\u7684\u6837\u4f8b\u6570\u91cf\u7adf\u7136\u8fbe\u5230\u4e86\u60ca\u4eba\u7684 \\(3\\) \u7ec4\u3002 \u6837\u4f8b\u8f93\u51651 2 1 5 3 2 \u6837\u4f8b\u8f93\u51fa1 2 \u6837\u4f8b\u8f93\u51652 3 2 4 4 1 1 1 \u6837\u4f8b\u8f93\u51fa2 0 \u6837\u4f8b\u8f93\u51653 6 2 2 1 1 3 3 4 3 5 5 2 1 \u6837\u4f8b\u8f93\u51fa3 8 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e \\(30\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 100, 1 \\leq l_i \\leq 10^5, 1 \\leq d_i \\leq 200\\)\u3002 \u5bf9\u4e8e \\(70\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 1000, 1 \\leq l_i \\leq 10^5, 1 \\leq d_i \\leq 200\\)\u3002 \u5bf9\u4e8e \\(100\\%\\) \u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 10^5, 1 \\leq l_i \\leq 10^5, 1 \\leq d_i \\leq 200\\)\u3002 FineArtz's solution Star /* Evensgn\u7684\u575a\u5b9a\u4e4b\u684c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Leg{ public: int d = 0, l = 0; }; bool cmp(Leg l1, Leg l2){ return (l1.l < l2.l || (l1.l == l2.l && l1.d < l2.d)); } /*bool cmp2(Leg l1, Leg l2){ return (l1.d < l2.d); }*/ Leg leg[100005]; int f[100005], d[205]; int n; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> leg[i].l; for (int i = 1; i <= n; ++i) cin >> leg[i].d; sort(leg + 1, leg + n + 1, cmp); f[1] = 0; int nowl = 1; for (int i = 2; i <= n; ++i){ if (leg[i].l == leg[i - 1].l) ++nowl; else{ for (int k = i - 1; k >= i - nowl; --k) ++d[leg[k].d]; nowl = 1; } if (nowl > i / 2) f[i] = 0; else{ int tmp1 = f[i - 1] + leg[i].d; int tmp2 = 0, cnt = 0, lim = i - 2 * nowl + 1; for (int k = 0; k <= 200; ++k){ if (cnt + d[k] >= lim){ tmp2 += k * (lim - cnt); break; } else{ tmp2 += k * d[k]; cnt += d[k]; } } f[i] = min(tmp1, tmp2); } } cout << f[n] << endl; return 0; }","title":"4048"},{"location":"nr/4048/#4048-evensgn","text":"\u9898\u76ee","title":"4048 Evensgn\u7684\u575a\u5b9a\u4e4b\u684c"},{"location":"nr/4048/#fineartzs-solution-star","text":"/* Evensgn\u7684\u575a\u5b9a\u4e4b\u684c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Leg{ public: int d = 0, l = 0; }; bool cmp(Leg l1, Leg l2){ return (l1.l < l2.l || (l1.l == l2.l && l1.d < l2.d)); } /*bool cmp2(Leg l1, Leg l2){ return (l1.d < l2.d); }*/ Leg leg[100005]; int f[100005], d[205]; int n; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> leg[i].l; for (int i = 1; i <= n; ++i) cin >> leg[i].d; sort(leg + 1, leg + n + 1, cmp); f[1] = 0; int nowl = 1; for (int i = 2; i <= n; ++i){ if (leg[i].l == leg[i - 1].l) ++nowl; else{ for (int k = i - 1; k >= i - nowl; --k) ++d[leg[k].d]; nowl = 1; } if (nowl > i / 2) f[i] = 0; else{ int tmp1 = f[i - 1] + leg[i].d; int tmp2 = 0, cnt = 0, lim = i - 2 * nowl + 1; for (int k = 0; k <= 200; ++k){ if (cnt + d[k] >= lim){ tmp2 += k * (lim - cnt); break; } else{ tmp2 += k * d[k]; cnt += d[k]; } } f[i] = min(tmp1, tmp2); } } cout << f[n] << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4053/","text":"4053 Prime Ring \u9898\u76ee Description \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570N\uff0c\u8bf7\u4f60\u5c061,2,3...N\u7ec4\u6210\u4e00\u4e2a\u9996\u5c3e\u76f8\u63a5\u7684\u73af\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u6570\u4e4b\u548c\u4e3a\u7d20\u6570\u3002 \u8bf7\u6309\u5b57\u5178\u5e8f\u8f93\u51fa\u6240\u6709\u53ef\u80fd\u65b9\u6848\u3002\u82e5\u65e0\u5408\u6cd5\u65b9\u6848\u8bf7\u8f93\u51fa\"None\"\u3002 \u7531\u4e8e\u6570\u5b57\u7ec4\u6210\u7684\u662f\u4e00\u4e2a\u9996\u5c3e\u76f8\u63a5\u7684\u73af\uff0c\u89c4\u5b9a\u8f93\u51fa\u65f6\u4ece1\u7684\u4f4d\u7f6e\u5f00\u59cb\u6309\u7167\u987a\u65f6\u9488\u8f93\u51fa\u3002 \u4f8b\u5982: -2-3-4-1- \u8bf7\u8f93\u51fa\u4e3a 1 2 3 4 -3-2-1-4- \u8bf7\u8f93\u51fa\u4e3a 1 4 3 2 Input Format \u4e00\u884c,\u4e00\u4e2a\u6574\u6570N\u3002 (2 <= N <= 16) Output Format 1-k\u884c\uff0c\u6309\u5b57\u5178\u5e8f\u8f93\u51fak\u4e2a\u7b54\u6848\uff0c\u4f7f\u7528\u7a7a\u683c\u95f4\u9694N\u4e2a\u6570\u5b57 \u82e5\u6ca1\u6709\u7b54\u6848\u8f93\u51faNone Sample Input 4 Sample Output 1 2 3 4 1 4 3 2 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e40%\u7684\u6570\u636e (2 <= N < 10) \u5bf9\u4e8e100%\u7684\u6570\u636e (2 <= N <= 16) FineArtz's solution Star /* Prime Ring */ #include <iostream> #include <cmath> using namespace std; bool canplace[17][17]; bool beplaced[17]; int a[20]; int n; bool isp(int x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } bool check(int a[], int n){ for (int i = 0; i <= n - 1; ++i) if (!isp(a[i] + a[i + 1])) return false; return true; } void dfs(int x){ if (x == n + 1){ for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << '\\n'; return; } for (int i = 2 - x % 2; i <= n; i += 2){ if (!beplaced[i] && canplace[i][a[x - 1]]){ if (x == n && !canplace[i][1]) continue; beplaced[i] = true; a[x] = i; dfs(x + 1); a[x] = 0; beplaced[i] = false; } } } int main(){ cin >> n; if (n % 2 != 0){ cout << \"None\" << endl; } for (int i = 2; i <= n; ++i) for (int j = 1; j < i; ++j){ if (isp(i + j)) canplace[i][j] = true; else canplace[i][j] = false; canplace[j][i] = canplace[i][j]; } a[1] = 1; beplaced[1] = true; dfs(2); return 0; }","title":"4053"},{"location":"nr/4053/#4053-prime-ring","text":"\u9898\u76ee","title":"4053 Prime Ring"},{"location":"nr/4053/#fineartzs-solution-star","text":"/* Prime Ring */ #include <iostream> #include <cmath> using namespace std; bool canplace[17][17]; bool beplaced[17]; int a[20]; int n; bool isp(int x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } bool check(int a[], int n){ for (int i = 0; i <= n - 1; ++i) if (!isp(a[i] + a[i + 1])) return false; return true; } void dfs(int x){ if (x == n + 1){ for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << '\\n'; return; } for (int i = 2 - x % 2; i <= n; i += 2){ if (!beplaced[i] && canplace[i][a[x - 1]]){ if (x == n && !canplace[i][1]) continue; beplaced[i] = true; a[x] = i; dfs(x + 1); a[x] = 0; beplaced[i] = false; } } } int main(){ cin >> n; if (n % 2 != 0){ cout << \"None\" << endl; } for (int i = 2; i <= n; ++i) for (int j = 1; j < i; ++j){ if (isp(i + j)) canplace[i][j] = true; else canplace[i][j] = false; canplace[j][i] = canplace[i][j]; } a[1] = 1; beplaced[1] = true; dfs(2); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4054/","text":"4054 \u4f2a\u56de\u6587\u6570 \u9898\u76ee Description \u53e3\u53e3\u541b\u7279\u522b\u559c\u6b22\u56de\u6587\u6570\uff0c\u7531\u4e8e\u5df2\u7ecf\u8003\u8fc7\u56de\u6587\u6570\uff0c\u53e3\u53e3\u541b\u53ea\u597d\u9020\u51fa\u4e86\u4f2a\u56de\u6587\u6570\u3002\u5b9a\u4e49\u5982\u4e0b\uff1a \u5bf9\u4e8e\u4e00\u4e2a\u5341\u8fdb\u5236\u975e\u8d1f\u6574\u6570 X\uff0c\u5982\u679c\u4ed6\u7684\u7b2c\u4e00\u4f4d\u7b49\u4e8e\u4ed6\u7684\u6700\u540e\u4e00\u4f4d\uff0c\u5219\u79f0 X \u4e3a\u4f2a\u56de\u6587\u6570\u3002 \u5982\uff0c101, 477474 \u4ee5\u53ca 9 \u90fd\u5c5e\u4e8e\u4f2a\u56de\u6587\u6570\u3002\u53e3\u53e3\u541b\u5f88\u597d\u5947\u5bf9\u4e8e\u4e00\u4e2a\u7ed9\u5b9a\u533a\u95f4 [L, R] ( L <= R \u4e14 L, R \u90fd\u662f\u975e\u8d1f\u6574\u6570)\u7a76\u7adf\u6709\u591a\u5c11\u4e2a\u8fd9\u6837\u7684\u4f2a\u56de\u6587\u6570\u3002 Input Format \u4e00\u884c\uff0c\u5305\u542b\u975e\u8d1f\u6574\u6570 L \u548c R (1 <= L <= R <= 10^18)\u3002 Output Format \u4e00\u884c\uff0c\u533a\u95f4 [L, R] \u5185\u4f2a\u56de\u6587\u6570\u7684\u4e2a\u6570\u3002 Sample Input 2 47 Sample Output 12 Sample Input 47 1024 Sample Output 98 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e 50% \u7684\u6570\u636e (0 <= R - L <= 10^5) \u5bf9\u4e8e 100% \u7684\u6570\u636e (1 <= L <= R <= 10^18) FineArtz's solution Star /* \u4f2a\u56de\u6587\u6570 */ #include <iostream> #include <cmath> using namespace std; inline int firstDigit(long long r){ while (r >= 10) r /= 10; return r; } long long f(long long x){ if (x < 10) return x + 1; return (9 + x / 10 + (int)(x % 10 >= firstDigit(x))); } int main(){ long long l, r; cin >> l >> r; long long ans = f(r) - f(l - 1); cout << ans << endl; return 0; }","title":"4054"},{"location":"nr/4054/#4054","text":"\u9898\u76ee","title":"4054 \u4f2a\u56de\u6587\u6570"},{"location":"nr/4054/#fineartzs-solution-star","text":"/* \u4f2a\u56de\u6587\u6570 */ #include <iostream> #include <cmath> using namespace std; inline int firstDigit(long long r){ while (r >= 10) r /= 10; return r; } long long f(long long x){ if (x < 10) return x + 1; return (9 + x / 10 + (int)(x % 10 >= firstDigit(x))); } int main(){ long long l, r; cin >> l >> r; long long ans = f(r) - f(l - 1); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4057/","text":"4057 \u56de\u6587\u5b57\u7b26\u4e32 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u56de\u6587\u5b57\u7b26\u4e32\u662f\u5177\u6709\u56de\u6587\u7279\u6027\u7684\u5b57\u7b26\u4e32\uff1a\u5373\u8be5\u5b57\u7b26\u4e32\u4ece\u5de6\u5411\u53f3\u8bfb\u548c\u4ece\u53f3\u5411\u5de6\u8bfb\u90fd\u4e00\u6837\uff0c\u5355\u72ec\u7684\u5b57\u6bcd\u4e0d\u4f5c\u4e3a\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982abcddcba\u5373\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a8\u7684\u56de\u6587\u5b57\u7b26\u4e32\u3002 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u5165\u4e00\u4e2a\u5168\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u8f93\u51fa\u6700\u957f\u56de\u6587\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u548c\u6700\u957f\u7684\u56de\u6587\u5b57\u7b26\u4e32\uff08\u957f\u5ea6\u76f8\u540c\u7684\u8f93\u51fa\u7b2c\u4e00\u4e2a\uff09\uff0c\u82e5\u65e0\u56de\u6587\u5b57\u7b26\u4e32\uff0c\u53ea\u8f93\u51fa0\u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u7b2c\u4e00\u884c\u4e3a\u53ea\u542b\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32\uff0c\u957f\u5ea6\u4e0d\u8d85\u8fc710000\u5b57\u7b26\u3002 \u8f93\u51fa \u8f93\u51fa\u7ed3\u679c\u7b2c\u4e00\u884c\u4e3a\u6700\u957f\u56de\u6587\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 \u8f93\u51fa\u7ed3\u679c\u7b2c\u4e8c\u884c\u4e3a\u6700\u957f\u7684\u56de\u6587\u5b57\u7b26\u4e32 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 abcdef Sample Output 1 0 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 abcba Sample Output 2 5 abcba \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b3 Sample Input 3 aAabccbaABcdcBA Sample Output 3 8 AabccbaA \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u8f93\u51fa\u7ed3\u675f\u540e\u4e0d\u8981\u8f93\u51fa\u4efb\u4f55\u5185\u5bb9\uff0c \u5305\u62ec\u7a7a\u683c\u548c\u6362\u884c \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u51fa\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include <iostream> #include <cstring> #define ODD 1 #define EVEN 0 using namespace std; string input; int length = 0; int Leftrecorder = 0, Rightrecorder = 0; int update(int i, int pattern) { int leftlimit, rightlimit; if (pattern == ODD) { leftlimit = i; rightlimit = i; } else { if (i + 1 >= length || input[i] != input[i + 1]) return 0; leftlimit = i; rightlimit = i + 1; } while (leftlimit - 1 >= 0 && rightlimit + 1 <= length - 1 && input[leftlimit - 1] == input[rightlimit + 1]) { --leftlimit; ++rightlimit; } if (rightlimit - leftlimit > 0 && rightlimit - leftlimit > Rightrecorder - Leftrecorder) { Leftrecorder = leftlimit; Rightrecorder = rightlimit; } } int main() { cin >> input; length = input.length(); for (int i = 0; i < length; ++i) { update(i, ODD); update(i, EVEN); } if (Rightrecorder - Leftrecorder) { cout << Rightrecorder - Leftrecorder + 1 << endl; for (int i = Leftrecorder; i <= Rightrecorder; ++i) cout << input[i]; } else cout << 0; return 0; }","title":"4057"},{"location":"nr/4057/#4057","text":"\u9898\u76ee","title":"4057 \u56de\u6587\u5b57\u7b26\u4e32"},{"location":"nr/4057/#victrids-solution-star","text":"#include <iostream> #include <cstring> #define ODD 1 #define EVEN 0 using namespace std; string input; int length = 0; int Leftrecorder = 0, Rightrecorder = 0; int update(int i, int pattern) { int leftlimit, rightlimit; if (pattern == ODD) { leftlimit = i; rightlimit = i; } else { if (i + 1 >= length || input[i] != input[i + 1]) return 0; leftlimit = i; rightlimit = i + 1; } while (leftlimit - 1 >= 0 && rightlimit + 1 <= length - 1 && input[leftlimit - 1] == input[rightlimit + 1]) { --leftlimit; ++rightlimit; } if (rightlimit - leftlimit > 0 && rightlimit - leftlimit > Rightrecorder - Leftrecorder) { Leftrecorder = leftlimit; Rightrecorder = rightlimit; } } int main() { cin >> input; length = input.length(); for (int i = 0; i < length; ++i) { update(i, ODD); update(i, EVEN); } if (Rightrecorder - Leftrecorder) { cout << Rightrecorder - Leftrecorder + 1 << endl; for (int i = Leftrecorder; i <= Rightrecorder; ++i) cout << input[i]; } else cout << 0; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4059/","text":"4059 \u6c42\u6570\u7ec4\u6700\u5927\u503c\u53ca\u4f4d\u7f6e \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u8f93\u5165n\u4e2a\u4e0d\u76f8\u540c\u7684\u6b63\u6574\u6570\uff080<n<100\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u5176\u6700\u5927\u503c\u4ee5\u53ca\u6700\u5927\u503c\u6240\u5728\u7684\u4f4d\u7f6e \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570n,\u4ee5\u53ca\u4e00\u884cn\u4e2a\u6570\uff0cn+1\u4e2a\u6570\u4e4b\u95f4\u4ee5\u7a7a\u683c\u5206\u9694 \u8f93\u51fa \u4e24\u4e2a\u6570\uff0c\u524d\u4e00\u4e2a\u662f\u6700\u5927\u503c\uff0c\u540e\u4e00\u4e2a\u662f\u4f4d\u7f6e\uff0c\u4e24\u4e2a\u6570\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u5206\u9694 \u7a0b\u5e8f\u8fd0\u884c\u5b9e\u4f8b Sample Input 5 6 7 3 4 21 Sample Output 21 5 vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; int main() { int n, tmp, max = 0, pos; scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &tmp); if (tmp > max) { max = tmp; pos = i; } } printf(\"%d %d\", max, pos + 1); return 0; }","title":"4059"},{"location":"nr/4059/#4059","text":"\u9898\u76ee","title":"4059 \u6c42\u6570\u7ec4\u6700\u5927\u503c\u53ca\u4f4d\u7f6e"},{"location":"nr/4059/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int main() { int n, tmp, max = 0, pos; scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &tmp); if (tmp > max) { max = tmp; pos = i; } } printf(\"%d %d\", max, pos + 1); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4062/","text":"4062 \u65e5\u5929\u5708\u5730 \u9898\u76ee Description \u65e5\u5929\u5b66\u957f\u7531\u4e8e\u5728\u5404\u65b9\u9762\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u4e2d\u592e\u51b3\u5b9a\u5956\u52b1\u4ed6\u4e00\u5757\u77e9\u5f62\u7684\u8015\u5730\u3002 \u65e5\u5929\u5b66\u957f\u5f97\u5230\u8fd9\u5757\u8015\u5730\u4e4b\u540e\uff0c\u4e0d\u5e78\u67d3\u4e0a\u4e86\u5f3a\u8feb\u75c7\u3002 \u4ed6\u8981\u628a\u8fd9\u4e2a\u8015\u5730\u5206\u4e3a\u82e5\u5e72\u4e2a\u6b63\u65b9\u5f62\uff0c\u5e76\u4e14\u8981\u628a\u8fd9\u4e9b\u6b63\u65b9\u5f62\u7528\u7bf1\u7b06\u56f4\u8d77\u6765\uff0c\u56f4\u51fa\u6bcf\u4e00\u4e2a\u6b63\u65b9\u5f62\u6240\u6d88\u8017\u7bf1\u7b06\u7684\u957f\u5ea6\u5373\u4e3a\u8fd9\u4e2a\u6b63\u65b9\u5f62\u7684\u5468\u957f\u3002 \uff08\u6ce8\u610f\uff1a\u5bf9\u4e8e\u4e24\u4e2a\u5c0f\u6b63\u65b9\u5f62\u7684\u516c\u5171\u8fb9\uff0c\u6309\u4e24\u5c42\u7bf1\u7b06\u8ba1\u7b97\u3002\u56e0\u6b64\u7bf1\u7b06\u7684\u603b\u957f\u5ea6\u5373\u4e3a\u5206\u6210\u7684\u6240\u6709\u5c0f\u6b63\u65b9\u5f62\u7684\u5468\u957f\u4e4b\u548c\uff09 \u65e5\u5929\u5b66\u957f\u4e3a\u4e86\u7701\u4e0b\u4e00\u4e9b\u94b1\u53bb\u7ea6\u4f1a\uff0c\u5e0c\u671b\u80fd\u591f\u5c3d\u53ef\u80fd\u51cf\u5c11\u7bf1\u7b06\u7684\u957f\u5ea6\u3002\u8bf7\u4f60\u5e2e\u4ed6\u8bbe\u8ba1\u4e00\u4e2a\u65b9\u6848\u3002 Input Format \u4e24\u4e2a\u6b63\u6574\u6570x,y\uff0c\u8868\u793a\u77e9\u5f62\u8015\u5730\u7684\u4e24\u8fb9\u957f\u3002 \u5bf9\u4e8e50%\u7684\u6570\u636e\uff0cx,y < 10^4\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0cx,y < 10^16\uff1b Output Format \u4e00\u4e2a\u6b63\u6574\u6570z\uff0c\u8868\u793a\u6240\u9700\u8981\u7bf1\u7b06\u7684\u6700\u5c0f\u957f\u5ea6\uff08\u5373\u4e3a\u6240\u5206\u6210\u7684\u6240\u6709\u5c0f\u6b63\u65b9\u5f62\u7684\u5468\u957f\u4e4b\u548c\uff09 Sample Input 1 2 Sample Output 8 VictriD's solution Star #include <iostream> using namespace std; long long seq(long long x, long long y) { if (x < y) return seq(y, x); if (y == 0) return 0; return x / y * 4 * y + seq(y, x % y); } int main() { long long x, y; cin >> x >> y; cout << seq(x, y); return 0; } FineArtz's solution Star /* \u65e5\u5929\u5708\u5730 */ #include <iostream> using namespace std; long long f(long long x, long long y){ long long t, ret; if (x > y){ t = x; x = y; y = t; } ret = 4 * x * (y / x); y = y % x; if (y == 0) return ret; else return ret + f(y, x); } int main(){ long long x, y, ans; cin >> x >> y; ans = f(x, y); cout << ans << endl; return 0; } vvvvv1v's solution Star #include <iostream> using namespace std; int main() { long int x, y; cin >> x >> y; long int sum = 0; long int tmp; if (x < y) { tmp = x; x = y; y = tmp; } while (y != 0) { sum += y; tmp = x - y; x = (y > tmp ? y : tmp); y = (y < tmp ? y : tmp); } cout << 4 * sum; return 0; } WashSwang's solution Star #include <iostream> using namespace std; long long a,b; long long x(long long a,long long b) { if (b!=0) return a/b*4*b+x(b,a%b); else return 0; } int main() { cin>>a>>b; cout<<x(a,b); return 0; }","title":"4062"},{"location":"nr/4062/#4062","text":"\u9898\u76ee","title":"4062 \u65e5\u5929\u5708\u5730"},{"location":"nr/4062/#victrids-solution-star","text":"#include <iostream> using namespace std; long long seq(long long x, long long y) { if (x < y) return seq(y, x); if (y == 0) return 0; return x / y * 4 * y + seq(y, x % y); } int main() { long long x, y; cin >> x >> y; cout << seq(x, y); return 0; }","title":"VictriD's solution Star"},{"location":"nr/4062/#fineartzs-solution-star","text":"/* \u65e5\u5929\u5708\u5730 */ #include <iostream> using namespace std; long long f(long long x, long long y){ long long t, ret; if (x > y){ t = x; x = y; y = t; } ret = 4 * x * (y / x); y = y % x; if (y == 0) return ret; else return ret + f(y, x); } int main(){ long long x, y, ans; cin >> x >> y; ans = f(x, y); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4062/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { long int x, y; cin >> x >> y; long int sum = 0; long int tmp; if (x < y) { tmp = x; x = y; y = tmp; } while (y != 0) { sum += y; tmp = x - y; x = (y > tmp ? y : tmp); y = (y < tmp ? y : tmp); } cout << 4 * sum; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4062/#washswangs-solution-star","text":"#include <iostream> using namespace std; long long a,b; long long x(long long a,long long b) { if (b!=0) return a/b*4*b+x(b,a%b); else return 0; } int main() { cin>>a>>b; cout<<x(a,b); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4065/","text":"4065 \u6cf7\u7684\u65c5\u9014 \u9898\u76ee Description \u6df1\u79cb\u5b63\u8282\uff0c\u5929\u6c14\u6e10\u51c9\uff0c\u4e09\u53f6\u7531\u4e8e\u6700\u8fd1\u671f\u4e2d\u8003\u8bd5\u592a\u8fc7\u5fd9\u788c\uff0c\u8fde\u7eed\u71ac\u591c\uff0c\u4e0d\u614e\u67d3\u4e0a\u4e86\u611f\u5192\u3002\u6cf7\u542c\u8bf4\u540e\uff0c\u975e\u5e38\u62c5\u5fe7\uff0c\u4e8e\u662f\u51b3\u5b9a\u51fa\u53d1\u53bb\u770b\u4e09\u53f6\u3002\u5df2\u77e5\u6cf7\u548c\u4e09\u53f6\u5904\u5728\u4e00\u4e2a\u77e9\u5f62\u7f51\u683c\u4e0a\uff0c\u6cf7\u6bcf\u6b21\u53ef\u4ee5\u4e0a\u4e0b\u5de6\u53f3\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u662f\u4ed6\u4e0d\u80fd\u8d8a\u8fc7\u8fb9\u754c\u3002\u8981\u77e5\u9053\uff0c\u6cf7\u867d\u7136\u64c5\u957f\u4f53\u80b2\uff0c\u4f46\u662f\u4ed6\u7684\u4f53\u529b\u6bd5\u7adf\u662f\u6709\u9650\u7684\uff0c\u5df2\u77e5\u6cf7\u7684\u521d\u59cb\u4f53\u529b\u4e3a6\u70b9\uff0c\u4ed6\u6bcf\u79fb\u52a8\u4e00\u683c\u5c31\u8981\u8017\u8d39\u4e00\u70b9\u4f53\u529b\uff0c\u5982\u679c\u4f53\u529b\u8017\u5c3d\u4ed6\u5c31\u4e0d\u80fd\u7ee7\u7eed\u524d\u8fdb\u3002\u5e78\u8fd0\u7684\u662f\uff0c\u4e09\u53f6\u9884\u60f3\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4e8e\u662f\u5979\u63d0\u524d\u8bf7\u4eba\u5e2e\u5fd9\u5728\u4e00\u4e9b\u7f51\u683c\u4e0a\u653e\u7f6e\u4e86\u4eb2\u624b\u505a\u7684\u4fbf\u5f53\u3002\u5982\u679c\u6cf7\u5230\u8fbe\u4e86\u653e\u6709\u4fbf\u5f53\u7684\u7f51\u683c\uff0c\u90a3\u4e48\u4ed6\u7684\u4f53\u529b\u503c\u53ef\u4ee5\u77ac\u95f4\u5f97\u5230\u8865\u5145\uff0c\u6062\u590d\u4e3a6\u3002\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u5982\u679c\u6cf7\u5230\u8fbe\u6709\u4fbf\u5f53\u7684\u7f51\u683c\u65f6\u4f53\u529b\u5df2\u7ecf\u4e3a0\uff0c\u5219\u4ed6\u8fde\u5403\u996d\u7684\u529b\u6c14\u90fd\u6ca1\u6709\u4e86\uff0c\u5c31\u89c6\u4e3a\u4e0d\u53ef\u5230\u8fbe\u3002\u5982\u679c\u4ed6\u5230\u8fbe\u7ec8\u70b9\u65f6\u4f53\u529b\u4e3a0\uff0c\u4e5f\u89c6\u4e3a\u4e0d\u53ef\u5230\u8fbe\u3002\u5df2\u77e5\u6cf7\u6bcf\u8d70\u4e00\u683c\u8017\u65f6\u4e3a1\uff0c\u7f51\u683c\u4e0a\u7684\u6709\u4e9b\u70b9\u4e0a\u6709\u4e0d\u53ef\u903e\u8d8a\u7684\u5efa\u7b51\u7269\uff0c\u4e0d\u80fd\u901a\u8fc7\u3002 \u6570\u5b57 0\uff1a\u5efa\u7b51\u7269\u3002\uff08\u4e0d\u5141\u8bb8\u901a\u8fc7\uff09 \u6570\u5b57 1\uff1a\u7a7a\u5730\uff0c\u6cf7\u53ef\u4ee5\u81ea\u7531\u884c\u8d70\u3002 \u6570\u5b57 2\uff1a\u6cf7\u51fa\u53d1\u70b9\uff0c \u4e5f\u662f\u4e00\u7247\u7a7a\u5730\u3002\uff08\u884c\u7a0b\u8d77\u70b9\uff09 \u6570\u5b57 3\uff1a\u4e09\u53f6\u6240\u5728\u5730\u3002\uff08\u884c\u7a0b\u7ec8\u70b9\uff09 \u6570\u5b57 4\uff1a\u4fbf\u5f53\u6240\u5728\u5730\u3002 \u4ee5\u6807\u53f7\u4e3a2\u7684\u7f51\u683c\u4e3a\u8d77\u70b9\uff0c\u6807\u53f7\u4e3a3\u7684\u7f51\u683c\u4e3a\u7ec8\u70b9\uff0c\u95ee\uff0c\u6cf7\u80fd\u5426\u89c1\u5230\u4e09\u53f6\uff1f\u5982\u679c\u80fd\uff0c \u6700\u77ed\u9700\u8981\u591a\u957f\u65f6\u95f4\u5462\uff1f Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6570\u5b57\uff0c\u7f51\u683c\u7684\u884c\u6570\u548c\u5217\u6570\uff0cn\uff0cm\u3002 \u7b2c2\u81f3n+1\u884c\uff0c\u63cf\u8ff0\u6574\u4e2a\u7f51\u683c\u3002 Output Format \u5982\u679c\u53ef\u5230\u8fbe\uff0c\u8f93\u51fa\u6700\u77ed\u7528\u65f6\uff0c\u5426\u5219\u8f93\u51fa-1\u3002 Sample Input 3 3 2 1 1 1 1 0 1 1 3 Sample Output 4 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e70%\u7684\u6570\u636e 0<n,m<=20; \u5bf9\u4e8e30%\u7684\u6570\u636e 0<n,m<=300. FineArtz's solution Star /* \u6cf7\u7684\u65c5\u9014 */ #include <iostream> #include <cstring> #include <queue> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: int x = 0, y = 0, step = 0, hp = 0; }; int a[310][310]; int v[310][310]; int n, m; Point st, ed; inline bool check(const Point &p){ return (a[p.x][p.y] != 0 && p.hp > v[p.x][p.y]); } int bfs(Point s, Point e){ queue<Point> q; q.push(s); v[s.x][s.y] = s.hp; Point now; while (!q.empty()){ now = q.front(); q.pop(); if (a[now.x][now.y] == 4) now.hp = 6; if (now.x == e.x && now.y == e.y) return now.step; for (int i = 0; i < 4; ++i){ Point next; next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.hp = now.hp - 1; next.step = now.step + 1; if (check(next)){ v[next.x][next.y] = next.hp; q.push(next); } } } return -1; } int main(){ memset(a, 0, sizeof(a)); memset(v, 0, sizeof(v)); cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; switch(a[i][j]){ case 0: v[i][j] = 10; break; case 2: st.x = i; st.y = j; break; case 3: ed.x = i; ed.y = j; break; default: break; } } } st.hp = 6; cout << bfs(st, ed) << endl;; return 0; } WashSwang's solution Star #include <iostream> using namespace std; int map[302][302],dis[302][302][7],minx,m,n,sx,sy; void dfs(int x,int y,int e,int t) { if (t==0) return; if (e>minx) return; if (map[x][y]==3&&t>0) { minx=min(e,minx); return; } if (map[x][y]==4) t=6; if (dis[x][y][t]!=0&&e>=dis[x][y][t]) return; dis[x][y][t]=e; if (map[x-1][y]) dfs(x-1,y,e+1,t-1); if (map[x+1][y]) dfs(x+1,y,e+1,t-1); if (map[x][y-1]) dfs(x,y-1,e+1,t-1); if (map[x][y+1]) dfs(x,y+1,e+1,t-1); } int main() { cin>>m>>n; for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { cin >> map[i][j]; if (map[i][j]==2){ sx=i; sy=j; } } minx=10000000; dfs(sx,sy,0,6); if (minx<m*n) cout<<minx; else cout<<-1; return 0; }","title":"4065"},{"location":"nr/4065/#4065","text":"\u9898\u76ee","title":"4065 \u6cf7\u7684\u65c5\u9014"},{"location":"nr/4065/#fineartzs-solution-star","text":"/* \u6cf7\u7684\u65c5\u9014 */ #include <iostream> #include <cstring> #include <queue> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: int x = 0, y = 0, step = 0, hp = 0; }; int a[310][310]; int v[310][310]; int n, m; Point st, ed; inline bool check(const Point &p){ return (a[p.x][p.y] != 0 && p.hp > v[p.x][p.y]); } int bfs(Point s, Point e){ queue<Point> q; q.push(s); v[s.x][s.y] = s.hp; Point now; while (!q.empty()){ now = q.front(); q.pop(); if (a[now.x][now.y] == 4) now.hp = 6; if (now.x == e.x && now.y == e.y) return now.step; for (int i = 0; i < 4; ++i){ Point next; next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.hp = now.hp - 1; next.step = now.step + 1; if (check(next)){ v[next.x][next.y] = next.hp; q.push(next); } } } return -1; } int main(){ memset(a, 0, sizeof(a)); memset(v, 0, sizeof(v)); cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; switch(a[i][j]){ case 0: v[i][j] = 10; break; case 2: st.x = i; st.y = j; break; case 3: ed.x = i; ed.y = j; break; default: break; } } } st.hp = 6; cout << bfs(st, ed) << endl;; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4065/#washswangs-solution-star","text":"#include <iostream> using namespace std; int map[302][302],dis[302][302][7],minx,m,n,sx,sy; void dfs(int x,int y,int e,int t) { if (t==0) return; if (e>minx) return; if (map[x][y]==3&&t>0) { minx=min(e,minx); return; } if (map[x][y]==4) t=6; if (dis[x][y][t]!=0&&e>=dis[x][y][t]) return; dis[x][y][t]=e; if (map[x-1][y]) dfs(x-1,y,e+1,t-1); if (map[x+1][y]) dfs(x+1,y,e+1,t-1); if (map[x][y-1]) dfs(x,y-1,e+1,t-1); if (map[x][y+1]) dfs(x,y+1,e+1,t-1); } int main() { cin>>m>>n; for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { cin >> map[i][j]; if (map[i][j]==2){ sx=i; sy=j; } } minx=10000000; dfs(sx,sy,0,6); if (minx<m*n) cout<<minx; else cout<<-1; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4066/","text":"4066 \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 \u9898\u76ee Background \u5728\u624d\u56da\u5b66\u56ed\u4e2d\uff0c\u8fdb\u884c\u7740\u6b8b\u9177\u7684\u81ea\u76f8\u6b8b\u6740\u6e38\u620f\u3002 \u60f3\u8981\u6d3b\u4e0b\u53bb\uff0c\u5c31\u5fc5\u987b\u5728\u5b66\u7ea7\u88c1\u5224\u4e2d\u627e\u5230\u771f\u6b63\u7684\u51f6\u624b\u3002 \u7136\u800c\u559c\u6b22\u8bf4\u8c0e\u7684\u738b\u9a6c\u5c0f\u5409\u603b\u662f\u4f1a\u60f3\u65b9\u8bbe\u6cd5\u5236\u9020\u4f2a\u8bc1\u5e72\u6270\u5927\u5bb6\u3002 \u4e3a\u4e86\u627e\u5230\u771f\u76f8\uff0c\u4f60\u2014\u2014\u8d85\u9ad8\u6821\u7ea7\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u5fc5\u987b\u63ed\u7a7f\u4ed6\u7684\u8c0e\u8a00\uff01 Description \u5c0f\u5409\u63d0\u4f9b\u4e86\u4e00\u4efd\u548cAlter Ego\u7684\u6e38\u620f\u5bf9\u6218\u8bb0\u5f55\u4f5c\u4e3a\u81ea\u5df1\u7684\u4e0d\u5728\u573a\u8bc1\u660e\u3002 \u6bcf\u4e00\u5c40\u6e38\u620f\u5f00\u59cb\u65f6\uff0c\u5c0f\u5409\u548cAlter Ego\u5404\u81ea\u7684\u5206\u6570\u4e3a1\u3002 \u5728 \u4e00\u5c40\u6e38\u620f \u8fc7\u7a0b\u4e2d\uff0c\u4e24\u4eba\u4f1a\u8fdb\u884c \u82e5\u5e72\u6b21 \u8d4c\u535a\u731c\u62f3\u3002 \u6bcf\u4e00\u6b21\u731c\u62f3 \uff0c\u4e24\u4eba\u4f1a\u5148\u786e\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\\(K\\)\uff0c\u7136\u540e\u8fdb\u884c\u731c\u62f3\u3002 \u83b7\u80dc\u7684\u4e00\u65b9\u7684\u5206\u6570\u4e58\u4ee5\\(K^2\\)\uff0c\u800c\u8f93\u7684\u4e00\u65b9\u7684\u5206\u6570\u4e58\u4ee5\\(K\\)\u3002 \uff08\u6ce8\u610f\u6bcf\u4e00\u6b21\u731c\u62f3\u9009\u53d6\u7684K\u53ef\u4ee5\u4e0d\u540c\uff09 \u7136\u800c\u8fd9\u4efd\u8bb0\u5f55\u4ec5\u5305\u62ec\u4e86 n \u5c40\u6e38\u620f\u6bcf\u8f6e\u6700\u540e\u5c0f\u5409\u548cAlter Ego\u5404\u81ea\u7684\u5f97\u5206\uff0c \u5bf9\u4e8e\u6bcf\u4e00\u6761\u5f97\u5206\u6570\u636e\uff0c\u8bf7\u4f60\u5224\u65ad\u662f\u5426 \u53ef\u80fd\u5b58\u5728\u4e00\u5c40\u6e38\u620f \u80fd\u5f97\u5230\u8fd9\u6837\u7684\u7ed3\u679c\u3002 Input Format \u7b2c 1 \u884c\u662f\u4e00\u4e2a\u6574\u6570\\(n\\)\uff0c\u4ee3\u8868\u4e00\u5171\u8fdb\u884c\u4e86 n \u8f6e\u6e38\u620f\u3002 \u63a5\u4e0b\u6765 n \u884c\uff0c\u6bcf\u884c 2 \u4e2a\u6574\u6570\\(a\\)\u548c\\(b\\)\uff0c\u8868\u793a\u8fd9\u4e00\u5c40\u5c0f\u5409\u548cAlter Ego\u5404\u81ea\u7684\u5f97\u5206 Output Format \u8f93\u51fa n \u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u4e00\u5171 Yes \u6216 No \u3002 Yes \u8868\u793a\u8fd9\u5c40\u6e38\u620f\u53ef\u80fd\u5b58\u5728\uff0c No \u8868\u793a\u4e00\u5b9a\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u6e38\u620f\u3002 Sample Input 4 2 4 75 45 8 8 16 16 Sample Output Yes Yes Yes No Limits \u5bf9\u4e8e\u524d20%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\\(n=1\\)\u3002 \u5bf9\u4e8e\u524d50%\u7684\u6570\u636e\uff0c\u4fdd\u8bc1\u5982\u679c\u6e38\u620f\u5b58\u5728\uff0c\u5219\\(K=2\\)\u3002 \u5bf9\u4e8e\u524d70%\u7684\u6570\u636e\uff0c\\(1\\le n\\le 100\\), \\(1\\le a,b\\le1000\\)\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1\\le n\\le 200000\\), \\(1\\le a,b\\le10^9\\)\u3002 Hint \u8bf7\u6ce8\u610f\uff0c\u5bf9\u4e8en\u8f83\u5927\u6570\u636e\uff0c\u8bf7\u5bf9I/O\u64cd\u4f5c\u8fdb\u884c\u4f18\u5316\u3002 \u5bf9\u4e8e\u5927\u6570\u636e\u5efa\u8bae\u5c3d\u91cf\u4f7f\u7528\u6574\u6570\u7c7b\u578b\uff0c\u907f\u514d\u4ea7\u751f\u7cbe\u5ea6\u8bef\u5dee\u3002 Hint 2 \u738b\u9a6c\u5c0f\u5409\u6700\u8ba8\u538c\u8bf4\u8c0e\u548c\u5f00\u73a9\u7b11\uff0c\u56e0\u6b64\u672c\u9898\u6570\u636e\u4e25\u683c\u6309\u7167Limits\u6240\u7ed9\u4e0a\u9650\u751f\u6210\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6240\u6709\u9519\u8bef\u7684\u505a\u6cd5\u90fd\u62ff\u4e0d\u5230\u5206\u6570\u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u9a97\u4f60\u7684\u3002 FineArtz's solution Star /* \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 */ #include <iostream> #include <cmath> using namespace std; long long sqr3(long long x){ long long l = 2, r = 1000000, mid; while (l <= r){ mid = (l + r) / 2; if (mid * mid * mid == x) return mid; if (mid * mid * mid > x) r = mid - 1; else l = mid + 1; } return -1; } int main(){ ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ long long a, b; cin >> a >> b; if (a == 1 && b == 1){ cout << \"Yes\" << '\\n'; continue; } long long t = a * b; long long sq = sqr3(t); if (sq == -1){ cout << \"No\" << '\\n'; continue; } if (a % sq == 0 && b % sq == 0){ cout << \"Yes\" << '\\n'; } else cout << \"No\" << '\\n'; } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; typedef long long ll; ll root3(ll x) { ll l=1,r=1000000,m; while (l<=r) { m=(l+r)/2; if (m*m*m==x) return m; if (m*m*m<x) l=m+1; else r=m-1; } return 0; } ll a,b,t; int n; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%lld%lld\",&a,&b); if (!(t=root3(a*b))||a%t||b%t) { printf(\"No\\n\"); continue; } printf(\"Yes\\n\"); } return 0; }","title":"4066"},{"location":"nr/4066/#4066","text":"\u9898\u76ee","title":"4066 \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00"},{"location":"nr/4066/#fineartzs-solution-star","text":"/* \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 */ #include <iostream> #include <cmath> using namespace std; long long sqr3(long long x){ long long l = 2, r = 1000000, mid; while (l <= r){ mid = (l + r) / 2; if (mid * mid * mid == x) return mid; if (mid * mid * mid > x) r = mid - 1; else l = mid + 1; } return -1; } int main(){ ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ long long a, b; cin >> a >> b; if (a == 1 && b == 1){ cout << \"Yes\" << '\\n'; continue; } long long t = a * b; long long sq = sqr3(t); if (sq == -1){ cout << \"No\" << '\\n'; continue; } if (a % sq == 0 && b % sq == 0){ cout << \"Yes\" << '\\n'; } else cout << \"No\" << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4066/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; typedef long long ll; ll root3(ll x) { ll l=1,r=1000000,m; while (l<=r) { m=(l+r)/2; if (m*m*m==x) return m; if (m*m*m<x) l=m+1; else r=m-1; } return 0; } ll a,b,t; int n; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%lld%lld\",&a,&b); if (!(t=root3(a*b))||a%t||b%t) { printf(\"No\\n\"); continue; } printf(\"Yes\\n\"); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4067/","text":"4067 \u6574\u6570\u52a0\u4e00 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4e00\u4e2a\u4ee5\u5b57\u7b26\u4e32\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff08\u4e32\u4e2d\u6bcf\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u8f93\u51fa\u8be5\u6b63\u6574\u6570\u52a0\u4e00\u540e\u7684\u7ed3\u679c\u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e00\u884c\u4e3a\u6b63\u6574\u6570\u5b57\u7b26\u4e32\uff0c\u8be5\u6b63\u6574\u6570\u6700\u524d\u4e0d\u5305\u542b\u5b57\u7b26'0'\uff08\u9664\u975e\u8be5\u6b63\u6574\u6570\u7b49\u4e8e0\uff09\uff0c\u6b63\u6574\u6570\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u5c0f\u4e8e50\uff08\u5373\u6b63\u6574\u6570\u7684\u5927\u5c0f\u5c0f\u4e8e10^50\uff09 \u8f93\u51fa \u8f93\u51fa\u4e00\u884c\u4e3a\u52a0\u4e00\u540e\u7684\u6b63\u6574\u6570\u5b57\u7b26\u4e32 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 10000 Sample Output 1 10001 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 999999999 Sample Output 2 1000000000 \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u51fa\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 vvvvv1v's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; int main() { char arr[55]; int num[55]; scanf(\"%s\", &arr); int tmp = 1, i, j; for (i = strlen(arr) - 1, j = 0; i >= 0; --i, ++j) { tmp += arr[i] - '0'; num[j] = tmp % 10; tmp /= 10; } if (tmp) num[j++] = tmp; --j; for (; j >= 0; --j) printf(\"%d\", num[j]); return 0; }","title":"4067"},{"location":"nr/4067/#4067","text":"\u9898\u76ee","title":"4067 \u6574\u6570\u52a0\u4e00"},{"location":"nr/4067/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int main() { char arr[55]; int num[55]; scanf(\"%s\", &arr); int tmp = 1, i, j; for (i = strlen(arr) - 1, j = 0; i >= 0; --i, ++j) { tmp += arr[i] - '0'; num[j] = tmp % 10; tmp /= 10; } if (tmp) num[j++] = tmp; --j; for (; j >= 0; --j) printf(\"%d\", num[j]); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4071/","text":"4071 Fibonacci\u6570\u5217 \u9898\u76ee Description \u9762\u5305\u5e0c\u671b\u77e5\u9053\u5927\u5bb6\u7684\u8ba1\u79d1\u5bfc\u8bfe\u548c\u7ebf\u6027\u4ee3\u6570\u8bfe\u6709\u6ca1\u6709\u597d\u597d\u4e0a\uff0c\u6240\u4ee5\u51fa\u4e86\u8fd9\u4e00\u9053\u9898\u76ee\u3002\uff08<-\u8fd9\u662fhint\uff09 \u5927\u5bb6\u90fd\u77e5\u9053\u6709\u4e00\u4e2a\u6570\u5217\u53eb\u505aFibonacci\u6570\u5217\uff0c\u5b83\u662f\u8fd9\u6837\u5b9a\u4e49\u7684\\(a_0 = a_1 = 1\\)\uff0c\\(a_{n+1} = a_n + a_{n-1}\\). \u9762\u5305\u60f3\u8981\u77e5\u9053Fibonacci\u7684\u7b2c\\(n\\)\u9879\u662f\u591a\u5c11. \u7531\u4e8e\u7ed3\u679c\u53ef\u80fd\u5341\u5206\u5927\uff0c\u6240\u4ee5\u9700\u8981\u4f60\u5bf9\u7ed3\u679cmod \\(10^9 + 7\\) Input Format \u4e00\u4e2a\u6570\u5b57\\(n\\). Output Format \u8f93\u51fa\u5bf9\u5e94\u7684\\(a_n % 10^9+7\\)\u5373\u53ef. Sample Input 5 Sample Output 8 \u6570\u636e\u8303\u56f4 \u5bf9\u4e8e70%\u7684\u6570\u636e\uff0c\u786e\u4fdd\\(n \\le 10^8\\). \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u786e\u4fdd\\(n \\le 10^{18}\\) FineArtz's solution Star /* Fibonacci\u6570\u5217 */ #include <iostream> using namespace std; const long long MOD = 1000000007; class matrix{ public: matrix(long long a, long long b, long long c, long long d) : a11(a), a12(b), a21(c), a22(d) {} matrix(const matrix &a) : a11(a.a11), a12(a.a12), a21(a.a21), a22(a.a22) {} long long a11, a12, a21, a22; }; inline matrix operator *(const matrix &m1, const matrix &m2){ matrix ret(0, 0, 0, 0); ret.a11 = (m1.a11 * m2.a11 % MOD + m1.a12 * m2.a21 % MOD) % MOD; ret.a12 = (m1.a11 * m2.a12 % MOD + m1.a12 * m2.a22 % MOD) % MOD; ret.a21 = (m1.a21 * m2.a11 % MOD + m1.a22 * m2.a21 % MOD) % MOD; ret.a22 = (m1.a21 * m2.a12 % MOD + m1.a22 * m2.a22 % MOD) % MOD; return ret; } matrix pow(matrix x, long long n){ matrix ret(1, 0, 0, 1), t(x); while (n != 0){ if (n & 1){ ret = ret * t; } t = t * t; n >>= 1; } return ret; } int main(){ long long n; cin >> n; matrix f(1, 1, 1, 0); f = pow(f, n + 1); cout << f.a21 << endl; }","title":"4071"},{"location":"nr/4071/#4071-fibonacci","text":"\u9898\u76ee","title":"4071 Fibonacci\u6570\u5217"},{"location":"nr/4071/#fineartzs-solution-star","text":"/* Fibonacci\u6570\u5217 */ #include <iostream> using namespace std; const long long MOD = 1000000007; class matrix{ public: matrix(long long a, long long b, long long c, long long d) : a11(a), a12(b), a21(c), a22(d) {} matrix(const matrix &a) : a11(a.a11), a12(a.a12), a21(a.a21), a22(a.a22) {} long long a11, a12, a21, a22; }; inline matrix operator *(const matrix &m1, const matrix &m2){ matrix ret(0, 0, 0, 0); ret.a11 = (m1.a11 * m2.a11 % MOD + m1.a12 * m2.a21 % MOD) % MOD; ret.a12 = (m1.a11 * m2.a12 % MOD + m1.a12 * m2.a22 % MOD) % MOD; ret.a21 = (m1.a21 * m2.a11 % MOD + m1.a22 * m2.a21 % MOD) % MOD; ret.a22 = (m1.a21 * m2.a12 % MOD + m1.a22 * m2.a22 % MOD) % MOD; return ret; } matrix pow(matrix x, long long n){ matrix ret(1, 0, 0, 1), t(x); while (n != 0){ if (n & 1){ ret = ret * t; } t = t * t; n >>= 1; } return ret; } int main(){ long long n; cin >> n; matrix f(1, 1, 1, 0); f = pow(f, n + 1); cout << f.a21 << endl; }","title":"FineArtz's solution Star"},{"location":"nr/4072/","text":"4072 \u65e5\u5929\u5356\u9762\u5305 \u9898\u76ee Description \u65e5\u5929\u60f3\u8981\u5f00\u4e00\u5bb6\u9762\u5305\u5e97\uff0c\u5356\u5404\u79cd\u5404\u6837\u7684\u9762\u5305\uff0c\u4ed6\u51b3\u5b9a\u628a\u5e97\u5f00\u5728n\u4e2a\u57ce\u5e02\u4e2d\u76841\u4e2a\uff0c\u8fd9\u4e9b\u57ce\u5e02\u7684\u7f16\u53f7\u4ece1\u5230n\u3002\u800c\u8fd9\u4e9b\u57ce\u5e02\u4e4b\u95f4\u6709m\u6761\u9053\u8def\uff0c\u6bcf\u4e00\u6761\u8fde\u63a5\u7740\u4e24\u4e2a\u57ce\u5e02\u3002 \u4e3a\u4e86\u80fd\u5728\u9762\u5305\u5e97\u91cc\u70e4\u9762\u5305\uff0c\u65e5\u5929\u9700\u8981\u4e00\u4e9b\u5236\u9020\u9762\u5305\u7684\u539f\u6599\uff0c\u800c\u8fd9\u4e9b\u539f\u6599\u53ea\u5728\u4e00\u4e9b\u57ce\u5e02\u91cc\u6709\u3002k\u4e2a\u539f\u6599\u57ce\u5e02\u5206\u522b\u5728\\(a_1,a_2,\\cdots,a_k, \u4e14a_i\\in [1,n]\\) \u7136\u800c\u4e0d\u5e78\u7684\u662f\uff0c\u5f53\u5730\u6709\u4e00\u4e2a\u653f\u7b56\uff0c\u9762\u5305\u5e97\u4e0d\u80fd\u5f00\u5728\u6709\u539f\u6599\u7684\u57ce\u5e02\u91cc\uff0c\u56e0\u6b64\u4ed6\u53ea\u80fd\u5c06\u9762\u5305\u5e97\u5f00\u5728\u53e6\u5916\u7684n-k\u4e2a\u57ce\u5e02\u4e2d\u3002\u5f53\u7136\uff0c\u539f\u6599\u662f\u8981\u6709\u8fd0\u8f93\u8d39\u7528\u7684\uff0c\u65e5\u5929\u9700\u8981\u4e3a\u6bcf1\u9053\u8def\u957f\u5ea6\u652f\u4ed81\u5143\u3002 \u66f4\u4e25\u8c28\u7684\u8bf4\uff0c\u5982\u679c\u65e5\u5929\u5427\u9762\u5305\u5e97\u5f00\u5728\u67d0\u4e00\u4e2a\u57ce\u5e02b\\((a_i \\not= b \u5bf9\u4e8e\u4efb\u610f\u7684 1\\leq i \\leq k)\\), \u5e76\u9009\u62e9\u4e86\u4e00\u4e2a\u6709\u539f\u6599\u7684\u57ce\u5e02s(s \\( = a_j, \u5bf9\u67d0\u4e00j,1\\leq j\\leq k)\\)\uff0c\u5e76\u4e14b\u548cs\u88ab\u4e00\u4e9b\u8def\u5f84\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u8fd9\u4e9b\u8def\u5f84\u7684\u957f\u5ea6\u4e4b\u548c\u4e3ax (\u5982\u679c\u6709\u591a\u6761\u8def\u5f84\uff0c\u65e5\u5929\u53ef\u4ee5\u9009\u62e9\u4ed6\u60f3\u8981\u7684\u90a3\u4e00\u6761\u8def\u5f84)\uff0c\u5219\u65e5\u5929\u9700\u8981\u652f\u4ed8x\u5143\u3002 \u65e5\u5929\u60f3\u8981\u8ba9\u81ea\u5df1\u7684\u9762\u5305\u5e97\u6210\u672c\u6700\u4f4e\uff0c\u6240\u4ee5\u9700\u8981\u6700\u4f4e\u7684\u8fd0\u8d39\u3002 Input Format \u7b2c\u4e00\u884c\uff0c\u6709\u4e09\u4e2a\u6574\u6570n, m, k\uff0c\u5206\u522b\u5bf9\u5e94\u57ce\u5e02\u6570\uff0c\u9053\u8def\u6570\u548c\u6709\u539f\u6599\u57ce\u5e02\u7684\u6570\u91cf\u3002 \u63a5\u4e0b\u6765\u7684m\u884c\uff0c\u6bcf\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6574\u6570u, v, l (\\(u\\not=v\\))\uff0c\u8868\u793a\u57ce\u5e02u\u548cv\u4e4b\u95f4\u6709\u4e00\u6761\u957f\u5ea6\u4e3al\u7684\u9053\u8def\u3002 \u5982\u679ck > 0\uff0c\u90a3\u4e48\u6700\u540e\u4e00\u884c\u4f1a\u6709k\u4e2a\u4e0d\u540c\u7684\u6574\u6570\\(a_1, a_2, \\cdots, a_k\\)\uff0c\u8868\u793a\u5404\u4e2a\u6709\u539f\u6599\u57ce\u5e02\u7684\u7f16\u53f7\u3002\u5982\u679ck = 0\uff0c\u8fd9\u4e00\u884c\u4e0d\u4f1a\u51fa\u73b0\u3002 Output Format \u8f93\u51fa\u65e5\u5929\u9700\u8981\u652f\u4ed8\u7684\u6700\u5c11\u7684\u8fd0\u8d39\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u80fd\u591f\u5f00\u9762\u5305\u5e97\u7684\u57ce\u5e02\uff0c\u5219\u8f93\u51fa-1 Sample Input 1 5 4 2 1 2 5 1 2 3 2 3 4 1 4 10 1 5 Sample Output 1 3 Sample Input 2 3 1 1 1 2 3 3 Sample Output 2 -1 Limits \u5bf9\u4e8e50%\u7684\u6570\u636e\uff0c\\(1\\leq n \\leq 20\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1\\leq n, m \\leq 1e5\\) \u5176\u4e2d\\(1\\leq k \\leq n, 1\\leq l\\leq 1e9\\) FineArtz's solution Star /* \u65e5\u5929\u5356\u9762\u5305 */ #include <iostream> #include <map> #include <set> #include <algorithm> #include <cstring> using namespace std; class Point{ public: map<int, int> edge; }; Point a[100005]; set<int> s; bool is[100005]; int n, m, k; int main(){ cin >> n >> m >> k; if (k == 0){ cout << \"-1\" << endl; return 0; } if (n >= 50){ memset(is, 0, sizeof(is)); for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u].edge.find(u) == a[u].edge.end()){ a[u].edge[v] = w; a[v].edge[u] = w; } else{ if (a[u].edge[v] > w){ a[u].edge[v] = w; a[v].edge[u] = w; } } } int ans = 2147483647; int t; for (int i = 1; i <= k; ++i){ cin >> t; s.insert(t); is[t] = true; } for (auto i : s){ for (auto j : a[i].edge){ if (!is[j.first]){ ans = min(ans, j.second); } } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } else{ int a[25][25]; for (int i = 0; i < 25; ++i) for (int j = 0; j < 25; ++j) a[i][j] = -1; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u][v] == -1){ a[u][v] = w; a[v][u] = w; } else{ if (a[u][v] > w){ a[u][v] = w; a[v][u] = w; } } } int s[25]; bool is[25]; memset(is, 0, sizeof(is)); for (int i = 1; i <= k; ++i){ cin >> s[i]; is[s[i]] = true; } int ans = 2147483647; for (int i = 1; i <= k; ++i){ for (int j = 1; j <= n; ++j){ if (is[j]) continue; if (a[s[i]][j] == -1) continue; ans = min(ans, a[s[i]][j]); } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } return 0; }","title":"4072"},{"location":"nr/4072/#4072","text":"\u9898\u76ee","title":"4072 \u65e5\u5929\u5356\u9762\u5305"},{"location":"nr/4072/#fineartzs-solution-star","text":"/* \u65e5\u5929\u5356\u9762\u5305 */ #include <iostream> #include <map> #include <set> #include <algorithm> #include <cstring> using namespace std; class Point{ public: map<int, int> edge; }; Point a[100005]; set<int> s; bool is[100005]; int n, m, k; int main(){ cin >> n >> m >> k; if (k == 0){ cout << \"-1\" << endl; return 0; } if (n >= 50){ memset(is, 0, sizeof(is)); for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u].edge.find(u) == a[u].edge.end()){ a[u].edge[v] = w; a[v].edge[u] = w; } else{ if (a[u].edge[v] > w){ a[u].edge[v] = w; a[v].edge[u] = w; } } } int ans = 2147483647; int t; for (int i = 1; i <= k; ++i){ cin >> t; s.insert(t); is[t] = true; } for (auto i : s){ for (auto j : a[i].edge){ if (!is[j.first]){ ans = min(ans, j.second); } } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } else{ int a[25][25]; for (int i = 0; i < 25; ++i) for (int j = 0; j < 25; ++j) a[i][j] = -1; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u][v] == -1){ a[u][v] = w; a[v][u] = w; } else{ if (a[u][v] > w){ a[u][v] = w; a[v][u] = w; } } } int s[25]; bool is[25]; memset(is, 0, sizeof(is)); for (int i = 1; i <= k; ++i){ cin >> s[i]; is[s[i]] = true; } int ans = 2147483647; for (int i = 1; i <= k; ++i){ for (int j = 1; j <= n; ++j){ if (is[j]) continue; if (a[s[i]][j] == -1) continue; ans = min(ans, a[s[i]][j]); } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4073/","text":"4073 \u73af\u5f0f\u6276\u8d2b \u9898\u76ee Description \u53cc\u5341\u4e00\u4e4b\u540e\u8d2b\u7a98\u5377\u571f\u800c\u6765\uff0c\u672c\u7740\u56e2\u7ed3\u53cb\u7231\u7684\u7cbe\u795e\uff0c\u540c\u5b66\u4eec\u5c55\u5f00\u4e86\u79ef\u6781\u7684\u6276\u8d2b\u4e92\u52a9\u884c\u52a8\u3002 \u5047\u8bbe\u6bcf\u4f4d\u540c\u5b66\u4f1a\u7ed9\u51fa\u5f53\u524d\u7684\u7ecf\u6d4e\u72b6\u6001M\uff0c\u5f53 M > 0 \u65f6\u4ee3\u8868\u5c1a\u6709\u7ed3\u4f59\uff0c M < 0 \u65f6\u4ee3\u8868\u51fa\u73b0\u8d64\u5b57\u3002\u5e76\u4e14\u5047\u8bbeN\u4f4d\u540c\u5b66\u4ee5\u73af\u72b6\u56f4\u5750\uff0c\u6709\u7ed3\u4f59\u7684\u540c\u5b66\u53ef\u4ee5\u7ed9\u4e88\u76f8\u90bb\u7684\u4e24\u4f4d\u540c\u5b66\u4e00\u5b9a\u63f4\u52a9\u3002 \u4f8b\u5982\u201cABCDA\u201d\u56db\u4f4d\u540c\u5b66, B\u53ef\u4ee5\u5e2e\u52a9A\u3001C\u4f46\u65e0\u6cd5\u5e2e\u52a9\u5230D\u3002\u53d1\u751f\u4e24\u4e2a\u76f8\u90bb\u540c\u5b66\u7684\u6bcf\u4e00\u6b21\u4e92\u52a8\u5747\u4f1a\u4f7f\u73ed\u7ea7\u603b\u63f4\u52a9\u6b21\u6570\u52a01. \u5df2\u77e5\u6240\u6709\u540c\u5b66\u7684\u7ed3\u4f59\u548c\u8d64\u5b57\u6070\u597d\u76f8\u62b5\uff0c\u6c42\u6700\u5c11\u7684\u63f4\u52a9\u6b21\u6570\u4f7f\u5f97\u6240\u6709\u540c\u5b66\u6536\u652f\u5e73\u8861\u3002 Input Format \u7b2c\u4e00\u884c,\u4e00\u4e2a\u6574\u6570 N\u3002 (1 <= N <= 1e5) \u7b2c2\u884c, \u8f93\u51faN\u4e2a\u6574\u6570Mi\u3002 (-1e9 <= Mi <= 1e9) Output Format \u4e00\u884c\uff0c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u6700\u5c11\u7684\u73ed\u7ea7\u603b\u63f4\u52a9\u6b21\u6570\u3002 Sample Input1 4 1 2 3 -6 Sample Output1 3 Sample Input2 4 -1 0 1 0 Sample Output2 2 \u200b FineArtz's solution Star /* \u73af\u5f0f\u6276\u8d2b */ #include <iostream> #include <map> using namespace std; int main(){ int n, t; long long sum = 0; map<long long, int> m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; sum += t; ++m[sum]; } //for (auto i : m) // cout << i.first << ' ' << i.second << endl; int cnt = 0; for (auto i : m){ if (cnt < i.second) cnt = i.second; } cout << n - cnt << endl; return 0; }","title":"4073"},{"location":"nr/4073/#4073","text":"\u9898\u76ee","title":"4073 \u73af\u5f0f\u6276\u8d2b"},{"location":"nr/4073/#fineartzs-solution-star","text":"/* \u73af\u5f0f\u6276\u8d2b */ #include <iostream> #include <map> using namespace std; int main(){ int n, t; long long sum = 0; map<long long, int> m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; sum += t; ++m[sum]; } //for (auto i : m) // cout << i.first << ' ' << i.second << endl; int cnt = 0; for (auto i : m){ if (cnt < i.second) cnt = i.second; } cout << n - cnt << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4074/","text":"4074 \u6d2a\u6c34\u518d\u4e34 \u9898\u76ee Description \u200b \u53c8\u662f\u4e00\u573a\u70ed\u5e26\u98d3\u98ce\u5e2d\u5377\u4e86\u5723\u5b89\u4e1c\u5c3c\u5965\u57ce\uff0c\u5f3a\u964d\u6c34\u4f7fOven\u5bb6\u7684\u519c\u573a\u9971\u53d7\u6467\u6b8b\u3002 Oven\u5bb6\u519c\u573a\u4e3a\u4e00\u7247\u957f\u5ea6\u4e3aM,\u5bbd\u5ea6\u4e3aN\u7684\u77e9\u5f62\u7f51\u683c\u533a\u57df\uff0c\u6bcf\u4e2a\u7f51\u683c\u4f4d\u7f6e(a,b)\u9762\u79ef\u4e3a1\uff0c\u5176\u6d77\u62d4\u9ad8\u5ea6\u7531\u4e00\u4e2aM*N\u7684\u77e9\u9635\u8868\u793a\u3002 \u4e3a\u8fce\u5408\u6c42\u751f\u6e38\u620f\u76db\u884c\u4e4b\u98ce\uff0cOven\u5c06\u519c\u573a\u5f00\u57a6\u5728\u4e86\u89c6\u91ce\u826f\u597d\u7684\u9ad8\u5730\u4e0a\uff0c\u5176\u5730\u52bf\u9ad8\u4e8e\u5468\u8fb9\u571f\u5730\uff0c\u56e0\u6b64\u519c\u573a\u8fb9\u754c\u4e0d\u4f1a\u79ef\u6c34\u3002 \u8bf7\u5e2e\u52a9Oven\u8ba1\u7b97\u51fa\u519c\u573a\u5185\u6700\u5927\u79ef\u6c34\u4f53\u79ef Input Format \u7b2c\u4e00\u884c,\u4e24\u4e2a\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570M,N\u3002 (1 <= M,N <= 100) \u7b2c2 ~ M+1\u884c\u8f93\u51fa\u4e00\u4e2aM*N\u7684\u77e9\u9635\u3002 (0 <= \u9ad8\u5ea6 <= 10000) Output Format \u4e00\u884c\uff0c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u519c\u573a\u5185\u6700\u5927\u79ef\u6c34\u4f53\u79ef\u3002 Sample Input 5 4 6 3 7 3 5 3 2 8 4 4 7 5 8 2 8 6 4 5 3 0 Sample Output 3 FineArtz's solution Star /* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int m, n; int a[105][105]; bool b[105][105]; bool v[105][105]; long long ans = 0; bool check(const int &x, const int &y){ return (x >= 0 && y >= 0 && x <= m + 1 && y <= n + 1); } void ff(int x, int y){ Point st; st.x = x; st.y = y; queue<Point> q; q.push(st); Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y)){ if (!b[next.x][next.y] && a[now.x][now.y] <= a[next.x][next.y]){ b[next.x][next.y] = true; q.push(next); } } } } } bool checkw(int x, int y){ Point st; st.x = x; st.y = y; bool vis[105][105]; memset(vis, 0, sizeof(vis)); queue<Point> q; q.push(st); v[st.x][st.y] = true; Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y) && !vis[next.x][next.y]){ if (a[next.x][next.y] < a[now.x][now.y]) return false; if (a[next.x][next.y] == a[now.x][now.y]){ if (b[next.x][next.y]) return false; vis[next.x][next.y] = true; q.push(next); } } } } return true; } bool fill(){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j]) return false; return true; } int main(){ cin >> m >> n; memset(a, 0, sizeof(a)); for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; memset(b, 0, sizeof(b)); ff(0, 0); for (int water = 1; water <= 10000; ++water){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j] && water > a[i][j]){ ++ans; ++a[i][j]; for (int k = 0; k < 4; ++k){ int xx = i + dx[k]; int yy = j + dy[k]; if (a[xx][yy] <= a[i][j] && b[xx][yy]){ ff(xx, yy); break; } } } if (fill()) break; } cout << ans << endl; return 0; }","title":"4074"},{"location":"nr/4074/#4074","text":"\u9898\u76ee","title":"4074 \u6d2a\u6c34\u518d\u4e34"},{"location":"nr/4074/#fineartzs-solution-star","text":"/* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int m, n; int a[105][105]; bool b[105][105]; bool v[105][105]; long long ans = 0; bool check(const int &x, const int &y){ return (x >= 0 && y >= 0 && x <= m + 1 && y <= n + 1); } void ff(int x, int y){ Point st; st.x = x; st.y = y; queue<Point> q; q.push(st); Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y)){ if (!b[next.x][next.y] && a[now.x][now.y] <= a[next.x][next.y]){ b[next.x][next.y] = true; q.push(next); } } } } } bool checkw(int x, int y){ Point st; st.x = x; st.y = y; bool vis[105][105]; memset(vis, 0, sizeof(vis)); queue<Point> q; q.push(st); v[st.x][st.y] = true; Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y) && !vis[next.x][next.y]){ if (a[next.x][next.y] < a[now.x][now.y]) return false; if (a[next.x][next.y] == a[now.x][now.y]){ if (b[next.x][next.y]) return false; vis[next.x][next.y] = true; q.push(next); } } } } return true; } bool fill(){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j]) return false; return true; } int main(){ cin >> m >> n; memset(a, 0, sizeof(a)); for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; memset(b, 0, sizeof(b)); ff(0, 0); for (int water = 1; water <= 10000; ++water){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j] && water > a[i][j]){ ++ans; ++a[i][j]; for (int k = 0; k < 4; ++k){ int xx = i + dx[k]; int yy = j + dy[k]; if (a[xx][yy] <= a[i][j] && b[xx][yy]){ ff(xx, yy); break; } } } if (fill()) break; } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4077/","text":"4077 \u73a9\u6570 \u9898\u76ee Description \u4f60\u6709\u4e00\u5217n\u4e2a\u5f62\u59822^a*3^b\u7684\u6570\uff08a,b>=0\uff09 \u4f60\u60f3\u5bf9\u4ed6\u4eec\u8fdb\u884cn-1\u6b21gcd\u6216lcm\uff0c\u6bcf\u6b21\u53d6\u4e24\u4e2a\u5e76\u628a\u7ed3\u679c\u653e\u56de \u73b0\u5728\u8981\u6c42\u4f60\u8fdb\u884ck-1\u6b21gcd\uff0cn-k\u6b21lcm \u6700\u7ec8\u7ed3\u679c\u6700\u5927\u3001\u6700\u5c0f\u5206\u522b\u662f\u591a\u5c11\u5462\uff1f Input format \u7b2c\u4e00\u884c\u4e3an(1<=n<=50000) \u63a5\u4e0b\u6765n\u884c\u6bcf\u884c\u4e24\u4e2a\u6570ai,bi (0<=ai,bi<=1000) \u4ee3\u8868\u7b2ci\u4e2a\u6570\u4e3a2^ai*3^bi Output format \u5171\u8f93\u51fan\u884c \u5728\u7b2ci\u884c\u8f93\u51faa,b,a',b'\u8868\u793ak=i\u65f6\uff08k-1\u6b21gcd\uff0cn-k\u6b21lcm\uff09\u7684\u6700\u5927\u7ed3\u679c2^a*3^b\u4e0e\u6700\u5c0f\u7ed3\u679c2^a'*3^b' Sample input 3 0 0 1 2 2 0 Sample output 2 2 2 2 1 2 0 0 0 0 0 0 Explanation for sample data \u4e09\u4e2a\u6570\u5206\u522b\u662f1,18,4 k=0: lcm(1,18,4)=36 k=1: max: lcm(18,gcd(1,4))=18 min: gcd(1,lcm(18,4))=1 k=2: gcd(1,18,4)=1 Limits 20%\u7684\u6570\u636e1<=n<=10 60%\u7684\u6570\u636e1<=n<=1000 100%\u7684\u6570\u636e1<=n=50000, 0<=ai,bi<=1000 FineArtz's solution Star /* \u73a9\u6570 */ #include <iostream> #include <algorithm> #include <cmath> using namespace std; class num{ public: num() = default; num(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; bool operator >(const num &n){ return ((x * log(2) + y * log(3) - n.x * log(2) - n.y * log(3)) > -1e-6); } friend inline ostream &operator <<(ostream &os, const num &n){ os << n.x << \" \" << n.y; return os; } }; inline num max(num n1, num n2){ return num(max(n1.x, n2.x), max(n1.y, n2.y)); } inline num min(num n1, num n2){ return num(min(n1.x, n2.x), min(n1.y, n2.y)); } num a[50005]; num premax[50005], premin[50005], sufmax[50005], sufmin[50005]; num ansmax[50005], ansmin[50005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; } premax[1] = a[1]; premin[1] = a[1]; for (int i = 2; i <= n; ++i){ premax[i] = max(premax[i - 1], a[i]); premin[i] = min(premin[i - 1], a[i]); } sufmax[n] = a[n]; sufmin[n] = a[n]; for (int i = n - 1; i >= 1; --i){ sufmax[i] = max(sufmax[i + 1], a[i]); sufmin[i] = min(sufmin[i + 1], a[i]); } ansmax[1] = premax[n]; ansmin[1] = premax[n]; if (n >= 3){ num nowmin, minn; nowmin = min(a[1], sufmax[2]); for (int i = 2; i <= n - 1; ++i){ minn = max(premax[i - 1], sufmax[i + 1]); minn = min(minn, a[i]); if (nowmin > minn) nowmin = minn; } minn = min(premax[n - 1], a[n]); if (nowmin > minn) nowmin = minn; ansmin[2] = nowmin; } if (n > 3){ ansmax[2] = premax[n]; } for (int k = 3; k <= n - 2; ++k){ ansmax[k] = premax[n]; ansmin[k] = premin[n]; } if (n > 3){ ansmin[n - 1] = premin[n]; } if (n >= 3){ num nowmax, maxx; nowmax = max(a[1], sufmin[2]); for (int i = 2; i <= n - 1; ++i){ maxx = min(premin[i - 1], sufmin[i + 1]); maxx = max(maxx, a[i]); if (maxx > nowmax) nowmax = maxx; } maxx = max(premin[n - 1], a[n]); if (maxx > nowmax) nowmax = maxx; ansmax[n - 1] = nowmax; } ansmax[n] = sufmin[1]; ansmin[n] = sufmin[1]; for (int i = 1; i <= n; ++i) cout << ansmax[i] << \" \" << ansmin[i] << '\\n'; return 0; }","title":"4077"},{"location":"nr/4077/#4077","text":"\u9898\u76ee","title":"4077 \u73a9\u6570"},{"location":"nr/4077/#fineartzs-solution-star","text":"/* \u73a9\u6570 */ #include <iostream> #include <algorithm> #include <cmath> using namespace std; class num{ public: num() = default; num(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; bool operator >(const num &n){ return ((x * log(2) + y * log(3) - n.x * log(2) - n.y * log(3)) > -1e-6); } friend inline ostream &operator <<(ostream &os, const num &n){ os << n.x << \" \" << n.y; return os; } }; inline num max(num n1, num n2){ return num(max(n1.x, n2.x), max(n1.y, n2.y)); } inline num min(num n1, num n2){ return num(min(n1.x, n2.x), min(n1.y, n2.y)); } num a[50005]; num premax[50005], premin[50005], sufmax[50005], sufmin[50005]; num ansmax[50005], ansmin[50005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; } premax[1] = a[1]; premin[1] = a[1]; for (int i = 2; i <= n; ++i){ premax[i] = max(premax[i - 1], a[i]); premin[i] = min(premin[i - 1], a[i]); } sufmax[n] = a[n]; sufmin[n] = a[n]; for (int i = n - 1; i >= 1; --i){ sufmax[i] = max(sufmax[i + 1], a[i]); sufmin[i] = min(sufmin[i + 1], a[i]); } ansmax[1] = premax[n]; ansmin[1] = premax[n]; if (n >= 3){ num nowmin, minn; nowmin = min(a[1], sufmax[2]); for (int i = 2; i <= n - 1; ++i){ minn = max(premax[i - 1], sufmax[i + 1]); minn = min(minn, a[i]); if (nowmin > minn) nowmin = minn; } minn = min(premax[n - 1], a[n]); if (nowmin > minn) nowmin = minn; ansmin[2] = nowmin; } if (n > 3){ ansmax[2] = premax[n]; } for (int k = 3; k <= n - 2; ++k){ ansmax[k] = premax[n]; ansmin[k] = premin[n]; } if (n > 3){ ansmin[n - 1] = premin[n]; } if (n >= 3){ num nowmax, maxx; nowmax = max(a[1], sufmin[2]); for (int i = 2; i <= n - 1; ++i){ maxx = min(premin[i - 1], sufmin[i + 1]); maxx = max(maxx, a[i]); if (maxx > nowmax) nowmax = maxx; } maxx = max(premin[n - 1], a[n]); if (maxx > nowmax) nowmax = maxx; ansmax[n - 1] = nowmax; } ansmax[n] = sufmin[1]; ansmin[n] = sufmin[1]; for (int i = 1; i <= n; ++i) cout << ansmax[i] << \" \" << ansmin[i] << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4081/","text":"4081 \u4fa0\u76d7\u7f57\u5bbe \u9898\u76ee Description \u6211\u4eec\u90fd\u77e5\u9053\u4fa0\u76d7\u7f57\u5bbe\u7684\u6545\u4e8b\uff0c\u7f57\u5bbe\u603b\u662f\u7528\u4ed6\u7684\u667a\u6167\u52ab\u5bcc\u6d4e\u8d2b\u3002 \u5728 P \u57ce\u6709 n \u4e2a\u5e02\u6c11\uff0c\u6bcf\u4e2a\u4eba\u6709 \\(c _i\\) \u679a\u786c\u5e01\u3002\u7f57\u5bbe\u6bcf\u5929\u4f1a\u4ece P \u57ce \u6700\u5bcc\u7684\u4eba \u90a3\u91cc\u5077\u51fa 1 \u679a\u786c\u5e01\u9001\u7ed9 P \u57ce \u6700\u7a77\u7684\u4eba \u3002\u5982\u679c\u8fd9\u6837\u7684\u9009\u62e9\u4e0d\u552f\u4e00\uff0c\u4ed6\u4f1a\u968f\u673a\u6311\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u4eba\u3002\u7136\u800c\uff0c\u6211\u4eec\u7684\u8001\u7f57\u5bbe\u5f88\u5feb\u5c31\u8981\u9000\u4f11\u4e86\uff0c\u4ed6\u51b3\u5b9a\u5728\u5269\u4e0b\u7684 *k* \u5929\u91cc\u5c3d\u53ef\u80fd\u591a\u5e2e\u52a9\u4e00\u4e9b\u5e02\u6c11\u3002 \u5982\u679c\u6700\u5bcc\u7684\u4eba\u5728\u88ab\u5077\u8d70\u786c\u5e01\u540e\u53d8\u6210\u4e86\u6700\u7a77\u7684\u4eba\uff0c\u5219\u4ed6\u7684\u94b1\u4f1a\u88ab\u8fd8\u56de\u5230\u4ed6\u7684\u624b\u91cc\u3002\u4f8b\u5982\uff0c\u5982\u679c\u6240\u6709\u7684\u4eba\u90fd\u6709\u4e00\u6837\u6570\u91cf\u7684\u786c\u5e01\uff0c\u4e00\u5929\u540e\u4ed6\u4eec\u7684\u786c\u5e01\u6570\u91cf\u4ecd\u7136\u4f1a\u662f\u4e00\u6837\u7684\u3002 \u4f60\u7684\u4efb\u52a1\u5c31\u662f\u8ba1\u7b97\u51fa k \u5929\u4e4b\u540e P \u57ce\u4e2d\u6700\u5bcc\u7684\u4eba\u548c\u6700\u7a77\u7684\u4eba\u95f4\u7684\u8d22\u5bcc\u5dee(\u53d6\u7edd\u5bf9\u503c)\u3002 Input \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570 n \u548c k ( \\(1 \\le n \\le 500 000, 0 \\le k \\le 10^9\\) )\u3002 \u7b2c\u4e8c\u884c\u5305\u542b n \u4e2a\u6574\u6570\uff0c \u7b2c i \u4e2a\u6570\u4ee3\u8868\u7b2c i \u4e2a\u5e02\u6c11\u6700\u521d\u62e5\u6709\u7684\u786c\u5e01\u6570 \\(c _i\\) ( \\(1 \\le c_i \\le 10^9\\) )\u3002 Output \u4e00\u884c\uff0c k \u5929\u4e4b\u540e\u6700\u7a77\u7684\u4eba\u548c\u6700\u5bcc\u7684\u4eba\u4e4b\u95f4\u8d22\u5bcc\u7684\u7edd\u5bf9\u5dee\u503c\u3002 Examples input 4 1 1 1 4 2 output 2 input 3 1 2 2 2 output 0 Hints \u8fd9\u9053\u9898\u53ef\u4ee5\u8003\u8651\u4e8c\u5206\u3002 FineArtz's solution Star /* \u4fa0\u76d7\u7f57\u5bbe */ #include <iostream> #include <map> #include <algorithm> using namespace std; int n, k; map<int, long long> w; int main(){ cin >> n >> k; int maxx = 0, minn = 1000000005; long long sum = 0; for (long long i = 1; i <= n; ++i){ int t; cin >> t; ++w[t]; maxx = max(maxx, t); minn = min(minn, t); sum += t; } long long p = 0, pp = 0, r = 0, rr = 0; for (auto i = w.begin(); ; ++i){ if (pp + i->second > n / 2) break; pp += i->second; p += i->first * i->second; } for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (rr + i->second > n / 2) break; rr += i->second; r += i->first * i->second; } if (r - p <= 2 * k){ if (sum % n == 0) cout << 0 << endl; else cout << 1 << endl; return 0; } int kk = k, mp = minn, tp = w[minn]; for (auto i = w.begin(); ; ++i){ if (i == w.begin()) continue; if ((i->first - mp) * tp > kk){ mp += kk / tp; break; } kk -= (i->first - mp) * tp; mp = i->first; tp += i->second; } int mr = maxx, tr = w[maxx]; kk = k; for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (i->first == maxx) continue; if ((mr - i->first) * tr > kk){ mr -= kk / tr; break; } kk -= (mr - i->first) * tr; mr = i->first; tr += i->second; } cout << mr - mp << endl; return 0; }","title":"4081"},{"location":"nr/4081/#4081","text":"\u9898\u76ee","title":"4081 \u4fa0\u76d7\u7f57\u5bbe"},{"location":"nr/4081/#fineartzs-solution-star","text":"/* \u4fa0\u76d7\u7f57\u5bbe */ #include <iostream> #include <map> #include <algorithm> using namespace std; int n, k; map<int, long long> w; int main(){ cin >> n >> k; int maxx = 0, minn = 1000000005; long long sum = 0; for (long long i = 1; i <= n; ++i){ int t; cin >> t; ++w[t]; maxx = max(maxx, t); minn = min(minn, t); sum += t; } long long p = 0, pp = 0, r = 0, rr = 0; for (auto i = w.begin(); ; ++i){ if (pp + i->second > n / 2) break; pp += i->second; p += i->first * i->second; } for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (rr + i->second > n / 2) break; rr += i->second; r += i->first * i->second; } if (r - p <= 2 * k){ if (sum % n == 0) cout << 0 << endl; else cout << 1 << endl; return 0; } int kk = k, mp = minn, tp = w[minn]; for (auto i = w.begin(); ; ++i){ if (i == w.begin()) continue; if ((i->first - mp) * tp > kk){ mp += kk / tp; break; } kk -= (i->first - mp) * tp; mp = i->first; tp += i->second; } int mr = maxx, tr = w[maxx]; kk = k; for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (i->first == maxx) continue; if ((mr - i->first) * tr > kk){ mr -= kk / tr; break; } kk -= (mr - i->first) * tr; mr = i->first; tr += i->second; } cout << mr - mp << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4082/","text":"4082 \u56db\u901a\u516b\u8fbe \u9898\u76ee Description \u53e4\u8001\u7684\u4e9a\u5e73\u5b81\u534a\u5c9b\u4e0a\uff0c\u5206\u5e03\u7740\u8bb8\u8bb8\u591a\u591a\u5f7c\u6b64\u72ec\u7acb\u7684\u56fd\u5bb6\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u53c8\u7531\u5927\u5927\u5c0f\u5c0f\u7684\u57ce\u6c60\u7ec4\u6210\u3002\u73b0\u5728\uff0c\u6bcf\u4e2a\u56fd\u5bb6\u5185\u90e8\u7684\u57ce\u5e02\u4e4b\u95f4\u90fd\u662f\u4e92\u76f8\u53ef\u4ee5\u5230\u8fbe\u7684\uff0c\u800c\u56fd\u5bb6\u4e0e\u56fd\u5bb6\u4e4b\u95f4\u76f8\u4e92\u654c\u89c6\uff0c \u6ca1\u6709\u4efb\u4f55\u4e00\u6761\u9053\u8def\u94fe\u63a5\u8d77\u4e24\u4e2a\u4e0d\u540c\u56fd\u5bb6\u7684\u57ce\u5e02\u3002 \u4e3a\u4e86\u5b8c\u5584\u56fd\u5185\u4ea4\u901a\u8def\u7f51\uff0c\u9614\u7ef0\u7684\u56fd\u738b\u4eec\u6253\u7b97\u4fee\u8def\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u56fd\u5bb6\u5185\u4efb\u610f\u4e24\u4e2a\u57ce\u5e02\u95f4\u90fd\u6709\u4e00\u6761\u9053\u8def\u76f4\u63a5\u76f8\u8fde\u3002 \u65c5\u884c\u5bb6\u5e15\u5e15\u8fea\u53ea\u8bb0\u5f97\u6240\u6709\u9053\u8def\u7684\u4fe1\u606f\uff0c\u4ed6\u60f3\u636e\u6b64\u8ba1\u7b97\u4e00\u4e0b\u8fd9\u4e9b\u56fd\u5bb6\u4e00\u5171\u9700\u8981\u591a\u4fee\u591a\u5c11\u6761\u8def\u3002 Input Format \u7b2c\u4e00\u884c\u7ed9\u51fa\u4e24\u4e2a\u6574\u6570n\uff0cm\uff1an\u8868\u793a\u5171\u6709 n + 1 \u4e2a\u57ce\u5e02\uff0c\u4f9d\u6b21\u7f16\u53f70\u5230n\uff0cm\u4ee3\u8868\u73b0\u6709\u9053\u8def\u6761\u6570\u3002 \u63a5\u4e0b\u6765m\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570a,b,\u4ee3\u8868\u57ce\u5e02a\u4e0eb\u95f4\u5b58\u5728\u4e00\u6761\u9053\u8def\u3002 Output Format \u4e00\u4e2a\u6570R\uff0c\u4ee3\u8868\u9700\u8981\u4fee\u5efa\u9053\u8def\u7684\u6570\u76ee Sample Input 6 3 0 4 1 2 2 4 Sample Output 3 FineArtz's solution Star /* \u56db\u901a\u516b\u8fbe */ #include <iostream> #include <vector> #include <map> #include <set> #include <algorithm> using namespace std; class edge{ public: edge(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; int parent[1000005]; int v[1000005] = {0}; vector<edge> e; map<int, set<int>> ee; int n, m, cnt = 0; long long ans; int find(int x){ while (parent[x] != x){ parent[x] = parent[parent[x]]; x = parent[x]; } return x; } int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >>y; if (x == y) continue; if (ee.find(x) != ee.end()){ if (ee[x].find(y) != ee[x].end()) continue; } ++cnt; e.emplace_back(x, y); ee[x].insert(y); ee[y].insert(x); } for (int i = 0; i <= n; ++i) parent[i] = i; for (auto i : e){ int p = find(i.x); int q = find(i.y); if (p != q) parent[p] = q; } for (int i = 0; i <= n; ++i) parent[i] = find(i); for (int i = 0; i <= n; ++i) ++v[parent[i]]; for (int i = 0; i <= n; ++i){ if (v[i] != 0){ ans += v[i] * (v[i] - 1) / 2; } } cout << ans - cnt << endl; return 0; }","title":"4082"},{"location":"nr/4082/#4082","text":"\u9898\u76ee","title":"4082 \u56db\u901a\u516b\u8fbe"},{"location":"nr/4082/#fineartzs-solution-star","text":"/* \u56db\u901a\u516b\u8fbe */ #include <iostream> #include <vector> #include <map> #include <set> #include <algorithm> using namespace std; class edge{ public: edge(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; int parent[1000005]; int v[1000005] = {0}; vector<edge> e; map<int, set<int>> ee; int n, m, cnt = 0; long long ans; int find(int x){ while (parent[x] != x){ parent[x] = parent[parent[x]]; x = parent[x]; } return x; } int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >>y; if (x == y) continue; if (ee.find(x) != ee.end()){ if (ee[x].find(y) != ee[x].end()) continue; } ++cnt; e.emplace_back(x, y); ee[x].insert(y); ee[y].insert(x); } for (int i = 0; i <= n; ++i) parent[i] = i; for (auto i : e){ int p = find(i.x); int q = find(i.y); if (p != q) parent[p] = q; } for (int i = 0; i <= n; ++i) parent[i] = find(i); for (int i = 0; i <= n; ++i) ++v[parent[i]]; for (int i = 0; i <= n; ++i){ if (v[i] != 0){ ans += v[i] * (v[i] - 1) / 2; } } cout << ans - cnt << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4084/","text":"4084 \u5343\u5c9b\u6a31 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u300c\u771f\u7684\u662f\u6f02\u4eae\u7684\u6a31\u82b1\u5462\u300d \u4e00\u4f4d\u59d1\u5a18\u5411\u4f60\u642d\u8bdd\u9053\u3002 \u300c\u90a3\u68f5\u6a31\u6811\uff0c\u540d\u5b57\u53eb\u505a\u201c\u5343\u5c9b\u6a31\u201d\u5662\u300d \u4f60\u7684\u9762\u524d\u662f\u4e00\u68f5\u6a31\u82b1\u6811. \u6240\u8c13\u6811\uff0c\u6307\u7684\u662f \\(n\\) \u4e2a\u8282\u70b9\u7531 \\(n - 1\\) \u6761\u8fb9\u8fde\u63a5\u8d77\u6765\uff0c\u4f7f\u5f97\u4efb\u610f\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u90fd\u8054\u901a. \u8fd9\u68f5\u6811\u7684 \\(n\\) \u4e2a\u8282\u70b9\u4e2d\uff0c\u6709 \\(2k\\) \u4e2a\u8282\u70b9\u4e0a \u5404\u6709\u4e00\u6735 \u6a31\u82b1. \u4f17\u6240\u5468\u77e5\uff0c\u6a31\u82b1\u4e4b\u95f4\u9700\u8981\u76f8\u4e92\u4ea4\u6d41\u624d\u80fd\u6709\u6109\u60a6\u7684\u5fc3\u60c5\uff0c\u4e8e\u662f\u5b83\u4eec\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u4ea4\u6d41\u65b9\u6848. \u4f60\u6ce8\u610f\u5230\uff0c\u6a31\u82b1\u7684\u6570\u76ee\u662f \\(2k\\) \u6735\uff0c\u662f\u4e00\u4e2a\u548c\u8c10\u7684\u5076\u6570\uff0c\u56e0\u6b64\u4f60\u51b3\u5b9a\u5c06\u6a31\u82b1\u5206\u6210 \\(k\\) \u5bf9\uff0c\u8ba9\u5b83\u4eec\u8fdb\u884c\u4e00\u5bf9\u4e00\u7684\u4ea4\u6d41. \u540c\u6837\u4f17\u6240\u5468\u77e5\u7684\u662f\uff0c\u4e00\u6735\u6a31\u82b1\u5982\u679c\u548c\u8ddd\u79bb\u5b83\u8d8a\u8fdc\u7684\u53e6\u4e00\u6735\u6a31\u82b1\u4ea4\u6d41\uff0c\u5b83\u7684\u5fc3\u60c5\u5c31\u8d8a\u6109\u5feb. \u8fd9\u91cc\uff0c\u4e24\u6735\u6a31\u82b1\u4e4b\u95f4\u8ddd\u79bb\u6307\u7684\u662f\u5b83\u4eec\u6240\u5728\u7684\u4e24\u4e2a\u8282\u70b9\u5728\u6811\u4e0a\u7684\u6700\u77ed\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u6bcf\u4e00\u6761\u8fb9\u7684\u957f\u5ea6\u90fd\u662f \\(1\\). \u8bf7\u4f60\u5b89\u6392\u4e00\u4e2a\u5c06\u6a31\u82b1\u4eec\u5206\u4e3a \\(k\\) \u5bf9\u7684\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u5bf9\u6a31\u82b1\u4e4b\u95f4\u8ddd\u79bb\u7684\u548c\u6700\u5927. \u5373\u6c42 \\(\\max \\sum_{i = 1}^{k} (\u7b2c i \u5bf9\u6a31\u82b1\u4e4b\u95f4\u7684\u8ddd\u79bb)\\). \u300c\u542c\u8bf4\u662f\u6bcf\u79d2\u4e94\u5398\u7c73\u300d \u300c\u54e6\uff0c\u4ec0\u4e48\uff1f\u300d \u300c\u6a31\u82b1\u98d8\u843d\u7684\u901f\u5ea6...\u300d \u300c\u542c\u8bf4\u53ef\u80fd\u4f1a\u8d85\u65f6\u5462\u300d \u300c\u54e6\uff0c\u4ec0\u4e48\uff1f\u300d \u300c\u5982\u679c\u7528 cin \u8bfb\u5165\u5374\u4e0d\u5173\u540c\u6b65\u7684\u8bdd...\u300d \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u7684\u7b2c\u4e00\u884c\u6709\u4e24\u4e2a\u6574\u6570 \\(n\\) \u548c \\(k\\).\u5176\u4e2d \\(n\\) \u662f\u6a31\u82b1\u6811\u7684\u8282\u70b9\u6570\uff0c\u8fd9 \\(n\\) \u4e2a\u8282\u70b9\u4f9d\u6b21\u7f16\u53f7\u4e3a \\(1\\) \u5230 \\(n\\). \\(k\\) \u4e3a\u6a31\u82b1\u6570\u76ee\u7684\u4e00\u534a. \u8f93\u5165\u7684\u7b2c\u4e8c\u884c\u662f \\(2k\\) \u4e2a\u6574\u6570\uff0c\u5206\u522b\u8868\u793a \\(2k\\) \u6735\u6a31\u82b1\u6240\u5728\u7684\u8282\u70b9\u7f16\u53f7. \u8f93\u5165\u63a5\u4e0b\u6765\u6709 \\(n - 1\\) \u884c\uff0c\u6bcf\u884c \\(2\\) \u4e2a\u6574\u6570 \\(a_j\\) \u548c \\(b_j\\)\uff0c\u8868\u793a\u7b2c \\(j\\) \u6761\u8fb9\u8fde\u63a5 \\(a_j\\) \u548c \\(b_j\\) \u8fd9\u4e24\u4e2a\u8282\u70b9. \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6bcf\u5bf9\u6a31\u82b1\u4e4b\u95f4\u8ddd\u79bb\u7684\u548c\u7684\u6700\u5927\u503c. \u6837\u4f8b\u8f93\u5165 1 7 2 1 5 6 2 1 3 3 2 4 5 3 7 4 3 4 6 \u6837\u4f8b\u8f93\u51fa 1 6 \u6837\u4f8b\u8f93\u5165 2 9 3 3 2 1 6 5 9 8 9 3 2 2 7 3 4 7 6 4 5 2 1 2 8 \u6837\u4f8b\u8f93\u51fa 2 9 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e \\(20%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 10\\). \u5bf9\u4e8e \\(60%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 1000\\). \u5bf9\u4e8e \\(100%\\) \u7684\u6570\u636e\uff0c\\(1 \\le n \\le 500000, \\quad 2 \\le 2k \\le n\\). FineArtz's solution Star /* \u5343\u5c9b\u6a31 */ #include <iostream> #include <vector> using namespace std; class Node{ public: int sub = 0; int father = 0; vector<int> child; }; Node a[500005]; bool sa[500005] = {0}; int n, k; long long ans = 0; void makeTree(int x){ if (sa[x]) a[x].sub = 1; for (auto i : a[x].child){ if (i != a[x].father){ a[i].father = x; makeTree(i); a[x].sub += a[i].sub; } } return; } void countDis(int x){ for (auto i : a[x].child){ if (i != a[x].father){ ans += min(a[i].sub, 2 * k - a[i].sub); countDis(i); } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i <= 2 * k; ++i){ int x; cin >> x; sa[x] = true; } for (int i = 1; i <= n - 1; ++i){ int x, y; cin >> x >> y; a[x].child.push_back(y); a[y].child.push_back(x); } makeTree(1); countDis(1); cout << ans << endl; return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int num,maxl,x,y,last[510000],nxt[1010000],to[1010000],son[510000],n,k; bool vis[510000]; void add(int x,int y){ to[++num]=y; nxt[num]=last[x]; last[x]=num; } void dfs(int x){ int y; vis[x]=true; for (int i=last[x];i!=0;i=nxt[i]) { y=to[i]; if (vis[y]) continue; dfs(y); son[x]+=son[y]; } maxl+=min(son[x],2*k-son[x]);//\u9700\u8981\u201c\u6d41\u5411\u201d\u8be5\u70b9\u7236\u4eb2\u7684\u8fb9\u7684\u6570\u91cf } int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<2*k;++i) { scanf(\"%d\",&x); son[x]=1; } for (int i=0;i<n-1;++i) { scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } dfs(1); printf(\"%d\",maxl); return 0; }","title":"4084"},{"location":"nr/4084/#4084","text":"\u9898\u76ee","title":"4084 \u5343\u5c9b\u6a31"},{"location":"nr/4084/#fineartzs-solution-star","text":"/* \u5343\u5c9b\u6a31 */ #include <iostream> #include <vector> using namespace std; class Node{ public: int sub = 0; int father = 0; vector<int> child; }; Node a[500005]; bool sa[500005] = {0}; int n, k; long long ans = 0; void makeTree(int x){ if (sa[x]) a[x].sub = 1; for (auto i : a[x].child){ if (i != a[x].father){ a[i].father = x; makeTree(i); a[x].sub += a[i].sub; } } return; } void countDis(int x){ for (auto i : a[x].child){ if (i != a[x].father){ ans += min(a[i].sub, 2 * k - a[i].sub); countDis(i); } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i <= 2 * k; ++i){ int x; cin >> x; sa[x] = true; } for (int i = 1; i <= n - 1; ++i){ int x, y; cin >> x >> y; a[x].child.push_back(y); a[y].child.push_back(x); } makeTree(1); countDis(1); cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4084/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int num,maxl,x,y,last[510000],nxt[1010000],to[1010000],son[510000],n,k; bool vis[510000]; void add(int x,int y){ to[++num]=y; nxt[num]=last[x]; last[x]=num; } void dfs(int x){ int y; vis[x]=true; for (int i=last[x];i!=0;i=nxt[i]) { y=to[i]; if (vis[y]) continue; dfs(y); son[x]+=son[y]; } maxl+=min(son[x],2*k-son[x]);//\u9700\u8981\u201c\u6d41\u5411\u201d\u8be5\u70b9\u7236\u4eb2\u7684\u8fb9\u7684\u6570\u91cf } int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<2*k;++i) { scanf(\"%d\",&x); son[x]=1; } for (int i=0;i<n-1;++i) { scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } dfs(1); printf(\"%d\",maxl); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4087/","text":"4087 \u65e5\u5929\u90e8\u843d \u9898\u76ee Description \u5728\u9065\u8fdc\u7684\u90e8\u843d\uff0c\u751f\u6d3b\u7740n\u4f4d\u9a81\u52c7\u5584\u6218\u7684\u52c7\u58eb\uff08\u7f16\u53f71~n\uff09\u3002\u4ed6\u4eec\u4ece\u4e00\u51fa\u751f\uff0c\u5c31\u88ab\u8d4b\u4e88\u4e86\u5149\u8363\u7684\u6218\u6597\u4f7f\u547d\uff1a\u65e5\u5929\uff01 \u540c\u65f6\uff0c\u8fd9\u4e2a\u90e8\u843d\u4e2d\u7684\u4eba\u4eec\u975e\u5e38\u6ce8\u91cd\u6218\u53cb\u60c5\u8c0a\uff0c\u82e5\u5982\u679cA\u548cB\u5171\u540c\u65e5\u8fc7\u5929\uff0c\u90a3\u4e48\u4ed6\u4eec\u5c31\u88ab\u8ba4\u4e3a\u662f\u6218\u53cb\u3002 \u4e3a\u4e86\u8bc4\u4ef7\u90e8\u843d\u7684\u56e2\u7ed3\u7a0b\u5ea6\uff0c\u90e8\u843d\u914b\u957f\u5434\u7ae0\u5f15\u8fdb\u4e86\u8bc4\u4ef7\u6807\u51c6\uff1a\u5bf9\u4e8eA,B,C\u4e09\u4eba\uff0c\u5982\u679cA\u548cB\u5171\u540c\u65e5\u8fc7\u5929\uff0cB\u548cC\u5171\u540c\u65e5\u8fc7\u5929\uff0c\u4e00\u5b9a\u6709A\u548cC\u5171\u540c\u65e5\u8fc7\u5929\u7684\u8bdd\uff0c\u5c31\u8ba4\u4e3a\u90e8\u843d\u662f\u56e2\u7ed3\u7684\u3002 \u5728\u5386\u53f2\u4e0a\uff0c\u4e00\u5171\u6709\u8fc7m\u573a\u65e5\u5929\u7684\u6218\u6597\uff08\u6bcf\u573a\u6218\u6597\u6709\u4e14\u4ec5\u6709\u4e24\u4eba\u53c2\u52a0\uff09\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u5171\u6709m\u5bf9\u6218\u58eb\u5171\u540c\u65e5\u8fc7\u5929\u3002 \u6ce8\u610f\uff0c\u4e0d\u80fd\u8ba4\u4e3a\u81ea\u5df1\u548c\u81ea\u5df1\u5171\u540c\u65e5\u8fc7\u5929\u3002 \u8bf7\u4f60\u5e2e\u5e2e\u5434\u7ae0\u914b\u957f\uff0c\u770b\u770b\u4ed6\u7684\u90e8\u843d\u662f\u4e0d\u662f\u56e2\u7ed3\u7684\u5427\uff01 Input Format \u8f93\u5165\u6570\u636e\u5305\u62ec \u7b2c1\u884c\uff1a2\u4e2a\u6570\u503c, n\uff08\u6218\u58eb\u7684\u4eba\u6570\uff09\uff0cm\uff08\u6218\u6597\u7684\u573a\u6570\uff09 \u7b2c2~m+1\u884c\uff1a\u4e24\u4e2a\u6570\u503c\uff0c\u4ee3\u8868\u4e24\u4f4d\u5171\u540c\u65e5\u8fc7\u5929\u7684\u6218\u58eb\u7f16\u53f7\uff08\u6ce8\u610f\uff0c\u4e0d\u5b58\u5728\u53c2\u52a0\u6218\u58eb\u7f16\u53f7\u5b8c\u5168\u4e00\u6837\u7684\u6218\u6597\uff09 Output Format \u4e00\u884c\uff1a\u5982\u679c\u662f\u56e2\u7ed3\u7684\uff0c\u8f93\u51faYES\uff0c\u5426\u5219\u8f93\u51faNO Sample Input1 ``` 4 3 1 3 3 4 1 4 Sample Output1 YES Sample Input2 4 4 3 1 2 3 3 4 1 2 Sample Output2 NO \u6570\u636e\u8303\u56f4 3\u2009\u2264\u2009n\u2009\u2264\u2009150\u2009000, 0 < m < min(150000, n(n - 1) / 2) FineArtz's solution Star /* \u65e5\u5929\u90e8\u843d */ #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0; int y = 0; }; bool cmp(Point p1, Point p2){ return (p1.x < p2.x || p1.x == p2.x && p1.y < p2.y); } Point p[150005], pos[150005]; bool v[150005] = {0}; int n, m; bool bfs(int st){ queue<int> q; q.push(st); v[st] = true; int now, next; int person = 1, battle = 0; while (!q.empty()){ now = q.front(); q.pop(); for (int k = pos[now].x; k <= pos[now].y; ++k){ if (k == 0) break; next = p[k].y; ++battle; if (v[next]) continue; ++person; q.push(next); v[next] = true; } } return (battle == person * (person - 1) / 2); } int main(){ cin >> n >> m; memset(v, 0, sizeof(v)); for (int i = 1; i <= m; ++i){ cin >> p[i].x >> p[i].y; if (p[i].x > p[i].y){ int t = p[i].x; p[i].x = p[i].y; p[i].y = t; } } sort(p + 1, p + m + 1, cmp); pos[p[1].x].x = 1; for (int i = 2; i <= m; ++i){ if (p[i].x != p[i - 1].x){ pos[p[i - 1].x].y = i - 1; pos[p[i].x].x = i; } } pos[p[m].x].y = m; for (int i = 1; i <= m; ++i){ if (!v[i]){ bool flag = bfs(i); if (!flag){ cout << \"NO\" << endl; return 0; } } } cout << \"YES\" << endl; return 0; } WashSwang's solution Star #include <cstdio> using namespace std; int p[200000],fa[200000],num[200000],n,m,x,y; int root(int x)//\u5e76\u67e5\u96c6 \u8def\u5f84\u538b\u7f29 { if (fa[x]==0) return x; else return fa[x]=root(fa[x]); } void unionset(int x,int y){ int s=root(x),t=root(y); if (s!=t) { fa[s]=t; num[t]+=num[s];//\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 \u6570\u91cf\u76f8\u52a0 } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){num[i]=1;} for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); unionset(x,y); p[x]++; p[y]++; } for (int i=1;i<=n;++i) { if (p[i]!=num[root(i)]-1) { printf(\"NO\"); return 0; } } printf(\"YES\"); return 0; }","title":"4087"},{"location":"nr/4087/#4087","text":"\u9898\u76ee","title":"4087 \u65e5\u5929\u90e8\u843d"},{"location":"nr/4087/#fineartzs-solution-star","text":"/* \u65e5\u5929\u90e8\u843d */ #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0; int y = 0; }; bool cmp(Point p1, Point p2){ return (p1.x < p2.x || p1.x == p2.x && p1.y < p2.y); } Point p[150005], pos[150005]; bool v[150005] = {0}; int n, m; bool bfs(int st){ queue<int> q; q.push(st); v[st] = true; int now, next; int person = 1, battle = 0; while (!q.empty()){ now = q.front(); q.pop(); for (int k = pos[now].x; k <= pos[now].y; ++k){ if (k == 0) break; next = p[k].y; ++battle; if (v[next]) continue; ++person; q.push(next); v[next] = true; } } return (battle == person * (person - 1) / 2); } int main(){ cin >> n >> m; memset(v, 0, sizeof(v)); for (int i = 1; i <= m; ++i){ cin >> p[i].x >> p[i].y; if (p[i].x > p[i].y){ int t = p[i].x; p[i].x = p[i].y; p[i].y = t; } } sort(p + 1, p + m + 1, cmp); pos[p[1].x].x = 1; for (int i = 2; i <= m; ++i){ if (p[i].x != p[i - 1].x){ pos[p[i - 1].x].y = i - 1; pos[p[i].x].x = i; } } pos[p[m].x].y = m; for (int i = 1; i <= m; ++i){ if (!v[i]){ bool flag = bfs(i); if (!flag){ cout << \"NO\" << endl; return 0; } } } cout << \"YES\" << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4087/#washswangs-solution-star","text":"#include <cstdio> using namespace std; int p[200000],fa[200000],num[200000],n,m,x,y; int root(int x)//\u5e76\u67e5\u96c6 \u8def\u5f84\u538b\u7f29 { if (fa[x]==0) return x; else return fa[x]=root(fa[x]); } void unionset(int x,int y){ int s=root(x),t=root(y); if (s!=t) { fa[s]=t; num[t]+=num[s];//\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 \u6570\u91cf\u76f8\u52a0 } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){num[i]=1;} for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); unionset(x,y); p[x]++; p[y]++; } for (int i=1;i<=n;++i) { if (p[i]!=num[root(i)]-1) { printf(\"NO\"); return 0; } } printf(\"YES\"); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4088/","text":"4088 \u8fd0\u52a8\u6821\u56ed \u9898\u76ee Description \u8fd0\u52a8\u4e16\u754c\u6821\u56ed\u7684\u622a\u6b62\u65e5\u671f\u4e34\u8fd1\uff0c\u4f46\u84d3\u8d1d\u8ddd\u79bb\u5b8c\u6210\u91cc\u7a0b\u76ee\u6807\u8fd8\u6709\u4e00\u5b9a\u5dee\u8ddd\uff0c\u5979\u9700\u8981\u4f60\u7684\u5e2e\u52a9\u3002 \u84d3\u8d1d\u5171\u6709\u4e09\u79cd\u8fd0\u52a8\u65b9\u5f0f\uff1a \u8d70\u8def , \u6162\u8dd1 , \u5feb\u8dd1 \u53ef\u8ba4\u4e3a\u8d70\u8def\u4e0d\u6d88\u8017\u4f53\u529b\uff0c\u4f46\u6162\u8dd1\u548c\u5feb\u8dd1\u5747\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u4f53\u529b\u6d88\u8017\uff0c\u4e09\u8005\u5207\u6362\u4e0d\u9700\u8981\u65f6\u95f4\u3002\u540c\u65f6\u84d3\u8d1d\u4e0d\u5e0c\u671b\u5728\u4efb\u4e00\u4e00\u79cd\u8dd1\u6b65\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e2d\u65ad\uff0c\u5373\u4e00\u65e6\u91c7\u53d6\u67d0\u79cd\u8dd1\u6b65\u65b9\u5f0f\uff0c\u84d3\u8d1d\u4f1a\u7ef4\u6301\u5f53\u524d\u8fd0\u52a8\u72b6\u6001\u8fd0\u52a8\\(k*a_{i}, k \\in \\mathbb N^{+}\\)\u4e2a\u8ddd\u79bb\uff0c\u5176\u4e2d\\(a_{i}(i = 1, 2)\\)\u4e3a\u7ed9\u5b9a\u7684\u4e24\u79cd\u8dd1\u6b65\u65b9\u5f0f\u5404\u81ea\u7684\u5355\u6b21\u6700\u5c0f\u91cc\u7a0b\u3002 \u84d3\u8d1d\u5e0c\u671b\u4ee5\u6700\u5c0f\u4f53\u529b\u6d88\u8017\u5b8c\u6210\u91cc\u7a0b\u76ee\u6807\uff0c\u6c42\u8be5\u503c\u3002 Input Format \u8f93\u5165\u6570\u636e\u5305\u62ec \u7b2c1\u884c\uff1a\u4e09\u4e2a\u6570\u503c, \u5269\u4f59\u603b\u91cc\u7a0b f, \u5269\u4f59\u65f6\u95f4 T, \u6b65\u884c\u901f\u5ea6 t0 (\u8fd0\u52a81\u4e2a\u5355\u4f4d\u957f\u5ea6\u8017\u8d39t0\u65f6\u95f4) \u7b2c2 ~ 3\u884c\uff1a\u6bcf\u884c\u4e09\u4e2a\u6570\u503c\uff0c\u5206\u522b\u4e3a\u5355\u6b21\u6700\u5c0f\u8dd1\u6b65\u91cc\u7a0b\\(a_{i}\\)\uff0c\u8fd0\u52a8\u901f\u5ea6\\(t_{i}\\)\uff08\u5b9a\u4e49\u540c\u6b65\u884c\u901f\u5ea6\uff09\uff0c\u5355\u6b21\u8017\u8d39\u4f53\u529b\u503c\\(p_{i}\\)\u3002 Output Format \u4e00\u884c\uff1a\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u84d3\u8d1d\u80fd\u591f\u5728\u622a\u6b62\u65e5\u671f\u524d\u5b8c\u6210\u91cc\u7a0b\u76ee\u6807\uff0c\u8f93\u51fa\u6700\u5c0f\u4f53\u529b\u8017\u8d39\uff0c\u5426\u5219\u8f93\u51fa -1; Sample Input1 3 14 5 2 4 9 7 6 11 Sample Output1 9 Sample Input2 3 15 5 2 4 9 7 6 11 Sample Output2 0 FineArtz's solution Star /* \u8fd0\u52a8\u6821\u56ed */ #include <iostream> #include <cmath> using namespace std; int main(){ long long f, T, t0, a1, t1, p1, a2, t2, p2; cin >> f >> T >> t0; cin >> a1 >> t1 >> p1; cin >> a2 >> t2 >> p2; long long c1 = -a1 * (t1 - t0), c2 = -a2 * (t2 - t0), n = -T + f * t0; long long ans = 10000000000000000ll, y = 0, z = 0; if (n <= 0){ cout << \"0\" << endl; return 0; } if (c1 <= 0 && c2 <= 0){ cout << \"-1\" << endl; return 0; } if (c1 <= 0){ z = n / c2; if (n % c2 != 0) ++z; cout << z * p2 << endl; return 0; } if (c2 <= 0){ y = n / c1; if (n % c1 != 0) ++y; cout << y * p1 << endl; return 0; } for (long long y = 0; ; ++y){ long long t = n - c1 * y; if (t <= 0) z = 0; else{ z = t / c2; if (t % c2 != 0) ++z; } long long p = y * p1 + z * p2; if (ans > p) ans = p; if (t <= 0) break; } if (ans == 10000000000000000ll) cout << \"-1\" << endl; else cout << ans << endl; return 0; }","title":"4088"},{"location":"nr/4088/#4088","text":"\u9898\u76ee","title":"4088 \u8fd0\u52a8\u6821\u56ed"},{"location":"nr/4088/#fineartzs-solution-star","text":"/* \u8fd0\u52a8\u6821\u56ed */ #include <iostream> #include <cmath> using namespace std; int main(){ long long f, T, t0, a1, t1, p1, a2, t2, p2; cin >> f >> T >> t0; cin >> a1 >> t1 >> p1; cin >> a2 >> t2 >> p2; long long c1 = -a1 * (t1 - t0), c2 = -a2 * (t2 - t0), n = -T + f * t0; long long ans = 10000000000000000ll, y = 0, z = 0; if (n <= 0){ cout << \"0\" << endl; return 0; } if (c1 <= 0 && c2 <= 0){ cout << \"-1\" << endl; return 0; } if (c1 <= 0){ z = n / c2; if (n % c2 != 0) ++z; cout << z * p2 << endl; return 0; } if (c2 <= 0){ y = n / c1; if (n % c1 != 0) ++y; cout << y * p1 << endl; return 0; } for (long long y = 0; ; ++y){ long long t = n - c1 * y; if (t <= 0) z = 0; else{ z = t / c2; if (t % c2 != 0) ++z; } long long p = y * p1 + z * p2; if (ans > p) ans = p; if (t <= 0) break; } if (ans == 10000000000000000ll) cout << \"-1\" << endl; else cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4089/","text":"4089 \u7ea6\u745f\u592b\u73af \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u89e3\u51b3\u7ea6\u745f\u592b\u73af\u95ee\u9898\u7684\u7c7bJoseph\u3002\u5f53\u9700\u8981\u89e3\u51b3\u4e00\u4e2an\u4e2a\u4eba\u95f4\u9694\u4e3am\u7684\u7ea6\u745f\u592b\u73af\u95ee\u9898\uff0c\u53ef\u4ee5\u6784\u5efa\u4e00\u4e2a\u5bf9\u8c61 Joseph obj(n, m) \uff0c\u7136\u540e\u8c03\u7528 obj.simulate() \u8f93\u51fa\u6a21\u62df\u5220\u9664\u8fc7\u7a0b\u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570n\u548cm\uff0c\u7a7a\u683c\u5206\u9694\uff0c\u5206\u522b\u4ee3\u8868\u7f16\u53f7\u957f\u5ea6\u548c\u95f4\u9694\u957f\u5ea6\uff0c\u7f16\u53f7\u957f\u5ea6n<=50\u3002 \u8f93\u51fa \u8f93\u51fa\u4e3an\u4e2a\u6574\u6570\uff0c\u7a7a\u683c\u5206\u9694\u3002 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b1 Sample Input 1 10 4 Sample Output 1 5 9 3 8 4 1 10 2 7 6 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b2 Sample Input 2 30 11 Sample Output 2 12 23 4 16 28 10 24 7 21 6 22 9 27 15 3 26 18 13 8 5 11 17 25 2 30 1 20 14 19 29 \u6ce8\u610f \u7ea6\u745f\u592b\u73af\u7684 \u8d77\u59cb\u7f16\u53f7\u4e3a1 \uff0c\u7f16\u53f7\u4e3a [1, n] \u3002 \u6ce8\u610f\u5224\u65ad\u6570\u7ec4\u662f\u5426\u6ea2\u51fa\u3002 m\u7684\u503c\u53ef\u4ee5\u5927\u4e8en\u3002 FineArtz's solution Star /* \u7ea6\u745f\u592b\u73af */ #include <iostream> using namespace std; class Node{ public: int index; Node *next; }; int main(){ int n, m; cin >> n >> m; Node *head, *p, *q; head = p = new Node; p->index = 0; for (int i = 2; i <= n; ++i){ q = new Node; q->index = i - 1; p->next = q; p = q; } p->next = head; q = head->next; while (q->next != q){ for (int i = 1; i < m; ++i){ p = q; q = q->next; } cout << q->index + 1 << \" \"; p->next = q->next; delete q; q = p->next; } cout << q->index + 1 << endl; delete q; return 0; }","title":"4089"},{"location":"nr/4089/#4089","text":"\u9898\u76ee","title":"4089 \u7ea6\u745f\u592b\u73af"},{"location":"nr/4089/#fineartzs-solution-star","text":"/* \u7ea6\u745f\u592b\u73af */ #include <iostream> using namespace std; class Node{ public: int index; Node *next; }; int main(){ int n, m; cin >> n >> m; Node *head, *p, *q; head = p = new Node; p->index = 0; for (int i = 2; i <= n; ++i){ q = new Node; q->index = i - 1; p->next = q; p = q; } p->next = head; q = head->next; while (q->next != q){ for (int i = 1; i < m; ++i){ p = q; q = q->next; } cout << q->index + 1 << \" \"; p->next = q->next; delete q; q = p->next; } cout << q->index + 1 << endl; delete q; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4093/","text":"4093 Candy \u9898\u76ee Description \u6709\u4e00\u5929\uff0cxyy\u6765\u5230\u4e86\u4e00\u95f4\u7cd6\u679c\u5c4b\u3002\u4ed6\u53d1\u73b0\u7cd6\u679c\u5c4b\u91cc\u6709\\(M\\)\u7bb1\u7cd6\u679c\uff0c\u7b2c\\(i\\)\u7bb1\u7cd6\u679c\u4e2d\uff0c\u88c5\u6709\\(A_i\\)\u888b\u7cd6\u679c\uff0c\u4e14\u8be5\u7bb1\u4e2d\u6bcf\u888b\u7cd6\u679c\u4e2d\u90fd\u542b\u6709\\(B_i\\)\u9897\u7cd6\u3002xyy\u53ef\u9ad8\u5174\u4e86\uff0c\u7136\u800c\u8fd9\u65f6\u5c4b\u91cc\u54cd\u8d77\u4e86\u4e00\u4e2a\u58f0\u97f3\uff1a\u201c\u505a\u4eba\u4e0d\u80fd\u592a\u8d2a\u5a6a\u4e86\uff0c\u4f60\u6700\u591a\u53ea\u80fd\u5e26\\(N\\)\u888b\u7cd6\u679c\u79bb\u5f00\u3002\u201dxyy\u5f00\u59cb\u65b9\u4e86\uff0c\u4ed6\u60f3\u95ee\u4f60\u4ed6\u6700\u591a\u53ef\u4ee5\u5e26\u591a\u5c11\u7cd6\u679c\u79bb\u5f00\uff1f Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\\(N,M\\)\uff0c\u5982\u9898\u610f\u3002 \u63a5\u4e0b\u6765$M$\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570\\(A_i,B_i\\)\uff0c\u8868\u793a\u7b2c\\(i\\)\u7bb1\u7cd6\u679c\u91cc\u88c5\u4e86\\(A_i\\)\u888b\u7cd6\u679c\uff0c\u4e14\u6bcf\u888b\u88c5\u6709\\(B_i\\)\u9897\u7cd6\u3002 Output Format \u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u7b54\u6848\u3002 Sample Input 7 3 5 10 2 5 3 6 Sample Output 62 Data Range \u5bf9\u4e8e\\(20\\%\\)\u7684\u6570\u636e\uff0c\\(M \\le 3\\)\u3002 \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(M \\le 100\\)\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(M \\le 2000\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(1 \\le N \\le 10^9\\)\uff0c\\(0 \\le M,A_i,B_i \\le 2 \\times 10^5\\)\u3002 FineArtz's solution Star /* Candy */ #include <iostream> using namespace std; class Node{ public: int pack = 0, candy = 0; Node() = default; Node(int p, int c) : pack(p), candy(c) {} bool operator <(const Node &n){ return candy < n.candy; } }; class Heap{ public: Node a[200005]; int heapsize = 0; void swap(int x, int y){ Node t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x > 1){ if (a[x / 2] < a[x]){ swap(x, x / 2); x /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } void insert(const Node &n){ a[++heapsize] = n; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } Node getMax(){ return a[1]; } }; Heap heap; int n, m; int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >> y; heap.insert(Node(x, y)); } long long ans = 0; while (n != 0 && heap.heapsize != 0){ Node t = heap.getMax(); if (n < t.pack){ ans += n * (long long)t.candy; break; } else{ ans += (long long)t.pack * t.candy; n -= t.pack; heap.remove(); } } cout << ans << endl; return 0; } WashSwang's solution Star #include <cstdio> using namespace std; int m,a,b; long long n,ans,num[200001]; int main() { scanf(\"%lld%d\",&n,&m); for (int i=0;i<m;++i){ scanf(\"%d%d\",&a,&b); num[b]+=a; } for (int i=200000;i>=1;--i) { if (n>=num[i]) { ans += num[i] * i; n -= num[i]; } else{ ans+=n*i; break; } } printf(\"%lld\",ans); return 0; }","title":"4093"},{"location":"nr/4093/#4093-candy","text":"\u9898\u76ee","title":"4093 Candy"},{"location":"nr/4093/#fineartzs-solution-star","text":"/* Candy */ #include <iostream> using namespace std; class Node{ public: int pack = 0, candy = 0; Node() = default; Node(int p, int c) : pack(p), candy(c) {} bool operator <(const Node &n){ return candy < n.candy; } }; class Heap{ public: Node a[200005]; int heapsize = 0; void swap(int x, int y){ Node t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x > 1){ if (a[x / 2] < a[x]){ swap(x, x / 2); x /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } void insert(const Node &n){ a[++heapsize] = n; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } Node getMax(){ return a[1]; } }; Heap heap; int n, m; int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >> y; heap.insert(Node(x, y)); } long long ans = 0; while (n != 0 && heap.heapsize != 0){ Node t = heap.getMax(); if (n < t.pack){ ans += n * (long long)t.candy; break; } else{ ans += (long long)t.pack * t.candy; n -= t.pack; heap.remove(); } } cout << ans << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4093/#washswangs-solution-star","text":"#include <cstdio> using namespace std; int m,a,b; long long n,ans,num[200001]; int main() { scanf(\"%lld%d\",&n,&m); for (int i=0;i<m;++i){ scanf(\"%d%d\",&a,&b); num[b]+=a; } for (int i=200000;i>=1;--i) { if (n>=num[i]) { ans += num[i] * i; n -= num[i]; } else{ ans+=n*i; break; } } printf(\"%lld\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4094/","text":"4094 Tanning Salon \u9898\u76ee \u3010\u95ee\u9898\u63cf\u8ff0\u3011 Tan Your Hide, Inc., owns several coin-operated tanning salons. Research has shown that if a customer arrives and there are no beds available, the customer will turn around and leave, thus costing the company a sale. Your task is to write a program that tells the company how many customers left without tanning. \u3010\u8f93\u5165\u8981\u6c42\u3011 The input consists of data for one or more salons, followed by a line containing the number 0 that signals the end of the input. Data for each salon is a single line containing a positive integer, representing the number of tanning beds in the salon, followed by a space, followed by a sequence of uppercase letters. Letters in the sequence occur in pairs. The first occurrence indicates the arrival of a customer, the second indicates the departure of that same customer. No letter will occur in more than one pair. Customers who leave without tanning always depart before customers who are currently tanning. There are at most 20 beds per salon. \u3010\u8f93\u51fa\u8981\u6c42\u3011 For each salon, output a sentence telling how many customers, if any, walked away. Use the exact format shown below. \u3010\u8f93\u5165\u6837\u4f8b\u3011 2 ABBAJJKZKZ 3 GACCBDDBAGEE 3 GACCBGDDBAEE 1 ABCBCA 0 \u3010\u8f93\u51fa\u6837\u4f8b\u3011 All customers tanned successfully. 1 customer(s) walked away. All customers tanned successfully. 2 customer(s) walked away. \u3010\u6765\u6e90\u3011 Mid-Central USA 2002 VictriD's solution Star #include <iostream> #include <unordered_map> #include <vector> using namespace std; int check() { int bednum = 0; int current = 0; int badcustomer = 0; cin >> bednum; if (!bednum) return -1; char process = cin.get(); unordered_map<char, int> jiten; while (cin.get(process) && process != '\\n') { if (jiten.find(process) == jiten.end()) { jiten[process] = 1; current++; if (current > bednum) { current--; jiten[process] = 2; badcustomer++; } } else { if (jiten[process] != 2) current--; jiten[process] = 0; } } return badcustomer; } int main() { vector<int> board; int process = check(); while (process != -1) { board.push_back(process); process = check(); } for (auto it = board.begin(); it < board.end(); it++) { if (it != board.begin()) cout << endl; cout << (*it ? to_string(*it) + \" customer(s) walked away.\" : \"All customers tanned successfully.\"); } return 0; } FineArtz's solution Star /* Tanning Salon */ #include <iostream> #include <cstring> using namespace std; void solve(int n){ int a[27] = {0}, b[27] = {0}; char s[1000]; cin >> s; int m = 0, ans = 0, len = strlen(s); for (int i = 0; i < len; ++i){ char ch = s[i]; if (m < n){ if (a[ch - 'A'] == 0){ ++m; a[ch - 'A'] = 1; } else{ --m; a[ch - 'A'] = 0; } } else{ if (a[ch - 'A'] == 1){ --m; a[ch - 'A'] = 0; } else if (b[ch - 'A'] == 0){ ++ans; b[ch - 'A'] = 1; } } } if (ans) cout << ans << \" customer(s) walked away.\" << endl; else cout << \"All customers tanned successfully.\" << endl; } int main(){ int n; cin >> n; while (n != 0){ solve(n); cin >> n; } return 0; }","title":"4094"},{"location":"nr/4094/#4094-tanning-salon","text":"\u9898\u76ee","title":"4094 Tanning Salon"},{"location":"nr/4094/#victrids-solution-star","text":"#include <iostream> #include <unordered_map> #include <vector> using namespace std; int check() { int bednum = 0; int current = 0; int badcustomer = 0; cin >> bednum; if (!bednum) return -1; char process = cin.get(); unordered_map<char, int> jiten; while (cin.get(process) && process != '\\n') { if (jiten.find(process) == jiten.end()) { jiten[process] = 1; current++; if (current > bednum) { current--; jiten[process] = 2; badcustomer++; } } else { if (jiten[process] != 2) current--; jiten[process] = 0; } } return badcustomer; } int main() { vector<int> board; int process = check(); while (process != -1) { board.push_back(process); process = check(); } for (auto it = board.begin(); it < board.end(); it++) { if (it != board.begin()) cout << endl; cout << (*it ? to_string(*it) + \" customer(s) walked away.\" : \"All customers tanned successfully.\"); } return 0; }","title":"VictriD's solution Star"},{"location":"nr/4094/#fineartzs-solution-star","text":"/* Tanning Salon */ #include <iostream> #include <cstring> using namespace std; void solve(int n){ int a[27] = {0}, b[27] = {0}; char s[1000]; cin >> s; int m = 0, ans = 0, len = strlen(s); for (int i = 0; i < len; ++i){ char ch = s[i]; if (m < n){ if (a[ch - 'A'] == 0){ ++m; a[ch - 'A'] = 1; } else{ --m; a[ch - 'A'] = 0; } } else{ if (a[ch - 'A'] == 1){ --m; a[ch - 'A'] = 0; } else if (b[ch - 'A'] == 0){ ++ans; b[ch - 'A'] = 1; } } } if (ans) cout << ans << \" customer(s) walked away.\" << endl; else cout << \"All customers tanned successfully.\" << endl; } int main(){ int n; cin >> n; while (n != 0){ solve(n); cin >> n; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4095/","text":"4095 \u6625\u6a31\u5bf9\u51b3 \u9898\u76ee \u3010\u8bd5\u9898\u63cf\u8ff0\u3011 \u5728\u8fd9\u4e07\u7269\u590d\u82cf\u7684\u6625\u5929\uff0c\u201c\u6625\u6a31\u5bf9\u51b3\u201d\u6bd4\u8d5b\u5f00\u59cb\u5566\uff01\u6674\u660e\u6709N\u4e2a\u5f0f\u795e\uff0c\u4ed6\u60f3\u4ece\u8fd9N\u4e2a\u5f0f\u795e\u91cc\u9009\u4e00\u4e2a\u6765\u5f53\u8fd9\u6b21\u6d3b\u52a8\u6d77\u62a5\u7684\u4e3b\u89d2\u3002\u56e0\u4e3a\u60f3\u5f53\u4e3b\u89d2\u7684\u5f0f\u795e\u975e\u5e38\u591a\uff0c\u4e8e\u662f\u6674\u660e\u5c31\u5b9a\u4e0b\u4e86\u8fd9\u6837\u4e00\u4e2a\u9009\u62d4\u7684\u89c4\u77e9\uff1a \u5c06N\u4e2a\u5f0f\u795e\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6392\uff0c\u7f16\u53f7\u4e3a1~N\u3002\u4ece\u7b2c1\u4e2a\u5f0f\u795e\u5f00\u59cb\u8fdb\u884c1~M\u7684\u6b63\u5411\u62a5\u6570\uff0c\u62a5\u5230\u7684\u7b2cM\u4e2a\u5f0f\u795e\u51fa\u5217\uff0c\u518d\u4ece\u4e0b\u4e00\u4e2a\u5f0f\u795e\u5f00\u59cb\u7ee7\u7eed1\u5230M\u62a5\u6570\u3001\u51fa\u5217\u3002\u5982\u679c\u6309\u7167\u67d0\u4e2a\u65b9\u5411\u62a5\u6570\u5230\u5c3e\u90e8\uff0c\u90a3\u4e48\u518d\u53cd\u65b9\u5411\u7ee7\u7eed\u62a5\u6570\u3002\u5982\u6b64\u8fdb\u884c\u4e0b\u53bb\uff0c\u76f4\u5230\u5269\u4e0b\u4e00\u4e2a\u5f0f\u795e\uff0c\u800c\u8fd9\u4e2a\u5f0f\u795e\u5c31\u662f\u672c\u6b21\u201c\u6625\u6a31\u5bf9\u51b3\u201d\u6d77\u62a5\u7684\u4e3b\u89d2\u3002 \u7b2c\u4e00\u4e2a\u6765\u5230\u8fd9\u4e2a\u5bee\u7684\u4e24\u9762\u4f5b\u6e34\u671b\u80fd\u6210\u4e3a\u4e3b\u89d2\uff0c\u6bd5\u7adf\u8fd9\u662f\u4ed6\u552f\u4e00\u53ef\u80fd\u6210\u4e3a\u4e3b\u89d2\u7684\u65f6\u523b\u4e86\u3002\u4e8e\u662f\u4f5b\u4f5b\u6c42\u4f60\u7f16\u4e2a\u7a0b\u5e8f\u5e2e\u52a9\u4ed6\u5b9e\u73b0\u8fd9\u4e2a\u613f\u671b\uff0c\u544a\u8bc9\u4ed6\u8981\u60f3\u5f53\u4e3b\u89d2\uff0c\u4ed6\u7684\u7f16\u53f7\u5e94\u8be5\u662f\u591a\u5c11\u3002 \u3010\u8f93\u5165\u8981\u6c42\u3011 \u8f93\u5165\u6587\u4ef6\u4ec5\u6709\u4e00\u884c\u5305\u542b\u4e8c\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570N\uff0cM \uff08N\u226410^5\uff0cM\u226410^9\uff09\u3002 \u3010\u8f93\u51fa\u8981\u6c42\u3011 \u8f93\u51fa\u6587\u4ef6\u4ec5\u6709\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570\u8868\u793a\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u8fd9\u4e2a\u4e24\u9762\u4f5b\u5728\u961f\u5217\u4e2d\u7684\u7f16\u53f7\u3002 \u3010\u8f93\u5165\u6837\u4f8b\u3011 9 3 \u3010\u8f93\u51fa\u6837\u4f8b\u3011 8 FineArtz's solution Star /* \u6625\u6a31\u5bf9\u51b3 */ #include <iostream> using namespace std; class Node{ public: int sum = 0, l = 0, r = 0; }; int n, m, ans = 0; Node a[100005 * 4]; bool b[100005]; void buildTree(int x, int l, int r){ if (l == r){ a[x].sum = 1; a[x].l = l; a[x].r = r; return; } a[x].l = l; a[x].r = r; int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int sum(int l, int r, int x = 1){ if (l <= a[x].l && r >= a[x].r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (l <= mid) ret += sum(l, r, x * 2); if (r > mid) ret += sum(l, r, x * 2 + 1); return ret; } void del(int y, int x = 1){ if (a[x].l == y && a[x].r == y){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (y <= mid) del(y, x * 2); else del(y, x * 2 + 1); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int count(int k, int p, int &d){ if (d == 1){ int l = k, r = n - 1, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(k, mid); if (t == p + 1){ if (b[mid]) break; else r = mid - 1; } else if (t < p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(mid, n - 1) != 0){ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(mid, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = l; } else{ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = r; d = -1; } } else{ int l = 0, r = k, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(mid, k); if (t == p + 1){ if (b[mid]) break; else l = mid + 1; } else if (t > p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(0, mid) != 0){ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = l; } else{ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(0, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = r; d = 1; } } return k; } int main(){ cin >> n >> m; --m; for (int i = 0; i < n; ++i) b[i] = true; buildTree(1, 0, n - 1); int d = 1, k = 0; for (int i = n; i > 1; --i){ int p = m % (2 * i - 2); if (d == 1){ int t = sum(k, n - 1); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } d = -1; k = count(r, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } k = count(l, p - t - i + 2, d); } } else{ int t = sum(0, k); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } d = 1; k = count(l, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } k = count(r, p - t - i + 2, d); } } } cout << ++k << endl; return 0; }","title":"4095"},{"location":"nr/4095/#4095","text":"\u9898\u76ee","title":"4095 \u6625\u6a31\u5bf9\u51b3"},{"location":"nr/4095/#fineartzs-solution-star","text":"/* \u6625\u6a31\u5bf9\u51b3 */ #include <iostream> using namespace std; class Node{ public: int sum = 0, l = 0, r = 0; }; int n, m, ans = 0; Node a[100005 * 4]; bool b[100005]; void buildTree(int x, int l, int r){ if (l == r){ a[x].sum = 1; a[x].l = l; a[x].r = r; return; } a[x].l = l; a[x].r = r; int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int sum(int l, int r, int x = 1){ if (l <= a[x].l && r >= a[x].r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (l <= mid) ret += sum(l, r, x * 2); if (r > mid) ret += sum(l, r, x * 2 + 1); return ret; } void del(int y, int x = 1){ if (a[x].l == y && a[x].r == y){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (y <= mid) del(y, x * 2); else del(y, x * 2 + 1); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int count(int k, int p, int &d){ if (d == 1){ int l = k, r = n - 1, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(k, mid); if (t == p + 1){ if (b[mid]) break; else r = mid - 1; } else if (t < p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(mid, n - 1) != 0){ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(mid, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = l; } else{ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = r; d = -1; } } else{ int l = 0, r = k, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(mid, k); if (t == p + 1){ if (b[mid]) break; else l = mid + 1; } else if (t > p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(0, mid) != 0){ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = l; } else{ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(0, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = r; d = 1; } } return k; } int main(){ cin >> n >> m; --m; for (int i = 0; i < n; ++i) b[i] = true; buildTree(1, 0, n - 1); int d = 1, k = 0; for (int i = n; i > 1; --i){ int p = m % (2 * i - 2); if (d == 1){ int t = sum(k, n - 1); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } d = -1; k = count(r, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } k = count(l, p - t - i + 2, d); } } else{ int t = sum(0, k); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } d = 1; k = count(l, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } k = count(r, p - t - i + 2, d); } } } cout << ++k << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4096/","text":"4096 \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 \u9898\u76ee \u3010\u9898\u76ee\u63cf\u8ff0\u3011 \u9ed1\u7237\u5bb6\u6709\u4e00\u53ea\u5c0f\u5c45\u5c45\uff0c\u559c\u6b22\u73a9\u642c\u7bb1\u5b50\u7684\u6e38\u620f\u3002\u6709\u4e00\u5929\uff0c\u9ed1\u7237\u5199\u5b8c\u4e86\u6570\u636e\u7ed3\u6784\u5927\u4f5c\u4e1a\uff0c\u51b3\u5b9a\u770b\u770b\u5c0f\u5c45\u5c45\u5230\u5e95\u662f\u600e\u4e48\u642c\u7bb1\u5b50\u7684\u3002 \u9ed1\u7237\u5bb6\u4e00\u5171\u6709N\u4e2a\u7bb1\u5b50\uff0c\u7bb1\u5b50\u7684\u7f16\u53f7\u662f0-base\u7684\u3002\u6700\u5f00\u59cb\u4ece\u7b2c0\u4e2a\u7bb1\u5b50\u5f00\u59cb\uff0c\u6309\u7167\u7f16\u53f7\u9012\u589e\u7684\u4f4d\u7f6e\uff0c\u4ece\u5de6\u5230\u53f3\u653e\u6210\u4e00\u884c\u3002\u5c0f\u5c45\u5c45\u7684\u64cd\u4f5c\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u6709\u4e0b\u9762\u8fd9\u56db\u79cd\uff1a move a over b\uff0c\u628aa\u4e0a\u9762\u7684\u7bb1\u5b50\u653e\u5230\u521d\u59cb\u4f4d\u7f6e\uff0c\u5e76\u628aa\u653e\u5230b\u7bb1\u5b50\u7684\u6700\u4e0a\u65b9\uff1b move a onto b\uff0c\u628aa\u548cb\u4e0a\u9762\u7684\u7bb1\u5b50\u653e\u56de\u521d\u59cb\u4f4d\u7f6e\uff0c\u5e76\u628aa\u653e\u5230b\u4e0a\u9762\uff1b pile a over b\uff0c\u628aa\u548ca\u4e0a\u9762\u7684\u7bb1\u5b50\u4e00\u8d77\u653e\u5230b\u7684\u6700\u4e0a\u65b9\uff1b pile a onto b\uff0c\u628ab\u4e0a\u9762\u7684\u7bb1\u5b50\u653e\u56de\u521d\u59cb\u4f4d\u7f6e\uff0c\u7136\u540e\u628aa\u548ca\u4e0a\u9762\u7684\u7bb1\u5b50\u4e00\u8d77\u653e\u5230b\u4e0a\u9762\u3002 \u5f53a = b\u6216a\u548cb\u5904\u5728\u540c\u4e00\u645e\u65f6\uff0c\u4efb\u4f55\u4f01\u56fe\u64cd\u4f5ca\u548cb\u7684\u547d\u4ee4\u90fd\u662f\u975e\u6cd5\u7684\u3002\u6240\u6709\u975e\u6cd5\u7684\u547d\u4ee4\u90fd\u8981\u5ffd\u7565\uff0c\u4e14\u4e0d\u80fd\u5bf9\u5f53\u524d\u79ef\u6728\u7684\u72b6\u6001\u4ea7\u751f\u4f5c\u7528\u3002 \u9ed1\u7237\u4e8e\u662f\u5199\u4e86\u4e2a\u7a0b\u5e8f\u6765\u8f93\u51fa\u6700\u540e\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u7bb1\u5b50\uff0c\u4f46\u662fbug\u592a\u591a\u4e86\u9ed1\u7237\u67e5\u4e0d\u51fa\u6765\u3002\u9ed1\u7237\u8bf7\u4f60\u5e2e\u4ed6debug\uff0c\u4f46\u662f\u4f60\u89c9\u5f97\u592a\u9ebb\u70e6\u4e86\uff0c\u4e8e\u662f\u51b3\u5b9a\u5148\u81ea\u5df1\u5199\u4e00\u4efd\u3002 \u3010\u8f93\u5165\u8981\u6c42\u3011 \u8f93\u5165\u75311\u4e2a\u6574\u6570N\u5f00\u59cb\u5f00\u59cb\uff0c\u8be5\u6574\u6570\u72ec\u5360\u4e00\u884c\uff0c0<N<25\u3002 \u63a5\u4e0b\u6765\u662f\u4e00\u7cfb\u5217\u7684\u5c0f\u5c45\u5c45\u7684\u884c\u52a8\u8bb0\u5f55\uff0c\u6bcf\u6761\u8bb0\u5f55\u72ec\u5360\u4e00\u884c\u3002\u6240\u6709\u7684\u8bb0\u5f55\u90fd\u6309\u7167\u4e0a\u9762\u7684\u5f62\u5f0f\u7ed9\u51fa\u3002\u6700\u540e\u201cquit\u201d\u4ee3\u8868\u5c0f\u5c45\u5c45\u884c\u52a8\u7ed3\u675f\u3002 \u3010\u8f93\u51fa\u8981\u6c42\u3011 \u4ee5\u7bb1\u5b50\u7684\u6700\u7ec8\u72b6\u6001\u4f5c\u4e3a\u8f93\u51fa\u3002\u6bcf\u4e00\u4e2a\u539f\u59cb\u7bb1\u5b50\u7684\u4f4d\u7f6ei\uff080 \u2264 i < N\uff09\u540e\u9762\u90fd\u8981\u7d27\u8ddf\u4e00\u4e2a\u5192\u53f7\u3002 \u5982\u679c\u81f3\u5c11\u6709\u4e00\u4e2a\u7bb1\u5b50\u5728\u8be5\u4f4d\u7f6e\u4e0a\uff0c\u5192\u53f7\u540e\u9762\u90fd\u8981\u7d27\u8ddf\u4e00\u4e2a\u7a7a\u683c\uff0c\u7136\u540e\u662f\u8be5\u4f4d\u7f6e\u4e0a\u6240\u6709\u7bb1\u5b50\u7f16\u53f7\u7684\u5e8f\u5217\u3002\u6bcf2\u4e2a\u7bb1\u5b50\u7684\u7f16\u53f7\u4e4b\u95f4\u4ee5\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\u884c\u5c3e\u4e0d\u80fd\u51fa\u73b0\u591a\u4f59\u7684\u7a7a\u683c\u3002 \u6bcf\u4e2a\u4f4d\u7f6e\u72ec\u5360\u4e00\u884c\uff0c\u4e00\u5171N\u884c\u6570\u636e\u3002 \u3010\u8f93\u5165\u6837\u4f8b\u3011 10 move 9 onto 1 move 8 over 1 move 7 over 1 move 6 over 1 pile 8 over 6 pile 8 over 5 move 2 over 1 move 4 over 9 quit \u3010\u8f93\u51fa\u6837\u4f8b\u3011 0: 0 1: 1 9 2 4 2: 3: 3 4: 5: 5 8 7 6 6: 7: 8: 9: FineArtz's solution Star /* \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 */ #include <iostream> #include <cstring> using namespace std; int a[26][26] = {0}; int place[26] = {0}, sum[26] = {0}; int n; void remove(int x){ int p = place[x]; int i = 1; while (a[p][i] != x) ++i; for (int j = i + 1; j <= sum[p]; ++j){ int t = a[p][j]; a[t][1] = t; place[t] = t; sum[t] = 1; a[p][j] = 0; } sum[p] = i; } void moveover(int x, int y){ int p = place[x], q = place[y]; remove(x); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void moveonto(int x, int y){ int p = place[x], q = place[y]; remove(x); remove(y); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void pileover(int x, int y){ int p = place[x], q = place[y]; int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } void pileonto(int x, int y){ int p = place[x], q = place[y]; remove(y); int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ a[i][1] = i; place[i] = i; sum[i] = 1; } char s1[10], s2[10]; int x, y; cin >> s1; while (s1[0] != 'q'){ cin >> x >> s2 >> y; ++x, ++y; if (place[x] == place[y]){ cin >> s1; continue; } if (s1[0] == 'm'){ if (s2[1] == 'v') moveover(x, y); else moveonto(x, y); } else{ if (s2[1] == 'v') pileover(x, y); else pileonto(x, y); } cin >> s1; } for (int i = 0; i < n; ++i){ cout << i << \":\"; for (int j = 1; j <= sum[i + 1]; ++j) cout << ' ' << a[i + 1][j] - 1; cout << endl; } return 0; } vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 30; int box[MAXNUM][MAXNUM], N; struct order { string o1, o2; int a, b; }; struct pos { int x, y; }idx[MAXNUM]; bool isLegal(int a, int b) { if (a == b || idx[a].x == idx[b].x) return false; return true; } void reset(int x, int y) { int tmp = box[x][y]; box[tmp][0] = tmp; box[x][y] = -1; idx[tmp].x = tmp; idx[tmp].y = 0; } void move(int n, int x, int y) { box[x][y] = n; box[idx[n].x][idx[n].y] = -1; idx[n].x = x; idx[n].y = y; } void printall() { for (int i = 0; i < N; ++i) { cout << i << ':'; for (int j = 0; box[i][j] != -1; ++j) cout << ' ' << box[i][j]; if (i < N - 1) cout << endl; } } void move_over(int a, int b) { //cout << \"move_over called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; move(a, idx[b].x, top); } void move_onto(int a, int b) { //cout << \"move_onto called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); move(a, idx[b].x, idx[b].y + 1); } void pile_over(int a, int b) { //cout << \"pile_over called.\" << endl; int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; int tmpx = idx[a].x; for (int j = idx[a].y; box[tmpx][j] != -1; ++j) { int tmp = box[tmpx][j]; move(tmp, idx[b].x, top); ++top; } } void pile_onto(int a, int b) { //cout << \"pile_onto called.\" << endl; for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); pile_over(a, b); } int main() { cin >> N; for (int i = 0; i < N; ++i) { box[i][0] = i; idx[i].x = i; idx[i].y = 0; for (int j = 1; j < N; ++j) box[i][j] = -1; } order arr[200]; int orders = 0; string tmp; cin >> tmp; while (strcmp(tmp.c_str(), \"quit\")) { arr[orders].o1 = tmp; cin >> arr[orders].a >> arr[orders].o2 >> arr[orders].b; ++orders; cin >> tmp; } for (int i = 0; i < orders; ++i) { if (!isLegal(arr[i].a, arr[i].b)) continue; if (arr[i].o1 == \"move\") { if (arr[i].o2 == \"over\") move_over(arr[i].a, arr[i].b); else move_onto(arr[i].a, arr[i].b); } else { if (arr[i].o2 == \"over\") pile_over(arr[i].a, arr[i].b); else pile_onto(arr[i].a, arr[i].b); } //printall(); } printall(); return 0; }","title":"4096"},{"location":"nr/4096/#4096","text":"\u9898\u76ee","title":"4096 \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50"},{"location":"nr/4096/#fineartzs-solution-star","text":"/* \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 */ #include <iostream> #include <cstring> using namespace std; int a[26][26] = {0}; int place[26] = {0}, sum[26] = {0}; int n; void remove(int x){ int p = place[x]; int i = 1; while (a[p][i] != x) ++i; for (int j = i + 1; j <= sum[p]; ++j){ int t = a[p][j]; a[t][1] = t; place[t] = t; sum[t] = 1; a[p][j] = 0; } sum[p] = i; } void moveover(int x, int y){ int p = place[x], q = place[y]; remove(x); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void moveonto(int x, int y){ int p = place[x], q = place[y]; remove(x); remove(y); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void pileover(int x, int y){ int p = place[x], q = place[y]; int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } void pileonto(int x, int y){ int p = place[x], q = place[y]; remove(y); int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ a[i][1] = i; place[i] = i; sum[i] = 1; } char s1[10], s2[10]; int x, y; cin >> s1; while (s1[0] != 'q'){ cin >> x >> s2 >> y; ++x, ++y; if (place[x] == place[y]){ cin >> s1; continue; } if (s1[0] == 'm'){ if (s2[1] == 'v') moveover(x, y); else moveonto(x, y); } else{ if (s2[1] == 'v') pileover(x, y); else pileonto(x, y); } cin >> s1; } for (int i = 0; i < n; ++i){ cout << i << \":\"; for (int j = 1; j <= sum[i + 1]; ++j) cout << ' ' << a[i + 1][j] - 1; cout << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4096/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 30; int box[MAXNUM][MAXNUM], N; struct order { string o1, o2; int a, b; }; struct pos { int x, y; }idx[MAXNUM]; bool isLegal(int a, int b) { if (a == b || idx[a].x == idx[b].x) return false; return true; } void reset(int x, int y) { int tmp = box[x][y]; box[tmp][0] = tmp; box[x][y] = -1; idx[tmp].x = tmp; idx[tmp].y = 0; } void move(int n, int x, int y) { box[x][y] = n; box[idx[n].x][idx[n].y] = -1; idx[n].x = x; idx[n].y = y; } void printall() { for (int i = 0; i < N; ++i) { cout << i << ':'; for (int j = 0; box[i][j] != -1; ++j) cout << ' ' << box[i][j]; if (i < N - 1) cout << endl; } } void move_over(int a, int b) { //cout << \"move_over called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; move(a, idx[b].x, top); } void move_onto(int a, int b) { //cout << \"move_onto called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); move(a, idx[b].x, idx[b].y + 1); } void pile_over(int a, int b) { //cout << \"pile_over called.\" << endl; int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; int tmpx = idx[a].x; for (int j = idx[a].y; box[tmpx][j] != -1; ++j) { int tmp = box[tmpx][j]; move(tmp, idx[b].x, top); ++top; } } void pile_onto(int a, int b) { //cout << \"pile_onto called.\" << endl; for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); pile_over(a, b); } int main() { cin >> N; for (int i = 0; i < N; ++i) { box[i][0] = i; idx[i].x = i; idx[i].y = 0; for (int j = 1; j < N; ++j) box[i][j] = -1; } order arr[200]; int orders = 0; string tmp; cin >> tmp; while (strcmp(tmp.c_str(), \"quit\")) { arr[orders].o1 = tmp; cin >> arr[orders].a >> arr[orders].o2 >> arr[orders].b; ++orders; cin >> tmp; } for (int i = 0; i < orders; ++i) { if (!isLegal(arr[i].a, arr[i].b)) continue; if (arr[i].o1 == \"move\") { if (arr[i].o2 == \"over\") move_over(arr[i].a, arr[i].b); else move_onto(arr[i].a, arr[i].b); } else { if (arr[i].o2 == \"over\") pile_over(arr[i].a, arr[i].b); else pile_onto(arr[i].a, arr[i].b); } //printall(); } printall(); return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4097/","text":"4097 \u7b80\u5355\u94fe\u8868 \u9898\u76ee \u3010\u8bd5\u9898\u63cf\u8ff0\u3011 \u7ed9\u5b9a\u4e00\u4e2aN\u4e2a\u6570\u7684\u6570\u7ec4\uff0cM\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u4e3a\u4e0b\u5217\u64cd\u4f5c\u4e4b\u4e00\u3002\u6c42\u6700\u540e\u7684\u6570\u7ec4\u3002 \u64cd\u4f5c1\uff1a\u5728\u7b2cX\u4e2a\u6570\u4e4b\u540e\u63d2\u5165\u4e00\u4e2a\u6570Y\u3002 \u64cd\u4f5c2\uff1a\u5220\u9664\u7b2cX\u4e2a\u6570\u3002 \u3010\u8f93\u5165\u8981\u6c42\u3011 \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570N\uff0cM\uff08N\uff0cM\u2264100000\uff09\u542b\u4e49\u89c1\u8bd5\u9898\u63cf\u8ff0\u3002 \u7b2c\u4e8c\u884cN\u4e2a\u6574\u6570\uff0c\u8868\u793a\u539f\u6765\u7684\u6570\u7ec4\u3002 \u63a5\u4e0b\u6765M\u884c\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570OPT\uff0c\u8868\u793a\u64cd\u4f5c\u7c7b\u578b\u3002 \u5bf9\u4e8e\u64cd\u4f5c1\uff0c\u63a5\u4e0b\u6765\u4e24\u4e2a\u6570X\uff0cY\uff0c\u542b\u4e49\u89c1\u9898\u9762\u63cf\u8ff0\uff0c\u4fdd\u8bc10\u2264X\u2264\u5f53\u524d\u6570\u7684\u4e2a\u6570\uff0c\u82e5X=0\uff0c\u8868\u793a\u5728\u6570\u7ec4\u5f00\u5934\u63d2\u5165\u3002 \u5bf9\u4e8e\u64cd\u4f5c2\uff0c\u63a5\u4e0b\u6765\u4e00\u4e2a\u6570X\uff0c\u542b\u4e49\u89c1\u9898\u9762\u63cf\u8ff0\uff0c\u4fdd\u8bc11\u2264X\u2264\u5f53\u524d\u6570\u7684\u4e2a\u6570\u3002 \u3010\u8f93\u51fa\u8981\u6c42\u3011 \u8f93\u51fa\u82e5\u5e72\u4e2a\u6570\uff0c\u8868\u793a\u6700\u540e\u7684\u6570\u7ec4\u3002 \u3010\u8f93\u5165\u6837\u4f8b\u3011 5 3 1 2 3 4 5 1 1 6 2 1 2 2 \u3010\u8f93\u51fa\u6837\u4f8b\u3011 6 3 4 5 FineArtz's solution Star /* \u7b80\u5355\u94fe\u8868 */ #include <iostream> #include <cmath> using namespace std; const int MAXS = 1000; int n, m, maxs; class Block{ public: Block *prev = nullptr, *next = nullptr; int data[MAXS]; int len = 0; Block(Block *p = nullptr, Block *q = nullptr) : prev(p), next(q) {} void split(int pos){ if (pos >= len || pos < 0) return; Block *b = new Block(this, next); if (next != nullptr) next->prev = b; next = b; b->len = len - pos; for (int i = 0; i < len - pos; ++i) b->data[i] = data[i + pos]; len = pos; } bool merge(){ Block *b = next; if (b == nullptr) return false; if (len + b->len > maxs) return false; next = b->next; if (next != nullptr) next->prev = this; for (int i = 0; i < b->len; ++i) data[len++] = b->data[i]; delete b; return true; } void delNext(){ Block *b = next; if (b == nullptr) return; next = b->next; if (next != nullptr) next->prev = this; delete b; } }; ostream &operator <<(ostream &os, const Block &b){ for (int i = 0; i < b.len; ++i) os << b.data[i] << ' '; return os; } Block *head = new Block(); void insert(int x, int y){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); p->data[p->len++] = y; } void remove(int x){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); --p->len; } void maintain(){ Block *p = head->next; while (p){ p->merge(); p = p->next; } } int main(){ cin >> n >> m; maxs = (int)(sqrt(n)) + 1; Block *p = head->next = new Block(); for (int i = 1; i <= n; ++i){ int t; cin >> t; p->data[p->len++] = t; if (p->len == maxs){ p->next = new Block(); p = p->next; } } while (m--){ int op; cin >> op; if (op == 1){ int x, y; cin >> x >> y; insert(x, y); } else{ int x; cin >> x; remove(x); } maintain(); } p = head->next; while (p){ cout << *p; p = p->next; } cout << endl; return 0; }","title":"4097"},{"location":"nr/4097/#4097","text":"\u9898\u76ee","title":"4097 \u7b80\u5355\u94fe\u8868"},{"location":"nr/4097/#fineartzs-solution-star","text":"/* \u7b80\u5355\u94fe\u8868 */ #include <iostream> #include <cmath> using namespace std; const int MAXS = 1000; int n, m, maxs; class Block{ public: Block *prev = nullptr, *next = nullptr; int data[MAXS]; int len = 0; Block(Block *p = nullptr, Block *q = nullptr) : prev(p), next(q) {} void split(int pos){ if (pos >= len || pos < 0) return; Block *b = new Block(this, next); if (next != nullptr) next->prev = b; next = b; b->len = len - pos; for (int i = 0; i < len - pos; ++i) b->data[i] = data[i + pos]; len = pos; } bool merge(){ Block *b = next; if (b == nullptr) return false; if (len + b->len > maxs) return false; next = b->next; if (next != nullptr) next->prev = this; for (int i = 0; i < b->len; ++i) data[len++] = b->data[i]; delete b; return true; } void delNext(){ Block *b = next; if (b == nullptr) return; next = b->next; if (next != nullptr) next->prev = this; delete b; } }; ostream &operator <<(ostream &os, const Block &b){ for (int i = 0; i < b.len; ++i) os << b.data[i] << ' '; return os; } Block *head = new Block(); void insert(int x, int y){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); p->data[p->len++] = y; } void remove(int x){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); --p->len; } void maintain(){ Block *p = head->next; while (p){ p->merge(); p = p->next; } } int main(){ cin >> n >> m; maxs = (int)(sqrt(n)) + 1; Block *p = head->next = new Block(); for (int i = 1; i <= n; ++i){ int t; cin >> t; p->data[p->len++] = t; if (p->len == maxs){ p->next = new Block(); p = p->next; } } while (m--){ int op; cin >> op; if (op == 1){ int x, y; cin >> x >> y; insert(x, y); } else{ int x; cin >> x; remove(x); } maintain(); } p = head->next; while (p){ cout << *p; p = p->next; } cout << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4099/","text":"4099 Love and Auto Memories Doll \u9898\u76ee Description \u73b0\u5728\u662f\u5468\u4e94\u665a\u4e0a\u516d\u70b9\uff0c\u60f3\u5fc5\u5bb6\u4f4f\u4e0a\u6d77\u7684\u540c\u5b66\u4eec\u5f88\u60f3\u65e9\u70b9\u56de\u5bb6\uff0c\u5916\u5730\u7684\u540c\u5b66\u591a\u534a\u8fd8\u6ca1\u5403\u665a\u996d\uff0c\u5403\u4e86\u665a\u996d\u7684\u540c\u5b66\u4e5f\u56e0\u4e3a\u7ecf\u5386\u4e86\u4e00\u5468\u7684\u5de5\u4f5c\u5b66\u4e60\u89c9\u5f97\u5f88\u7d2f\u60f3\u8981\u8d76\u5feb\u53bb\u7761\u89c9\uff0c\u6597\u5fd7\u6da3\u6563\uff0c\u4e0d\u60f3\u5199\u9898\u3002\u4f46\u8fd9\u5bf9\u4e8e\u94a2\u94c1\u76f4\u5973\u7d2b\u8587\u9171\u6765\u8bf4\u90fd\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u7d2b\u8587\u6ca1\u6709\u5bb6\u4eba\uff0c\u53c8\u5728\u519b\u961f\u4e2d\u53d7\u8fc7\u6267\u884c\u4efb\u52a1\u65f6\u53ef\u4ee5\u957f\u65f6\u95f4\u4e0d\u8fdb\u98df\u4e0d\u7761\u89c9\u7684\u8bad\u7ec3\uff0c\u6240\u4ee5\u5979\u73b0\u5728\u72b6\u6001\u7edd\u4f73\uff0c\u6b63\u4ee5200+APM\u7684\u901f\u5ea6\u9510\u610f\u5de5\u4f5c\u4e2d\u3002\u7d2b\u8587\u662f\u4e00\u540d\u6253\u5b57\u5458\uff0c\u5979\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u5ba2\u6237\u4ee3\u5199\u4e66\u4fe1\u3002\u5c3d\u7ba1\u7d2b\u8587\u5206\u5206\u949f\u5c31\u80fd\u7801\u5b8c\u4e00\u5c01\u4fe1\uff0c\u4f46\u5979\u5728\u4e0d\u65ad\u7801\u5b57\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e2a\u522b\u7684\u8bcd\u8bed\u4ea7\u751f\u4e86\u7279\u522b\u7684\u5174\u8da3\uff0c\u6bd4\u65b9\u8bf4\uff0clove\u3002\u4e8e\u662f\u5979\u5f00\u59cb\u4e00\u5c01\u4e00\u5c01\u770b\u4e4b\u524d\u7801\u8fc7\u7684\u4fe1\uff0c\u60f3\u8981\u4ece\u91cc\u9762\u627e\u51fa\u67d0\u4e2a\u7279\u5b9a\u7684\u8bcd\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u4ee5\u53ca\u7b2c\u4e00\u6b21\u662f\u5728\u54ea\u91cc\u51fa\u73b0\u7684\u3002 \u4f46\u7d2b\u8587\u5f88\u5feb\u53d1\u73b0\u81ea\u5df1\u7801\u8fc7\u7684\u4fe1\u592a\u957f\u592a\u591a\uff0c\u9760\u81ea\u5df1\u627e\u5b9e\u5728\u662f\u592a\u6162\u4e86\u3002\u4e8e\u662f\u5979\u627e\u5230\u4e86\u4f60\uff0c\u5e0c\u671b\u4f60\u80fd\u591f\u5e2e\u5e2e\u5979\u3002\u540c\u5b66\u4eec\u7684\u6c34\u5e73\u90fd\u5f88\u9ad8\uff0c\u60f3\u5fc5\u626b\u4e00\u773c\u5c31\u4f1a\u8bf4\u201c\u7b80\u5355\u7684KMP\u7b97\u6cd5\uff0c\u79d2\u4e86\u201d\uff0c\u4f46\u8fd9\u4e0d\u592a\u7b26\u5408A\u662f\u4e00\u9053\u65b0\u624b\u7b7e\u5230\u9898\u7684\u8bbe\u5b9a\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u7279\u522b\u5f3a\u8c03\u4e00\u4e0b\uff0c\u8fd9\u91cc\u7684\u4fe1\u4fdd\u8bc1\u53ea\u6709\u4e00\u884c\u5b57\u7b26\uff08\u7ed3\u5c3e\u6709\u4e2a\u56de\u8f66\uff09\uff0c\u7528\u7a7a\u683c\u6765\u5206\u5272\u5355\u8bcd\uff0c\u9664\u4e86\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u7a7a\u683c\u4e4b\u5916\u6ca1\u6709\u522b\u7684\u7b26\u53f7\uff1b\u800c\u4e14\u8fd8\u8981\u6c42\u6574\u4e2a\u5355\u8bcd\u5b8c\u5168\u76f8\u540c\u624d\u7b97\u5339\u914d\uff08\u4f46\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\uff0c\u524d\u7f00\u540e\u7f00\u6216\u8005\u5728\u4e2d\u95f4\u90fd\u662f\u4e0d\u884c\u7684\u3002 Input Format \u8f93\u5165\u5171\u4e09\u884c\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u5355\u8bcd\uff08\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff09\uff0c\u56de\u8f66\uff1b \u7b2c\u4e8c\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u63a5\u4e0b\u6765\u7684\u5b57\u7b26\u4e32\u7531\u591a\u5c11\u4e2a\u5355\u8bcd\u7ec4\u6210\uff0c\u56de\u8f66\uff1b \u7b2c\u4e8c\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u7ec4\u6210\uff09\uff0c\u56de\u8f66\u3002\u53ef\u80fd\u6709\u591a\u4e2a\u8fde\u7eed\u7684\u7a7a\u683c\u548c\u884c\u9996\u884c\u672b\u7a7a\u683c\u3002 Output Format \u8f93\u51fa\u5171\u4e00\u884c\u3002 \u82e5\u7ed9\u7684\u5355\u8bcd\u662f\u5728\u5b57\u7b26\u4e32\u4e2d\u51fa\u73b0\u8fc7\u7684\u5355\u8bcd\uff08\u5fc5\u987b\u662f\u524d\u540e\u88ab\u5f00\u5934/\u7a7a\u683c/\u6216\u56de\u8f66\u5939\u7740\u7684\u5b8c\u6574\u5355\u8bcd\uff0c\u4e14\u5ffd\u7565\u5927\u5c0f\u5199\u540e\u5fc5\u987b\u5168\u7b49\uff09\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u4e24\u4e2a\u6574\u6570\u3002\u7b2c\u4e00\u4e2a\u6574\u6570\u4e3a\u5b57\u7b26\u4e32\u4e2d\u6709\u51e0\u4e2a\u8fd9\u6837\u7684\u5355\u8bcd\uff1b\u7b2c\u4e8c\u4e2a\u6574\u6570\u4e3a\u5b57\u7b26\u4e32\u4e2d\u8be5\u5355\u8bcd\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u8bbe\u4e3a0\uff09\uff0c\u5e76\u4e14\u8be5\u6570\u5b57\u662f\u5ffd\u7565\u6240\u6709\u7a7a\u683c\u7684\uff0c\u4e5f\u5c31\u662f\u7a7a\u683c\u7684\u591a\u5c11\u4e0d\u4f1a\u5f71\u54cd\u8fd9\u4e2a\u7b54\u6848\u3002 \u82e5\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7\u7ed9\u5b9a\u7684\u5355\u8bcd\uff0c\u8f93\u51fa-1\u3002 Sample Input \u6570\u636e1\uff1a Love 13 Dear loVe Your charms aLoNe are beAUTiFul Can yoU be my dEar lOVE \u6570\u636e2\uff1a moe 26 Moe te i ma sen Moe te ru yo Moe te i ma sen o ka shii de su I ya moe te ru n da \u6570\u636e3\uff1a Feeling 58 Perception of the physical world does not necessarily result in a universal reaction among receivers But varies depending up on ones tendency handle the situation How the situation relates to the receivers past experience And any number of other factors Feelings are also known as a state of consciousness Such as that resulting from emotions sentiments or desires Sample Output \u6570\u636e1\uff1a 2 4 \u6570\u636e2\uff1a 4 0 \u6570\u636e3\uff1a -1 \u6570\u636e\u89e3\u91ca\uff1a \u6570\u636e1\u5728\u5ffd\u7565\u6240\u6709\u7a7a\u683c\uff08\u5305\u62ec\u5206\u5272\u5355\u8bcd\u7684\u7a7a\u683c\uff09\u4e4b\u540e\uff0cloVe\u7684l\u5904\u5728\u5b57\u7b26\u4e32\u4e2d4\u7684\u4f4d\u7f6e\uff0c\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\u7684love\u603b\u5171\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u56e0\u6b64\u7b54\u6848\u4e3a2, 4\u3002 \u6570\u636e2\u518d\u6b21\u63d0\u9192\uff0c\u5b57\u7b26\u4e32\u662f\u4ee50\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4e0b\u6807\u7684\u3002 \u6570\u636e3\u7684\u5b57\u7b26\u4e32\u4e2d\u6709\u5355\u8bcdFeelings\uff0c\u4f46\u662f\u56e0\u4e3a\u4e0d\u662fFeeling\uff0c\u6240\u4ee5\u8f93\u51fa\u7ed3\u679c\u4e3a-1\u3002 Data Range \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\u6240\u6709\u5355\u8bcd\u7684\u957f\u5ea6\\(1 \\le W \\le 250\\)\uff0c\u6587\u7ae0\u7684\u957f\u5ea6\\(1 \\le L \\le 10^7\\)\u3002 \u4f46\u4ec5\u5bf9\u4e8e\\(90\\%\\)\u7684\u6570\u636e\uff0c\u5355\u8bcd\u6570\\(N \\le 4 \\times 10^4\\)\u3002 FineArtz's solution Star /* Love and Auto Memories Doll */ #include <iostream> #include <cstring> using namespace std; inline void lowercase(char *s, int len){ for (int i = 0; i < len; ++i) if (s[i] < 'a') s[i] = s[i] + 'a' - 'A'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); char s[255], w[255]; cin >> s; int n, lens = strlen(s); lowercase(s, lens); cin >> n; int ans = 0, cnt = 0; while (n--){ cin >> w; int l = strlen(w); lowercase(w, l); if (lens != l){ if (cnt == 0) ans += l; } else{ bool flag = true; for (int i = 0; i < l; ++i){ if (s[i] != w[i]){ flag = false; break; } } if (flag){ ++cnt; } else{ if (cnt == 0) ans += l; } } } if (cnt == 0) cout << \"-1\\n\"; else cout << cnt << ' ' << ans << '\\n'; return 0; }","title":"4099"},{"location":"nr/4099/#4099-love-and-auto-memories-doll","text":"\u9898\u76ee","title":"4099 Love and Auto Memories Doll"},{"location":"nr/4099/#fineartzs-solution-star","text":"/* Love and Auto Memories Doll */ #include <iostream> #include <cstring> using namespace std; inline void lowercase(char *s, int len){ for (int i = 0; i < len; ++i) if (s[i] < 'a') s[i] = s[i] + 'a' - 'A'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); char s[255], w[255]; cin >> s; int n, lens = strlen(s); lowercase(s, lens); cin >> n; int ans = 0, cnt = 0; while (n--){ cin >> w; int l = strlen(w); lowercase(w, l); if (lens != l){ if (cnt == 0) ans += l; } else{ bool flag = true; for (int i = 0; i < l; ++i){ if (s[i] != w[i]){ flag = false; break; } } if (flag){ ++cnt; } else{ if (cnt == 0) ans += l; } } } if (cnt == 0) cout << \"-1\\n\"; else cout << cnt << ' ' << ans << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4100/","text":"4100 Nene tchi\u2019s Disaster \u9898\u76ee Description \u73b0\u5728\u662f\u5468\u4e94\u665a\u4e0a\u516d\u70b9\uff0c\u793e\u755c\u6881\u9752\u53f6\u7ec8\u4e8e\u7ed3\u675f\u4e86\u67d0\u6e38\u620f\u516c\u53f8\u4e00\u5468\u7684\u5de5\u4f5c\uff0c\u51c6\u5907\u56de\u5bb6\u6d17\u6d17\u7761\u4e86\u3002\u4f46\u504f\u504f\u5728\u8fd9\u4e2a\u65f6\u5019\uff0c\u5979\u7684\u631a\u53cb\u517c\u9694\u58c1\u7801\u519c\u90e8\u95e8\u7684\u540c\u4e8b\uff0c\u7a0b\u5e8f\u59ec\u6bb7\u5b81\u5b81\u8dd1\u6765\u627e\u5979\u3002\u539f\u6765\u5b81\u5b81\u59ec\u4e00\u4ecb\u6cd5\u5b66\u751f\u8dd1\u53bb\u521d\u5b66C++\uff0c\u5f53\u7136\u662f\u5404\u79cd\u672f\u8bed\u542c\u4e0d\u61c2\uff0c\u800c\u4e14\u4ee3\u7801\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u5e38\u6570\u5de8\u9ad8\uff0c\u5e38\u5e38\u628a\u5979\u7684\u4e0a\u53f8\u6c14\u5f97\u8138\u8272\u53d1\u9ed1\uff1b\u4eca\u5929\u4e0a\u53f8\u7ec8\u4e8e\u5fcd\u65e0\u53ef\u5fcd\uff0c\u7ed9\u5979\u5e03\u7f6e\u4e86\u4e00\u6253\u8bad\u7ec3\u9898\u8ba9\u5979\u4e24\u5c0f\u65f6\u5185\u505a\u5b8c\uff08\u65e0\u507f\u52a0\u73ed\uff09\uff0c\u5982\u679c\u8fd8\u770b\u4e0d\u61c2\u6216\u8005\u53c8TLE\uff0c\u4eca\u665a\u5c31\u8981\u628a\u5979\u6293\u53bb\u5c04\u51fb\u573a\u5f53\u4eba\u8089\u9776\u5b50\u3002\u6ca1\u60f3\u5230\u5b81\u5b81\u59ec\u7b2c\u4e00\u9053\u9898\u7684\u9898\u9762\u5c31\u770b\u4e0d\u61c2\uff0c\u4e8e\u662f\u8dd1\u6765\u5411\u9752\u53f6\u6c42\u6551\u3002\u9898\u9762\u4ec5\u4ec5\u53ea\u6709\u4e00\u884c\u5b57\uff1a \u73b0\u6709\u4e00\u4e2a\u6392\u5217\u7684\u6240\u6709\u524d\u7f00\u7684\u9006\u5e8f\u5bf9\u6570\uff0c\u8f93\u51fa\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u6392\u5217\u3002 \u867d\u7136\u9752\u53f6\u4e5f\u770b\u4e0d\u61c2\u9898\u9762\uff0c\u4f46\u9752\u53f6\u77e5\u9053\u8fd9\u4e9b\u672f\u8bed\u53ef\u4ee5\u8c37\u6b4c\uff0c\u67e5\u8be2\u7ed3\u679c\u5982\u4e0b\uff1a \u6392\u5217\uff1a\u4e00\u4e2a\u6392\u5217\u5fc5\u7136\u662f\u4e00\u4e2a\u5e8f\u5217\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(N\\)\u7684\u6392\u5217\uff08\u5728\u6ca1\u6709\u7279\u6b8a\u58f0\u660e\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\uff09\u5219\u662f\u6307\\(1\\sim N\\)\u8fd9\\(N\\)\u4e2a\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u4ee5\u4efb\u610f\u987a\u5e8f\u7ec4\u6210\u7684\u4e00\u4e2a\u5e8f\u5217\u3002 \u524d\u7f00\uff1a\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(N\\)\u7684\u5e8f\u5217\u7684\u957f\u5ea6\u4e3a\\(K \\left( K \\leq N \\right)\\)\u7684\u524d\u7f00\u662f\u6307\u539f\u5e8f\u5217\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u5b83\u5305\u542b\u539f\u5e8f\u5217\u7b2c\\(1\\sim K\\)\u7684\u6240\u6709\u5143\u7d20\u3002\u56e0\u6b64\uff0c\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(N\\)\u7684\u5e8f\u5217\u6709\\(N\\)\u4e2a\u524d\u7f00\u3002 \u9006\u5e8f\u5bf9\uff1a\u4e00\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u662f\u6307\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u6709\u591a\u5c11\u5bf9\u5143\u7d20\u6ee1\u8db3\u987a\u5e8f\u4e0a\u5728\u524d\u7684\u5143\u7d20\u5927\u4e8e\u5728\u540e\u7684\u5143\u7d20\u3002\u4ea6\u5373\u5bf9\u4e8e\u5e8f\u5217\\(A[1..n]\\)\uff0c\u82e5\u5b58\u5728\u6b63\u6574\u6570\\(i, j\\)\u4f7f\u5f97\\(1\\leq i < j \\leq n\\) \u800c\u4e14 \\(A[i] > A[j]\\)\uff0c\u5219 \\(<A[i], A[j]>\\) \u8fd9\u4e2a\u6709\u5e8f\u5bf9\u79f0\u4e3aA\u7684\u4e00\u4e2a\u9006\u5e8f\u5bf9\uff1b\u4e00\u4e2a\u5e8f\u5217\u4e2d\u9006\u5e8f\u5bf9\u7684\u6570\u91cf\u5c31\u662f\u8fd9\u4e2a\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u6570\u3002 \u6076\u8865\u4e86\u4e00\u5957\u672f\u8bed\u540e\uff0c\u9752\u53f6\u7ec8\u4e8e\u770b\u61c2\u4e86\u9898\u9762\u3002\u4f46\u5176\u5b9e\u9752\u53f6\u53ea\u662f\u4e00\u4e2a\u7f8e\u5de5\uff0c\u6839\u672c\u4e0d\u4f1aC++\uff0c\u4e8e\u662f\u5979\u628a\u62ef\u6551\u5b81\u5b81\u59ec\u7684\u5927\u4efb\u4ea4\u7ed9\u4e86\u4f60\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\\(T\\)\uff0c\u4e3a\u6570\u636e\u7ec4\u6570\u3002\uff08\u672c\u989810\u5927\u7ec4\u6570\u636e\uff0c\u4f46\u6bcf\u4e2a\u5927\u7ec4\u6570\u636e\u4e0b\u5206T\u4e2a\u5c0f\u7ec4\uff0c\u4e00\u4e2a\u5c0f\u7ec4\u9519\u8bef\u5219\u8be5\u5927\u7ec40\u5206\uff0c\u65f6\u95f4\u9650\u5236\u4e3a\u4e00\u4e2a\u5927\u7ec4\u7684\u65f6\u95f4\u9650\u5236\u3002\uff09 \u6bcf\u4e00\u5c0f\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\\(N\\)\uff0c\u7b2c\u4e8c\u884c\u6709\\(N\\)\u4e2a\u6574\u6570\\(A_i\\)\uff0c\u8868\u793a\u957f\u5ea6\u4e3a\\(i\\)\u7684\u524d\u7f00\u7684\u9006\u5e8f\u5bf9\u6570\u3002 Output Format \u6709T\u7ec4\u8f93\u51fa\uff0c\u5bf9\u5e94T\u7ec4\u8f93\u5165\u3002 \u6bcf\u4e00\u5c0f\u7ec4\u6570\u636e\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570\\(M\\)\uff0c\u8868\u793a\u7b26\u5408\u8f93\u5165\u8981\u6c42\u7684\u6392\u5217\u6709\u591a\u5c11\u4e2a\uff1b \u63a5\u4e0b\u6765\\(M\\)\u884c\u6bcf\u884c\\(N\\)\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e00\u4e2a\u7b26\u5408\u8f93\u5165\u8981\u6c42\u7684\u6392\u5217\u3002 Sample Input 2 3 0 0 0 3 0 1 3 Sample Output 1 1 2 3 1 3 2 1 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N \\leq 10\\)\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(N \\leq 5000\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(1 \\leq T \\leq 5, 1 \\leq N \\leq 10^6\\)\u3002 \u8fd9\u6b21\u8bc4\u6d4b\u673a\u7684\u6027\u80fd\u548c\u4f18\u5316\u90fd\u5f88\u597d\uff0c\u65f6\u9650\u8fd8\u4e24\u79d2\uff0c\u5e38\u6570\u4e0d\u8fc7\u5206\u7684\u8bdd\uff0c\u591a\u4e2a\u628alog\u4e5f\u80fd\u8f7b\u677e\u901a\u8fc7\u3002 FineArtz's solution Star /* Nene tchi's Disaster */ #include <iostream> #include <cstring> using namespace std; class Node{ public: int l = 0, r = 0, sum = 0; Node() = default; }; Node a[1000010 * 4]; long long b[1000010], ans[1000010]; int t, n; void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r) a[x].sum = 1; else{ int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } } int findk(int x, int k){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].sum >= k) return findk(x * 2, k); else return findk(x * 2 + 1, k - a[x * 2].sum); } void remove(int x, int k){ if (a[x].l == a[x].r){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (k <= mid) remove(x * 2, k); else remove(x * 2 + 1, k); --a[x].sum; } void solve(){ memset(a, 0, sizeof(a)); memset(b, 0, sizeof(b)); memset(ans, 0, sizeof(ans)); cin >> n; buildTree(1, 1, n); for (int i = 1; i <= n; ++i) cin >> b[i]; for (int i = n; i > 1; --i){ int d = b[i] - b[i - 1]; ans[i] = findk(1, i - d); remove(1, ans[i]); } ans[1] = findk(1, 1); cout << 1 << endl; for (int i = 1; i <= n; ++i) cout << ans[i] << ' '; cout << endl; } int main(){ cin >> t; while (t--){ solve(); } return 0; }","title":"4100"},{"location":"nr/4100/#4100-nene-tchis-disaster","text":"\u9898\u76ee","title":"4100 Nene tchi\u2019s Disaster"},{"location":"nr/4100/#fineartzs-solution-star","text":"/* Nene tchi's Disaster */ #include <iostream> #include <cstring> using namespace std; class Node{ public: int l = 0, r = 0, sum = 0; Node() = default; }; Node a[1000010 * 4]; long long b[1000010], ans[1000010]; int t, n; void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r) a[x].sum = 1; else{ int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } } int findk(int x, int k){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].sum >= k) return findk(x * 2, k); else return findk(x * 2 + 1, k - a[x * 2].sum); } void remove(int x, int k){ if (a[x].l == a[x].r){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (k <= mid) remove(x * 2, k); else remove(x * 2 + 1, k); --a[x].sum; } void solve(){ memset(a, 0, sizeof(a)); memset(b, 0, sizeof(b)); memset(ans, 0, sizeof(ans)); cin >> n; buildTree(1, 1, n); for (int i = 1; i <= n; ++i) cin >> b[i]; for (int i = n; i > 1; --i){ int d = b[i] - b[i - 1]; ans[i] = findk(1, i - d); remove(1, ans[i]); } ans[1] = findk(1, 1); cout << 1 << endl; for (int i = 1; i <= n; ++i) cout << ans[i] << ' '; cout << endl; } int main(){ cin >> t; while (t--){ solve(); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4102/","text":"4102 pilots \u9898\u76ee Description \u5c0fG\u60f3\u8981\u6210\u5f53\u98de\u884c\u5458\uff0c\u4ed6\u73b0\u5728\u62ff\u5230\u4e86\u4e00\u4e2a\u98de\u884c\u5458\u6d4b\u8bd5\u7684\u96be\u5ea6\u5e8f\u5217\u3002 \u4ed6\u5e0c\u671b\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\u627e\u5230\u4e00\u4e2a\u6700\u957f\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\uff0c\u4f7f\u5f97\u8be5\u5b50\u5e8f\u5217\u4e2d\u4efb\u610f\u4e24\u4e2a\u96be\u5ea6\u7684\u5dee\u503c\u4e0d\u4f1a\u8d85\u8fc7\u4ed6\u8bbe\u5b9a\u7684\u6700\u5927\u503cK\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6709\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570k\uff080<=k<=2000,000,000\uff09\uff0cn(1<=n<=3000,000)\uff0ck\u4ee3\u8868\u5c0fG\u8bbe\u5b9a\u7684\u6700\u5927\u503c\uff0cn\u4ee3\u8868\u96be\u5ea6\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u4e3an\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570ai\uff081<=ai<=2000,000,000\uff09\uff0c\u8868\u793a\u96be\u5ea6\u5e8f\u5217\u3002 Output Format \u6700\u5927\u7684\u5b57\u4e32\u957f\u5ea6\u3002 Sample Input 3 9 5 1 3 5 8 6 6 9 10 Sample Output 4 FineArtz's solution Star /* pilots */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int INF = 2147483647; int k, n, a[3000005]; pair<int, int> qmin[3000005], qmax[3000005]; bool check(int len){ memset(qmin, 0, sizeof(qmax)); memset(qmax, 0, sizeof(qmax)); int frontMin = 0, rearMin = 0; int frontMax = 0, rearMax = 0; qmin[rearMin++] = make_pair(0, 0); qmax[rearMax++] = make_pair(0, INF); for (int i = 1; i <= n; ++i){ while (frontMin != rearMin && qmin[frontMin].first <= i - len) ++frontMin; while (frontMax != rearMax && qmax[frontMax].first <= i - len) ++frontMax; while (frontMin != rearMin && a[i] <= qmin[rearMin - 1].second) --rearMin; qmin[rearMin++] = make_pair(i, a[i]); while (frontMax != rearMax && a[i] >= qmax[rearMax - 1].second) --rearMax; qmax[rearMax++] = make_pair(i, a[i]); if (i < len) continue; if (qmax[frontMax].second - qmin[frontMin].second <= k) return true; } return false; } int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; int l = 1, r = n, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"4102"},{"location":"nr/4102/#4102-pilots","text":"\u9898\u76ee","title":"4102 pilots"},{"location":"nr/4102/#fineartzs-solution-star","text":"/* pilots */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int INF = 2147483647; int k, n, a[3000005]; pair<int, int> qmin[3000005], qmax[3000005]; bool check(int len){ memset(qmin, 0, sizeof(qmax)); memset(qmax, 0, sizeof(qmax)); int frontMin = 0, rearMin = 0; int frontMax = 0, rearMax = 0; qmin[rearMin++] = make_pair(0, 0); qmax[rearMax++] = make_pair(0, INF); for (int i = 1; i <= n; ++i){ while (frontMin != rearMin && qmin[frontMin].first <= i - len) ++frontMin; while (frontMax != rearMax && qmax[frontMax].first <= i - len) ++frontMax; while (frontMin != rearMin && a[i] <= qmin[rearMin - 1].second) --rearMin; qmin[rearMin++] = make_pair(i, a[i]); while (frontMax != rearMax && a[i] >= qmax[rearMax - 1].second) --rearMax; qmax[rearMax++] = make_pair(i, a[i]); if (i < len) continue; if (qmax[frontMax].second - qmin[frontMin].second <= k) return true; } return false; } int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; int l = 1, r = n, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4105/","text":"4105 difference \u9898\u76ee Description \u4f17\u6240\u5468\u77e5\uff0cdhh\u662f\u4e2a\u6570\u5b66master\uff0c\u4ed6\u6700\u8fd1\u5728\u7814\u7a76\u4e00\u4e2a\u95ee\u9898\u3002 dhh\u6709\u4e00\u4e2a\u6570\u636e\u96c6\uff0c\u91cc\u9762\u6709\\(N\\)\u4e2a\u6574\u6570\\(A_1 \\sim A_N\\)\u3002\u63a5\u4e0b\u6765\u4ed6\u4f1a\u5f97\u5230\\(M\\)\u4e2a\u6570\u5b57\\(B_1 \\sim B_M\\)\uff0c\u4ed6\u9700\u8981\u5f88\u5feb\u5730\u7b97\u51fa\u5bf9\u4e8e\u6bcf\u4e2a\\(B_i\\)\uff0c\u4ed6\u4e0e\\(A\\)\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u6784\u6210\u7684\u5dee\u4e2d\u6700\u5c0f\u7684\u591a\u5c11\uff1f\u6216\u8005\u66f4\u4e25\u8c28\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\\(1 \\le i \\le M\\)\uff0c Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u4e2a\u6b63\u6574\u6570\\(N,M\\)\u3002 \u7b2c\u4e8c\u884cN\u4e2a\u6574\u6570\\(A_i\\)\u3002 \u518d\u63a5\u4e0b\u6765\\(M\\)\uff0c\u6bcf\u884c\u4e00\u4e2a\u6b63\u6574\u6570\\(B_i\\)\u3002 Output Format \u8f93\u51fa\u5171\\(M\\)\u884c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\\(B_i\\)\uff0c\u8f93\u51fa\u4e00\u884c\u8868\u793a\\(ans_i\\)\u3002 Sample Input 5 4 2 3 1 2 12 16 2 9 14 Sample Output 4 0 3 2 Data Range \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 1000\\)\u3002 \u5bf9\u4e8e\u53e6\u5916\\(10\\%\\)\u7684\u6570\u636e\uff0c\u6570\u636e\u5b8c\u5168\u968f\u673a\u3002 \u5bf9\u4e8e\u53e6\u5916\\(10\\%\\)\u7684\u6570\u636e\uff0c\\( \\vert A_i \\vert, \\vert B_i \\vert \\le 10^6 \\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 2 \\times 10^5\\)\uff0c\\( \\vert A_i \\vert, \\vert B_i \\vert \\le 10^9 \\)\u3002 Hint \u4e3a\u4fdd\u8bc1\u4f60\u80fd\u6b63\u5e38AC\u6b64\u9898\uff0c\u5982\u679ctle\uff0c\u8bf7\u5c1d\u8bd5\u4f7f\u7528scanf/printf\u6216\u8005\u8bfb\u5165/\u8f93\u51fa\u4f18\u5316\u3002 FineArtz's solution Star /* difference */ #include <iostream> #include <cmath> using namespace std; struct Heap{ int heapsize = 0; int a[200005] = {0}; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] > a[i + 1]) ++i; if (a[i >> 1] > a[i]){ swap(i, i >> 1); i <<= 1; } else break; } } void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } int top(){ return a[1]; } }; int n, m; Heap heap; int a[200005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ int t; cin >> t; heap.insert(t); } for (int i = 1; i <= n; ++i){ a[i] = heap.top(); //cout << a[i] << endl; heap.pop(); } while (m--){ int q; cin >> q; int l = 1, r = n, mid; while (l <= r){ mid = (l + r) / 2; if (a[mid] == q) break; if (a[mid] > q) r = mid - 1; else l = mid + 1; } int ans = abs(q - a[mid]); if (mid > 1){ ans = min(ans, abs(q - a[mid - 1])); } if (mid < n){ ans = min(ans, abs(q - a[mid + 1])); } cout << ans << '\\n'; } return 0; } WashSwang's solution Star #include <iostream> #include <algorithm> using namespace std; struct btype{ int v; int ind; } b[200001]; bool cmp(btype x,btype y){ return x.v<y.v; } int a[200001],m,n,l,r,mid,ans[200001],minn; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); sort(a,a+n); for (int i=0;i<m;++i) {scanf(\"%d\",&b[i].v);b[i].ind=i;} sort(b,b+m,cmp); l=0; for (int i=0;i<m;++i){ r=n-1; while (l<=r){ mid=(l+r)/2; if (a[mid]<b[i].v) l=mid+1; else if (a[mid]>b[i].v) r=mid-1; else { l=mid; break; } } minn=2000000001; if (l<n) minn=min(minn,abs(a[l]-b[i].v)); if (l>=1) minn=min(minn,abs(a[l-1]-b[i].v)); ans[b[i].ind]=minn; } for (int i=0;i<m;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4105"},{"location":"nr/4105/#4105-difference","text":"\u9898\u76ee","title":"4105 difference"},{"location":"nr/4105/#fineartzs-solution-star","text":"/* difference */ #include <iostream> #include <cmath> using namespace std; struct Heap{ int heapsize = 0; int a[200005] = {0}; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] > a[i + 1]) ++i; if (a[i >> 1] > a[i]){ swap(i, i >> 1); i <<= 1; } else break; } } void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } int top(){ return a[1]; } }; int n, m; Heap heap; int a[200005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ int t; cin >> t; heap.insert(t); } for (int i = 1; i <= n; ++i){ a[i] = heap.top(); //cout << a[i] << endl; heap.pop(); } while (m--){ int q; cin >> q; int l = 1, r = n, mid; while (l <= r){ mid = (l + r) / 2; if (a[mid] == q) break; if (a[mid] > q) r = mid - 1; else l = mid + 1; } int ans = abs(q - a[mid]); if (mid > 1){ ans = min(ans, abs(q - a[mid - 1])); } if (mid < n){ ans = min(ans, abs(q - a[mid + 1])); } cout << ans << '\\n'; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4105/#washswangs-solution-star","text":"#include <iostream> #include <algorithm> using namespace std; struct btype{ int v; int ind; } b[200001]; bool cmp(btype x,btype y){ return x.v<y.v; } int a[200001],m,n,l,r,mid,ans[200001],minn; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); sort(a,a+n); for (int i=0;i<m;++i) {scanf(\"%d\",&b[i].v);b[i].ind=i;} sort(b,b+m,cmp); l=0; for (int i=0;i<m;++i){ r=n-1; while (l<=r){ mid=(l+r)/2; if (a[mid]<b[i].v) l=mid+1; else if (a[mid]>b[i].v) r=mid-1; else { l=mid; break; } } minn=2000000001; if (l<n) minn=min(minn,abs(a[l]-b[i].v)); if (l>=1) minn=min(minn,abs(a[l-1]-b[i].v)); ans[b[i].ind]=minn; } for (int i=0;i<m;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4106/","text":"4106 Watashi kininarimasu\uff01 \u9898\u76ee Description \u4e3a\u4e86\u641c\u67e5\u51fa\u79d8\u5bc6\u793e\u56e2\u2014\u2014\u201c\u5973\u90ce\u8718\u86db\u4f1a\u201d\u7684\u62db\u65b0\u4fbf\u6761\uff0c\u6298\u6728\u548c\u5343\u53cd\u7530\u6b63\u5728\u5206\u6790\u516c\u544a\u677f\u4e0a\u7684\u6240\u6709\u793e\u56e2\u62db\u65b0\u6d77\u62a5\u3002\u7531\u4e8e\u795e\u5c71\u9ad8\u4e2d\u4ee5\u793e\u56e2\u6d3b\u52a8\u4e30\u5bcc\u591a\u5f69\u4e3a\u4f20\u7edf\uff0c\u5de8\u5927\u7684\u516c\u544a\u677f\u51e0\u4e4e\u5df2\u7ecf\u88ab\u5404\u5f0f\u5404\u6837\u7684\u62db\u65b0\u6d77\u62a5\u8d34\u6ee1\u3002\u5e78\u597d\uff0c\u4e3a\u4e86\u65b9\u4fbf\u7ba1\u7406\uff0c\u793e\u56e2\u7684\u62db\u65b0\u6d77\u62a5\u90fd\u6309\u7167\u603b\u52a1\u59d4\u5458\u4f1a\u7684\u89c4\u5b9a\u8bbe\u8ba1\u548c\u5f20\u8d34\uff0c\u56e0\u6b64\u76f8\u5f53\u6574\u9f50\u3002\u603b\u52a1\u59d4\u5458\u4f1a\u7684\u89c4\u5b9a\u662f\u8fd9\u6837\u7684\uff1a\u516c\u544a\u677f\u7684\u9ad8\u4e3a\\(H\\)\uff08\u4e2a\u5355\u4f4d\u957f\u5ea6\uff09\uff0c\u5bbd\u4e3a\\(W\\)\uff0c\u4ece\u4e0a\u5f80\u4e0b\u7684\u884c\u6807\u4e3a\\(1\\sim H\\)\uff0c\u4ece\u5de6\u5f80\u53f3\u7684\u5217\u6807\u4e3a\\(1\\sim W\\)\uff1b\u800c\u62db\u65b0\u6d77\u62a5\u7684\u9ad8\u5ea6\u5fc5\u987b\u4e3a\\(1\\)\uff0c\u5bbd\u53ef\u4ee5\u4e3a\u4efb\u610f\u7684\u6b63\u6574\u6570\u3002\u6d77\u62a5\u662f\u5404\u4e2a\u793e\u56e2\u5728\u4e0d\u540c\u65f6\u95f4\u5f20\u8d34\u4e0a\u53bb\u7684\uff08\u5373\u975e\u540c\u65f6\uff0c\u6709\u552f\u4e00\u987a\u5e8f\uff09\uff0c\u5f20\u8d34\u65f6\u5fc5\u987b\u9075\u5b88\u201c\u6d77\u62a5\u4e4b\u95f4\u4e0d\u80fd\u91cd\u53e0\uff0c\u5f20\u8d34\u65f6\u5fc5\u987b\u5f20\u8d34\u5728\u53ef\u4ee5\u5f20\u8d34\u7684\u6700\u9ad8\u7684\u4f4d\u7f6e\uff08\u884c\u6807\u5c3d\u53ef\u80fd\u5c0f\uff09\uff0c\u5982\u679c\u8fd9\u6837\u7684\u4f4d\u7f6e\u6709\u591a\u4e2a\u5c31\u5f20\u8d34\u5728\u6700\u5de6\u8fb9\u7684\u90a3\u4e2a\u4f4d\u7f6e\u4e0a\uff08\u5217\u6807\u5c3d\u53ef\u80fd\u5c0f\uff09\u201d\u7684\u89c4\u5219\uff0c\u800c\u4e14\u6d77\u62a5\u4e2d\u4e5f\u5fc5\u987b\u5199\u4e0a\u5f20\u8d34\u7684\u65f6\u95f4\u3002\u5982\u679c\u65e0\u6cd5\u5f20\u8d34\uff0c\u5c31\u53ea\u80fd\u53e0\u5728\u516c\u544a\u677f\u65c1\u8fb9\u7684\u76d2\u5b50\u91cc\u9762\u4e86\uff0c\u8c01\u8ba9\u4f60\u6765\u5f97\u592a\u665a/\u6d77\u62a5\u505a\u7684\u592a\u5bbd\u4e86\u5462\u3002 \u5f53\u7136\uff0c\u5bf9\u516c\u544a\u677f\u7684\u5185\u5bb9\u5206\u6790\u5b8c\u6210\u4e4b\u540e\uff0c\u4e0a\u9762\u5e76\u6ca1\u6709\u5973\u90ce\u8718\u86db\u4f1a\u7684\u62db\u65b0\u4fbf\u6761\uff08\u4e0d\u7136\u65e9\u88ab\u603b\u52a1\u59d4\u5458\u4f1a\u6495\u4e86\uff09\uff0c\u4e8e\u662f\u6298\u6728\u5f00\u59cb\u4e00\u8fb9\u56de\u5bb6\u4e00\u8fb9\u601d\u8003\uff08\u4e3a\u4e86\u8282\u80fd\uff09\u90a3\u5f20\u62db\u65b0\u4fbf\u6761\u5230\u5e95\u85cf\u5728\u4e86\u54ea\u91cc\u3002\u673a\u667a\u5982\u6298\u6728\uff0c\u4ed6\u4ec5\u4ec5\u82b1\u4e86\u4e5d\u5206\u53c8\u4e8c\u5341\u4e94\u79d2\u5c31\u63a8\u7406\uff08YY\uff09\u51fa\u4e86\u4fbf\u6761\u85cf\u5728\u90a3\u5f20\u8986\u76d6\u4e86\u67d0\u67d0\u5750\u6807\u7684\u6d77\u62a5\u4e4b\u540e\uff0c\u8fd9\u5f20\u6d77\u62a5\u6240\u5c5e\u7684\u793e\u56e2\u91cc\u9762\u4e00\u5b9a\u6709\u5185\u9b3c\u3002\u7136\u800c\u6298\u6728\u5e76\u4e0d\u8bb0\u5f97\u8986\u76d6\u90a3\u4e2a\u5750\u6807\u7684\u6d77\u62a5\u662f\u54ea\u4e2a\u793e\u56e2\u7684\u4e86\uff0c\u4e8e\u662f\u4ed6\u53bb\u8be2\u95ee\u65c1\u8fb9\u8bb0\u5fc6\u529b\u8d85\u7fa4\u7684\u5343\u53cd\u7530\uff1b\u7136\u800c\u7531\u4e8e\u5343\u53cd\u7530\u5bf9\u4e8e\u6bcf\u5f20\u6d77\u62a5\u7684\u5177\u4f53\u5185\u5bb9\u8fc7\u4e8e\u201c\u6211\u5f88\u597d\u5947\u201d\uff0c\u5979\u53ea\u8bb0\u4f4f\u4e86\u6bcf\u5f20\u6d77\u62a5\uff08\u5305\u62ec\u516c\u544a\u677f\u4e0a\u653e\u4e0d\u4e0b\u7684\u90a3\u4e9b\uff09\u7684\u5bbd\u5ea6\u4ee5\u53ca\u8be5\u5f20\u6d77\u62a5\u7684\u5f20\u8d34\u65f6\u95f4\uff08\u5373\u8bb0\u4f4f\u4e86\u6240\u6709\u6d77\u62a5\u7684\u7c98\u8d34\u987a\u5e8f\uff09\uff0c\u5374\u6ca1\u6709\u8bb0\u4f4f\u6bcf\u5f20\u6d77\u62a5\u7684\u4f4d\u7f6e\uff0c\u4e8e\u662f\u5979\u628a\u8fd9\u4e9b\u4fe1\u606f\u544a\u8bc9\u4e86\u6298\u6728\u3002\u673a\u667a\u5982\u6298\u68d2\uff0c\u4ed6\u4e00\u4e0b\u5b50\u5c31\u53d1\u73b0\u6709\u8fd9\u4e9b\u4fe1\u606f\u5c31\u53ef\u4ee5\u7acb\u523b\u63a8\u65ad\u51fa\u6bcf\u5f20\u6d77\u62a5\u7684\u5f20\u8d34\u4f4d\u7f6e\uff0c\u800c\u4e14\u8fd8\u63a8\u65ad\u51fa\u66b4\u529b\u679a\u4e3e\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u9700\\(O(N^2)\\)\uff0c\u5982\u679c\u5f00\u4e2a\u7ebf\u6bb5\u6811\u4e4b\u7c7b\u7684\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u67d0\u4e9b\u4fe1\u606f\u8fd8\u80fd\u505a\u5230\\(O(N\\log N)\\)\u3002\u7136\u800c\u7531\u4e8e\u6298\u6728\u5f88\u8282\u80fd\uff08\u61d2\u764c\u665a\u671f\uff09\uff0c\u4ed6\u8fdb\u4e00\u6b65\u63a8\u65ad\u51fa\u4f60\u5199\u4e2a\u7ebf\u6bb5\u6811\u628a\u8fd9\u9053\u6c34\u9898\u5207\u4e86\u6bd4\u4ed6\u7528\u4eba\u8111\u601d\u8003\u6216\u8005\u6d6a\u8d39\u4e8c\u5341\u5206\u949f\u56de\u5b66\u6821\u770b\u4e00\u773c\u66f4\u52a0\u8282\u80fd\uff0c\u4e8e\u662f\u4ed6\u76f4\u63a5\u628a\u8fd9\u4e2a\u4efb\u52a1\u7529\u7ed9\u4e86\u4f60\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\\(T\\)\uff0c\u4e3a\u6570\u636e\u7ec4\u6570\u3002\uff08\u672c\u989810\u5927\u7ec4\u6570\u636e\uff0c\u4f46\u6bcf\u4e2a\u5927\u7ec4\u6570\u636e\u4e0b\u5206\\(T\\)\u4e2a\u5c0f\u7ec4\uff0c\u4e00\u4e2a\u5c0f\u7ec4\u9519\u8bef\u5219\u8be5\u5927\u7ec40\u5206\uff0c\u65f6\u95f4\u9650\u5236\u4e3a\u4e00\u4e2a\u5927\u7ec4\u7684\u65f6\u95f4\u9650\u5236\u3002\uff09 \u63a5\u4e0b\u6765\u5171\\(T\\)\u884c\uff0c\u6bcf\u884c\u4e3a\u4e00\u7ec4\u6570\u636e\u3002\u6bcf\u884c\u7684\u524d\u4e09\u4e2a\u6b63\u6574\u6570\u4e3a\\(H,W,N\\)\uff0c\u4ee3\u8868\u544a\u793a\u677f\u7684\u9ad8\u5ea6\u4e3a\\(H\\)\uff0c\u5bbd\u5ea6\u4e3a\\(W\\)\uff0c\u603b\u5171\u6709\\(N\\)\u5f20\u6d77\u62a5\uff1b\u63a5\u4e0b\u6765\u7684\\(N\\)\u4e2a\u6b63\u6574\u6570\\(w_i\\)\u8868\u793a\u6bcf\u5f20\u6d77\u62a5\u7684\u5bbd\u5ea6\uff0c\u5f53\u7136\u662f\u5df2\u7ecf\u6309\u7167\u65f6\u95f4\u987a\u5e8f\u6392\u597d\u5e8f\u7684\u3002 Output Format \u8f93\u51fa\u5171\\(T\\)\u884c\uff0c\u6bcf\u884c\\(N\\)\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u6bcf\u5f20\u6d77\u62a5\u7684\u6240\u5728\u884c\u6570\uff08\u5217\u6570\u5c31\u4e0d\u9700\u8981\u4e86\uff0c\u8282\u7701\u8f93\u51fa\uff09\u3002\u5982\u679c\u8fd9\u5f20\u6d77\u62a5\u8d34\u4e0d\u4e0a\u516c\u544a\u677f\uff0c\u5219\u6240\u5728\u884c\u6570\u4e3a-1\u3002 Sample Input 1 3 5 5 2 4 3 3 3 Sample Output 1 2 1 3 -1 Data Range \u5bf9\u4e8e\\( 50\\% \\) \u7684\u6570\u636e\uff0c\\( 1 \\le N \\le 5000\\)\uff0c\\( 1 \\le H,W,w_i \\le 1000\\)\u3002 \u5bf9\u4e8e\\( 100\\% \\) \u7684\u6570\u636e\uff0c\\( 1 \\le T \\le 5\\)\uff0c\\( 1 \\le N \\le 200000\\)\uff0c\\( 1 \\le H,W,w_i \\le 10^9\\)\u3002 \u53cb\u60c5\u63d0\u793a\uff1a\u8ba1\u7b97\u673a\u7cfb\u7edf\u8fd9\u95e8\u8bfe\u7a0b\u544a\u8bc9\u6211\u4eec\uff0c\u5bf9\u78c1\u76d8\u5927\u91cf\u91cd\u590d\u8fdb\u884c\u8bfb\u4e00\u4e2a\u6587\u4ef6/\u5199\u53e6\u4e00\u4e2a\u6587\u4ef6/\u8bfb\u4e00\u4e2a\u6587\u4ef6/\u5199\u53e6\u4e00\u4e2a\u6587\u4ef6\u8fd9\u79cd\u64cd\u4f5c\u4f1a\u6d6a\u8d39\u5927\u91cfIO\u65f6\u95f4\u5728\u5bfb\u9053\u4e0a\uff08\u663e\u7136\u6bcf\u6b21\u5f80\u56de\u8f6c\u9700\u8981\u78c1\u76d8\u591a\u8f6c\u4e00\u6574\u5708\uff0c\u800c\u987a\u5e8f\u8bfb\u5165\u6216\u5199\u5165\u53ea\u9700\u5411\u4e0b\u79fb\u52a8\u4e00\u70b9\uff09\u3002 \u53e6\u4e00\u4e2a\u53cb\u60c5\u63d0\u793a\uff1a\u7ecf\u8fc7\u5b9e\u6d4b\uff0cscanf\u4e0d\u8bba\u662f\u5148\u8bfb\u540e\u5199\u8fd8\u662f\u8fb9\u8bfb\u8fb9\u5199\u7684\u7528\u65f6\u90fd\u5f88\u957f\uff0c\u5efa\u8bae\u4f7f\u7528cin\uff0c\u5373\u80fd\u591f\u4ee5\u7528\u65f6\u7ea660%\u7684\u65f6\u95f4\u9650\u5236\u901a\u8fc7\u3002\u5982\u679c\u518d\u52a0\u4e0a\u5b57\u7b26\u4e32\u5f0f\u8bfb\u5165\u4f18\u5316/\u5173\u95edstdio\u540c\u6b65\u8bfb\u5165\u4f18\u5316\uff0c\u7528\u65f6\u53ef\u4ee5\u8fdb\u4e00\u6b65\u7f29\u77ed\u5230\u4e09\u5206\u4e4b\u4e00\u3002 \u672c\u9898\u65f6\u95f4\u9650\u52362s\u3002 FineArtz's solution Star /* Watashi kininarimasu! */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 200000; struct Node{ int l = 0, r = 0; int maxx = 0; }; Node a[MAXN * 4 + 5]; int t; int h, w, n; void pushUp(int x){ if (a[x * 2].maxx >= a[x * 2 + 1].maxx) a[x].maxx = a[x * 2].maxx; else a[x].maxx = a[x * 2 + 1].maxx; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].maxx = w; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int line, int len){ if (a[x].l == a[x].r){ a[x].maxx -= len; return; } int mid = (a[x].l + a[x].r) / 2; if (line <= mid) update(x * 2, line, len); else update(x * 2 + 1, line, len); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].maxx >= len) return query(x * 2, len); else return query(x * 2 + 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; while (t--){ cin >> h >> w >> n; buildTree(1, 1, min(n, h)); for (int i = 1; i <= n; ++i){ int m; cin >> m; if (m > a[1].maxx){ cout << \"-1\\n\"; continue; } int line = query(1, m); cout << line << '\\n'; update(1, line, m); } } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; int tr[1050000],m,h,w,n,t,x,f,ans[200001];//\u4e10\u7248\u7ebf\u6bb5\u6811 \u8bf7\u52ff\u6a21\u4eff int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { memset(tr,0,sizeof(tr)); cin>>h>>w>>n; h=min(h,n); for (m=1;m<h;m<<=1); for (int j=1+m;j<=m+h;++j) tr[j]=w; for (int j=m+h+1;j<=m<<1;++j) tr[j]=0; for (int j=m;j>=1;--j) tr[j]=max(tr[j<<1],tr[(j<<1)+1]);//\u4ee5\u4e0a\u4e3a\u5efa\u6811 for (int j=0;j<n;++j) { cin>>x; if (tr[1]<x) { ans[j]=-1; continue; } f=1; while (f<=m) if (tr[f<<=1]<x) f+=1;//\u5355\u70b9\u67e5\u8be2 tr[f]-=x; ans[j]=f-m; for (f>>=1;f>=1;f>>=1) tr[f]=max(tr[f<<1],tr[(f<<1)+1]);//\u5355\u70b9\u4fee\u6539 } for (int j=0;j<n;++j) cout<<ans[j]<<\" \"; cout<<endl; } return 0; }","title":"4106"},{"location":"nr/4106/#4106-watashi-kininarimasu","text":"\u9898\u76ee","title":"4106 Watashi kininarimasu\uff01"},{"location":"nr/4106/#fineartzs-solution-star","text":"/* Watashi kininarimasu! */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 200000; struct Node{ int l = 0, r = 0; int maxx = 0; }; Node a[MAXN * 4 + 5]; int t; int h, w, n; void pushUp(int x){ if (a[x * 2].maxx >= a[x * 2 + 1].maxx) a[x].maxx = a[x * 2].maxx; else a[x].maxx = a[x * 2 + 1].maxx; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].maxx = w; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int line, int len){ if (a[x].l == a[x].r){ a[x].maxx -= len; return; } int mid = (a[x].l + a[x].r) / 2; if (line <= mid) update(x * 2, line, len); else update(x * 2 + 1, line, len); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].maxx >= len) return query(x * 2, len); else return query(x * 2 + 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; while (t--){ cin >> h >> w >> n; buildTree(1, 1, min(n, h)); for (int i = 1; i <= n; ++i){ int m; cin >> m; if (m > a[1].maxx){ cout << \"-1\\n\"; continue; } int line = query(1, m); cout << line << '\\n'; update(1, line, m); } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4106/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int tr[1050000],m,h,w,n,t,x,f,ans[200001];//\u4e10\u7248\u7ebf\u6bb5\u6811 \u8bf7\u52ff\u6a21\u4eff int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { memset(tr,0,sizeof(tr)); cin>>h>>w>>n; h=min(h,n); for (m=1;m<h;m<<=1); for (int j=1+m;j<=m+h;++j) tr[j]=w; for (int j=m+h+1;j<=m<<1;++j) tr[j]=0; for (int j=m;j>=1;--j) tr[j]=max(tr[j<<1],tr[(j<<1)+1]);//\u4ee5\u4e0a\u4e3a\u5efa\u6811 for (int j=0;j<n;++j) { cin>>x; if (tr[1]<x) { ans[j]=-1; continue; } f=1; while (f<=m) if (tr[f<<=1]<x) f+=1;//\u5355\u70b9\u67e5\u8be2 tr[f]-=x; ans[j]=f-m; for (f>>=1;f>=1;f>>=1) tr[f]=max(tr[f<<1],tr[(f<<1)+1]);//\u5355\u70b9\u4fee\u6539 } for (int j=0;j<n;++j) cout<<ans[j]<<\" \"; cout<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4107/","text":"4107 Love and Auto Memories Doll II \u9898\u76ee Description \u73b0\u5728\u662f\u6e05\u660e\u5047\u671f\u540e\u7684\u5468\u65e5\u665a\u4e0a\u516d\u70b9\u56db\u5341\u4e94\uff0c\u60f3\u5fc5\u5bb6\u4f4f\u4e0a\u6d77\u7684\u540c\u5b66\u4eec\u521a\u521a\u4ece\u5bb6\u91cc\u8fd4\u56de\u5b66\u6821\u6240\u4ee5\u975e\u5e38\u60f3\u5bb6\uff0c\u5916\u5730\u7684\u540c\u5b66\u591a\u534a\u8fd8\u6ca1\u5403\u665a\u996d\u5f88\u997f\uff0c\u5403\u4e86\u665a\u996d\u7684\u540c\u5b66\u4e5f\u56e0\u4e3a\u5047\u671f\u91cc\u9762\u5929\u5929\u71ac\u591c\u5237\u9898/\u7206\u809d/\u4e0a\u5206\u7b49\u884c\u4e3a\u5bfc\u81f4\u73b0\u5728\u5f88\u7d2f\u60f3\u8981\u8d76\u5feb\u53bb\u7761\u89c9\uff0c\u6597\u5fd7\u6da3\u6563\uff0c\u4e0d\u60f3\u5199\u9898\u3002\u4f46\u8fd9\u5bf9\u4e8e\u94a2\u94c1\u76f4\u5973\u7d2b\u8587\u9171\u6765\u8bf4\u90fd\u4e0d\u662f\u95ee\u9898\uff0c\u56e0\u4e3a\u7d2b\u8587\u6ca1\u6709\u5bb6\u4eba\uff0c\u53c8\u5728\u519b\u961f\u4e2d\u53d7\u8fc7\u6267\u884c\u4efb\u52a1\u65f6\u53ef\u4ee5\u957f\u65f6\u95f4\u4e0d\u8fdb\u98df\u4e0d\u7761\u89c9\u7684\u8bad\u7ec3\uff0c\u6240\u4ee5\u5979\u73b0\u5728\u72b6\u6001\u7edd\u4f73\uff0c\u6b63\u4ee5200+APM\u7684\u901f\u5ea6\u9510\u610f\u5de5\u4f5c\u4e2d\u3002\u7d2b\u8587\u662f\u4e00\u540d\u6253\u5b57\u5458\uff0c\u5979\u7684\u5de5\u4f5c\u5c31\u662f\u4e3a\u5ba2\u6237\u4ee3\u5199\u4e66\u4fe1\u3002\u5c3d\u7ba1\u7d2b\u8587\u5206\u5206\u949f\u5c31\u80fd\u7801\u5b8c\u4e00\u5c01\u4fe1\uff0c\u4f46\u5979\u5728\u4e0d\u65ad\u7801\u5b57\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u4e2a\u522b\u7684\u8bcd\u8bed\u4ea7\u751f\u4e86\u7279\u522b\u7684\u5174\u8da3\uff0c\u6bd4\u65b9\u8bf4\uff0clove\u3002\u4e8e\u662f\u5979\u5f00\u59cb\u4e00\u5c01\u4e00\u5c01\u770b\u4e4b\u524d\u7801\u8fc7\u7684\u4fe1\uff0c\u60f3\u8981\u4ece\u91cc\u9762\u627e\u51fa\u67d0\u4e2a\u7279\u5b9a\u7684\u8bcd\u51fa\u73b0\u4e86\u591a\u5c11\u6b21\uff0c\u4ee5\u53ca\u7b2c\u4e00\u6b21\u662f\u5728\u54ea\u91cc\u51fa\u73b0\u7684\u3002 \u4f46\u7d2b\u8587\u5f88\u5feb\u53d1\u73b0\u81ea\u5df1\u7801\u8fc7\u7684\u4fe1\u592a\u957f\u592a\u591a\uff0c\u9760\u81ea\u5df1\u627e\u5b9e\u5728\u662f\u592a\u6162\u4e86\u3002\u4e8e\u662f\u5979\u627e\u5230\u4e86\u4f60\uff0c\u5e0c\u671b\u4f60\u80fd\u591f\u5e2e\u5e2e\u5979\u3002\u540c\u5b66\u4eec\u7684\u6c34\u5e73\u90fd\u5f88\u9ad8\uff0c\u60f3\u5fc5\u626b\u4e00\u773c\u5c31\u4f1a\u8bf4\u201c\u7b80\u5355\u7684KMP\u7b97\u6cd5\uff0c\u79d2\u4e86\uff01\u201d\u6ca1\u9519\uff0c\u8fd9\u6b21\u7684\u9898\u76ee\u5c31\u662f\u7b80\u5355\u7684KMP\u7b7e\u5230\u9898\uff0c\u56e0\u6b64\u5728\u8fd9\u91cc\u7279\u522b\u5f3a\u8c03\u4e00\u4e0b\uff0c\u8fd9\u91cc\u7684\u4fe1\u4fdd\u8bc1\u53ea\u6709\u4e00\u884c\u5b57\u7b26\uff08\u7ed3\u5c3e\u6709\u4e2a\u56de\u8f66\uff09\uff0c\u9664\u4e86\u5927\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c\u7a7a\u683c\u4e4b\u5916\u6ca1\u6709\u522b\u7684\u7b26\u53f7\uff1b\u548c\u4e0a\u6b21\u4e0d\u4e00\u6837\u7684\u662f\uff0c\u8fd9\u6b21\u7684\u4fe1\u6ca1\u6709\u201c\u7528\u7a7a\u683c\u5206\u5272\u5355\u8bcd\u201d\u7684\u6982\u5ff5\uff0c\u7a7a\u683c\u548c\u5176\u4ed6\u5b57\u6bcd\u662f\u4e00\u6837\u53ef\u4ee5\u88ab\u5339\u914d\u7684\uff08\u4f46\u4fdd\u8bc1\u8981\u627e\u7684\u5355\u8bcd\u4e0d\u4f1a\u5305\u542b\u7a7a\u683c\uff09\uff0c\u53ea\u8981\u662f\u4fe1\u4e2d\u4efb\u610f\u4f4d\u7f6e\u7684\u5b50\u4e32\u90fd\u53ef\u4ee5\u5339\u914d\uff08\u4f46\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\uff0c\u800c\u4e14\u591a\u4e2a\u5339\u914d\u5b50\u4e32\u4e4b\u95f4\u5373\u4f7f\u6709\u91cd\u590d\u7684\u90e8\u5206\u4e5f\u4ecd\u7136\u91cd\u590d\u8ba1\u6570\u3002\u4e3e\u4e2a\u6817\u5b50\uff0c\u201cAaAaa aAA\u201d\u4e2d\uff0c\u201caaa\u201d\u8fd9\u4e2a\u5355\u8bcd\u51fa\u73b0\u4e864\u6b21\u3002\u518d\u4e3e\u4e00\u4e2a\u6817\u5b50\uff0c\u5982\u679c\u4fe1\u4e2d\u6ca1\u6709\u8fd9\u4e2a\u7a7a\u683c\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u51fa\u73b0\u4e866\u6b21\u3002 Input Format \u8f93\u5165\u5171\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32A\uff08\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\uff0c\u6ca1\u6709\u7a7a\u683c\uff0c\u5355\u8bcd\u524d\u540e\u4e5f\u6ca1\u6709\u591a\u4f59\u7684\u7a7a\u683c\uff09\uff0c\u56de\u8f66\uff1b \u7b2c\u4e8c\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32B\uff08\u7531\u5927\u5c0f\u5199\u5b57\u6bcd\u548c\u7a7a\u683c\u7ec4\u6210\uff09\uff0c\u56de\u8f66\u3002\u53ef\u80fd\u6709\u591a\u4e2a\u8fde\u7eed\u7684\u7a7a\u683c\u548c\u884c\u9996\u884c\u672b\u7a7a\u683c\u3002 Output Format \u8f93\u51fa\u5171\u4e00\u884c\u3002 \u82e5\u5b57\u7b26\u4e32A\u5728\u5b57\u7b26\u4e32B\u4e2d\u51fa\u73b0\u4e86\uff0c\u5219\u8f93\u51fa\u4e00\u884c\u4e24\u4e2a\u6574\u6570\u3002\u7b2c\u4e00\u4e2a\u6574\u6570\u4e3a\u5b57\u7b26\u4e32B\u4e2d\u6709\u51e0\u4e2a\u8fd9\u6837\u7684\u5b57\u7b26\u4e32A\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u591a\u4e2a\u5339\u914d\u4e4b\u95f4\u53ef\u4ee5\u91cd\u53e0\uff09\uff1b\u7b2c\u4e8c\u4e2a\u6574\u6570\u4e3a\u5728\u5b57\u7b26\u4e32B\u4e2d\uff0c\u5b57\u7b26\u4e32A\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\uff08\u5b57\u7b26\u4e32\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\u8bbe\u4e3a0\uff09\u3002\u672c\u9898\u4e2d\u7a7a\u683c\u548c\u5176\u4ed6\u7684\u5b57\u6bcd\u90fd\u662f\u7b49\u4ef7\uff08\u5360\u4f4d\u7f6e\uff09\u7684\u3002 \u82e5\u5728\u5b57\u7b26\u4e32\u4e2dB\u6ca1\u6709\u51fa\u73b0\u8fc7\u5b57\u7b26\u4e32A\uff0c\u8f93\u51fa-1\u3002 Sample Input \u6570\u636e1\uff1a Love Dear loVe Your charms aLoNe are beAUTiFul Can yoU be my dEar lOVE \u6570\u636e2\uff1a aAba aaBaabAaba Aba \u6570\u636e3\uff1a Shousa Perception of the physical world does not necessarily result in a universal reaction among receivers But varies depending up on ones tendency handle the situation How the situation relates to the receivers past experience And any number of other factors Feelings are also known as a state of consciousness Such as that resulting from emotions sentiments or desires Sample Output \u6570\u636e1\uff1a 2 9 \u6570\u636e2\uff1a 3 0 \u6570\u636e3\uff1a -1 \u6570\u636e\u89e3\u91ca\uff1a \u6570\u636e1\u7684\u524d\u9762\u6709\u56db\u4e2a\u7a7a\u683c\uff0clove\u51fa\u73b0\u4e24\u6b21\uff0c\u6545\u7b54\u6848\u4e3a2 9\u3002 \u6570\u636e2\u63d0\u9192\uff0c\u5b57\u7b26\u4e32\u662f\u4ee50\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u4e0b\u6807\u7684\uff0c\u5339\u914d\u4e4b\u95f4\u662f\u53ef\u4ee5\u6709\u91cd\u590d\u90e8\u5206\u7684\uff0c\u4ee5\u53ca\u7a7a\u683c\u5f71\u54cd\u5339\u914d\uff08\u6ca1\u6709\u7a7a\u683c\u7b54\u6848\u5c31\u662f4 0\u4e86\uff09\u3002 \u6570\u636e3\u662f\u82f1\u6587wiki\u7684\u5185\u5bb9\u5f53\u7136\u4e0d\u4f1a\u6709\u5c11\u4f50\u8fd9\u4e2a\u8bcd\uff0c\u6240\u4ee5\u8bf7\u8bb0\u5f97\u8f93\u51fa-1\u3002 Data Range \u5bf9\u4e8e\\( 50\\% \\) \u7684\u6570\u636e\uff0c\u5b57\u7b26\u4e32A\u7684\u957f\u5ea6\\( 1 \\le W \\le 200 \\)\uff0c\u5b57\u7b26\u4e32B\u7684\u957f\u5ea6\\(1 \\le L \\le 10^5\\)\u3002 \u5bf9\u4e8e\\( 100\\% \\) \u7684\u6570\u636e\uff0c\u5b57\u7b26\u4e32A\u7684\u957f\u5ea6\\( 1 \\le W \\le 10^7 \\)\uff0c\u5b57\u7b26\u4e32B\u7684\u957f\u5ea6\\(1 \\le L \\le 10^7\\)\u3002 FineArtz's solution Star /* Love and Auto Memories Doll II */ #include <iostream> #include <cstdio> #include <cstring> using namespace std; const int MAXS = 10000000; char a[MAXS + 5], b[MAXS + 5]; int nxt[MAXS + 5] = {0}; int lena = 0, lenb = 0; inline void lowercase(char &ch){ if (ch >= 'A' && ch <= 'Z') ch = ch - 'A' + 'a'; } int main(){ fgets(a, MAXS + 5, stdin); fgets(b, MAXS + 5, stdin); lena = strlen(a) - 1; lenb = strlen(b); for (int i = 0; i < lena; ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] = a[i] - 'A' + 'a'; for (int i = 0; i < lenb; ++i) if (b[i] >= 'A' && b[i] <= 'Z') b[i] = b[i] - 'A' + 'a'; int pos = -1, ans = 0; nxt[0] = -1; int t = -1; for (int i = 1; i < lena; ++i){ while (t > -1 && a[i] != a[t + 1]) t = nxt[t]; if (a[i] == a[t + 1]) ++t; nxt[i] = t; } t = -1; for (int i = 0; i < lenb; ++i){ while (t > -1 && a[t + 1] != b[i]) t = nxt[t]; if (a[t + 1] == b[i]) ++t; if (t == lena - 1){ if (ans == 0) pos = i - lena + 1; ++ans; t = nxt[t]; } } if (ans == 0) cout << \"-1\" << '\\n'; else cout << ans << ' ' << pos << '\\n'; return 0; }","title":"4107"},{"location":"nr/4107/#4107-love-and-auto-memories-doll-ii","text":"\u9898\u76ee","title":"4107 Love and Auto Memories Doll II"},{"location":"nr/4107/#fineartzs-solution-star","text":"/* Love and Auto Memories Doll II */ #include <iostream> #include <cstdio> #include <cstring> using namespace std; const int MAXS = 10000000; char a[MAXS + 5], b[MAXS + 5]; int nxt[MAXS + 5] = {0}; int lena = 0, lenb = 0; inline void lowercase(char &ch){ if (ch >= 'A' && ch <= 'Z') ch = ch - 'A' + 'a'; } int main(){ fgets(a, MAXS + 5, stdin); fgets(b, MAXS + 5, stdin); lena = strlen(a) - 1; lenb = strlen(b); for (int i = 0; i < lena; ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] = a[i] - 'A' + 'a'; for (int i = 0; i < lenb; ++i) if (b[i] >= 'A' && b[i] <= 'Z') b[i] = b[i] - 'A' + 'a'; int pos = -1, ans = 0; nxt[0] = -1; int t = -1; for (int i = 1; i < lena; ++i){ while (t > -1 && a[i] != a[t + 1]) t = nxt[t]; if (a[i] == a[t + 1]) ++t; nxt[i] = t; } t = -1; for (int i = 0; i < lenb; ++i){ while (t > -1 && a[t + 1] != b[i]) t = nxt[t]; if (a[t + 1] == b[i]) ++t; if (t == lena - 1){ if (ans == 0) pos = i - lena + 1; ++ans; t = nxt[t]; } } if (ans == 0) cout << \"-1\" << '\\n'; else cout << ans << ' ' << pos << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4108/","text":"4108 N0 Chess N0 Life \u9898\u76ee Description \u4e3a\u4e86\u4e89\u593a\u4eba\u7c7b\u6700\u540e\u4e00\u5757\u56fd\u571f\u2014\u2014\u827e\u5c14\u9f50\u4e9a\u7684\u738b\u4f4d\uff0c\u7a7a\u4e0e\u767d\u8fd9\u5bf9\u5144\u59b9\u5fc5\u987b\u5728\u56fd\u738b\u9009\u62d4\u6218\u4e2d\u6218\u80dc\u514b\u62c9\u7c73\u3002\u5c3d\u7ba1\u9009\u62d4\u6218\u7684\u9879\u76ee\u662f\u767d\u7edd\u4e0d\u53ef\u80fd\u4f1a\u8f93\u7684\u56fd\u9645\u8c61\u68cb\uff0c\u4f46\u7531\u4e8e\u514b\u62c9\u7c73\u7684\u80cc\u540e\u6709\u64c5\u957f\u9b54\u6cd5\u7684\u68ee\u7cbe\u7075\u6491\u8170\uff0c\u8fd9\u573a\u5bf9\u51b3\u6700\u7ec8\u4ece\u68cb\u827a\u5bf9\u51b3\u53d8\u6210\u4e86\u9b54\u6cd5\u8c61\u68cb\u5bf9\u51b3\u3002\u7136\u800c\u5728\u8d5b\u524d\uff0c\u514b\u62c9\u7c73\u65e9\u5df2\u6697\u4e2d\u547d\u68ee\u7cbe\u7075\u4f5c\u5f0a\u52a0\u5f3a\u4e86\u53cb\u65b9\uff08\u9ed1\u65b9\uff09\u68cb\u5b50\u7684\u80fd\u529b\uff1b\u6240\u5e78\u7684\u662f\u7a7a\u7528\u81ea\u5df1\u7684\u5f3a\u5927\u9886\u5bfc\u529b\u9006\u8f6c\u4e86\u5c40\u52bf\uff0c\u903c\u5f97\u514b\u62c9\u7c73\u53ea\u5269\u4e0b\u6700\u540e\u5be5\u5be5\u51e0\u4e2a\u68cb\u5b50\u3002 \u8d70\u6295\u65e0\u8def\u7684\u514b\u62c9\u7c73\u518d\u6b21\u5229\u7528\u4e86\u68ee\u7cbe\u7075\u7684\u9b54\u6cd5\uff0c\u9ed1\u65b9\u4e3b\u6559\uff08bishop\uff0c\u56fd\u9645\u8c61\u68cb\u4e2d\u8c61\uff09\u7a81\u7136\u6413\u8d77\u4e86\u5927\u53ec\u5524\u672f\uff0c\u5728\u68cb\u76d8\u4e0a\u53ec\u5524\u51fa\u65e0\u6570\u7684\u72c2\u5316\u6559\u5f92\u3002\u6bcf\u4e2a\u683c\u5b50\u4e2d\u6700\u591a\u6709\u4e00\u4e2a\u6559\u5f92\uff0c\u6559\u5f92\u7684\u653b\u51fb\u8303\u56f4\u548c\u4e3b\u6559\u7c7b\u4f3c\u90fd\u662f\u659c\u7740\u7684\uff0c\u4f46\u662f\u957f\u5ea6\u53ea\u6709\u4e00\u683c\uff0c\u4e5f\u5c31\u662f\u53ea\u80fd\u653b\u51fb\u5bf9\u89d2\u76f8\u90bb\u7684\u65b9\u683c\u3002\u6b64\u5916\u5982\u679c\u6709\u4e24\u4e2a\u6559\u5f92\u7ad9\u5728\u4e24\u4e2a\u5bf9\u89d2\u76f8\u90bb\u7684\u65b9\u683c\u4e2d\uff0c\u4e14\u4e0d\u5b58\u5728\u53e6\u4e00\u4e2a\u6559\u5f92\u540c\u65f6\u4e0e\u8fd9\u4e24\u4e2a\u6559\u5f92\u76f8\u90bb\u7684\u8bdd\uff0c\u5219\u8fd9\u4e24\u4e2a\u53d1\u72c2\u7684\u6559\u5f92\u4e5f\u4f1a\u76f8\u4e92\u653b\u51fb\uff08\u5373L\u578b\u6216\u8005\u7530\u578b\u7684\u653e\u7f6e\u90fd\u662f\u5408\u6cd5\u7684\uff09\uff1b\u9ed1\u65b9\u4e3b\u6559\u6e05\u695a\u8fd9\u4e00\u70b9\uff0c\u6240\u4ee5\u4ed6\u4e0d\u4f1a\u8fd9\u6837\u653e\u7f6e\u4e24\u4e2a\u6559\u5f92\u3002 \u9762\u5bf9\u8fd9\u6837\u7684\u5371\u673a\uff0c\u7a7a\u8be2\u95ee\u767d\u65b9\u4e3b\u6559\u4f1a\u4e0d\u4f1a\u4e00\u4e9b\u5389\u5bb3\u7684\u819c\u6cd5\u53ef\u4ee5\u4e00\u53d1\u5e26\u8d70\u5bf9\u9762\u7684\u6240\u6709\u6559\u5f92\u3002\u5e74\u957f\u800c\u8eab\u7ecf\u767e\u6218\u7684\u767d\u65b9\u4e3b\u6559\u8868\u793a\u81ea\u5df1\u7684\u786e\u53ef\u4ee5\u901a\u8fc7\u4e0a\u4f4d\u819c\u6cd5\u65f6\u95f4\u64cd\u7eb5\u4f7f\u5f97\u9ed1\u65b9\u6240\u6709\u6559\u5f92\u7684\u5269\u4f59\u751f\u547d\u76f4\u63a5\u6e050\uff0c\u771f\u6b63\u5b9e\u73b0No Chess No Life\uff1b\u4f46\u662f\u5982\u679c\u4e0d\u4e8b\u5148\u9884\u77e5\u5230\u654c\u65b9\u6559\u5f92\u6240\u6709\u53ef\u80fd\u7684\u5408\u6cd5\u6446\u653e\u65b9\u5f0f\uff0c\u5c31\u53ef\u80fd\u4f1a\u53d1\u52a8\u5931\u8d25\u3002\u7a7a\u8bf4\u8fd9\u4e2a\u7b80\u5355\uff0c\u4e8e\u662f\u5728\u767d\u80cc\u540e\u63d2\u4e86\u4e24\u6839\u7535\u7ebf\u5c06\u5979Cosplay\u6210\u4f11\u6bd4\uff0c\u7136\u540e\u8ba1\u7b97\u4e861s\uff0c\u4fbf\u7b97\u51fa\u4e86\u654c\u65b9\u6559\u5f92\u5728\u68cb\u76d8\u4e0a\u6240\u6709\u53ef\u80fd\u7684\u6446\u653e\u65b9\u5f0f\uff0c\u8ba9\u767d\u65b9\u4e3b\u6559\u6210\u529f\u65bd\u653e\u51fa\u819c\u6cd5\uff0c\u987a\u5229\u51fb\u8d25\u4e86\u514b\u62c9\u7c73\u3002\u8003\u8651\u5230\u540c\u5b66\u4eec\u7684\u8ba1\u7b97\u673a\u6ca1\u6709\u4f11\u6bd4\u90a3\u4e48bug\u7684\u7b97\u529b\uff0c\u6240\u4ee5\u540c\u5b66\u4eec\u53ea\u8981\u8f93\u51fa\u53ef\u80fd\u7684\u6446\u653e\u65b9\u5f0f\u603b\u6570\\(mod\\ 1000000007\\)\u7684\u503c\u5c31\u53ef\u4ee5\u5566\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\\(T\\)\uff0c\u4e3a\u6570\u636e\u7ec4\u6570\u3002 \u63a5\u4e0b\u6765\\(T\\)\u884c\uff0c\u6bcf\u7ec4\u6570\u636e\u4e00\u884c\u4e24\u4e2a\u6570\u5b57\\(N,M\\)\uff0c\u4ee3\u8868\u68cb\u76d8\u7684\u884c\u6570\u548c\u5217\u6570\u3002\u6b64\u65f6\u8fd9\u5757\u68cb\u76d8\u533a\u57df\u4e0a\u662f\u4e00\u4e2a\u68cb\u5b50\u90fd\u6ca1\u6709\u7684\uff0c\u9ed1\u65b9\u4e3b\u6559\u53ef\u4ee5\u5728\u8fd9\u5757\u533a\u57df\u4e0a\u53ec\u5524\u4efb\u610f\u591a\u7684\u6559\u5f92\uff0c\u4e00\u4e2a\u90fd\u4e0d\u53ec\u5524\u548c\u653e\u6ee1\u8fd9\u5757\u533a\u57df\u4e5f\u662f\u4e24\u79cd\u5408\u6cd5\u7684\u6446\u653e\u65b9\u6848\uff08\u653e\u6ee1\u4e3a\u4ec0\u4e48\u662f\u5408\u6cd5\u7684\u53ef\u4ee5\u518d\u8bfb\u4e00\u904d\u4e4b\u524d\u5408\u6cd5\u7684\u5b9a\u4e49\uff09\u3002 Output Format \u6709\\(T\\)\u7ec4\u8f93\u51fa\uff0c\u5bf9\u5e94T\u7ec4\u8f93\u5165\u3002 \u6bcf\u7ec4\u6570\u636e\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u6559\u5f92\u5728\u8fd9\u5757\u68cb\u76d8\u4e0a\u53ef\u80fd\u7684\u6446\u653e\u65b9\u5f0f\u603b\u6570\\(mod\\ 1000000007\\)\u7684\u503c\u3002 Sample Input 2 2 3 1 1 Sample Output 50 2 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N \\le 3\\)\u3002 \u5bf9\u4e8e\\(70\\%\\)\u7684\u6570\u636e\uff0c\\(N \\le 40\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(1 \\le T \\le 5, 1 \\le N \\le 10^9, 1 \\le M \\le 7\\)\u3002 \u6ce8\uff1a\u8fd9\u662f\u9b54\u6cd5\u8c61\u68cb\u7684\u68cb\u76d8\uff0c\u6240\u4ee5\u68cb\u76d8\u957f\u6210\u957f\u6761\u5f62\u4e5f\u662f\u5f88\u6b63\u5e38\u7684\u3002 \u672c\u9898\u65f6\u95f4\u9650\u52362s\u3002 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"4108"},{"location":"nr/4108/#4108-n0-chess-n0-life","text":"\u9898\u76ee","title":"4108 N0 Chess N0 Life"},{"location":"nr/4108/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4111/","text":"4111 labyrinth \u9898\u76ee Description dhh\u662f\u4e2a\u72c2\u70ed\u7684\u5bc6\u5ba4\u9003\u8131\u7231\u597d\u8005\u3002xyy\u7ea6\u4ed6\u53bb\u6e38\u4e50\u56ed\u65f6\uff0c\u4ed6\u90fd\u62d2\u7edd\uff1b\u4ed6\u53ea\u7231\u5bc6\u5ba4\u9003\u8131\u3002 \u73b0\u5728dhh\u6765\u5230\u4e86\u4e00\u4e2a\u8ff7\u5bab\u5bc6\u5ba4\u9003\u8131\u3002\u8fd9\u4e2a\u7531\\(N\\)\u884c\\(M\\)\u5217\u4e2a\u623f\u95f4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u623f\u95f4 \u6709\u56db\u6247\u95e8\u53ef\u4ee5\u901a\u5411\u5176\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u623f\u95f4 \uff0c\u4f46\u662f\u5982\u679c\u67d0\u4e2a\u623f\u95f4\u7684\u95e8\u901a\u5411\u4e86\u8ff7\u5bab\u5916\uff0c\u8fd9\u6247\u95e8\u5c31\u4f1a\u88ab\u5835\u6b7b\u3002\u540c\u65f6\u6709\u4e9b\u8bbe\u6709\u9b3c\u5c4b\uff0c\u7531\u4e8edhh\u6015\u9b3c\uff0c \u6240\u4ee5\u4ed6\u4e0d\u60f3\u7ecf\u8fc7\u8fd9\u4e9b\u623f\u95f4 \u3002 \u73b0\u5728\u544a\u8bc9\u4f60dhh\u7684\u8d77\u59cb\u4f4d\u7f6e\u4ee5\u53ca\u8ff7\u5bab\u5bc6\u5ba4\u7684\u51fa\u53e3\uff0cdhh\u60f3\u77e5\u9053\u4ed6\u6700\u5c11\u9700\u8981\u7ecf\u8fc7\u51e0\u6247\u95e8\u624d\u80fd\u5230\u8fbe\u51fa\u53e3\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570\\(N,M\\)\uff0c\u8868\u793a\u8ff7\u5bab\u7684\u89c4\u683c\u4e3a\\(N\\)\u884c\\(M\\)\u5217\u3002 \u63a5\u4e0b\u6765\u4e00\u4e2a\\(N\\)\u884c\\(M\\)\u5217\u7684\u77e9\u9635\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u8ff7\u5bab\u6bcf\u4e2a\u623f\u95f4\u7684\u72b6\u6001\uff0c\u77e9\u9635\u7531\\(4\\)\u79cd\u5b57\u7b26\u6784\u6210\u3002 '.'\u8868\u793a\u8fd9\u4e2a\u623f\u95f4\u53ef\u4ee5\u6b63\u5e38\u7ecf\u8fc7\u3002 '#'\u8868\u793a\u6b64\u623f\u95f4\u8bbe\u6709\u9b3c\u5c4b\u3002 '@'\u8868\u793adhh\u7684\u8d77\u59cb\u623f\u95f4\u3002 '$'\u8868\u793a\u8ff7\u5bab\u5bc6\u5ba4\u7684\u51fa\u53e3\u6240\u5728\u7684\u623f\u95f4\u3002 Output Format \u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u7b54\u6848\u3002 \u82e5dhh\u600e\u4e48\u90fd\u65e0\u6cd5\u5230\u8fbe\u51fa\u53e3\uff0c \u8bf7\u8f93\u51fa\\(-1\\) \u3002 Sample Input 3 4 @... .#.. $... Sample Output 2 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 10\\)\u3002 \u5bf9\u4e8e\u53e6\u5916\\(20\\%\\)\u7684\u6570\u636e\uff0c\u6ca1\u6709'#'\u3002 \u5bf9\u4e8e\\(100 \\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 1000\\)\u3002'@''$'\u4fdd\u8bc1\u51fa\u4e14\u4ec5\u51fa\u73b0\u4e00\u6b21\u3002\u6570\u636e\u5b8c\u5168\u968f\u673a\u5236\u9020\u3002 FineArtz's solution Star /* labyrinth */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; struct Node{ int x = 0, y = 0, step = 0; }; char ch; char a[1005][1005]; bool b[1005][1005] = {false}; int n, m; int sx, sy; Node q[1000005]; int front = 0, rear = 0; void bfs(){ Node s; s.x = sx; s.y = sy; q[rear++] = s; b[sx][sy] = true; while (front != rear){ Node now = q[front]; ++front; for (int k = 0; k < 4; ++k){ int nx = now.x + dx[k]; int ny = now.y + dy[k]; if (nx > 0 && nx <= n && ny > 0 && ny <= m && !b[nx][ny]){ Node next; next.x = nx; next.y = ny; next.step = now.step + 1; if (a[nx][ny] == '$'){ cout << next.step << endl; return; } b[nx][ny] = true; q[rear++] = next; } } } cout << \"-1\" << endl; } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '@'){ sx = i; sy = j; } else if (a[i][j] == '#'){ b[i][j] = true; } } } bfs(); return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"4111"},{"location":"nr/4111/#4111-labyrinth","text":"\u9898\u76ee","title":"4111 labyrinth"},{"location":"nr/4111/#fineartzs-solution-star","text":"/* labyrinth */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; struct Node{ int x = 0, y = 0, step = 0; }; char ch; char a[1005][1005]; bool b[1005][1005] = {false}; int n, m; int sx, sy; Node q[1000005]; int front = 0, rear = 0; void bfs(){ Node s; s.x = sx; s.y = sy; q[rear++] = s; b[sx][sy] = true; while (front != rear){ Node now = q[front]; ++front; for (int k = 0; k < 4; ++k){ int nx = now.x + dx[k]; int ny = now.y + dy[k]; if (nx > 0 && nx <= n && ny > 0 && ny <= m && !b[nx][ny]){ Node next; next.x = nx; next.y = ny; next.step = now.step + 1; if (a[nx][ny] == '$'){ cout << next.step << endl; return; } b[nx][ny] = true; q[rear++] = next; } } } cout << \"-1\" << endl; } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '@'){ sx = i; sy = j; } else if (a[i][j] == '#'){ b[i][j] = true; } } } bfs(); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4111/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4112/","text":"4112 Spice and Wolf \u9898\u76ee Description \u8d6b\u841d\u4e0e\u7f57\u4f26\u65af\u6b63\u5728\u7c73\u9686\u5546\u884c\u8fdb\u53e3\u9999\u8f9b\u6599\uff08\u80e1\u6912\uff09\uff0c\u51c6\u5907\u8fd0\u5230\u5e15\u5179\u6b27\u53bb\u5356\u6389\u3002\u6765\u81ea\u5e15\u5179\u6b27\u7684\u8ba2\u5355\u9700\u6c42\u7cbe\u786e\u7684\u5206\u6210\u4e86\u6bcf\u79cd\u54c1\u8d28\u7684\u80e1\u6912\u5404\u9700\u591a\u5c11\u9897\uff0c\u7f57\u4f26\u65af\u4e5f\u51c6\u5907\u4e86\u76f8\u5e94\u7684\u672c\u91d1\u3002\u4f46\u5728\u8d2d\u4e70\u65f6\uff0c\u8d6b\u841d\u53d1\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898\uff1a\u6bcf\u79cd\u80e1\u6912\u9700\u8981\u5206\u5f00\u653e\u7f6e\uff0c\u800c\u51fa\u4e8e\u9632\u6b62\u53d8\u8d28\u548c\u5c0a\u8d35\u8eab\u4efd\u9632\u4f2a\u6807\u8bc6\u7684\u8003\u8651\u2014\u2014\u6bd5\u7adf\u4e2d\u4e16\u7eaa\u7684\u80e1\u6912\u4ef7\u503c\u8d85\u8fc7\u7b49\u91cd\u9ec4\u91d1\uff0c\u6309\u9897\u8ba1\u4ef7\u2014\u2014\u6bcf\u79cd\u90fd\u9700\u8981\u4e0d\u540c\u7684\u7279\u5236\u5bb9\u5668\u4fdd\u5b58\uff08\u5bb9\u5668\u4ef7\u683c\u4e3a\u8be5\u54c1\u8d28\u7684\u80e1\u691210\u9897\uff0c\u800c\u4e14\u5bb9\u5668\u7684\u5bb9\u91cf\u53ef\u4ee5\u89c6\u4e3a\u65e0\u9650\u5927\uff0c\u6bd5\u7adf\u80e1\u6912\u5f88\u5c0f\uff09\uff1b\u800c\u8ba1\u7b97\u5165\u5bb9\u5668\u7684\u5305\u88c5\u4ef7\u683c\u4e4b\u540e\uff0c\u4e25\u683c\u6309\u7167\u8ba2\u5355\u8d2d\u4e70\u53cd\u800c\u4f1a\u6d6a\u8d39\u5f88\u591a\u5305\u88c5\u8d39\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u8d2d\u4e70\u540c\u4e00\u7c7b\u7684\u9ad8\u8d28\u91cf\u80e1\u6912\uff0c\u751a\u81f3\u53ef\u80fd\u4f1a\u6bd4\u6309\u539f\u8ba2\u5355\u8d2d\u4e70\u603b\u9897\u6570\u76f8\u540c\u800c\u8d28\u91cf\u4e0d\u540c\u7684\u80e1\u6912\u6765\u7684\u66f4\u52a0\u7701\u94b1\u3002 \u66f4\u5c11\u7684\u94b1\u80fd\u4e70\u5230\u66f4\u9ad8\u8d28\u91cf\u7684\u80e1\u6912\u5f53\u7136\u662f\u597d\u4e8b\uff08\u7701\u94b1\u7684\u540c\u65f6\u8fd8\u80fd\u5356\u5ba2\u6237\u4eba\u60c5\uff09\uff0c\u56e0\u6b64\u8d6b\u841d\u5e0c\u671b\u4f60\u8ba1\u7b97\u51fa\uff0c\u5728\u6ee1\u8db3\u539f\u8ba2\u5355\u8981\u6c42\u7684\u524d\u63d0\u4e0b\uff08\u5141\u8bb8\u4efb\u610f\u9897\u80e1\u6912\u7684\u8d28\u91cf\u88ab\u63d0\u5347\uff0c\u4e0d\u5141\u8bb8\u8d28\u91cf\u964d\u4f4e\uff09\uff0c\u6700\u5c11\u7684\u82b1\u8d39\u4e3a\u591a\u5c11\u679a\u94dc\u5e01\u3002 Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\\(T\\)\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7684\u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570\\(N\\)\uff0c\u4ee3\u8868\u80e1\u6912\u7684\u8d28\u91cf\u603b\u5171\u6709\u591a\u5c11\u7c7b\u3002 \u63a5\u4e0b\u6765\\(N\\)\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\\(a_i, p_i\\)\uff0c\u5176\u4e2d\\(a_i\\)\u8868\u793a\u7b2c\\(i\\)\u7c7b\u80e1\u6912\u6536\u5230\u7684\u8ba2\u5355\u9700\u6c42\u4e3a\u591a\u5c11\u9897\uff0c\\(p_i\\)\u8868\u793a\u7b2c\\(i\\)\u7c7b\u80e1\u6912\u6bcf\u9897\u7684\u4ef7\u683c\u4e3a\u591a\u5c11\u679a\u94dc\u5e01\u3002\u5982\u679c\u4f60\u51b3\u5b9a\u8d2d\u4e70\u7b2c\\(i\\)\u7c7b\u80e1\u6912\uff0c\u5c31\u5fc5\u987b\u989d\u5916\u652f\u4ed8\u76f8\u5f53\u4e8e10\u9897\u7b2c\\(i\\)\u7c7b\u80e1\u6912\u4ef7\u683c\u7684\u94b1\u7528\u4e8e\u5305\u88c5\u3002\u6570\u636e\u4fdd\u8bc1\u968f\u7740\\(i\\)\u7684\u589e\u5927\uff0c\u6bcf\u9897\u80e1\u6912\u7684\u4ef7\u683c\u5355\u8c03\u4e0a\u5347\uff0c\u4e5f\u4ee3\u8868\u7c7b\u7f16\u53f7\\(i\\)\u8d8a\u5927\u7684\u80e1\u6912\u8d28\u91cf\u5c31\u8d8a\u9ad8\u3002 Output Format \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5bf9\u5e94\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868\u6700\u5c11\u9700\u8981\u82b1\u8d39\u591a\u5c11\u679a\u94dc\u5e01\u624d\u80fd\u591f\u6ee1\u8db3\u5ba2\u6237\u7684\u9700\u6c42\u3002 Sample Input 2 2 100 15 100 20 3 1 16 1 18 100 20 Sample Output 3850 2240 \u6570\u636e\u89e3\u91ca\uff1a\u76f4\u89c2\u4e0a\u5c31\u53ef\u4ee5\u611f\u53d7\u51fa\uff0c\u7b2c\u4e00\u7ec4\u6570\u636e\u5e94\u8be5\u6309\u539f\u8ba2\u5355\u8981\u6c42\u8d2d\u4e70\uff08\u63d0\u5347100\u9897\u80e1\u6912\u7684\u8d28\u91cf\u6240\u9700\u91d1\u94b1\u9ad8\u4e8e\u8282\u7701\u4e0b\u7684\u5305\u88c5\u8d39\uff09\uff0c\u800c\u7b2c\u4e8c\u7ec4\u6570\u636e\u5e94\u8be5\u628a\u8d28\u91cf\u4f4e\u7684\u4e24\u9897\u80e1\u6912\u7528\u8d28\u91cf\u66f4\u9ad8\u7684\u4e24\u9897\u4ee3\u66ff\u6765\u8282\u7701\u5305\u88c5\u8d39\u3002 Data Range \u5bf9\u4e8e\\(40\\%\\)\u7684\u6570\u636e\uff0c\\(N \\le 15\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(T \\le 10\\)\uff0c\\(N \\le 1000\\)\uff0c\\(a_i \\le 1000\\)\uff0c\\(p_i \\le 2000\\)\u3002\uff08\u8bb0\u5f97\u624b\u52a8\u8ba1\u7b97\u4e0b\u662f\u5426\u6709\\(MAX(N) \\times MAX(a_i) \\times MAX(p_i) \\le 2147483647\\)\uff09\u3002 P.S. \u5c3d\u7ba1\u4ece\u6570\u636e\u89e3\u91ca\u770b\u8d77\u6765\uff0c\u4f3c\u4e4e\u662f\u6709\u7740\u67d0\u79cd\u7279\u5224\uff08\u6307\u7279\u6b8a\u5224\u5b9a\u65b9\u6cd5\u3002\u62ff\u6b64\u9898\u6253\u6bd4\u65b9\u7684\u8bdd\uff0c\u4e00\u4e2a\u4f8b\u5b50\u662f\u5f53\u8d2d\u4e70\u91cf\u5c0f\u4e8e10\u9897\u65f6\u5c31\u6539\u6210\u63d0\u5347\u8d28\u91cf\uff09\u7684\u505a\u6cd5\uff0c\u6216\u8005\u8d2a\u5fc3\u3001\u627e\u89c4\u5f8b\u3001\u6570\u5b66\u65b9\u6cd5\u5c31\u53ef\u4ee5\u62ff\u5230\u6ee1\u5206\u3002\u4f46\u4e3a\u4e86\u964d\u4f4e\u96be\u5ea6\u8d77\u89c1\uff08\u9632\u6b62\u5927\u5bb6\u60f3\u6b6a\uff09\uff0c\u63d0\u524d\u58f0\u660e\u4e00\u4e0b\uff1a\u6b64\u9898\u7684\u6b63\u786e\u505a\u6cd5\u5e76\u975e\u4e0a\u9762\u8bf4\u7684\u8fd9\u4e9b\u7b56\u7565\uff0c\u5f53\u7136\u4e5f\u4e0d\u662f\u641c\u7d22\u6216\u8005\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u67d0\u4e2a\u503c\u3002 P.P.S. \u9632\u6b62\u6389\u5751\u8d77\u89c1\uff0c\u518d\u5199\u4e00\u70b9\u8003\uff08pian\uff09\u573a\uff08fen\uff09\u7b56\u7565\u5427\uff0c\u5982\u679c\u957f\u65f6\u95f4\u6ca1\u60f3\u51fa\u6b63\u89e3\u6216\u8005\u6709\u7a7a\u7684\u4eba\u53ef\u4ee5\u770b\u4e00\u770b\u3002 \u5c3d\u7ba1\u7279\u5224\u6216\u8005\u6570\u5b66\u65b9\u6cd5\u5bf9\u4e8e\u67d0\u4e9b\u751a\u81f3\u5927\u591a\u6570\u7684\u6570\u636e\u662f\u7684\u786e\u53ef\u4ee5\u901a\u8fc7\u7684\uff0c\u4f46\u53ea\u8981\u662f\u7279\u5224\uff08\u5bf9\u4e8e\u6b63\u89e3\u4e0d\u662f\u7279\u5224\u7684\u9898\u6765\u8bf4\uff09\uff0c\u5c31\u5fc5\u7136\u5b58\u5728\u6570\u636e\u53ef\u4ee5\u5361\u6389\u3002\u5982\u679c\u9898\u76ee\u662f\u5355\u7ec4\u6570\u636e\uff0c\u8fd9\u6837\u9a97\u5206\u5176\u5b9e\u662f\u76f8\u5f53\u53ef\u884c\u7684\uff08\u6709\u65f6\u66b4\u529b\u53ea\u80fd\u7a33\u5b9a30\u5206\uff0c\u4f46\u5982\u679c\u51fa\u9898\u4eba\u6570\u636e\u51fa\u7684\u4e0d\u597d\u5c31\u80fd\u591f\u7279\u522470\u5206\u751a\u81f3100\u5206\uff09\uff1b\u7136\u800c\u5728\u9898\u76ee\u4e3a\u591a\u7ec4\u6570\u636e\u7684\u4fdd\u62a4\u4e0b\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u7684\u901a\u8fc7\u7387\u5c31\u4f1a\u6307\u6570\u7ea7\u964d\u4f4e\uff0c\u8fd9\u4e5f\u662f\u591a\u7ec4\u6570\u636e\u7684\u91cd\u8981\u610f\u4e49\u4e4b\u4e00\u3002 \u4e0d\u8fc7\u4e00\u5982\u65e2\u5f80\u7684\uff0c\u66b4\u529b\u641c\u7d22\u53ef\u4ee5\u9a97\u5230\u90e8\u5206\u5206\u3002\u7136\u800c\uff0c\u5e76\u975e\u6240\u6709\u7684\u66b4\u529b\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\u90fd\u503c\u5f97\u5199\u2014\u2014\u6bd4\u5982\u6b64\u9898\u7684\u66b4\u529b\u5c31\u5199\u8d77\u6765\u6bd4\u6b63\u89e3\u8fd8\u8981\u957f\uff0c\u56e0\u4e3a\u6b63\u89e3\u592a\u77ed\u4e86\uff08\u5bcc\u6709\u7ecf\u9a8c\u7684\u9009\u624b\u5927\u591a\u5728\u8fd8\u672a\u60f3\u51fa\u6b63\u89e3\u7ec6\u8282\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u80fd\u611f\u53d7\u51fa\u6b63\u89e3\u7684\u957f\u77ed\uff09\u3002\u5982\u679c\u4f60\u5176\u4ed6\u4e24\u9898\u90fd\u505a\u5b8c/\u66b4\u529b\u5199\u5b8c\u4e86\uff0c\u800c\u4e14\u8fd9\u9898\u600e\u4e48\u60f3\u4e5f\u60f3\u4e0d\u51fa\u6b63\u89e3\uff08\u6bd4\u5982\u5e72\u60f3\u4e86\u8d85\u8fc7\u534a\u5c0f\u65f6\uff09\uff0c\u6b64\u65f6\u5199\u66b4\u529b\u4ecd\u7136\u662f\u5f88\u503c\u7684\u3002\u5982\u679c\u4e0d\u662f\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u628a\u65f6\u95f4\u7528\u5728\u522b\u7684\u5730\u65b9\uff0c\u6216\u8005\u591a\u60f3\u60f3\u6b63\u89e3\u5427\u3002 FineArtz's solution Star /* Spice and Wolf */ #include <iostream> #include <cstring> using namespace std; int t, n; long long a[1005], p[1005], f[1005], s[1005]; int main(){ cin >> t; while (t--){ memset(a, 0, sizeof(a)); memset(p, 0, sizeof(p)); memset(f, 0, sizeof(f)); memset(s, 0, sizeof(s)); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i] >> p[i]; s[i] = a[i] + s[i - 1]; } f[1] = (a[1] + 10) * p[1]; for (int i = 2; i <= n; ++i){ f[i] = 2147483647; for (int j = 0; j < i; ++j){ f[i] = min(f[i], f[j] + (s[i] - s[j] + 10) * p[i]); } } cout << f[n] << endl; } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> int dp[1001][1001],a[1001],p[1001],t,n,minn; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d\",&n); for (int j=n-1;j>=0;--j) scanf(\"%d%d\",&a[j],&p[j]); dp[0][0]=a[0]*p[0]+10*p[0]; for (int j=1;j<n;++j) { minn=2100000000; for (int k=0;k<=j-1;++k) { dp[j][k] = dp[j - 1][k] + a[j] * p[k]; if (dp[j-1][k]<minn) minn=dp[j-1][k]; } dp[j][j]=minn+a[j]*p[j]+10*p[j]; } minn=2100000000; for (int j=0;j<n;++j) if (dp[n-1][j]<minn) minn=dp[n-1][j]; printf(\"%d\\n\",minn); } return 0; }","title":"4112"},{"location":"nr/4112/#4112-spice-and-wolf","text":"\u9898\u76ee","title":"4112 Spice and Wolf"},{"location":"nr/4112/#fineartzs-solution-star","text":"/* Spice and Wolf */ #include <iostream> #include <cstring> using namespace std; int t, n; long long a[1005], p[1005], f[1005], s[1005]; int main(){ cin >> t; while (t--){ memset(a, 0, sizeof(a)); memset(p, 0, sizeof(p)); memset(f, 0, sizeof(f)); memset(s, 0, sizeof(s)); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i] >> p[i]; s[i] = a[i] + s[i - 1]; } f[1] = (a[1] + 10) * p[1]; for (int i = 2; i <= n; ++i){ f[i] = 2147483647; for (int j = 0; j < i; ++j){ f[i] = min(f[i], f[j] + (s[i] - s[j] + 10) * p[i]); } } cout << f[n] << endl; } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4112/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> int dp[1001][1001],a[1001],p[1001],t,n,minn; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d\",&n); for (int j=n-1;j>=0;--j) scanf(\"%d%d\",&a[j],&p[j]); dp[0][0]=a[0]*p[0]+10*p[0]; for (int j=1;j<n;++j) { minn=2100000000; for (int k=0;k<=j-1;++k) { dp[j][k] = dp[j - 1][k] + a[j] * p[k]; if (dp[j-1][k]<minn) minn=dp[j-1][k]; } dp[j][j]=minn+a[j]*p[j]+10*p[j]; } minn=2100000000; for (int j=0;j<n;++j) if (dp[n-1][j]<minn) minn=dp[n-1][j]; printf(\"%d\\n\",minn); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4113/","text":"4113 Seven Apples 0n a Witch\u2019s Tree \u9898\u76ee Description \u5386\u7ecf\u65e0\u6570\u5468\u6298\u540e\uff0c\u8d6b\u841d\u4e0e\u7f57\u4f26\u65af\u6700\u7ec8\u5728\u7ebd\u5e0c\u62c9\u5b89\u5b9a\u4e0b\u6765\uff0c\u5e76\u5f00\u4e86\u4e00\u5bb6\u6e29\u6cc9\u65c5\u9986\u3002\u4e3a\u4e86\u8ba9\u5e74\u5e7c\u7684\u5973\u513f\u7f2a\u8389\u65f6\u523b\u6709\u82f9\u679c\u5403\uff0c\u8d6b\u841d\u5728\u65c5\u9986\u65c1\u79cd\u4e86\u4e00\u68f5\u82f9\u679c\u6811\u3002 \u8fd9\u68f5\u6811\u5177\u6709\u9b54\u6cd5\uff0c\u56e0\u6b64\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u8fd9\u6837\u4e00\u4e9b\u6027\u8d28\uff1a\u5b83\u771f\u7684\u957f\u6210\u4e00\u68f5\u6811\uff08\u6570\u636e\u7ed3\u6784\u610f\u4e49\u4e0a\uff09\u7684\u5f62\u72b6\uff0c\u5e76\u5728\u6bcf\u4e2a\u8282\u70b9\u4e0a\u90fd\u957f\u4e86\u4e14\u6700\u591a\u53ea\u957f\u4e00\u4e2a\u82f9\u679c\uff0c\u5305\u62ec\u7f16\u53f7\u4e3a1\u7684\u6839\u8282\u70b9\u4e5f\u662f\u3002\u8d6b\u841d\u65f6\u4e0d\u65f6\u4f1a\u4ece\u6811\u4e0a\u6458\u4e0b\u4e00\u4e2a\u82f9\u679c\uff0c\u800c\u8fd9\u9897\u6811\u4e5f\u65f6\u4e0d\u65f6\u4f1a\u4ece\u7a7a\u7684\u8282\u70b9\u4e0a\u957f\u51fa\u4e00\u4e2a\u82f9\u679c\u3002 \u4e3a\u4e86\u7edf\u8ba1\u82f9\u679c\u7684\u957f\u52bf\uff08\u7ffb\u8bd1\uff1a\u5634\u998b\uff09\uff0c\u7f2a\u8389\u6709\u65f6\u4f1a\u60f3\u8981\u77e5\u9053\u67d0\u4e00\u9897\u5b50\u6811\u4e0a\u603b\u5171\u6709\u591a\u5c11\u82f9\u679c\u3002\u4f46\u8fd9\u68f5\u6811\u6709\u4e9b\u5de8\u5927\uff0c\u5e74\u5e7c\u7684\u7f2a\u8389\u6709\u70b9\u6570\u4e0d\u8fc7\u6765\uff0c\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417\uff1f Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\\(N\\)\uff0c\u4e3a\u82f9\u679c\u6811\u7684\u8282\u70b9\u6570\u3002 \u63a5\u4e0b\u6765\u7684\\(N-1\\)\u884c\uff0c\u6bcf\u884c\u6709\u4e24\u4e2a\u6b63\u6574\u6570\\(u,v\\)\uff0c\u4ee3\u8868\u7f16\u53f7\u4e3a\\(v\\)\u7684\u8282\u70b9\u7684\u7236\u4eb2\u662f\\(u\\)\u8282\u70b9\u3002 \u63a5\u4e0b\u6765\u7684\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\\(M\\)\uff0c\u4e3a\u63a5\u4e0b\u6765\u53d1\u751f\u7684\u4e8b\u4ef6\u6570\u3002 \u63a5\u4e0b\u6765\\(M\\)\u884c\uff0c\u6bcf\u884c\u7684\u5185\u5bb9\u53ef\u80fd\u662f\u4ee5\u4e0b\u4e24\u79cd\u60c5\u51b5\u4e4b\u4e00\uff1a \u201c\\(C\\ x\\)\u201d\u4ee3\u8868\u7f16\u53f7\u4e3a\\(x\\)\u7684\u8282\u70b9\u4e0a\u7684\u82f9\u679c\u6570\u91cf\u53d1\u751f\u4e86\u53d8\u5316\u3002\u7531\u4e8e\u6bcf\u4e2a\u8282\u70b9\u4e0a\u6700\u591a\u53ea\u4f1a\u957f\u4e00\u4e2a\u82f9\u679c\uff0c\u56e0\u6b64\u5982\u679c\u539f\u6765\u8fd9\u4e2a\u8282\u70b9\u4e0a\u6709\u82f9\u679c\uff0c\u90a3\u8fd9\u6761\u4fe1\u606f\u5c31\u4ee3\u8868\u8d6b\u841d\u6458\u6389\u4e86\u8fd9\u4e2a\u82f9\u679c\uff1b\u5982\u679c\u539f\u6765\u8fd9\u4e2a\u8282\u70b9\u4e0a\u6ca1\u6709\u82f9\u679c\uff0c\u90a3\u8fd9\u6761\u4fe1\u606f\u5c31\u4ee3\u8868\u8fd9\u4e2a\u8282\u70b9\u4e0a\u957f\u51fa\u4e86\u4e00\u4e2a\u82f9\u679c\u3002 \u201c\\(Q\\ x\\)\u201d\u4ee3\u8868\u7f2a\u8389\u60f3\u8981\u77e5\u9053\u4ee5\u8282\u70b9\\(x\\)\u4e3a\u6839\u7684\u5b50\u6811\u4e0a\u603b\u5171\u6709\u591a\u5c11\u4e2a\u82f9\u679c\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2a\u7f2a\u8389\u7684\u8be2\u95ee\u8f93\u51fa\u4e00\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u5b57\\(x\\)\u4ee3\u8868\u95ee\u9898\u7684\u7b54\u6848\u3002 Sample Input 4 1 2 1 3 1 4 3 Q 1 C 2 Q 1 Sample Output 4 3 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 1000\\)\uff0c\u3002 \u5bf9\u4e8e\u53e6\u5916\\(30\\%\\)\u7684\u6570\u636e\uff0c\u8fd9\u9897\u82f9\u679c\u6811\u662f\u4e00\u9897\u5b8c\u5168\u4e8c\u53c9\u6811\u3002\uff08\u6ee1\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u4e00\u79cd\uff0c\u533a\u522b\u5728\u4e8e\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u6307\u4ec5\u6700\u540e\u4e00\u6392\u53ef\u80fd\u975e\u6ee1\uff0c\u4e14\u6700\u540e\u4e00\u6392\u7684\u6240\u6709\u8282\u70b9\u90fd\u9760\u5230\u4e86\u6700\u5de6\uff1b\u800c\u6ee1\u4e8c\u53c9\u6811\u7684\u6700\u540e\u4e00\u6392\u4e5f\u5fc5\u7136\u662f\u6ee1\u7684\uff09 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 100000\\)\u3002 FineArtz's solution Star /* Seven Apples 0n a Witch's Tree */ #include <iostream> using namespace std; const int MAXN = 100000; int head[MAXN + 5], nxt[MAXN + 5], e[MAXN + 5], cnt = 0; bool b[MAXN + 5] = {false}; int n, m, root = 0; int in[MAXN + 5], out[MAXN + 5], seq[MAXN + 5], t = 0; bool apple[MAXN + 5] = {false}; struct Node{ int l = 0, r = 0, sum = 0; }; Node a[MAXN * 4 + 5]; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x){ in[x] = t; seq[t] = x; for (int i = head[x]; i != 0; i = nxt[i]){ ++t; dfs(e[i]); } out[x] = t; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = 1; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; }; void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum += d; return; } int mid = (a[x].l + a[x].r) / 2; if (p <= mid) update(x * 2, p, d); else update(x * 2 + 1, p, d); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (mid >= l) ret += query(x * 2, l, r); if (mid < r) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); b[v] = true; } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } t = 1; dfs(root); for (int i = 1; i <= n; ++i) apple[i] = true; buildTree(1, 1, n); cin >> m; while (m--){ char op; int x; cin >> op >> x; if (op == 'C'){ if (apple[x]){ apple[x] = false; update(1, in[x], -1); } else{ apple[x] = true; update(1, in[x], 1); } } else if (op == 'Q'){ cout << query(1, in[x], out[x]) << '\\n'; } } return 0; }","title":"4113"},{"location":"nr/4113/#4113-seven-apples-0n-a-witchs-tree","text":"\u9898\u76ee","title":"4113 Seven Apples 0n a Witch\u2019s Tree"},{"location":"nr/4113/#fineartzs-solution-star","text":"/* Seven Apples 0n a Witch's Tree */ #include <iostream> using namespace std; const int MAXN = 100000; int head[MAXN + 5], nxt[MAXN + 5], e[MAXN + 5], cnt = 0; bool b[MAXN + 5] = {false}; int n, m, root = 0; int in[MAXN + 5], out[MAXN + 5], seq[MAXN + 5], t = 0; bool apple[MAXN + 5] = {false}; struct Node{ int l = 0, r = 0, sum = 0; }; Node a[MAXN * 4 + 5]; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x){ in[x] = t; seq[t] = x; for (int i = head[x]; i != 0; i = nxt[i]){ ++t; dfs(e[i]); } out[x] = t; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = 1; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; }; void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum += d; return; } int mid = (a[x].l + a[x].r) / 2; if (p <= mid) update(x * 2, p, d); else update(x * 2 + 1, p, d); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (mid >= l) ret += query(x * 2, l, r); if (mid < r) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); b[v] = true; } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } t = 1; dfs(root); for (int i = 1; i <= n; ++i) apple[i] = true; buildTree(1, 1, n); cin >> m; while (m--){ char op; int x; cin >> op >> x; if (op == 'C'){ if (apple[x]){ apple[x] = false; update(1, in[x], -1); } else{ apple[x] = true; update(1, in[x], 1); } } else if (op == 'Q'){ cout << query(1, in[x], out[x]) << '\\n'; } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4116/","text":"4116 \u5200\u4f4d\u5206\u914d \u9898\u76ee Description \u5ba1\u795e\u8005\u6700\u8fd1\u5f97\u5230\u4e86\u4e00\u5927\u7b14\u5c0f\u5224\uff0c\u7528\u8fd9\u4e9b\u5c0f\u5224\u6269\u5efa\u4e86\u4e00\u4e0b\u5200\u4f4d\uff08\u8fd9\u4e9b\u5200\u4f4d\u4ece\u5de6\u5230\u53f3\u6392\u6210\u4e00\u6761\u76f4\u7ebf\uff0c\u6bcf\u4e2a\u5200\u4f4d\u5728\u4e00\u4e2a\u5750\u6807\u70b9x\u4e0a(0 <=x<=1,000,000,000\uff09\uff0c\u7528\u6765\u653e\u5979\u5fc3\u7231\u7684\u5200\u5251\u4eec\u3002\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\uff0c\u6700\u8fd1\u53d1\u751f\u4e86\u4e00\u4ef6\u602a\u4e8b\u3002\u5982\u679c\u628a\u4e24\u628a\u5200\u653e\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u4e00\u5230\u665a\u4e0a\uff0c\u5c31\u4f1a\u542c\u5230\u4e24\u4e2a\u4eba\u8bf4\u8bdd\u7684\u58f0\u97f3\uff0c\u8fd9\u8ba9\u8fd8\u662f\u4e00\u4e2a\u5c0f\u5973\u5b69\u7684\u5ba1\u795e\u8005\u89c9\u5f97\u5f88\u5bb3\u6015\uff0c\u4e8e\u662f\u5979\u51b3\u5b9a\u6bcf\u4e2a\u5200\u4f4d\u53ea\u653e\u4e00\u628a\u5200\uff0c\u5e76\u4e14\u4e24\u628a\u5200\u7684\u95f4\u8ddd\u8d8a\u8fdc\u8d8a\u597d\u3002 \u5df2\u77e5\u5ba1\u795e\u8005\u73b0\u5728\u4e00\u5171\u6709N (2 <= N <= 100,000)\u4e2a\u5200\u4f4d\u548cS (2 <= S <=N)\u628a\u5200\u3002\u5979\u60f3\u7ed9\u5b9a\u4e00\u79cd\u653e\u7f6e\u5200\u5251\u7684\u65b9\u6cd5\uff0c\u4f7f\u5f97\u6bcf\u4e24\u628a\u5200\u7684\u6700\u77ed\u8ddd\u79bb\u8d8a\u5927\u8d8a\u597d\u3002\u8bf7\u5199\u4e00\u4e2a\u7a0b\u5e8f\u5e2e\u52a9\u8fd9\u4e2a\u5c0f\u5973\u5b69\uff0c\u8ba9\u5979\u77e5\u9053\u6700\u5927\u7684\u6700\u77ed\u8ddd\u79bb\u662f\u591a\u5c11\u5427\uff01 Input Format \u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6570\u5b57\uff0c\u5206\u522b\u4ee3\u8868N\u548cC \u7b2c\u4e8c\u5230\u7b2cN+1\u884c\uff1a\u6bcf\u884c\u4e00\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u5200\u4f4d\u7684\u5750\u6807 Output Format \u4e00\u4e2a\u6570\u5b57\uff0c\u4ee3\u8868\u6700\u5927\u7684\u6700\u77ed\u8ddd\u79bb Sample Input 5 3 1 2 8 4 9 Sample Output 3 Hint \u5ba1\u795e\u8005\u53ef\u4ee5\u628a\u8fd9\u4e09\u628a\u5200\u5206\u522b\u653e\u57281,4\uff0c8\u7684\u4f4d\u7f6e\u3002 FineArtz's solution Star /* \u5200\u4f4d\u5206\u914d */ #include <iostream> using namespace std; int n, s; int a[100005]; void qsort(int l, int r){ int i = l, j = r; int mid = a[(i + j) / 2]; while (i <= j){ while (a[i] < mid) ++i; while (a[j] > mid) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < r) qsort(i, r); if (j > l) qsort(l, j); } bool check(int ans){ int i = 1, j = 2, t = s - 1; while (j <= n){ if (a[j] - a[i] >= ans){ --t; i = j; } if (t == 0) return true; ++j; } return false; } int main(){ cin >> n >> s; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); int l = 1, r = a[n] - a[1], mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"4116"},{"location":"nr/4116/#4116","text":"\u9898\u76ee","title":"4116 \u5200\u4f4d\u5206\u914d"},{"location":"nr/4116/#fineartzs-solution-star","text":"/* \u5200\u4f4d\u5206\u914d */ #include <iostream> using namespace std; int n, s; int a[100005]; void qsort(int l, int r){ int i = l, j = r; int mid = a[(i + j) / 2]; while (i <= j){ while (a[i] < mid) ++i; while (a[j] > mid) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < r) qsort(i, r); if (j > l) qsort(l, j); } bool check(int ans){ int i = 1, j = 2, t = s - 1; while (j <= n){ if (a[j] - a[i] >= ans){ --t; i = j; } if (t == 0) return true; ++j; } return false; } int main(){ cin >> n >> s; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); int l = 1, r = a[n] - a[1], mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4117/","text":"4117 \u64cd\u4f5c\u6570\u7ec4 \u9898\u76ee Description \u6709N\u4e2a\u6574\u6570a1,a2,...,an\u3002\u4f60\u8981\u5728\u8fd9N\u4e2a\u6574\u6570\u4e0a\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a 1.\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\uff0c\u5bf9\u8fd9\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u6570\u52a0\u4e0a\u4e00\u4e2a\u7ed9\u5b9a\u7684\u6570\uff1b 2.\u67e5\u8be2\u4e00\u4e2a\u7ed9\u5b9a\u533a\u95f4\u7684\u6570\u5b57\u548c\u3002 Input Format \u7b2c\u4e00\u884c\uff1a\u4e24\u4e2a\u6570\u5b57N\u548cQ\uff0c1 \u2264 N,M \u2264 100000 \u7b2c\u4e8c\u884c\uff1aN\u4e2a\u6570\u5b57a1,a2,...,an\u3002 -1000000000 \u2264 Ai \u2264 1000000000 \u63a5\u4e0b\u6765\u662fM\u4e2a\u64cd\u4f5c\uff1a \u6bcf\u4e00\u4e2aQ\u5f00\u5934\u7684\u884c\u662f\u8be2\u95ee\u7ed9\u5b9a\u533a\u95f4\u7684\u6570\u5b57\u548c\uff0c\u6bcf\u4e00\u4e2aC\u5f00\u5934\u7684\u884c\u662f\u5bf9\u7ed9\u5b9a\u533a\u95f4\u7684\u6bcf\u4e2a\u6570\u52a0\u4e0a\u4e00\u4e2ac,-10000 \u2264 c \u2264 10000 Q a b \u662f\u5bf9[a,b]\u8fdb\u884c\u8be2\u95ee\uff1b C a,b,c\u662f\u5728[a,b]\u533a\u95f4\u6bcf\u4e2a\u6570\u52a0\u4e0ac\u3002 Output Format \u56de\u7b54\u6bcf\u4e00\u6b21\u8be2\u95ee\uff0c\u6bcf\u4e2a\u56de\u7b54\u5360\u5355\u72ec\u4e00\u884c\u3002 Sanple Input 10 5 1 2 3 4 5 6 7 8 9 10 Q 4 4 Q 1 10 Q 2 4 C 3 6 3 Q 2 4 Sample Output 4 55 9 15 Hint \u6ce8\u610f\u6570\u636e\u89c4\u6a21\u3002 FineArtz's solution Star /* \u64cd\u4f5c\u6570\u7ec4 */ #include <iostream> using namespace std; const int MAXN = 100000; struct Node{ int l = 0, r = 0; long long lazy = 0, sum = 0; }; int n, q; long long t[MAXN + 5]; Node a[MAXN * 4 + 5]; inline void pushUp(int x){ a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } inline void pushDown(int x){ if (a[x].lazy != 0){ a[x * 2].lazy += a[x].lazy; a[x * 2].sum += a[x].lazy * (a[x * 2].r - a[x * 2].l + 1); a[x * 2 + 1].lazy += a[x].lazy; a[x * 2 + 1].sum += a[x].lazy * (a[x * 2 + 1].r - a[x * 2 + 1].l + 1); a[x].lazy = 0; } } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = t[l]; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int c){ if (a[x].l >= l && a[x].r <= r){ a[x].sum += c * (a[x].r - a[x].l + 1); a[x].lazy += c; return; } pushDown(x); int mid = (a[x].l + a[x].r) / 2; if (l <= mid) update(x * 2, l, r, c); if (r > mid) update(x * 2 + 1, l, r, c); pushUp(x); } long long query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; pushDown(x); int mid = (a[x].l + a[x].r) / 2; long long ret = 0; if (l <= mid) ret += query(x * 2, l, r); if (r > mid) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> t[i]; buildTree(1, 1, n); while (q--){ char op; int x, y, z; cin >> op; if (op == 'Q'){ cin >> x >> y; cout << query(1, x, y) << '\\n'; } else{ cin >> x >> y >> z; update(1, x, y, z); } } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; const int MAXN=100001; typedef long long ll; ll a[MAXN],ans[4*MAXN],tag[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p) { ans[p]=ans[ls(p)]+ans[rs(p)]; } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p); } inline void add_tag(int p,int l,int r,int k) { tag[p]+=k; ans[p]+=k*(r-l+1); } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p); } ll query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; push_down(p,l,r); int mid=(l+r)>>1; ll sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int m,n,x,y,k; char c; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;i++) scanf(\"%lld\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ c=' '; while (c!='C'&&c!='Q') c=getchar(); if (c=='C') { scanf(\"%d%d%d\",&x,&y,&k); update(x,y,1,n,1,k); } if (c=='Q') { scanf(\"%d%d\",&x,&y); printf(\"%lld\\n\",query(x,y,1,n,1)); } } return 0; }","title":"4117"},{"location":"nr/4117/#4117","text":"\u9898\u76ee","title":"4117 \u64cd\u4f5c\u6570\u7ec4"},{"location":"nr/4117/#fineartzs-solution-star","text":"/* \u64cd\u4f5c\u6570\u7ec4 */ #include <iostream> using namespace std; const int MAXN = 100000; struct Node{ int l = 0, r = 0; long long lazy = 0, sum = 0; }; int n, q; long long t[MAXN + 5]; Node a[MAXN * 4 + 5]; inline void pushUp(int x){ a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } inline void pushDown(int x){ if (a[x].lazy != 0){ a[x * 2].lazy += a[x].lazy; a[x * 2].sum += a[x].lazy * (a[x * 2].r - a[x * 2].l + 1); a[x * 2 + 1].lazy += a[x].lazy; a[x * 2 + 1].sum += a[x].lazy * (a[x * 2 + 1].r - a[x * 2 + 1].l + 1); a[x].lazy = 0; } } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = t[l]; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int c){ if (a[x].l >= l && a[x].r <= r){ a[x].sum += c * (a[x].r - a[x].l + 1); a[x].lazy += c; return; } pushDown(x); int mid = (a[x].l + a[x].r) / 2; if (l <= mid) update(x * 2, l, r, c); if (r > mid) update(x * 2 + 1, l, r, c); pushUp(x); } long long query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; pushDown(x); int mid = (a[x].l + a[x].r) / 2; long long ret = 0; if (l <= mid) ret += query(x * 2, l, r); if (r > mid) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> t[i]; buildTree(1, 1, n); while (q--){ char op; int x, y, z; cin >> op; if (op == 'Q'){ cin >> x >> y; cout << query(1, x, y) << '\\n'; } else{ cin >> x >> y >> z; update(1, x, y, z); } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4117/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; const int MAXN=100001; typedef long long ll; ll a[MAXN],ans[4*MAXN],tag[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p) { ans[p]=ans[ls(p)]+ans[rs(p)]; } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p); } inline void add_tag(int p,int l,int r,int k) { tag[p]+=k; ans[p]+=k*(r-l+1); } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p); } ll query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; push_down(p,l,r); int mid=(l+r)>>1; ll sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int m,n,x,y,k; char c; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;i++) scanf(\"%lld\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ c=' '; while (c!='C'&&c!='Q') c=getchar(); if (c=='C') { scanf(\"%d%d%d\",&x,&y,&k); update(x,y,1,n,1,k); } if (c=='Q') { scanf(\"%d%d\",&x,&y); printf(\"%lld\\n\",query(x,y,1,n,1)); } } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4118/","text":"4118 travel \u9898\u76ee Description \u6211\u4eec\u90fd\u5f88\u719f\u6089\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u3001\u4e2d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\uff0c\u5728\u6570\u636e\u7ed3\u6784\u4e2d\u5e38\u63d0\u51fa\u8fd9\u6837\u7684\u95ee\u9898\uff1a\u5df2\u77e5\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u6c42\u5b83\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u76f8\u5e94\u7684\u5df2\u77e5\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u4f60\u4e5f\u80fd\u6c42\u51fa\u5b83\u7684\u524d\u5e8f\u904d\u5386\u3002 \u7136\u800c\uff0c\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u548c\u540e\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u4f60\u5374\u4e0d\u80fd\u786e\u5b9a\u5176\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u3002\u5e76\u4e14\u8fd9\u4e00\u73b0\u8c61\u4e0d\u4ec5\u51fa\u73b0\u5728\u4e8c\u53c9\u6811\u4e2d\uff0c\u5bf9M\u53c9\u6811\u4ea6\u5982\u6b64\u3002 Input Format \u8f93\u5165\u6570\u636e\u5171\u4e00\u884c\uff0c\u683c\u5f0f\u4e3a\uff1am s1 s2 \u8868\u793a\u8be5\u6811\u4e3am\u53c9\u6811\uff0c\u5176\u524d\u5e8f\u904d\u5386\u5e8f\u5217\u4e3as1\uff0c\u5176\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u4e3as2\uff0cs1\u548cs2\u7531\u5c0f\u5199\u5b57\u6bcd\u6784\u6210\u3002 1\u2264m\u226420\uff0c\u4e14s1\u4e0es2\u7684\u957f\u5ea6\u76f8\u7b49\u4e14\u4e0d\u8d85\u8fc726\uff0c\u82e5\u5b83\u4eec\u7684\u957f\u5ea6\u4e3ak\uff0c\u5219\u524dk\u4e2a\u5c0f\u5199\u5b57\u6bcd\u5c06\u4e0d\u91cd\u590d\u5730\u51fa\u73b0\u5728s1\u4e0es2\u4e2d\u3002 Output Format \u8f93\u51fa\u53ef\u80fd\u7684\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u7684\u603b\u6570\uff0c\u7ed3\u679c\u4e0d\u8d85\u8fc7\u957f\u6574\u578b\u6570\u3002 Sample Input 10 abc bca Sample Output 45 FineArtz's solution Star /* travel */ #include <iostream> #include <cmath> #include <cstring> using namespace std; long long FACT[21] = {0}; long long comb(long long n, long long k){ return FACT[n] / FACT[k] / FACT[n - k]; } int m; char s1[25], s2[25]; long long travel(char *s1, long long len1, char *s2, long long len2){ long long ret = 1, p1 = 1, p2 = 0; long long child = 0; while (p1 < len1){ for (int i = 0; i < len2; ++i){ if (s2[i] == s1[p1]){ p2 = i; break; } } ret *= travel(s1 + p1, p2 - p1 + 2, s2 + p1 - 1, p2 - p1 + 2); p1 = p2 + 2; ++child; } ret *= comb(m, child); return ret; } int main(){ FACT[0] = 1; for (int i = 1; i <= 20; ++i) FACT[i] = FACT[i - 1] * i; cin >> m >> s1 >> s2; long long len1 = strlen(s1), len2 = strlen(s2); cout << travel(s1, len1, s2, len2); return 0; }","title":"4118"},{"location":"nr/4118/#4118-travel","text":"\u9898\u76ee","title":"4118 travel"},{"location":"nr/4118/#fineartzs-solution-star","text":"/* travel */ #include <iostream> #include <cmath> #include <cstring> using namespace std; long long FACT[21] = {0}; long long comb(long long n, long long k){ return FACT[n] / FACT[k] / FACT[n - k]; } int m; char s1[25], s2[25]; long long travel(char *s1, long long len1, char *s2, long long len2){ long long ret = 1, p1 = 1, p2 = 0; long long child = 0; while (p1 < len1){ for (int i = 0; i < len2; ++i){ if (s2[i] == s1[p1]){ p2 = i; break; } } ret *= travel(s1 + p1, p2 - p1 + 2, s2 + p1 - 1, p2 - p1 + 2); p1 = p2 + 2; ++child; } ret *= comb(m, child); return ret; } int main(){ FACT[0] = 1; for (int i = 1; i <= 20; ++i) FACT[i] = FACT[i - 1] * i; cin >> m >> s1 >> s2; long long len1 = strlen(s1), len2 = strlen(s2); cout << travel(s1, len1, s2, len2); return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4119/","text":"4119 \u64a4\u9000 \u9898\u76ee Description \u5728\u4e00\u4e2a\u5916\u661f\u4eba\u7684\u9057\u8ff9\u4e2d\u5206\u5e03\u7740\u4e09\u6837\u9053\u5177\uff0c\u5f53\u4e09\u6837\u9053\u5177\u90fd\u62ff\u8d70\u540e\uff0c\u9057\u8ff9\u5c31\u5f88\u5feb\u81ea\u52a8\u6bc1\u706d\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u5728\u6700\u77ed\u65f6\u95f4\u5185\u79bb\u5f00\u3002 \u9057\u8ff9\u53ef\u4ee5\u770b\u4f5c\u662f\u7531N\u4e2a\u623f\u95f4(\u7f16\u53f71..N)\u548cN-1\u6761\u957f\u5ea6\u4e0d\u7b49\u901a\u9053\u6240\u7ec4\u6210\uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u623f\u95f4\u4e4b\u95f4\u6709\u4e14\u53ea\u6709\u4e00\u6761\u8def\u53ef\u4ee5\u76f8\u4e92\u5230\u8fbe\u3002 \u73b0\u5728\uff0c\u6211\u4eec\u7684\u961f\u5458\u5df2\u7ecf\u5728\u7f16\u53f7\u4e3aA,B,C\u7684\u623f\u95f4\u5185\u62ff\u5230\u9053\u5177\uff0c\u5e76\u4e14\u51c6\u5907\u64a4\u9000\u3002\u7531\u4e8e\u53ea\u6709\u4e00\u67b6\u76f4\u5347\u673a\uff0c\u6240\u4ee5\u53ea\u80fd\u5728\u4e00\u4e2a\u623f\u95f4\u4e0a\u505c\u7559\u3002\u73b0\u5728\u8bf7\u4f60\u51b3\u5b9a\u5c06\u76f4\u5347\u673a\u505c\u5728\u54ea\u4e00\u4e2a\u623f\u95f4\u4e4b\u4e0a\uff0c\u624d\u80fd\u591f\u4f7f\u4e09\u4eba\u5230\u8fbe\u8be5\u623f\u95f4\u7684\u8ddd\u79bb\u4e4b\u548c\u6700\u77ed\u3002 Input Format \u7b2c1\u884c\uff1a\u56db\u4e2a\u6574\u6570N A B C\uff1b \u7b2c2..N\u884c\uff1a\u6bcf\u884c\u4e09\u4e2a\u6574\u6570u,v,w\uff0c\u8868\u793a\u5b58\u5728\u8fde\u63a5\u623f\u95f4u,v\u7684\u901a\u9053\uff0c\u957f\u5ea6\u4e3aw\u3002 Output Format \u7b2c1\u884c\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6c47\u5408\u623f\u95f4\u7684\u7f16\u53f7\u3002\u82e5\u5b58\u5728\u591a\u4e2a\u89e3\uff0c\u8f93\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e00\u4e2a\uff1b \u7b2c2\u884c\uff1a\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4e09\u4eba\u5230\u8be5\u623f\u95f4\u7684\u8ddd\u79bb\u4e4b\u548c\u3002 Sample Input 5 3 1 4 3 5 5 4 3 9 4 1 7 1 2 1 Sample Output 4 16 Data Range \u5bf9\u4e8e50%\u7684\u6570\u636e\uff1a1 <= N <= 1,000\uff1b \u5bf9\u4e8e100%\u7684\u6570\u636e\uff1a1 <= N <= 20,000\uff1b 1 <= A,B,C,u,v <= N\uff0c\u4e14A,B,C\u4e0d\u76f8\u7b49\uff0cu,v\u4e0d\u76f8\u7b49\uff1b 1 <= w <= 1,000\u3002 FineArtz's solution Star /* \u64a4\u9000 */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 20000; int n, A, B, C; int head[MAXN + 5] = {0}, ed[MAXN + 5] = {0}, nxt[MAXN + 5] = {0}, len[MAXN + 5] = {0}; int cnt = 0; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nn[MAXN + 5] = {0}, l[MAXN + 5] = {0}; int m = 0; int dist[MAXN + 5] = {0}, depth[MAXN + 5] = {0}, fa[MAXN + 5][20] = {0}; inline void addEdge(int u, int v, int w){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; len[cnt] = w; } inline void addedge(int u, int v, int w){ ++m; nn[m] = h[u]; e[m] = v; h[u] = m; l[m] = w; } void calcDist(int x){ int q[MAXN + 5]; bool b[MAXN + 5]= {0}; int front = 0, rear = 0; q[rear++] = x; dist[x] = 0; depth[x] = 1; b[x] = true; while (front != rear){ int now = q[front]; ++front; for (int i = head[now]; i != 0; i = nxt[i]){ int next = ed[i]; if (!b[next]){ b[next] = true; addedge(now, next, len[i]); fa[next][0] = now; depth[next] = depth[now] + 1; dist[next] = dist[now] + len[i]; q[rear++] = next; } } } } inline int lca(int p, int q){ if (depth[p] > depth[q]){ int t = p; p = q; q = t; } int def = depth[q] - depth[p]; for (int i = 0; (1 << i) <= def; ++i){ if ((1 << i) & def) q = fa[q][i]; } if (p != q){ for (int i = (int)log2(n); i >= 0; --i){ if (fa[p][i] != fa[q][i]){ p = fa[p][i]; q = fa[q][i]; } } p = fa[p][0]; } return p; } inline int dis(int p, int q){ int x = lca(p, q); return dist[p] + dist[q] - 2 * dist[x]; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> A >> B >> C; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } calcDist(1); for (int j = 1; (1 << j) <= n; ++j){ for (int i = 1; i <= n; ++i) fa[i][j] = fa[fa[i][j - 1]][j - 1]; } int ans = 2147483647, ansi = 0; for (int i = 1; i <= n; ++i){ int d = dis(i, A) + dis(i, B) + dis(i, C); if (ans > d){ ans = d; ansi = i; } } cout << ansi << '\\n' << ans << '\\n'; return 0; }","title":"4119"},{"location":"nr/4119/#4119","text":"\u9898\u76ee","title":"4119 \u64a4\u9000"},{"location":"nr/4119/#fineartzs-solution-star","text":"/* \u64a4\u9000 */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 20000; int n, A, B, C; int head[MAXN + 5] = {0}, ed[MAXN + 5] = {0}, nxt[MAXN + 5] = {0}, len[MAXN + 5] = {0}; int cnt = 0; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nn[MAXN + 5] = {0}, l[MAXN + 5] = {0}; int m = 0; int dist[MAXN + 5] = {0}, depth[MAXN + 5] = {0}, fa[MAXN + 5][20] = {0}; inline void addEdge(int u, int v, int w){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; len[cnt] = w; } inline void addedge(int u, int v, int w){ ++m; nn[m] = h[u]; e[m] = v; h[u] = m; l[m] = w; } void calcDist(int x){ int q[MAXN + 5]; bool b[MAXN + 5]= {0}; int front = 0, rear = 0; q[rear++] = x; dist[x] = 0; depth[x] = 1; b[x] = true; while (front != rear){ int now = q[front]; ++front; for (int i = head[now]; i != 0; i = nxt[i]){ int next = ed[i]; if (!b[next]){ b[next] = true; addedge(now, next, len[i]); fa[next][0] = now; depth[next] = depth[now] + 1; dist[next] = dist[now] + len[i]; q[rear++] = next; } } } } inline int lca(int p, int q){ if (depth[p] > depth[q]){ int t = p; p = q; q = t; } int def = depth[q] - depth[p]; for (int i = 0; (1 << i) <= def; ++i){ if ((1 << i) & def) q = fa[q][i]; } if (p != q){ for (int i = (int)log2(n); i >= 0; --i){ if (fa[p][i] != fa[q][i]){ p = fa[p][i]; q = fa[q][i]; } } p = fa[p][0]; } return p; } inline int dis(int p, int q){ int x = lca(p, q); return dist[p] + dist[q] - 2 * dist[x]; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> A >> B >> C; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } calcDist(1); for (int j = 1; (1 << j) <= n; ++j){ for (int i = 1; i <= n; ++i) fa[i][j] = fa[fa[i][j - 1]][j - 1]; } int ans = 2147483647, ansi = 0; for (int i = 1; i <= n; ++i){ int d = dis(i, A) + dis(i, B) + dis(i, C); if (ans > d){ ans = d; ansi = i; } } cout << ansi << '\\n' << ans << '\\n'; return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4123/","text":"4123 String \u9898\u76ee Description \u7ed9\u5b9a\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32s\u3002\u6709m\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u7ed9\u5b9a3\u4e2a\u53c2\u6570(l, r, x)\u3002 \u5982\u679cx=1\uff0c\u5c06s[l]~s[r]\u5347\u5e8f\u6392\u5e8f\uff1b \u5982\u679cx=0\uff0c\u5c06s[l]~s[r]\u964d\u5e8f\u6392\u5e8f\u3002 \u73b0\u5728\u9700\u8981\u4f60\u6c42\u51fa\u6700\u7ec8\u5e8f\u5217\u3002 Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570n, m\u3002 \u7b2c\u4e8c\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32s\u3002 \u63a5\u4e0b\u6765m\u884c\u6bcf\u884c\u4e09\u4e2a\u7531\u7a7a\u683c\u9694\u5f00\u7684\u6574\u6570x, l, r\u3002 Output Format \u4e00\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u6700\u7ec8\u5e8f\u5217\u3002 Sample Input 5 2 cabcd 1 3 1 3 5 0 Sample Output abdcc Data Range \u5bf9\u4e8e 40%\u7684\u6570\u636e\uff0cn,m<=1000\u3002 \u5bf9\u4e8e 100%\u7684\u6570\u636e\uff0cn,m<=100000\u3002 FineArtz's solution Star /* String */","title":"4123"},{"location":"nr/4123/#4123-string","text":"\u9898\u76ee","title":"4123 String"},{"location":"nr/4123/#fineartzs-solution-star","text":"/* String */","title":"FineArtz's solution Star"},{"location":"nr/4126/","text":"4126 Spice and Wolf II \u9898\u76ee Description \u8d6b\u841d\u4e0e\u7f57\u4f26\u65af\u6b63\u5728\u7c73\u9686\u5546\u884c\u8fdb\u53e3\u9999\u8f9b\u6599\uff08\u80e1\u6912\uff09\uff0c\u51c6\u5907\u8fd0\u5230\u5e15\u5179\u6b27\u53bb\u5356\u6389\u3002\u4f46\u7c73\u9686\u5546\u884c\u5e97\u5927\u6b3a\u5ba2\uff0c\u5728\u627e\u96f6\u65f6\u5bf9\u4e8e\u4e00\u5d14\u5c3c\u94f6\u5e01\u4ee5\u4e0b\u7684\u9762\u989d\u662f\u4e00\u6982\u4e0d\u627e\u7684\uff0c\u56e0\u6b64\u8d6b\u841d\u5e0c\u671b\u5728\u5546\u884c\u62a5\u4ef7\u65f6\u80fd\u7cbe\u786e\u7684\u7ed9\u51fa\u6240\u9700\u7684\u91d1\u989d\u800c\u65e0\u9700\u627e\u96f6\u3002\u4f46\u662f\u8d6b\u841d\u5e76\u4e0d\u77e5\u9053\u5546\u884c\u7684\u62a5\u4ef7\u4f1a\u662f\u591a\u5c11\uff0c\u56e0\u6b64\u8d6b\u841d\u8ba9\u7f57\u4f26\u65af\u62ff\u51fa\u4e86\u8eab\u4e0a\u6240\u6709\u7684\u91d1\u5e01\u3001\u94f6\u5e01\u548c\u94dc\u5e01\u3002 \u8fd9\u53ef\u662f\u4e2a\u5927\u5de5\u7a0b\u3002\u56e0\u4e3a\u4e2d\u4e16\u7eaa\u65f6\uff0c\u6709\u591a\u4e2a\u56fd\u5bb6\u548c\u5546\u884c\u90fd\u5728\u53d1\u884c\u8d27\u5e01\uff0c\u800c\u4e14\u6c47\u7387\u8fd8\u968f\u7740\u8d27\u5e01\u516c\u4fe1\u529b\u7ecf\u5e38\u53d8\u5316\uff0c\u6bd4\u73b0\u4ee3\u8d27\u5e01\u8fd8\u590d\u6742\u3002\u6bd4\u65b9\u8bf4\uff0c1\u5362\u7c73\u6b27\u91d1\u5e01=24~40\u679a\u5d14\u5c3c\u94f6\u5e01\uff0c1\u5d14\u5c3c\u94f6\u5e01\u53c8\u80fd\u6362\u523020+\u679a\u8def\u5fb7\u94f6\u5e01\uff0c1\u8def\u5fb7\u94f6\u5e01\u53c8\u80fd\u63623\u6258\u91cc\u5c24\u94dc\u5e01\uff08\u4f60\u770b\uff0c1\u5d14\u5c3c\u94f6\u5e01\u80fd\u636260+\u6258\u91cc\u5c24\u94dc\u5e01\uff0c\u4e0d\u7ed9\u627e\u96f6\u5c82\u4e0d\u662f\u5f88\u5751\uff09\u3002\u8fd9\u53ea\u662f\u5176\u4e2d\u7684\u56db\u79cd\u8d27\u5e01\uff0c\u5b9e\u9645\u4e0a\u5f53\u65f6\u540c\u4e00\u4e2a\u533a\u57df\u6d41\u901a\u7684\u8d27\u5e01\u79cd\u7c7b\u751a\u81f3\u80fd\u8fbe\u5230\u51e0\u5341\u79cd\u3002\u6240\u5e78\u7684\u662f\uff0c\u6240\u6709\u7684\u8d27\u5e01\u4ef7\u503c\u90fd\u662f\u6258\u91cc\u5c24\u94dc\u5e01\u7684\u6574\u6570\u500d\uff0c\u56e0\u6b64\u6240\u6709\u7684\u91d1\u989d\u90fd\u53ef\u4ee5\u7528\u4e00\u4e2a\u6574\u6570\u8868\u793a\u3002 \u4e3a\u4e86\u5c3d\u91cf\u8282\u7701\u627e\u96f6\u7684\u94b1\u6765\u4e70\u82f9\u679c\uff0c\u8d6b\u841d\u5e0c\u671b\u80fd\u7b97\u51fa\u7f57\u4f26\u65af\u80fd\u7cbe\u786e\u652f\u4ed8\u7684\u91d1\u989d\u6709\u591a\u5c11\u79cd\u3002\u4f60\u80fd\u5e2e\u5e2e\u5979\u5417\uff1f Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570\\(T\\)\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002 \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u4e3a\u4e24\u884c\u3002 \u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6b63\u6574\u6570\\(N, M\\)\uff0c\u5176\u4e2d\\(N\\)\u4ee3\u8868\u603b\u5171\u6709\u591a\u5c11\u79cd\u94b1\u5e01\uff0c\u800c\\(M\\)\u5219\u4ee3\u8868\u8d6b\u841d\u9884\u671f\u8d2d\u4e70\u80e1\u6912\u7684\u603b\u82b1\u8d39\u4e0d\u4f1a\u8d85\u8fc7\\(M\\)\u679a\u6258\u91cc\u5c24\u94dc\u5e01\uff0c\u56e0\u6b64\u5979\u53ea\u9700\u8981\u77e5\u9053\\(M\\)\u53ca\u4ee5\u5185\u7684\u91d1\u989d\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u7cbe\u786e\u652f\u4ed8\u3002 \u7b2c\u4e8c\u884c\u4e3a\\(2N\\)\u4e2a\u6b63\u6574\u6570\uff0c\u683c\u5f0f\u4e3a\\(A_1, A_2, ..., A_N, C_1, C_2, ..., C_N\\)\u3002\u5176\u4e2d\\(A_i\\)\u8868\u793a\u7b2c\\(i\\)\u79cd\u94b1\u5e01\u76f8\u5f53\u4e8e\u591a\u5c11\u679a\u6258\u91cc\u5c24\u94dc\u5e01\uff0c\\(C_i\\)\u8868\u793a\u7b2c\\(i\\)\u79cd\u94b1\u5e01\u6709\u591a\u5c11\u679a\u3002 Output Format \u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u5bf9\u5e94\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868\\(M\\)\u679a\u6258\u91cc\u5c24\u94dc\u5e01\u53ca\u4ee5\u5185\u7684\u91d1\u989d\u6709\u591a\u5c11\u79cd\u53ef\u4ee5\u7cbe\u786e\u652f\u4ed8\u3002 Sample Input 2 3 10 1 2 4 2 1 1 2 5 1 4 2 1 Sample Output 8 4 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(sum(C_i) \\le 20\\)\u3002 \u5bf9\u4e8e\\(60\\%\\)\u7684\u6570\u636e\uff0c\\(sum(C_i) \\le 100\\)\u3002 \u5bf9\u4e8e\u989d\u5916\\(20\\%\\)\u7684\u6570\u636e\uff0c\u7f57\u4f26\u65af\u8d85\u7ea7\u6709\u94b1\uff0c\u4ee5\u81f3\u4e8e\u5bf9\u4e8e\u4efb\u610f\u7684\\(i\\)\u90fd\u6709\\(A_i * C_i \\ge M\\)\u3002\u53cb\u60c5\u63d0\u793a1\uff1a\u7f57\u4f26\u65af\u4e0d\u4e00\u5b9a\u6709\u6258\u91cc\u5c24\u94dc\u5e01\uff0c\u8bf7\u4e0d\u8981\u6253\u8f93\u51fa\\(M\\)\u7684\u4e3b\u610f\u3002\u53cb\u60c5\u63d0\u793a2\uff1a\u6570\u636e\u5e76\u4e0d\u4fdd\u8bc1\\(A_i * C_i < 2^{31} \\approx 2 * 10^9\\)\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(T \\le 5\\)\uff0c\\(N \\le 100\\)\uff0c\\(M,A_i,C_i \\le 100000\\)\u3002 \u53cb\u60c5\u63d0\u793a3\uff1a\u8fd9\u6b21\u7684\u6b63\u89e3\u8fd8\u662f30\u884c\u3002\u5f53\u713660\u5206\u4e5f\u662f30\u884c\u300280\u5206\u7ea6\u662f30+10\u884c\u3002\u53c8\u662f\u719f\u6089\u768430\u5206\u9a97\u5206\u6700\u957f\u7cfb\u5217\u3002 WashSwang's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,n,m,dp[100001],k,ans; long long a[101],c[101]; void zeroone(int w) { for (int i=m;i>=w;--i) if (dp[i-w]) dp[i]=1; } void complete(int w) { for (int i=w;i<=m;++i) if (dp[i-w]) dp[i]=1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { ans=0; scanf(\"%d%d\",&n,&m); memset(dp,0,sizeof(dp)); dp[0]=1; for (int j=0;j<n;++j) scanf(\"%lld\",&a[j]); for (int j=0;j<n;++j) { scanf(\"%lld\",&c[j]); if (a[j]*c[j]<m) { k=1; while (k<c[j]) { zeroone(k*a[j]); c[j]-=k; k*=2; } zeroone(c[j]*a[j]); } else complete(a[j]); } for (int j=1;j<=m;++j) if (dp[j]) ++ans; printf(\"%d\\n\",ans); } return 0; }","title":"4126"},{"location":"nr/4126/#4126-spice-and-wolf-ii","text":"\u9898\u76ee","title":"4126 Spice and Wolf II"},{"location":"nr/4126/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,n,m,dp[100001],k,ans; long long a[101],c[101]; void zeroone(int w) { for (int i=m;i>=w;--i) if (dp[i-w]) dp[i]=1; } void complete(int w) { for (int i=w;i<=m;++i) if (dp[i-w]) dp[i]=1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { ans=0; scanf(\"%d%d\",&n,&m); memset(dp,0,sizeof(dp)); dp[0]=1; for (int j=0;j<n;++j) scanf(\"%lld\",&a[j]); for (int j=0;j<n;++j) { scanf(\"%lld\",&c[j]); if (a[j]*c[j]<m) { k=1; while (k<c[j]) { zeroone(k*a[j]); c[j]-=k; k*=2; } zeroone(c[j]*a[j]); } else complete(a[j]); } for (int j=1;j<=m;++j) if (dp[j]) ++ans; printf(\"%d\\n\",ans); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4130/","text":"4130 This is a NP-Hard Problem \u9898\u76ee Description \u6700\u8fd1dhh\u5e26\u7740xyy\u5bf9NP-Hard\u95ee\u9898\u8fdb\u884c\u4e86\u4e00\u4e9b\u7814\u7a76\uff0c\u4ed6\u4eec\u53d1\u73b0\u6700\u5c0f\u70b9\u8986\u76d6\u95ee\u9898\u7279\u522b\u6709\u8da3\u3002 \u6240\u8c13\u70b9\u8986\u76d6\uff0c\u5373\u7ed9\u4f60\u4e00\u5f20\u56fe\\(G(V,E)\\)\u548c\u4ed6\u7684\u4e00\u4e2a\u70b9\u96c6\\(A\\)\u3002\u5982\u679c\u5bf9\u4e8e\\(G\\)\u4e2d\u7684\u4efb\u4f55\u4e00\u6761\u8fb9\\(u,v\\)\uff0c\u90fd\u8981\u4e48\u6709\\(u \\in A\\)\u6216\u8005\\(v \\in A\\)\uff0c\u5219\\(A\\)\u79f0\u4e3a\\(G\\)\u7684\u4e00\u4e2a\u70b9\u8986\u76d6\u3002 \u7531\u4e8edhh\u6253\u4e52\u4e53\u7403\u592a\u817b\u5bb3\u4e86\uff0c\u6240\u4ee5\u4ed6\u8d62\u5f97\u4e86\u4e00\u5f20\\(N\\)\u4e2a\u70b9\\(M\\)\u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u73b0\u5728\u4ed6\u51c6\u5907\u628a\u56fe\u4e2d\u7684\u70b9\u5206\u6210 \u4e0d\u76f8\u4ea4 \u7684\u4e24\u4efd\uff0c\u62ff\u51fa\u6765\u4e00\u4efd\u9001\u7ed9xyy\u3002xyy\u6b23\u7136\u63a5\u53d7\uff0c\u4f46\u4ed6\u5e0c\u671b\u4ed6\u6240\u5f97\u5230\u70b9\u662f\u539f\u56fe\u4e2d\u7684\u4e00\u4e2a\u70b9\u8986\u76d6\uff1bdhh\u540c\u65f6\u4e5f\u5e0c\u671b\u4ed6\u7559\u4e0b\u7684\u90a3\u4efd\u662f\u539f\u56fe\u4e2d\u4e00\u4e2a\u70b9\u8986\u76d6\u3002 \u73b0\u5728\u4ed6\u4eec\u60f3\u77e5\u9053\u662f\u5426\u5b58\u5728\u8fd9\u6837\u4e00\u79cd\u5206\u6cd5\uff0c\u80fd\u591f\u540c\u65f6\u6ee1\u8db3\u4e24\u4e2a\u4eba\u7684\u8981\u6c42\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\\(T\\)\uff0c\u8868\u793a\u6570\u636e\u7ec4\u6570\u3002 \u5bf9\u4e8e\u6bcf\u7ec4\u6570\u636e\uff0c\u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570\\(N\\)\u548c\\(M\\)\uff0c\u610f\u4e49\u5982\u9898\u610f\u3002 \u63a5\u4e0b\u6765\\(M\\)\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6b63\u6574\u6570\\(u,v\\)\uff0c\u8868\u793a\u56fe\u4e2d\u7684\u4e00\u6761\u8fb9\u3002 Output Format \u6bcf\u7ec4\u6570\u636e\u5404\u8f93\u51fa\u4e00\u884c\uff0c\\(1\\)\u8868\u793a\u53ef\u4ee5\u6ee1\u8db3\u4e24\u4eba\u8981\u6c42\uff0c\\(-1\\)\u8868\u793a\u65e0\u6cd5\u6ee1\u8db3\u8981\u6c42\u3002 Sample Input 1 1 4 2 1 2 2 3 Sample Output 1 1 Sample Input 2 1 3 3 1 2 2 3 1 3 Sample Output 2 -1 Data Range \u5bf9\u4e8e\\(30 \\%\\)\u7684\u6570\u636e\uff0c\\(N \\le10 \\)\uff0c\\(M \\le 20\\)\u3002 \u5bf9\u4e8e\\(60 \\%\\)\u7684\u6570\u636e\uff0c\\(N \\le1000 \\)\uff0c\\(M \\le 2000\\)\u3002 \u5bf9\u4e8e\\(100 \\%\\)\u7684\u6570\u636e\uff0c\\(2 \\le N \\le 100000\\)\uff0c\\(0 \\le M \\le 200000\\)\uff0c\\(T = 10\\)\u3002\u70b9\u7684\u7f16\u53f7\u4ee5\\(1\\)\u5f00\u59cb\u3002 Hint \u82e5\u679c\u9047\u5230\u83ab\u540d\u5176\u5999tle\uff0c\u8bf7\u5173\u95ed\u540c\u6b65\u6216\u6539\u7528scanf\u8bfb\u5165\u3002 FineArtz's solution Star /* This is a NP-Hard Problem */ #include <cstdio> #include <cstring> using namespace std; int n, m; int be[100005], head[100005], nxt[400005], edg[400005], cnt; inline void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; edg[cnt] = v; head[u] = cnt; } bool check(int st){ int q[100005] = {0}; int front = 0, rear = 0; be[st] = 1; q[rear++] = st; while (front != rear){ int now = q[front++]; for (int i = head[now]; i; i = nxt[i]){ if (be[edg[i]] == 0){ int v = edg[i]; be[v] = (be[now] == 1 ? -1 : 1); q[rear++] = v; } else if (be[edg[i]] != -be[now]) return false; } } return true; } int main(){ int t; scanf(\"%d\", &t); while (t--){ scanf(\"%d%d\", &n, &m); memset(be, 0, sizeof(be)); memset(head, 0, sizeof(head)); memset(nxt, 0, sizeof(nxt)); memset(edg, 0, sizeof(edg)); cnt = 0; for (int i = 1; i <= m; ++i){ int u, v; scanf(\"%d%d\", &u, &v); addEdge(u, v); addEdge(v, u); } bool flag = true; for (int i = 1; i <= n; ++i){ if (head[i] != 0 && be[i] == 0){ if (!check(i)){ flag = false; printf(\"-1\\n\"); break; } } } if (flag) printf(\"1\\n\"); } return 0; } WashSwang's solution Star #include <cstdio> #include <cstring> using namespace std; int ne[400010],to[400010],last[400010],num,k[400010],tail,head,ans; int t,m,n,u,v; void add(int u,int v) { ne[++num]=last[u]; to[num]=v; last[u]=num; } int dfs(int x) { for (int i=last[x];i!=0;i=ne[i]) { if (!k[to[i]]) { k[to[i]]=-k[x]; if (!dfs(to[i])) return 0; } else if (k[to[i]]+k[x]!=0) return 0; } return 1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d%d\", &n, &m); num=0; memset(last, 0, sizeof(last)); memset(k, 0, sizeof(k)); for (int j = 0; j < m; ++j) { scanf(\"%d%d\", &u, &v); add(u,v); add(v,u); } ans=1; for (int j=1;j<=n;++j) if (k[j]==0){ k[j]=1; if (!dfs(j)) { ans=-1; break; } } printf(\"%d\\n\",ans); } return 0; }","title":"4130"},{"location":"nr/4130/#4130-this-is-a-np-hard-problem","text":"\u9898\u76ee","title":"4130 This is a NP-Hard Problem"},{"location":"nr/4130/#fineartzs-solution-star","text":"/* This is a NP-Hard Problem */ #include <cstdio> #include <cstring> using namespace std; int n, m; int be[100005], head[100005], nxt[400005], edg[400005], cnt; inline void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; edg[cnt] = v; head[u] = cnt; } bool check(int st){ int q[100005] = {0}; int front = 0, rear = 0; be[st] = 1; q[rear++] = st; while (front != rear){ int now = q[front++]; for (int i = head[now]; i; i = nxt[i]){ if (be[edg[i]] == 0){ int v = edg[i]; be[v] = (be[now] == 1 ? -1 : 1); q[rear++] = v; } else if (be[edg[i]] != -be[now]) return false; } } return true; } int main(){ int t; scanf(\"%d\", &t); while (t--){ scanf(\"%d%d\", &n, &m); memset(be, 0, sizeof(be)); memset(head, 0, sizeof(head)); memset(nxt, 0, sizeof(nxt)); memset(edg, 0, sizeof(edg)); cnt = 0; for (int i = 1; i <= m; ++i){ int u, v; scanf(\"%d%d\", &u, &v); addEdge(u, v); addEdge(v, u); } bool flag = true; for (int i = 1; i <= n; ++i){ if (head[i] != 0 && be[i] == 0){ if (!check(i)){ flag = false; printf(\"-1\\n\"); break; } } } if (flag) printf(\"1\\n\"); } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4130/#washswangs-solution-star","text":"#include <cstdio> #include <cstring> using namespace std; int ne[400010],to[400010],last[400010],num,k[400010],tail,head,ans; int t,m,n,u,v; void add(int u,int v) { ne[++num]=last[u]; to[num]=v; last[u]=num; } int dfs(int x) { for (int i=last[x];i!=0;i=ne[i]) { if (!k[to[i]]) { k[to[i]]=-k[x]; if (!dfs(to[i])) return 0; } else if (k[to[i]]+k[x]!=0) return 0; } return 1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d%d\", &n, &m); num=0; memset(last, 0, sizeof(last)); memset(k, 0, sizeof(k)); for (int j = 0; j < m; ++j) { scanf(\"%d%d\", &u, &v); add(u,v); add(v,u); } ans=1; for (int j=1;j<=n;++j) if (k[j]==0){ k[j]=1; if (!dfs(j)) { ans=-1; break; } } printf(\"%d\\n\",ans); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4131/","text":"4131 Welcome to the Aperture Science \u9898\u76ee Description \u4eca\u5929\u4e5f\u662f\u548c\u5e73\u7684\u4e00\u5929\uff0c\u96ea\u513f\u4f9d\u65e7\u88ab\u56f0\u5728\u5149\u5708\u79d1\u6280\u5b9e\u9a8c\u5ba4\u4e2d\uff0c\u7528\u5979\u624b\u4e2d\u7684\u4f20\u9001\u95e8\u67aa\u548cGLaDOS\u4e00\u8d77\u505a\u7740\u65e0\u5c3d\u7684\u5b9e\u9a8c\u3002\u96ea\u513f\u521a\u521a\u53c8\u8fdb\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u5b9e\u9a8c\u623f\u95f4\u3002\u5979\u7684\u53f3\u624b\u8fb9\u662f\u4e00\u4e2a\u91cd\u91cf\u540c\u4f34\u65b9\u5757\u751f\u6210\u5668\uff0c\u521a\u5f00\u59cb\u7684\u65f6\u5019\u5929\u82b1\u677f\u4e0a\u7684\u751f\u6210\u5668\u4f1a\u5411\u4e0b\u5f39\u51fa\u4e00\u4e2a\u540c\u4f34\u65b9\u5757\u3002\u800c\u96ea\u513f\u7684\u524d\u65b9\u662f\u4e00\u4e2a\u65e0\u6cd5\u8fdb\u5165\u7684\u957f\u6761\u5f62\u5b9e\u9a8c\u623f\u95f4\uff0c\u5730\u4e0a\u653e\u7740\u6392\u6210\u4e00\u6392\u7684n\u4e2a\u5411\u53f3\u5f39\u5c04\u7684\u5f39\u7c27\u677f\uff0c\u6700\u53f3\u8fb9\u662f\u4e00\u4e2a\u711a\u5316\u7089\u3002\u6bcf\u4e2a\u5f39\u7c27\u677f\u540e\u9762\u8fd8\u8d34\u5fc3\u7684\u6807\u8bb0\u4e86\u8be5\u5f39\u7c27\u677f\u7684\u5411\u53f3\u5f39\u5c04\u8ddd\u79bb\uff08\u5f39\u5c04\u8ddd\u79bb\u7684\u5355\u4f4d\u957f\u5ea6\u4e3a\u5f39\u7c27\u677f\u7684\u5bbd\u5ea6\uff0c\u5fc5\u7136\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u6b64\u5916\uff0c\u4f17\u6240\u5468\u77e5\u7684\uff0c\u5149\u5708\u79d1\u6280\u7684\u5f39\u7c27\u677f\u5f39\u5c04\u7684\u8ddd\u79bb\uff0c\u4e0e\u7269\u4f53\u7684\u91cd\u91cf\u3001\u5165\u5c04\u89d2\u5ea6\u4e0e\u901f\u5ea6\u90fd\u662f\u65e0\u5173\u7684\uff09\u3002\u800c\u5176\u4e2d\u67d0\u51e0\u4e2a\u5f39\u7c27\u677f\u4e0a\u65b9\u5bf9\u5e94\u7684\u5929\u82b1\u677f\u4e0a\uff0c\u6d82\u4e86\u53ef\u4ee5\u653e\u7f6e\u7a7a\u95f4\u4f20\u9001\u95e8\u7684\u767d\u8272\u51dd\u80f6\uff0c\u96ea\u513f\u624b\u4e2d\u7684\u4f20\u9001\u95e8\u67aa\u53ef\u4ee5\u9009\u62e9\u51fb\u4e2d\u5176\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\u6765\u5f00\u542f\u4e00\u4e2a\u4f20\u9001\u95e8\u3002\u96ea\u513f\u7684\u5de6\u624b\u8fb9\u662f\u8be5\u5b9e\u9a8c\u623f\u95f4\u7684\u51fa\u53e3\uff0c\u5927\u95e8\u4e0a\u65b9\u6709\u4e00\u4e2a\u8ba1\u6570\u5668\u8fde\u63a5\u7740\u6240\u6709\u7684\u5f39\u7c27\u677f\uff0c\u8ba1\u6570\u5668\u7684\u521d\u59cb\u503c\u662fn\u3002 \u96ea\u513f\u5f88\u5feb\u89e3\u5f00\u4e86\u8fd9\u4e2a\u5b9e\u9a8c\u5ba4\u7684\u8c1c\u9898\u3002\u5979\u9700\u8981\u5728\u540c\u4f34\u65b9\u5757\u751f\u6210\u5668\u7684\u4e0b\u65b9\u5730\u677f\u4e0a\u5f00\u4e00\u4e2a\u4f20\u9001\u95e8\uff0c\u5e76\u5728\u5f39\u7c27\u677f\u623f\u95f4\u4e2d\u7684\u5929\u82b1\u677f\u4e0a\u9009\u62e9\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u542f\u4f20\u9001\u95e8\u7684\u53e6\u4e00\u7aef\u3002\u8fd9\u6837\u540c\u4f34\u65b9\u5757\u4f1a\u6389\u8fdb\u4f20\u9001\u95e8\uff0c\u4ece\u5929\u82b1\u677f\u4e0a\u7ad6\u76f4\u843d\u4e0b\uff0c\u7136\u540e\u5728n\u5757\u5f39\u7c27\u677f\u4e0a\u5f39\u5440\u5f39\uff0c\u6700\u540e\u6389\u8fdb\u6700\u53f3\u8fb9\u7684\u711a\u5316\u7089\u3002\u540c\u4f34\u65b9\u5757\u6bcf\u5728\u5f39\u7c27\u677f\u4e0a\u5f39\u4e00\u4e0b\uff0c\u51fa\u53e3\u5927\u95e8\u4e0a\u65b9\u7684\u8ba1\u6570\u5668\u5c31\u4f1a-1\uff1b\u5f53\u8ba1\u6570\u5668\u7684\u6570\u503cmod n\u521a\u597d\u7b49\u4e8e0\u65f6\uff0c\u51fa\u53e3\u5c31\u4f1a\u5f00\u542f\u3002\u5f53\u7136\uff0c\u53ea\u5f39\u4e00\u6b21\u8ba1\u6570\u5668\u662f\u4e0d\u4f1a\u521a\u597dmod n\u4e3a0\u7684\uff0c\u4e3a\u4e86\u4f7f\u5f97\u8ba1\u6570\u5668\u7684\u503c\u518d\u6b21\u4e3a0\uff0c\u96ea\u513f\u53ef\u80fd\u9700\u8981\u4e0d\u65ad\u8c03\u6574\u5f39\u7c27\u677f\u4e0a\u65b9\u4f20\u9001\u95e8\u7684\u4f4d\u7f6e\uff0c\u7531\u4e8e\u6bcf\u4e2a\u540c\u4f34\u65b9\u5757\u88ab\u711a\u5316\u7089\u711a\u6bc1\u65f6\uff0c\u751f\u6210\u5668\u5c31\u4f1a\u5f39\u51fa\u4e00\u4e2a\u65b0\u7684\u540c\u4f34\u65b9\u5757\uff0c\u6240\u4ee5\u5979\u6709\u65e0\u9650\u6b21\u53cd\u590d\u5c1d\u8bd5\u7684\u673a\u4f1a\u3002 \u96ea\u513f\u5fc3\u60f3\uff0c\u8fd9\u9053\u9898\u76ee\u5b9e\u5728easy\uff0c\u56e0\u4e3a\u5f39\u7c27\u677f\u7684\u5f39\u5c04\u8ddd\u79bb\u662f\u56fa\u5b9a\u7684\uff0c\u53ea\u9700\u8981\u4ece\u53f3\u5f80\u5de6\u82b1\u8d39O(n)\u7684\u65f6\u95f4\uff0c\u5c31\u80fd\u6c42\u51fa\u4efb\u4f55\u4e00\u4e2a\u5f39\u7c27\u677f\u5f39\u5230\u6700\u53f3\u8fb9\u9700\u8981\u591a\u5c11\u6b21\uff0c\u5269\u4e0b\u7684\u4e8b\u60c5\u96ea\u513f\u53ef\u4ee5\u4eba\u8111\u5904\u7406\u597d\u3002\u7136\u800cGLaDOS\u770b\u7a7f\u4e86\u96ea\u513f\u7684\u60f3\u6cd5\uff0c\u51b3\u5b9a\u52a0\u5927\u5b9e\u9a8c\u5ba4\u96be\u5ea6\uff0c\u56e0\u6b64GLaDOS\u4f1a\u65f6\u4e0d\u65f6\u7684\u4fee\u6539\u67d0\u4e00\u4e2a\u5f39\u7c27\u677f\u7684\u5f39\u5c04\u8ddd\u79bb\u3002\u8fd9\u4e0b\u96ea\u513f\u50bb\u773c\u4e86\uff0c\u5979\u5fc3\u60f3\uff1a\u5982\u679c\u6211\u53ea\u7ba1\u4fdd\u5b58\u6bcf\u4e2a\u5f39\u7c27\u677f\u7684\u5f39\u5c04\u8ddd\u79bb\uff0c\u90a3\u4e48\u4fee\u6539\u662fO(1)\u7684\uff0c\u8be2\u95ee\u662fO(n)\u7684\uff1b\u4f46\u5982\u679c\u6211\u9009\u62e9\u7ef4\u62a4\u6bcf\u4e2a\u5f39\u7c27\u677f\u5f39\u5230\u6700\u53f3\u8fb9\u9700\u8981\u591a\u5c11\u6b21\uff0c\u90a3\u4e48\u8be2\u95ee\u662fO(1)\u7684\uff0c\u4fee\u6539\u5374\u662fO(n)\u7684\u3002\u4e0d\u7ba1\u600e\u4e48\u5199\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(nm)\uff0c\u6839\u672c\u8fc7\u4e0d\u53bb\u554a\uff01 \u6b64\u65f6\u5728\u65c1\u8fb9\u9ed8\u9ed8\u770b\u4e86\u5f88\u4e45\u7684\u4f60\u8bf4\u4e86\u4e00\u53e5\u8bdd\uff1a\u201c\u8fd9\u4e0d\u662f\u88f8\u7684\u52a8\u6001\u6811Link-Cut-Tree\u561b\uff0c\u6c34\u9898\u5566\uff0c10\u5206\u949f\u5c31\u5199\u5b8c\u4e86\u3002\u201d \u96ea\u513f\u7684\u5185\u5fc3\u662f\u5d29\u6e83\u7684\uff1a\u8fc7\u4e00\u4e2a\u5b9e\u9a8c\u5ba4\u8981\u5199LCT\uff0c\u4f60\u5c31\u4e0d\u80fd\u8003\u8651\u4e00\u4e0b\u73a9\u5bb6\u4eec\u5bf9\u6e38\u620f\u96be\u5ea6\u7684\u63a5\u53d7\u80fd\u529b\u5417\u3002 \u4e8e\u662f\u4f60\u8bf4\uff1a\u201c\u5509\uff0c\u6ca1\u529e\u6cd5\uff0c\u6211\u7528\u5206\u5757\u603b\u884c\u4e86\u5427\uff0cO(sqrt(n)m)\u7684\u3002\u201d \u96ea\u513f\u60f3\u4e86\u60f3\u89c9\u5f97\u53ef\u4ee5\uff0c\u4e8e\u662f\u5979\u628a\u5b9e\u9a8c\u5ba4\u4efb\u52a1\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u4f60\u53ea\u9700\u8981\u8d1f\u8d23\u53cd\u590d\u56de\u7b54\u5979\u7684\u8be2\u95ee\uff1a\u4ece\u67d0\u4e2a\u70b9\u6295\u4e0b\u540c\u4f34\u65b9\u5757\u7684\u8bdd\uff0c\u8ba1\u6570\u5668\u4f1a\u51cf\u5c11\u591a\u5c11\u3002\u5269\u4e0b\u7684\u4efb\u52a1\u96ea\u513f\u4f1a\u53bb\u5b8c\u6210\u3002\u5f53\u7136\uff0c\u4f60\u4e5f\u9700\u8981\u5bf9\u4ed8GLaDOS\u65f6\u4e0d\u65f6\u5bf9\u67d0\u4e2a\u5f39\u7c27\u677f\u5f39\u5c04\u8ddd\u79bb\u7684\u4fee\u6539\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8868\u793a\u5730\u4e0a\u6709n\u5757\u5f39\u7c27\u677f\u3002\u7531\u4e8e\u5f39\u7c27\u677f\u7684\u7f16\u53f7\u4ece0\u5f00\u59cb\uff0c\u6240\u4ee5\u6709\u7b2c0\u5757\u5f39\u7c27\u677f\u3002 \u63a5\u4e0b\u6765\u4e00\u884cn\u4e2a\u6b63\u6574\u6570ki\uff0c\u8868\u793a\u7b2ci\u5757\u5f39\u7c27\u677f\u7684\u5f39\u5c04\u8ddd\u79bb\u3002\u6bd4\u5982\u5f39\u5c04\u8ddd\u79bb\u4e3a1\u7684\u8bdd\uff0c\u843d\u5230\u8fd9\u5757\u5f39\u7c27\u677f\u4e0a\u7684\u540c\u4f34\u65b9\u5757\u5c31\u4f1a\u88ab\u5f39\u5c04\u5230\u4e0b\u4e00\u5757\u5f39\u7c27\u677f\u4e0a\uff0c\u4f9d\u6b64\u7c7b\u63a8\u3002 \u63a5\u4e0b\u6765\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570m\uff0c\u8868\u793a\u6709\u603b\u5171m\u4e2a\u7684\u8be2\u95ee\u548c\u4fee\u6539\u3002 \u63a5\u4e0b\u6765m\u884c\u3002\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6b63\u6574\u6570\u4e3aa\u3002\u5982\u679ca=1\uff0c\u5219\u8fd9\u4e00\u884c\u603b\u5171\u4f1a\u6709\u4e24\u4e2a\u81ea\u7136\u6570a\u3001b\uff0c\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u8be2\u95ee\uff0c\u96ea\u513f\u8be2\u95ee\u540c\u4f34\u65b9\u5757\u843d\u5230\u7b2cb\u5757\u5f39\u7c27\u677f\u4e0a\u65f6\u4f1a\u88ab\u5f39\u5c04\u591a\u5c11\u6b21\u3002\u5982\u679ca=2\uff0c\u5219\u8fd9\u4e00\u884c\u603b\u5171\u4f1a\u6709\u4e09\u4e2a\u81ea\u7136\u6570a\u3001b\u3001c\uff0c\u4ee3\u8868\u8fd9\u662f\u4e00\u4e2a\u4fee\u6539\uff0cGLaDOS\u5c06\u7b2cb\u5757\u5f39\u7c27\u677f\u7684\u5f39\u5c04\u8ddd\u79bb\u4fee\u6539\u6210\u4e86c\uff0cc\u5927\u4e8e0\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2aa=1\u7684\u60c5\u51b5\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4ee3\u8868\u5bf9\u96ea\u513f\u8be2\u95ee\u7684\u56de\u7b54\u3002 Sample Input 4 1 2 1 1 3 1 1 2 1 1 1 1 Sample Output 2 3 \u6837\u4f8b\u8bf4\u660e\uff1a\u518d\u6b21\u63d0\u793a\uff0c\u5f39\u7c27\u677f\u7684\u7f16\u53f7\u662f\u4ece0\u5f00\u59cb\u7684\u3002 Data Range \u5bf9\u4e8e\\(30\\%\\)\u7684\u6570\u636e\uff0c\\(n \\le 1000, m \\le 1000\\)\u3002 \u5bf9\u4e8e\u989d\u5916\\(20\\%\\)\u7684\u6570\u636e\uff0c\\(a=1\\)\u51fa\u73b0\u7684\u6b21\u6570\u5c0f\u4e8e100\u3002 \u5bf9\u4e8e\u989d\u5916\\(20\\%\\)\u7684\u6570\u636e\uff0c\\(a=2\\)\u51fa\u73b0\u7684\u6b21\u6570\u5c0f\u4e8e100\u3002 \u5bf9\u4e8e\\(100\\%\\)\u7684\u6570\u636e\uff0c\\(n \\le 500000, m \\le 100000\\)\u3002 FineArtz's solution Star /* Welcome to the Aperture Science */ #include <cstdio> #include <cstring> #include <cmath> using namespace std; int n, m, N, M; int a[500005], b[710][1400], c[710][1400]; inline int query(int x){ int p = x / N, q = x - p * N; int ret = 0; for (int i = p; i < M; ++i){ ret += c[i][q]; q = b[i][q]; } if (n % M != 0){ ret += c[M][q]; } return ret; } inline void update(int x, int y){ int p = x / N, q = x - p * N; a[x] = y; int st = p * N, ed = st + N; if (p != M){ for (int j = q; j >= 0; --j){ if (j + a[st + j] >= N){ b[p][j] = j + a[st + j] - N; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } else{ for (int j = q; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[p][j] = j + a[st + j] - n + st; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } } int main(){ scanf(\"%d\", &n); for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]); N = sqrt(n); M = n / N; for (int i = 0; i < M; ++i){ int st = i * N, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= N){ b[i][j] = j + a[st + j] - N; c[i][j] = 1; } else{ b[i][j] = b[i][j + a[st + j]]; c[i][j] = c[i][j + a[st + j]] + 1; } } } if (n % M != 0){ int st = N * M, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[M][j] = j + a[st + j] - n + st; c[M][j] = 1; } else{ b[M][j] = b[M][j + a[st + j]]; c[M][j] = c[M][j + a[st + j]] + 1; } } } scanf(\"%d\", &m); while (m--){ int op, u, v; scanf(\"%d\", &op); if (op == 1){ scanf(\"%d\", &u); printf(\"%d\\n\", query(u)); } else{ scanf(\"%d%d\", &u, &v); update(u, v); } } return 0; } WashSwang's solution Star #include <cstdio> #include <cmath> using namespace std; int a,b,k[510000],jump[510000],to[510000],n,m,p,q,ans[100001],s,l[510000];//jump\u4ee3\u8868\u8df3\u51fa\u5757\u9700\u8981\u7684\u6b21\u6570 to\u4ee3\u8868\u8df3\u51fa\u5757\u4ee5\u540e\u4e0b\u4e00\u4e2a\u5757\u7684\u5750\u6807 inline void upgrade(int x) { if (k[x]+x>=l[x]+b||k[x]+x>=n) { jump[x] = 1; to[x]=k[x]+x; } else{ jump[x]=jump[k[x]+x]+1; to[x]=to[k[x]+x]; } } int main() { scanf(\"%d\",&n); b=int(sqrt(n));//\u5757\u7684\u5927\u5c0f for (int i=0;i<n;++i) { scanf(\"%d\", &k[i]); if (p==b) {p=0; q+=b;} l[i]=q; p++; } for (int i=n-1;i>=0;--i) upgrade(i); scanf(\"%d\",&m); for (int i=0;i<m;++i) { scanf(\"%d\",&a); if (a==1) { scanf(\"%d\",&p); for (int j=p;j<n;j=to[j]) ans[s]+=jump[j]; s++; } if (a==2) { scanf(\"%d%d\",&p,&q); k[p]=q; for (int j=p;j>=l[p];j--) upgrade(j); } } for (int i=0;i<s;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4131"},{"location":"nr/4131/#4131-welcome-to-the-aperture-science","text":"\u9898\u76ee","title":"4131 Welcome to the Aperture Science"},{"location":"nr/4131/#fineartzs-solution-star","text":"/* Welcome to the Aperture Science */ #include <cstdio> #include <cstring> #include <cmath> using namespace std; int n, m, N, M; int a[500005], b[710][1400], c[710][1400]; inline int query(int x){ int p = x / N, q = x - p * N; int ret = 0; for (int i = p; i < M; ++i){ ret += c[i][q]; q = b[i][q]; } if (n % M != 0){ ret += c[M][q]; } return ret; } inline void update(int x, int y){ int p = x / N, q = x - p * N; a[x] = y; int st = p * N, ed = st + N; if (p != M){ for (int j = q; j >= 0; --j){ if (j + a[st + j] >= N){ b[p][j] = j + a[st + j] - N; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } else{ for (int j = q; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[p][j] = j + a[st + j] - n + st; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } } int main(){ scanf(\"%d\", &n); for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]); N = sqrt(n); M = n / N; for (int i = 0; i < M; ++i){ int st = i * N, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= N){ b[i][j] = j + a[st + j] - N; c[i][j] = 1; } else{ b[i][j] = b[i][j + a[st + j]]; c[i][j] = c[i][j + a[st + j]] + 1; } } } if (n % M != 0){ int st = N * M, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[M][j] = j + a[st + j] - n + st; c[M][j] = 1; } else{ b[M][j] = b[M][j + a[st + j]]; c[M][j] = c[M][j + a[st + j]] + 1; } } } scanf(\"%d\", &m); while (m--){ int op, u, v; scanf(\"%d\", &op); if (op == 1){ scanf(\"%d\", &u); printf(\"%d\\n\", query(u)); } else{ scanf(\"%d%d\", &u, &v); update(u, v); } } return 0; }","title":"FineArtz's solution Star"},{"location":"nr/4131/#washswangs-solution-star","text":"#include <cstdio> #include <cmath> using namespace std; int a,b,k[510000],jump[510000],to[510000],n,m,p,q,ans[100001],s,l[510000];//jump\u4ee3\u8868\u8df3\u51fa\u5757\u9700\u8981\u7684\u6b21\u6570 to\u4ee3\u8868\u8df3\u51fa\u5757\u4ee5\u540e\u4e0b\u4e00\u4e2a\u5757\u7684\u5750\u6807 inline void upgrade(int x) { if (k[x]+x>=l[x]+b||k[x]+x>=n) { jump[x] = 1; to[x]=k[x]+x; } else{ jump[x]=jump[k[x]+x]+1; to[x]=to[k[x]+x]; } } int main() { scanf(\"%d\",&n); b=int(sqrt(n));//\u5757\u7684\u5927\u5c0f for (int i=0;i<n;++i) { scanf(\"%d\", &k[i]); if (p==b) {p=0; q+=b;} l[i]=q; p++; } for (int i=n-1;i>=0;--i) upgrade(i); scanf(\"%d\",&m); for (int i=0;i<m;++i) { scanf(\"%d\",&a); if (a==1) { scanf(\"%d\",&p); for (int j=p;j<n;j=to[j]) ans[s]+=jump[j]; s++; } if (a==2) { scanf(\"%d%d\",&p,&q); k[p]=q; for (int j=p;j>=l[p];j--) upgrade(j); } } for (int i=0;i<s;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4132/","text":"4132 LCP \u9898\u76ee Description \u5728\u8fdb\u884c\u5b8cNP-Hard\u95ee\u9898\u7814\u7a76\u4e4b\u540e\uff0cdhh\u9a6c\u4e0a\u53c8\u5e26\u7740xyy\u8d70\u8fdb\u4e86\u5b57\u7b26\u4e32\u7684\u4e16\u754c\u3002 dhh\u9996\u5148\u4f20\u6388\u7ed9\u4e86xyy\u4e00\u4e2a\u53eb\u505alcp\u7684\u4e1c\u897f\uff0c\u6240\u8c13lcp\u5373\u4e3a\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002dhh\u7684\u4e52\u4e53\u7403\u8d5b\u5956\u54c1\u9664\u4e86\u4e00\u5f20\u56fe\uff0c\u8fd8\u83b7\u5f97\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4ed6\u51c6\u5907\u7528\u4ed6\u4eec\u6765\u8003\u8003xyy\u5bf9\u4ed6\u6240\u4f20\u6388\u7684lcp\u7684\u638c\u63e1\u7a0b\u5ea6\u3002 xyy\uff1a\u201c\u6211\u80af\u5b9a\u5168\u76d8\u638c\u63e1\u4e86\u3002\u201d dhh\uff1a\u201c\u90a3\u73b0\u5728\u6211\u7ed9\u4f60\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f60\u8981\u7acb\u9a6c\u56de\u7b54\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684lcp\u6709\u591a\u957f\u3002\u201d xyy\uff1a\u201c\u8fd9\u4e5f\u592a\u50bb\u4e86\u3002\u201d dhh\uff1a\u201c\u90a3\u8981\u662f\u6211\u6bcf\u6b21\u8fd8\u53ef\u4ee5\u4fee\u6539\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u67d0\u4e2a\u5b57\u7b26\u5462\uff1f\u201d xyy\uff1a\u201cemmmm\u201d Input Format \u7b2c\u4e00\u884c\u4e24\u4e2a\u6b63\u6574\u6570\\(N,M\\)\uff0c\u8868\u793a\\(A\\)\u4e32\u548c\\(B\\)\u4e32\u7684\u957f\u5ea6\u3002 \u7b2c\u4e8c\u884c\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(N\\)\u7684\u5b57\u7b26\u4e32\\(A\\)\u3002 \u7b2c\u4e09\u884c\u4e00\u4e2a\u957f\u5ea6\u4e3a\\(M\\)\u7684\u5b57\u7b26\u4e32\\(B\\)\u3002 \u63a5\u4e0b\u6765\u4e00\u4e2a\u6b63\u6574\u6570\\(Q\\)\uff0c\u8868\u793adhh\u7684\u4fee\u6539\u4e2a\u6570\u3002 \u63a5\u4e0b\u6765\\(Q\\)\u884c\uff0c\u6bcf\u884c\u7684\u5f62\u5f0f\u4e3a\\(a \\quad b \\quad c\\) \\(a\\)\u7684\u53d6\u503c\u4e3a\\(0\\)\u6216\\(1\\)\uff0c\\(0\\)\u8868\u793a\u8868\u793a\u4fee\u6539\\(A\\)\u4e32\uff0c\\(1\\)\u8868\u793a\u4fee\u6539\\(B\\)\u4e32\uff1b \\(b\\)\u8868\u793a\u4fee\u6539\u4f4d\u7f6e\uff0c\u4fdd\u8bc1\u5408\u6cd5\uff0c\u4e0b\u6807\u4ece\\(1\\)\u5f00\u59cb\uff1b \\(c\\)\u8868\u793a\u4fee\u6539\u540e\u7684\u5b57\u7b26\u3002 Output Format \u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\uff0c\u8f93\u51fa\u4e00\u884c\u4e00\u4e2a\u6570\uff0c\u8868\u793a\u7b54\u6848\u3002 Sample Input 1 6 5 babccb babcc 4 0 3 a 1 2 c 0 2 c 1 3 a Sample Output 1 2 1 2 5 Data Range \u5bf9\u4e8e\\(40 \\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le1000 \\)\uff0c\\(Q \\le 1000\\)\u3002 \u5bf9\u4e8e\\(100 \\%\\)\u7684\u6570\u636e\uff0c\\(N,M \\le 100000 \\)\uff0c\\(Q \\le 200000\\)\u3002 \u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a\u6240\u6709\u5c0f\u5199\u5b57\u6bcd\u3002 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int tr[2000000],ans[200001],n,m,q,x,y,step,width,p,tmp;//tr\u4ee3\u8868\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684LCP char a[2][200001],ch; int main() { scanf(\"%d%d\",&n,&m); scanf(\"%s\",a[0]); scanf(\"%s\",a[1]); scanf(\"%d\",&q); n=min(n,m); for (m=1;m<n;m<<=1); for (int i=m;i<m+n;++i) if (a[0][i-m]==a[1][i-m]) tr[i]=1; width=m>>1; step=1; for (int i=m-1;i>=1;--i) { if (i<width){step<<=1;width>>=1;} if (tr[i<<1]==step) tr[i]=tr[i<<1]+tr[(i<<1)+1]; else tr[i]=tr[i<<1]; } for (int i=0;i<q;++i) { scanf(\"%d%d\",&x,&y); getchar(); scanf(\"%c\",&ch); a[x][y-1]=ch; if (y<=n){ if (tr[m+y-1]!=(a[0][y-1]==a[1][y-1])) { tr[m+y-1]=(a[0][y-1]==a[1][y-1]); step = 1; p = m + y - 1; while ((p >>= 1) > 0) { tmp=tr[p]; if (tr[p << 1] == step) tr[p] = tr[p << 1] + tr[(p << 1)|1]; else tr[p] = tr[p << 1]; if (tr[p]==tmp) break;//\u82e5\u503c\u672a\u66f4\u65b0\u5219\u4e0d\u518d\u4e0a\u6eaf step <<= 1; } } } ans[i]=tr[1]; } for (int i=0;i<q;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4132"},{"location":"nr/4132/#4132-lcp","text":"\u9898\u76ee","title":"4132 LCP"},{"location":"nr/4132/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int tr[2000000],ans[200001],n,m,q,x,y,step,width,p,tmp;//tr\u4ee3\u8868\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684LCP char a[2][200001],ch; int main() { scanf(\"%d%d\",&n,&m); scanf(\"%s\",a[0]); scanf(\"%s\",a[1]); scanf(\"%d\",&q); n=min(n,m); for (m=1;m<n;m<<=1); for (int i=m;i<m+n;++i) if (a[0][i-m]==a[1][i-m]) tr[i]=1; width=m>>1; step=1; for (int i=m-1;i>=1;--i) { if (i<width){step<<=1;width>>=1;} if (tr[i<<1]==step) tr[i]=tr[i<<1]+tr[(i<<1)+1]; else tr[i]=tr[i<<1]; } for (int i=0;i<q;++i) { scanf(\"%d%d\",&x,&y); getchar(); scanf(\"%c\",&ch); a[x][y-1]=ch; if (y<=n){ if (tr[m+y-1]!=(a[0][y-1]==a[1][y-1])) { tr[m+y-1]=(a[0][y-1]==a[1][y-1]); step = 1; p = m + y - 1; while ((p >>= 1) > 0) { tmp=tr[p]; if (tr[p << 1] == step) tr[p] = tr[p << 1] + tr[(p << 1)|1]; else tr[p] = tr[p << 1]; if (tr[p]==tmp) break;//\u82e5\u503c\u672a\u66f4\u65b0\u5219\u4e0d\u518d\u4e0a\u6eaf step <<= 1; } } } ans[i]=tr[1]; } for (int i=0;i<q;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4138/","text":"4138 \u9009\u7ec4\u5458 \u9898\u76ee \u9009\u7ec4\u5458 \u9898\u76ee\u63cf\u8ff0 \u4e3a\u4e86\u63d0\u9ad8\u540c\u5b66\u4eec\u7684\u5b66\u4e60\u6548\u7387\uff0c\u52a9\u6559\u5e0c\u671b\u540c\u5b66\u4eec\u5206\u51fa\u5c0f\u7ec4\u3002 \u73b0\u5728\u5728\u5168\u73ed\u5171\\(n\\)\u540d\u540c\u5b66\u4e2d\u5148\u9009\u51fa\u7b2c\u4e00\u4e2a\u5c0f\u7ec4\u7684\u6210\u5458\uff0c\u52a9\u6559\u5e0c\u671b\u8fd9\u4e2a\u5c0f\u7ec4\u6210\u4e3a\u5e73\u5747\u5b66\u4e60\u6548\u7387\u6700\u9ad8\u7684\u6a21\u8303\u5c0f\u7ec4\uff0c\u4eba\u6570\u4e0d\u9650\u3002 \u73b0\u5728\u5df2\u77e5\u6709\u4e00\u4e9b\u540c\u5b66\u805a\u5728\u4e00\u8d77\u4f1a\u5bf9\u6574\u7ec4\u7684\u5b66\u4e60\u6548\u7387\u5e26\u6765\u4e00\u5b9a\u7684\u5f71\u54cd\u3002\u5e73\u5747\u5b66\u4e60\u6548\u7387\u5b9a\u4e49\u4e3a\u6574\u7ec4\u7684\u5b66\u4e60\u6548\u7387\u9664\u4ee5\u4eba\u6570\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e24\u4e2a\u6574\u6570\\(n,m\\)\u5206\u522b\u8868\u793a\u5168\u73ed\u5171\\(n\\)\u4eba\uff0c\u6709\\(m\\)\u7ec4\u540c\u5b66\u805a\u5728\u4e00\u8d77\u4f1a\u5bf9\u5b66\u4e60\u6548\u7387\u5e26\u6765\u5f71\u54cd\u3002 \u63a5\u4e0b\u6765\\(2m\\)\u884c\uff0c\u6bcf\u4e24\u884c\u53d9\u8ff0\u4e00\u7ec4\u540c\u5b66\u7684\u5f71\u54cd\u3002 \u524d\u4e00\u884c\u4e24\u4e2a\u6574\u6570\\(k_i,c_i\\)\u8868\u793a\u8fd9\\(k_i\\)\u4e2a\u540c\u5b66\u805a\u5728\u4e00\u8d77\u4f1a\u4f7f\u5b66\u4e60\u6548\u7387\u6539\u53d8\\(c_i\\)\u3002 \u540e\u4e00\u884c\\(k_i\\)\u4e2a\u6570\u8868\u793a\u8fd9\\(k_i\\)\u4e2a\u540c\u5b66\u7684\u7f16\u53f7(0 base)\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6570\u8868\u793a\u6700\u5927\u5e73\u5747\u5b66\u4e60\u6548\u7387\uff0c\u4fdd\u7559\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u3002 \u6837\u4f8b\u8f93\u5165 4 4 2 2 0 1 2 3 1 2 2 4 0 2 3 -9 0 1 2 \u6837\u4f8b\u8f93\u51fa 2.00 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e30%\u7684\u6570\u636e\u6709 \\(n=4\\) \u5bf9\u4e8e30%\u7684\u6570\u636e\u6709 \\(k_i\\leq2\\) \u5bf9\u4e8e10%\u7684\u6570\u636e\u6ee1\u8db3\u4e0a\u8ff0\u4e24\u6761\u4ef6 \u5bf9\u4e8e100%\u7684\u6570\u636e\u6709 \\(1\\leq n\\leq 15\\) \\(0\\leq m\\leq 100\\) \\(1\\leq k_i\\leq min(n,5)\\) WashSwang's solution Star #include <iostream> #include <iomanip> using namespace std; int sum,n,m,k[200],c[200],ex[20],num,x; double ans; int main() { cin>>n>>m; for (int i=0,j=1;i<15;i++,j<<=1) ex[i]=j; for (int i=0;i<m;++i){ cin>>num>>c[i]; for (int j=0;j<num;++j){ cin>>x; k[i]+=ex[x]; } } for (int i=0;i<(1<<n);++i){ sum=0; num=0; for (int j=0;j<m;++j) if ((i&k[j])==k[j]) sum+=c[j]; for (int j=i;j>0;j>>=1) if (j%2) num++; if (num!=0&&sum/double(num)>ans) ans=sum/double(num); } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"4138"},{"location":"nr/4138/#4138","text":"\u9898\u76ee","title":"4138 \u9009\u7ec4\u5458"},{"location":"nr/4138/#washswangs-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; int sum,n,m,k[200],c[200],ex[20],num,x; double ans; int main() { cin>>n>>m; for (int i=0,j=1;i<15;i++,j<<=1) ex[i]=j; for (int i=0;i<m;++i){ cin>>num>>c[i]; for (int j=0;j<num;++j){ cin>>x; k[i]+=ex[x]; } } for (int i=0;i<(1<<n);++i){ sum=0; num=0; for (int j=0;j<m;++j) if ((i&k[j])==k[j]) sum+=c[j]; for (int j=i;j>0;j>>=1) if (j%2) num++; if (num!=0&&sum/double(num)>ans) ans=sum/double(num); } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4145/","text":"4145 \u62ef\u6551\u9521\u5b89 \u9898\u76ee Description \u5d14\u59ae\u8482\u624b\u4e0a\u6709\u4e00\u4e32\u75310\u548c1\u7ec4\u6210\u7684\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32. \u5979\u80fd\u5bf9\u8be5\u5b57\u7b26\u4e32\u8fdb\u884c\u4efb\u610f\u591a\u6b21\u4e0b\u9762\u4e24\u79cd\u64cd\u4f5c. \u9009\u62e9\u4efb\u4e00\u5b50\u4e32\u8fdb\u884c\u7ffb\u8f6c, \u4f8b\u598201 011 01->01 110 01. \u8fdb\u884c\u4e00\u6b21\u6b64\u64cd\u4f5c\u4f1a\u82b1\u8d39x\u70b9\u80fd\u91cf. \u9009\u62e9\u4efb\u4e00\u5b50\u4e32\u5c06\u6bcf\u4e2a\u5b57\u7b26\u53d6\u53cd(\u628a0\u6362\u62101, \u628a1\u6362\u62100), \u4f8b\u598201 011 01->01 100 01. \u8fdb\u884c\u4e00\u6b21\u6b64\u64cd\u4f5c\u4f1a\u82b1\u8d39y\u70b9\u80fd\u91cf. \u4e3a\u4e86\u62ef\u6551\u9521\u5b89, \u5d14\u59ae\u8482\u9700\u8981\u628a\u8be5\u5b57\u7b26\u4e32\u53d8\u6210\u5168\u4e3a1\u7684\u4e32. \u8bf7\u95ee\u6700\u5c11\u9700\u8981\u591a\u5c11\u80fd\u91cf\u70b9\u6570\u624d\u80fd\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684? Input Format \u7b2c\u4e00\u884c\u662f\u4e09\u4e2a\u6b63\u6574\u6570n, x, y. (1 <= n <= 300000, 0 <= x, y <= 10^9). \u7b2c\u4e8c\u884c\u662f\u4e00\u4e2a\u957f\u5ea6\u4e3an\u768401\u5b57\u7b26\u4e32. Output Format \u5c0601\u5b57\u7b26\u4e32\u53d8\u6210\u5168\u4e3a1\u7684\u4e32\u6240\u9700\u7684\u6700\u5c11\u80fd\u91cf\u70b9\u6570. Sample1 Input 5 1 10 01000 Sample1 Output 11 Sample2 Input 5 10 1 01000 Sample2 Output 2 Sample3 Input 7 2 3 1111111 Sample3 Output 0 Note \u7b2c\u4e00\u4e2a\u6837\u4f8b\uff1a01000->10000->11111, \u82b1\u8d39\u7684\u80fd\u91cf\u70b9\u6570\u4e3a1+10=11. \u7b2c\u4e8c\u4e2a\u6837\u4f8b\uff1a01000->11000->11111, \u82b1\u8d39\u7684\u80fd\u91cf\u70b9\u6570\u4e3a1+1=2. \u7b2c\u4e09\u4e2a\u6837\u4f8b\uff1a\u5b57\u7b26\u4e32\u5df2\u7ecf\u662f\u5168\u4e3a1\u7684\u4e32\u4e86, \u4e0d\u9700\u8981\u82b1\u8d39\u80fd\u91cf. WashSwang's solution Star #include <iostream> using namespace std; char t,cur,last; int n,frag; long long x,y; int main() { scanf(\"%d%lld%lld\",&n,&x,&y); getchar(); last='1'; for (int i=0;i<n;++i){ cur=getchar(); if (cur=='0'&&last=='1') frag++; last=cur; } if (frag==0) printf(\"%d\",0); else printf(\"%lld\",min((frag-1)*x+y,frag*y)); return 0; }","title":"4145"},{"location":"nr/4145/#4145","text":"\u9898\u76ee","title":"4145 \u62ef\u6551\u9521\u5b89"},{"location":"nr/4145/#washswangs-solution-star","text":"#include <iostream> using namespace std; char t,cur,last; int n,frag; long long x,y; int main() { scanf(\"%d%lld%lld\",&n,&x,&y); getchar(); last='1'; for (int i=0;i<n;++i){ cur=getchar(); if (cur=='0'&&last=='1') frag++; last=cur; } if (frag==0) printf(\"%d\",0); else printf(\"%lld\",min((frag-1)*x+y,frag*y)); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4147/","text":"4147 \u7ffb\u8f6c\u957f\u65b9\u5f62 \u9898\u76ee Description \u73b0\u5728\u6709n\u4e2a\u957f\u65b9\u5f62\u6392\u6210\u4e00\u5217\u3002\u5bf9\u4efb\u4e00\u957f\u65b9\u5f62\uff0c\u4f60\u53ef\u4ee5\u5c06\u5176\u7ffb\u8f6c90\u5ea6\uff08\u5373\u957f\u65b9\u5f62\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6\u4e92\u6362\uff09\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u5bf9\u5b83\u8fdb\u884c\u64cd\u4f5c\u3002\u4f46\u662f\u4f60\u4e0d\u80fd\u6539\u53d8\u957f\u65b9\u5f62\u653e\u7f6e\u7684\u987a\u5e8f\u3002 \u8bf7\u95ee\u662f\u5426\u80fd\u4f7f\u5f97\u8fd9\u4e00\u5217\u957f\u65b9\u5f62\u7684\u9ad8\u5ea6\u5448\u975e\u9012\u589e\u5e8f\u5217\uff08\u5373\u6bcf\u4e2a\u957f\u65b9\u5f62\u7684\u9ad8\u5ea6\u90fd\u4e0d\u4f1a\u8d85\u8fc7\u5b83\u4e4b\u524d\u7684\u957f\u65b9\u5f62\u7684\u9ad8\u5ea6\uff09\uff1f Input Format \u7b2c\u4e00\u884c\u662f\u957f\u65b9\u5f62\u7684\u4e2a\u6570n\uff0c1 <= n <= 100000\u3002 \u63a5\u4e0b\u6765n\u884c\u6bcf\u884c\u4e24\u4e2a\u6574\u6570wi\u548chi\uff0c\u8868\u793a\u7b2ci\u4e2a\u957f\u65b9\u5f62\u7684\u5bbd\u5ea6\u548c\u9ad8\u5ea6\uff0c1 <= wi, hi <= 10^9\u3002 Output Format \u5982\u679c\u53ef\u4ee5\u4f7f\u8fd9\u4e00\u5217\u957f\u65b9\u5f62\u7684\u9ad8\u5ea6\u5448\u975e\u9012\u589e\u5e8f\u5217\uff0c\u8f93\u51faYES\uff0c\u5426\u5219\u8f93\u51faNO\u3002 Sample1 Input 3 3 4 4 6 3 5 Sample1 Output YES Sample2 Input 2 3 4 5 5 Sample2 Output NO vvvvv1v's solution Star #include <iostream> using namespace std; int main() { int n; cin >> n; int w, h, last, max, min; cin >> w >> h; last = (w > h ? w : h); bool flag = true; for (int i = 1; i < n; ++i) { cin >> w >> h; max = (w > h ? w : h); min = (w < h ? w : h); if (max <= last) last = max; else if (min <= last) last = min; else { flag = false; break; } } if (flag) cout << \"YES\"; else cout << \"NO\"; return 0; }","title":"4147"},{"location":"nr/4147/#4147","text":"\u9898\u76ee","title":"4147 \u7ffb\u8f6c\u957f\u65b9\u5f62"},{"location":"nr/4147/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; int w, h, last, max, min; cin >> w >> h; last = (w > h ? w : h); bool flag = true; for (int i = 1; i < n; ++i) { cin >> w >> h; max = (w > h ? w : h); min = (w < h ? w : h); if (max <= last) last = max; else if (min <= last) last = min; else { flag = false; break; } } if (flag) cout << \"YES\"; else cout << \"NO\"; return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4151/","text":"4151 \u51fa\u6808\u5e8f\u5217 \u9898\u76ee Description \u73b0\u5728\u6709\u4e00\u4e2a\u6808, \u6570\u5b57 1-n \u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5165\u6808. \u7ed9\u4f60\u4e00\u4e2a\u51fa\u6808\u5e8f\u5217, \u8bf7\u4f60\u5224\u65ad\u5b83\u662f\u5426\u5408\u6cd5. Input Format \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570 T, \u8868\u793a\u6570\u636e\u7ec4\u6570; \u63a5\u4e0b\u6765 T \u884c, \u6bcf\u884c\u5148\u662f\u4e00\u4e2a\u6b63\u6574\u6570 n, \u7d27\u63a5\u7740 n \u4e2a\u6570\u8868\u793a\u51fa\u6808\u5e8f\u5217. Output Format \u5171 T \u884c, \u6bcf\u884c\u4e00\u4e2a\u5b57\u7b26\u4e32 Yes \u6216 No, \u8868\u793a\u51fa\u6808\u5e8f\u5217\u662f\u5426\u5408\u6cd5. Sample Input 2 3 1 3 2 3 3 1 2 Sample Output Yes No Hint T<=10, n<=10^6 WashSwang's solution Star #include <iostream> using namespace std; int t,st[1100000],top,n,now,a[1100000]; int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { cin>>n; now=0; top=0; for (int j=0;j<n;++j) cin>>a[j]; for (int j=1;j<=n;++j) { st[top++] = j; while (a[now]==st[top-1]&&now<n&&top>=0) { top--; now++; } } if (top!=0) cout<<\"No\"<<endl; else cout<<\"Yes\"<<endl; } return 0; }","title":"4151"},{"location":"nr/4151/#4151","text":"\u9898\u76ee","title":"4151 \u51fa\u6808\u5e8f\u5217"},{"location":"nr/4151/#washswangs-solution-star","text":"#include <iostream> using namespace std; int t,st[1100000],top,n,now,a[1100000]; int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { cin>>n; now=0; top=0; for (int j=0;j<n;++j) cin>>a[j]; for (int j=1;j<=n;++j) { st[top++] = j; while (a[now]==st[top-1]&&now<n&&top>=0) { top--; now++; } } if (top!=0) cout<<\"No\"<<endl; else cout<<\"Yes\"<<endl; } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4152/","text":"4152 Cantor\u8868 \u9898\u76ee Description \u96c6\u5408\u8bba\u7684\u521b\u7acb\u4eba Georg Cantor \u66fe\u7ed9\u51fa\u4e00\u4e2a\u8868\u8bc1\u660e\u4e86\u6709\u7406\u6570\u662f\u53ef\u5217\u7684, \u5982\u4e0b\u9762\u6240\u793a: 1/1 1/2 1/3 1/4 1/5 ... 2/1 2/2 2/3 2/4 ... 3/1 3/2 3/3 ... 4/1 4/2 ... 5/1 ... \u6309\u987a\u5e8f\u5217\u51fa\u6765\u5c31\u662f 1/1, 1/2, 2/1, 3/1, 2/2, 1/3, 1/4, 2/3, ..., \u73b0\u5728\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 n, \u6c42\u7b2c n \u9879. Input Format \u4e00\u884c\u4e00\u4e2a\u6b63\u6574\u6570 n, \u8868\u793a\u6240\u6c42\u7684\u9879\u6570. Output Format \u4e00\u4e2a a/b \u5f0f\u7684\u6b63\u6709\u7406\u6570, \u8868\u793a\u8868\u4e2d\u7684\u7b2c n \u9879. Sample Input 11 Sample Output 5/1 Hint \u5bf9 40% \u7684\u6570\u636e, 1<=n<=10^6; \u5bf9 70% \u7684\u6570\u636e, 1<=n<=10^18; \u5bf9 90% \u7684\u6570\u636e, 1<=n<=10^100; \u5bf9 100% \u7684\u6570\u636e,1<=n<=10^1000. WashSwang's solution Star #include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Attention! This class is not complete (It may make mistakes if you apply it in other problems). class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; char s[2000]; int main() { cin>>s; longint l,r(s),t(s),n(s),mid; r=(r-1)*2; t=(t-1)*2; while (!(l>r)){ mid=div(l+r); if (mid*(mid+1)>t) r=mid-1; else l=mid+1; } l=l-1; n=n-div(l*(l+1)); if (odd(l)) cout<<n<<\"/\"<<l+2-n; else cout<<l+2-n<<\"/\"<<n; return 0; }","title":"4152"},{"location":"nr/4152/#4152-cantor","text":"\u9898\u76ee","title":"4152 Cantor\u8868"},{"location":"nr/4152/#washswangs-solution-star","text":"#include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Attention! This class is not complete (It may make mistakes if you apply it in other problems). class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; char s[2000]; int main() { cin>>s; longint l,r(s),t(s),n(s),mid; r=(r-1)*2; t=(t-1)*2; while (!(l>r)){ mid=div(l+r); if (mid*(mid+1)>t) r=mid-1; else l=mid+1; } l=l-1; n=n-div(l*(l+1)); if (odd(l)) cout<<n<<\"/\"<<l+2-n; else cout<<l+2-n<<\"/\"<<n; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4153/","text":"4153 \u6361\u77f3\u5b50 \u9898\u76ee Description \u4e00\u6761\u7b14\u76f4\u7684\u516c\u8def\u4e0a\u6709 n \u5757\u77f3\u5b50, \u6ca1\u6709\u4e24\u5757\u77f3\u5b50\u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e. \u73b0\u5728\u4f60\u95f2\u6765\u65e0\u4e8b\u60f3\u6361 m \u5757\u77f3\u5b50\u73a9, \u8bf7\u95ee\u8be5\u5982\u4f55\u53bb\u6361, \u624d\u80fd\u4f7f\u6361\u51fa\u7684 m \u5757\u77f3\u5b50\u4e2d\u8ddd\u79bb\u7b2c k \u5c0f\u7684\u4e24\u5757\u77f3\u5b50\u7684\u8ddd\u79bb\u6700\u5927?\uff08k=1 \u6216 2\uff09 \u8bf7\u7ed9\u51fa\u8fd9\u4e2a\u6700\u5927\u7684\u7b2c k \u5c0f\u8ddd\u79bb. \u6ce8\u610f, \u8fd9\u91cc\u82e5\u6709\u591a\u5bf9\u77f3\u5b50\u95f4\u7684\u8ddd\u79bb\u90fd\u662f\u6700\u5c0f\u7684, \u5219\u7b2c\u4e8c\u5c0f\u8ddd\u79bb\u7b49\u4e8e\u6700\u5c0f\u8ddd\u79bb. \u4f8b\u5982, \u6361\u51fa\u7684\u56db\u5757\u77f3\u5b50\u7684\u4f4d\u7f6e\u5206\u522b\u4e3a 1, 3, 11, 13, \u5219\u7b2c\u4e8c\u5c0f\u8ddd\u79bb\u548c\u6700\u5c0f\u8ddd\u79bb\u4e00\u6837\u90fd\u662f 2. Input Format \u7b2c\u4e00\u884c\u4e3a\u4e09\u4e2a\u6b63\u6574\u6570 n, m, k, \u5206\u522b\u8868\u793a\u603b\u77f3\u5b50\u5757\u6570, \u60f3\u6361\u7684\u77f3\u5b50\u5757\u6570, \u6240\u6c42\u7684\u662f\u6700\u5c0f\u8fd8\u662f\u7b2c\u4e8c\u5c0f\u8ddd\u79bb\u7684\u6700\u5927\u503c; \u7b2c\u4e8c\u884c\u6709 n \u4e2a\u6574\u6570, \u8868\u793a n \u5757\u77f3\u5b50\u7684\u4f4d\u7f6e. Output Format \u4e00\u884c, \u4e00\u4e2a\u6b63\u6574\u6570, \u8868\u793a\u6700\u5927\u7684\u7b2c k \u5c0f\u8ddd\u79bb. Sample Input 5 3 2 1 2 3 4 6 Sample Output 4 Hint -10^8<=\u6bcf\u5757\u77f3\u5b50\u7684\u4f4d\u7f6e<=10^8 3<=m<=n<=10^5 WashSwang's solution Star #include <iostream> #include <algorithm> using namespace std; int l,r,m,n,k,a[200000],mid,ans; bool test(int x){ int now=a[0],len=1; if (k==1){ for (int i=1;i<n;++i) if (a[i]-now>=x) { now=a[i]; len++; if (len>=m) return true; } return false; } else{ int p[200000],q[200000]; p[0]=1; for (int i=1;i<n;++i) { if (a[i] - now >= x) { now = a[i]; len++; p[i] = len; } else p[i] = p[i - 1]; } if (p[n-1]>=m) return true; now=a[n-1]; q[n-1]=1; len=1; for (int i=n-2;i>=0;--i){ if (now-a[i]>=x) { now=a[i]; len++; q[i]=len; } else q[i]=q[i+1]; if (p[i]+q[i+1]>=m) return true; } if (q[0]>=m) return true; return false; } } int main() { cin>>n>>m>>k; for (int i=0;i<n;++i) cin>>a[i]; sort(a,a+n); l=0; r=2000000000; while (l<=r) { mid=(r-l)/2+l; if (test(mid)){ if (mid>ans) ans=mid; l=mid+1; } else r=mid-1; } cout<<ans; return 0; }","title":"4153"},{"location":"nr/4153/#4153","text":"\u9898\u76ee","title":"4153 \u6361\u77f3\u5b50"},{"location":"nr/4153/#washswangs-solution-star","text":"#include <iostream> #include <algorithm> using namespace std; int l,r,m,n,k,a[200000],mid,ans; bool test(int x){ int now=a[0],len=1; if (k==1){ for (int i=1;i<n;++i) if (a[i]-now>=x) { now=a[i]; len++; if (len>=m) return true; } return false; } else{ int p[200000],q[200000]; p[0]=1; for (int i=1;i<n;++i) { if (a[i] - now >= x) { now = a[i]; len++; p[i] = len; } else p[i] = p[i - 1]; } if (p[n-1]>=m) return true; now=a[n-1]; q[n-1]=1; len=1; for (int i=n-2;i>=0;--i){ if (now-a[i]>=x) { now=a[i]; len++; q[i]=len; } else q[i]=q[i+1]; if (p[i]+q[i+1]>=m) return true; } if (q[0]>=m) return true; return false; } } int main() { cin>>n>>m>>k; for (int i=0;i<n;++i) cin>>a[i]; sort(a,a+n); l=0; r=2000000000; while (l<=r) { mid=(r-l)/2+l; if (test(mid)){ if (mid>ans) ans=mid; l=mid+1; } else r=mid-1; } cout<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4156/","text":"4156 \u589e\u5f3a\u7248\u7530\u5fcc\u8d5b\u9a6c \u9898\u76ee Description \u81ea\u4ece\u8d5b\u9a6c\u6bd4\u8d5b\uff0c\u9f50\u738b\u88ab\u7530\u5fcc\u6253\u8d25\u4e4b\u540e\u3002\u79ef\u84c4\u529b\u91cf\uff0c\u9a6f\u517b\u4e86N\u53ea\u9a6c\uff0c\u5e76\u5411\u7530\u5fcc\u53d1\u51fa\u4e86\u6311\u6218\u3002 \u7530\u5fcc\u6b23\u7136\u63a5\u53d7\uff0c\u7136\u800c\u8239\u65b0\u7684\u89c4\u5219\u662f\u6bcf\u573a\u6bd4\u8d5b\uff0c\u8f93\u7684\u4e00\u65b9\u5c06\u8981\u7ed9\u8d62\u7684\u4e00\u65b9200\u4e24\u9ec4\u91d1\uff0c\u5982\u679c\u662f\u5e73\u5c40\u7684\u8bdd\uff0c\u53cc\u65b9\u90fd\u4e0d\u5fc5\u62ff\u51fa\u94b1\u3002 \u73b0\u5728\u6bcf\u5339\u9a6c\u7684\u901f\u5ea6\u503c\u662f\u56fa\u5b9a\u800c\u4e14\u5df2\u77e5\u7684\uff0c\u800c\u9f50\u738b\u51fa\u9a6c\u4e5f\u4e0d\u7ba1\u7530\u5fcc\u7684\u51fa\u9a6c\u987a\u5e8f\uff0c\u4ed6\u8ba4\u4e3a\u7530\u5fcc\u662f\u7b97\u4e0d\u51fa\u6765\u7684\u3002 \u4f46\u662f\u6ca1\u60f3\u5230\u662f\u7530\u5fcc\u8ba4\u8bc6\u4e86\u4f1a\u5199C++\u4f60\uff0c\u662f\u9009\u62e9\u5411\u9f50\u738b\u4f4e\u5934\uff0c\u8fd8\u662f\u5e2e\u52a9\u7530\u5fcc\u8d62\u53d6\u66f4\u591a\u7684\u94b1\uff0c\u90fd\u770b\u4f60\u7684\u8868\u73b0\u4e86\u3002 \u4f46\u662f\u52a9\u6559\u90fd\u5e0c\u671b\u4f60\u505a\u4e71\u4e16\u7684\u52c7\u8005\uff0c\u5982\u679c\u4f60\u6ca1\u6709\u62ff\u5230\u6700\u591a\u7684\u94b1\uff0c\u5c31\u5265\u593a\u4f60\u7684\u5206\u6570\u3002 \u8bf7\u95ee\u4f60\u5e94\u8be5\u5982\u4f55\u5e2e\u52a9\u7530\u5fcc\u5b89\u6392\u81ea\u5df1\u7684\u9a6c\u53bb\u5bf9\u6297\u9f50\u738b\u7684\u9a6c\uff0c\u624d\u80fd\u8d62\u53d6\u6700\u591a\u94b1\uff1f Input Format \u7b2c\u4e00\u884c\u4e3a\u4e00\u4e2a\u6b63\u6574\u6570N\uff0c\u8868\u793a\u53cc\u65b9\u9a6c\u7684\u6570\u91cf\u3002 \u7b2c\u4e8c\u884c\u6709N\u4e2a\u6574\u6570\u8868\u793a\u7530\u5fcc\u7684\u9a6c\u7684\u901f\u5ea6\u3002 \u7b2c\u4e09\u884c\u7684N\u4e2a\u6574\u6570\u8868\u793a\u9f50\u738b\u7684\u9a6c\u7684\u901f\u5ea6\u3002 Output Format \u4ec5\u6709\u4e00\u884c\uff0c\u4e3a\u7530\u5fcc\u8d5b\u9a6c\u53ef\u80fd\u8d62\u5f97\u7684\u6700\u591a\u7684\u94b1\uff0c\u7ed3\u679c\u6709\u53ef\u80fd\u4e3a\u8d1f\u3002 Sample1 Input 3 92 83 71 95 87 74 Sample1 Output 200 HINT: \u597d\u597d\u5ba1\u9898\uff0c\u4ed4\u7ec6\u9a97\u5206\u3002 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c1 \\leq N \\leq 5 \u4fdd\u8bc1\u63a5\u4e0b\u6765\u670920%\u7684\u6570\u636e\u4e2d\u4e0d\u5b58\u5728\u901f\u5ea6\u76f8\u540c\u7684\u9a6c \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 \\leq N \\lep 3000 WashSwang's solution Star #include <iostream> using namespace std; int p[3001],q[3001],dp[3001][3001],m,n,ptr,ans,win,ping; void qsort(int *s,int *t) { if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j) { while (i<j&&s[j]<=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]>=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } inline int cmp(int x,int y){ if (x>y) return 1; if (x<y) return -1; return 0; } int main() { ios::sync_with_stdio(false); cin>>m; for (int i=0;i<m;++i) cin>>p[i]; for (int i=0;i<m;++i) cin>>q[i]; qsort(p,p+m); qsort(q,q+m); for (int i=1;i<=m;++i){ for (int j=0;j<=i;++j) { dp[i][j]=-100000000; if (j>=1) dp[i][j]=max(dp[i-1][j-1]+cmp(p[j-1],q[i-1]),dp[i][j]); if (j<i) dp[i][j]=max(dp[i-1][j]+cmp(p[m-(i-j)],q[i-1]),dp[i][j]); } } ans=-100000000; for (int i=0;i<=m;++i) ans=max(dp[m][i],ans); cout<<ans*200; return 0; }","title":"4156"},{"location":"nr/4156/#4156","text":"\u9898\u76ee","title":"4156 \u589e\u5f3a\u7248\u7530\u5fcc\u8d5b\u9a6c"},{"location":"nr/4156/#washswangs-solution-star","text":"#include <iostream> using namespace std; int p[3001],q[3001],dp[3001][3001],m,n,ptr,ans,win,ping; void qsort(int *s,int *t) { if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j) { while (i<j&&s[j]<=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]>=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } inline int cmp(int x,int y){ if (x>y) return 1; if (x<y) return -1; return 0; } int main() { ios::sync_with_stdio(false); cin>>m; for (int i=0;i<m;++i) cin>>p[i]; for (int i=0;i<m;++i) cin>>q[i]; qsort(p,p+m); qsort(q,q+m); for (int i=1;i<=m;++i){ for (int j=0;j<=i;++j) { dp[i][j]=-100000000; if (j>=1) dp[i][j]=max(dp[i-1][j-1]+cmp(p[j-1],q[i-1]),dp[i][j]); if (j<i) dp[i][j]=max(dp[i-1][j]+cmp(p[m-(i-j)],q[i-1]),dp[i][j]); } } ans=-100000000; for (int i=0;i<=m;++i) ans=max(dp[m][i],ans); cout<<ans*200; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4158/","text":"4158 \u5931\u8d25\u548c \u9898\u76ee Description \u5931\u8d25\u8005\u4e0d\u9700\u8981\u4f53\u9762\u3002 XYF\u60f3\u77e5\u9053\u8fd9\u4e2a\u4e16\u754c\u4e0a\u6709\u6ca1\u6709\u50cfSQD\u4e00\u6837\u5931\u8d25\u7684\u4eba\u3002\u76f8\u4f20\u6709\u4e00\u79cd\u6d4b\u8bd5\u4e00\u4e2a\u4eba\u662f\u5426\u5931\u8d25\u7684\u65b9\u6cd5\uff0c\u90a3\u5c31\u662f\u8ba9\u4ed6\u968f\u673a\u5199\u4e0b\u4e00\u4e32\u6570\u5b57\u3002\u5982\u679c\u8fd9\u4e32\u6570\u5b57\u7684\u67d0\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217\u7684\u548c\u4e3a\u5931\u8d25\u6570\u7684\u500d\u6570\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fde\u7eed\u5b50\u5e8f\u5217\u88ab\u79f0\u4e3a\u4e00\u4e2a\u5931\u8d25\u8bc1\u636e\u3002 \u73b0\u5728\u8bf7\u6210\u529f\u7684\u4f60\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u6765\u5e2e\u52a9XYF\u8ba1\u7b97\u4e00\u4e32\u6570\u5b57\u4e2d\u5931\u8d25\u8bc1\u636e\u7684\u6570\u91cf\u3002 Input Format \u7b2c\u4e00\u884c\u4e3a\u6570\u636e\u7684\u7ec4\u6570T\u3002 \u7b2c\u4e8c\u884c\u5f00\u59cb\u662f\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u4e24\u884c\u3002 \u5176\u4e2d\u7b2c\u4e00\u884c\u662f\u4e24\u4e2a\u6574\u6570n\u3001 m\u3002n\u662f\u6570\u5b57\u4e32\u7684\u957f\u5ea6\uff0cm\u4e3a\u5931\u8d25\u6570\u3002 \u7b2c\u4e8c\u884c\u6709n\u4e2a\u6b63\u6574\u6570x\uff08 \\( 1 \\leq x \\leq 100 \\) \uff09\uff0c\u8868\u793a\u8fd9\u4e32\u6570\u5b57\u3002 Output Format \u8f93\u51faT\u884c\uff0c\u6bcf\u884c\u8f93\u51fa\u8be5\u7ec4\u5931\u8d25\u8bc1\u636e\u7684\u6570\u91cf\u3002 Sample Input 2 3 3 1 2 3 5 7 6 6 6 6 6 Sample Output 3 0 Limits \u5bf9\u4e8e20%\u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 100\\) \u5bf9\u4e8e80%\u7684\u6570\u636e\uff0c\\(1 \\leq n \\leq 5000\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c \\(1 \\leq T \\leq 10 \\)\uff0c\\(1 \\leq n \\leq 100000 \\)\uff0c\\( 1 \\leq m \\leq 5000 \\) vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; int T; int n, m; int arr[100005]; int x; int sum = 1; int cnt = 0; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low], tmp, lf = low, rh = high; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int C(int N, int M) { int ans = 1; for (int i = N, j = 1; j <= M; --i, ++j) ans = ans * i / j; return ans; } int main() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d\", &n, &m); arr[0] = 0; for (int i = 1; i <= n; ++i) { scanf(\"%d\", &x); arr[i] = (arr[i - 1] + x) % m; } quicksort(0, n); sum = 1; cnt = 0; for (int i = 1; i <= n; ++i) { if (arr[i] == arr[i - 1]) ++sum; else { cnt += C(sum, 2); sum = 1; } } cnt += C(sum, 2); printf(\"%d\\n\", cnt); } return 0; } WashSwang's solution Star #include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,sum,m,n,x[5000],tmp; long long ans; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ ans=0; sum=0; scanf(\"%d%d\",&n,&m); memset(x,0,sizeof(x)); x[0]=1; for (int j=0;j<n;++j){ scanf(\"%d\",&tmp); sum+=tmp; sum%=m; ans+=x[sum]; x[sum]++; } printf(\"%lld\",ans); } return 0; }","title":"4158"},{"location":"nr/4158/#4158","text":"\u9898\u76ee","title":"4158 \u5931\u8d25\u548c"},{"location":"nr/4158/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int T; int n, m; int arr[100005]; int x; int sum = 1; int cnt = 0; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low], tmp, lf = low, rh = high; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int C(int N, int M) { int ans = 1; for (int i = N, j = 1; j <= M; --i, ++j) ans = ans * i / j; return ans; } int main() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d\", &n, &m); arr[0] = 0; for (int i = 1; i <= n; ++i) { scanf(\"%d\", &x); arr[i] = (arr[i - 1] + x) % m; } quicksort(0, n); sum = 1; cnt = 0; for (int i = 1; i <= n; ++i) { if (arr[i] == arr[i - 1]) ++sum; else { cnt += C(sum, 2); sum = 1; } } cnt += C(sum, 2); printf(\"%d\\n\", cnt); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4158/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,sum,m,n,x[5000],tmp; long long ans; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ ans=0; sum=0; scanf(\"%d%d\",&n,&m); memset(x,0,sizeof(x)); x[0]=1; for (int j=0;j<n;++j){ scanf(\"%d\",&tmp); sum+=tmp; sum%=m; ans+=x[sum]; x[sum]++; } printf(\"%lld\",ans); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4163/","text":"4163 \u77ee\u4eba\u7684\u5b9d\u85cf \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u77ee\u4eba\u7ec8\u4e8e\u627e\u5230\u4e86\u4ed6\u4eec\u5931\u843d\u7684\u5b9d\u85cf\uff01\u73b0\u5728\u6709n\u4e2a\u5b9d\u7bb1\u5e76\u6392\u653e\u5728\u4e00\u8d77\uff0c\u7b2ci\u4e2a\u5b9d\u7bb1\u6709\\(a_i\\)\u5757\u9ec4\u91d1\u3002m\\(m \\le n\\)\u4e2a\u77ee\u4eba\u5728\u8ba8\u8bba\u5982\u4f55\u74dc\u5206\u8fd9\u4e9b\u5b9d\u7bb1\u3002\u89c4\u5b9a\u6bcf\u4e2a\u77ee\u4eba\u53ea\u80fd\u9009\u62e9\u8fde\u5728\u4e00\u8d77\u7684\u82e5\u5e72\u4e2a\u5b9d\u7bb1\uff0c\u6bcf\u4e2a\u5b9d\u7bb1\u90fd\u88ab\u4e00\u4e2a\u77ee\u4eba\u6240\u62e5\u6709\uff0c\u6bcf\u4e2a\u77ee\u4eba\u5f97\u5230\u7684\u9ec4\u91d1\u5757\u6570\u4e3a\u4ed6\u9009\u62e9\u7684\u6240\u6709\u5b9d\u7bb1\u7684\u9ec4\u91d1\u5757\u6570\u4e4b\u548c\u3002\u6c42\u83b7\u5f97\u9ec4\u91d1\u6700\u591a\u7684\u77ee\u4eba\u5f97\u5230\u7684\u9ec4\u91d1\u5757\u6570\u7684\u6700\u5c0f\u503c\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e24\u4e2a\u6b63\u6574\u6570n, m\u3002 \u7b2c\u4e8c\u884c\u5305\u542bn\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u975e\u8d1f\u6574\u6570\\(a_i\\)\uff08\\(1 \\le i \\le n\\)\uff09\uff0c\u4fdd\u8bc1\\(a_i\\)\u4e0d\u5168\u4e3a0\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u83b7\u5f97\u9ec4\u91d1\u6700\u591a\u7684\u77ee\u4eba\u5f97\u5230\u7684\u9ec4\u91d1\u5757\u6570\u7684\u6700\u5c0f\u503c\u3002 \u6837\u4f8b\u8f93\u5165 5 3 4 2 4 5 1 \u6837\u4f8b\u8f93\u51fa 6 \u6837\u4f8b\u8bf4\u660e \u7b2c1\u4e2a\u77ee\u4eba\u9009\u62e9\u7b2c1\u4e2a\u5b9d\u7bb1\uff0c\u5f97\u52304\u5757\u9ec4\u91d1\uff1b\u7b2c2\u4e2a\u77ee\u4eba\u9009\u62e9\u7b2c2\uff0c3\u4e2a\u5b9d\u7bb1\uff0c\u5f97\u52306\u5757\u9ec4\u91d1\uff1b\u7b2c3\u4e2a\u77ee\u4eba\u9009\u62e9\u7b2c4\uff0c5\u4e2a\u5b9d\u7bb1\uff0c\u5f97\u52306\u5757\u9ec4\u91d1\u3002\u83b7\u5f97\u9ec4\u91d1\u6700\u591a\u7684\u77ee\u4eba\u5f97\u52306\u5757\u9ec4\u91d1\u3002 \u6570\u636e\u8303\u56f4 \u5bf920%\u7684\u6570\u636e\uff0c\\(n \\le 10\\)\u3002 \u5bf950%\u7684\u6570\u636e\uff0c\\(n \\le 1000\\)\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(n \\le 100000, m \\le n\\)\uff0c\\(a_i\\)\u4e4b\u548c\u4e0d\u8d85\u8fc7\\(10^9\\)\u3002 WashSwang's solution Star #include <iostream> #include <cstdio> using namespace std; int n,m,a[100001],l,r,mid,ans,cnt,cur; bool flag; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); l=0; r=1000000000; while (l<=r){ mid=(l+r)/2; cnt=0; cur=0; flag=true; for (int i=0;i<n;++i){ if (a[i]>mid){ flag=false; break; } if (cur+a[i]>mid){ cur=0; cnt++; } if (cnt==m){ flag=false; break; } cur+=a[i]; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } printf(\"%d\",ans); return 0; }","title":"4163"},{"location":"nr/4163/#4163","text":"\u9898\u76ee","title":"4163 \u77ee\u4eba\u7684\u5b9d\u85cf"},{"location":"nr/4163/#washswangs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int n,m,a[100001],l,r,mid,ans,cnt,cur; bool flag; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); l=0; r=1000000000; while (l<=r){ mid=(l+r)/2; cnt=0; cur=0; flag=true; for (int i=0;i<n;++i){ if (a[i]>mid){ flag=false; break; } if (cur+a[i]>mid){ cur=0; cnt++; } if (cnt==m){ flag=false; break; } cur+=a[i]; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4164/","text":"4164 \u5c0f\u6e90\u5403\u82f9\u679c \u9898\u76ee \u5403\u82f9\u679c \u9898\u76ee\u63cf\u8ff0 \u5c0f\u6e90\u6709\\(n\\)\u4e2a\u82f9\u679c\uff0c\u4ed6\u6bcf\u5929\u90fd\u4f1a\u5403\u6389\u4e00\u4e9b\u82f9\u679c\u3002 \u4f46\u662f\u5c0f\u6e90\u662f\u4e2a\u6ca1\u6709\u4e3b\u89c1\u7684\u4eba\uff0c\u4ed6\u6bcf\u5929\u5230\u5e95\u8981\u5403\u591a\u5c11\u4e2a\u82f9\u679c\u53d6\u51b3\u4e8e\u5f53\u5929\u5269\u4e0b\u591a\u5c11\u4e2a\u3002\u5f53\u8fd9\u4e00\u5929\u5269\u4e0b\\(k\\)\u4e2a\u82f9\u679c\u65f6\uff0c\u4ed6\u7b49\u6982\u7387\uff08\u5373\\(\\frac{1}{k}\\)\u5403\u6389\\(1,2,\\cdots,k\\)\u4e2a\u82f9\u679c\u3002 \u73b0\u5728\u60f3\u8981\u77e5\u9053\uff0c\u5c0f\u6e90\u5403\u6389\\(m\\)\u4e2a\u82f9\u679c\u671f\u671b\u4e0b\u9700\u8981\u591a\u5c11\u5929\u3002 \u8f93\u5165\u683c\u5f0f \u4e00\u884c\u4e24\u4e2a\u6574\u6570\\(n,m\\)\uff0c\u8868\u793a\u6700\u521d\u82f9\u679c\u6570\u548c\u76ee\u6807\u82f9\u679c\u6570\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6570\u8868\u793a\u671f\u671b\u5929\u6570\uff0c\u4fdd\u7559\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u3002 \u6837\u4f8b\u8f93\u5165 3 3 \u6837\u4f8b\u8f93\u51fa 1.83 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e30%\u7684\u6570\u636e\u6709 \\(m\\leq3\\) \u5bf9\u4e8e50%\u7684\u6570\u636e\u6709 \\(n\\leq10\\) \u5bf9\u4e8e20%\u7684\u6570\u636e\u6709 \\(n=m\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\u6709 \\(1\\leq m\\leq n\\leq20\\) WashSwang's solution Star #include <iostream> #include <iomanip> using namespace std; int m,n; double dp[1001][1001],ans=0; int main() { cin>>n>>m; dp[0][n]=1; for (int i=1;i<=n;++i) for (int j=0;j<n;++j) { for (int k = max(j + 1, n - m + 1); k <= n; ++k) dp[i][j] += dp[i - 1][k] / k; if (j<=n-m) ans+=i*dp[i][j]; } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"4164"},{"location":"nr/4164/#4164","text":"\u9898\u76ee","title":"4164 \u5c0f\u6e90\u5403\u82f9\u679c"},{"location":"nr/4164/#washswangs-solution-star","text":"#include <iostream> #include <iomanip> using namespace std; int m,n; double dp[1001][1001],ans=0; int main() { cin>>n>>m; dp[0][n]=1; for (int i=1;i<=n;++i) for (int j=0;j<n;++j) { for (int k = max(j + 1, n - m + 1); k <= n; ++k) dp[i][j] += dp[i - 1][k] / k; if (j<=n-m) ans+=i*dp[i][j]; } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4171/","text":"\u9898\u76ee Welcome to Online Judge We support submissions in Python 2 now, please give it a try! Python support is broken. Encrypted connection is supported now. If your ISP blocks you from submitting code, please try access via HTTPS first. Oct 2, 2016 connection is required on all pages now :-) Oct 30, 2016 C++ compilation arguments changed to: g++-7 %s.cpp -o %s -O2 -std=c++17 -Wall -static -DONLINE_JUDGE Oct 15, 2017 How to use the OJ Any problem please contact administrator: dataisland@sjtu.edu.cn WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; int n,heap[2000000],p[2000000],len,a[1000000],b[1000000],q[1000000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d \",pop()); return 0; }","title":"4171"},{"location":"nr/4171/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[2000000],p[2000000],len,a[1000000],b[1000000],q[1000000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d \",pop()); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4172/","text":"4172 rose \u9898\u76ee Description \u201c\u73ab\u7470\u7684\u7ea2\uff0c\u5bb9\u6613\u53d7\u4f24\u7684\u68a6\u3002\u201d \u5c0fR\u540c\u5b66\u4e0e\u5c0fL\u540c\u5b66\u4e00\u8d77\u53bb\u4e86\u65e5\u672c\u73a9\u800d\uff0c\u5979\u4eec\u5728\u4e00\u6761\u8def\u4e0a\u770b\u5230\u4e86\u8bb8\u8bb8\u591a\u591a\u7684\u7ea2\u73ab\u7470\uff0c\u6709\u4e9b\u73ab\u7470\u8fd8\u5728\u5f00\u653e\uff0c\u800c\u53e6\u4e00\u4e9b\u5df2\u7ecf\u51cb\u8c22\u3002\u597d\u5947\u7684\u5c0fL\u60f3\u77e5\u9053\u67d0\u4e2a\u533a\u95f4$$[l,r]$$\u4e2d \u6700\u591a \u6709\u591a\u5c11 \u8fde\u7eed\u7684\u76db\u5f00\u7684\u73ab\u7470 \uff0c\u4f46\u8c03\u76ae\u7684\u5c0fR\u8981\u6363\u4e71\u3002\u5979\u6709\u4e00\u79cd\u795e\u5947\u7684\u836f\u6c34\uff0c\u53ef\u4ee5\u4f7f\u51cb\u8c22\u7684\u73ab\u7470\u7acb\u5373\u91cd\u65b0\u5f00\u653e\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u5f00\u653e\u7684\u73ab\u7470\u7acb\u5373\u67af\u840e\uff0c\u751a\u81f3\u53ef\u4ee5\u5bf9\u540c\u4e00\u682a\u73ab\u7470\u53cd\u590d\u4f7f\u7528\u3002\u5c0fL\u5f88\u751f\u6c14\uff0c\u627e\u5230\u4e86\u4f60\uff0c\u5e0c\u671b\u4f60\u5e2e\u5fd9\u5e94\u5bf9\u5c0fR\u7684\u6363\u4e71\u3002 \u7ed9\u51fa\u4e00\u4e2a01\u5e8f\u5217\u548c\u4ee5\u4e0b\u4e09\u4e2a\u64cd\u4f5c\uff1a $$1\\ l\\ r\\ x$$\uff1a \u5c06\u533a\u95f4$$[l, r]$$\u5185\u7684\u6240\u6709\u6570\u53d8\u4e3a$$x$$\uff0c$$x$$\u7684\u53d6\u503c\u53ea\u53ef\u80fd\u4e3a0\u62161\uff1b $$2\\ l\\ r$$\uff1a \u67e5\u8be2\u533a\u95f4$$[l, r]$$\u5185\u6709\u591a\u5c11\u4e2a1\uff1b $$3\\ l\\ r$$\uff1a \u67e5\u8be2\u533a\u95f4$$[l, r]$$\u5185\u6700\u957f\u7684\u8fde\u7eed1\u7684\u6570\u91cf\u3002 Input Format \u8f93\u5165\u5171m+2\u884c\u3002\u7b2c\u4e00\u884c\u4e3a2\u4e2a\u6b63\u6574\u6570n\u548cm\uff0cn\u4e3a01\u5e8f\u5217\u7684\u957f\u5ea6\uff0cm\u4e3a\u64cd\u4f5c\u4e2a\u6570\uff1b \u7b2c\u4e8c\u884c\u4e3an\u4e2a\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6570\uff0c\u53ea\u53ef\u80fd\u4e3a0\u62161\uff1b \u7b2c\u4e09\u884c\u81f3\u7b2cm+2\u884c\u4e3am\u4e2a\u64cd\u4f5c\uff0c\u683c\u5f0f\u53c2\u7167\u95ee\u9898\u63cf\u8ff0\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u67e5\u8be2\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\u7ed3\u679c\u3002\u683c\u5f0f\u89c1\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\u3002 Sample Input 8 3 1 1 0 0 1 0 1 0 2 3 5 1 3 7 1 3 2 8 Sample Output 1 6 \u6570\u636e\u89c4\u6a21\u4e0e\u7ea6\u5b9a \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c$$1\\le n, m\\le 10^6$$\uff0c$$1\\le l \\le r\\le n$$\u3002 WashSwang's solution Star #include <iostream> using namespace std; const int MAXN=1000001; int a[MAXN],ans[4*MAXN],tag[4*MAXN],leftc[4*MAXN],rightc[4*MAXN],c[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p,int l,int r) { int mid=(l+r)>>1; ans[p]=ans[ls(p)]+ans[rs(p)]; leftc[p]=leftc[ls(p)]; rightc[p]=rightc[rs(p)]; if (mid-l+1==leftc[ls(p)]) leftc[p]+=leftc[rs(p)]; if (r-mid==rightc[rs(p)]) rightc[p]+=rightc[ls(p)]; c[p]=max(max(c[ls(p)],c[rs(p)]),rightc[ls(p)]+leftc[rs(p)]); } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; leftc[p]=a[l]; rightc[p]=a[l]; c[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p,l,r); } inline void add_tag(int p,int l,int r,int k) { tag[p]=k; if (k==1) ans[p]=leftc[p]=rightc[p]=c[p]=0; if (k==2) ans[p]=leftc[p]=rightc[p]=c[p]=r-l+1; } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p,l,r); } int query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1,sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int query2(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return c[p]; int mid=(l+r)>>1,leap=0,lmax=0,rmax=0; if (tag[p]!=0) push_down(p,l,r); if (mid>=nl) lmax=query2(nl,nr,l,mid,ls(p)); if (mid<nr) rmax=query2(nl,nr,mid+1,r,rs(p)); leap=min(mid-nl+1,rightc[ls(p)])+min(nr-mid,leftc[rs(p)]); return max(max(lmax,rmax),leap); } int m,n,x,k,l,r; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ scanf(\"%d%d%d\",&k,&l,&r); if (k==1){ scanf(\"%d\",&x); update(l,r,1,n,1,x+1); } if (k==2) printf(\"%d\\n\",query(l,r,1,n,1)); if (k==3) printf(\"%d\\n\",query2(l,r,1,n,1)); } return 0; }","title":"4172"},{"location":"nr/4172/#4172-rose","text":"\u9898\u76ee","title":"4172 rose"},{"location":"nr/4172/#washswangs-solution-star","text":"#include <iostream> using namespace std; const int MAXN=1000001; int a[MAXN],ans[4*MAXN],tag[4*MAXN],leftc[4*MAXN],rightc[4*MAXN],c[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p,int l,int r) { int mid=(l+r)>>1; ans[p]=ans[ls(p)]+ans[rs(p)]; leftc[p]=leftc[ls(p)]; rightc[p]=rightc[rs(p)]; if (mid-l+1==leftc[ls(p)]) leftc[p]+=leftc[rs(p)]; if (r-mid==rightc[rs(p)]) rightc[p]+=rightc[ls(p)]; c[p]=max(max(c[ls(p)],c[rs(p)]),rightc[ls(p)]+leftc[rs(p)]); } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; leftc[p]=a[l]; rightc[p]=a[l]; c[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p,l,r); } inline void add_tag(int p,int l,int r,int k) { tag[p]=k; if (k==1) ans[p]=leftc[p]=rightc[p]=c[p]=0; if (k==2) ans[p]=leftc[p]=rightc[p]=c[p]=r-l+1; } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p,l,r); } int query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1,sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int query2(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return c[p]; int mid=(l+r)>>1,leap=0,lmax=0,rmax=0; if (tag[p]!=0) push_down(p,l,r); if (mid>=nl) lmax=query2(nl,nr,l,mid,ls(p)); if (mid<nr) rmax=query2(nl,nr,mid+1,r,rs(p)); leap=min(mid-nl+1,rightc[ls(p)])+min(nr-mid,leftc[rs(p)]); return max(max(lmax,rmax),leap); } int m,n,x,k,l,r; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ scanf(\"%d%d%d\",&k,&l,&r); if (k==1){ scanf(\"%d\",&x); update(l,r,1,n,1,x+1); } if (k==2) printf(\"%d\\n\",query(l,r,1,n,1)); if (k==3) printf(\"%d\\n\",query2(l,r,1,n,1)); } return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4173/","text":"4173 robot \u9898\u76ee Description \u73b0\u6709\u4e00\u4e2a\u673a\u5668\u4eba\u5728\u4e00\u4e2a\u65e0\u7a77\u5927\u7684\u5e73\u9762\u76f4\u89d2\u5750\u6807\u7cfb\u4e0a\uff0c\u4ece\\((0,0)\\)\u5f00\u59cb\uff0c\u6309\u5982\u4e0b\u6307\u4ee4\u79fb\u52a8\uff1a U \u2014 \\((x,y)\\) => \\((x,y+1)\\)\uff1b D \u2014 \\((x,y)\\) => \\((x,y\u22121)\\)\uff1b L \u2014 \\((x,y)\\) => \\((x\u22121,y)\\)\uff1b R \u2014 \\((x,y)\\) => \\((x+1,y)\\)\u3002 \u7ed9\u5b9a\u4e00\u6bb5\u6307\u4ee4\u5e8f\u5217\u548c\u76ee\u6807\u5750\u6807\\((x,y)\\)\uff0c\u5e76\u5141\u8bb8\u6539\u53d8\u5176\u4e2d\u8fde\u7eed\u4e00\u6bb5\u6307\u4ee4\uff0c\u4f7f\u5f97\u673a\u5668\u4eba\u80fd\u591f\u6309\u6539\u52a8\u540e\u7684\u6307\u4ee4\u5230\u8fbe\u76ee\u6807\u5750\u6807\uff0c\u95ee\u6700\u5c0f\u4fee\u6539\u957f\u5ea6\u3002 \u82e5\u65e0\u6cd5\u5230\u8fbe\uff0c\u5219\u8f93\u51fa\\(-1\\)\u3002 Input Format \u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6b63\u6574\u6570n\uff0c\u8868\u793a\u6307\u4ee4\u5e8f\u5217\u957f\u5ea6\uff1b \u7b2c\u4e8c\u884c\u5305\u542b\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u6307\u4ee4\u5e8f\u5217\uff1b \u7b2c\u4e09\u884c\u5305\u542b\u4e24\u4e2a\u6574\u6570x\u548cy\uff0c\u8868\u793a\u76ee\u6807\u5750\u6807\u3002 Output Format \u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u6700\u5c0f\u4fee\u6539\u957f\u5ea6\u6216\u65e0\u6cd5\u4fee\u6539\u3002 Sample Input1 5 RURUU -2 3 Sample Output1 3 Sample Input2 3 UUU 100 100 Sample Output2 -1 Data Range \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 1000\\) \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 2*10^5\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 4*10^6\\)\uff0c\\(1 \\le x,y \\le 10^9\\) WashSwang's solution Star #include <iostream> using namespace std; int x,y,ans,n,head,rear=-1,c,s[5000000]; long long tol[4]; int parse(int c){ if (c=='U') return 0; if (c=='D') return 1; if (c=='L') return 2; return 3; } inline bool check(long long x){ return (x>=0)&&(x%2==0); } inline long long dist(){ return abs(x-(tol[3]-tol[2]))+abs(y-(tol[0]-tol[1])); } int main() { scanf(\"%d\",&n); ans=n+1; getchar(); for (int i=0;i<n;++i){ c=getchar(); s[i]=parse(c); tol[parse(c)]++; } scanf(\"%d%d\",&x,&y); for (int i=0;i<n;++i){ tol[s[++rear]]--; while (check((rear-head+1)-dist())&&head<=rear){ if (rear-head+1<ans) ans=rear-head+1; tol[s[head++]]++; } } if (ans==n+1) printf(\"-1\"); else printf(\"%d\",ans); return 0; }","title":"4173"},{"location":"nr/4173/#4173-robot","text":"\u9898\u76ee","title":"4173 robot"},{"location":"nr/4173/#washswangs-solution-star","text":"#include <iostream> using namespace std; int x,y,ans,n,head,rear=-1,c,s[5000000]; long long tol[4]; int parse(int c){ if (c=='U') return 0; if (c=='D') return 1; if (c=='L') return 2; return 3; } inline bool check(long long x){ return (x>=0)&&(x%2==0); } inline long long dist(){ return abs(x-(tol[3]-tol[2]))+abs(y-(tol[0]-tol[1])); } int main() { scanf(\"%d\",&n); ans=n+1; getchar(); for (int i=0;i<n;++i){ c=getchar(); s[i]=parse(c); tol[parse(c)]++; } scanf(\"%d%d\",&x,&y); for (int i=0;i<n;++i){ tol[s[++rear]]--; while (check((rear-head+1)-dist())&&head<=rear){ if (rear-head+1<ans) ans=rear-head+1; tol[s[head++]]++; } } if (ans==n+1) printf(\"-1\"); else printf(\"%d\",ans); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4176/","text":"4176 \u5931\u8d25\u94c1\u8def\u7f51 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u4e00\u6761\u5931\u8d25\u7684\u94c1\u8def\u7f51\u7531\u82e5\u5e72\u7ad9\u70b9\u548c\u8f68\u9053\u6784\u6210\u3002\u6bcf\u4e2a\u7ad9\u70b9\u4e0e\u5176\u4ed6\u82e5\u5e72\u4e2a\u7ad9\u70b9\u76f8\u8fde\u3002\u6bcf\u4e2a\u7ad9\u70b9\u6709\u4e00\u4e2a\u5f00\u5173\uff0c\u4f1a\u5c06\u9a76\u5165\u7ad9\u70b9\u7684\u5931\u8d25\u5217\u8f66\u5f15\u5bfc\u5230\u67d0\u4e2a\u76f8\u8fde\u7684\u7ad9\u70b9\u3002\u6bcf\u4e2a\u7ad9\u70b9\u90fd\u6709\u4e00\u4e2a\u521d\u59cb\u6307\u5411\u3002\u73b0\u5728\u5931\u8d25\u8981\u4e58\u5750\u5931\u8d25\u5217\u8f66\u4ece\u8d77\u70b9\u5230\u8fbe\u7ec8\u70b9\u3002\u4f46\u662f\u7531\u4e8e\u8fd9\u4e2a\u94c1\u8def\u7f51\u5b9e\u5728\u592a\u5931\u8d25\u4e86\uff0c\u6240\u4ee5\u6cbf\u7740\u5404\u4e2a\u7ad9\u70b9\u7684\u521d\u59cb\u6307\u5411\uff0c\u672a\u5fc5\u80fd\u5230\u8fbe\u76ee\u7684\u5730\u3002\u5931\u8d25\u9700\u8981\u8c03\u6574\u94c1\u8def\u7f51\u4e2d\u67d0\u4e9b\u7ad9\u70b9\u7684\u6307\u5411\u624d\u80fd\u5230\u8fbe\u7ec8\u70b9\u3002 \u8bf7\u95ee\u5931\u8d25\u81f3\u5c11\u9700\u8981\u8c03\u6574\u51e0\u4e2a\u7ad9\u70b9\u7684\u6307\u5411\uff1f \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u5305\u542b\u4e09\u4e2a\u6b63\u6574\u6570n, a, b\u3002 \u8868\u793a\u7ad9\u70b9\u6570\u91cf\u3001\u8d77\u70b9\u3001\u7ec8\u70b9 \u63a5\u4e0b\u6765N\u884c\u8868\u793a\uff0c\u6bcf\u884c\u7b2c\u4e00\u4e2a\u6570\u5b57Ki\u8868\u793a\u4e0e\u8fd9\u4e2a\u7ad9\u70b9\u76f8\u8fde\u7684\u7ad9\u70b9\u7684\u6570\u91cf\uff0c\u63a5\u4e0b\u6765\u7684Ki\u4e2a\u6570\u5b57\u5206\u522b\u8868\u793a\u4e0e\u8be5\u7ad9\u70b9\u76f8\u8fde\u7684\u7ad9\u70b9\u7f16\u53f7\u3002\u9ed8\u8ba4\u6307\u5411\u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u7684\u7ad9\u70b9\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u4ecea\u5230b\u6700\u5c11\u9700\u8981\u8c03\u6574\u51e0\u4e2a\u7ad9\u70b9\u7684\u6307\u5411\u3002\u5982\u679c\u65e0\u6cd5\u4ecea\u5230\u8fbeb\uff0c\u8f93\u51fa-1 \u6837\u4f8b\u8f93\u5165 3 2 1 2 2 3 2 3 1 2 1 2 \u6837\u4f8b\u8f93\u51fa 0 \u6570\u636e\u8303\u56f4 2<=N<=1000, 1<=A,B<=N WashSwang's solution Star #include <iostream> #include <cstring> using namespace std; struct node{ int val,p; } h[1001],cur; int n,nxt,a,b,len,pos[1001],way[1001][1001],k[1001],ans[1001]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && h[l].val < h[x].val) smallest = l; if (r <= len && h[r].val < h[smallest].val) smallest = r; if (smallest != x) { swap(pos[h[smallest].p],pos[h[x].p]); swap(h[smallest],h[x]); x = smallest; } else break; } } node pop(){ node ret=h[1]; pos[ret.p]=0; h[1]=h[len--]; pos[h[1].p]=1; minheapify(1); return ret; } void insert(int val,int p){ int i=++len; pos[p]=len; h[len].val=val; h[len].p=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } void modify(int val,int p){ h[p].val=val; int i=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } int main() { scanf(\"%d%d%d\",&n,&a,&b); for (int i=1;i<=n;++i){ scanf(\"%d\",&k[i]); for (int j=0;j<k[i];++j) scanf(\"%d\",&way[i][j]); ans[i]=-1; } insert(0,a); while (len>0){ cur=pop(); ans[cur.p]=cur.val; if (k[cur.p]>0) { nxt=way[cur.p][0]; if (pos[nxt]) { if (cur.val < h[nxt].val) modify(cur.val, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val,nxt); for (int i=1;i<k[cur.p];++i) { nxt=way[cur.p][i]; if (pos[nxt]) { if (cur.val + 1 < h[nxt].val) modify(cur.val + 1, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val+1,nxt); } } } printf(\"%d\",ans[b]); return 0; }","title":"4176"},{"location":"nr/4176/#4176","text":"\u9898\u76ee","title":"4176 \u5931\u8d25\u94c1\u8def\u7f51"},{"location":"nr/4176/#washswangs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; struct node{ int val,p; } h[1001],cur; int n,nxt,a,b,len,pos[1001],way[1001][1001],k[1001],ans[1001]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && h[l].val < h[x].val) smallest = l; if (r <= len && h[r].val < h[smallest].val) smallest = r; if (smallest != x) { swap(pos[h[smallest].p],pos[h[x].p]); swap(h[smallest],h[x]); x = smallest; } else break; } } node pop(){ node ret=h[1]; pos[ret.p]=0; h[1]=h[len--]; pos[h[1].p]=1; minheapify(1); return ret; } void insert(int val,int p){ int i=++len; pos[p]=len; h[len].val=val; h[len].p=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } void modify(int val,int p){ h[p].val=val; int i=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } int main() { scanf(\"%d%d%d\",&n,&a,&b); for (int i=1;i<=n;++i){ scanf(\"%d\",&k[i]); for (int j=0;j<k[i];++j) scanf(\"%d\",&way[i][j]); ans[i]=-1; } insert(0,a); while (len>0){ cur=pop(); ans[cur.p]=cur.val; if (k[cur.p]>0) { nxt=way[cur.p][0]; if (pos[nxt]) { if (cur.val < h[nxt].val) modify(cur.val, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val,nxt); for (int i=1;i<k[cur.p];++i) { nxt=way[cur.p][i]; if (pos[nxt]) { if (cur.val + 1 < h[nxt].val) modify(cur.val + 1, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val+1,nxt); } } } printf(\"%d\",ans[b]); return 0; }","title":"WashSwang's solution Star"},{"location":"nr/4183/","text":"4183 \u5168\u6392\u5217 \u9898\u76ee \u9898\u76ee\u63cf\u8ff0 \u7ed9\u51fa\u6b63\u6574\u6570n\uff0c1\u5230n\u8fd9n\u4e2a\u6570\u53ef\u4ee5\u6784\u6210n!\u4e2d\u6392\u5217\uff0c\u5c06\u8fd9\u4e9b\u6392\u5217\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u5217\u51fa\u3002\u5982n = 3\u65f6\uff0c\u4f9d\u6b21\u5217\u51fa12 3, 1 3 2, 2 1 3, 2 3 1, 3 1 2, 3 2 1\u8fd9\u516d\u4e2a\u6392\u5217\u3002 \u73b0\u5728\u7ed9\u51fa\u67d0\u4e2a\u6392\u5217\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6392\u5217\u7684\u4e0bk\u4e2a\u6392\u5217\u3002n ... 3 2 1\u4e0b1\u4e2a\u6392\u5217\u662f\u7b2c1\u4e2a\u6392\u52171 2 3 ... n\u3002\u4f8b\u5982\u5728n = 3, k = 2\u65f6\u7ed9\u51fa\u6392\u52172 3 1\uff0c\u5b83\u7684\u4e0b1\u4e2a\u6392\u5217\u662f3 1 2\uff0c\u4e0b2\u4e2a\u6392\u5217\u662f3 2 1\uff0c\u6240\u4ee5\u7b54\u6848\u662f3 2 1\u3002 \u672c\u9898\u7981\u6b62\u4f7f\u7528std::next_permutation\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570m\uff0c\u8868\u793am\u7ec4\u6d4b\u8bd5\u6570\u636e\u3002\u63a5\u4e0b\u6765\u6bcf\u7ec4\u6d4b\u8bd5\u6570\u636e\u7b2c\u4e00\u884c\u662f2\u4e2a\u6b63\u6574\u6570n\u548ck\uff0c\u7b2c\u4e8c\u884c\u662fn\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a1\u5230n\u7684\u4e00\u4e2a\u6392\u5217\u3002 \u8f93\u51fa\u683c\u5f0f \u5bf9\u4e8e\u6bcf\u7ec4\u8f93\u5165\u6570\u636e\uff0c\u8f93\u51fa\u4e00\u884c, n\u4e2a\u6570\uff0c\u4e2d\u95f4\u7528\u7a7a\u683c\u9694\u5f00\uff0c\u8868\u793a\u8f93\u5165\u6392\u5217\u7684\u4e0bk\u4e2a\u6392\u5217\u3002 \u6837\u4f8b\u8f93\u5165 3 3 1 2 3 1 3 1 3 2 1 10 2 1 2 3 4 5 6 7 8 9 10 \u6837\u4f8b\u8f93\u51fa 3 1 2 1 2 3 1 2 3 4 5 6 7 9 8 10 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 6, k = 1, m = 1\\)\u3002 \u5bf9\u4e8e60%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 6, 1 \\le k \\le 10\\)\u3002 \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\\(1 \\le n \\le 1000, 1 \\le k \\le 50, 1 \\le m \\le 10\\)\u3002 vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; int arr[1005]; void rves(int lf, int rh) { int tmp; while (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; ++lf; --rh; } return; } void permutation(int n, int k) { if (!k) return; int i = n - 2, j = n - 1; while (i >= 0 && arr[i] > arr[j]) { --i; --j; } if (i == -1) rves(0, n - 1); else { int l = n - 1; while (arr[i] > arr[l]) --l; int tmp; tmp = arr[l]; arr[l] = arr[i]; arr[i] = tmp; rves(j, n - 1); } permutation(n, --k); return; } int main() { int m; scanf(\"%d\", &m); while (m--) { int n, k; scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%d\", &arr[i]); permutation(n, k); for (int i = 0; i < n; ++i) printf(\"%d \", arr[i]); printf(\"\\n\"); } return 0; }","title":"4183"},{"location":"nr/4183/#4183","text":"\u9898\u76ee","title":"4183 \u5168\u6392\u5217"},{"location":"nr/4183/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; int arr[1005]; void rves(int lf, int rh) { int tmp; while (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; ++lf; --rh; } return; } void permutation(int n, int k) { if (!k) return; int i = n - 2, j = n - 1; while (i >= 0 && arr[i] > arr[j]) { --i; --j; } if (i == -1) rves(0, n - 1); else { int l = n - 1; while (arr[i] > arr[l]) --l; int tmp; tmp = arr[l]; arr[l] = arr[i]; arr[i] = tmp; rves(j, n - 1); } permutation(n, --k); return; } int main() { int m; scanf(\"%d\", &m); while (m--) { int n, k; scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%d\", &arr[i]); permutation(n, k); for (int i = 0; i < n; ++i) printf(\"%d \", arr[i]); printf(\"\\n\"); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4202/","text":"4202 \u690d\u6811\u8282 \u9898\u76ee \u690d\u6811\u8282 \u9898\u76ee\u63cf\u8ff0 \u6625\u5929\u5230\u4e86\uff0c\u540c\u5b66\u4eec\u5728\u9633\u5149\u660e\u5a9a\u7684\u5468\u516d\u6765\u5230\u5c0f\u82b1\u56ed\uff0c\u4ed6\u4eec\u7ad9\u6210\u4e00\u5708\uff0c\u60f3\u5728\u4e00\u4e2a\u73af\u5f62\u7684\u8349\u5730\u4e0a\u5747\u5300\u5730\u79cd\u4e0a\\(n\\)\u68f5\u6811\uff0c\u4f46\u662f\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u571f\u58e4\u90fd\u6709\u5b83\u9002\u5408\u79cd\u7684\u6811\u7684\u79cd\u7c7b\uff0c\u79cd\u5728\u5408\u9002\u7684\u571f\u58e4\u4e0a\u53ef\u4ee5\u63d0\u5347\u8fd9\u79cd\u6811\u7684\u89c2\u8d4f\u4ef7\u503c\u3002 \u540c\u5b66\u4eec\u6253\u7b97\u79cd\\(3\\)\u79cd\u6811\uff0c\u8fd93\u79cd\u6811\u7684\u9ad8\u5ea6\u5206\u522b\u4e3a\\(10,20,30\\)\u3002\u540c\u5b66\u4eec\u5e0c\u671b\u628a\u8fd9\u4e00\u5708\u6811\u79cd\u5f97\u6709\u5c42\u6b21\u611f\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6811\u90fd\u8981\u6c42\u6bd4\u5b83\u76f8\u90bb\u7684\u4e24\u68f5\u6811\u7684\u9ad8\u5ea6\u90fd\u9ad8\u6216\u8005\u90fd\u4f4e\uff0c\u5728\u8fd9\u4e2a\u6761\u4ef6\u4e0b\uff0c\u540c\u5b66\u4eec\u5e0c\u671b\u77e5\u9053\u5982\u4f55\u690d\u6811\uff0c\u624d\u80fd\u4f7f\u89c2\u8d4f\u4ef7\u503c\u603b\u548c\u6700\u9ad8\u3002 \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570\\(n\\)\uff0c\u8868\u793a\u9700\u8981\u79cd\u7684\u6811\u7684\u68f5\u6811\u3002 \u63a5\u4e0b\u6765\\(n\\)\u884c\uff0c\u6bcf\u884c\\(3\\)\u4e2a\u4e0d\u8d85\u8fc7\\(10000\\)\u7684\u6b63\u6574\u6570\\(a_i, b_i, c_i\\)\uff0c\u5206\u522b\u8868\u793a\u4e86\u5728\u7b2c\\(i\\)\u4e2a\u4f4d\u7f6e\u79cd\u9ad8\u5ea6\u4e3a\\(10,20,30\\)\u7684\u6811\u80fd\u83b7\u5f97\u7684\u89c2\u8d4f\u4ef7\u503c\u3002 \u7b2c\\(i\\)\u4e2a\u4f4d\u7f6e\u7684\u6811\u4e0e\u7b2c\\(i+1\\)\u4e2a\u4f4d\u7f6e\u7684\u6811\u76f8\u90bb\uff0c\u7279\u522b\u5730\u8bf7\u6ce8\u610f\uff0c\u7b2c\\(1\\)\u4e2a\u4f4d\u7f6e\u7684\u6811\u4e0e\u7b2c\\(n\\)\u4e2a\u4f4d\u7f6e\u7684\u6811\u76f8\u90bb\u3002 \u8f93\u51fa\u683c\u5f0f \u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u4e3a\u6700\u5927\u7684\u89c2\u8d4f\u4ef7\u503c\u548c\u3002 \u6837\u4f8b\u8f93\u5165 4 1 2 3 4 5 6 7 8 9 1 2 3 \u6837\u4f8b\u8f93\u51fa 19 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e20%\u7684\u6570\u636e\u6709 \\(n\\leq10\\) \u5bf9\u4e8e40%\u7684\u6570\u636e\u6709 \\(n\\leq100\\) \u5bf9\u4e8e60%\u7684\u6570\u636e\u6709 \\(n\\leq1000\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\u6709 \\(4\\leq n\\leq100000\\)\uff0c\u5e76\u4fdd\u8bc1n\u4e00\u5b9a\u4e3a\u5076\u6570\u3002 vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; const int MINNUM = -2147483648; int dp[100005][3][2]; int n; int sum[4]; struct tree { int a, b, c; }arr[100005]; inline int Max(int n1, int n2) { return (n1 > n2 ? n1 : n2); } int Maxsum(int n1, int n2, int n3, int n4) { return Max(Max(n1, n2), Max(n3, n4)); } void Evaluate() { for (int i = 1; i < n; ++i) { dp[i][0][0] = arr[i].a + Max(dp[i - 1][1][1], dp[i - 1][2][1]); dp[i][1][0] = arr[i].b + dp[i - 1][2][1]; dp[i][1][1] = arr[i].b + dp[i - 1][0][0]; dp[i][2][1] = arr[i].c + Max(dp[i - 1][1][0], dp[i - 1][0][0]); } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d\", &arr[i].a, &arr[i].b, &arr[i].c); } dp[0][0][0] = arr[0].a; dp[0][1][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[0] = Max(dp[n - 1][1][1], dp[n - 1][2][1]); dp[0][1][0] = arr[0].b; dp[0][0][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[1] = dp[n - 1][2][1]; dp[0][1][1] = arr[0].b; dp[0][0][0] = dp[0][1][0] = dp[0][2][1] = MINNUM; Evaluate(); sum[2] = dp[n - 1][0][0]; dp[0][2][1] = arr[0].c; dp[0][1][0] = dp[0][1][0] = dp[0][1][1] = MINNUM; Evaluate(); sum[3] = Max(dp[n - 1][0][0], dp[n - 1][1][0]); printf(\"%d\\n\", Maxsum(sum[0], sum[1], sum[2], sum[3])); }","title":"4202"},{"location":"nr/4202/#4202","text":"\u9898\u76ee","title":"4202 \u690d\u6811\u8282"},{"location":"nr/4202/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; const int MINNUM = -2147483648; int dp[100005][3][2]; int n; int sum[4]; struct tree { int a, b, c; }arr[100005]; inline int Max(int n1, int n2) { return (n1 > n2 ? n1 : n2); } int Maxsum(int n1, int n2, int n3, int n4) { return Max(Max(n1, n2), Max(n3, n4)); } void Evaluate() { for (int i = 1; i < n; ++i) { dp[i][0][0] = arr[i].a + Max(dp[i - 1][1][1], dp[i - 1][2][1]); dp[i][1][0] = arr[i].b + dp[i - 1][2][1]; dp[i][1][1] = arr[i].b + dp[i - 1][0][0]; dp[i][2][1] = arr[i].c + Max(dp[i - 1][1][0], dp[i - 1][0][0]); } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d\", &arr[i].a, &arr[i].b, &arr[i].c); } dp[0][0][0] = arr[0].a; dp[0][1][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[0] = Max(dp[n - 1][1][1], dp[n - 1][2][1]); dp[0][1][0] = arr[0].b; dp[0][0][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[1] = dp[n - 1][2][1]; dp[0][1][1] = arr[0].b; dp[0][0][0] = dp[0][1][0] = dp[0][2][1] = MINNUM; Evaluate(); sum[2] = dp[n - 1][0][0]; dp[0][2][1] = arr[0].c; dp[0][1][0] = dp[0][1][0] = dp[0][1][1] = MINNUM; Evaluate(); sum[3] = Max(dp[n - 1][0][0], dp[n - 1][1][0]); printf(\"%d\\n\", Maxsum(sum[0], sum[1], sum[2], sum[3])); }","title":"vvvvv1v's solution Star"},{"location":"nr/4203/","text":"4203 \u8ba1\u6570 \u9898\u76ee \u8ba1\u6570 \u9898\u76ee\u63cf\u8ff0 \u8981\u89e3\u51b3\u7684\u95ee\u9898\u5f88\u7b80\u5355\uff0c\u7ec4\u5408\u6570\\(\\binom{n}{m}\\)\u7684\u503c\u662f\u591a\u5c11 \u5f53\u7136\uff0c\u5b83\u5f88\u5bb9\u6613\u592a\u5927\u4ee5\u81f4\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0c\u4e3a\u4e86\u4e13\u6ce8\u4e8e\u6709\u610f\u4e49\u7684\u95ee\u9898\u6211\u4eec\u53ea\u8981\u8f93\u51fa\u7b54\u6848\u5bf9\\(1e9+7\\)\u53d6\u6a21\u5373\u53ef \u6570\u5b66\u5c0f\u77e5\u8bc6 \u8d39\u9a6c\u5c0f\u5b9a\u7406:\u82e5\u6709\u8d28\u6570\\(p\\)\uff0c\u4e14\u6709\\(\\gcd(x,p)=1\\)\uff0c\u5219\\(x^{p-1}\\equiv1(\\mod p)\\) \u8f93\u5165\u683c\u5f0f \u7b2c\u4e00\u884c\u4e00\u4e2a\u6570\\(t\\)\uff0c\u8868\u793a\u5171\u6709\\(t\\)\u4e2a\u9700\u8981\u6c42\u51fa\u7684\u7ec4\u5408\u6570 \u63a5\u4e0b\u6765\\(t\\)\u884c\uff0c\u6bcf\u884c\u4e24\u4e2a\u6570\\(n_i,m_i\\)\u8868\u793a\\(\\binom{n_i}{m_i}\\) \u8f93\u51fa\u683c\u5f0f \u5171\\(t\\)\u884c\uff0c\u6bcf\u884c\u4e00\u4e2a\u6570\u8868\u793a\\(\\binom{n_i}{m_i}\\)\u7684\u503c \u6837\u4f8b\u8f93\u5165 3 4 0 5 5 6 3 \u6837\u4f8b\u8f93\u51fa 1 1 20 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e20%\u7684\u6570\u636e\u6709 \\(n\\leq16\\) \u5bf9\u4e8e50%\u7684\u6570\u636e\u6709 \\(n\\leq30\\) \u5bf9\u4e8e70%\u7684\u6570\u636e\u6709 \\(n\\leq100\\) \\(t\\leq100\\) \u5bf9\u4e8e100%\u7684\u6570\u636e\u6709 \\(0\\leq m\\leq n\\leq1e5\\) \\(1\\leq t\\leq2e4\\) vvvvv1v's solution Star #include <iostream> #include <cstdio> using namespace std; const int P = 1000000007; const int MAXNUM = 100002; long long fac[MAXNUM]; long long quickpow(long long a, long long k, int p) { long long result = 1; long long tmp = a % p; while (k) { if (k & 1) result = result * tmp % p; tmp = tmp * tmp % p; k >>= 1; } return result; } long long C(long long n, long long m, int p) { if (m > n) return 0; return fac[n] * quickpow(fac[m], p - 2, p) % p * quickpow(fac[n - m], p - 2, p) % p; } long long Lucas(long long n, long long m, int p) { long long result = 1; while (n && m) { result = result * C(n % p, m % p, p) % p; n /= p; m /= p; } return result; } void init(int p) { fac[0] = 1; for (int i = 1; i <= MAXNUM; ++i) fac[i] = fac[i - 1] * i % p; } int main() { init(P); long long n, m; int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld%lld\", &n, &m); printf(\"%lld\\n\", C(n, m, P)); } return 0; }","title":"4203"},{"location":"nr/4203/#4203","text":"\u9898\u76ee","title":"4203 \u8ba1\u6570"},{"location":"nr/4203/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstdio> using namespace std; const int P = 1000000007; const int MAXNUM = 100002; long long fac[MAXNUM]; long long quickpow(long long a, long long k, int p) { long long result = 1; long long tmp = a % p; while (k) { if (k & 1) result = result * tmp % p; tmp = tmp * tmp % p; k >>= 1; } return result; } long long C(long long n, long long m, int p) { if (m > n) return 0; return fac[n] * quickpow(fac[m], p - 2, p) % p * quickpow(fac[n - m], p - 2, p) % p; } long long Lucas(long long n, long long m, int p) { long long result = 1; while (n && m) { result = result * C(n % p, m % p, p) % p; n /= p; m /= p; } return result; } void init(int p) { fac[0] = 1; for (int i = 1; i <= MAXNUM; ++i) fac[i] = fac[i - 1] * i % p; } int main() { init(P); long long n, m; int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld%lld\", &n, &m); printf(\"%lld\\n\", C(n, m, P)); } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4204/","text":"4204 \u5c0f\u8fdc\u5403\u6c34\u679c \u9898\u76ee \u5c0f\u8fdc\u5403\u6c34\u679c \u9898\u76ee\u63cf\u8ff0 \u8fd8\u8bb0\u5f97\u53bb\u5e74\u4e1c\u65b9\u7eff\u6d32\u7684\u6545\u4e8b\u5417\uff0c\u6700\u540e\u5c0f\u81f4\u548c\u5c0f\u8fdc\u7684\u5c0f\u7ec4\u83b7\u5f97\u4e86\u76f8\u5f53\u4e0d\u9519\u7684\u6210\u7ee9\u3002\u9762\u5bf9\u4eca\u5e74\u7684\u5c0f\u6545\u4e8b\u8bfe\uff0c\u5c0f\u81f4\u548c\u5c0f\u8fdc\u51b3\u5b9a\u518d\u4e00\u6b21\u548c\u5c0f\u6e90\u5c0f\u601d\u7ec4\u961f\u3002\u67d0\u4e2a\u6674\u6717\u7684\u4e0b\u5348\uff0c\u4ed6\u4eec\u76f8\u805a\u5728\u5496\u5561\u5385\u3002\u5c0f\u8fdc\u56e0\u4e3a\u8bfe\u592a\u591a\u4e86\u6ca1\u5403\u5348\u996d\u3002\u5c0f\u7ec4\u540c\u5b66\u51c6\u5907\u4e00\u8d77\u7ed9\u5c0f\u8fdc\u4e70\u4e00\u4e9b\u6c34\u679c\u3002\u4e8e\u662f\u4ed6\u4eec\u4e00\u8d77\u6765\u5230\u4e86\u5546\u5e97\u3002 \u5bf9\u4e8e\u7b2c$i$\u79cd\u6c34\u679c\uff0c\u5c0f\u7ec4\u540c\u5b66\u9700\u8981\u8d2d\u4e70$V_i$\u65a4\uff0c\u800c\u7b2c$i$\u79cd\u6c34\u679c\uff0c1\u65a4\u82b1\u8d39$a_i$\uff0c2\u65a4\u82b1\u8d39$b_i$\u5143\u3002\u7531\u4e8e\u6c34\u679c\u592a\u591a\u4e86\uff0c\u8bf7\u4f60\u5e2e\u52a9\u6f02\u4eae\u7684\u5c0f\u8fdc\u540c\u5b66\u7b97\u4e00\u7b97\uff0c\u4ed6\u4eec\u6700\u5c11\u8981\u82b1\u8d39\u591a\u5c11\u94b1\u8d2d\u4e70\u6bcf\u4e00\u79cd\u6c34\u679c\u5462\uff1f \u8f93\u5165\u683c\u5f0f \u8f93\u5165\u6570\u636e\u6709\u82e5\u5e72\u884c\uff0c\u7b2c\u4e00\u884c\u4e3a\u6c34\u679c\u7684\u79cd\u7c7b\u6570$q$\u3002 \u4ece\u7b2c\u4e8c\u884c\u5230\u7b2c$q+1$\u884c\uff0c\u6bcf\u884c3\u6574\u6570\u5206\u522b\u4ee3\u8868\u7b2c$i$\u79cd\u6c34\u679c\uff0c\u9700\u8981\u8d2d\u4e70$V_i$\u65a4\uff0c1\u65a4\u82b1\u8d39$a_i$\uff0c2\u65a4\u82b1\u8d39$b_i$\u5143\u3002 \u8f93\u51fa\u683c\u5f0f \u8f93\u51fa$q$\u884c\uff0c\u6bcf\u4e00\u884c\u4e00\u4e2a\u6574\u6570\uff0c\u4e3a\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u6c34\u679c\u6700\u5c11\u9700\u8981\u8d44\u91d1\u3002 \u6837\u4f8b\u8f93\u5165 3 10 1 3 7 3 2 1000000000000 42 88 \u6837\u4f8b\u8f93\u51fa 10 9 42000000000000 \u6570\u636e\u89c4\u6a21 \u5bf9\u4e8e$20\\%$\u7684\u6570\u636e\u6709$q=1$\u3002 \u5bf9\u4e8e$100\\%$\u7684\u6570\u636e\u6709$q\\leq 1000, a_i \\leq 10^9, b_i\\leq 10^9$\u3002 vvvvv1v's solution Star #include <iostream> using namespace std; int main() { long int n; cin >> n; long int v, a, b; for (long int i = 0; i < n; ++i) { cin >> v >> a >> b; if (a <= int(b / 2.0)) { cout << v * a << endl; } else { cout << v / 2 * b + v % 2 * a << endl; } } return 0; }","title":"4204"},{"location":"nr/4204/#4204","text":"\u9898\u76ee","title":"4204 \u5c0f\u8fdc\u5403\u6c34\u679c"},{"location":"nr/4204/#vvvvv1vs-solution-star","text":"#include <iostream> using namespace std; int main() { long int n; cin >> n; long int v, a, b; for (long int i = 0; i < n; ++i) { cin >> v >> a >> b; if (a <= int(b / 2.0)) { cout << v * a << endl; } else { cout << v / 2 * b + v % 2 * a << endl; } } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4205/","text":"4205 Turing Award \u9898\u76ee Description \u56fe\u7075\u5956\uff08\u82f1\u8bed\uff1aACM A.M. Turing Award\uff09\uff0c\u53c8\u8bd1\u675c\u6797\u5956\u3001A.M.\u56fe\u7075\u5956\uff0c\u662f\u8ba1\u7b97\u673a\u534f\u4f1a\uff08ACM\uff09\u4e8e1966\u5e74\u8bbe\u7acb\u7684\u5956\u9879\uff0c\u4e13\u95e8\u5956\u52b1\u5bf9\u8ba1\u7b97\u673a\u4e8b\u4e1a\u4f5c\u51fa\u91cd\u8981\u8d21\u732e\u7684\u4e2a\u4eba\u3002\u5176\u540d\u79f0\u53d6\u81ea\u4e16\u754c\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u3001\u82f1\u56fd\u79d1\u5b66\u5bb6\u3001\u66fc\u5f7b\u65af\u7279\u5927\u5b66\u6559\u6388\u827e\u4f26\u00b7\u56fe\u7075\uff08A.M. Turing\uff09\uff0c\u8fd9\u4e2a\u5956\u8bbe\u7acb\u76ee\u7684\u4e4b\u4e00\u662f\u7eaa\u5ff5\u8fd9\u4f4d\u73b0\u4ee3\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5960\u57fa\u8005\u3002\u83b7\u5956\u8005\u5fc5\u987b\u662f\u5728\u8ba1\u7b97\u673a\u9886\u57df\u5177\u6709\u6301\u4e45\u800c\u91cd\u5927\u7684\u5148\u8fdb\u6027\u7684\u6280\u672f\u8d21\u732e\u3002\u5927\u591a\u6570\u83b7\u5956\u8005\u662f\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6\u3002\u662f\u8ba1\u7b97\u673a\u754c\u6700\u8d1f\u76db\u540d\u7684\u5956\u9879\uff0c\u6709\u201c\u8ba1\u7b97\u673a\u754c\u8bfa\u8d1d\u5c14\u5956\u201d\u4e4b\u79f0\u3002 \u56fe\u7075\u5956\u5f00\u8bbe\u81f3\u4eca\u5df2\u7ecf\u670950\u4f59\u8f7d\uff0c\u5176\u4e2d\u51fa\u4e86\u4e0d\u5c11\u56fe\u7075\u5956\u5f97\u4e3b\uff0cAcemap\u8bfe\u9898\u7ec4\u5728\u56fe\u7075\u595650\u5468\u5e74\u7684\u65f6\u5019\u5236\u4f5c\u4e86\u4e00\u4e2a\u5173\u4e8e\u56fe\u7075\u5956\u5f97\u4e3b\u4ee5\u53ca\u5176\u76f8\u5173\u5408\u4f5c\u8005\u7684\u53ef\u89c6\u5316\u5173\u7cfb\u56fe\uff0chttps://acemap.cn/turing50 \uff08\u4f7f\u7528Google Chrome\u6d4f\u89c8\u5668\u6253\u5f00\u53ef\u4ee5\u8fbe\u5230\u6700\u4f73\u6d4f\u89c8\u6548\u679c\uff09\uff0c\u53ef\u4f9b\u53c2\u8003\u3002 \u672c\u9898\u8981\u6c42\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u94fe\u8868\u63d0\u4f9b\u63d2\u5165\uff0c\u5220\u9664\uff0c\u7d22\u5f15\u7b49\u64cd\u4f5c\u3002\u94fe\u8868\u4e2d\u50a8\u5b58\u4e86\u56fe\u7075\u5956\u5f97\u4e3b\u7684\u83b7\u5956\u5e74\u4efd\u548c\u540d\u5b57\u3002\u8981\u6c42\u6309\u7167\u83b7\u5956\u5e74\u4efd\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u5982\u679c\u4e24\u4e2a\u5f97\u4e3b\u83b7\u5956\u5e74\u4efd\u4e00\u81f4\uff0c\u5219\u6309\u7167\u540d\u5b57\u7684\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u5177\u4f53\u8981\u6c42\u89c1\u4e0b\u65b9\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\u8bf4\u660e\u3002 Input Format \u7b2c\u4e00\u884c\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u603b\u5171\u7684\u64cd\u4f5c\u6b21\u6570\u3002 \u63a5\u4e0b\u6765\u603b\u5171N\u884c\uff0c\u6bcf\u884c\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u3002 \u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u6307\u793a\u64cd\u4f5c\u7684\u7c7b\u578b\uff0c\u5206\u522b\u6709insert, delete, list\u4e09\u79cd\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u683c\u5f0f\u5982\u4e0b\u3002 \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u662finsert\uff0c\u5219\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u4e3a\u8be5\u56fe\u7075\u5f97\u4e3b\u7684\u83b7\u5956\u5e74\u4efd\uff0c\u5269\u4f59\u5b57\u6bb5\u4e3a\u56fe\u7075\u5f97\u4e3b\u7684\u540d\u5b57\uff08\u6ce8\u610f\u540d\u5b57\u4e2d\u53ef\u80fd\u6709\u7a7a\u683c\uff09\u3002\u7a0b\u5e8f\u6267\u884c\u63d2\u5165\u64cd\u4f5c\uff0c\u5c06\u8be5\u5f97\u4e3b\u63d2\u5165\u94fe\u8868\u4e2d\uff0c\u5e76\u4e14\u4fdd\u6301\u5f97\u5956\u5e74\u4efd\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u6392\u5217\uff08\u5982\u679c\u6709\u4e24\u4e2a\u5f97\u4e3b\u7684\u5e74\u4efd\u4e00\u81f4\uff0c\u5219\u6309\u7167\u5176\u540d\u5b57\u7684\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\uff09\u3002 \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u662fdelete\uff0c\u5219\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u6b63\u6574\u6570i\uff0c\u8868\u793a\u5220\u9664\u94fe\u8868\u4e2d\u7b2ci\u4e2a\u7ed3\u70b9\uff08\u4ece1\u5f00\u59cb\u7b97\uff0c\u4e0d\u4ece0\u5f00\u59cb\uff09\u3002 \u5982\u679c\u7b2c\u4e00\u4e2a\u5b57\u6bb5\u662flist\uff0c\u5219\u7b2c\u4e8c\u4e2a\u5b57\u6bb5\u662f\u4e00\u4e2a\u6b63\u6574\u6570i\uff0c\u8868\u793a\u6253\u5370\u51fa\u7b2ci\u4e2a\u7ed3\u70b9\uff08\u4ece1\u5f00\u59cb\u7b97\uff0c\u4e0d\u4ece0\u5f00\u59cb\uff09\u7684\u56fe\u7075\u5f97\u4e3b\u7684\u83b7\u5956\u5e74\u4efd\u548c\u540d\u5b57\u3002\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 Output Format \u5bf9\u4e8e\u6bcf\u4e2alist\u64cd\u4f5c\uff0c\u8f93\u51fa\u4e00\u884c\uff0c\u8868\u793a\u76f8\u5bf9\u5e94\u56fe\u7075\u5f97\u4e3b\u7684\u83b7\u5956\u5e74\u4efd\u548c\u540d\u5b57\uff0c\u4e2d\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002 Sample Input 10 insert 1982 Stephen A. Cook insert 2002 Adi Shamir list 1 list 2 delete 2 insert 2014 Michael Stonebraker insert 2004 Robert E. Kahn list 3 delete 1 list 1 Sample Output 1982 Stephen A. Cook 2002 Adi Shamir 2014 Michael Stonebraker 2004 Robert E. Kahn Limits \u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c\u540d\u5b57\u4e0d\u8d85\u8fc730\u4e2a\u5b57\u7b26\uff0cN <= 3000\u3002 \u6570\u636e\u4fdd\u8bc1\u6240\u6709\u64cd\u4f5c\u90fd\u5408\u6cd5\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8d8a\u754c\u7684\u60c5\u51b5\u3002 \u5e94\u5f53\u4f7f\u7528\u94fe\u8868\u6765\u5b9e\u73b0\uff0c\u4e0d\u4f7f\u7528\u94fe\u8868\u5f970\u5206\u3002 vvvvv1v's solution Star #include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; class sLinkList { public: sLinkList() { head = new node; currentLength = 0; } void clear() { node *p = head->next, *q; head->next = NULL; while (p != NULL) { q = p->next; delete p; p = q; } currentLength = 0; } void ins() { int year; string name; cin >> year; getline(cin, name); name.erase(name.begin()); //cout << year << name << endl; node *pos = head, *tmp = new node(year, name, NULL); while (pos->next != NULL && compare(tmp, pos->next) > 0) pos = pos->next; pos->next = new node(year, name, pos->next); ++currentLength; delete tmp; } void del() { int i; cin >> i; --i; node *pos, *delp; pos = move(i - 1); delp = pos->next; pos->next = delp->next; delete delp; --currentLength; } void list() const { int i; cin >> i; --i; node *p = move(i); cout << p->year << ' ' << p->name << endl; } ~sLinkList() { clear(); delete head; } private: struct node { int year; string name; node *next; node(const int &y, const string &m, node *n = NULL) : year(y), name(m), next(n) {} node() : next(NULL) {} ~node() {} }; node *head; int currentLength; node *move(int i) const { node *p = head; while (i-- >= 0) p = p->next; return p; } int compare(node *a, node *b) { if (a->year < b->year) return -1; else if (a->year > b->year) return 1; else { if (strcmp(a->name.c_str(), b->name.c_str()) < 0) return -1; else if (strcmp(a->name.c_str(), b->name.c_str()) > 0) return 1; else return 0; } } }; int main() { int N; cin >> N; char order[10]; sLinkList winner; for (int i = 0; i < N; ++i) { cin >> order; switch (order[0]) { case 'i': winner.ins(); break; case 'd': winner.del(); break; case 'l': winner.list(); break; } } return 0; }","title":"4205"},{"location":"nr/4205/#4205-turing-award","text":"\u9898\u76ee","title":"4205 Turing Award"},{"location":"nr/4205/#vvvvv1vs-solution-star","text":"#include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; class sLinkList { public: sLinkList() { head = new node; currentLength = 0; } void clear() { node *p = head->next, *q; head->next = NULL; while (p != NULL) { q = p->next; delete p; p = q; } currentLength = 0; } void ins() { int year; string name; cin >> year; getline(cin, name); name.erase(name.begin()); //cout << year << name << endl; node *pos = head, *tmp = new node(year, name, NULL); while (pos->next != NULL && compare(tmp, pos->next) > 0) pos = pos->next; pos->next = new node(year, name, pos->next); ++currentLength; delete tmp; } void del() { int i; cin >> i; --i; node *pos, *delp; pos = move(i - 1); delp = pos->next; pos->next = delp->next; delete delp; --currentLength; } void list() const { int i; cin >> i; --i; node *p = move(i); cout << p->year << ' ' << p->name << endl; } ~sLinkList() { clear(); delete head; } private: struct node { int year; string name; node *next; node(const int &y, const string &m, node *n = NULL) : year(y), name(m), next(n) {} node() : next(NULL) {} ~node() {} }; node *head; int currentLength; node *move(int i) const { node *p = head; while (i-- >= 0) p = p->next; return p; } int compare(node *a, node *b) { if (a->year < b->year) return -1; else if (a->year > b->year) return 1; else { if (strcmp(a->name.c_str(), b->name.c_str()) < 0) return -1; else if (strcmp(a->name.c_str(), b->name.c_str()) > 0) return 1; else return 0; } } }; int main() { int N; cin >> N; char order[10]; sLinkList winner; for (int i = 0; i < N; ++i) { cin >> order; switch (order[0]) { case 'i': winner.ins(); break; case 'd': winner.del(); break; case 'l': winner.list(); break; } } return 0; }","title":"vvvvv1v's solution Star"},{"location":"nr/4268/","text":"4268 \u52a9\u6559\u5403\u706b\u9505 \u9898\u76ee Description \u7531\u4e8e\u6570\u636e\u7ed3\u6784\u8bfe\u7a0b\u592a\u706b\u7206\uff0c\u5f00\u4e86\u597d\u591a\u7684\u73ed\u7ea7\uff0c\u6bcf\u4e2a\u73ed\u7ea7\u90fd\u6709\u81f3\u5c11\u6709\u4e00\u4e2a\u52a9\u6559\u3002\u6709\u4e00\u5929 N \u4e2a\u52a9\u6559\u5750\u5728\u4e00\u4e2a\u5927\u5706\u684c\u524d\u9762\u5403\u706b\u9505\uff0c\u4f46\u662f\u4ed6\u4eec\u7531\u4e8e\u4eba\u6570\u592a\u591a\u5bfc\u81f4\u996d\u4e0d\u592a\u591f\u5403\u4e86\u3002\u4e8e\u662f\u4ed6\u4eec\u51b3\u5b9a\u7528\u4e00\u79cd\u53e4\u8001\u7684\u65b9\u6cd5\u6bcf\u6b21\u9009\u62e9\u4e00\u4e2a\u52a9\u6559\u51fa\u53bb\u7ee7\u7eed\u505a\u996d\uff0c\u53ea\u6709\u7b49\u6700\u540e\u4e00\u4e2a\u5750\u5728\u684c\u5b50\u4e0a\u7684\u52a9\u6559\u4e5f\u53c2\u4e0e\u505a\u996d\u4e4b\u540e\u4ed6\u4eec\u624d\u80fd\u518d\u56de\u6765\u3002\u4ed6\u4eec\u6bcf\u4eba\u6309\u5ea7\u4f4d\u987a\u5e8f\u9886\u4e86\u4e00\u4e2a\u7f16\u53f7\u8d34\u5728\u81ea\u5df1\u7684\u5ea7\u4f4d\u4e0a\uff0c\u7136\u540e\u4ece 1 \u53f7\u5ea7\u4f4d\u7684\u52a9\u6559\u5f00\u59cb\u6309\u987a\u5e8f\u62a5\u6570\uff0c\u62a5\u5230 M \u7684\u4eba\u51fa\u5c40, \u7136\u540e\u4e0b\u4e00\u4e2a\u4eba\u91cd\u65b0\u4ece 1 \u5f00\u59cb\u62a5\u6570\u3002\u53c2\u4e0e\u8fd9\u6837\u4e00\u4e2a\u6e38\u620f\uff0c\u5f53\u7136\u662f\u5403\u5230\u6700\u540e\u624d\u80fd\u5403\u7684\u6700\u597d\uff0c\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5982\u679c\u662f\u53c2\u4e0e\u8fd9\u6837\u4e00\u4e2a\u805a\u4f1a\uff0c\u600e\u4e48\u624d\u80fd\u5403\u5230\u6700\u540e\u5462\uff0c\u5e2e\u4f60\u4eec\u7684\u52a9\u6559\u9009\u4e2a\u5ea7\u4f4d\u5427~ Input Format \u6bcf\u884c\u8f93\u5165\u4e00\u4e2a N, \u4e00\u4e2a M Output Format \u8f93\u51fa\u4e00\u4e2a\u5ea7\u4f4d\u7f16\u53f7 Sample Input 3 2 Sample Output 3 VictriD's solution Star #include <iostream> using namespace std; int next(bool table[], int total, int start, int step); int main() { int N; int M; int start = 0; cin >> N >> M; bool *table = new bool[N]; for (int n = 0; n < N; n++) table[n] = true; start = 0; for (int i = 1; i <= N; i++) { start = next(table, N, start, M); table[start] = false; } cout << start + 1; return 0; } int next(bool table[], int total, int start, int step) { while (step != 0) { if (table[start]) step--; if (step == 0) return start; ++start; if (start == total) start = 0; } }","title":"4268"},{"location":"nr/4268/#4268","text":"\u9898\u76ee","title":"4268 \u52a9\u6559\u5403\u706b\u9505"},{"location":"nr/4268/#victrids-solution-star","text":"#include <iostream> using namespace std; int next(bool table[], int total, int start, int step); int main() { int N; int M; int start = 0; cin >> N >> M; bool *table = new bool[N]; for (int n = 0; n < N; n++) table[n] = true; start = 0; for (int i = 1; i <= N; i++) { start = next(table, N, start, M); table[start] = false; } cout << start + 1; return 0; } int next(bool table[], int total, int start, int step) { while (step != 0) { if (table[start]) step--; if (step == 0) return start; ++start; if (start == total) start = 0; } }","title":"VictriD's solution Star"},{"location":"nr/4269/","text":"4269 \u52a9\u6559\u7684\u5bfb\u5b9d\u4e4b\u65c5 \u9898\u76ee Description \u52a9\u6559\u6765\u5230\u4e86\u4e00\u4e2a\u7fa4\u5c9b\uff0c\u5176\u4e2d\u4e00\u4e2a\u5c9b\u4e0a\u85cf\u6709\u4ece\u524d\u5927\u6d77\u76d7\u79bb\u5f00\u65f6\u5019\u6ca1\u6709\u6765\u5f97\u53ca\u5e26\u8d70\u7684\u5b9d\u85cf\u3002\u52a9\u6559\u975e\u5e38\u60f3\u8981\u5f97\u5230\u8fd9\u4e2a\u5927\u5b9d\u85cf\u3002\u4e3a\u4e86\u5f97\u5230\u8fd9\u4e2a\u5b9d\u85cf\uff0c\u52a9\u6559\u9700\u8981\u5f97\u5230\u4e00\u4e2a\u8d70\u5411\u771f\u6b63\u5b9d\u85cf\u6240\u5728\u5c9b\u5c7f\u7684\u8def\u7ebf\u3002\u5b88\u536b\u8001\u4eba\u7ed9\u4e86\u52a9\u6559\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e2d\u5305\u542b\u4e86\u8fd9\u4e2a\u79d8\u5bc6\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u5b57\u4ece\u524d\u9762\u770b\u548c\u4ece\u540e\u9762\u770b\u90fd\u662f\u76f8\u540c\u7684(\u56de\u6587\u6570)\uff0c\u6570\u5b57\u4ee3\u8868\u7684\u5c9b\u5c7f\u7f16\u53f7\u5c31\u662f\u5b9d\u85cf\u7684\u85cf\u8eab\u5730\u70b9\u3002\u5982\u679c\u4e0d\u662f\u7684\u8bdd\uff0c\u5c31\u8981\u628a\u6570\u5b57\u4e0e\u8fd9\u4e2a\u6570\u5b57\u7684\u9006\u5e8f\u6570\u5b57\u76f8\u52a0\uff0c\u76f4\u5230\u5f97\u5230\u8fd9\u6837\u4e00\u4e2a\u5947\u7279\u7684\u6570\u5b57\uff08\u6bd4\u5982 12 -> (12 + 21) 33 bingo!\uff09\u3002\u7531\u6b64\u5f62\u6210\u7684\u8def\u7ebf\u5c31\u662f\u5b89\u5168\u7684\u524d\u8fdb\u8def\u7ebf\u3002\u806a\u660e\u7684\u4f60\uff0c\u5feb\u6765\u5e2e\u52a9\u6559\u627e\u5230\u5b89\u5168\u7684\u5bfb\u5b9d\u8def\u7ebf\u5427\u3002 Input Format \u4e00\u4e2a\u6b63\u6574\u6570 \u7279\u522b\u8bf4\u660e\uff1a\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u6570\u5b57\u4e0d\u4f1a\u8d85\u8fc7 2^31\uff0c\u5e76\u4e14\u7a0b\u5e8f\u4e00\u5b9a\u4f1a\u7ec8\u6b62\u3002 Output Format \u7b2c\u4e00\u884c\u8f93\u51fa\u52a9\u6559\u9700\u8981\u51e0\u6b65\u624d\u80fd\u8d70\u5230\u5b9d\u85cf\u3002 \u7b2c\u4e8c\u884c\u8f93\u51fa\u52a9\u6559\u7684\u524d\u8fdb\u8def\u7ebf\u3002 Sample Input 12345 57392 Sample Output 1 12345--->66666 3 57392--->86767--->163535--->698896 VictriD's solution Star #include <iostream> #include <cmath> using namespace std; int Invert(int); int main(){ int n; cin>>n; //get step. int step = 0; int n_op=n; while(n_op!=Invert(n_op)){ n_op+=Invert(n_op); step++; } //print step. bool INI_FLAG=false; cout<<step<<endl; cout << n; while(n!=Invert(n)){ cout << \"--->\"; n+=Invert(n); cout << n; } return 0; } int Invert(int n){ int a=0; while(n>0){ a=a*10+n%10; n/=10; } return a; }","title":"4269"},{"location":"nr/4269/#4269","text":"\u9898\u76ee","title":"4269 \u52a9\u6559\u7684\u5bfb\u5b9d\u4e4b\u65c5"},{"location":"nr/4269/#victrids-solution-star","text":"#include <iostream> #include <cmath> using namespace std; int Invert(int); int main(){ int n; cin>>n; //get step. int step = 0; int n_op=n; while(n_op!=Invert(n_op)){ n_op+=Invert(n_op); step++; } //print step. bool INI_FLAG=false; cout<<step<<endl; cout << n; while(n!=Invert(n)){ cout << \"--->\"; n+=Invert(n); cout << n; } return 0; } int Invert(int n){ int a=0; while(n>0){ a=a*10+n%10; n/=10; } return a; }","title":"VictriD's solution Star"},{"location":"nr/4272/","text":"4272 \u60ca\u5947\u6570 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u5982\u679c\u4e00\u4e2a\u6570\u7684\u8d28\u56e0\u5b50\u53ea\u67092\u30013\u30015\u30017\uff0c\u6211\u4eec\u5b9a\u4e49\u8be5\u6570\u4e3a\u60ca\u5947\u6570\uff08Marvel Number\uff09\u3002 \u6ce8\u610f\uff1a1\u4e5f\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u60ca\u5947\u6570\u3002\u4f8b\u5982\uff1a 1 = 1 // 1 is a Marvel Number. 6 = 2 * 3 // 6 is a Marvel Number. 60 = 2 * 2 * 3 * 5 // 60 is a Marvel Number. 420 = 2 * 2 * 3 * 5 * 7 // 420 is a Marvel Number. 2310 = 2 * 3 * 5 * 7 * 11 // 2310 is NOT a Marvel Number. - \u7f16\u5199\u7a0b\u5e8f\uff0c\u8bfb\u5165\u4e24\u4e2a\u6574\u6570a\u548cb\uff0c\u8ba1\u7b97\u5e76\u8f93\u51fa\u95ed\u533a\u95f4[a,b]\u4e2d\u7684 \u60ca\u5947\u6570 \u3002 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4e3a\u4e24\u4e2a \u6574\u6570 \uff08\u5728\u95ee\u9898\u63cf\u8ff0\u4e2d\u8bb0\u4f5ca\u548cb\uff0c\u7a0b\u5e8f\u4e2d\u8bf7\u81ea\u5b9a\u53d8\u91cf\u540d\uff09,a\u548cb\u4f7f\u7528 1\u4e2a\u7a7a\u683c \u5206\u9694\u3002 \u8f93\u51fa \u8f93\u51fa\u95ed\u533a\u95f4[a,b]\u4e2d\u7684\u6240\u6709 \u60ca\u5947\u6570 \u3002 \u6570\u636e\u4e4b\u95f4\u7528 \u6362\u884c\u7b26 \u5206\u9694\u3002 \u5982\u679c\u8f93\u5165\u9519\u8bef\uff0c\u8f93\u51fa\u63d0\u793a\u4fe1\u606f error \u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230 \u60ca\u5947\u6570 \uff0c\u8f93\u51fa\u63d0\u793a\u4fe1\u606f no \u3002 \u6570\u636e\u8303\u56f4\u8bf4\u660e \u672c\u6b21\u8003\u8bd5\u4e2d\uff0c \u60ca\u5947\u6570 \u9650\u5b9a\u8303\u56f4\u4e3a 5\u4f4d\u4ee5\u5185\u6b63\u6574\u6570 \uff0c\u5373\u8f93\u5165\u8303\u56f4\u4e3a[1, 99999]\uff0c\u5176\u4ed6\u6570\u636e\u5747\u8f93\u51fa error \u3002 \u6d4b\u8bd5\u96c6\u8f93\u5165\u6570\u636e\u5747\u5728int\u8303\u56f4\u5185\u3002 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b \u793a\u4f8b1 Sample Input 1 200 220 Sample Output 1 200 210 216 \u793a\u4f8b2 Sample Input 2 -6 7 Sample Output 2 error \u793a\u4f8b3 Sample Input 3 13 13 Sample Output 3 no \u793a\u4f8b4 Sample Input 4 1 20 Sample Output 4 1 2 3 4 5 6 7 8 9 10 12 14 15 16 18 20 \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u5165\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include <iostream> using namespace std; bool isMarvel(int number) { while (number % 2 == 0) number /= 2; while (number % 3 == 0) number /= 3; while (number % 5 == 0) number /= 5; while (number % 7 == 0) number /= 7; return number == 1; } int main() { int Minimum, Maximum; cin >> Minimum >> Maximum; // error leads to quit if (Minimum < 1 || Minimum > 99999 || Minimum > Maximum) { cout << \"error\"; return 0; } // go through limits bool FOUND_FLAG = false; for (int i = Minimum; i <= Maximum; i++) { if (isMarvel(i)) { if (FOUND_FLAG) cout << endl; FOUND_FLAG = true; cout << i; } } if (!FOUND_FLAG) cout << \"no\"; return 0; }","title":"4272"},{"location":"nr/4272/#4272","text":"\u9898\u76ee","title":"4272 \u60ca\u5947\u6570"},{"location":"nr/4272/#victrids-solution-star","text":"#include <iostream> using namespace std; bool isMarvel(int number) { while (number % 2 == 0) number /= 2; while (number % 3 == 0) number /= 3; while (number % 5 == 0) number /= 5; while (number % 7 == 0) number /= 7; return number == 1; } int main() { int Minimum, Maximum; cin >> Minimum >> Maximum; // error leads to quit if (Minimum < 1 || Minimum > 99999 || Minimum > Maximum) { cout << \"error\"; return 0; } // go through limits bool FOUND_FLAG = false; for (int i = Minimum; i <= Maximum; i++) { if (isMarvel(i)) { if (FOUND_FLAG) cout << endl; FOUND_FLAG = true; cout << i; } } if (!FOUND_FLAG) cout << \"no\"; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4273/","text":"4273 \u9752\u86d9\u8df3\u8377\u53f6 \u9898\u76ee \u95ee\u9898\u63cf\u8ff0 \u5728\u4e00\u6761\u6a2a\u8f74\u4e0a \u7b49\u8ddd\u79bb\u7684 \u751f\u957f\u7740 \u4e00\u6392 \u8377\u53f6\uff0c\u5171 n \u4e2a\u3002\u8377\u53f6\u5750\u6807\u4e3a \uff081\uff0c0\uff09\u3001\uff082\uff0c0\uff09\u3001\uff083\uff0c0\uff09\u3001\u2026\u2026\u3001\uff08n\uff0c0\uff09 \u3002 \u4e00\u53ea\u9752\u86d9\u5728\u5750\u6807\u539f\u70b9 \uff080\uff0c0\uff09 \u5904\u3002\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df31\u4e2a\u8377\u53f6\uff0c\u4e5f\u53ef\u4ee5\u8df32\u4e2a\u8377\u53f6\u3002 \u6c42\u9752\u86d9\u8df3\u5230\u7b2cn\u4e2a\u8377\u53f6\u4e0a\uff0c\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f\uff08\u6ce8\uff1a\u6b21\u5e8f\u4e0d\u540c\u7b97\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u5982\u5148\u8df31\u4e2a\u8377\u53f6\u518d\u8df32\u4e2a\u8377\u53f6\uff0c\u548c\u5148\u8df32\u4e2a\u8377\u53f6\u518d\u8df31\u4e2a\u8377\u53f6\u4e3a\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff09 \u8f93\u5165\u8f93\u51fa\u63cf\u8ff0 \u8f93\u5165 \u8f93\u5165\u4ee3\u8868 \u8377\u53f6\u4e2a\u6570 \uff08\u5728\u95ee\u9898\u63cf\u8ff0\u4e2d\u8bb0\u4f5cn\uff0c\u7a0b\u5e8f\u4e2d\u8bf7\u81ea\u5b9a\u53d8\u91cf\u540d\uff09\u3002 \u8f93\u51fa \u8f93\u51fa\u4e00\u4e2a\u6574\u6570\uff0c\u8868\u793a\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u5982\u679c\u8f93\u5165\u9519\u8bef\uff0c\u8f93\u51fa\u63d0\u793a\u4fe1\u606f error \u3002 \u6570\u636e\u8303\u56f4\u8bf4\u660e \u672c\u9898\u4e2d\uff0c\u8377\u53f6\u4e2a\u6570\u4e3a1\u523090\uff0c\u5176\u4ed6\u4e2a\u6570\u5747\u8f93\u51fa error \u3002 \u6d4b\u8bd5\u96c6\u8f93\u5165\u6570\u636e\u5747\u5728int\u8303\u56f4\u5185\u3002 \u7a0b\u5e8f\u8fd0\u884c\u793a\u4f8b \u793a\u4f8b1 Sample Input 1 200 Sample Output 1 error \u793a\u4f8b2 Sample Input 2 4 Sample Output 2 5 \u793a\u4f8b3 Sample Input 3 -1 Sample Output 3 error \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f \uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a \u9519\u8bef \u3002 \u6ce8\u610f\u5224\u65ad \u8f93\u5165\u4fe1\u606f \u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star #include <iostream> using namespace std; int main() { int n; cin >> n; if (n < 1 || n > 90) { cout << \"error\"; return 0; } long long step[] = {1, 1}; for (int i = 2; i <= n; ++i) step[i % 2] += step[(i + 1) % 2]; cout << step[n % 2]; return 0; }","title":"4273"},{"location":"nr/4273/#4273","text":"\u9898\u76ee","title":"4273 \u9752\u86d9\u8df3\u8377\u53f6"},{"location":"nr/4273/#victrids-solution-star","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; if (n < 1 || n > 90) { cout << \"error\"; return 0; } long long step[] = {1, 1}; for (int i = 2; i <= n; ++i) step[i % 2] += step[(i + 1) % 2]; cout << step[n % 2]; return 0; }","title":"VictriD's solution Star"},{"location":"nr/4282/","text":"4282 \u9006\u5e8f\u6253\u5370 \u9898\u76ee Description \u7f16\u5199\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5b83\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u53c2\u6570\u7c7b\u578b\u53ef\u4ee5\u4e3a\u6b63\u6574\u6570\u6216\u662f\u5b57\u7b26\u4e32\u3002\u8be5\u51fd\u6570\u6309\u9006\u5e8f\u6253\u5370\u51fa\u53c2\u6570\u7684\u503c\u3002 \u6ce8\u610f\uff1a\u4f7f\u7528\u9012\u5f52\u548c\u51fd\u6570\u91cd\u8f7d\u3002 Input Format \u8f93\u5165\u67092\u884c\u3002 \u7b2c\u4e00\u884c\u4e3a0\u62161,\u5176\u4e2d0\u8868\u793a\u8f93\u5165\u4e3a\u6b63\u6574\u6570\uff0c1\u8868\u793a\u8f93\u5165\u4e3a\u5b57\u7b26\u4e32\uff1b \u7b2c\u4e8c\u884c\u8f93\u5165\u7684\u53c2\u6570\uff1a\u6b63\u6574\u6570n\u6216\u662f\u5b57\u7b26\u4e32A\uff0c\u5176\u4e2d0<n<$10^{20}$, A\u957f\u5ea6\u5c0f\u4e8e1000\u3002 \u6bcf\u884c\u4ee5\u56de\u8f66\u7ed3\u675f\u3002 Output Format \u4e00\u884c\uff0c\u9006\u5e8f\u6253\u5370\u8f93\u5165 Sample Input 0 12345 Sample Output 54321 Sample Input 1 zhao Sample Output oahz \u6ce8\u610f \u4e0d\u8981\u663e\u793a\u591a\u4f59\u7684\u63d0\u793a\u4fe1\u606f\uff0c\u907f\u514d\u8f93\u51fa\u5224\u5b9a\u9519\u8bef\u3002 \u6ce8\u610f\u5224\u65ad\u8f93\u51fa\u4fe1\u606f\u662f\u5426\u7b26\u5408\u8981\u6c42\u3002 VictriD's solution Star //not so beautiful #include <iostream> #include <cstring> using namespace std; void Printinvert(string &input,int printcount){ if(printcount+1!=input.length()) Printinvert(input,printcount+1); cout << input[printcount]; } int main(){ string n; string a; getline(cin,n); getline(cin,a); Printinvert(a,0); return 0; }","title":"4282"},{"location":"nr/4282/#4282","text":"\u9898\u76ee","title":"4282 \u9006\u5e8f\u6253\u5370"},{"location":"nr/4282/#victrids-solution-star","text":"//not so beautiful #include <iostream> #include <cstring> using namespace std; void Printinvert(string &input,int printcount){ if(printcount+1!=input.length()) Printinvert(input,printcount+1); cout << input[printcount]; } int main(){ string n; string a; getline(cin,n); getline(cin,a); Printinvert(a,0); return 0; }","title":"VictriD's solution Star"},{"location":"nr/4300/","text":"4300 \u4e2d\u95f4\u7684\u5976\u725b \u9898\u76ee Description \u52a9\u6559\u6700\u8fd1\u70ed\u8877\u517b\u5976\u725b\uff0c\u4ed6\u5e0c\u671b\u77e5\u9053\u201c\u4e2d\u95f4\u7684\u201d\u5976\u725b\u7684\u4ea7\u91cf\uff1a\u4e00\u534a\u5976\u725b\u7684\u4ea7\u91cf\u5927\u4e8e\u7b49\u4e8e\u8be5\u5976\u725b\u7684\u4ea7\u91cf\uff1b\u4e00\u534a\u5976\u725b\u7684\u4ea7\u91cf\u5c0f\u4e8e\u7b49\u4e8e\u8be5\u5976\u725b\u7684\u4ea7\u91cf\u3002 \u7ed9\u5b9a\u517b\u7684N (N\u4e3a\u5947\u6570\uff0c\u4e141<=N<10000)\u5934\u5976\u725b\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u4ea7\u91cf\uff08\u8303\u56f4\u4ece1\u52301000000\uff09\uff0c\u52a9\u6559\u5e0c\u671b\u4f60\u627e\u5230\u201c\u4e2d\u95f4\u7684\u201d\u5976\u725b\u7684\u4ea7\u91cf\u3002 Input Format \u7b2c\u4e00\u884c\u4e3aN\u3002 \u7b2c2~N+1\u884c\uff1a\u6bcf\u4e00\u884c\u662f\u4e00\u5934\u5976\u725b\u7684\u4ea7\u91cf\u3002 Output Format \u8f93\u51fa\u201c\u4e2d\u95f4\u7684\u201d\u5976\u725b\u7684\u4ea7\u91cf\u3002 Sample Input 5 20 40 10 30 50 Sample Output 30 VictriD's solution Star #include <iostream> using namespace std; int *MergeSort(int *list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int *tmplist = new int[listSize]; int *llst = MergeSort(list, listSize / 2); int *rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n; cin >> n; int *cnlist = new int[n]; for (int i = 0; i < n; i++) cin >> cnlist[i]; MergeSort(cnlist, n); cout << cnlist[n / 2]; return 0; }","title":"4300"},{"location":"nr/4300/#4300","text":"\u9898\u76ee","title":"4300 \u4e2d\u95f4\u7684\u5976\u725b"},{"location":"nr/4300/#victrids-solution-star","text":"#include <iostream> using namespace std; int *MergeSort(int *list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int *tmplist = new int[listSize]; int *llst = MergeSort(list, listSize / 2); int *rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n; cin >> n; int *cnlist = new int[n]; for (int i = 0; i < n; i++) cin >> cnlist[i]; MergeSort(cnlist, n); cout << cnlist[n / 2]; return 0; }","title":"VictriD's solution Star"}]}