{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SJTUOJ\u89e3\u7b54\u96c6 \u4ecb\u7ecd SJTUOJ \u662f\u7531\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66ACM\u73ed\u5f00\u53d1\u7684\u4e00\u4e2a\u5728\u7ebf\u7684\u8bc4\u6d4b\u7cfb\u7edf\u3002\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u9898\u76ee\u4f9b\u4f7f\u7528\u8005\u7ec3\u4e60\u7f16\u7a0b\u80fd\u529b\u4e0e\u7b97\u6cd5\u6280\u5de7\u3002\u53e6\u5916\u7cfb\u7edf\u4e5f\u6709\u5b8c\u5584\u7684\u6bd4\u8d5b\u4e0e\u4f5c\u4e1a\u7cfb\u7edf\u4f9b\u65e5\u5e38\u6559\u5b66\u3001\u6bd4\u8d5b\u9009\u62d4\u6240\u7528\u3002\u7528\u6237\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7684\u7531\u7a0b\u5e8f\u8bed\u8a00\u5b9e\u73b0\u7684\u89e3\u6cd5\uff0c\u7531\u8bc4\u6d4b\u7cfb\u7edf\u8fdb\u884c\u81ea\u52a8\u5730\u8bc4\u6d4b\u4e4b\u540e\u7ed9\u51fa\u8bc4\u6d4b\u7684\u7ed3\u679c\u3002 \u8fd9\u4e9b\u9898\u76ee\u5bf9\u4e8e\u4f7f\u7528\u8005\u7684\u5b66\u4e60\u662f\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u3002\u4f46\u7531\u4e8e\u8bc4\u6d4b\u7cfb\u7edf\u7684\u5c01\u95ed\u6027\uff0c\u6709\u4e9b\u540c\u5b66\u5728\u81ea\u4e3b\u7ec3\u4e60\u4e2d\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u800c\u4e14\u96be\u4ee5\u627e\u5230\u9898\u76ee\u7684\u63d0\u793a\u4e0e\u89e3\u7b54\u3002\u56e0\u6b64\u6211\u4eec\u5236\u4f5c\u4e86\u8fd9\u6837\u4e00\u4e2a\u89e3\u7b54\u96c6\u7684\u7f51\u9875\u3002\u8fd9\u4e2a\u7f51\u9875\u6536\u96c6\u4e86\u76ee\u524d\u5728Github\u4e0a\u516c\u5f00\u5b58\u50a8\u7684SJTUOJ\u4e2d\u9898\u76ee\u7684\u89e3\u7b54\uff0c\u4f9b\u7f51\u7ad9\u7684\u4f7f\u7528\u8005\u53c2\u8003\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u4e0b\u9762\u7684\u4f7f\u7528\u524d\u6ce8\u610f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u70b9\u51fb\u53f3\u65b9\u7684 \u7d22\u5f15 \u6765\u67e5\u627e\u4e60\u9898\u4e86\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u4e0a\u65b9\u7684 \u641c\u7d22\u6846 \u5185\u76f4\u63a5\u641c\u7d22\u3002 \u559c\u6b22\u7684\u8bdd\uff0c\u6233\u53f3\u4e0a\u89d2\u7684\u5b58\u50a8\u5e93\u8d85\u94fe\u63a5\uff0c\u7ed9\u6211\u4e00\u4e2astar\u5427\uff01\uff08\u9003 \u4f7f\u7528\u524d\u6ce8\u610f \u76f4\u63a5\u6284\u88ad\u5bf9\u4e8e\u63d0\u5347\u80fd\u529b\u6ca1\u6709\u4efb\u4f55\u7684\u597d\u5904\u3002\u77e5\u8bc6\u53ea\u6709\u61c2\u4e86\u624d\u662f\u81ea\u5df1\u7684\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u5411\u6765\u5bf9\u4e8e\u5b66\u672f\u4e0d\u7aef\u884c\u4e3a\u4fdd\u6301\u96f6\u5bb9\u5fcd\u3002\u5728\u4f5c\u4e1a\u3001\u8003\u8bd5\u4e0e\u6bd4\u8d5b\u4e2d\uff0c\u6284\u88ad\u4f1a\u5bfc\u81f4\u4f60\u53d7\u5230 \u7559\u6821\u67e5\u770b \u4ee5\u4e0a\u7684\u5904\u5206\u3002 \u8fd9\u4e9b\u89e3\u7b54\u6765\u6e90\u4e8egithub\u4e0a\u516c\u5f00\u7684\u5b58\u50a8\u5e93\uff0c\u7f51\u7ad9\u7684\u5185\u5bb9\u5b8c\u5168\u4f7f\u7528MkDocs\u81ea\u52a8\u751f\u6210\uff0c\u672c\u7f51\u7ad9\u4f1a\u5c3d\u91cf\u7b5b\u9009\uff0c\u4f46\u5bf9\u4e8e\u5176\u6b63\u786e\u6027\u4e0d\u505a\u4efb\u4f55\u7684\u6697\u793a\u4e0e\u4fdd\u8bc1\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u5f04\u6e05\u695a\u601d\u8def\u540e\u81ea\u884c\u590d\u73b0\u3002\u5982\u679c\u4f60\u53d1\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u3002 OJ\u4e0a\u7684\u9898\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4f1a\u6709\u5927\u91cf\u7684\u66f4\u65b0\uff0c\u8fd9\u91cc\u7684\u7b54\u6848\u4e0d\u80fd\u786e\u4fdd\u8986\u76d6\u5168\u90e8\u7684\u9898\u76ee\u3002\u5982\u679c\u4f60\u6709\u89e3\u7b54\u5e0c\u671b\u5206\u4eab\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u94fe\u63a5\u53d1\u81f3OJ@victrid.dev\u3002 \u5982\u679c\u4f60\u662f\u67d0\u4e2a\u88ab\u5f15\u7528\u7684\u5b58\u50a8\u5e93\u7684\u521b\u5efa\u8005\uff0c\u5e76\u4e0d\u5e0c\u671b\u5c06\u81ea\u5df1\u7684\u89e3\u7b54\u5c55\u793a\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u8054\u7cfb\u5220\u9664\u4e8b\u5b9c\u3002\u7531\u4e8egithub\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u4f5c\u8005\u7684\u771f\u5b9e\u59d3\u540d\uff0c\u8bf7\u60a8\u8c05\u89e3\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5f00\u6e90\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u5b58\u50a8\u5e93 \u627e\u5230\u5b83\u7684\u6e90\u6587\u4ef6\u3002","title":"\u4e3b\u9875"},{"location":"#sjtuoj","text":"","title":"SJTUOJ\u89e3\u7b54\u96c6"},{"location":"#_1","text":"SJTUOJ \u662f\u7531\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66ACM\u73ed\u5f00\u53d1\u7684\u4e00\u4e2a\u5728\u7ebf\u7684\u8bc4\u6d4b\u7cfb\u7edf\u3002\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u9898\u76ee\u4f9b\u4f7f\u7528\u8005\u7ec3\u4e60\u7f16\u7a0b\u80fd\u529b\u4e0e\u7b97\u6cd5\u6280\u5de7\u3002\u53e6\u5916\u7cfb\u7edf\u4e5f\u6709\u5b8c\u5584\u7684\u6bd4\u8d5b\u4e0e\u4f5c\u4e1a\u7cfb\u7edf\u4f9b\u65e5\u5e38\u6559\u5b66\u3001\u6bd4\u8d5b\u9009\u62d4\u6240\u7528\u3002\u7528\u6237\u9700\u8981\u63d0\u4ea4\u9898\u76ee\u7684\u7531\u7a0b\u5e8f\u8bed\u8a00\u5b9e\u73b0\u7684\u89e3\u6cd5\uff0c\u7531\u8bc4\u6d4b\u7cfb\u7edf\u8fdb\u884c\u81ea\u52a8\u5730\u8bc4\u6d4b\u4e4b\u540e\u7ed9\u51fa\u8bc4\u6d4b\u7684\u7ed3\u679c\u3002 \u8fd9\u4e9b\u9898\u76ee\u5bf9\u4e8e\u4f7f\u7528\u8005\u7684\u5b66\u4e60\u662f\u975e\u5e38\u6709\u5e2e\u52a9\u7684\u3002\u4f46\u7531\u4e8e\u8bc4\u6d4b\u7cfb\u7edf\u7684\u5c01\u95ed\u6027\uff0c\u6709\u4e9b\u540c\u5b66\u5728\u81ea\u4e3b\u7ec3\u4e60\u4e2d\uff0c\u5f80\u5f80\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u800c\u4e14\u96be\u4ee5\u627e\u5230\u9898\u76ee\u7684\u63d0\u793a\u4e0e\u89e3\u7b54\u3002\u56e0\u6b64\u6211\u4eec\u5236\u4f5c\u4e86\u8fd9\u6837\u4e00\u4e2a\u89e3\u7b54\u96c6\u7684\u7f51\u9875\u3002\u8fd9\u4e2a\u7f51\u9875\u6536\u96c6\u4e86\u76ee\u524d\u5728Github\u4e0a\u516c\u5f00\u5b58\u50a8\u7684SJTUOJ\u4e2d\u9898\u76ee\u7684\u89e3\u7b54\uff0c\u4f9b\u7f51\u7ad9\u7684\u4f7f\u7528\u8005\u53c2\u8003\u3002 \u5982\u679c\u4f60\u5df2\u7ecf\u9605\u8bfb\u4e86\u4e0b\u9762\u7684\u4f7f\u7528\u524d\u6ce8\u610f\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u70b9\u51fb\u53f3\u65b9\u7684 \u7d22\u5f15 \u6765\u67e5\u627e\u4e60\u9898\u4e86\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u4e0a\u65b9\u7684 \u641c\u7d22\u6846 \u5185\u76f4\u63a5\u641c\u7d22\u3002 \u559c\u6b22\u7684\u8bdd\uff0c\u6233\u53f3\u4e0a\u89d2\u7684\u5b58\u50a8\u5e93\u8d85\u94fe\u63a5\uff0c\u7ed9\u6211\u4e00\u4e2astar\u5427\uff01\uff08\u9003","title":"\u4ecb\u7ecd"},{"location":"#_2","text":"\u76f4\u63a5\u6284\u88ad\u5bf9\u4e8e\u63d0\u5347\u80fd\u529b\u6ca1\u6709\u4efb\u4f55\u7684\u597d\u5904\u3002\u77e5\u8bc6\u53ea\u6709\u61c2\u4e86\u624d\u662f\u81ea\u5df1\u7684\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66\u5411\u6765\u5bf9\u4e8e\u5b66\u672f\u4e0d\u7aef\u884c\u4e3a\u4fdd\u6301\u96f6\u5bb9\u5fcd\u3002\u5728\u4f5c\u4e1a\u3001\u8003\u8bd5\u4e0e\u6bd4\u8d5b\u4e2d\uff0c\u6284\u88ad\u4f1a\u5bfc\u81f4\u4f60\u53d7\u5230 \u7559\u6821\u67e5\u770b \u4ee5\u4e0a\u7684\u5904\u5206\u3002 \u8fd9\u4e9b\u89e3\u7b54\u6765\u6e90\u4e8egithub\u4e0a\u516c\u5f00\u7684\u5b58\u50a8\u5e93\uff0c\u7f51\u7ad9\u7684\u5185\u5bb9\u5b8c\u5168\u4f7f\u7528MkDocs\u81ea\u52a8\u751f\u6210\uff0c\u672c\u7f51\u7ad9\u4f1a\u5c3d\u91cf\u7b5b\u9009\uff0c\u4f46\u5bf9\u4e8e\u5176\u6b63\u786e\u6027\u4e0d\u505a\u4efb\u4f55\u7684\u6697\u793a\u4e0e\u4fdd\u8bc1\u3002 \u8bf7\u4e00\u5b9a\u4e0d\u8981\u76f4\u63a5\u590d\u5236\u7c98\u8d34 \u3002\u6211\u4eec\u5efa\u8bae\u60a8\u5728\u5f04\u6e05\u695a\u601d\u8def\u540e\u81ea\u884c\u590d\u73b0\u3002\u5982\u679c\u4f60\u53d1\u73b0\u6709\u95ee\u9898\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u3002 OJ\u4e0a\u7684\u9898\u4e0e\u65f6\u4ff1\u8fdb\uff0c\u4f1a\u6709\u5927\u91cf\u7684\u66f4\u65b0\uff0c\u8fd9\u91cc\u7684\u7b54\u6848\u4e0d\u80fd\u786e\u4fdd\u8986\u76d6\u5168\u90e8\u7684\u9898\u76ee\u3002\u5982\u679c\u4f60\u6709\u89e3\u7b54\u5e0c\u671b\u5206\u4eab\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u521b\u5efa\u4f60\u81ea\u5df1\u7684\u5b58\u50a8\u5e93\uff0c\u5e76\u5c06\u94fe\u63a5\u53d1\u81f3OJ@victrid.dev\u3002 \u5982\u679c\u4f60\u662f\u67d0\u4e2a\u88ab\u5f15\u7528\u7684\u5b58\u50a8\u5e93\u7684\u521b\u5efa\u8005\uff0c\u5e76\u4e0d\u5e0c\u671b\u5c06\u81ea\u5df1\u7684\u89e3\u7b54\u5c55\u793a\u5728\u8fd9\u4e2a\u7f51\u7ad9\u4e0a\uff0c\u8bf7\u53d1\u90ae\u4ef6\u81f3OJ@victrid.dev\u8054\u7cfb\u5220\u9664\u4e8b\u5b9c\u3002\u7531\u4e8egithub\u7684\u9650\u5236\uff0c\u6211\u4eec\u53ef\u80fd\u4e0d\u80fd\u76f4\u63a5\u663e\u793a\u4f5c\u8005\u7684\u771f\u5b9e\u59d3\u540d\uff0c\u8bf7\u60a8\u8c05\u89e3\u3002 \u8fd9\u4e2a\u7f51\u7ad9\u662f\u5f00\u6e90\u7684\uff0c\u4f60\u53ef\u4ee5\u5728 \u8fd9\u4e2a\u5b58\u50a8\u5e93 \u627e\u5230\u5b83\u7684\u6e90\u6587\u4ef6\u3002","title":"\u4f7f\u7528\u524d\u6ce8\u610f"},{"location":"nr/","text":"Index Page 1000+ 1000+ 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100+ 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200+ 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300+ 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400+ 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500+ 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600+ 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700+ 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800+ 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900+ 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000+ 2000+ 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100+ 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200+ 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300+ 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400+ 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500+ 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600+ 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700+ 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800+ 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900+ 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000+ 3000+ 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100+ 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200+ 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300+ 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400+ 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500+ 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600+ 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700+ 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799 3800+ 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899 3900+ 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000+ 4000+ 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099 4100+ 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 4200+ 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299 4300+ 4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399 4400+ 4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499 4500+ 4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599 4600+ 4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 4627 4628 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 4640 4641 4642 4643 4644 4645 4646 4647 4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 4690 4691 4692 4693 4694 4695 4696 4697 4698 4699 4700+ 4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799 4800+ 4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899 4900+ 4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 4997 4998 4999","title":"Index Page"},{"location":"nr/#index-page","text":"","title":"Index Page"},{"location":"nr/#1000","text":"","title":"1000+"},{"location":"nr/#1000_1","text":"1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099","title":"1000+"},{"location":"nr/#1100","text":"1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199","title":"1100+"},{"location":"nr/#1200","text":"1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299","title":"1200+"},{"location":"nr/#1300","text":"1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399","title":"1300+"},{"location":"nr/#1400","text":"1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499","title":"1400+"},{"location":"nr/#1500","text":"1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599","title":"1500+"},{"location":"nr/#1600","text":"1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699","title":"1600+"},{"location":"nr/#1700","text":"1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799","title":"1700+"},{"location":"nr/#1800","text":"1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899","title":"1800+"},{"location":"nr/#1900","text":"1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999","title":"1900+"},{"location":"nr/#2000","text":"","title":"2000+"},{"location":"nr/#2000_1","text":"2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099","title":"2000+"},{"location":"nr/#2100","text":"2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199","title":"2100+"},{"location":"nr/#2200","text":"2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299","title":"2200+"},{"location":"nr/#2300","text":"2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399","title":"2300+"},{"location":"nr/#2400","text":"2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499","title":"2400+"},{"location":"nr/#2500","text":"2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599","title":"2500+"},{"location":"nr/#2600","text":"2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699","title":"2600+"},{"location":"nr/#2700","text":"2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799","title":"2700+"},{"location":"nr/#2800","text":"2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899","title":"2800+"},{"location":"nr/#2900","text":"2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999","title":"2900+"},{"location":"nr/#3000","text":"","title":"3000+"},{"location":"nr/#3000_1","text":"3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099","title":"3000+"},{"location":"nr/#3100","text":"3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199","title":"3100+"},{"location":"nr/#3200","text":"3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299","title":"3200+"},{"location":"nr/#3300","text":"3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399","title":"3300+"},{"location":"nr/#3400","text":"3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499","title":"3400+"},{"location":"nr/#3500","text":"3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599","title":"3500+"},{"location":"nr/#3600","text":"3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699","title":"3600+"},{"location":"nr/#3700","text":"3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799","title":"3700+"},{"location":"nr/#3800","text":"3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899","title":"3800+"},{"location":"nr/#3900","text":"3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999","title":"3900+"},{"location":"nr/#4000","text":"","title":"4000+"},{"location":"nr/#4000_1","text":"4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093 4094 4095 4096 4097 4098 4099","title":"4000+"},{"location":"nr/#4100","text":"4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199","title":"4100+"},{"location":"nr/#4200","text":"4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275 4276 4277 4278 4279 4280 4281 4282 4283 4284 4285 4286 4287 4288 4289 4290 4291 4292 4293 4294 4295 4296 4297 4298 4299","title":"4200+"},{"location":"nr/#4300","text":"4300 4301 4302 4303 4304 4305 4306 4307 4308 4309 4310 4311 4312 4313 4314 4315 4316 4317 4318 4319 4320 4321 4322 4323 4324 4325 4326 4327 4328 4329 4330 4331 4332 4333 4334 4335 4336 4337 4338 4339 4340 4341 4342 4343 4344 4345 4346 4347 4348 4349 4350 4351 4352 4353 4354 4355 4356 4357 4358 4359 4360 4361 4362 4363 4364 4365 4366 4367 4368 4369 4370 4371 4372 4373 4374 4375 4376 4377 4378 4379 4380 4381 4382 4383 4384 4385 4386 4387 4388 4389 4390 4391 4392 4393 4394 4395 4396 4397 4398 4399","title":"4300+"},{"location":"nr/#4400","text":"4400 4401 4402 4403 4404 4405 4406 4407 4408 4409 4410 4411 4412 4413 4414 4415 4416 4417 4418 4419 4420 4421 4422 4423 4424 4425 4426 4427 4428 4429 4430 4431 4432 4433 4434 4435 4436 4437 4438 4439 4440 4441 4442 4443 4444 4445 4446 4447 4448 4449 4450 4451 4452 4453 4454 4455 4456 4457 4458 4459 4460 4461 4462 4463 4464 4465 4466 4467 4468 4469 4470 4471 4472 4473 4474 4475 4476 4477 4478 4479 4480 4481 4482 4483 4484 4485 4486 4487 4488 4489 4490 4491 4492 4493 4494 4495 4496 4497 4498 4499","title":"4400+"},{"location":"nr/#4500","text":"4500 4501 4502 4503 4504 4505 4506 4507 4508 4509 4510 4511 4512 4513 4514 4515 4516 4517 4518 4519 4520 4521 4522 4523 4524 4525 4526 4527 4528 4529 4530 4531 4532 4533 4534 4535 4536 4537 4538 4539 4540 4541 4542 4543 4544 4545 4546 4547 4548 4549 4550 4551 4552 4553 4554 4555 4556 4557 4558 4559 4560 4561 4562 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4573 4574 4575 4576 4577 4578 4579 4580 4581 4582 4583 4584 4585 4586 4587 4588 4589 4590 4591 4592 4593 4594 4595 4596 4597 4598 4599","title":"4500+"},{"location":"nr/#4600","text":"4600 4601 4602 4603 4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4614 4615 4616 4617 4618 4619 4620 4621 4622 4623 4624 4625 4626 4627 4628 4629 4630 4631 4632 4633 4634 4635 4636 4637 4638 4639 4640 4641 4642 4643 4644 4645 4646 4647 4648 4649 4650 4651 4652 4653 4654 4655 4656 4657 4658 4659 4660 4661 4662 4663 4664 4665 4666 4667 4668 4669 4670 4671 4672 4673 4674 4675 4676 4677 4678 4679 4680 4681 4682 4683 4684 4685 4686 4687 4688 4689 4690 4691 4692 4693 4694 4695 4696 4697 4698 4699","title":"4600+"},{"location":"nr/#4700","text":"4700 4701 4702 4703 4704 4705 4706 4707 4708 4709 4710 4711 4712 4713 4714 4715 4716 4717 4718 4719 4720 4721 4722 4723 4724 4725 4726 4727 4728 4729 4730 4731 4732 4733 4734 4735 4736 4737 4738 4739 4740 4741 4742 4743 4744 4745 4746 4747 4748 4749 4750 4751 4752 4753 4754 4755 4756 4757 4758 4759 4760 4761 4762 4763 4764 4765 4766 4767 4768 4769 4770 4771 4772 4773 4774 4775 4776 4777 4778 4779 4780 4781 4782 4783 4784 4785 4786 4787 4788 4789 4790 4791 4792 4793 4794 4795 4796 4797 4798 4799","title":"4700+"},{"location":"nr/#4800","text":"4800 4801 4802 4803 4804 4805 4806 4807 4808 4809 4810 4811 4812 4813 4814 4815 4816 4817 4818 4819 4820 4821 4822 4823 4824 4825 4826 4827 4828 4829 4830 4831 4832 4833 4834 4835 4836 4837 4838 4839 4840 4841 4842 4843 4844 4845 4846 4847 4848 4849 4850 4851 4852 4853 4854 4855 4856 4857 4858 4859 4860 4861 4862 4863 4864 4865 4866 4867 4868 4869 4870 4871 4872 4873 4874 4875 4876 4877 4878 4879 4880 4881 4882 4883 4884 4885 4886 4887 4888 4889 4890 4891 4892 4893 4894 4895 4896 4897 4898 4899","title":"4800+"},{"location":"nr/#4900","text":"4900 4901 4902 4903 4904 4905 4906 4907 4908 4909 4910 4911 4912 4913 4914 4915 4916 4917 4918 4919 4920 4921 4922 4923 4924 4925 4926 4927 4928 4929 4930 4931 4932 4933 4934 4935 4936 4937 4938 4939 4940 4941 4942 4943 4944 4945 4946 4947 4948 4949 4950 4951 4952 4953 4954 4955 4956 4957 4958 4959 4960 4961 4962 4963 4964 4965 4966 4967 4968 4969 4970 4971 4972 4973 4974 4975 4976 4977 4978 4979 4980 4981 4982 4983 4984 4985 4986 4987 4988 4989 4990 4991 4992 4993 4994 4995 4996 4997 4998 4999","title":"4900+"},{"location":"nr/1000/","text":"1000 A+B Problem \u8f6c\u5230\u9898\u76ee FineArtz's solution /* A+B Problem */ #include <iostream> int main(){ int a, b; std::cin >> a >> b; std::cout << a + b << std::endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { cout << \"Hello world!\" << endl; return 0; }","title":"1000 A+B Problem"},{"location":"nr/1000/#1000-ab-problem","text":"\u8f6c\u5230\u9898\u76ee","title":"1000 A+B Problem"},{"location":"nr/1000/#fineartzs-solution","text":"/* A+B Problem */ #include <iostream> int main(){ int a, b; std::cin >> a >> b; std::cout << a + b << std::endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1000/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { cout << \"Hello world!\" << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1001/","text":"1001 \u4e8c\u54e5\u6458\u82f9\u679c \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int sh, dh, h, n, app; int m = 0; cin >> sh >> dh >> n; h = sh + dh; for (int i = 0; i < n; i++) { cin >> app; if (app <= h) m++; } cout << m; return 0; } FineArtz's solution /* \u4e8c\u54e5\u6458\u82f9\u679c */ #include <iostream> using namespace std; int main(){ int h, l, n; cin >> h >> l >> n; int sum = 0; for (int i = 1; i <= n; ++i){ int t; cin >> t; if (h + l >= t) ++sum; } cout << sum << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int height, height_1, height_2, n, sum = 0; int temp = 0; cin >> height_1 >> height_2 >> n; height = height_1 + height_2; for(int i = 0; i < n; ++i) { cin >> temp; if (temp <= height) ++sum; } cout << sum; return 0; }","title":"1001 \u4e8c\u54e5\u6458\u82f9\u679c"},{"location":"nr/1001/#1001","text":"\u8f6c\u5230\u9898\u76ee","title":"1001 \u4e8c\u54e5\u6458\u82f9\u679c"},{"location":"nr/1001/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int sh, dh, h, n, app; int m = 0; cin >> sh >> dh >> n; h = sh + dh; for (int i = 0; i < n; i++) { cin >> app; if (app <= h) m++; } cout << m; return 0; }","title":"VictriD's solution"},{"location":"nr/1001/#fineartzs-solution","text":"/* \u4e8c\u54e5\u6458\u82f9\u679c */ #include <iostream> using namespace std; int main(){ int h, l, n; cin >> h >> l >> n; int sum = 0; for (int i = 1; i <= n; ++i){ int t; cin >> t; if (h + l >= t) ++sum; } cout << sum << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1001/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int height, height_1, height_2, n, sum = 0; int temp = 0; cin >> height_1 >> height_2 >> n; height = height_1 + height_2; for(int i = 0; i < n; ++i) { cin >> temp; if (temp <= height) ++sum; } cout << sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1002/","text":"1002 \u4e8c\u54e5\u79cd\u82b1\u751f \u8f6c\u5230\u9898\u76ee VictriD's solution //1002 rewrite cf FineArtz #include <iostream> using namespace std; int main() { int m, n; cin >> m >> n; //DynMat Name:Summat //Lines:m+1 rows:n+1 int **Summat = new int *[m + 1]; for (int i = 0; i < m + 1; i++) *(Summat + i) = new int[n + 1](); int *Summat_cfg = new int(m + 1); //End of Dynmat. int getnum; for (int i = 1; i <= m; i++) for (int j = 1; j <= n; j++) { cin >> getnum; Summat[i][j] = getnum + Summat[i - 1][j] + Summat[i][j - 1] - Summat[i - 1][j - 1]; } int l, h; cin >> l >> h; int max = 0; int total = 0; for (int i = 0; i < m + 1 - l; i++) for (int j = 0; j < n + 1 - h; j++) { total = (Summat[i + l][j + h] + Summat[i][j] - Summat[i + l][j] - Summat[i][j + h]); max = total > max ? total : max; } cout << max; //Release DynMat //Name:Summat for (int i = 0; i < *Summat_cfg; i++) delete[] * (Summat + i); delete[] Summat; delete Summat_cfg; //End of Release. return 0; } FineArtz's solution /* \u4e8c\u54e5\u79cd\u82b1\u751f */ #include <iostream> using namespace std; int sum[1005][1005] = {0}; int main(){ int m, n, t; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } int a, b, ans = 0; cin >> a >> b; for (int i = a; i <= m; ++i) for (int j = b; j <= n; ++j) ans = max(ans, sum[i][j] - sum[i - a][j] - sum[i][j - b] + sum[i - a][j - b]); cout << ans << endl; return 0; } Callmeink's solution #include<iostream> using namespace std; int main() { int n,m,x,y,ans,sum; int a[1005][1005],f[1005][1005] ; cin >> n >> m; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) cin >> a[i][j]; cin >> x >> y; for (int i=1;i<=n;i++) f[0][i] = 0; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) f[i][j] = f[i-1][j] + a[i][j]; ans = 0; for (int i=1;i<=n-x+1;i++) { sum = 0; for (int k=1;k<=y;k++) sum += f[i+x-1][k] - f[i-1][k]; if (sum > ans) ans = sum; for (int j=2;j<=m-y+1;j++) { sum += f[i+x-1][j+y-1]-f[i-1][j+y-1]-(f[i+x-1][j-1]-f[i-1][j-1]); //cout << i << ' ' << j << ' ' << sum << endl; if (sum > ans) ans = sum; } //cout << \"ans=\" << ans << endl; } cout << ans << endl; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int L, W; cin >> L >> W; //int corn[1001][1001] = {}; int **corn = NULL, **pre = NULL; corn = new int *[L + 1]; pre = new int *[L + 1]; pre[0] = new int [W + 1]{0}; for (int i = 1; i <= L; ++i) { corn[i] = new int[W + 1]; pre[i] = new int[W + 1]; pre[i][0] = 0; } for (int i = 1; i <= L; ++i) for (int j = 1; j <= W; ++j) { cin >> corn[i][j]; pre[i][j] = corn[i][j] + pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]; } int length, width; cin >> length >> width; int max = 0; int sum = 0; for (int i = length; i <= L; ++i) for (int j = width; j <= W; ++j) { sum = pre[i][j] - pre[i - length][j] - pre[i][j - width] + pre[i - length][j - width]; if (sum > max) max = sum; } /*for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; for (int k = i; k <= i + length - 1; ++k) for (int l = j; l <= j + width - 1; ++l) sum += corn[k][l]; if (sum > max) max = sum; }*/ /*int temp_head = 0, temp = 0; for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; if (i == 1 && j == 1) { for (int k = 1; k <= length; ++k) for (int l = 1; l <= width; ++l) temp += corn[k][l]; max = temp_head = temp; } else if (j == 1) { for (int l = 1; l <= width; ++l) { temp_head = temp_head - corn[i - 1][l] + corn[i + length - 1][l]; } temp = temp_head; if (temp > max) max = temp; } else { for (int k = i; k <= i + length - 1; ++k) temp = temp - corn[k][j - 1] + corn[k][j + width - 1]; if (temp > max) max = temp; } }*/ cout << max; for (int i = 1; i <= L; ++i) delete [] corn[i]; delete [] corn; return 0; }","title":"1002 \u4e8c\u54e5\u79cd\u82b1\u751f"},{"location":"nr/1002/#1002","text":"\u8f6c\u5230\u9898\u76ee","title":"1002 \u4e8c\u54e5\u79cd\u82b1\u751f"},{"location":"nr/1002/#victrids-solution","text":"//1002 rewrite cf FineArtz #include <iostream> using namespace std; int main() { int m, n; cin >> m >> n; //DynMat Name:Summat //Lines:m+1 rows:n+1 int **Summat = new int *[m + 1]; for (int i = 0; i < m + 1; i++) *(Summat + i) = new int[n + 1](); int *Summat_cfg = new int(m + 1); //End of Dynmat. int getnum; for (int i = 1; i <= m; i++) for (int j = 1; j <= n; j++) { cin >> getnum; Summat[i][j] = getnum + Summat[i - 1][j] + Summat[i][j - 1] - Summat[i - 1][j - 1]; } int l, h; cin >> l >> h; int max = 0; int total = 0; for (int i = 0; i < m + 1 - l; i++) for (int j = 0; j < n + 1 - h; j++) { total = (Summat[i + l][j + h] + Summat[i][j] - Summat[i + l][j] - Summat[i][j + h]); max = total > max ? total : max; } cout << max; //Release DynMat //Name:Summat for (int i = 0; i < *Summat_cfg; i++) delete[] * (Summat + i); delete[] Summat; delete Summat_cfg; //End of Release. return 0; }","title":"VictriD's solution"},{"location":"nr/1002/#fineartzs-solution","text":"/* \u4e8c\u54e5\u79cd\u82b1\u751f */ #include <iostream> using namespace std; int sum[1005][1005] = {0}; int main(){ int m, n, t; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } int a, b, ans = 0; cin >> a >> b; for (int i = a; i <= m; ++i) for (int j = b; j <= n; ++j) ans = max(ans, sum[i][j] - sum[i - a][j] - sum[i][j - b] + sum[i - a][j - b]); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1002/#callmeinks-solution","text":"#include<iostream> using namespace std; int main() { int n,m,x,y,ans,sum; int a[1005][1005],f[1005][1005] ; cin >> n >> m; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) cin >> a[i][j]; cin >> x >> y; for (int i=1;i<=n;i++) f[0][i] = 0; for (int i=1;i<=n;i++) for (int j=1;j<=m;j++) f[i][j] = f[i-1][j] + a[i][j]; ans = 0; for (int i=1;i<=n-x+1;i++) { sum = 0; for (int k=1;k<=y;k++) sum += f[i+x-1][k] - f[i-1][k]; if (sum > ans) ans = sum; for (int j=2;j<=m-y+1;j++) { sum += f[i+x-1][j+y-1]-f[i-1][j+y-1]-(f[i+x-1][j-1]-f[i-1][j-1]); //cout << i << ' ' << j << ' ' << sum << endl; if (sum > ans) ans = sum; } //cout << \"ans=\" << ans << endl; } cout << ans << endl; }","title":"Callmeink's solution"},{"location":"nr/1002/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int L, W; cin >> L >> W; //int corn[1001][1001] = {}; int **corn = NULL, **pre = NULL; corn = new int *[L + 1]; pre = new int *[L + 1]; pre[0] = new int [W + 1]{0}; for (int i = 1; i <= L; ++i) { corn[i] = new int[W + 1]; pre[i] = new int[W + 1]; pre[i][0] = 0; } for (int i = 1; i <= L; ++i) for (int j = 1; j <= W; ++j) { cin >> corn[i][j]; pre[i][j] = corn[i][j] + pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1]; } int length, width; cin >> length >> width; int max = 0; int sum = 0; for (int i = length; i <= L; ++i) for (int j = width; j <= W; ++j) { sum = pre[i][j] - pre[i - length][j] - pre[i][j - width] + pre[i - length][j - width]; if (sum > max) max = sum; } /*for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; for (int k = i; k <= i + length - 1; ++k) for (int l = j; l <= j + width - 1; ++l) sum += corn[k][l]; if (sum > max) max = sum; }*/ /*int temp_head = 0, temp = 0; for (int i = 1; i <= L - length + 1; ++i) for (int j = 1; j <= W - width + 1; ++j) { int sum = 0; if (i == 1 && j == 1) { for (int k = 1; k <= length; ++k) for (int l = 1; l <= width; ++l) temp += corn[k][l]; max = temp_head = temp; } else if (j == 1) { for (int l = 1; l <= width; ++l) { temp_head = temp_head - corn[i - 1][l] + corn[i + length - 1][l]; } temp = temp_head; if (temp > max) max = temp; } else { for (int k = i; k <= i + length - 1; ++k) temp = temp - corn[k][j - 1] + corn[k][j + width - 1]; if (temp > max) max = temp; } }*/ cout << max; for (int i = 1; i <= L; ++i) delete [] corn[i]; delete [] corn; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1003/","text":"1003 \u4e8c\u54e5\u517b\u7ec6\u83cc \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u517b\u7ec6\u83cc */ #include <iostream> #include <deque> using namespace std; int a[105][105], l; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int bfs(){ int ans = 0; deque<int> nowx, nowy; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (a[i][j] == 1){ nowx.push_back(i); nowy.push_back(j); } while (!nowx.empty()){ ++ans; int len = nowx.size(); for (int nowc = 0; nowc < len; ++nowc){ for (int d = 0; d < 4; ++d){ int x = nowx[nowc] + dx[d]; int y = nowy[nowc] + dy[d]; if (a[x][y] == 0){ a[x][y] = 1; nowx.push_back(x); nowy.push_back(y); } } } for (int i = 1; i <= len; ++i){ nowx.pop_front(); nowy.pop_front(); } } return ans - 1; } int main(){ cin >> l; for (int i = 0; i <= 104; ++i) for (int j = 0; j <= 104; ++j) a[i][j] = 2; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> a[i][j]; cout << bfs() << endl; return 0; } Callmeink's solution #include <iostream> using namespace std; int main() { int l; int a[105][105]; cin >> l; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) cin >> a[i][j]; bool flag = true; int ans = 0; while (flag) { flag = false; ans++; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 1) { if (i-1 >=1 && a[i-1][j] == 0) {a[i-1][j] = 3;flag = true;} if (i+1 <=l && a[i+1][j] == 0) {a[i+1][j] = 3;flag = true;} if (j-1 >=1 && a[i][j-1] == 0) {a[i][j-1] = 3;flag = true;} if (j+1 <=l && a[i][j+1] == 0) {a[i][j+1] = 3;flag = true;} } for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 3) a[i][j] = 1; //cout << \"flag =\" << flag << endl; //cout << \"ans =\" << ans <<endl; //for(int i=1;i<=l;i++) //{ // for(int j=1;j<=l;j++) cout << a[i][j] << ' '; // cout << endl; //} } ans--; cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int L = 0; bool perfect = true; cin >> L; int **box = NULL, **box_new = NULL; box = new int *[L + 2]; box_new = new int *[L + 2]; for (int i = 0; i <= L + 1; ++i) { box[i] = new int [L + 2]{0}; box_new[i] = new int [L + 2]{0}; } /*int box[102][102], box_new[102][102]; for (int i = 0; i <= L + 1; ++i) for (int j = 0; j <= L + 1; ++j) box[i][j] = box_new[i][j] = 0;*/ for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { cin >> box[i][j]; if (box[i][j] == 0) perfect = false; } bool flag = true; int sum = 0; if (!perfect) { do { ++sum; flag = false; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { if (box[i][j] != 0) { box_new[i][j] = box[i][j]; } else if(box[i - 1][j] != 1 && box [i + 1][j] != 1 && box[i][j - 1] != 1 && box[i][j + 1] != 1) { box_new[i][j] = 0; flag = true; } else box_new[i][j] = 1; } if (!flag) break; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) box[i][j] = box_new[i][j]; }while(flag); } cout << sum; return 0; }","title":"1003 \u4e8c\u54e5\u517b\u7ec6\u83cc"},{"location":"nr/1003/#1003","text":"\u8f6c\u5230\u9898\u76ee","title":"1003 \u4e8c\u54e5\u517b\u7ec6\u83cc"},{"location":"nr/1003/#fineartzs-solution","text":"/* \u4e8c\u54e5\u517b\u7ec6\u83cc */ #include <iostream> #include <deque> using namespace std; int a[105][105], l; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int bfs(){ int ans = 0; deque<int> nowx, nowy; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (a[i][j] == 1){ nowx.push_back(i); nowy.push_back(j); } while (!nowx.empty()){ ++ans; int len = nowx.size(); for (int nowc = 0; nowc < len; ++nowc){ for (int d = 0; d < 4; ++d){ int x = nowx[nowc] + dx[d]; int y = nowy[nowc] + dy[d]; if (a[x][y] == 0){ a[x][y] = 1; nowx.push_back(x); nowy.push_back(y); } } } for (int i = 1; i <= len; ++i){ nowx.pop_front(); nowy.pop_front(); } } return ans - 1; } int main(){ cin >> l; for (int i = 0; i <= 104; ++i) for (int j = 0; j <= 104; ++j) a[i][j] = 2; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> a[i][j]; cout << bfs() << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1003/#callmeinks-solution","text":"#include <iostream> using namespace std; int main() { int l; int a[105][105]; cin >> l; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) cin >> a[i][j]; bool flag = true; int ans = 0; while (flag) { flag = false; ans++; for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 1) { if (i-1 >=1 && a[i-1][j] == 0) {a[i-1][j] = 3;flag = true;} if (i+1 <=l && a[i+1][j] == 0) {a[i+1][j] = 3;flag = true;} if (j-1 >=1 && a[i][j-1] == 0) {a[i][j-1] = 3;flag = true;} if (j+1 <=l && a[i][j+1] == 0) {a[i][j+1] = 3;flag = true;} } for(int i=1;i<=l;i++) for(int j=1;j<=l;j++) if (a[i][j] == 3) a[i][j] = 1; //cout << \"flag =\" << flag << endl; //cout << \"ans =\" << ans <<endl; //for(int i=1;i<=l;i++) //{ // for(int j=1;j<=l;j++) cout << a[i][j] << ' '; // cout << endl; //} } ans--; cout << ans << endl; return 0; }","title":"Callmeink's solution"},{"location":"nr/1003/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int L = 0; bool perfect = true; cin >> L; int **box = NULL, **box_new = NULL; box = new int *[L + 2]; box_new = new int *[L + 2]; for (int i = 0; i <= L + 1; ++i) { box[i] = new int [L + 2]{0}; box_new[i] = new int [L + 2]{0}; } /*int box[102][102], box_new[102][102]; for (int i = 0; i <= L + 1; ++i) for (int j = 0; j <= L + 1; ++j) box[i][j] = box_new[i][j] = 0;*/ for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { cin >> box[i][j]; if (box[i][j] == 0) perfect = false; } bool flag = true; int sum = 0; if (!perfect) { do { ++sum; flag = false; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) { if (box[i][j] != 0) { box_new[i][j] = box[i][j]; } else if(box[i - 1][j] != 1 && box [i + 1][j] != 1 && box[i][j - 1] != 1 && box[i][j + 1] != 1) { box_new[i][j] = 0; flag = true; } else box_new[i][j] = 1; } if (!flag) break; for (int i = 1; i <= L; ++i) for (int j = 1; j <= L; ++j) box[i][j] = box_new[i][j]; }while(flag); } cout << sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1004/","text":"1004 \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char c; int tf = 0, udt = U + D, fft = F + F; for (int i = 0; i < T; i++) { cin >> c; if (c != 'f') tf += udt; else tf += fft; if (tf > M) { cout << i; break; } } return 0; } FineArtz's solution /* \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 */ #include <iostream> using namespace std; int main(){ int m, t, u, f, d; cin >> m >> t >> u >> f >> d; char road; int NowTime = 0; for (int i = 0; i != t; ++i){ cin >> road; switch(road){ case 'u': case 'd': NowTime = NowTime + u + d; break; case 'f': NowTime += 2 * f; break; default: break; } if (NowTime > m){ cout << i << endl; return 0; } } cout << t << endl; return 0; } Callmeink's solution #include <iostream> using namespace std; int main() { int i,m,t,u,f,d; char ch; cin >> m >> t >> u >> f >> d; cin.get(); for(i=1;i<=t;i++) { cin.get(ch); cin.get(); if (ch == 'u' || ch == 'd') m -= (u+d); else m -= f + f; if (m < 0) { cout << i - 1 << endl; break; } } return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char road[T]; for(int i = 0; i < T; ++i) cin >> road[i]; int sum = 0, far = 0; while(sum <= M && far < T) { if (road[far] == 'f') sum += 2 * F; else sum += U + D; ++far; } cout << far - 1; return 0; }","title":"1004 \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0"},{"location":"nr/1004/#1004","text":"\u8f6c\u5230\u9898\u76ee","title":"1004 \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0"},{"location":"nr/1004/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char c; int tf = 0, udt = U + D, fft = F + F; for (int i = 0; i < T; i++) { cin >> c; if (c != 'f') tf += udt; else tf += fft; if (tf > M) { cout << i; break; } } return 0; }","title":"VictriD's solution"},{"location":"nr/1004/#fineartzs-solution","text":"/* \u897f\u897f\u5f17\u65af\u5f0f\u7684\u547d\u8fd0 */ #include <iostream> using namespace std; int main(){ int m, t, u, f, d; cin >> m >> t >> u >> f >> d; char road; int NowTime = 0; for (int i = 0; i != t; ++i){ cin >> road; switch(road){ case 'u': case 'd': NowTime = NowTime + u + d; break; case 'f': NowTime += 2 * f; break; default: break; } if (NowTime > m){ cout << i << endl; return 0; } } cout << t << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1004/#callmeinks-solution","text":"#include <iostream> using namespace std; int main() { int i,m,t,u,f,d; char ch; cin >> m >> t >> u >> f >> d; cin.get(); for(i=1;i<=t;i++) { cin.get(ch); cin.get(); if (ch == 'u' || ch == 'd') m -= (u+d); else m -= f + f; if (m < 0) { cout << i - 1 << endl; break; } } return 0; }","title":"Callmeink's solution"},{"location":"nr/1004/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int M, T, U, F, D; cin >> M >> T >> U >> F >> D; char road[T]; for(int i = 0; i < T; ++i) cin >> road[i]; int sum = 0, far = 0; while(sum <= M && far < T) { if (road[far] == 'f') sum += 2 * F; else sum += U + D; ++far; } cout << far - 1; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1005/","text":"1005 \u6570\u72ec \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6570\u72ec */ #include <iostream> using namespace std; inline short WhichBlock(int x, int y){ if (x <= 3){ if (y <= 3) return 1; if (y <= 6) return 2; if (y <= 9) return 3; } if (x <= 6){ if (y <= 3) return 4; if (y <= 6) return 5; if (y <= 9) return 6; } if (x <= 9){ if (y <= 3) return 7; if (y <= 6) return 8; if (y <= 9) return 9; } } int main(){ int k; cin >> k; for (int data = 0; data != k; ++data){ bool line[10][10] = {0}, row[10][10] = {0}, block[10][10] = {0}, flag = 1; short num = 0; for (int i = 0; i != 9; ++i){ for (int j = 0; j != 9; ++j){ cin >> num; if (line[i][num] || row[j][num] || block[WhichBlock(i + 1, j + 1)][num]){ flag = 0; //break; } line[i][num] = row[j][num] = block[WhichBlock(i + 1, j + 1)][num] = 1; } //if (!flag) break; } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; } Callmeink's solution #include <iostream> using namespace std; int a[10][10]; int main() { int t,a[10][10],i,j; cin >> t; for(int tt=1;tt<=t;tt++) { bool flag = true; for(i=1;i<=9;i++) for(j=1;j<=9;j++) cin >> a[i][j]; for(int i=1;i<=9;i++) { int sum1 = 0,sum2 = 1; for(int j=1;j<=9;j++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int j=1;j<=9;j++) { int sum1 = 0,sum2 = 1; for(int i=1;i<=9;i++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int i=1;i<=7;i+=3) for(int j=1;j<=7;j+=3) { int sum1 = 0,sum2 = 1; for (int x=i;x<=i+2;x++) for(int y=j;y<=j+2;y++) { sum1 += a[x][y]; sum2 *= a[x][y]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int n; cin >> n; bool status[21]; for(int i = 1; i <= n; ++i) { int sudoku[10][10]; bool flag = true; bool row[10][10] = {false}, col[10][10] = {false}, squ[4][4][10] = {false}; /*for(int j = 1; j <= 9; ++j) { //if (!flag) //break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag= false; //break; } if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; //break; } if (squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] == false) squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] = true; else { flag = false; //break; } } }*/ for(int j = 1; j <= 9; ++j) { //if (!flag) // break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int k = 1; k <= 9; ++k) { //if (!flag) // break; for (int j = 1; j <= 9; ++j) { if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int m = 1; m <= 3; ++m) { //if (!flag) // break; for (int n = 1; n <= 3; ++n) { // if (!flag) // break; for (int j = 1; j <= 3; ++j) { // if (!flag) // break; for (int k = 1; k <= 3; ++k) { if (squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] == false) squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] = true; else { flag = false; // break; } } } } } if (flag) status[i] = true; else status[i] = false; if (i != n) cin.get(); } for (int i = 1; i <= n; ++i) { if (status[i]) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"1005 \u6570\u72ec"},{"location":"nr/1005/#1005","text":"\u8f6c\u5230\u9898\u76ee","title":"1005 \u6570\u72ec"},{"location":"nr/1005/#fineartzs-solution","text":"/* \u6570\u72ec */ #include <iostream> using namespace std; inline short WhichBlock(int x, int y){ if (x <= 3){ if (y <= 3) return 1; if (y <= 6) return 2; if (y <= 9) return 3; } if (x <= 6){ if (y <= 3) return 4; if (y <= 6) return 5; if (y <= 9) return 6; } if (x <= 9){ if (y <= 3) return 7; if (y <= 6) return 8; if (y <= 9) return 9; } } int main(){ int k; cin >> k; for (int data = 0; data != k; ++data){ bool line[10][10] = {0}, row[10][10] = {0}, block[10][10] = {0}, flag = 1; short num = 0; for (int i = 0; i != 9; ++i){ for (int j = 0; j != 9; ++j){ cin >> num; if (line[i][num] || row[j][num] || block[WhichBlock(i + 1, j + 1)][num]){ flag = 0; //break; } line[i][num] = row[j][num] = block[WhichBlock(i + 1, j + 1)][num] = 1; } //if (!flag) break; } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1005/#callmeinks-solution","text":"#include <iostream> using namespace std; int a[10][10]; int main() { int t,a[10][10],i,j; cin >> t; for(int tt=1;tt<=t;tt++) { bool flag = true; for(i=1;i<=9;i++) for(j=1;j<=9;j++) cin >> a[i][j]; for(int i=1;i<=9;i++) { int sum1 = 0,sum2 = 1; for(int j=1;j<=9;j++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int j=1;j<=9;j++) { int sum1 = 0,sum2 = 1; for(int i=1;i<=9;i++) { sum1 += a[i][j]; sum2 *= a[i][j]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } for(int i=1;i<=7;i+=3) for(int j=1;j<=7;j+=3) { int sum1 = 0,sum2 = 1; for (int x=i;x<=i+2;x++) for(int y=j;y<=j+2;y++) { sum1 += a[x][y]; sum2 *= a[x][y]; } if (sum1 != 45 || sum2 != 362880) { flag = false; break; } } if (flag) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"Callmeink's solution"},{"location":"nr/1005/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int n; cin >> n; bool status[21]; for(int i = 1; i <= n; ++i) { int sudoku[10][10]; bool flag = true; bool row[10][10] = {false}, col[10][10] = {false}, squ[4][4][10] = {false}; /*for(int j = 1; j <= 9; ++j) { //if (!flag) //break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag= false; //break; } if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; //break; } if (squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] == false) squ[(j - 1) / 3 + 1][(k - 1) / 3 + 1][sudoku[j][k]] = true; else { flag = false; //break; } } }*/ for(int j = 1; j <= 9; ++j) { //if (!flag) // break; for(int k = 1; k <= 9; ++k) { cin >> sudoku[j][k]; if (row[j][sudoku[j][k]] == false) row[j][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int k = 1; k <= 9; ++k) { //if (!flag) // break; for (int j = 1; j <= 9; ++j) { if (col[k][sudoku[j][k]] == false) col[k][sudoku[j][k]] = true; else { flag = false; // break; } } } for (int m = 1; m <= 3; ++m) { //if (!flag) // break; for (int n = 1; n <= 3; ++n) { // if (!flag) // break; for (int j = 1; j <= 3; ++j) { // if (!flag) // break; for (int k = 1; k <= 3; ++k) { if (squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] == false) squ[m][n][sudoku[3 * (m - 1) + j][3 * (n - 1) + k]] = true; else { flag = false; // break; } } } } } if (flag) status[i] = true; else status[i] = false; if (i != n) cin.get(); } for (int i = 1; i <= n; ++i) { if (status[i]) cout << \"Right\" << endl; else cout << \"Wrong\" << endl; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1006/","text":"1006 \u6c42\u548c\u6e38\u620f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6c42\u548c\u6e38\u620f */ #include <iostream> using namespace std; int main(){ int n, t; cin >> n; cin >> t; int MinSum = t, CurSum = t, ans = t; for (int i = 2; i <= n; ++i){ cin >> t; CurSum += t; ans = max(ans, CurSum - MinSum); MinSum = min(MinSum, CurSum - t); } if (ans > 0) cout << ans << endl; else cout << \"Game Over\" << endl; //cout << ans << endl; return 0; } Callmeink's solution # include<iostream> using namespace std; int main(){ int a[1000001]; int n; cin >> n; for(int i=1;i<=n;i++) cin >> a[i]; int maxh=a[1]; int max=-1000; for(int i=2;i<=n;i++){ if (maxh<0) { if (maxh+a[i]>max) max=maxh+a[i]; maxh=a[i];} else { maxh += a[i]; if (maxh>max) max=maxh; } } if (max>0) cout << max; else cout << \"Game Over\" << endl; return 0; } vvvvv1v's solution #include <iostream> #include <climits> using namespace std; int MaxSum(int a[], int left, int right); int Max(int a, int b, int c); int main(void) { int n, sum = 0; cin >> n; int *a = NULL; a = new int[n]; //int a[100]; for (int i = 0; i < n; ++i) cin >> a[i]; sum = MaxSum(a, 0, n - 1); if (sum > 0) cout << sum; else cout << \"Game Over\"; return 0; } int MaxSum(int a[], int left, int right) { int center, max_left, max_right; int sum_left = 0, sum_right = 0; int sum_left_max = INT_MIN, sum_right_max = INT_MIN; if (left == right) return a[left] > 0 ? a[left] : 0; center = (left + right) / 2; max_left = MaxSum(a, left, center); max_right = MaxSum(a, center + 1, right); for (int i = center; i >= left; --i) { sum_left += a[i]; if (sum_left > sum_left_max) sum_left_max = sum_left; } for (int i = center + 1; i <= right; ++i) { sum_right += a[i]; if (sum_right > sum_right_max) sum_right_max = sum_right; } return Max(max_left, max_right, sum_left_max + sum_right_max); } int Max(int a, int b, int c) { if (a >= b && a >= c) return a; else if (b >= a && b >= c) return b; else return c; } WashWang's solution #include <cstdio> #include <iostream> using namespace std; int last,cur,now=-500,maxn,n; int main() { scanf(\"%d%d\",&n,&last); for (int i=1;i<n;++i) { scanf(\"%d\",&cur); now=max(cur+now,cur+last); last=cur; if (now>maxn) maxn=now; } if (maxn) cout<<maxn<<endl; else cout<<\"Game Over\"<<endl; return 0; }","title":"1006 \u6c42\u548c\u6e38\u620f"},{"location":"nr/1006/#1006","text":"\u8f6c\u5230\u9898\u76ee","title":"1006 \u6c42\u548c\u6e38\u620f"},{"location":"nr/1006/#fineartzs-solution","text":"/* \u6c42\u548c\u6e38\u620f */ #include <iostream> using namespace std; int main(){ int n, t; cin >> n; cin >> t; int MinSum = t, CurSum = t, ans = t; for (int i = 2; i <= n; ++i){ cin >> t; CurSum += t; ans = max(ans, CurSum - MinSum); MinSum = min(MinSum, CurSum - t); } if (ans > 0) cout << ans << endl; else cout << \"Game Over\" << endl; //cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1006/#callmeinks-solution","text":"# include<iostream> using namespace std; int main(){ int a[1000001]; int n; cin >> n; for(int i=1;i<=n;i++) cin >> a[i]; int maxh=a[1]; int max=-1000; for(int i=2;i<=n;i++){ if (maxh<0) { if (maxh+a[i]>max) max=maxh+a[i]; maxh=a[i];} else { maxh += a[i]; if (maxh>max) max=maxh; } } if (max>0) cout << max; else cout << \"Game Over\" << endl; return 0; }","title":"Callmeink's solution"},{"location":"nr/1006/#vvvvv1vs-solution","text":"#include <iostream> #include <climits> using namespace std; int MaxSum(int a[], int left, int right); int Max(int a, int b, int c); int main(void) { int n, sum = 0; cin >> n; int *a = NULL; a = new int[n]; //int a[100]; for (int i = 0; i < n; ++i) cin >> a[i]; sum = MaxSum(a, 0, n - 1); if (sum > 0) cout << sum; else cout << \"Game Over\"; return 0; } int MaxSum(int a[], int left, int right) { int center, max_left, max_right; int sum_left = 0, sum_right = 0; int sum_left_max = INT_MIN, sum_right_max = INT_MIN; if (left == right) return a[left] > 0 ? a[left] : 0; center = (left + right) / 2; max_left = MaxSum(a, left, center); max_right = MaxSum(a, center + 1, right); for (int i = center; i >= left; --i) { sum_left += a[i]; if (sum_left > sum_left_max) sum_left_max = sum_left; } for (int i = center + 1; i <= right; ++i) { sum_right += a[i]; if (sum_right > sum_right_max) sum_right_max = sum_right; } return Max(max_left, max_right, sum_left_max + sum_right_max); } int Max(int a, int b, int c) { if (a >= b && a >= c) return a; else if (b >= a && b >= c) return b; else return c; }","title":"vvvvv1v's solution"},{"location":"nr/1006/#washwangs-solution","text":"#include <cstdio> #include <iostream> using namespace std; int last,cur,now=-500,maxn,n; int main() { scanf(\"%d%d\",&n,&last); for (int i=1;i<n;++i) { scanf(\"%d\",&cur); now=max(cur+now,cur+last); last=cur; if (now>maxn) maxn=now; } if (maxn) cout<<maxn<<endl; else cout<<\"Game Over\"<<endl; return 0; }","title":"WashWang's solution"},{"location":"nr/1007/","text":"1007 \u4e8c\u54e5\u9886\u5de5\u8d44 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u9886\u5de5\u8d44 */ #include <iostream> #include <string> using namespace std; const int MAXS = 205; class BigNum{ //friend friend BigNum operator +(const BigNum&, const BigNum&); friend ostream& operator <<(ostream&, const BigNum&); public: //constructor //BigNum(); BigNum(const string&); BigNum(const BigNum&); //operator //short& operator [](const int& x) { return data[x]; } // BigNum& operator =(const BigNum&); int GetLen() const { return length; } private: short data[MAXS]; int length; }; BigNum::BigNum(const string& s){ for (int i = 0; i != MAXS - 1; ++i) data[i] = 0; length = s.size() - 1; int i = s.size() - 1; data[1] = s[i--] - '0'; data[2] = s[i] - '0'; for (int j = 3; j <= length; ++j) data[j] = s[s.size() - j - 1] - '0'; } BigNum::BigNum(const BigNum& b){ length = b.length; for (int i = 0; i != MAXS; ++i) data[i] = b.data[i]; } ostream& operator <<(ostream& os, const BigNum& b){ for (int i = b.length; i != 2; --i) os << b.data[i]; os << '.' << b.data[2] << b.data[1]; return os; } BigNum operator +(const BigNum& lhs, const BigNum& rhs){ BigNum ans(\"0.00\"); int len = max(lhs.length, rhs.length); for (int i = 1; i <= len; ++i){ ans.data[i] += lhs.data[i] + rhs.data[i]; if (ans.data[i] >= 10){ ans.data[i] -= 10; ++ans.data[i + 1]; } } if (ans.data[len + 1] != 0) ++len; ans.length = len; return ans; } int main(){ string s1, s2; cin >> s1 >> s2; BigNum a(s1), b(s2); cout << a + b << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; int main(void) { char *num_1, *num_2, *num_3, str_1[210], str_2[210]; cin >> str_1 >> str_2; num_1 = new char[strlen(str_1) + 1]; strcpy(num_1, str_1); num_2 = new char[strlen(str_2) + 1]; strcpy(num_2, str_2); int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); num_3 = new char[size_3]; num_3[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { if (num_1[size_1] == '.') { num_3[size_3] = '.'; } else { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; num_3[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } } num_3 = num_3 + size_3 + 1; cout << num_3; return 0; }","title":"1007 \u4e8c\u54e5\u9886\u5de5\u8d44"},{"location":"nr/1007/#1007","text":"\u8f6c\u5230\u9898\u76ee","title":"1007 \u4e8c\u54e5\u9886\u5de5\u8d44"},{"location":"nr/1007/#fineartzs-solution","text":"/* \u4e8c\u54e5\u9886\u5de5\u8d44 */ #include <iostream> #include <string> using namespace std; const int MAXS = 205; class BigNum{ //friend friend BigNum operator +(const BigNum&, const BigNum&); friend ostream& operator <<(ostream&, const BigNum&); public: //constructor //BigNum(); BigNum(const string&); BigNum(const BigNum&); //operator //short& operator [](const int& x) { return data[x]; } // BigNum& operator =(const BigNum&); int GetLen() const { return length; } private: short data[MAXS]; int length; }; BigNum::BigNum(const string& s){ for (int i = 0; i != MAXS - 1; ++i) data[i] = 0; length = s.size() - 1; int i = s.size() - 1; data[1] = s[i--] - '0'; data[2] = s[i] - '0'; for (int j = 3; j <= length; ++j) data[j] = s[s.size() - j - 1] - '0'; } BigNum::BigNum(const BigNum& b){ length = b.length; for (int i = 0; i != MAXS; ++i) data[i] = b.data[i]; } ostream& operator <<(ostream& os, const BigNum& b){ for (int i = b.length; i != 2; --i) os << b.data[i]; os << '.' << b.data[2] << b.data[1]; return os; } BigNum operator +(const BigNum& lhs, const BigNum& rhs){ BigNum ans(\"0.00\"); int len = max(lhs.length, rhs.length); for (int i = 1; i <= len; ++i){ ans.data[i] += lhs.data[i] + rhs.data[i]; if (ans.data[i] >= 10){ ans.data[i] -= 10; ++ans.data[i + 1]; } } if (ans.data[len + 1] != 0) ++len; ans.length = len; return ans; } int main(){ string s1, s2; cin >> s1 >> s2; BigNum a(s1), b(s2); cout << a + b << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1007/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; int main(void) { char *num_1, *num_2, *num_3, str_1[210], str_2[210]; cin >> str_1 >> str_2; num_1 = new char[strlen(str_1) + 1]; strcpy(num_1, str_1); num_2 = new char[strlen(str_2) + 1]; strcpy(num_2, str_2); int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); num_3 = new char[size_3]; num_3[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { if (num_1[size_1] == '.') { num_3[size_3] = '.'; } else { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; num_3[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } } num_3 = num_3 + size_3 + 1; cout << num_3; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1008/","text":"1008 \u4e8c\u54e5\u4e70\u671f\u8d27 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u4e70\u671f\u8d27 */ #include <iostream> #include <string> using namespace std; bool LeapYear[10000] = {0}, CanTrade[10000][13][32] = {0}; const short Day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; short Week[10000][13][32] = {0}, CanTradeDays[10000] = {0}; struct Date{ //constructor Date(const string&); Date(int, int, int); Date& operator ++(); friend inline bool operator ==(const Date&, const Date&); friend inline bool operator !=(const Date&, const Date&); int yy, mm, dd; }; Date::Date(const string& s){ yy = mm = dd = 0; for (int i = 0; i != 4; ++i) yy = yy * 10 + s[i] - '0'; mm = (s[5] - '0') * 10 + s[6] - '0'; dd = (s[8] - '0') * 10 + s[9] - '0'; } Date::Date(int y, int m, int d) : yy(y), mm(m), dd(d){} Date& Date::operator ++(){ ++dd; if (mm != 2){ if (dd > Day[mm]){ dd = 1; ++mm; if (mm > 12){ mm = 1; ++yy; } } } else{ if (dd > (LeapYear[yy] ? 29 : 28)){ dd = 1; mm = 3; } } return *this; } inline bool operator ==(const Date& lhs, const Date& rhs){ return (lhs.yy == rhs.yy && lhs.mm == rhs.mm && lhs.dd == rhs.dd); } inline bool operator !=(const Date& lhs, const Date& rhs){ return !(lhs == rhs); } inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } void PreTreatment(){ for (int i = 1900; i <= 9999; ++i) LeapYear[i] = (i % 400 == 0 || (i % 4 == 0 && i % 100 != 0)); Week[1900][1][1] = 1; for (int yy = 1900; yy <= 9999; ++yy){ int day = 0, lday = 0, year = yy; for (int mm = 1; mm <= 12; ++mm) { if (mm != 2) day = Day[mm]; else day = (LeapYear[year] ? 29 : 28); if (mm > 1) Week[yy][mm][1] = succ(Week[yy][mm - 1][lday]); else if (yy != 1900) Week[yy][mm][1] = succ(Week[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) Week[yy][mm][dd] = succ(Week[yy][mm][dd - 1]); lday = day; day = 0; } } for (int yy = 1900; yy <= 9999; ++yy) for (int mm = 1; mm <= 12; ++mm){ int day; if (mm != 2) day = Day[mm]; else day = (LeapYear[yy] ? 29 : 28); for (int dd = 1; dd <= day; ++dd){ CanTrade[yy][mm][dd] = !((Week[yy][mm][dd] == 6) || (Week[yy][mm][dd] == 7) || (mm == 1 && dd == 1) || (mm == 5 && dd <= 3) || (mm == 10 && dd <= 7)); if (CanTrade[yy][mm][dd]) ++CanTradeDays[yy]; } } } int gap(const Date& d1, const Date& d2){ int ret = 0; if (d1.yy + 1 >= d2.yy){ for (Date d(d1.yy, d1.mm, d1.dd); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; return (CanTrade[d2.yy][d2.mm][d2.dd] ? ++ret : ret); } for (Date d(d1.yy, d1.mm, d1.dd); d != Date(d1.yy + 1, 1, 1); ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; for (Date d(d2.yy, 1, 1); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; if (CanTrade[d2.yy][d2.mm][d2.dd]) ++ret; for (int yy = d1.yy + 1; yy != d2.yy; ++yy) ret += CanTradeDays[yy]; return ret; } int main(){ PreTreatment(); int n; cin >> n; for (int data = 0; data != n; ++data){ string s1, s2; cin >> s1 >> s2; Date date1(s1), date2(s2); cout << gap(date1, date2) << endl; } return 0; } vvvvv1v's solution #include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; const date origin = {2009, 12, 28}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isOK(const date &today); int CalcAll(const date &first, const date &last); int Calc(const date &first, const date &last); int main(void) { int n = 0, sum[400] = {0}; cin >> n; for (int i = 0; i < n; ++i) { date first, last; char temp; cin >> first.year >> temp >> first.month >> temp >> first.day; cin >> last.year >> temp >> last.month >> temp >> last.day; sum[i] = CalcAll(first, last); } for (int i = 0; i < n; ++i) { cout << sum[i]; if (i != n - 1) cout << endl; } return 0; /*for (int i = 1900; i <= 9999; ++i) { date first = {i, 1, 1}, last = {i, 12, 31}; cout << Calc(first, last) - 250 << \",\"; }*/ return 0; } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(i) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isOK(const date &today) { if (today.month == 1 && today.day == 1) return false; else if (today.month == 5 && today.day >= 1 && today.day <= 3) return false; else if (today.month == 10 && today.day >= 1 && today.day <= 7) return false; else { int Weekday = GetWeekday(today); if (Weekday == 6 || Weekday == 7) return false; } return true; } int CalcAll(const date &first, const date &last) { static int yearOK[10000] = {1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3}; int sum = 0; if (last.year - first.year <= 1) return Calc(first, last); else { for(int i = first.year + 1; i <= last.year - 1; ++i) sum += yearOK[i] + 250; date first_last = {first.year, 12, 31}, last_first = {last.year, 1, 1}; return sum + Calc(first, first_last) + Calc(last_first, last); } } int Calc(const date &first, const date &last) { date today = first; int sum = 0; while (!(today.year == last.year && today.month == last.month && today.day == last.day)) { if (isOK(today)) ++sum; switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day == 31) { if (today.month == 12) { ++today.year; today.month = 1; today.day = 1; } else { ++today.month; today.day = 1; } } else ++today.day; break; } case 4: case 6: case 9: case 11: { if (today.day == 30) { ++today.month; today.day = 1; } else ++today.day; break; } case 2: { if (isLeapYear(today.year)) { if (today.day == 29) { ++today.month; today.day = 1; } else ++today.day; } else { if (today.day == 28) { ++today.month; today.day = 1; } else ++today.day; } break; } default: break; } } return sum; }","title":"1008 \u4e8c\u54e5\u4e70\u671f\u8d27"},{"location":"nr/1008/#1008","text":"\u8f6c\u5230\u9898\u76ee","title":"1008 \u4e8c\u54e5\u4e70\u671f\u8d27"},{"location":"nr/1008/#fineartzs-solution","text":"/* \u4e8c\u54e5\u4e70\u671f\u8d27 */ #include <iostream> #include <string> using namespace std; bool LeapYear[10000] = {0}, CanTrade[10000][13][32] = {0}; const short Day[13] = {0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; short Week[10000][13][32] = {0}, CanTradeDays[10000] = {0}; struct Date{ //constructor Date(const string&); Date(int, int, int); Date& operator ++(); friend inline bool operator ==(const Date&, const Date&); friend inline bool operator !=(const Date&, const Date&); int yy, mm, dd; }; Date::Date(const string& s){ yy = mm = dd = 0; for (int i = 0; i != 4; ++i) yy = yy * 10 + s[i] - '0'; mm = (s[5] - '0') * 10 + s[6] - '0'; dd = (s[8] - '0') * 10 + s[9] - '0'; } Date::Date(int y, int m, int d) : yy(y), mm(m), dd(d){} Date& Date::operator ++(){ ++dd; if (mm != 2){ if (dd > Day[mm]){ dd = 1; ++mm; if (mm > 12){ mm = 1; ++yy; } } } else{ if (dd > (LeapYear[yy] ? 29 : 28)){ dd = 1; mm = 3; } } return *this; } inline bool operator ==(const Date& lhs, const Date& rhs){ return (lhs.yy == rhs.yy && lhs.mm == rhs.mm && lhs.dd == rhs.dd); } inline bool operator !=(const Date& lhs, const Date& rhs){ return !(lhs == rhs); } inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } void PreTreatment(){ for (int i = 1900; i <= 9999; ++i) LeapYear[i] = (i % 400 == 0 || (i % 4 == 0 && i % 100 != 0)); Week[1900][1][1] = 1; for (int yy = 1900; yy <= 9999; ++yy){ int day = 0, lday = 0, year = yy; for (int mm = 1; mm <= 12; ++mm) { if (mm != 2) day = Day[mm]; else day = (LeapYear[year] ? 29 : 28); if (mm > 1) Week[yy][mm][1] = succ(Week[yy][mm - 1][lday]); else if (yy != 1900) Week[yy][mm][1] = succ(Week[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) Week[yy][mm][dd] = succ(Week[yy][mm][dd - 1]); lday = day; day = 0; } } for (int yy = 1900; yy <= 9999; ++yy) for (int mm = 1; mm <= 12; ++mm){ int day; if (mm != 2) day = Day[mm]; else day = (LeapYear[yy] ? 29 : 28); for (int dd = 1; dd <= day; ++dd){ CanTrade[yy][mm][dd] = !((Week[yy][mm][dd] == 6) || (Week[yy][mm][dd] == 7) || (mm == 1 && dd == 1) || (mm == 5 && dd <= 3) || (mm == 10 && dd <= 7)); if (CanTrade[yy][mm][dd]) ++CanTradeDays[yy]; } } } int gap(const Date& d1, const Date& d2){ int ret = 0; if (d1.yy + 1 >= d2.yy){ for (Date d(d1.yy, d1.mm, d1.dd); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; return (CanTrade[d2.yy][d2.mm][d2.dd] ? ++ret : ret); } for (Date d(d1.yy, d1.mm, d1.dd); d != Date(d1.yy + 1, 1, 1); ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; for (Date d(d2.yy, 1, 1); d != d2; ++d) if (CanTrade[d.yy][d.mm][d.dd]) ++ret; if (CanTrade[d2.yy][d2.mm][d2.dd]) ++ret; for (int yy = d1.yy + 1; yy != d2.yy; ++yy) ret += CanTradeDays[yy]; return ret; } int main(){ PreTreatment(); int n; cin >> n; for (int data = 0; data != n; ++data){ string s1, s2; cin >> s1 >> s2; Date date1(s1), date2(s2); cout << gap(date1, date2) << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1008/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; const date origin = {2009, 12, 28}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isOK(const date &today); int CalcAll(const date &first, const date &last); int Calc(const date &first, const date &last); int main(void) { int n = 0, sum[400] = {0}; cin >> n; for (int i = 0; i < n; ++i) { date first, last; char temp; cin >> first.year >> temp >> first.month >> temp >> first.day; cin >> last.year >> temp >> last.month >> temp >> last.day; sum[i] = CalcAll(first, last); } for (int i = 0; i < n; ++i) { cout << sum[i]; if (i != n - 1) cout << endl; } return 0; /*for (int i = 1900; i <= 9999; ++i) { date first = {i, 1, 1}, last = {i, 12, 31}; cout << Calc(first, last) - 250 << \",\"; }*/ return 0; } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(i) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isOK(const date &today) { if (today.month == 1 && today.day == 1) return false; else if (today.month == 5 && today.day >= 1 && today.day <= 3) return false; else if (today.month == 10 && today.day >= 1 && today.day <= 7) return false; else { int Weekday = GetWeekday(today); if (Weekday == 6 || Weekday == 7) return false; } return true; } int CalcAll(const date &first, const date &last) { static int yearOK[10000] = {1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,1,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3,4,1,1,2,3,3,2,1,2,3,3,3,3,1,2,3,4,2,1,1,2,3,3,2,2,2,3,3}; int sum = 0; if (last.year - first.year <= 1) return Calc(first, last); else { for(int i = first.year + 1; i <= last.year - 1; ++i) sum += yearOK[i] + 250; date first_last = {first.year, 12, 31}, last_first = {last.year, 1, 1}; return sum + Calc(first, first_last) + Calc(last_first, last); } } int Calc(const date &first, const date &last) { date today = first; int sum = 0; while (!(today.year == last.year && today.month == last.month && today.day == last.day)) { if (isOK(today)) ++sum; switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day == 31) { if (today.month == 12) { ++today.year; today.month = 1; today.day = 1; } else { ++today.month; today.day = 1; } } else ++today.day; break; } case 4: case 6: case 9: case 11: { if (today.day == 30) { ++today.month; today.day = 1; } else ++today.day; break; } case 2: { if (isLeapYear(today.year)) { if (today.day == 29) { ++today.month; today.day = 1; } else ++today.day; } else { if (today.day == 28) { ++today.month; today.day = 1; } else ++today.day; } break; } default: break; } } return sum; }","title":"vvvvv1v's solution"},{"location":"nr/1009/","text":"1009 \u4e8c\u54e5\u7092\u80a1\u7968 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const int EndOfTrade = 100000005; struct TradeRecord{ //constructor TradeRecord() : t(0), a(0), d(0) {}; TradeRecord(const TradeRecord &TR) : t(TR.t), a(TR.a), d(TR.d) {} int t, a; short d; }; double profit(const TradeRecord &trade, const int &v){ double ret = 0.0; if (trade.d == 1){ double outcome = 100.0 * v * trade.a; outcome += (outcome - 2500 > -1e-6) ? outcome * 0.002 : 5.0; outcome += trade.a / 10.0; outcome += 1.0; ret -= outcome; } else{ double income = 100.0 * v * trade.a; double t = income; income -= t * 0.001; income -= (t - 2500 > -1e-6) ? t * 0.002 : 5.0; income -= trade.a / 10.0; income -= 1.0; ret += income; } return ret; } int main(){ TradeRecord tr[55]; int m = 0; cin >> m; for (int i = 1; i <= m; ++i){ cin >> tr[i].t >> tr[i].a >> tr[i].d; } int n = 0; cin >> n; int t[10005], v[10005]; for (int i = 1; i <= n; ++i) cin >> t[i] >> v[i]; int j = 1; double NetProfit = 0.0; for (int i = 1; i <= n; ++i){ if (t[i] < tr[j].t) continue; while (j <= m && tr[j].t < t[i]){ NetProfit += profit(tr[j], v[i - 1]); ++j; } if (j > m) break; } for (int i = j; i <= m; ++i){ NetProfit += profit(tr[i], v[n]); } cout << setiosflags(ios::fixed) << setprecision(2) << NetProfit << endl; return 0; } vvvvv1v's solution #include <iostream> #include <iomanip> using namespace std; struct Trade { int time; int num; int way; int price; }; int main(void) { Trade arr[50]; int m; cin >> m; for (int i = 0; i < m; ++i) { cin >> arr[i].time >> arr[i].num >> arr[i].way; } int n; cin >> n; int price_former = 0, price_last = 0, time_former = 0, time_last = 0; for (int i = 0; i < n; ++i) { cin >> time_last >> price_last; for (int j = 0; j < m; ++j) { if (arr[j].time >= time_former && arr[j].time < time_last) arr[j].price = price_former; else if (j == m - 1 && arr[j].time >= time_last) arr[j].price = price_last; } time_former = time_last; price_former = price_last; } double sum = 0.0; int trsc = 0; double cmss = 0.0; for (int i = 0; i < m; ++i) { if (arr[i].way == 1) { trsc = arr[i].num * arr[i].price * 100; sum -= (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; } else { trsc = arr[i].num * arr[i].price * 100; sum += (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; sum -= (double)trsc * 0.001; } } /*sum *= 100.0; if (sum >= 0.0) sum += 0.5; else sum -= 0.5; sum = (int)sum; sum /= 100;*/ cout << setiosflags(ios::fixed) << setprecision(2) << sum; return 0; }","title":"1009 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1009/#1009","text":"\u8f6c\u5230\u9898\u76ee","title":"1009 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1009/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const int EndOfTrade = 100000005; struct TradeRecord{ //constructor TradeRecord() : t(0), a(0), d(0) {}; TradeRecord(const TradeRecord &TR) : t(TR.t), a(TR.a), d(TR.d) {} int t, a; short d; }; double profit(const TradeRecord &trade, const int &v){ double ret = 0.0; if (trade.d == 1){ double outcome = 100.0 * v * trade.a; outcome += (outcome - 2500 > -1e-6) ? outcome * 0.002 : 5.0; outcome += trade.a / 10.0; outcome += 1.0; ret -= outcome; } else{ double income = 100.0 * v * trade.a; double t = income; income -= t * 0.001; income -= (t - 2500 > -1e-6) ? t * 0.002 : 5.0; income -= trade.a / 10.0; income -= 1.0; ret += income; } return ret; } int main(){ TradeRecord tr[55]; int m = 0; cin >> m; for (int i = 1; i <= m; ++i){ cin >> tr[i].t >> tr[i].a >> tr[i].d; } int n = 0; cin >> n; int t[10005], v[10005]; for (int i = 1; i <= n; ++i) cin >> t[i] >> v[i]; int j = 1; double NetProfit = 0.0; for (int i = 1; i <= n; ++i){ if (t[i] < tr[j].t) continue; while (j <= m && tr[j].t < t[i]){ NetProfit += profit(tr[j], v[i - 1]); ++j; } if (j > m) break; } for (int i = j; i <= m; ++i){ NetProfit += profit(tr[i], v[n]); } cout << setiosflags(ios::fixed) << setprecision(2) << NetProfit << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1009/#vvvvv1vs-solution","text":"#include <iostream> #include <iomanip> using namespace std; struct Trade { int time; int num; int way; int price; }; int main(void) { Trade arr[50]; int m; cin >> m; for (int i = 0; i < m; ++i) { cin >> arr[i].time >> arr[i].num >> arr[i].way; } int n; cin >> n; int price_former = 0, price_last = 0, time_former = 0, time_last = 0; for (int i = 0; i < n; ++i) { cin >> time_last >> price_last; for (int j = 0; j < m; ++j) { if (arr[j].time >= time_former && arr[j].time < time_last) arr[j].price = price_former; else if (j == m - 1 && arr[j].time >= time_last) arr[j].price = price_last; } time_former = time_last; price_former = price_last; } double sum = 0.0; int trsc = 0; double cmss = 0.0; for (int i = 0; i < m; ++i) { if (arr[i].way == 1) { trsc = arr[i].num * arr[i].price * 100; sum -= (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; } else { trsc = arr[i].num * arr[i].price * 100; sum += (double)trsc; cmss = (double)trsc * 0.002; if (cmss < 5) cmss = 5; sum -= cmss; sum -= (double)arr[i].num / 10; sum -= 1.0; sum -= (double)trsc * 0.001; } } /*sum *= 100.0; if (sum >= 0.0) sum += 0.5; else sum -= 0.5; sum = (int)sum; sum /= 100;*/ cout << setiosflags(ios::fixed) << setprecision(2) << sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1010/","text":"1010 \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 */ #include <iostream> using namespace std; int main(){ int bd = 0, now = 0, mom = 0; for (int i = 1; i <= 12; ++i){ cin >> bd; now += 300; if (now < bd){ cout << '-' << i << endl; return 0; } mom += (now - bd) / 100 * 100; now = (now - bd) % 100; } now += mom * 1.2; cout << now << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main(void) { int arr[13]; for (int i = 1; i <= 12; ++i) cin >> arr[i]; int sum = 0, bank = 0; bool flag = false; for (int i = 1; i <= 12; ++i) { sum += 300; sum -= arr[i]; if (sum < 0) { cout << \"-\" << i; flag = true; break; } else { bank += (sum / 100) * 100; sum -= (sum / 100) * 100; } } if (!flag) cout << sum + bank * 1.2; return 0; }","title":"1010 \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212"},{"location":"nr/1010/#1010","text":"\u8f6c\u5230\u9898\u76ee","title":"1010 \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212"},{"location":"nr/1010/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u50a8\u84c4\u8ba1\u5212 */ #include <iostream> using namespace std; int main(){ int bd = 0, now = 0, mom = 0; for (int i = 1; i <= 12; ++i){ cin >> bd; now += 300; if (now < bd){ cout << '-' << i << endl; return 0; } mom += (now - bd) / 100 * 100; now = (now - bd) % 100; } now += mom * 1.2; cout << now << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1010/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main(void) { int arr[13]; for (int i = 1; i <= 12; ++i) cin >> arr[i]; int sum = 0, bank = 0; bool flag = false; for (int i = 1; i <= 12; ++i) { sum += 300; sum -= arr[i]; if (sum < 0) { cout << \"-\" << i; flag = true; break; } else { bank += (sum / 100) * 100; sum -= (sum / 100) * 100; } } if (!flag) cout << sum + bank * 1.2; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1011/","text":"1011 \u590d\u6570\u7c7b \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <iomanip> using namespace std; class MyComplex { friend ostream &operator<<(ostream &, const MyComplex &); friend istream &operator>>(istream &, MyComplex &); friend MyComplex operator+(const MyComplex &, const MyComplex &); friend MyComplex operator-(const MyComplex &, const MyComplex &); friend MyComplex operator!(const MyComplex &); friend MyComplex operator*(const MyComplex &, const MyComplex &); friend MyComplex operator/(const MyComplex &, const MyComplex &); private: double x, y; public: MyComplex &operator=(const MyComplex &); MyComplex &operator+=(const MyComplex &); MyComplex &operator-=(const MyComplex &); MyComplex &operator*=(const MyComplex &); MyComplex &operator/=(const MyComplex &); }; ostream &operator<<(ostream &ost, const MyComplex &z) { ost <<setiosflags(ios::fixed)<<setprecision(2)<< z.x << ' ' << z.y; return ost; } istream &operator>>(istream &ist, MyComplex &z) { ist >> z.x >> z.y; return ist; } MyComplex operator+(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x + b.x; Temp.y = a.y + b.y; return Temp; } MyComplex operator-(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x - b.x; Temp.y = a.y - b.y; return Temp; } MyComplex operator!(const MyComplex &a) { MyComplex Temp; Temp.x = a.x; Temp.y = -a.y; return Temp; } MyComplex operator*(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x * b.x - a.y * b.y; Temp.y = a.x * b.y + a.y * b.x; return Temp; } MyComplex operator/(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp = a * (!b); Temp.x /= (b * (!b)).x; Temp.y /= (b * (!b)).x; return Temp; } MyComplex &MyComplex::operator=(const MyComplex &a) { x = a.x; y = a.y; return *this; } MyComplex &MyComplex::operator+=(const MyComplex &a) { *this = *this + a; return *this; } MyComplex &MyComplex::operator-=(const MyComplex &a) { *this = *this - a; return *this; } MyComplex &MyComplex::operator*=(const MyComplex &a) { *this = *this * a; return *this; } MyComplex &MyComplex::operator/=(const MyComplex &a) { *this = *this / a; return *this; } int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; } FineArtz's solution /* \u590d\u6570\u7c7b */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; class CMP{ //friend friend inline CMP operator +(const CMP&, const CMP&); friend inline CMP operator -(const CMP&, const CMP&); friend inline CMP operator *(const CMP&, const CMP&); friend inline CMP operator /(const CMP&, const CMP&); friend istream& operator >>(istream&, CMP&); friend ostream& operator <<(ostream&, const CMP&); public: //constructor CMP() : x(0.0), y(0.0) {} CMP(const double &xx, const double &yy) : x(xx), y(yy) {} CMP(const int &xx, const int &yy) : x(xx), y(yy) {} CMP(const CMP &cmp) : x(cmp.x), y(cmp.y) {} //operator CMP& operator =(const CMP&); CMP& operator +=(const CMP&); CMP& operator -=(const CMP&); CMP& operator *=(const CMP&); CMP& operator /=(const CMP&); CMP operator ~() const;//conjugation CMP operator -() const;//minus double SquareModule() const { return (x * x + y * y); } double Module() const { return sqrt(x * x + y * y); } private: double x, y; }; CMP& CMP::operator =(const CMP &rhs){ x = rhs.x; y = rhs.y; return *this; } CMP CMP::operator ~() const{ return CMP(x, -y); } CMP CMP::operator -() const{ return CMP(-x, -y); } CMP inline operator +(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x + rhs.x, lhs.y + rhs.y); } CMP inline operator -(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x - rhs.x, lhs.y - rhs.y); } CMP inline operator *(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } CMP inline operator /(const CMP &lhs, const CMP &rhs){ CMP ret = lhs * ~rhs; return CMP(ret.x / rhs.SquareModule(), ret.y / rhs.SquareModule()); } CMP& CMP::operator +=(const CMP &rhs){ x += rhs.x; y += rhs.y; return *this; } CMP& CMP::operator -=(const CMP &rhs){ x -= rhs.x; y -= rhs.y; return *this; } CMP& CMP::operator *=(const CMP &rhs){ double tx = x * rhs.x - y * rhs.y; double ty = x * rhs.y + y * rhs.x; x = tx; y = ty; return *this; } CMP& CMP::operator /=(const CMP &rhs){ CMP cmp = *this / rhs; *this = cmp; return *this; } istream& operator >>(istream &is, CMP& cmp){ is >> cmp.x >> cmp.y; return is; } ostream& operator <<(ostream &os, const CMP& cmp){ os << setiosflags(ios::fixed) << setprecision(2) << cmp.x << ' ' << cmp.y; return os; } int main(){ CMP z1, z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; } vvvvv1v's solution #include <iostream> #include <iomanip> using namespace std; class MyComplex { friend istream& operator>>(istream &is, MyComplex &c) { is >> c.x >> c.y; return is; } friend ostream& operator<<(ostream &os, const MyComplex &c) { os << setiosflags(ios::fixed) << setprecision(2) << c.x << \" \" << c.y; } private: double x, y; public: MyComplex(double a = 0.0, double b = 0.0): x(a), y(b){} MyComplex operator+(const MyComplex &c) { return MyComplex(x + c.x, y + c.y); } MyComplex operator-(const MyComplex &c) { return MyComplex(x - c.x, y - c.y); } MyComplex operator*(const MyComplex &c) { return MyComplex(x * c.x - y * c.y, x * c.y + y * c.x); } MyComplex operator/(const MyComplex &c) { return MyComplex((x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y)); } MyComplex& operator+=(const MyComplex &c) { x += c.x; y += c.y; return *this; } MyComplex& operator-=(const MyComplex &c) { x -= c.x; y -= c.y; return *this; } MyComplex& operator*=(const MyComplex &c) { double tem_x = x * c.x - y * c.y, tem_y = x * c.y + y * c.x; x = tem_x; y = tem_y; return *this; } MyComplex& operator/=(const MyComplex &c) { double tem_x = (x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), tem_y = (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y); x = tem_x; y = tem_y; return *this; } ~MyComplex(){} }; int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"1011 \u590d\u6570\u7c7b"},{"location":"nr/1011/#1011","text":"\u8f6c\u5230\u9898\u76ee","title":"1011 \u590d\u6570\u7c7b"},{"location":"nr/1011/#victrids-solution","text":"#include <iostream> #include <iomanip> using namespace std; class MyComplex { friend ostream &operator<<(ostream &, const MyComplex &); friend istream &operator>>(istream &, MyComplex &); friend MyComplex operator+(const MyComplex &, const MyComplex &); friend MyComplex operator-(const MyComplex &, const MyComplex &); friend MyComplex operator!(const MyComplex &); friend MyComplex operator*(const MyComplex &, const MyComplex &); friend MyComplex operator/(const MyComplex &, const MyComplex &); private: double x, y; public: MyComplex &operator=(const MyComplex &); MyComplex &operator+=(const MyComplex &); MyComplex &operator-=(const MyComplex &); MyComplex &operator*=(const MyComplex &); MyComplex &operator/=(const MyComplex &); }; ostream &operator<<(ostream &ost, const MyComplex &z) { ost <<setiosflags(ios::fixed)<<setprecision(2)<< z.x << ' ' << z.y; return ost; } istream &operator>>(istream &ist, MyComplex &z) { ist >> z.x >> z.y; return ist; } MyComplex operator+(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x + b.x; Temp.y = a.y + b.y; return Temp; } MyComplex operator-(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x - b.x; Temp.y = a.y - b.y; return Temp; } MyComplex operator!(const MyComplex &a) { MyComplex Temp; Temp.x = a.x; Temp.y = -a.y; return Temp; } MyComplex operator*(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp.x = a.x * b.x - a.y * b.y; Temp.y = a.x * b.y + a.y * b.x; return Temp; } MyComplex operator/(const MyComplex &a, const MyComplex &b) { MyComplex Temp; Temp = a * (!b); Temp.x /= (b * (!b)).x; Temp.y /= (b * (!b)).x; return Temp; } MyComplex &MyComplex::operator=(const MyComplex &a) { x = a.x; y = a.y; return *this; } MyComplex &MyComplex::operator+=(const MyComplex &a) { *this = *this + a; return *this; } MyComplex &MyComplex::operator-=(const MyComplex &a) { *this = *this - a; return *this; } MyComplex &MyComplex::operator*=(const MyComplex &a) { *this = *this * a; return *this; } MyComplex &MyComplex::operator/=(const MyComplex &a) { *this = *this / a; return *this; } int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"VictriD's solution"},{"location":"nr/1011/#fineartzs-solution","text":"/* \u590d\u6570\u7c7b */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; class CMP{ //friend friend inline CMP operator +(const CMP&, const CMP&); friend inline CMP operator -(const CMP&, const CMP&); friend inline CMP operator *(const CMP&, const CMP&); friend inline CMP operator /(const CMP&, const CMP&); friend istream& operator >>(istream&, CMP&); friend ostream& operator <<(ostream&, const CMP&); public: //constructor CMP() : x(0.0), y(0.0) {} CMP(const double &xx, const double &yy) : x(xx), y(yy) {} CMP(const int &xx, const int &yy) : x(xx), y(yy) {} CMP(const CMP &cmp) : x(cmp.x), y(cmp.y) {} //operator CMP& operator =(const CMP&); CMP& operator +=(const CMP&); CMP& operator -=(const CMP&); CMP& operator *=(const CMP&); CMP& operator /=(const CMP&); CMP operator ~() const;//conjugation CMP operator -() const;//minus double SquareModule() const { return (x * x + y * y); } double Module() const { return sqrt(x * x + y * y); } private: double x, y; }; CMP& CMP::operator =(const CMP &rhs){ x = rhs.x; y = rhs.y; return *this; } CMP CMP::operator ~() const{ return CMP(x, -y); } CMP CMP::operator -() const{ return CMP(-x, -y); } CMP inline operator +(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x + rhs.x, lhs.y + rhs.y); } CMP inline operator -(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x - rhs.x, lhs.y - rhs.y); } CMP inline operator *(const CMP &lhs, const CMP &rhs){ return CMP(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } CMP inline operator /(const CMP &lhs, const CMP &rhs){ CMP ret = lhs * ~rhs; return CMP(ret.x / rhs.SquareModule(), ret.y / rhs.SquareModule()); } CMP& CMP::operator +=(const CMP &rhs){ x += rhs.x; y += rhs.y; return *this; } CMP& CMP::operator -=(const CMP &rhs){ x -= rhs.x; y -= rhs.y; return *this; } CMP& CMP::operator *=(const CMP &rhs){ double tx = x * rhs.x - y * rhs.y; double ty = x * rhs.y + y * rhs.x; x = tx; y = ty; return *this; } CMP& CMP::operator /=(const CMP &rhs){ CMP cmp = *this / rhs; *this = cmp; return *this; } istream& operator >>(istream &is, CMP& cmp){ is >> cmp.x >> cmp.y; return is; } ostream& operator <<(ostream &os, const CMP& cmp){ os << setiosflags(ios::fixed) << setprecision(2) << cmp.x << ' ' << cmp.y; return os; } int main(){ CMP z1, z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1011/#vvvvv1vs-solution","text":"#include <iostream> #include <iomanip> using namespace std; class MyComplex { friend istream& operator>>(istream &is, MyComplex &c) { is >> c.x >> c.y; return is; } friend ostream& operator<<(ostream &os, const MyComplex &c) { os << setiosflags(ios::fixed) << setprecision(2) << c.x << \" \" << c.y; } private: double x, y; public: MyComplex(double a = 0.0, double b = 0.0): x(a), y(b){} MyComplex operator+(const MyComplex &c) { return MyComplex(x + c.x, y + c.y); } MyComplex operator-(const MyComplex &c) { return MyComplex(x - c.x, y - c.y); } MyComplex operator*(const MyComplex &c) { return MyComplex(x * c.x - y * c.y, x * c.y + y * c.x); } MyComplex operator/(const MyComplex &c) { return MyComplex((x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y)); } MyComplex& operator+=(const MyComplex &c) { x += c.x; y += c.y; return *this; } MyComplex& operator-=(const MyComplex &c) { x -= c.x; y -= c.y; return *this; } MyComplex& operator*=(const MyComplex &c) { double tem_x = x * c.x - y * c.y, tem_y = x * c.y + y * c.x; x = tem_x; y = tem_y; return *this; } MyComplex& operator/=(const MyComplex &c) { double tem_x = (x * c.x + y * c.y) / (c.x * c.x + c.y * c.y), tem_y = (y * c.x - x * c.y) / (c.x * c.x + c.y * c.y); x = tem_x; y = tem_y; return *this; } ~MyComplex(){} }; int main() { MyComplex z1; MyComplex z2; cin >> z1 >> z2; cout << z1 + z2 << endl; cout << z1 - z2 << endl; cout << z1 * z2 << endl; cout << z1 / z2 << endl; cout << (z1 += z2) << endl; cout << (z1 -= z2) << endl; cout << (z1 *= z2) << endl; cout << (z1 /= z2) << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1012/","text":"1012 \u589e\u957f\u7387\u95ee\u9898 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u589e\u957f\u7387\u95ee\u9898 */ #include <iostream> #include <cmath> #include <vector> using namespace std; vector<int> CanInc[200005]; int len[200005] = {0}; long long tms[200005] = {0}, cnt[200005] = {0}; //f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u957f\u5ea6\uff0ctms[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u7684\u4e2a\u6570\uff0ccnt[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u5e8f\u5217\u6570 /*void PreTreatment(int s, int t){ for (int i = s; i != t; ++i) for (int p = 1; p <= 99; ++p){ if (trunc(s * p * 0.01) == (s * p / 100)) CanInc[i].push_back(p); } } */ int main(){ int s, t; cin >> s >> t; for (int i = s; i <= t; ++i){ len[i] = 1; tms[i] = 1; } cnt[1] = t - s + 1; long long ans = 1; for (int i = s; i < t; ++i){ for (int j = 1; j <= 100; ++j){ if (i * j % 100 == 0){ int next = i + i * j / 100; if (next > t) continue; if (len[next] == len[i] + 1){ tms[next] += tms[i]; } else if (len[next] < len[i] + 1){ len[next] = len[i] + 1; tms[next] = tms[i]; } ans = (ans > len[next] ? ans : len[next]); cnt[len[i] + 1] += tms[i]; } } } cout << ans << endl; cout << cnt[ans] << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int s, t, length = 0, sum = 0; void find(int n, int num) { for (int i = 1; num + num * i / 100 <= t; ++i) { if (num * i % 100 == 0) find(n + 1, num + num * i / 100); } if (n > length) { length = n; sum = 1; } else if (n == length) ++sum; else return; } int main(void) { cin >> s >> t; find(1, s); cout << length << endl << sum << endl; return 0; }","title":"1012 \u589e\u957f\u7387\u95ee\u9898"},{"location":"nr/1012/#1012","text":"\u8f6c\u5230\u9898\u76ee","title":"1012 \u589e\u957f\u7387\u95ee\u9898"},{"location":"nr/1012/#fineartzs-solution","text":"/* \u589e\u957f\u7387\u95ee\u9898 */ #include <iostream> #include <cmath> #include <vector> using namespace std; vector<int> CanInc[200005]; int len[200005] = {0}; long long tms[200005] = {0}, cnt[200005] = {0}; //f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u957f\u5ea6\uff0ctms[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u5e8f\u5217\u7684\u4e2a\u6570\uff0ccnt[i]\u8868\u793a\u957f\u5ea6\u4e3ai\u7684\u5e8f\u5217\u6570 /*void PreTreatment(int s, int t){ for (int i = s; i != t; ++i) for (int p = 1; p <= 99; ++p){ if (trunc(s * p * 0.01) == (s * p / 100)) CanInc[i].push_back(p); } } */ int main(){ int s, t; cin >> s >> t; for (int i = s; i <= t; ++i){ len[i] = 1; tms[i] = 1; } cnt[1] = t - s + 1; long long ans = 1; for (int i = s; i < t; ++i){ for (int j = 1; j <= 100; ++j){ if (i * j % 100 == 0){ int next = i + i * j / 100; if (next > t) continue; if (len[next] == len[i] + 1){ tms[next] += tms[i]; } else if (len[next] < len[i] + 1){ len[next] = len[i] + 1; tms[next] = tms[i]; } ans = (ans > len[next] ? ans : len[next]); cnt[len[i] + 1] += tms[i]; } } } cout << ans << endl; cout << cnt[ans] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1012/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int s, t, length = 0, sum = 0; void find(int n, int num) { for (int i = 1; num + num * i / 100 <= t; ++i) { if (num * i % 100 == 0) find(n + 1, num + num * i / 100); } if (n > length) { length = n; sum = 1; } else if (n == length) ++sum; else return; } int main(void) { cin >> s >> t; find(1, s); cout << length << endl << sum << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1013/","text":"1013 \u65e0\u9650\u80cc\u5305 \u8f6c\u5230\u9898\u76ee FineArtz's solution #include <iostream> #include <map> using namespace std; int main(){ map<int, int> bucket; int f[10005] = {0}; int v, n; cin >> v >> n; while (n--){ int vi, wi; cin >> vi >> wi; if (bucket.find(vi) != bucket.end()){ if (bucket[vi] < wi) bucket[vi] = wi; } else bucket[vi] = wi; } for (auto i = bucket.begin(); i != bucket.end(); ++i) for (int j = i->first; j <= v; ++j) f[j] = max(f[j], f[j - i->first] + i->second); cout << f[v] << endl; return 0; }","title":"1013 \u65e0\u9650\u80cc\u5305"},{"location":"nr/1013/#1013","text":"\u8f6c\u5230\u9898\u76ee","title":"1013 \u65e0\u9650\u80cc\u5305"},{"location":"nr/1013/#fineartzs-solution","text":"#include <iostream> #include <map> using namespace std; int main(){ map<int, int> bucket; int f[10005] = {0}; int v, n; cin >> v >> n; while (n--){ int vi, wi; cin >> vi >> wi; if (bucket.find(vi) != bucket.end()){ if (bucket[vi] < wi) bucket[vi] = wi; } else bucket[vi] = wi; } for (auto i = bucket.begin(); i != bucket.end(); ++i) for (int j = i->first; j <= v; ++j) f[j] = max(f[j], f[j - i->first] + i->second); cout << f[v] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1014/","text":"1014 \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt(string); int getl() const { return len; } private: short data[100005]; int len; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans(\"\"); int l = (a.getl() > b.getl() ? a.getl() : b.getl()); ans.len = l; for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.data[ans.len] == 0) --ans.len; return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt a(s1), b(s2); cout << a + b << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100005; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Add(num_1, num_2, num_3); cout << num_3; }","title":"1014 \u9ad8\u7cbe\u5ea6\u52a0\u6cd5"},{"location":"nr/1014/#1014","text":"\u8f6c\u5230\u9898\u76ee","title":"1014 \u9ad8\u7cbe\u5ea6\u52a0\u6cd5"},{"location":"nr/1014/#fineartzs-solution","text":"/* \u9ad8\u7cbe\u5ea6\u52a0\u6cd5 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt(string); int getl() const { return len; } private: short data[100005]; int len; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans(\"\"); int l = (a.getl() > b.getl() ? a.getl() : b.getl()); ans.len = l; for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.data[ans.len] == 0) --ans.len; return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt a(s1), b(s2); cout << a + b << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1014/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100005; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Add(num_1, num_2, num_3); cout << num_3; }","title":"vvvvv1v's solution"},{"location":"nr/1015/","text":"1015 \u9ad8\u7cbe\u5ea6\u4e58\u6cd5 \u8f6c\u5230\u9898\u76ee FineArtz's solution #include <iostream> #include <string> #include <vector> #include <cmath> using namespace std; //const int MAXSIZE = 10000; const double pi = 3.1415926; class comp{//complex number //friend friend comp operator +(const comp&, const comp&); friend comp operator -(const comp&, const comp&); friend comp operator *(const comp&, const comp&); friend comp operator /(const comp&, const comp&); public: //constructor comp() : x(0.0), y(0.0) {} comp(double xx, double yy) : x(xx), y(yy) {}; comp(const comp &cmp) : x(cmp.x), y(cmp.y) {}; comp operator ~() const;//conjugation comp operator -() const;//minus comp& operator =(const comp&); double mod() const {return sqrt(x * x + y * y);} double smod() const {return x * x + y * y;} comp recp() const; double x, y; }; comp comp::operator ~() const {return comp(x, -y);} comp comp::operator -() const {return comp(-x, -y);} comp& comp::operator =(const comp &rhs){ x = rhs.x; y = rhs.y; return *this; } inline comp operator +(const comp &lhs, const comp &rhs){return comp(lhs.x + rhs.x, lhs.y + rhs.y);} inline comp operator -(const comp &lhs, const comp &rhs){return comp(lhs.x - rhs.x, lhs.y - rhs.y);} inline comp operator *(const comp &lhs, const comp &rhs){ return comp(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } inline comp operator /(const comp &lhs, const comp &rhs){ double module = rhs.smod(); return comp((lhs.x * rhs.x - lhs.y * rhs.y) / module, (lhs.x * rhs.y + lhs.y * rhs.x) / module); } inline comp comp::recp() const { double module = this->smod(); return comp(x / module, -y / module); } class BigInt{ //friend friend ostream& operator <<(ostream&, const BigInt&); friend BigInt operator *(const BigInt&, const BigInt&); public: //constructor BigInt(); BigInt(const string&); vector<int> data; int len; }; BigInt::BigInt() : len(1), data(0) {} BigInt::BigInt(const string &s) : len(s.size()){ for (int i = 1; i <= len; ++i) data.push_back(s[len - i] - '0'); } ostream& operator <<(ostream& os, const BigInt &b){ for (int i = b.len - 1; i >= 0; --i) os << b.data[i]; return os; } vector<comp> FFT(const vector<comp> &f, bool inv = false){ int len = f.size(); if (len == 1){ vector<comp> ret; ret.push_back(f[0]); return ret; } vector<comp> f1 , f2; for (int i = 0; i < len; i += 2){ f1.push_back(f[i]); f2.push_back(f[i + 1]); } vector<comp> ret1, ret2, ret; ret1 = FFT(f1, inv); ret2 = FFT(f2, inv); for (int i = 0; i < len; ++i){ comp w(cos(2.0 * pi * i / len), sin(2.0 * pi * i / len)); if (inv) w = w.recp(); comp reti(ret1[i % (len / 2)] + w * ret2[i % (len / 2)]); ret.push_back(reti); } return ret; } BigInt operator *(const BigInt &lhs, const BigInt &rhs){ vector<comp> fx1, fx2; int len = max(lhs.len, rhs.len), k = 1; while (len > k) k *= 2; len = k * 2; for (int i = 0; i < len; ++i){ if (i < lhs.len) fx1.push_back(comp(double(lhs.data[i]), 0.0)); else fx1.push_back(comp(0.0, 0.0)); } for (int i = 0; i < len; ++i){ if (i < rhs.len) fx2.push_back(comp(double(rhs.data[i]), 0.0)); else fx2.push_back(comp(0.0, 0.0)); } vector<comp> y1 = FFT(fx1), y2 = FFT(fx2), y; for (int i = 0; i < len; ++i) y.push_back(y1[i] * y2[i]); vector<comp> fx = FFT(y, 1); for (int i = 0; i < len; ++i) fx[i].x /= len; BigInt ret(\"\"); for (int i = 0; i < len; ++i) ret.data.push_back(round(fx[i].x)); for (int i = 0; i < len - 1; ++i){ if (ret.data[i] >= 10){ ret.data[i + 1] += ret.data[i] / 10; ret.data[i] %= 10; } } while (ret.data[len - 1] == 0){ --len; ret.data.erase(ret.data.end() - 1); } ret.len = len; return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt lhs(s1), rhs(s2); cout << lhs * rhs << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100000; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); delete [] head; } void MultiSingle(char* num_1, int num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1); head = new char[size_1]; head[size_1] = '\\0'; --size_1; for(;temp != 0 || size_1 >= 0; --size_1) { int multi = size_1 >= 0 ? (num_1[size_1] - '0') : 0; head[size_1] = (multi * num_2 + temp) % 10 + '0'; temp = (multi * num_2 + temp) / 10; } head = head + size_1 + 1; strcpy(num_3, head); delete [] head; } void Multi(char* num_1, char* num_2, char* num_3) { char head[MAXSIZE], temp[MAXSIZE]; int size_2 = strlen(num_2); for (int i = 0; i < size_2; ++i) { MultiSingle(num_1, num_2[i] - '0', temp); int j = 0; for(j = i; j < size_2 - 1; ++j) temp[strlen(temp)] = '0'; temp[strlen(temp)] = '\\0'; Add(head, temp, head); } strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Multi(num_1, num_2, num_3); cout << num_3; return 0; }","title":"1015 \u9ad8\u7cbe\u5ea6\u4e58\u6cd5"},{"location":"nr/1015/#1015","text":"\u8f6c\u5230\u9898\u76ee","title":"1015 \u9ad8\u7cbe\u5ea6\u4e58\u6cd5"},{"location":"nr/1015/#fineartzs-solution","text":"#include <iostream> #include <string> #include <vector> #include <cmath> using namespace std; //const int MAXSIZE = 10000; const double pi = 3.1415926; class comp{//complex number //friend friend comp operator +(const comp&, const comp&); friend comp operator -(const comp&, const comp&); friend comp operator *(const comp&, const comp&); friend comp operator /(const comp&, const comp&); public: //constructor comp() : x(0.0), y(0.0) {} comp(double xx, double yy) : x(xx), y(yy) {}; comp(const comp &cmp) : x(cmp.x), y(cmp.y) {}; comp operator ~() const;//conjugation comp operator -() const;//minus comp& operator =(const comp&); double mod() const {return sqrt(x * x + y * y);} double smod() const {return x * x + y * y;} comp recp() const; double x, y; }; comp comp::operator ~() const {return comp(x, -y);} comp comp::operator -() const {return comp(-x, -y);} comp& comp::operator =(const comp &rhs){ x = rhs.x; y = rhs.y; return *this; } inline comp operator +(const comp &lhs, const comp &rhs){return comp(lhs.x + rhs.x, lhs.y + rhs.y);} inline comp operator -(const comp &lhs, const comp &rhs){return comp(lhs.x - rhs.x, lhs.y - rhs.y);} inline comp operator *(const comp &lhs, const comp &rhs){ return comp(lhs.x * rhs.x - lhs.y * rhs.y, lhs.x * rhs.y + lhs.y * rhs.x); } inline comp operator /(const comp &lhs, const comp &rhs){ double module = rhs.smod(); return comp((lhs.x * rhs.x - lhs.y * rhs.y) / module, (lhs.x * rhs.y + lhs.y * rhs.x) / module); } inline comp comp::recp() const { double module = this->smod(); return comp(x / module, -y / module); } class BigInt{ //friend friend ostream& operator <<(ostream&, const BigInt&); friend BigInt operator *(const BigInt&, const BigInt&); public: //constructor BigInt(); BigInt(const string&); vector<int> data; int len; }; BigInt::BigInt() : len(1), data(0) {} BigInt::BigInt(const string &s) : len(s.size()){ for (int i = 1; i <= len; ++i) data.push_back(s[len - i] - '0'); } ostream& operator <<(ostream& os, const BigInt &b){ for (int i = b.len - 1; i >= 0; --i) os << b.data[i]; return os; } vector<comp> FFT(const vector<comp> &f, bool inv = false){ int len = f.size(); if (len == 1){ vector<comp> ret; ret.push_back(f[0]); return ret; } vector<comp> f1 , f2; for (int i = 0; i < len; i += 2){ f1.push_back(f[i]); f2.push_back(f[i + 1]); } vector<comp> ret1, ret2, ret; ret1 = FFT(f1, inv); ret2 = FFT(f2, inv); for (int i = 0; i < len; ++i){ comp w(cos(2.0 * pi * i / len), sin(2.0 * pi * i / len)); if (inv) w = w.recp(); comp reti(ret1[i % (len / 2)] + w * ret2[i % (len / 2)]); ret.push_back(reti); } return ret; } BigInt operator *(const BigInt &lhs, const BigInt &rhs){ vector<comp> fx1, fx2; int len = max(lhs.len, rhs.len), k = 1; while (len > k) k *= 2; len = k * 2; for (int i = 0; i < len; ++i){ if (i < lhs.len) fx1.push_back(comp(double(lhs.data[i]), 0.0)); else fx1.push_back(comp(0.0, 0.0)); } for (int i = 0; i < len; ++i){ if (i < rhs.len) fx2.push_back(comp(double(rhs.data[i]), 0.0)); else fx2.push_back(comp(0.0, 0.0)); } vector<comp> y1 = FFT(fx1), y2 = FFT(fx2), y; for (int i = 0; i < len; ++i) y.push_back(y1[i] * y2[i]); vector<comp> fx = FFT(y, 1); for (int i = 0; i < len; ++i) fx[i].x /= len; BigInt ret(\"\"); for (int i = 0; i < len; ++i) ret.data.push_back(round(fx[i].x)); for (int i = 0; i < len - 1; ++i){ if (ret.data[i] >= 10){ ret.data[i + 1] += ret.data[i] / 10; ret.data[i] %= 10; } } while (ret.data[len - 1] == 0){ --len; ret.data.erase(ret.data.end() - 1); } ret.len = len; return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt lhs(s1), rhs(s2); cout << lhs * rhs << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1015/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXSIZE = 100000; void Add(char* num_1, char* num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1), size_2 = strlen(num_2), size_3 = 2 + (size_1 > size_2 ? size_1 : size_2); head = new char[size_3]; head[size_3] = '\\0'; --size_1; --size_2; --size_3; for(;temp != 0 || size_1 >= 0 || size_2 >= 0; --size_1, --size_2, --size_3) { int add_1 = size_1 >= 0 ? (num_1[size_1] - '0') : 0; int add_2 = size_2 >= 0 ? (num_2[size_2] - '0') : 0; head[size_3] = (add_1 + add_2 + temp) % 10 + '0'; temp = (add_1 + add_2 + temp) / 10; } head = head + size_3 + 1; strcpy(num_3, head); delete [] head; } void MultiSingle(char* num_1, int num_2, char* num_3) { char* head; int temp = 0, size_1 = strlen(num_1); head = new char[size_1]; head[size_1] = '\\0'; --size_1; for(;temp != 0 || size_1 >= 0; --size_1) { int multi = size_1 >= 0 ? (num_1[size_1] - '0') : 0; head[size_1] = (multi * num_2 + temp) % 10 + '0'; temp = (multi * num_2 + temp) / 10; } head = head + size_1 + 1; strcpy(num_3, head); delete [] head; } void Multi(char* num_1, char* num_2, char* num_3) { char head[MAXSIZE], temp[MAXSIZE]; int size_2 = strlen(num_2); for (int i = 0; i < size_2; ++i) { MultiSingle(num_1, num_2[i] - '0', temp); int j = 0; for(j = i; j < size_2 - 1; ++j) temp[strlen(temp)] = '0'; temp[strlen(temp)] = '\\0'; Add(head, temp, head); } strcpy(num_3, head); } int main(void) { char num_1[MAXSIZE], num_2[MAXSIZE], num_3[MAXSIZE]; cin >> num_1 >> num_2; Multi(num_1, num_2, num_3); cout << num_3; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1016/","text":"1016 \u9ad8\u7cbe\u5ea6\u9664\u6cd5 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <string> using namespace std; constexpr int MAXL = 1000; class BigInt{ //friend friend BigInt operator /(const BigInt&, const BigInt&); friend BigInt operator -(const BigInt&, const BigInt&); //friend bool operator >(const BigInt&, const BigInt&); //friend bool operator ==(const BigInt&, const BigInt&); //friend bool operator >=(const BigInt&, const BigInt&); //friend ostream& operator <<(ostream&, const BigInt&); //friend istream& operator >>(istream&, BigInt&); public: //constructor BigInt() = default; BigInt(const string&); BigInt(const BigInt&); int operator [](const int &x) const {return data[x];} int GetLen() const {return len;} BigInt lshift10(const int&) const; private: int len = 1; int data[MAXL] = {0}; }; BigInt::BigInt(const string &s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } bool operator ==(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() != rhs.GetLen()) return false; for (int i = 1; i <= lhs.GetLen(); ++i) if (lhs[i] != rhs[i]) return false; return true; } bool operator >(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() < rhs.GetLen()) return false; if (lhs.GetLen() > rhs.GetLen()) return true; for (int i = lhs.GetLen(); i >= 1; --i){ if (lhs[i] > rhs[i]) return true; if (lhs[i] < rhs[i]) return false; } return false; } bool operator >=(const BigInt &lhs, const BigInt &rhs){ if (lhs == rhs || lhs > rhs) return true; return false; } ostream& operator <<(ostream &os, const BigInt &bi){ for (int i = bi.GetLen(); i >= 1; --i) os << bi[i]; return os; } BigInt operator -(const BigInt &lhs, const BigInt &rhs){ BigInt ret(lhs); for (int i = 1; i <= rhs.len; ++i) ret.data[i] -= rhs[i]; for (int i = 1; i <= ret.len; ++i){ if (ret.data[i] < 0){ ret.data[i] += 10; --ret.data[i + 1]; } } int i = ret.len; while (i >= 1 && ret.data[i] == 0) --i; ret.len = (i != 0) ? i : 1; return ret; } BigInt BigInt::lshift10(const int &x) const{ if (x <= 0) return *this; BigInt tmp(*this); for (int i = len + x; i >= x + 1; --i) tmp.data[i] = tmp[i - x]; for (int i = 1; i <= x; ++i) tmp.data[i] = 0; tmp.len += x; return tmp; } BigInt operator /(const BigInt &lhs, const BigInt &rhs){ BigInt ret, tmp(lhs); while(tmp > rhs){ int i = 0; while (tmp > rhs.lshift10(i + 1)) ++i; if (i >= ret.len) ret.len = i + 1; while (tmp > rhs.lshift10(i)){ tmp = tmp - rhs.lshift10(i); ++ret.data[i + 1]; } } if (tmp >= rhs) ++ret.data[1]; for (int i = 1; i <= ret.len - 1; ++i) if (ret[i] >= 10){ ret.data[i] -= 10; ++ret.data[i + 1]; } if (ret[ret.len] >= 10){ ret.data[ret.len] -= 10; ++ret.data[++ret.len]; } return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt bi1(s1), bi2(s2); cout << bi1 / bi2 << endl; return 0; }","title":"1016 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1016/#1016","text":"\u8f6c\u5230\u9898\u76ee","title":"1016 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1016/#fineartzs-solution","text":"/* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <string> using namespace std; constexpr int MAXL = 1000; class BigInt{ //friend friend BigInt operator /(const BigInt&, const BigInt&); friend BigInt operator -(const BigInt&, const BigInt&); //friend bool operator >(const BigInt&, const BigInt&); //friend bool operator ==(const BigInt&, const BigInt&); //friend bool operator >=(const BigInt&, const BigInt&); //friend ostream& operator <<(ostream&, const BigInt&); //friend istream& operator >>(istream&, BigInt&); public: //constructor BigInt() = default; BigInt(const string&); BigInt(const BigInt&); int operator [](const int &x) const {return data[x];} int GetLen() const {return len;} BigInt lshift10(const int&) const; private: int len = 1; int data[MAXL] = {0}; }; BigInt::BigInt(const string &s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } bool operator ==(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() != rhs.GetLen()) return false; for (int i = 1; i <= lhs.GetLen(); ++i) if (lhs[i] != rhs[i]) return false; return true; } bool operator >(const BigInt &lhs, const BigInt &rhs){ if (lhs.GetLen() < rhs.GetLen()) return false; if (lhs.GetLen() > rhs.GetLen()) return true; for (int i = lhs.GetLen(); i >= 1; --i){ if (lhs[i] > rhs[i]) return true; if (lhs[i] < rhs[i]) return false; } return false; } bool operator >=(const BigInt &lhs, const BigInt &rhs){ if (lhs == rhs || lhs > rhs) return true; return false; } ostream& operator <<(ostream &os, const BigInt &bi){ for (int i = bi.GetLen(); i >= 1; --i) os << bi[i]; return os; } BigInt operator -(const BigInt &lhs, const BigInt &rhs){ BigInt ret(lhs); for (int i = 1; i <= rhs.len; ++i) ret.data[i] -= rhs[i]; for (int i = 1; i <= ret.len; ++i){ if (ret.data[i] < 0){ ret.data[i] += 10; --ret.data[i + 1]; } } int i = ret.len; while (i >= 1 && ret.data[i] == 0) --i; ret.len = (i != 0) ? i : 1; return ret; } BigInt BigInt::lshift10(const int &x) const{ if (x <= 0) return *this; BigInt tmp(*this); for (int i = len + x; i >= x + 1; --i) tmp.data[i] = tmp[i - x]; for (int i = 1; i <= x; ++i) tmp.data[i] = 0; tmp.len += x; return tmp; } BigInt operator /(const BigInt &lhs, const BigInt &rhs){ BigInt ret, tmp(lhs); while(tmp > rhs){ int i = 0; while (tmp > rhs.lshift10(i + 1)) ++i; if (i >= ret.len) ret.len = i + 1; while (tmp > rhs.lshift10(i)){ tmp = tmp - rhs.lshift10(i); ++ret.data[i + 1]; } } if (tmp >= rhs) ++ret.data[1]; for (int i = 1; i <= ret.len - 1; ++i) if (ret[i] >= 10){ ret.data[i] -= 10; ++ret.data[i + 1]; } if (ret[ret.len] >= 10){ ret.data[ret.len] -= 10; ++ret.data[++ret.len]; } return ret; } int main(){ string s1, s2; cin >> s1 >> s2; BigInt bi1(s1), bi2(s2); cout << bi1 / bi2 << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1017/","text":"1017 \u4e8c\u54e5\u517b\u5154\u5b50 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u517b\u5154\u5b50 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend BigInt operator *(const BigInt&, const int&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt() = default; BigInt(string); BigInt(const BigInt&); int getl() const { return len; } private: int data[20000] = {0}; int len = 1; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans; int l = (a.getl() > b.getl() ? a.getl() : b.getl()); for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.len > 1 && ans.data[ans.len] == 0) --ans.len; return ans; } BigInt operator *(const BigInt &a, const int &b){ BigInt ans; for (int i = 1; i <= a.len; ++i) ans.data[i] = b * a.data[i]; ans.len = a.len; for (int i = 1; i <= ans.len; ++i){ if (ans.data[i] / 10 != 0){ ans.data[i + 1] += ans.data[i] / 10; ans.data[i] %= 10; } } while (ans.data[ans.len + 1] > 0){ ++ans.len; if (ans.data[ans.len] >= 10){ ans.data[ans.len + 1] += ans.data[ans.len] / 10; ans.data[ans.len] %= 10; } } return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } BigInt one(\"1\"), two, aft, ans(\"1\"); int main(){ int a, b, c, n; cin >> a >> b >> c >> n; while (n--){ BigInt tmp(one * a + two * b + aft * c); ans = ans + tmp; aft = aft + two; two = one; one = tmp; } cout << ans << endl; // cout << ans.getl() << endl; }","title":"1017 \u4e8c\u54e5\u517b\u5154\u5b50"},{"location":"nr/1017/#1017","text":"\u8f6c\u5230\u9898\u76ee","title":"1017 \u4e8c\u54e5\u517b\u5154\u5b50"},{"location":"nr/1017/#fineartzs-solution","text":"/* \u4e8c\u54e5\u517b\u5154\u5b50 */ #include <iostream> #include <string> using namespace std; class BigInt{ friend BigInt operator +(const BigInt&, const BigInt&); friend BigInt operator *(const BigInt&, const int&); friend ostream& operator <<(ostream &, const BigInt&); public: //constructor BigInt() = default; BigInt(string); BigInt(const BigInt&); int getl() const { return len; } private: int data[20000] = {0}; int len = 1; }; BigInt::BigInt(string s){ len = s.size(); for (int i = 1; i <= len; ++i) data[i] = s[len - i] - '0'; } BigInt::BigInt(const BigInt &b){ len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; } BigInt operator +(const BigInt &a, const BigInt &b){ BigInt ans; int l = (a.getl() > b.getl() ? a.getl() : b.getl()); for (int i = 1; i <= l; ++i) ans.data[i] = a.data[i] + b.data[i]; int i = 1; while (i <= l + 1){ if (ans.data[i] >= 10){ ans.data[i++] -= 10; ++ans.data[i]; } else ++i; } ans.len = i; while (ans.len > 1 && ans.data[ans.len] == 0) --ans.len; return ans; } BigInt operator *(const BigInt &a, const int &b){ BigInt ans; for (int i = 1; i <= a.len; ++i) ans.data[i] = b * a.data[i]; ans.len = a.len; for (int i = 1; i <= ans.len; ++i){ if (ans.data[i] / 10 != 0){ ans.data[i + 1] += ans.data[i] / 10; ans.data[i] %= 10; } } while (ans.data[ans.len + 1] > 0){ ++ans.len; if (ans.data[ans.len] >= 10){ ans.data[ans.len + 1] += ans.data[ans.len] / 10; ans.data[ans.len] %= 10; } } return ans; } ostream& operator <<(ostream &os, const BigInt &a){ for (int i = a.len; i >= 1; --i) os << a.data[i]; return os; } BigInt one(\"1\"), two, aft, ans(\"1\"); int main(){ int a, b, c, n; cin >> a >> b >> c >> n; while (n--){ BigInt tmp(one * a + two * b + aft * c); ans = ans + tmp; aft = aft + two; two = one; one = tmp; } cout << ans << endl; // cout << ans.getl() << endl; }","title":"FineArtz's solution"},{"location":"nr/1018/","text":"1018 A+B Problem Revisited \u8f6c\u5230\u9898\u76ee FineArtz's solution /* A+B Problem Revisited */ #include <iostream> using namespace std; int main(){ int a, b; while (cin >> a >> b){ cout << a + b << endl; } return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { int a, b; while(cin >> a >> b) cout << a + b; return 0; }","title":"1018 A+B Problem Revisited"},{"location":"nr/1018/#1018-ab-problem-revisited","text":"\u8f6c\u5230\u9898\u76ee","title":"1018 A+B Problem Revisited"},{"location":"nr/1018/#fineartzs-solution","text":"/* A+B Problem Revisited */ #include <iostream> using namespace std; int main(){ int a, b; while (cin >> a >> b){ cout << a + b << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1018/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { int a, b; while(cin >> a >> b) cout << a + b; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1019/","text":"1019 \u62ec\u53f7\u5339\u914d \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u62ec\u53f7\u5339\u914d */ #include <iostream> #include <sstream> using namespace std; int main(){ int n; cin >> n; while (n--){ string s; cin >> s; istringstream iss(s); char ch; bool flag = 1; int left = 0; while (iss >> ch){ if (ch == '(') ++left; else if (ch == ')') --left; if (left < 0){ cout << \"NO\" << endl; flag = 0; break; } } if (flag){ if (left == 0) cout << \"YES\" << endl; else cout << \"NO\" << endl; } } return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAX = 50; const int LENGTH = 101; int main(void) { int n; cin >> n; bool result[MAX]; char str[LENGTH]; int brackets[LENGTH]; cin.ignore(); for (int i = 0; i < n; ++i) { int sumleft = 0, sumright = 0, length = 0; bool flag = true; cin.getline(str, LENGTH); length = strlen(str); for (int j = 0; j < length; ++j) { if (str[j] == '(') { brackets[j] = -1; ++sumleft; } else if (str[j] == ')') { brackets[j] = 1; ++sumright; } else brackets[j] = 0; } if (sumleft != sumright) { result[i] = false; continue; } while(sumleft != 0 && flag) { int brackets_last = 0, brackets_next = 0, k = 0, k_last = 0; while(!brackets[k]) ++k; brackets_next = brackets[k]; while (sumleft != 0 && flag) { brackets_last = brackets_next; k_last = k; ++k; while(!brackets[k] && k < length) ++k; if (k >= length) { flag = false; break; } brackets_next = brackets[k]; if (brackets_last == -1 && brackets_next == 1) { brackets[k_last] = brackets[k] = 0; --sumleft; break; } } } if (flag) result[i] = true; else result[i] = false; } for (int i = 0; i < n; ++i) { cout << (result[i] ? \"YES\" : \"NO\"); if (i < n - 1) cout << endl; } return 0; }","title":"1019 \u62ec\u53f7\u5339\u914d"},{"location":"nr/1019/#1019","text":"\u8f6c\u5230\u9898\u76ee","title":"1019 \u62ec\u53f7\u5339\u914d"},{"location":"nr/1019/#fineartzs-solution","text":"/* \u62ec\u53f7\u5339\u914d */ #include <iostream> #include <sstream> using namespace std; int main(){ int n; cin >> n; while (n--){ string s; cin >> s; istringstream iss(s); char ch; bool flag = 1; int left = 0; while (iss >> ch){ if (ch == '(') ++left; else if (ch == ')') --left; if (left < 0){ cout << \"NO\" << endl; flag = 0; break; } } if (flag){ if (left == 0) cout << \"YES\" << endl; else cout << \"NO\" << endl; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1019/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAX = 50; const int LENGTH = 101; int main(void) { int n; cin >> n; bool result[MAX]; char str[LENGTH]; int brackets[LENGTH]; cin.ignore(); for (int i = 0; i < n; ++i) { int sumleft = 0, sumright = 0, length = 0; bool flag = true; cin.getline(str, LENGTH); length = strlen(str); for (int j = 0; j < length; ++j) { if (str[j] == '(') { brackets[j] = -1; ++sumleft; } else if (str[j] == ')') { brackets[j] = 1; ++sumright; } else brackets[j] = 0; } if (sumleft != sumright) { result[i] = false; continue; } while(sumleft != 0 && flag) { int brackets_last = 0, brackets_next = 0, k = 0, k_last = 0; while(!brackets[k]) ++k; brackets_next = brackets[k]; while (sumleft != 0 && flag) { brackets_last = brackets_next; k_last = k; ++k; while(!brackets[k] && k < length) ++k; if (k >= length) { flag = false; break; } brackets_next = brackets[k]; if (brackets_last == -1 && brackets_next == 1) { brackets[k_last] = brackets[k] = 0; --sumleft; break; } } } if (flag) result[i] = true; else result[i] = false; } for (int i = 0; i < n; ++i) { cout << (result[i] ? \"YES\" : \"NO\"); if (i < n - 1) cout << endl; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1020/","text":"1020 \u5206\u89e3\u8d28\u56e0\u6570 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5206\u89e3\u8d28\u56e0\u6570 */ #include <iostream> #include <cmath> #include <map> using namespace std; bool isp(int x){ for (int i = 2; i <= trunc(sqrt(x)); ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int nn = n; map<int, int> ans; for (int i = 2; i <= trunc(sqrt(nn)); ++i){ if (isp(i)){ while (n % i == 0){ ++ans[i]; n /= i; } } } if (n != 1) ++ans[n]; cout << nn << \"=\"; for (map<int, int>::iterator i = ans.begin(); i != ans.end(); ++i) cout << i->first << '(' << i->second << ')'; cout << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cmath> using namespace std; const int MAXSIZE = 10000; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; int Pnums[MAXSIZE][2], count = 0; cin >> n; cout << n << \"=\"; int num = 2; while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!count) { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } else { if (i == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } } n /= i; num = i; break; } } } if (n == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = n; Pnums[count][1] = 1; } for (int i = 1; i <= count; ++i) cout << Pnums[i][0] << \"(\" << Pnums[i][1] << \")\"; return 0; }","title":"1020 \u5206\u89e3\u8d28\u56e0\u6570"},{"location":"nr/1020/#1020","text":"\u8f6c\u5230\u9898\u76ee","title":"1020 \u5206\u89e3\u8d28\u56e0\u6570"},{"location":"nr/1020/#fineartzs-solution","text":"/* \u5206\u89e3\u8d28\u56e0\u6570 */ #include <iostream> #include <cmath> #include <map> using namespace std; bool isp(int x){ for (int i = 2; i <= trunc(sqrt(x)); ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int nn = n; map<int, int> ans; for (int i = 2; i <= trunc(sqrt(nn)); ++i){ if (isp(i)){ while (n % i == 0){ ++ans[i]; n /= i; } } } if (n != 1) ++ans[n]; cout << nn << \"=\"; for (map<int, int>::iterator i = ans.begin(); i != ans.end(); ++i) cout << i->first << '(' << i->second << ')'; cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1020/#vvvvv1vs-solution","text":"#include <iostream> #include <cmath> using namespace std; const int MAXSIZE = 10000; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; int Pnums[MAXSIZE][2], count = 0; cin >> n; cout << n << \"=\"; int num = 2; while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!count) { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } else { if (i == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = i; Pnums[count][1] = 1; } } n /= i; num = i; break; } } } if (n == Pnums[count][0]) ++Pnums[count][1]; else { ++count; Pnums[count][0] = n; Pnums[count][1] = 1; } for (int i = 1; i <= count; ++i) cout << Pnums[i][0] << \"(\" << Pnums[i][1] << \")\"; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1021/","text":"1021 \u4ece\u524d\u6709\u5ea7\u5c71 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iomanip> #include <iostream> using namespace std; inline int& min(int& s1, int& s2) { return s1 < s2 ? s1 : s2; } int calc(int i, int j, int n) { int p = min(min(i, n + 1 - i), min(j, n + 1 - j)); if (i == p) return j - i + 1 + 4 * (n - p + 1) * (p - 1); if (i == n + 1 - p) return 3 * n - j - 5 * p + 4 * (n - p + 1) * (p - 1) + 4; if (j == p) return j - i + 4 * n - 8 * p + 4 * (n - p + 1) * (p - 1) + 5; else return i + n - 3 * p + 4 * (n - p + 1) * (p - 1) + 2; } int main() { int n; cin >> n; for (int i = 0; i < n; i++) { if (i) cout << endl; for (int j = 0; j < n; j++) { cout << setw(6) << calc(i + 1, j + 1, n); } } return 0; } FineArtz's solution /* \u4ece\u524d\u6709\u5ea7\u5c71 */ #include <iostream> #include <iomanip> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cout << setw(6) << step(n, j, i) + 1; } cout << endl; } return 0; } vvvvv1v's solution #include <iostream> #include <iomanip> using namespace std; int MAXSIZE = 200; int main(void) { int mountain[MAXSIZE][MAXSIZE], n, sum, i = 1, j = 1, count = 0; cin >> n; sum = n * n; for (int k = 1; k <= n; ++k) for (int l = 1; l <= n; ++l) mountain[k][l] = 0; mountain[i][j] = ++count; --sum; while (sum > 0) { while(sum > 0 && j < n && !mountain[i][j + 1]) { mountain[i][++j] = ++count; --sum; } while(sum > 0 && i < n && !mountain[i + 1][j]) { mountain[++i][j] = ++count; --sum; } while(sum > 0 && j > 1 && !mountain[i][j - 1]) { mountain[i][--j] = ++count; --sum; } while(sum > 0 && i > 1 && !mountain[i - 1][j]) { mountain[--i][j] = ++count; --sum; } } for (int k = 1; k <= n; ++k) { for (int l = 1; l <= n; ++l) { cout << setw(6) << mountain[k][l]; } if (k < n) cout << endl; } return 0; }","title":"1021 \u4ece\u524d\u6709\u5ea7\u5c71"},{"location":"nr/1021/#1021","text":"\u8f6c\u5230\u9898\u76ee","title":"1021 \u4ece\u524d\u6709\u5ea7\u5c71"},{"location":"nr/1021/#victrids-solution","text":"#include <iomanip> #include <iostream> using namespace std; inline int& min(int& s1, int& s2) { return s1 < s2 ? s1 : s2; } int calc(int i, int j, int n) { int p = min(min(i, n + 1 - i), min(j, n + 1 - j)); if (i == p) return j - i + 1 + 4 * (n - p + 1) * (p - 1); if (i == n + 1 - p) return 3 * n - j - 5 * p + 4 * (n - p + 1) * (p - 1) + 4; if (j == p) return j - i + 4 * n - 8 * p + 4 * (n - p + 1) * (p - 1) + 5; else return i + n - 3 * p + 4 * (n - p + 1) * (p - 1) + 2; } int main() { int n; cin >> n; for (int i = 0; i < n; i++) { if (i) cout << endl; for (int j = 0; j < n; j++) { cout << setw(6) << calc(i + 1, j + 1, n); } } return 0; }","title":"VictriD's solution"},{"location":"nr/1021/#fineartzs-solution","text":"/* \u4ece\u524d\u6709\u5ea7\u5c71 */ #include <iostream> #include <iomanip> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cout << setw(6) << step(n, j, i) + 1; } cout << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1021/#vvvvv1vs-solution","text":"#include <iostream> #include <iomanip> using namespace std; int MAXSIZE = 200; int main(void) { int mountain[MAXSIZE][MAXSIZE], n, sum, i = 1, j = 1, count = 0; cin >> n; sum = n * n; for (int k = 1; k <= n; ++k) for (int l = 1; l <= n; ++l) mountain[k][l] = 0; mountain[i][j] = ++count; --sum; while (sum > 0) { while(sum > 0 && j < n && !mountain[i][j + 1]) { mountain[i][++j] = ++count; --sum; } while(sum > 0 && i < n && !mountain[i + 1][j]) { mountain[++i][j] = ++count; --sum; } while(sum > 0 && j > 1 && !mountain[i][j - 1]) { mountain[i][--j] = ++count; --sum; } while(sum > 0 && i > 1 && !mountain[i - 1][j]) { mountain[--i][j] = ++count; --sum; } } for (int k = 1; k <= n; ++k) { for (int l = 1; l <= n; ++l) { cout << setw(6) << mountain[k][l]; } if (k < n) cout << endl; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1022/","text":"1022 Fib\u6570\u5217 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Fib\u6570\u5217 */ #include <iostream> using namespace std; const int MOD = 2010; class Mat{ public: //constructor Mat(const int &x, const int &y, const int &p, const int &q) : a11(x), a12(y), a21(p), a22(q) {} Mat() : Mat(0, 0, 0, 0) {}; Mat(const Mat &m) : a11(m.a11), a12(m.a12), a21(m.a21), a22(m.a22) {}; long long a11, a12, a21, a22; }; Mat operator *(const Mat &lhs, const Mat &rhs){ long long a11 = (lhs.a11 * rhs.a11 + lhs.a12 * rhs.a21) % MOD; long long a12 = (lhs.a11 * rhs.a12 + lhs.a12 * rhs.a22) % MOD; long long a21 = (lhs.a21 * rhs.a11 + lhs.a22 * rhs.a21) % MOD; long long a22 = (lhs.a21 * rhs.a12 + lhs.a22 * rhs.a22) % MOD; return Mat(a11, a12, a21, a22); } Mat QuickPow(Mat a, long long pow){ Mat ret(1, 0, 0, 1); while (pow != 0){ if (pow & 1) ret = ret * a; a = a * a; pow >>= 1; } return ret; } int main(){ long long n; cin >> n; if (n == 1 || n == 2){ cout << 1 << endl; return 0; } Mat f0(1, 0, 1, 0), f(1, 1, 1, 0); Mat ans = QuickPow(f, n - 2); cout << (ans.a11 + ans.a12) % MOD << endl; return 0; }","title":"1022 Fib\u6570\u5217"},{"location":"nr/1022/#1022-fib","text":"\u8f6c\u5230\u9898\u76ee","title":"1022 Fib\u6570\u5217"},{"location":"nr/1022/#fineartzs-solution","text":"/* Fib\u6570\u5217 */ #include <iostream> using namespace std; const int MOD = 2010; class Mat{ public: //constructor Mat(const int &x, const int &y, const int &p, const int &q) : a11(x), a12(y), a21(p), a22(q) {} Mat() : Mat(0, 0, 0, 0) {}; Mat(const Mat &m) : a11(m.a11), a12(m.a12), a21(m.a21), a22(m.a22) {}; long long a11, a12, a21, a22; }; Mat operator *(const Mat &lhs, const Mat &rhs){ long long a11 = (lhs.a11 * rhs.a11 + lhs.a12 * rhs.a21) % MOD; long long a12 = (lhs.a11 * rhs.a12 + lhs.a12 * rhs.a22) % MOD; long long a21 = (lhs.a21 * rhs.a11 + lhs.a22 * rhs.a21) % MOD; long long a22 = (lhs.a21 * rhs.a12 + lhs.a22 * rhs.a22) % MOD; return Mat(a11, a12, a21, a22); } Mat QuickPow(Mat a, long long pow){ Mat ret(1, 0, 0, 1); while (pow != 0){ if (pow & 1) ret = ret * a; a = a * a; pow >>= 1; } return ret; } int main(){ long long n; cin >> n; if (n == 1 || n == 2){ cout << 1 << endl; return 0; } Mat f0(1, 0, 1, 0), f(1, 1, 1, 0); Mat ans = QuickPow(f, n - 2); cout << (ans.a11 + ans.a12) % MOD << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1023/","text":"1023 \u77e9\u9635\u7ffb\u8f6c \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; void output(int***,int,int,int); int main(){ int totalMatricesCount; cin >> totalMatricesCount; int ***totalMatricesPointer=new int**[totalMatricesCount]; int *MatrixFloorPointer=new int[totalMatricesCount]; int *MatrixRotatePointer=new int[totalMatricesCount]; for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ cin >> *(MatrixFloorPointer+Matrixnum); cin >> *(MatrixRotatePointer+Matrixnum); *(totalMatricesPointer+Matrixnum)=new int *[*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) *(*(totalMatricesPointer+Matrixnum)+row)=new int [*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) for(int column=0;column<*(MatrixFloorPointer+Matrixnum);column++) cin >>*(*(*(totalMatricesPointer+Matrixnum)+row)+column); } for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ output(totalMatricesPointer+Matrixnum,*(MatrixFloorPointer+Matrixnum),*(MatrixRotatePointer+Matrixnum),Matrixnum); } return 0; } void output(int*** totalMatricesPointer,int floor,int rotate,int NOT_FIRST_MATIRX_FLAG){ if(NOT_FIRST_MATIRX_FLAG)cout << endl; bool NOT_FIRST_ROW_FLAG=false; bool NOT_FIRST_COLUMN_FLAG=false; for(int row=0;row<floor;row++){ if(NOT_FIRST_ROW_FLAG)cout << endl; NOT_FIRST_ROW_FLAG = true; for(int column=0;column<floor;column++){ if(NOT_FIRST_COLUMN_FLAG)cout << ' '; NOT_FIRST_COLUMN_FLAG = true; if(rotate==2)cout << *(*(*(totalMatricesPointer)+column)+row); if(rotate==1)cout << *(*(*(totalMatricesPointer)+(floor-row-1))+column); if(rotate==0)cout << *(*(*(totalMatricesPointer)+row)+(floor-column-1)); } NOT_FIRST_COLUMN_FLAG = false; } return; } FineArtz's solution /* \u77e9\u9635\u53cd\u8f6c */ #include <iostream> using namespace std; int mat[605][605] = {0}; void trans(const int &n, const int &k){ switch(k){ case 0: for (int i = 1; i <= n; ++i){ for (int j = n; j >= 1; --j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 1: for (int i = n; i >= 1; --i){ for (int j = 1; j <= n; ++j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 2: for (int j = 1; j <= n; ++j){ for (int i = 1; i <= n; ++i) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; default: break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ int a, b; cin >> a >> b; for (int i = 1; i <= a; ++i) for (int j = 1; j <= a; ++j) cin >> mat[i][j]; trans(a, b); } return 0; } vvvvv1v's solution #include <iostream> using namespace std; const int MAXSIZE = 700; struct matrix { int size; int** square; }; int main(void) { int n; cin >> n; matrix* arr; arr = new matrix[n]; for (int i = 0; i < n; ++i) { int method; cin >> arr[i].size >> method; arr[i].square = new int*[arr[i].size]; for (int j = 0; j < arr[i].size; ++j) arr[i].square[j] = new int[arr[i].size]; if (method == 0) for (int j = 0; j < arr[i].size; ++j) for (int k = arr[i].size - 1; k >= 0; --k) cin >> arr[i].square[j][k]; else if (method == 1) for (int j = arr[i].size - 1; j >= 0; --j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[j][k]; else if (method == 2) for (int j = 0; j < arr[i].size; ++j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[k][j]; } for (int i = 0; i < n; ++i) for (int j = 0; j < arr[i].size; ++j) { for (int k = 0; k < arr[i].size; ++k) { cout << arr[i].square[j][k]; if (k < arr[i].size - 1) cout << \" \"; } if (i < n - 1 || j < arr[i].size - 1) cout << endl; } return 0; }","title":"1023 \u77e9\u9635\u7ffb\u8f6c"},{"location":"nr/1023/#1023","text":"\u8f6c\u5230\u9898\u76ee","title":"1023 \u77e9\u9635\u7ffb\u8f6c"},{"location":"nr/1023/#victrids-solution","text":"#include <iostream> using namespace std; void output(int***,int,int,int); int main(){ int totalMatricesCount; cin >> totalMatricesCount; int ***totalMatricesPointer=new int**[totalMatricesCount]; int *MatrixFloorPointer=new int[totalMatricesCount]; int *MatrixRotatePointer=new int[totalMatricesCount]; for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ cin >> *(MatrixFloorPointer+Matrixnum); cin >> *(MatrixRotatePointer+Matrixnum); *(totalMatricesPointer+Matrixnum)=new int *[*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) *(*(totalMatricesPointer+Matrixnum)+row)=new int [*(MatrixFloorPointer+Matrixnum)]; for(int row=0;row<*(MatrixFloorPointer+Matrixnum);row++) for(int column=0;column<*(MatrixFloorPointer+Matrixnum);column++) cin >>*(*(*(totalMatricesPointer+Matrixnum)+row)+column); } for(int Matrixnum=0;Matrixnum<totalMatricesCount;Matrixnum++){ output(totalMatricesPointer+Matrixnum,*(MatrixFloorPointer+Matrixnum),*(MatrixRotatePointer+Matrixnum),Matrixnum); } return 0; } void output(int*** totalMatricesPointer,int floor,int rotate,int NOT_FIRST_MATIRX_FLAG){ if(NOT_FIRST_MATIRX_FLAG)cout << endl; bool NOT_FIRST_ROW_FLAG=false; bool NOT_FIRST_COLUMN_FLAG=false; for(int row=0;row<floor;row++){ if(NOT_FIRST_ROW_FLAG)cout << endl; NOT_FIRST_ROW_FLAG = true; for(int column=0;column<floor;column++){ if(NOT_FIRST_COLUMN_FLAG)cout << ' '; NOT_FIRST_COLUMN_FLAG = true; if(rotate==2)cout << *(*(*(totalMatricesPointer)+column)+row); if(rotate==1)cout << *(*(*(totalMatricesPointer)+(floor-row-1))+column); if(rotate==0)cout << *(*(*(totalMatricesPointer)+row)+(floor-column-1)); } NOT_FIRST_COLUMN_FLAG = false; } return; }","title":"VictriD's solution"},{"location":"nr/1023/#fineartzs-solution","text":"/* \u77e9\u9635\u53cd\u8f6c */ #include <iostream> using namespace std; int mat[605][605] = {0}; void trans(const int &n, const int &k){ switch(k){ case 0: for (int i = 1; i <= n; ++i){ for (int j = n; j >= 1; --j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 1: for (int i = n; i >= 1; --i){ for (int j = 1; j <= n; ++j) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; case 2: for (int j = 1; j <= n; ++j){ for (int i = 1; i <= n; ++i) cout << mat[i][j] << ' '; cout << \"\\n\"; } break; default: break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ int a, b; cin >> a >> b; for (int i = 1; i <= a; ++i) for (int j = 1; j <= a; ++j) cin >> mat[i][j]; trans(a, b); } return 0; }","title":"FineArtz's solution"},{"location":"nr/1023/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; const int MAXSIZE = 700; struct matrix { int size; int** square; }; int main(void) { int n; cin >> n; matrix* arr; arr = new matrix[n]; for (int i = 0; i < n; ++i) { int method; cin >> arr[i].size >> method; arr[i].square = new int*[arr[i].size]; for (int j = 0; j < arr[i].size; ++j) arr[i].square[j] = new int[arr[i].size]; if (method == 0) for (int j = 0; j < arr[i].size; ++j) for (int k = arr[i].size - 1; k >= 0; --k) cin >> arr[i].square[j][k]; else if (method == 1) for (int j = arr[i].size - 1; j >= 0; --j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[j][k]; else if (method == 2) for (int j = 0; j < arr[i].size; ++j) for (int k = 0; k < arr[i].size; ++k) cin >> arr[i].square[k][j]; } for (int i = 0; i < n; ++i) for (int j = 0; j < arr[i].size; ++j) { for (int k = 0; k < arr[i].size; ++k) { cout << arr[i].square[j][k]; if (k < arr[i].size - 1) cout << \" \"; } if (i < n - 1 || j < arr[i].size - 1) cout << endl; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1024/","text":"1024 \u6392\u5e8f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6392\u5e8f */ #include <iostream> #include <algorithm> using namespace std; int n; int a[10005]; void qsort(int l, int h){ int i = l, j = h; int m = a[(l + j) / 2]; while (i < j){ while (a[i] < m) ++i; while (a[j] > m) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < h) qsort(i, h); if (j > l) qsort(l, j); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int divide(int arr[], int low, int high) { int k = arr[low]; do { while (low < high && arr[high] > k) --high; if (low < high) { arr[low] = arr[high]; ++low; } while (low < high && arr[low] < k) ++low; if (low < high) { arr[high] = arr[low]; --high; } }while (low < high); arr[low] = k; return low; } void quicksort(int arr[], int low, int high) { int mid; if (low >= high) return; mid = divide(arr, low, high); quicksort(arr, low, mid - 1); quicksort(arr, mid + 1, high); } int main(void) { int n; cin >> n; int* arr; arr = new int[n]; for (int i = 0; i < n; ++i) cin >> arr[i]; quicksort(arr, 0, n - 1); for (int i = 0; i < n; ++i) { cout << arr[i]; if (i < n - 1) cout << \" \"; } return 0; }","title":"1024 \u6392\u5e8f"},{"location":"nr/1024/#1024","text":"\u8f6c\u5230\u9898\u76ee","title":"1024 \u6392\u5e8f"},{"location":"nr/1024/#fineartzs-solution","text":"/* \u6392\u5e8f */ #include <iostream> #include <algorithm> using namespace std; int n; int a[10005]; void qsort(int l, int h){ int i = l, j = h; int m = a[(l + j) / 2]; while (i < j){ while (a[i] < m) ++i; while (a[j] > m) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < h) qsort(i, h); if (j > l) qsort(l, j); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1024/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int divide(int arr[], int low, int high) { int k = arr[low]; do { while (low < high && arr[high] > k) --high; if (low < high) { arr[low] = arr[high]; ++low; } while (low < high && arr[low] < k) ++low; if (low < high) { arr[high] = arr[low]; --high; } }while (low < high); arr[low] = k; return low; } void quicksort(int arr[], int low, int high) { int mid; if (low >= high) return; mid = divide(arr, low, high); quicksort(arr, low, mid - 1); quicksort(arr, mid + 1, high); } int main(void) { int n; cin >> n; int* arr; arr = new int[n]; for (int i = 0; i < n; ++i) cin >> arr[i]; quicksort(arr, 0, n - 1); for (int i = 0; i < n; ++i) { cout << arr[i]; if (i < n - 1) cout << \" \"; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1025/","text":"1025 \u6c34\u67aa\u706d\u706b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6c34\u67aa\u706d\u706b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[20005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"1025 \u6c34\u67aa\u706d\u706b"},{"location":"nr/1025/#1025","text":"\u8f6c\u5230\u9898\u76ee","title":"1025 \u6c34\u67aa\u706d\u706b"},{"location":"nr/1025/#fineartzs-solution","text":"/* \u6c34\u67aa\u706d\u706b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[20005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1026/","text":"1026 \u9ad8\u7cbe\u5ea6\u9664\u6cd5 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <cstdio> #include <string> using namespace std; const int MAXS = 10005; int sub(int a[], int b[], int lena, int lenb, int shift = 0){ if (lena < lenb + shift) return -1; if (lena == lenb + shift){ for (int i = lenb; i >= 1; --i){ if (a[i + shift] > b[i]) break; if (a[i + shift] < b[i]) return -1; } } for (int i = shift + 1; i <= lena; ++i){ a[i] -= b[i - shift]; if (a[i] < 0){ a[i] += 10; --a[i + 1]; } } for (int i = lena; i != 0; --i){ if (a[i]) return i; } return 0; } int a[MAXS] = {0}, b[MAXS] = {0}, ans[MAXS] = {0}; int main(){ string s1, s2; bool flag = 1; getline(cin ,s1); getline(cin, s2); while (s1.size() != 0 && s1[0] == '0') s1.erase(s1.begin()); while (s2.size() != 0 && s2[0] == '0') s2.erase(s2.begin()); int lena = s1.size(), lenb = s2.size(); if (lena == 0){ printf(\"0\\n\"); return 0; } for (int i = 1; i <= lena; ++i) a[i] = s1[lena - i] - '0'; for (int i = 1; i <= lenb; ++i) b[i] = s2[lenb - i] - '0'; if (lena < lenb){ printf(\"0\\n\"); return 0; } int def = lena - lenb; int sublen = 0; for (int i = def; i >= 0; --i){ while ((sublen = sub(a, b, lena, lenb, i)) >= 0){ lena = sublen; ++ans[i + 1]; } } int len = def + 1; while (len >= 1 && ans[len] == 0) --len; if (len > 0){ for (int i = len; i != 0; --i) printf(\"%d\", ans[i]); } else printf(\"0\"); return 0; }","title":"1026 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1026/#1026","text":"\u8f6c\u5230\u9898\u76ee","title":"1026 \u9ad8\u7cbe\u5ea6\u9664\u6cd5"},{"location":"nr/1026/#fineartzs-solution","text":"/* \u9ad8\u7cbe\u5ea6\u9664\u6cd5 */ #include <iostream> #include <cstdio> #include <string> using namespace std; const int MAXS = 10005; int sub(int a[], int b[], int lena, int lenb, int shift = 0){ if (lena < lenb + shift) return -1; if (lena == lenb + shift){ for (int i = lenb; i >= 1; --i){ if (a[i + shift] > b[i]) break; if (a[i + shift] < b[i]) return -1; } } for (int i = shift + 1; i <= lena; ++i){ a[i] -= b[i - shift]; if (a[i] < 0){ a[i] += 10; --a[i + 1]; } } for (int i = lena; i != 0; --i){ if (a[i]) return i; } return 0; } int a[MAXS] = {0}, b[MAXS] = {0}, ans[MAXS] = {0}; int main(){ string s1, s2; bool flag = 1; getline(cin ,s1); getline(cin, s2); while (s1.size() != 0 && s1[0] == '0') s1.erase(s1.begin()); while (s2.size() != 0 && s2[0] == '0') s2.erase(s2.begin()); int lena = s1.size(), lenb = s2.size(); if (lena == 0){ printf(\"0\\n\"); return 0; } for (int i = 1; i <= lena; ++i) a[i] = s1[lena - i] - '0'; for (int i = 1; i <= lenb; ++i) b[i] = s2[lenb - i] - '0'; if (lena < lenb){ printf(\"0\\n\"); return 0; } int def = lena - lenb; int sublen = 0; for (int i = def; i >= 0; --i){ while ((sublen = sub(a, b, lena, lenb, i)) >= 0){ lena = sublen; ++ans[i + 1]; } } int len = def + 1; while (len >= 1 && ans[len] == 0) --len; if (len > 0){ for (int i = len; i != 0; --i) printf(\"%d\", ans[i]); } else printf(\"0\"); return 0; }","title":"FineArtz's solution"},{"location":"nr/1027/","text":"1027 \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 */ #include <iostream> #include <algorithm> using namespace std; class plane{ public: int i = 0, u = 0, g = 0; }; plane timee[1000005]; int down[1005]; int n, m, s; bool canDown(int t1, int t2){ if (t2 == -1) return true; if ((t1 + timee[t1].u) - (t2 + timee[t2].u) >= s) return true; return false; } int main(){ cin >> n >> m >> s; bool flag = false; for (int i = 1; i <= n; ++i){ int t; plane tp; cin >> t >> tp.u >> tp.g; tp.i = i; if (t > m){ flag = true; continue; } if (timee[t].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[t] = tp; } int lastDown = -1; for (int t = 0; t <= m; ++t){ if (timee[t].i == 0) continue; if (canDown(t, lastDown)){ lastDown = t; int tt = t + timee[t].u; if (tt > m) flag = true; else (down[timee[t].i] = tt); } else{ int tt = t + timee[t].g; if (tt > m){ flag = true; continue; } if (timee[tt].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[tt] = timee[t]; } } if (flag) cout << \"GO DATING\" << endl; else for (int i = 1; i <= n; ++i) cout << down[i] << endl; return 0; }","title":"1027 \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1"},{"location":"nr/1027/#1027","text":"\u8f6c\u5230\u9898\u76ee","title":"1027 \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1"},{"location":"nr/1027/#fineartzs-solution","text":"/* \u6234\u7eff\u5e3d\u5b50\u7684\u7a7a\u7ba1 */ #include <iostream> #include <algorithm> using namespace std; class plane{ public: int i = 0, u = 0, g = 0; }; plane timee[1000005]; int down[1005]; int n, m, s; bool canDown(int t1, int t2){ if (t2 == -1) return true; if ((t1 + timee[t1].u) - (t2 + timee[t2].u) >= s) return true; return false; } int main(){ cin >> n >> m >> s; bool flag = false; for (int i = 1; i <= n; ++i){ int t; plane tp; cin >> t >> tp.u >> tp.g; tp.i = i; if (t > m){ flag = true; continue; } if (timee[t].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[t] = tp; } int lastDown = -1; for (int t = 0; t <= m; ++t){ if (timee[t].i == 0) continue; if (canDown(t, lastDown)){ lastDown = t; int tt = t + timee[t].u; if (tt > m) flag = true; else (down[timee[t].i] = tt); } else{ int tt = t + timee[t].g; if (tt > m){ flag = true; continue; } if (timee[tt].i != 0){ cout << \"CHANGE BOYFRIEND\" << endl; return 0; } timee[tt] = timee[t]; } } if (flag) cout << \"GO DATING\" << endl; else for (int i = 1; i <= n; ++i) cout << down[i] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1028/","text":"1028 \u8bed\u53e5\u5339\u914d \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8bed\u53e5\u5339\u914d */ #include <iostream> #include <string> #include <stack> using namespace std; int main(){ int n; cin >> n; stack<string> state; while(n--){ string s; cin >> s; if (state.empty()){ if (s == \"then\" || s == \"end\" || s == \"else\"){ cout << \"NO\" << endl; return 0; } state.push(s); continue; } string t = state.top(); if (s == \"then\"){ if (t != \"if\"){ cout << \"NO\" << endl; return 0; } else{ state.pop(); state.push(s); } } else if (s == \"else\"){ if (t == \"begin\" || t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"then\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"end\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"begin\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"begin\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } else if (s == \"if\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } } while (!state.empty() && state.top() == \"then\") state.pop(); if (!state.empty()) cout << \"NO\" << endl; else cout << \"YES\" << endl; return 0; }","title":"1028 \u8bed\u53e5\u5339\u914d"},{"location":"nr/1028/#1028","text":"\u8f6c\u5230\u9898\u76ee","title":"1028 \u8bed\u53e5\u5339\u914d"},{"location":"nr/1028/#fineartzs-solution","text":"/* \u8bed\u53e5\u5339\u914d */ #include <iostream> #include <string> #include <stack> using namespace std; int main(){ int n; cin >> n; stack<string> state; while(n--){ string s; cin >> s; if (state.empty()){ if (s == \"then\" || s == \"end\" || s == \"else\"){ cout << \"NO\" << endl; return 0; } state.push(s); continue; } string t = state.top(); if (s == \"then\"){ if (t != \"if\"){ cout << \"NO\" << endl; return 0; } else{ state.pop(); state.push(s); } } else if (s == \"else\"){ if (t == \"begin\" || t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"then\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"end\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } while (!state.empty() && state.top() != \"begin\") state.pop(); if (state.empty()){ cout << \"NO\" << endl; return 0; } state.pop(); } else if (s == \"begin\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } else if (s == \"if\"){ if (t == \"if\"){ cout << \"NO\" << endl; return 0; } state.push(s); } } while (!state.empty() && state.top() == \"then\") state.pop(); if (!state.empty()) cout << \"NO\" << endl; else cout << \"YES\" << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1029/","text":"1029 \u6574\u7406\u4e66\u67b6 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6574\u7406\u4e66\u67b6 */ #include <iostream> #include <sstream> #include <vector> using namespace std; int main(){ int n; cin >> n; vector<vector<int>> book; string ss; getline(cin, ss); for (int i = 1; i <= n ; ++i){ string st; getline(cin, st); istringstream iss(st); int t; vector<int> tv; while (iss >> t) tv.push_back(t); book.push_back(tv); } for (int i = 1; i < n; ++i){ int x, y; cin >> x >> y; book[y - 1].insert(book[y - 1].end(), book[x - 1].begin(), book[x - 1].end()); book[x - 1].clear(); } for (int i = n - 1; i >= 0; --i){ if (!book[i].empty()){ for (auto j : book[i]){ cout << j << ' '; } cout << endl; return 0; } } return 0; }","title":"1029 \u6574\u7406\u4e66\u67b6"},{"location":"nr/1029/#1029","text":"\u8f6c\u5230\u9898\u76ee","title":"1029 \u6574\u7406\u4e66\u67b6"},{"location":"nr/1029/#fineartzs-solution","text":"/* \u6574\u7406\u4e66\u67b6 */ #include <iostream> #include <sstream> #include <vector> using namespace std; int main(){ int n; cin >> n; vector<vector<int>> book; string ss; getline(cin, ss); for (int i = 1; i <= n ; ++i){ string st; getline(cin, st); istringstream iss(st); int t; vector<int> tv; while (iss >> t) tv.push_back(t); book.push_back(tv); } for (int i = 1; i < n; ++i){ int x, y; cin >> x >> y; book[y - 1].insert(book[y - 1].end(), book[x - 1].begin(), book[x - 1].end()); book[x - 1].clear(); } for (int i = n - 1; i >= 0; --i){ if (!book[i].empty()){ for (auto j : book[i]){ cout << j << ' '; } cout << endl; return 0; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1031/","text":"1031 \u4e8c\u54e5\u5728\u9ec4\u5c71 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5728\u9ec4\u5c71 */ #include <iostream> #include <queue> using namespace std; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, a[105][105]; bool check(int low, int high){ if (a[1][1] < low || a[1][1] > high || a[n][n] < low || a[n][n] > high) return false; bool v[105][105] = {0}; queue<Point> q; Point now(1, 1), next; q.push(now); v[1][1] = true; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (next.x < 1 || next.x > n || next.y < 1 || next.y > n || v[next.x][next.y]) continue; if (a[next.x][next.y] < low || a[next.x][next.y] > high) continue; if (next.x == n && next.y == n) return true; q.push(next); v[next.x][next.y] = true; } } return false; } int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; int r = 110, l = 0; while (l < r){ int mid = (l + r) / 2; bool flag = false; for (int i = 0; i <= 110 - mid; ++i) if (check(i, i + mid)){ flag = true; break; } if (flag) r = mid; else l = mid + 1; } cout << l << endl; return 0; } WashWang's solution #include <iostream> using namespace std; int A[101][101],n,queue[20000][2],head,tail,dir[4][2]={-1,0,1,0,0,-1,0,1}; bool visit[101][101]; void enqueue(int x,int y,int lowb,int upb) { int dx,dy; for (int i=0;i<4;++i){ dx=dir[i][0]; dy=dir[i][1]; if (x+dx>=0&&x+dx<n&&y+dy>=0&&y+dy<n&&!visit[x+dx][y+dy]&&A[x+dx][y+dy]<=upb&&A[x+dx][y+dy]>=lowb){ queue[tail][0]=x+dx; queue[tail][1]=y+dy; visit[x+dx][y+dy]=true; tail+=1; } } } int binarysearch(int low,int high) { int ans=0; int l=low; int r=high; int mid; bool flag; while (l<=r) { mid=(l+r)/2; flag=false; for (int k=max(0,A[0][0]-mid);k<=min(A[0][0],A[n-1][n-1]);++k) { for (int i=0;i<n;i++) for (int j=0;j<n;j++) visit[i][j]=0; queue[tail][0]=0; queue[tail][1]=0; visit[0][0]=true; head=0;tail=1; flag=false; while (head!=tail) { int x=queue[head][0]; int y=queue[head][1]; head+=1; if (x==n-1 && y==n-1) { flag=true; break; } enqueue(x,y,k,k+mid); } if (flag) break; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n; int high=0; for (int i=0;i<n;i++) for (int j=0;j<n;j++) { cin>>A[i][j]; if (A[i][j]>high) high=A[i][j]; } cout<<binarysearch(0,high); return 0; }","title":"1031 \u4e8c\u54e5\u5728\u9ec4\u5c71"},{"location":"nr/1031/#1031","text":"\u8f6c\u5230\u9898\u76ee","title":"1031 \u4e8c\u54e5\u5728\u9ec4\u5c71"},{"location":"nr/1031/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5728\u9ec4\u5c71 */ #include <iostream> #include <queue> using namespace std; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, a[105][105]; bool check(int low, int high){ if (a[1][1] < low || a[1][1] > high || a[n][n] < low || a[n][n] > high) return false; bool v[105][105] = {0}; queue<Point> q; Point now(1, 1), next; q.push(now); v[1][1] = true; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (next.x < 1 || next.x > n || next.y < 1 || next.y > n || v[next.x][next.y]) continue; if (a[next.x][next.y] < low || a[next.x][next.y] > high) continue; if (next.x == n && next.y == n) return true; q.push(next); v[next.x][next.y] = true; } } return false; } int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; int r = 110, l = 0; while (l < r){ int mid = (l + r) / 2; bool flag = false; for (int i = 0; i <= 110 - mid; ++i) if (check(i, i + mid)){ flag = true; break; } if (flag) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1031/#washwangs-solution","text":"#include <iostream> using namespace std; int A[101][101],n,queue[20000][2],head,tail,dir[4][2]={-1,0,1,0,0,-1,0,1}; bool visit[101][101]; void enqueue(int x,int y,int lowb,int upb) { int dx,dy; for (int i=0;i<4;++i){ dx=dir[i][0]; dy=dir[i][1]; if (x+dx>=0&&x+dx<n&&y+dy>=0&&y+dy<n&&!visit[x+dx][y+dy]&&A[x+dx][y+dy]<=upb&&A[x+dx][y+dy]>=lowb){ queue[tail][0]=x+dx; queue[tail][1]=y+dy; visit[x+dx][y+dy]=true; tail+=1; } } } int binarysearch(int low,int high) { int ans=0; int l=low; int r=high; int mid; bool flag; while (l<=r) { mid=(l+r)/2; flag=false; for (int k=max(0,A[0][0]-mid);k<=min(A[0][0],A[n-1][n-1]);++k) { for (int i=0;i<n;i++) for (int j=0;j<n;j++) visit[i][j]=0; queue[tail][0]=0; queue[tail][1]=0; visit[0][0]=true; head=0;tail=1; flag=false; while (head!=tail) { int x=queue[head][0]; int y=queue[head][1]; head+=1; if (x==n-1 && y==n-1) { flag=true; break; } enqueue(x,y,k,k+mid); } if (flag) break; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } return ans; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n; int high=0; for (int i=0;i<n;i++) for (int j=0;j<n;j++) { cin>>A[i][j]; if (A[i][j]>high) high=A[i][j]; } cout<<binarysearch(0,high); return 0; }","title":"WashWang's solution"},{"location":"nr/1032/","text":"1032 Ackerman\u51fd\u6570 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; long long int A(long long int m, long long int n) { if (m == 0) return (n + 1); if (n == 0) return A(m - 1, 1); else return A(m - 1, A(m, n - 1)); } int main() { long long int m, n; cin >> m >> n; cout << A(m, n); } FineArtz's solution /* Ackerman\u51fd\u6570 */ #include <iostream> #include <string> using namespace std; string a[4][1001] = {{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\"}, {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\", \"1002\"}, {\"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"33\", \"35\", \"37\", \"39\", \"41\", \"43\", \"45\", \"47\", \"49\", \"51\", \"53\", \"55\", \"57\", \"59\", \"61\", \"63\", \"65\", \"67\", \"69\", \"71\", \"73\", \"75\", \"77\", \"79\", \"81\", \"83\", \"85\", \"87\", \"89\", \"91\", \"93\", \"95\", \"97\", \"99\", \"101\", \"103\", \"105\", \"107\", \"109\", \"111\", \"113\", \"115\", \"117\", \"119\", \"121\", \"123\", \"125\", \"127\", \"129\", \"131\", \"133\", \"135\", \"137\", \"139\", \"141\", \"143\", \"145\", \"147\", \"149\", \"151\", \"153\", \"155\", \"157\", \"159\", \"161\", \"163\", \"165\", \"167\", \"169\", \"171\", \"173\", \"175\", \"177\", \"179\", \"181\", \"183\", \"185\", \"187\", \"189\", \"191\", \"193\", \"195\", \"197\", \"199\", \"201\", \"203\", \"205\", \"207\", \"209\", \"211\", \"213\", \"215\", \"217\", \"219\", \"221\", \"223\", \"225\", \"227\", \"229\", \"231\", \"233\", \"235\", \"237\", \"239\", \"241\", \"243\", \"245\", \"247\", \"249\", \"251\", \"253\", \"255\", \"257\", \"259\", \"261\", \"263\", \"265\", \"267\", \"269\", \"271\", \"273\", \"275\", \"277\", \"279\", \"281\", \"283\", \"285\", \"287\", \"289\", \"291\", \"293\", \"295\", \"297\", \"299\", \"301\", \"303\", \"305\", \"307\", \"309\", \"311\", \"313\", \"315\", \"317\", \"319\", \"321\", \"323\", \"325\", \"327\", \"329\", \"331\", \"333\", \"335\", \"337\", \"339\", \"341\", \"343\", \"345\", \"347\", \"349\", \"351\", \"353\", \"355\", \"357\", \"359\", \"361\", \"363\", \"365\", \"367\", \"369\", \"371\", \"373\", \"375\", \"377\", \"379\", \"381\", \"383\", \"385\", \"387\", \"389\", \"391\", \"393\", \"395\", \"397\", \"399\", \"401\", \"403\", \"405\", \"407\", \"409\", \"411\", \"413\", \"415\", \"417\", \"419\", \"421\", \"423\", \"425\", \"427\", \"429\", \"431\", \"433\", \"435\", \"437\", \"439\", \"441\", \"443\", \"445\", \"447\", \"449\", \"451\", \"453\", \"455\", \"457\", \"459\", \"461\", \"463\", \"465\", \"467\", \"469\", \"471\", \"473\", \"475\", \"477\", \"479\", \"481\", \"483\", \"485\", \"487\", \"489\", \"491\", \"493\", \"495\", \"497\", \"499\", \"501\", \"503\", \"505\", \"507\", \"509\", \"511\", \"513\", \"515\", \"517\", \"519\", \"521\", \"523\", \"525\", \"527\", \"529\", \"531\", \"533\", \"535\", \"537\", \"539\", \"541\", \"543\", \"545\", \"547\", \"549\", \"551\", \"553\", \"555\", \"557\", \"559\", \"561\", \"563\", \"565\", \"567\", \"569\", \"571\", \"573\", \"575\", \"577\", \"579\", \"581\", \"583\", \"585\", \"587\", \"589\", \"591\", \"593\", \"595\", \"597\", \"599\", \"601\", \"603\", \"605\", \"607\", \"609\", \"611\", \"613\", \"615\", \"617\", \"619\", \"621\", \"623\", \"625\", \"627\", \"629\", \"631\", \"633\", \"635\", \"637\", \"639\", \"641\", \"643\", \"645\", \"647\", \"649\", \"651\", \"653\", \"655\", \"657\", \"659\", \"661\", \"663\", \"665\", \"667\", \"669\", \"671\", \"673\", \"675\", \"677\", \"679\", \"681\", \"683\", \"685\", \"687\", \"689\", \"691\", \"693\", \"695\", \"697\", \"699\", \"701\", \"703\", \"705\", \"707\", \"709\", \"711\", \"713\", \"715\", \"717\", \"719\", \"721\", \"723\", \"725\", \"727\", \"729\", \"731\", \"733\", \"735\", \"737\", \"739\", \"741\", \"743\", \"745\", \"747\", \"749\", \"751\", \"753\", \"755\", \"757\", \"759\", \"761\", \"763\", \"765\", \"767\", \"769\", \"771\", \"773\", \"775\", \"777\", \"779\", \"781\", \"783\", \"785\", \"787\", \"789\", \"791\", \"793\", \"795\", \"797\", \"799\", \"801\", \"803\", \"805\", \"807\", \"809\", \"811\", \"813\", \"815\", \"817\", \"819\", \"821\", \"823\", \"825\", \"827\", \"829\", \"831\", \"833\", \"835\", \"837\", \"839\", \"841\", \"843\", \"845\", \"847\", \"849\", \"851\", \"853\", \"855\", \"857\", \"859\", \"861\", \"863\", \"865\", \"867\", \"869\", \"871\", \"873\", \"875\", \"877\", \"879\", \"881\", \"883\", \"885\", \"887\", \"889\", \"891\", \"893\", \"895\", \"897\", \"899\", \"901\", \"903\", \"905\", \"907\", \"909\", \"911\", \"913\", \"915\", \"917\", \"919\", \"921\", \"923\", \"925\", \"927\", \"929\", \"931\", \"933\", \"935\", \"937\", \"939\", \"941\", \"943\", \"945\", \"947\", \"949\", \"951\", \"953\", \"955\", \"957\", \"959\", \"961\", \"963\", \"965\", \"967\", \"969\", \"971\", \"973\", \"975\", \"977\", \"979\", \"981\", \"983\", \"985\", \"987\", \"989\", \"991\", \"993\", \"995\", \"997\", \"999\", \"1001\", \"1003\", \"1005\", \"1007\", \"1009\", \"1011\", \"1013\", \"1015\", \"1017\", \"1019\", \"1021\", \"1023\", \"1025\", \"1027\", \"1029\", \"1031\", \"1033\", \"1035\", \"1037\", \"1039\", \"1041\", \"1043\", \"1045\", \"1047\", \"1049\", \"1051\", \"1053\", \"1055\", \"1057\", \"1059\", \"1061\", \"1063\", \"1065\", \"1067\", \"1069\", \"1071\", \"1073\", \"1075\", \"1077\", \"1079\", \"1081\", \"1083\", \"1085\", \"1087\", \"1089\", \"1091\", \"1093\", \"1095\", \"1097\", \"1099\", \"1101\", \"1103\", \"1105\", \"1107\", \"1109\", \"1111\", \"1113\", \"1115\", \"1117\", \"1119\", \"1121\", \"1123\", \"1125\", \"1127\", \"1129\", \"1131\", \"1133\", \"1135\", \"1137\", \"1139\", \"1141\", \"1143\", \"1145\", \"1147\", \"1149\", \"1151\", \"1153\", \"1155\", \"1157\", \"1159\", \"1161\", \"1163\", \"1165\", \"1167\", \"1169\", \"1171\", \"1173\", \"1175\", \"1177\", \"1179\", \"1181\", \"1183\", \"1185\", \"1187\", \"1189\", \"1191\", \"1193\", \"1195\", \"1197\", \"1199\", \"1201\", \"1203\", \"1205\", \"1207\", \"1209\", \"1211\", \"1213\", \"1215\", \"1217\", \"1219\", \"1221\", \"1223\", \"1225\", \"1227\", \"1229\", \"1231\", \"1233\", \"1235\", \"1237\", \"1239\", \"1241\", \"1243\", \"1245\", \"1247\", \"1249\", \"1251\", \"1253\", \"1255\", \"1257\", \"1259\", \"1261\", \"1263\", \"1265\", \"1267\", \"1269\", \"1271\", \"1273\", \"1275\", \"1277\", \"1279\", \"1281\", \"1283\", \"1285\", \"1287\", \"1289\", \"1291\", \"1293\", \"1295\", \"1297\", \"1299\", \"1301\", \"1303\", \"1305\", \"1307\", \"1309\", \"1311\", \"1313\", \"1315\", \"1317\", \"1319\", \"1321\", \"1323\", \"1325\", \"1327\", \"1329\", \"1331\", \"1333\", \"1335\", \"1337\", \"1339\", \"1341\", \"1343\", \"1345\", \"1347\", \"1349\", \"1351\", \"1353\", \"1355\", \"1357\", \"1359\", \"1361\", \"1363\", \"1365\", \"1367\", \"1369\", \"1371\", \"1373\", \"1375\", \"1377\", \"1379\", \"1381\", \"1383\", \"1385\", \"1387\", \"1389\", \"1391\", \"1393\", \"1395\", \"1397\", \"1399\", \"1401\", \"1403\", \"1405\", \"1407\", \"1409\", \"1411\", \"1413\", \"1415\", \"1417\", \"1419\", \"1421\", \"1423\", \"1425\", \"1427\", \"1429\", \"1431\", \"1433\", \"1435\", \"1437\", \"1439\", \"1441\", \"1443\", \"1445\", \"1447\", \"1449\", \"1451\", \"1453\", \"1455\", \"1457\", \"1459\", \"1461\", \"1463\", \"1465\", \"1467\", \"1469\", \"1471\", \"1473\", \"1475\", \"1477\", \"1479\", \"1481\", \"1483\", \"1485\", \"1487\", \"1489\", \"1491\", \"1493\", \"1495\", \"1497\", \"1499\", \"1501\", \"1503\", \"1505\", \"1507\", \"1509\", \"1511\", \"1513\", \"1515\", \"1517\", \"1519\", \"1521\", \"1523\", \"1525\", \"1527\", \"1529\", \"1531\", \"1533\", \"1535\", \"1537\", \"1539\", \"1541\", \"1543\", \"1545\", \"1547\", \"1549\", \"1551\", \"1553\", \"1555\", \"1557\", \"1559\", \"1561\", \"1563\", \"1565\", \"1567\", \"1569\", \"1571\", \"1573\", \"1575\", \"1577\", \"1579\", \"1581\", \"1583\", \"1585\", \"1587\", \"1589\", \"1591\", \"1593\", \"1595\", \"1597\", \"1599\", \"1601\", \"1603\", \"1605\", \"1607\", \"1609\", \"1611\", \"1613\", \"1615\", \"1617\", \"1619\", \"1621\", \"1623\", \"1625\", \"1627\", \"1629\", \"1631\", \"1633\", \"1635\", \"1637\", \"1639\", \"1641\", \"1643\", \"1645\", \"1647\", \"1649\", \"1651\", \"1653\", \"1655\", \"1657\", \"1659\", \"1661\", \"1663\", \"1665\", \"1667\", \"1669\", \"1671\", \"1673\", \"1675\", \"1677\", \"1679\", \"1681\", \"1683\", \"1685\", \"1687\", \"1689\", \"1691\", \"1693\", \"1695\", \"1697\", \"1699\", \"1701\", \"1703\", \"1705\", \"1707\", \"1709\", \"1711\", \"1713\", \"1715\", \"1717\", \"1719\", \"1721\", \"1723\", \"1725\", \"1727\", \"1729\", \"1731\", \"1733\", \"1735\", \"1737\", \"1739\", \"1741\", \"1743\", \"1745\", \"1747\", \"1749\", \"1751\", \"1753\", \"1755\", \"1757\", \"1759\", \"1761\", \"1763\", \"1765\", \"1767\", \"1769\", \"1771\", \"1773\", \"1775\", \"1777\", \"1779\", \"1781\", \"1783\", \"1785\", \"1787\", \"1789\", \"1791\", \"1793\", \"1795\", \"1797\", \"1799\", \"1801\", \"1803\", \"1805\", \"1807\", \"1809\", \"1811\", \"1813\", \"1815\", \"1817\", \"1819\", \"1821\", \"1823\", \"1825\", \"1827\", \"1829\", \"1831\", \"1833\", \"1835\", \"1837\", \"1839\", \"1841\", \"1843\", \"1845\", \"1847\", \"1849\", \"1851\", \"1853\", \"1855\", \"1857\", \"1859\", \"1861\", \"1863\", \"1865\", \"1867\", \"1869\", \"1871\", \"1873\", \"1875\", \"1877\", \"1879\", \"1881\", \"1883\", \"1885\", \"1887\", \"1889\", \"1891\", \"1893\", \"1895\", \"1897\", \"1899\", \"1901\", \"1903\", \"1905\", \"1907\", \"1909\", \"1911\", \"1913\", \"1915\", \"1917\", \"1919\", \"1921\", \"1923\", \"1925\", \"1927\", \"1929\", \"1931\", \"1933\", \"1935\", \"1937\", \"1939\", \"1941\", \"1943\", \"1945\", \"1947\", \"1949\", \"1951\", \"1953\", \"1955\", \"1957\", \"1959\", \"1961\", \"1963\", \"1965\", \"1967\", \"1969\", \"1971\", \"1973\", \"1975\", \"1977\", \"1979\", \"1981\", \"1983\", \"1985\", \"1987\", \"1989\", \"1991\", \"1993\", \"1995\", \"1997\", \"1999\", \"2001\", \"2003\"}, {} }; int main(){ int m, n; cin >> m >> n; cout << a[m][n] << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int Ackerman(int m, int n) { if (m == 0) return n + 1; else if (n == 0) return Ackerman(m - 1, 1); else return Ackerman(m - 1, Ackerman(m, n - 1)); } int main() { int m, n; cin >> m >> n; cout << Ackerman(m, n); return 0; }","title":"1032 Ackerman\u51fd\u6570"},{"location":"nr/1032/#1032-ackerman","text":"\u8f6c\u5230\u9898\u76ee","title":"1032 Ackerman\u51fd\u6570"},{"location":"nr/1032/#victrids-solution","text":"#include <iostream> using namespace std; long long int A(long long int m, long long int n) { if (m == 0) return (n + 1); if (n == 0) return A(m - 1, 1); else return A(m - 1, A(m, n - 1)); } int main() { long long int m, n; cin >> m >> n; cout << A(m, n); }","title":"VictriD's solution"},{"location":"nr/1032/#fineartzs-solution","text":"/* Ackerman\u51fd\u6570 */ #include <iostream> #include <string> using namespace std; string a[4][1001] = {{\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\"}, {\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\", \"334\", \"335\", \"336\", \"337\", \"338\", \"339\", \"340\", \"341\", \"342\", \"343\", \"344\", \"345\", \"346\", \"347\", \"348\", \"349\", \"350\", \"351\", \"352\", \"353\", \"354\", \"355\", \"356\", \"357\", \"358\", \"359\", \"360\", \"361\", \"362\", \"363\", \"364\", \"365\", \"366\", \"367\", \"368\", \"369\", \"370\", \"371\", \"372\", \"373\", \"374\", \"375\", \"376\", \"377\", \"378\", \"379\", \"380\", \"381\", \"382\", \"383\", \"384\", \"385\", \"386\", \"387\", \"388\", \"389\", \"390\", \"391\", \"392\", \"393\", \"394\", \"395\", \"396\", \"397\", \"398\", \"399\", \"400\", \"401\", \"402\", \"403\", \"404\", \"405\", \"406\", \"407\", \"408\", \"409\", \"410\", \"411\", \"412\", \"413\", \"414\", \"415\", \"416\", \"417\", \"418\", \"419\", \"420\", \"421\", \"422\", \"423\", \"424\", \"425\", \"426\", \"427\", \"428\", \"429\", \"430\", \"431\", \"432\", \"433\", \"434\", \"435\", \"436\", \"437\", \"438\", \"439\", \"440\", \"441\", \"442\", \"443\", \"444\", \"445\", \"446\", \"447\", \"448\", \"449\", \"450\", \"451\", \"452\", \"453\", \"454\", \"455\", \"456\", \"457\", \"458\", \"459\", \"460\", \"461\", \"462\", \"463\", \"464\", \"465\", \"466\", \"467\", \"468\", \"469\", \"470\", \"471\", \"472\", \"473\", \"474\", \"475\", \"476\", \"477\", \"478\", \"479\", \"480\", \"481\", \"482\", \"483\", \"484\", \"485\", \"486\", \"487\", \"488\", \"489\", \"490\", \"491\", \"492\", \"493\", \"494\", \"495\", \"496\", \"497\", \"498\", \"499\", \"500\", \"501\", \"502\", \"503\", \"504\", \"505\", \"506\", \"507\", \"508\", \"509\", \"510\", \"511\", \"512\", \"513\", \"514\", \"515\", \"516\", \"517\", \"518\", \"519\", \"520\", \"521\", \"522\", \"523\", \"524\", \"525\", \"526\", \"527\", \"528\", \"529\", \"530\", \"531\", \"532\", \"533\", \"534\", \"535\", \"536\", \"537\", \"538\", \"539\", \"540\", \"541\", \"542\", \"543\", \"544\", \"545\", \"546\", \"547\", \"548\", \"549\", \"550\", \"551\", \"552\", \"553\", \"554\", \"555\", \"556\", \"557\", \"558\", \"559\", \"560\", \"561\", \"562\", \"563\", \"564\", \"565\", \"566\", \"567\", \"568\", \"569\", \"570\", \"571\", \"572\", \"573\", \"574\", \"575\", \"576\", \"577\", \"578\", \"579\", \"580\", \"581\", \"582\", \"583\", \"584\", \"585\", \"586\", \"587\", \"588\", \"589\", \"590\", \"591\", \"592\", \"593\", \"594\", \"595\", \"596\", \"597\", \"598\", \"599\", \"600\", \"601\", \"602\", \"603\", \"604\", \"605\", \"606\", \"607\", \"608\", \"609\", \"610\", \"611\", \"612\", \"613\", \"614\", \"615\", \"616\", \"617\", \"618\", \"619\", \"620\", \"621\", \"622\", \"623\", \"624\", \"625\", \"626\", \"627\", \"628\", \"629\", \"630\", \"631\", \"632\", \"633\", \"634\", \"635\", \"636\", \"637\", \"638\", \"639\", \"640\", \"641\", \"642\", \"643\", \"644\", \"645\", \"646\", \"647\", \"648\", \"649\", \"650\", \"651\", \"652\", \"653\", \"654\", \"655\", \"656\", \"657\", \"658\", \"659\", \"660\", \"661\", \"662\", \"663\", \"664\", \"665\", \"666\", \"667\", \"668\", \"669\", \"670\", \"671\", \"672\", \"673\", \"674\", \"675\", \"676\", \"677\", \"678\", \"679\", \"680\", \"681\", \"682\", \"683\", \"684\", \"685\", \"686\", \"687\", \"688\", \"689\", \"690\", \"691\", \"692\", \"693\", \"694\", \"695\", \"696\", \"697\", \"698\", \"699\", \"700\", \"701\", \"702\", \"703\", \"704\", \"705\", \"706\", \"707\", \"708\", \"709\", \"710\", \"711\", \"712\", \"713\", \"714\", \"715\", \"716\", \"717\", \"718\", \"719\", \"720\", \"721\", \"722\", \"723\", \"724\", \"725\", \"726\", \"727\", \"728\", \"729\", \"730\", \"731\", \"732\", \"733\", \"734\", \"735\", \"736\", \"737\", \"738\", \"739\", \"740\", \"741\", \"742\", \"743\", \"744\", \"745\", \"746\", \"747\", \"748\", \"749\", \"750\", \"751\", \"752\", \"753\", \"754\", \"755\", \"756\", \"757\", \"758\", \"759\", \"760\", \"761\", \"762\", \"763\", \"764\", \"765\", \"766\", \"767\", \"768\", \"769\", \"770\", \"771\", \"772\", \"773\", \"774\", \"775\", \"776\", \"777\", \"778\", \"779\", \"780\", \"781\", \"782\", \"783\", \"784\", \"785\", \"786\", \"787\", \"788\", \"789\", \"790\", \"791\", \"792\", \"793\", \"794\", \"795\", \"796\", \"797\", \"798\", \"799\", \"800\", \"801\", \"802\", \"803\", \"804\", \"805\", \"806\", \"807\", \"808\", \"809\", \"810\", \"811\", \"812\", \"813\", \"814\", \"815\", \"816\", \"817\", \"818\", \"819\", \"820\", \"821\", \"822\", \"823\", \"824\", \"825\", \"826\", \"827\", \"828\", \"829\", \"830\", \"831\", \"832\", \"833\", \"834\", \"835\", \"836\", \"837\", \"838\", \"839\", \"840\", \"841\", \"842\", \"843\", \"844\", \"845\", \"846\", \"847\", \"848\", \"849\", \"850\", \"851\", \"852\", \"853\", \"854\", \"855\", \"856\", \"857\", \"858\", \"859\", \"860\", \"861\", \"862\", \"863\", \"864\", \"865\", \"866\", \"867\", \"868\", \"869\", \"870\", \"871\", \"872\", \"873\", \"874\", \"875\", \"876\", \"877\", \"878\", \"879\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\", \"890\", \"891\", \"892\", \"893\", \"894\", \"895\", \"896\", \"897\", \"898\", \"899\", \"900\", \"901\", \"902\", \"903\", \"904\", \"905\", \"906\", \"907\", \"908\", \"909\", \"910\", \"911\", \"912\", \"913\", \"914\", \"915\", \"916\", \"917\", \"918\", \"919\", \"920\", \"921\", \"922\", \"923\", \"924\", \"925\", \"926\", \"927\", \"928\", \"929\", \"930\", \"931\", \"932\", \"933\", \"934\", \"935\", \"936\", \"937\", \"938\", \"939\", \"940\", \"941\", \"942\", \"943\", \"944\", \"945\", \"946\", \"947\", \"948\", \"949\", \"950\", \"951\", \"952\", \"953\", \"954\", \"955\", \"956\", \"957\", \"958\", \"959\", \"960\", \"961\", \"962\", \"963\", \"964\", \"965\", \"966\", \"967\", \"968\", \"969\", \"970\", \"971\", \"972\", \"973\", \"974\", \"975\", \"976\", \"977\", \"978\", \"979\", \"980\", \"981\", \"982\", \"983\", \"984\", \"985\", \"986\", \"987\", \"988\", \"989\", \"990\", \"991\", \"992\", \"993\", \"994\", \"995\", \"996\", \"997\", \"998\", \"999\", \"1000\", \"1001\", \"1002\"}, {\"3\", \"5\", \"7\", \"9\", \"11\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"33\", \"35\", \"37\", \"39\", \"41\", \"43\", \"45\", \"47\", \"49\", \"51\", \"53\", \"55\", \"57\", \"59\", \"61\", \"63\", \"65\", \"67\", \"69\", \"71\", \"73\", \"75\", \"77\", \"79\", \"81\", \"83\", \"85\", \"87\", \"89\", \"91\", \"93\", \"95\", \"97\", \"99\", \"101\", \"103\", \"105\", \"107\", \"109\", \"111\", \"113\", \"115\", \"117\", \"119\", \"121\", \"123\", \"125\", \"127\", \"129\", \"131\", \"133\", \"135\", \"137\", \"139\", \"141\", \"143\", \"145\", \"147\", \"149\", \"151\", \"153\", \"155\", \"157\", \"159\", \"161\", \"163\", \"165\", \"167\", \"169\", \"171\", \"173\", \"175\", \"177\", \"179\", \"181\", \"183\", \"185\", \"187\", \"189\", \"191\", \"193\", \"195\", \"197\", \"199\", \"201\", \"203\", \"205\", \"207\", \"209\", \"211\", \"213\", \"215\", \"217\", \"219\", \"221\", \"223\", \"225\", \"227\", \"229\", \"231\", \"233\", \"235\", \"237\", \"239\", \"241\", \"243\", \"245\", \"247\", \"249\", \"251\", \"253\", \"255\", \"257\", \"259\", \"261\", \"263\", \"265\", \"267\", \"269\", \"271\", \"273\", \"275\", \"277\", \"279\", \"281\", \"283\", \"285\", \"287\", \"289\", \"291\", \"293\", \"295\", \"297\", \"299\", \"301\", \"303\", \"305\", \"307\", \"309\", \"311\", \"313\", \"315\", \"317\", \"319\", \"321\", \"323\", \"325\", \"327\", \"329\", \"331\", \"333\", \"335\", \"337\", \"339\", \"341\", \"343\", \"345\", \"347\", \"349\", \"351\", \"353\", \"355\", \"357\", \"359\", \"361\", \"363\", \"365\", \"367\", \"369\", \"371\", \"373\", \"375\", \"377\", \"379\", \"381\", \"383\", \"385\", \"387\", \"389\", \"391\", \"393\", \"395\", \"397\", \"399\", \"401\", \"403\", \"405\", \"407\", \"409\", \"411\", \"413\", \"415\", \"417\", \"419\", \"421\", \"423\", \"425\", \"427\", \"429\", \"431\", \"433\", \"435\", \"437\", \"439\", \"441\", \"443\", \"445\", \"447\", \"449\", \"451\", \"453\", \"455\", \"457\", \"459\", \"461\", \"463\", \"465\", \"467\", \"469\", \"471\", \"473\", \"475\", \"477\", \"479\", \"481\", \"483\", \"485\", \"487\", \"489\", \"491\", \"493\", \"495\", \"497\", \"499\", \"501\", \"503\", \"505\", \"507\", \"509\", \"511\", \"513\", \"515\", \"517\", \"519\", \"521\", \"523\", \"525\", \"527\", \"529\", \"531\", \"533\", \"535\", \"537\", \"539\", \"541\", \"543\", \"545\", \"547\", \"549\", \"551\", \"553\", \"555\", \"557\", \"559\", \"561\", \"563\", \"565\", \"567\", \"569\", \"571\", \"573\", \"575\", \"577\", \"579\", \"581\", \"583\", \"585\", \"587\", \"589\", \"591\", \"593\", \"595\", \"597\", \"599\", \"601\", \"603\", \"605\", \"607\", \"609\", \"611\", \"613\", \"615\", \"617\", \"619\", \"621\", \"623\", \"625\", \"627\", \"629\", \"631\", \"633\", \"635\", \"637\", \"639\", \"641\", \"643\", \"645\", \"647\", \"649\", \"651\", \"653\", \"655\", \"657\", \"659\", \"661\", \"663\", \"665\", \"667\", \"669\", \"671\", \"673\", \"675\", \"677\", \"679\", \"681\", \"683\", \"685\", \"687\", \"689\", \"691\", \"693\", \"695\", \"697\", \"699\", \"701\", \"703\", \"705\", \"707\", \"709\", \"711\", \"713\", \"715\", \"717\", \"719\", \"721\", \"723\", \"725\", \"727\", \"729\", \"731\", \"733\", \"735\", \"737\", \"739\", \"741\", \"743\", \"745\", \"747\", \"749\", \"751\", \"753\", \"755\", \"757\", \"759\", \"761\", \"763\", \"765\", \"767\", \"769\", \"771\", \"773\", \"775\", \"777\", \"779\", \"781\", \"783\", \"785\", \"787\", \"789\", \"791\", \"793\", \"795\", \"797\", \"799\", \"801\", \"803\", \"805\", \"807\", \"809\", \"811\", \"813\", \"815\", \"817\", \"819\", \"821\", \"823\", \"825\", \"827\", \"829\", \"831\", \"833\", \"835\", \"837\", \"839\", \"841\", \"843\", \"845\", \"847\", \"849\", \"851\", \"853\", \"855\", \"857\", \"859\", \"861\", \"863\", \"865\", \"867\", \"869\", \"871\", \"873\", \"875\", \"877\", \"879\", \"881\", \"883\", \"885\", \"887\", \"889\", \"891\", \"893\", \"895\", \"897\", \"899\", \"901\", \"903\", \"905\", \"907\", \"909\", \"911\", \"913\", \"915\", \"917\", \"919\", \"921\", \"923\", \"925\", \"927\", \"929\", \"931\", \"933\", \"935\", \"937\", \"939\", \"941\", \"943\", \"945\", \"947\", \"949\", \"951\", \"953\", \"955\", \"957\", \"959\", \"961\", \"963\", \"965\", \"967\", \"969\", \"971\", \"973\", \"975\", \"977\", \"979\", \"981\", \"983\", \"985\", \"987\", \"989\", \"991\", \"993\", \"995\", \"997\", \"999\", \"1001\", \"1003\", \"1005\", \"1007\", \"1009\", \"1011\", \"1013\", \"1015\", \"1017\", \"1019\", \"1021\", \"1023\", \"1025\", \"1027\", \"1029\", \"1031\", \"1033\", \"1035\", \"1037\", \"1039\", \"1041\", \"1043\", \"1045\", \"1047\", \"1049\", \"1051\", \"1053\", \"1055\", \"1057\", \"1059\", \"1061\", \"1063\", \"1065\", \"1067\", \"1069\", \"1071\", \"1073\", \"1075\", \"1077\", \"1079\", \"1081\", \"1083\", \"1085\", \"1087\", \"1089\", \"1091\", \"1093\", \"1095\", \"1097\", \"1099\", \"1101\", \"1103\", \"1105\", \"1107\", \"1109\", \"1111\", \"1113\", \"1115\", \"1117\", \"1119\", \"1121\", \"1123\", \"1125\", \"1127\", \"1129\", \"1131\", \"1133\", \"1135\", \"1137\", \"1139\", \"1141\", \"1143\", \"1145\", \"1147\", \"1149\", \"1151\", \"1153\", \"1155\", \"1157\", \"1159\", \"1161\", \"1163\", \"1165\", \"1167\", \"1169\", \"1171\", \"1173\", \"1175\", \"1177\", \"1179\", \"1181\", \"1183\", \"1185\", \"1187\", \"1189\", \"1191\", \"1193\", \"1195\", \"1197\", \"1199\", \"1201\", \"1203\", \"1205\", \"1207\", \"1209\", \"1211\", \"1213\", \"1215\", \"1217\", \"1219\", \"1221\", \"1223\", \"1225\", \"1227\", \"1229\", \"1231\", \"1233\", \"1235\", \"1237\", \"1239\", \"1241\", \"1243\", \"1245\", \"1247\", \"1249\", \"1251\", \"1253\", \"1255\", \"1257\", \"1259\", \"1261\", \"1263\", \"1265\", \"1267\", \"1269\", \"1271\", \"1273\", \"1275\", \"1277\", \"1279\", \"1281\", \"1283\", \"1285\", \"1287\", \"1289\", \"1291\", \"1293\", \"1295\", \"1297\", \"1299\", \"1301\", \"1303\", \"1305\", \"1307\", \"1309\", \"1311\", \"1313\", \"1315\", \"1317\", \"1319\", \"1321\", \"1323\", \"1325\", \"1327\", \"1329\", \"1331\", \"1333\", \"1335\", \"1337\", \"1339\", \"1341\", \"1343\", \"1345\", \"1347\", \"1349\", \"1351\", \"1353\", \"1355\", \"1357\", \"1359\", \"1361\", \"1363\", \"1365\", \"1367\", \"1369\", \"1371\", \"1373\", \"1375\", \"1377\", \"1379\", \"1381\", \"1383\", \"1385\", \"1387\", \"1389\", \"1391\", \"1393\", \"1395\", \"1397\", \"1399\", \"1401\", \"1403\", \"1405\", \"1407\", \"1409\", \"1411\", \"1413\", \"1415\", \"1417\", \"1419\", \"1421\", \"1423\", \"1425\", \"1427\", \"1429\", \"1431\", \"1433\", \"1435\", \"1437\", \"1439\", \"1441\", \"1443\", \"1445\", \"1447\", \"1449\", \"1451\", \"1453\", \"1455\", \"1457\", \"1459\", \"1461\", \"1463\", \"1465\", \"1467\", \"1469\", \"1471\", \"1473\", \"1475\", \"1477\", \"1479\", \"1481\", \"1483\", \"1485\", \"1487\", \"1489\", \"1491\", \"1493\", \"1495\", \"1497\", \"1499\", \"1501\", \"1503\", \"1505\", \"1507\", \"1509\", \"1511\", \"1513\", \"1515\", \"1517\", \"1519\", \"1521\", \"1523\", \"1525\", \"1527\", \"1529\", \"1531\", \"1533\", \"1535\", \"1537\", \"1539\", \"1541\", \"1543\", \"1545\", \"1547\", \"1549\", \"1551\", \"1553\", \"1555\", \"1557\", \"1559\", \"1561\", \"1563\", \"1565\", \"1567\", \"1569\", \"1571\", \"1573\", \"1575\", \"1577\", \"1579\", \"1581\", \"1583\", \"1585\", \"1587\", \"1589\", \"1591\", \"1593\", \"1595\", \"1597\", \"1599\", \"1601\", \"1603\", \"1605\", \"1607\", \"1609\", \"1611\", \"1613\", \"1615\", \"1617\", \"1619\", \"1621\", \"1623\", \"1625\", \"1627\", \"1629\", \"1631\", \"1633\", \"1635\", \"1637\", \"1639\", \"1641\", \"1643\", \"1645\", \"1647\", \"1649\", \"1651\", \"1653\", \"1655\", \"1657\", \"1659\", \"1661\", \"1663\", \"1665\", \"1667\", \"1669\", \"1671\", \"1673\", \"1675\", \"1677\", \"1679\", \"1681\", \"1683\", \"1685\", \"1687\", \"1689\", \"1691\", \"1693\", \"1695\", \"1697\", \"1699\", \"1701\", \"1703\", \"1705\", \"1707\", \"1709\", \"1711\", \"1713\", \"1715\", \"1717\", \"1719\", \"1721\", \"1723\", \"1725\", \"1727\", \"1729\", \"1731\", \"1733\", \"1735\", \"1737\", \"1739\", \"1741\", \"1743\", \"1745\", \"1747\", \"1749\", \"1751\", \"1753\", \"1755\", \"1757\", \"1759\", \"1761\", \"1763\", \"1765\", \"1767\", \"1769\", \"1771\", \"1773\", \"1775\", \"1777\", \"1779\", \"1781\", \"1783\", \"1785\", \"1787\", \"1789\", \"1791\", \"1793\", \"1795\", \"1797\", \"1799\", \"1801\", \"1803\", \"1805\", \"1807\", \"1809\", \"1811\", \"1813\", \"1815\", \"1817\", \"1819\", \"1821\", \"1823\", \"1825\", \"1827\", \"1829\", \"1831\", \"1833\", \"1835\", \"1837\", \"1839\", \"1841\", \"1843\", \"1845\", \"1847\", \"1849\", \"1851\", \"1853\", \"1855\", \"1857\", \"1859\", \"1861\", \"1863\", \"1865\", \"1867\", \"1869\", \"1871\", \"1873\", \"1875\", \"1877\", \"1879\", \"1881\", \"1883\", \"1885\", \"1887\", \"1889\", \"1891\", \"1893\", \"1895\", \"1897\", \"1899\", \"1901\", \"1903\", \"1905\", \"1907\", \"1909\", \"1911\", \"1913\", \"1915\", \"1917\", \"1919\", \"1921\", \"1923\", \"1925\", \"1927\", \"1929\", \"1931\", \"1933\", \"1935\", \"1937\", \"1939\", \"1941\", \"1943\", \"1945\", \"1947\", \"1949\", \"1951\", \"1953\", \"1955\", \"1957\", \"1959\", \"1961\", \"1963\", \"1965\", \"1967\", \"1969\", \"1971\", \"1973\", \"1975\", \"1977\", \"1979\", \"1981\", \"1983\", \"1985\", \"1987\", \"1989\", \"1991\", \"1993\", \"1995\", \"1997\", \"1999\", \"2001\", \"2003\"}, {} }; int main(){ int m, n; cin >> m >> n; cout << a[m][n] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1032/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int Ackerman(int m, int n) { if (m == 0) return n + 1; else if (n == 0) return Ackerman(m - 1, 1); else return Ackerman(m - 1, Ackerman(m, n - 1)); } int main() { int m, n; cin >> m >> n; cout << Ackerman(m, n); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1033/","text":"1033 \u8868\u8fbe\u5f0f\u6c42\u503c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8868\u8fbe\u5f0f\u6c42\u503c */ #include <iostream> #include <cmath> #include <stdexcept> using namespace std; enum OptType {ADD, SUB, MUL, DIV, BRACKET, EXP, POS, NEG, NONE}; enum TokenType {DIGIT, OPT, VOID}; class Opt{ public: Opt() : opt(' '), type(NONE), predency(-2) {} Opt(char ch) : opt(ch){ switch(ch){ case '+': type = ADD; predency = 1; break; case '-': type = SUB; predency = 1; break; case '*': type = MUL; predency = 2; break; case '/': type = DIV; predency = 2; break; case '(': type = BRACKET; predency = 0; break; case '^': type = EXP; predency = 3; break; case '&': type = POS; predency = 4; break; case '|': type = NEG; predency = 4; break; case ')': type = BRACKET; predency = 10; break; default: throw runtime_error(\"fuck it\"); break; } } OptType getType() { return type; } int getPred() { return predency; } char getOpt() { return opt; } private: char opt; OptType type; int predency; }; long long qpow(long long x, long long n){ long long ans = 1, tmp =x; while (n > 0){ if (n & 1) ans *= tmp; n >>= 1; tmp *= tmp; } return ans; } long long operate(long long x, long long y, Opt opt){ switch(opt.getOpt()){ case '+': return x + y; case '-': return x - y; case '*': return x * y; case '/': if (y == 0) throw runtime_error(\"fuck it\"); return x / y; case '^': return qpow(x, y); default: throw runtime_error(\"fuck it\"); } } char suf[200]; int sufSize = 0; void infToSuf(){ char ch; long long curNum = 0x7fffffff; TokenType lastTokenType = VOID; Opt optStack[200]; int optSize = 0; while (cin >> ch){ if (isdigit(ch)){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + ch - '0'; lastTokenType = DIGIT; } else{ if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } Opt curOpt(ch); switch(curOpt.getOpt()){ case ')': while (optSize > 0 && optStack[optSize - 1].getOpt() != '('){ suf[sufSize++] = optStack[--optSize].getOpt(); } if (optSize == 0){ throw runtime_error(\"fuck it\"); } if (optStack[--optSize].getOpt() != '('){ throw runtime_error(\"fuck it\"); } lastTokenType = DIGIT; break; case '(': optStack[optSize++] = curOpt; lastTokenType = OPT; break; case '-': case '+': if (lastTokenType == VOID || lastTokenType == OPT){ lastTokenType = OPT; if (curOpt.getOpt() == '-'){ Opt tmpOpt('|'); optStack[optSize++] = tmpOpt; } else{ Opt tmpOpt('&'); optStack[optSize++] = tmpOpt; } break; } case '*': case '/': if (optSize == 0 || curOpt.getPred() > optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() <= optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; case '^': if (optSize == 0 || curOpt.getPred() >= optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() < optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; } } } if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } while (optSize > 0){ if (optStack[--optSize].getOpt() == '('){ throw runtime_error(\"fuck it\"); } suf[sufSize++] = optStack[optSize].getOpt(); } } long long calcSuf(){ long long numStack[200]; int numSize = 0; int curPos = 0; long long curNum = 0x7fffffff; while (curPos < sufSize){ while (isdigit(suf[curPos])){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + suf[curPos++] - '0'; } if (suf[curPos] == '#') ++curPos; if (curNum != 0x7fffffff){ numStack[numSize++] = curNum; curNum = 0x7fffffff; } if (isdigit(suf[curPos])) continue; Opt curOpt(suf[curPos++]); long long opr1 = 0, opr2 = 0; switch(curOpt.getOpt()){ case '+': case '-': case '*': case '/': case '^': if (numSize < 2) throw runtime_error(\"fuck it\"); opr2 = numStack[--numSize]; opr1 = numStack[--numSize]; numStack[numSize++] = operate(opr1, opr2, curOpt); break; case '&': case '|': if (numSize < 1) throw runtime_error(\"fuck it\"); if (curOpt.getOpt() == '|') numStack[numSize - 1] = -numStack[numSize - 1]; break; default: throw runtime_error(\"fuck it\"); break; } } return numStack[0]; } int main(){ try{ infToSuf(); } catch(runtime_error){ cout << \"Error\" << endl; return 0; } try{ cout << calcSuf() << endl; } catch(runtime_error){ cout << \"Error\" << endl; return 0; } return 0; }","title":"1033 \u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"nr/1033/#1033","text":"\u8f6c\u5230\u9898\u76ee","title":"1033 \u8868\u8fbe\u5f0f\u6c42\u503c"},{"location":"nr/1033/#fineartzs-solution","text":"/* \u8868\u8fbe\u5f0f\u6c42\u503c */ #include <iostream> #include <cmath> #include <stdexcept> using namespace std; enum OptType {ADD, SUB, MUL, DIV, BRACKET, EXP, POS, NEG, NONE}; enum TokenType {DIGIT, OPT, VOID}; class Opt{ public: Opt() : opt(' '), type(NONE), predency(-2) {} Opt(char ch) : opt(ch){ switch(ch){ case '+': type = ADD; predency = 1; break; case '-': type = SUB; predency = 1; break; case '*': type = MUL; predency = 2; break; case '/': type = DIV; predency = 2; break; case '(': type = BRACKET; predency = 0; break; case '^': type = EXP; predency = 3; break; case '&': type = POS; predency = 4; break; case '|': type = NEG; predency = 4; break; case ')': type = BRACKET; predency = 10; break; default: throw runtime_error(\"fuck it\"); break; } } OptType getType() { return type; } int getPred() { return predency; } char getOpt() { return opt; } private: char opt; OptType type; int predency; }; long long qpow(long long x, long long n){ long long ans = 1, tmp =x; while (n > 0){ if (n & 1) ans *= tmp; n >>= 1; tmp *= tmp; } return ans; } long long operate(long long x, long long y, Opt opt){ switch(opt.getOpt()){ case '+': return x + y; case '-': return x - y; case '*': return x * y; case '/': if (y == 0) throw runtime_error(\"fuck it\"); return x / y; case '^': return qpow(x, y); default: throw runtime_error(\"fuck it\"); } } char suf[200]; int sufSize = 0; void infToSuf(){ char ch; long long curNum = 0x7fffffff; TokenType lastTokenType = VOID; Opt optStack[200]; int optSize = 0; while (cin >> ch){ if (isdigit(ch)){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + ch - '0'; lastTokenType = DIGIT; } else{ if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } Opt curOpt(ch); switch(curOpt.getOpt()){ case ')': while (optSize > 0 && optStack[optSize - 1].getOpt() != '('){ suf[sufSize++] = optStack[--optSize].getOpt(); } if (optSize == 0){ throw runtime_error(\"fuck it\"); } if (optStack[--optSize].getOpt() != '('){ throw runtime_error(\"fuck it\"); } lastTokenType = DIGIT; break; case '(': optStack[optSize++] = curOpt; lastTokenType = OPT; break; case '-': case '+': if (lastTokenType == VOID || lastTokenType == OPT){ lastTokenType = OPT; if (curOpt.getOpt() == '-'){ Opt tmpOpt('|'); optStack[optSize++] = tmpOpt; } else{ Opt tmpOpt('&'); optStack[optSize++] = tmpOpt; } break; } case '*': case '/': if (optSize == 0 || curOpt.getPred() > optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() <= optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; case '^': if (optSize == 0 || curOpt.getPred() >= optStack[optSize - 1].getPred()){ optStack[optSize++] = curOpt; } else{ while (optSize > 0 && curOpt.getPred() < optStack[optSize - 1].getPred()){ suf[sufSize++] = optStack[--optSize].getOpt(); } optStack[optSize++] = curOpt; } lastTokenType = OPT; break; } } } if (lastTokenType == DIGIT && curNum != 0x7fffffff){ if (curNum != 0){ int dec = ceil(log10(curNum)); if (abs(dec - log10(curNum)) < 1e-6) ++dec; while (dec > 0){ suf[sufSize++] = curNum / qpow(10, dec - 1) + '0'; curNum %= qpow(10, dec - 1); --dec; } } else{ suf[sufSize++] = '0'; } curNum = 0x7fffffff; suf[sufSize++] = '#'; } while (optSize > 0){ if (optStack[--optSize].getOpt() == '('){ throw runtime_error(\"fuck it\"); } suf[sufSize++] = optStack[optSize].getOpt(); } } long long calcSuf(){ long long numStack[200]; int numSize = 0; int curPos = 0; long long curNum = 0x7fffffff; while (curPos < sufSize){ while (isdigit(suf[curPos])){ if (curNum == 0x7fffffff) curNum = 0; curNum = curNum * 10 + suf[curPos++] - '0'; } if (suf[curPos] == '#') ++curPos; if (curNum != 0x7fffffff){ numStack[numSize++] = curNum; curNum = 0x7fffffff; } if (isdigit(suf[curPos])) continue; Opt curOpt(suf[curPos++]); long long opr1 = 0, opr2 = 0; switch(curOpt.getOpt()){ case '+': case '-': case '*': case '/': case '^': if (numSize < 2) throw runtime_error(\"fuck it\"); opr2 = numStack[--numSize]; opr1 = numStack[--numSize]; numStack[numSize++] = operate(opr1, opr2, curOpt); break; case '&': case '|': if (numSize < 1) throw runtime_error(\"fuck it\"); if (curOpt.getOpt() == '|') numStack[numSize - 1] = -numStack[numSize - 1]; break; default: throw runtime_error(\"fuck it\"); break; } } return numStack[0]; } int main(){ try{ infToSuf(); } catch(runtime_error){ cout << \"Error\" << endl; return 0; } try{ cout << calcSuf() << endl; } catch(runtime_error){ cout << \"Error\" << endl; return 0; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1034/","text":"1034 \u4e8c\u54e5\u7684\u91d1\u94fe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u91d1\u94fe */ #include <iostream> #include <deque> using namespace std; void pop_back(deque<int> &d){ while ((d.end() - d.begin()) >= 1 && d.back() >= d.front()) d.pop_front(); if (!d.empty()) d.pop_back(); } int main(){ int n, k, a[400005]; cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = n + 1; i <= n + k; ++i) a[i] = a[i - n]; deque<int> f, ff; for (int i = 1; i <= k; ++i) { while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); ff.push_back(a[i]); } int maxmin = f[0]; for (int i = k + 1; i <= n + k; ++i){ while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); if (f[0] == ff[0]) f.pop_front(); ff.pop_front(); ff.push_back(a[i]); if (maxmin > f[0]) maxmin = f[0]; } cout << maxmin << endl; return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int a[300000],rp[300000],n,k,head,tail,minrp=0x3f3f3f3f; int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<n;++i) scanf(\"%d\",&rp[i]); for (int i=0;i<k;++i){ while (head>0&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; } if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; for (int i=k;i<n;++i){ while (head>tail&&a[tail]<=i-k) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } for (int i=0;i<k-1;++i){ while (head>tail&&(a[tail]>i&&a[tail]<=i-k+n)) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } printf(\"%d\",minrp); return 0; }","title":"1034 \u4e8c\u54e5\u7684\u91d1\u94fe"},{"location":"nr/1034/#1034","text":"\u8f6c\u5230\u9898\u76ee","title":"1034 \u4e8c\u54e5\u7684\u91d1\u94fe"},{"location":"nr/1034/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u91d1\u94fe */ #include <iostream> #include <deque> using namespace std; void pop_back(deque<int> &d){ while ((d.end() - d.begin()) >= 1 && d.back() >= d.front()) d.pop_front(); if (!d.empty()) d.pop_back(); } int main(){ int n, k, a[400005]; cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int i = n + 1; i <= n + k; ++i) a[i] = a[i - n]; deque<int> f, ff; for (int i = 1; i <= k; ++i) { while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); ff.push_back(a[i]); } int maxmin = f[0]; for (int i = k + 1; i <= n + k; ++i){ while (!f.empty() && a[i] > f.back()){ pop_back(f); } f.push_back(a[i]); if (f[0] == ff[0]) f.pop_front(); ff.pop_front(); ff.push_back(a[i]); if (maxmin > f[0]) maxmin = f[0]; } cout << maxmin << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1034/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int a[300000],rp[300000],n,k,head,tail,minrp=0x3f3f3f3f; int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<n;++i) scanf(\"%d\",&rp[i]); for (int i=0;i<k;++i){ while (head>0&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; } if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; for (int i=k;i<n;++i){ while (head>tail&&a[tail]<=i-k) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } for (int i=0;i<k-1;++i){ while (head>tail&&(a[tail]>i&&a[tail]<=i-k+n)) tail++; while (head>tail&&rp[a[head-1]]<=rp[i]) head--; a[head++]=i; if (rp[a[tail]]<minrp) minrp=rp[a[tail]]; } printf(\"%d\",minrp); return 0; }","title":"WashWang's solution"},{"location":"nr/1035/","text":"1035 \u4e8c\u54e5\u7092\u80a1\u7968 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <algorithm> using namespace std; class Stroke{ public: bool operator <(const Stroke &s){ return (price < s.price || price == s.price && ind > s.ind); } int ind = 0, price = 0; }; Stroke a[20005]; int n, k; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ a[i].ind = i; cin >> a[i].price; } cin >> k; while (k--){ char ch; cin >> ch; if (ch == 'Q'){ Stroke b[20005]; for (int i = 1; i <= n; ++i){ b[i] = a[i]; } sort(b + 1, b + n + 1); int r; cin >> r; while (r--){ int t; cin >> t; cout << b[n - t + 1].ind << ' '; } cout << '\\n'; } else{ int x, y; cin >> x >> y; a[x].price = y; } } return 0; }","title":"1035 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1035/#1035","text":"\u8f6c\u5230\u9898\u76ee","title":"1035 \u4e8c\u54e5\u7092\u80a1\u7968"},{"location":"nr/1035/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7092\u80a1\u7968 */ #include <iostream> #include <algorithm> using namespace std; class Stroke{ public: bool operator <(const Stroke &s){ return (price < s.price || price == s.price && ind > s.ind); } int ind = 0, price = 0; }; Stroke a[20005]; int n, k; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ a[i].ind = i; cin >> a[i].price; } cin >> k; while (k--){ char ch; cin >> ch; if (ch == 'Q'){ Stroke b[20005]; for (int i = 1; i <= n; ++i){ b[i] = a[i]; } sort(b + 1, b + n + 1); int r; cin >> r; while (r--){ int t; cin >> t; cout << b[n - t + 1].ind << ' '; } cout << '\\n'; } else{ int x, y; cin >> x >> y; a[x].price = y; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1036/","text":"1036 \u4e8c\u54e5\u53bb\u53d6\u94b1 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u53bb\u53d6\u94b1 */ #include <iostream> using namespace std; int selectMin(int x, int y, int z){ int r = 1, m = x; if (m > y){ r = 2; m = y; } if (m > z){ r = 0; m = z; } return r; } int main(){ int n; int a[100005]; cin >> n; long long w1 = 0, t1 = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int p[3] = {n / 3, n / 3 + (n % 3 != 0 ? 1 : 0), n / 3 + (n % 3 == 2 ? 1 : 0)}; long long t[3] = {0, 0, 0}; for (int i = 1; i <= n; ++i){ w1 += a[i] * (--p[i % 3]); t[i % 3] += a[i]; } t1 = max(t[0], max(t[1], t[2])); cout << w1 << ' ' << t1 << endl; long long w2 = 0, t2 = 0; if (n == 1){ t2 = a[1]; } else if (n == 2){ t2 = max(a[1], a[2]); } else{ int w[3] = {a[3], a[1], a[2]}; for (int i = 4; i <= n; ++i){ int j = selectMin(w[1], w[2], w[0]); for (int k = 0; k < 3; ++k) if (j != k) w[k] -= w[j]; w2 += (n - i + 1) * w[j]; t2 += w[j]; w[j] = a[i]; } t2 += max(w[0], max(w[1], w[2])); } cout << w2 << ' ' << t2 << endl; return 0; }","title":"1036 \u4e8c\u54e5\u53bb\u53d6\u94b1"},{"location":"nr/1036/#1036","text":"\u8f6c\u5230\u9898\u76ee","title":"1036 \u4e8c\u54e5\u53bb\u53d6\u94b1"},{"location":"nr/1036/#fineartzs-solution","text":"/* \u4e8c\u54e5\u53bb\u53d6\u94b1 */ #include <iostream> using namespace std; int selectMin(int x, int y, int z){ int r = 1, m = x; if (m > y){ r = 2; m = y; } if (m > z){ r = 0; m = z; } return r; } int main(){ int n; int a[100005]; cin >> n; long long w1 = 0, t1 = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int p[3] = {n / 3, n / 3 + (n % 3 != 0 ? 1 : 0), n / 3 + (n % 3 == 2 ? 1 : 0)}; long long t[3] = {0, 0, 0}; for (int i = 1; i <= n; ++i){ w1 += a[i] * (--p[i % 3]); t[i % 3] += a[i]; } t1 = max(t[0], max(t[1], t[2])); cout << w1 << ' ' << t1 << endl; long long w2 = 0, t2 = 0; if (n == 1){ t2 = a[1]; } else if (n == 2){ t2 = max(a[1], a[2]); } else{ int w[3] = {a[3], a[1], a[2]}; for (int i = 4; i <= n; ++i){ int j = selectMin(w[1], w[2], w[0]); for (int k = 0; k < 3; ++k) if (j != k) w[k] -= w[j]; w2 += (n - i + 1) * w[j]; t2 += w[j]; w[j] = a[i]; } t2 += max(w[0], max(w[1], w[2])); } cout << w2 << ' ' << t2 << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1037/","text":"1037 \u4e8c\u54e5\u4e70\u8349 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u4e70\u8349 */ #include <iostream> #include <algorithm> using namespace std; bool cmp(int x, int y){ return x > y; } int main(){ int m, n; int a[10005], b[10005]; cin >> n >> m; for (int i = 0; i < n; ++i){ cin >> a[i]; } for (int i = 0; i < m; ++i){ cin >> b[i]; } sort(a, a + n, cmp); sort(b, b + m, cmp); int ans = n, j = 0; for (int i = 0; i < n; ++i){ while (j < m && a[i] <= b[j]) ++j; if (j == m) break; ++ans; ++j; } cout << ans << endl; return 0; }","title":"1037 \u4e8c\u54e5\u4e70\u8349"},{"location":"nr/1037/#1037","text":"\u8f6c\u5230\u9898\u76ee","title":"1037 \u4e8c\u54e5\u4e70\u8349"},{"location":"nr/1037/#fineartzs-solution","text":"/* \u4e8c\u54e5\u4e70\u8349 */ #include <iostream> #include <algorithm> using namespace std; bool cmp(int x, int y){ return x > y; } int main(){ int m, n; int a[10005], b[10005]; cin >> n >> m; for (int i = 0; i < n; ++i){ cin >> a[i]; } for (int i = 0; i < m; ++i){ cin >> b[i]; } sort(a, a + n, cmp); sort(b, b + m, cmp); int ans = n, j = 0; for (int i = 0; i < n; ++i){ while (j < m && a[i] <= b[j]) ++j; if (j == m) break; ++ans; ++j; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1038/","text":"1038 \u4e8c\u54e5\u7684\u7ea6\u745f\u592b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u7ea6\u745f\u592b */ #include <iostream> using namespace std; int main(){ int m, k[10005]; cin >> m; for (int i = 1; i < m; ++i) cin >> k[i]; int ans = 0; for (int i = 2; i <= m; ++i) ans = (ans + k[m - i + 1]) % i; cout << ++ans << endl; return 0; } WashWang's solution #include <iostream> using namespace std; int k[30000],t,f[30000]; int main() { cin>>t; f[1]=0; for (int i=0;i<t-1;++i) cin>>k[i]; for (int i=2;i<=t;++i) f[i]=(f[i-1]+k[t-i])%i; cout<<f[t]+1; }","title":"1038 \u4e8c\u54e5\u7684\u7ea6\u745f\u592b"},{"location":"nr/1038/#1038","text":"\u8f6c\u5230\u9898\u76ee","title":"1038 \u4e8c\u54e5\u7684\u7ea6\u745f\u592b"},{"location":"nr/1038/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u7ea6\u745f\u592b */ #include <iostream> using namespace std; int main(){ int m, k[10005]; cin >> m; for (int i = 1; i < m; ++i) cin >> k[i]; int ans = 0; for (int i = 2; i <= m; ++i) ans = (ans + k[m - i + 1]) % i; cout << ++ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1038/#washwangs-solution","text":"#include <iostream> using namespace std; int k[30000],t,f[30000]; int main() { cin>>t; f[1]=0; for (int i=0;i<t-1;++i) cin>>k[i]; for (int i=2;i<=t;++i) f[i]=(f[i-1]+k[t-i])%i; cout<<f[t]+1; }","title":"WashWang's solution"},{"location":"nr/1039/","text":"1039 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, pos = 0, ind = 0; }; Node a[100005]; int n, root = 0, b[100005], c[100005]; void encode(int root){ int q[200005], front = 0, rear = 0, cnt = 0, r = 0; q[rear++]= root; r = rear; a[root].pos = ++cnt; while (front != r){ int now = q[front++]; ++cnt; if (now != -1){ if (a[now].l != -1){ q[rear++] = b[a[now].l]; a[b[a[now].l]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } ++cnt; if (now != -1){ if (a[now].r != -1){ q[rear++] = b[a[now].r]; a[b[a[now].r]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } } for (int i = 1; i <= n; ++i){ c[a[i].ind] = a[i].pos; } for (int i = 1; i <= n; ++i) cout << c[i] << ' '; cout << endl; } void sufTrans(int x){ if (a[x].l != -1) sufTrans(b[a[x].l]); if (a[x].r != -1) sufTrans(b[a[x].r]); cout << a[x].ind << ' '; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].ind >> a[i].l >> a[i].r; if (a[i].ind == 1) root = i; } for (int i = 1; i <= n; ++i){ b[a[i].ind] = i; } encode(root); sufTrans(root); cout << endl; return 0; } WashWang's solution #include <iostream> using namespace std; int n,root,postn,seq[30001],post[30001],ls[30001],rs[30001],x,y,z; void dfs(int x) { if (ls[x]!=-1) { seq[ls[x]]=2*seq[x]; dfs(ls[x]); } if (rs[x]!=-1){ seq[rs[x]]=2*seq[x]+1; dfs(rs[x]); } post[++postn]=x; } int main() { cin>>n; for (int i=0;i<n;++i){ cin>>x>>y>>z; if (i==0) root=x; ls[x]=y; rs[x]=z; } seq[root]=1; dfs(root); for (int i=1;i<=n;++i) cout<<seq[i]<<\" \"; cout<<endl; for (int i=1;i<=n;++i) cout<<post[i]<<\" \"; return 0; }","title":"1039 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811"},{"location":"nr/1039/#1039","text":"\u8f6c\u5230\u9898\u76ee","title":"1039 \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811"},{"location":"nr/1039/#fineartzs-solution","text":"/* \u987a\u5e8f\u5b58\u50a8\u4e8c\u53c9\u6811 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, pos = 0, ind = 0; }; Node a[100005]; int n, root = 0, b[100005], c[100005]; void encode(int root){ int q[200005], front = 0, rear = 0, cnt = 0, r = 0; q[rear++]= root; r = rear; a[root].pos = ++cnt; while (front != r){ int now = q[front++]; ++cnt; if (now != -1){ if (a[now].l != -1){ q[rear++] = b[a[now].l]; a[b[a[now].l]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } ++cnt; if (now != -1){ if (a[now].r != -1){ q[rear++] = b[a[now].r]; a[b[a[now].r]].pos = cnt; r = rear; } else q[rear++] = -1; } else{ q[rear++] = -1; } } for (int i = 1; i <= n; ++i){ c[a[i].ind] = a[i].pos; } for (int i = 1; i <= n; ++i) cout << c[i] << ' '; cout << endl; } void sufTrans(int x){ if (a[x].l != -1) sufTrans(b[a[x].l]); if (a[x].r != -1) sufTrans(b[a[x].r]); cout << a[x].ind << ' '; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].ind >> a[i].l >> a[i].r; if (a[i].ind == 1) root = i; } for (int i = 1; i <= n; ++i){ b[a[i].ind] = i; } encode(root); sufTrans(root); cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1039/#washwangs-solution","text":"#include <iostream> using namespace std; int n,root,postn,seq[30001],post[30001],ls[30001],rs[30001],x,y,z; void dfs(int x) { if (ls[x]!=-1) { seq[ls[x]]=2*seq[x]; dfs(ls[x]); } if (rs[x]!=-1){ seq[rs[x]]=2*seq[x]+1; dfs(rs[x]); } post[++postn]=x; } int main() { cin>>n; for (int i=0;i<n;++i){ cin>>x>>y>>z; if (i==0) root=x; ls[x]=y; rs[x]=z; } seq[root]=1; dfs(root); for (int i=1;i<=n;++i) cout<<seq[i]<<\" \"; cout<<endl; for (int i=1;i<=n;++i) cout<<post[i]<<\" \"; return 0; }","title":"WashWang's solution"},{"location":"nr/1040/","text":"1040 \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = -1, r = -1; }; Node a[1000005]; int q[1000005] = {0}; void traverse(int root){ int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << ' '; if (a[now].l != -1) q[rear++] = a[now].l; if (a[now].r != -1) q[rear++] = a[now].r; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i < n; ++i){ int f; cin >> f; if (a[f].l == -1) a[f].l = i; else a[f].r = i; } traverse(0); return 0; }","title":"1040 \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386"},{"location":"nr/1040/#1040","text":"\u8f6c\u5230\u9898\u76ee","title":"1040 \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386"},{"location":"nr/1040/#fineartzs-solution","text":"/* \u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = -1, r = -1; }; Node a[1000005]; int q[1000005] = {0}; void traverse(int root){ int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << ' '; if (a[now].l != -1) q[rear++] = a[now].l; if (a[now].r != -1) q[rear++] = a[now].r; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i < n; ++i){ int f; cin >> f; if (a[f].l == -1) a[f].l = i; else a[f].r = i; } traverse(0); return 0; }","title":"FineArtz's solution"},{"location":"nr/1041/","text":"1041 \u4e8c\u54e5\u6253\u98de\u673a \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u6253\u98de\u673a */ #include <iostream> #include <algorithm> #include <set> using namespace std; class cmp{ public: bool operator()(pair<int, int> p1, pair<int, int> p2){ return (p1.second < p2.second || (p1.second == p2.second && p1.first < p2.first)); } }; class Plane{ public: bool operator <(const Plane &p){ return (h < p.h || (h == p.h && ind < p.ind)); } int h = 0, ind = 0; }; int n; Plane a[100005]; int pos[100005]; void siftup(int x){ while (x > 1){ if (a[x] < a[x / 2]){ a[0] = a[x / 2]; a[x / 2] = a[x]; a[x] = a[0]; pos[a[x].ind] = x; pos[a[x / 2].ind] = x / 2; x /= 2; } else break; } } void makeheap(){ for (int i = n / 2 + 1; i <= n; ++i) siftup(i); } int dfs(int x, int i){ if (a[i].h > x) return i; int r1 = 0, r2 = 0; if (i * 2 <= n){ r1 = dfs(x, i * 2); } if (i * 2 + 1 <= n){ r2 = dfs(x, i * 2 + 1); } if (r1 == 0) return r2; else if (r2 == 0) return r1; else return (a[r1] < a[r2] ? r1 : r2); } void findmin(int x){ int r = dfs(x, 1); cout << a[r].ind << endl; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); set<pair<int, int>, cmp> s; cin >> n; if (n <= 70000){ for (int i = 1; i <= n; ++i){ int h; cin >> h; s.insert(make_pair(i, h)); } char ss[10]; while (cin >> ss){ if (ss[0] == 'd'){ int x, d; cin >> x >> d; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.first == x;}); auto t = *it; t.second -= d; s.erase(it); s.insert(t); } else if (ss[0] == 'f'){ int x; cin >> x; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.second > x;}); cout << it->first << '\\n'; } } } else{ for (int i = 1; i <= n; ++i){ cin >> a[i].h; a[i].ind = i; pos[i] = i; } makeheap(); char s[10]; while (cin >> s){ if (s[0] == 'd'){ int x, d; cin >> x >> d; a[pos[x]].h -= d; siftup(pos[x]); } else if (s[0] == 'f'){ int x; cin >> x; findmin(x); } } } return 0; } WashWang's solution #include <iostream> #include <cstring> using namespace std; struct node{ int n,h; }; char cmd[200]; node heap[200000]; int ptr[200000],num,x,d; inline int ls(int x){ return x<<1;} inline int rs(int x){ return x<<1|1;} void minheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&(heap[ls(x)].h<heap[s].h||(heap[ls(x)].h==heap[s].h&&heap[ls(x)].n<heap[s].n))) s=ls(x); if (rs(x)<=num&&(heap[rs(x)].h<heap[s].h||(heap[rs(x)].h==heap[s].h&&heap[rs(x)].n<heap[s].n))) s=rs(x); if (s!=x) { swap(ptr[heap[s].n],ptr[heap[x].n]); swap(heap[s],heap[x]); x=s; } else break; } } void modify(int x,int d){ heap[ptr[x]].h-=d; minheapify(ptr[x]); int cur=ptr[x]; while (cur>1){ if (heap[cur].h<heap[cur/2].h||(heap[cur].h==heap[cur/2].h&&heap[cur].n<heap[cur/2].n)){ swap(ptr[heap[cur].n],ptr[heap[cur/2].n]); swap(heap[cur],heap[cur/2]); cur/=2; } else break; } } int findmin(int x,int cur){ int ans=0x3f3f3f3f,index=0x3f3f3f3f,tmp; if (heap[cur].h<=x){ if (ls(cur)<=num){ tmp=findmin(x,ls(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } if (rs(cur)<=num){ tmp=findmin(x,rs(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } return index; } else return heap[cur].n; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>num; for (int i=1;i<=num;++i) { cin>>heap[i].h; heap[i].n=i; ptr[i]=i; } for (int i=num;i>=1;--i) minheapify(i); while (cin>>cmd){ if (strcmp(cmd,\"findmin\")==0){ cin>>x; cout<<findmin(x,1)<<endl; } if (strcmp(cmd,\"decrease\")==0){ cin>>x>>d; modify(x,d); } } return 0; }","title":"1041 \u4e8c\u54e5\u6253\u98de\u673a"},{"location":"nr/1041/#1041","text":"\u8f6c\u5230\u9898\u76ee","title":"1041 \u4e8c\u54e5\u6253\u98de\u673a"},{"location":"nr/1041/#fineartzs-solution","text":"/* \u4e8c\u54e5\u6253\u98de\u673a */ #include <iostream> #include <algorithm> #include <set> using namespace std; class cmp{ public: bool operator()(pair<int, int> p1, pair<int, int> p2){ return (p1.second < p2.second || (p1.second == p2.second && p1.first < p2.first)); } }; class Plane{ public: bool operator <(const Plane &p){ return (h < p.h || (h == p.h && ind < p.ind)); } int h = 0, ind = 0; }; int n; Plane a[100005]; int pos[100005]; void siftup(int x){ while (x > 1){ if (a[x] < a[x / 2]){ a[0] = a[x / 2]; a[x / 2] = a[x]; a[x] = a[0]; pos[a[x].ind] = x; pos[a[x / 2].ind] = x / 2; x /= 2; } else break; } } void makeheap(){ for (int i = n / 2 + 1; i <= n; ++i) siftup(i); } int dfs(int x, int i){ if (a[i].h > x) return i; int r1 = 0, r2 = 0; if (i * 2 <= n){ r1 = dfs(x, i * 2); } if (i * 2 + 1 <= n){ r2 = dfs(x, i * 2 + 1); } if (r1 == 0) return r2; else if (r2 == 0) return r1; else return (a[r1] < a[r2] ? r1 : r2); } void findmin(int x){ int r = dfs(x, 1); cout << a[r].ind << endl; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); set<pair<int, int>, cmp> s; cin >> n; if (n <= 70000){ for (int i = 1; i <= n; ++i){ int h; cin >> h; s.insert(make_pair(i, h)); } char ss[10]; while (cin >> ss){ if (ss[0] == 'd'){ int x, d; cin >> x >> d; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.first == x;}); auto t = *it; t.second -= d; s.erase(it); s.insert(t); } else if (ss[0] == 'f'){ int x; cin >> x; auto it = find_if(s.begin(), s.end(), [x](pair<int, int> p){return p.second > x;}); cout << it->first << '\\n'; } } } else{ for (int i = 1; i <= n; ++i){ cin >> a[i].h; a[i].ind = i; pos[i] = i; } makeheap(); char s[10]; while (cin >> s){ if (s[0] == 'd'){ int x, d; cin >> x >> d; a[pos[x]].h -= d; siftup(pos[x]); } else if (s[0] == 'f'){ int x; cin >> x; findmin(x); } } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1041/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; struct node{ int n,h; }; char cmd[200]; node heap[200000]; int ptr[200000],num,x,d; inline int ls(int x){ return x<<1;} inline int rs(int x){ return x<<1|1;} void minheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&(heap[ls(x)].h<heap[s].h||(heap[ls(x)].h==heap[s].h&&heap[ls(x)].n<heap[s].n))) s=ls(x); if (rs(x)<=num&&(heap[rs(x)].h<heap[s].h||(heap[rs(x)].h==heap[s].h&&heap[rs(x)].n<heap[s].n))) s=rs(x); if (s!=x) { swap(ptr[heap[s].n],ptr[heap[x].n]); swap(heap[s],heap[x]); x=s; } else break; } } void modify(int x,int d){ heap[ptr[x]].h-=d; minheapify(ptr[x]); int cur=ptr[x]; while (cur>1){ if (heap[cur].h<heap[cur/2].h||(heap[cur].h==heap[cur/2].h&&heap[cur].n<heap[cur/2].n)){ swap(ptr[heap[cur].n],ptr[heap[cur/2].n]); swap(heap[cur],heap[cur/2]); cur/=2; } else break; } } int findmin(int x,int cur){ int ans=0x3f3f3f3f,index=0x3f3f3f3f,tmp; if (heap[cur].h<=x){ if (ls(cur)<=num){ tmp=findmin(x,ls(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } if (rs(cur)<=num){ tmp=findmin(x,rs(cur)); if (tmp<=num&&(heap[ptr[tmp]].h<ans||(heap[ptr[tmp]].h==ans&&tmp<index))) { ans = heap[ptr[tmp]].h; index = tmp; } } return index; } else return heap[cur].n; } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>num; for (int i=1;i<=num;++i) { cin>>heap[i].h; heap[i].n=i; ptr[i]=i; } for (int i=num;i>=1;--i) minheapify(i); while (cin>>cmd){ if (strcmp(cmd,\"findmin\")==0){ cin>>x; cout<<findmin(x,1)<<endl; } if (strcmp(cmd,\"decrease\")==0){ cin>>x>>d; modify(x,d); } } return 0; }","title":"WashWang's solution"},{"location":"nr/1042/","text":"1042 \u5de6\u513f\u5b50\u53f3\u5144\u5f1f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5de6\u513f\u5b50\u53f3\u5144\u5f1f */ #include <iostream> using namespace std; class Node{ public: int child = 0, brother = 0; }; Node a[12350]; bool v[12350] = {0}; void dlr(int x){ cout << x << ' '; int i = a[x].child; while (i != 0){ dlr(i); i = a[i].brother; } } void lrd(int x){ int i = a[x].child; while (i != 0){ lrd(i); i = a[i].brother; } cout << x << ' '; } void hie(int x){ int q[12350], front = 0, rear = 0; q[rear++] = x; while (front != rear){ int now = q[front++]; cout << now << ' '; int i = a[now].child; while (i != 0){ q[rear++] = i; i = a[i].brother; } } } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ int x, cx, sx; cin >> x >> cx >> sx; a[x].child = cx; a[x].brother = sx; v[cx] = true; v[sx] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!v[i]){ root = i; break; } } dlr(root); cout << endl; lrd(root); cout << endl; hie(root); cout << endl; return 0; }","title":"1042 \u5de6\u513f\u5b50\u53f3\u5144\u5f1f"},{"location":"nr/1042/#1042","text":"\u8f6c\u5230\u9898\u76ee","title":"1042 \u5de6\u513f\u5b50\u53f3\u5144\u5f1f"},{"location":"nr/1042/#fineartzs-solution","text":"/* \u5de6\u513f\u5b50\u53f3\u5144\u5f1f */ #include <iostream> using namespace std; class Node{ public: int child = 0, brother = 0; }; Node a[12350]; bool v[12350] = {0}; void dlr(int x){ cout << x << ' '; int i = a[x].child; while (i != 0){ dlr(i); i = a[i].brother; } } void lrd(int x){ int i = a[x].child; while (i != 0){ lrd(i); i = a[i].brother; } cout << x << ' '; } void hie(int x){ int q[12350], front = 0, rear = 0; q[rear++] = x; while (front != rear){ int now = q[front++]; cout << now << ' '; int i = a[now].child; while (i != 0){ q[rear++] = i; i = a[i].brother; } } } int main(){ int n; cin >> n; for (int i = 1; i <= n; ++i){ int x, cx, sx; cin >> x >> cx >> sx; a[x].child = cx; a[x].brother = sx; v[cx] = true; v[sx] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!v[i]){ root = i; break; } } dlr(root); cout << endl; lrd(root); cout << endl; hie(root); cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1043/","text":"1043 \u5b8c\u5168\u4e8c\u53c9\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5b8c\u5168\u4e8c\u53c9\u6811 */ #include <iostream> #include <queue> using namespace std; class Node{ public: int lchild = -1, rchild = -1; }; Node a[1000005]; bool check(int root){ queue<int> q; q.push(root); int t = q.front(); q.pop(); while (t != -1){ q.push(a[t].lchild); q.push(a[t].rchild); t = q.front(); q.pop(); } while (!q.empty()){ t = q.front(); q.pop(); if (t != -1) return false; } return true; } int main(){ int n, t; cin >> n; for (int i = 1; i < n; ++i){ cin >> t; if (a[t].lchild == -1) a[t].lchild = i; else a[t].rchild = i; } if (check(0)) cout << \"true\" << endl; else cout << \"false\" << endl; return 0; }","title":"1043 \u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"nr/1043/#1043","text":"\u8f6c\u5230\u9898\u76ee","title":"1043 \u5b8c\u5168\u4e8c\u53c9\u6811"},{"location":"nr/1043/#fineartzs-solution","text":"/* \u5b8c\u5168\u4e8c\u53c9\u6811 */ #include <iostream> #include <queue> using namespace std; class Node{ public: int lchild = -1, rchild = -1; }; Node a[1000005]; bool check(int root){ queue<int> q; q.push(root); int t = q.front(); q.pop(); while (t != -1){ q.push(a[t].lchild); q.push(a[t].rchild); t = q.front(); q.pop(); } while (!q.empty()){ t = q.front(); q.pop(); if (t != -1) return false; } return true; } int main(){ int n, t; cin >> n; for (int i = 1; i < n; ++i){ cin >> t; if (a[t].lchild == -1) a[t].lchild = i; else a[t].rchild = i; } if (check(0)) cout << \"true\" << endl; else cout << \"false\" << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1044/","text":"1044 \u4e8c\u54e5\u6253\u6e38\u620f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u6253\u6e38\u620f */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; class Unit{ public: char name[25]; int food = 0, wood = 0, priority = 0; bool operator <(const Unit &u){ return priority > u.priority; } }; int main(){ Unit a[15]; int k, n; cin >> k; for (int i = 1; i <= k; ++i){ cin >> a[i].name >> a[i].food >> a[i].wood >> a[i].priority; } sort(a + 1, a + k + 1); // for (int i = 1; i <= k; ++i) // cout << a[i].name << ' ' << a[i].food << ' ' << a[i].wood << ' ' << a[i].priority << endl; int wood = 0, food = 0, bonus = 0; int wq[10005], fq[10005], wfront = 0, wrear = 0, ffront = 0, frear = 0; cin >> n; for (int t = 1; t <= n; ++t){ char source[5]; int amount; cin >> source >> amount; amount += bonus; if (source[0] == 'f'){ fq[frear++] = amount; food += amount; } else if (source[0] == 'w'){ wq[wrear++] = amount; wood += amount; } for (int i = 1; i <= k; ++i){ if (food >= a[i].food && wood >= a[i].wood){ cout << \"#\" << t << \": a \" << a[i].name << \" was created.\" << '\\n'; int f = 0, w = 0; while (f < a[i].food){ f += fq[ffront++]; } food -= f; while (w < a[i].wood){ w += wq[wfront++]; } wood -= w; if (strcmp(a[i].name, \"farmer\") == 0) ++bonus; } } } cout << \"food: \" << food << \", wood: \" << wood << '\\n'; return 0; }","title":"1044 \u4e8c\u54e5\u6253\u6e38\u620f"},{"location":"nr/1044/#1044","text":"\u8f6c\u5230\u9898\u76ee","title":"1044 \u4e8c\u54e5\u6253\u6e38\u620f"},{"location":"nr/1044/#fineartzs-solution","text":"/* \u4e8c\u54e5\u6253\u6e38\u620f */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; class Unit{ public: char name[25]; int food = 0, wood = 0, priority = 0; bool operator <(const Unit &u){ return priority > u.priority; } }; int main(){ Unit a[15]; int k, n; cin >> k; for (int i = 1; i <= k; ++i){ cin >> a[i].name >> a[i].food >> a[i].wood >> a[i].priority; } sort(a + 1, a + k + 1); // for (int i = 1; i <= k; ++i) // cout << a[i].name << ' ' << a[i].food << ' ' << a[i].wood << ' ' << a[i].priority << endl; int wood = 0, food = 0, bonus = 0; int wq[10005], fq[10005], wfront = 0, wrear = 0, ffront = 0, frear = 0; cin >> n; for (int t = 1; t <= n; ++t){ char source[5]; int amount; cin >> source >> amount; amount += bonus; if (source[0] == 'f'){ fq[frear++] = amount; food += amount; } else if (source[0] == 'w'){ wq[wrear++] = amount; wood += amount; } for (int i = 1; i <= k; ++i){ if (food >= a[i].food && wood >= a[i].wood){ cout << \"#\" << t << \": a \" << a[i].name << \" was created.\" << '\\n'; int f = 0, w = 0; while (f < a[i].food){ f += fq[ffront++]; } food -= f; while (w < a[i].wood){ w += wq[wfront++]; } wood -= w; if (strcmp(a[i].name, \"farmer\") == 0) ++bonus; } } } cout << \"food: \" << food << \", wood: \" << wood << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/1045/","text":"1045 \u4e8c\u54e5\u7684\u5bb6\u65cf \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5bb6\u65cf */ #include <iostream> using namespace std; bool b[200005] = {0}; int father[200005] = {0}, son[200005] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, cnt = 1; cin >> n; b[1] = true; while (n--){ char ch; cin >> ch; if (ch == 'B'){ int x, y; cin >> x >> y; father[y] = x; ++son[x]; b[y] = true; } else if (ch == 'D'){ int x; cin >> x; if (b[father[x]]){ cnt += son[x]; --son[father[x]]; } else cnt += son[x] - 1; b[x] = false; son[x] = 0; cout << cnt << '\\n'; } } return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int total,fa[300000],son[300000],n,x,y; char c; bool die[300000]; int main() { fa[1]=0; die[0]=true; total=1; scanf(\"%d\",&n); for (int i=0;i<n;++i){ c=0; while (c!='B'&&c!='D') c=getchar(); if (c=='B'){ scanf(\"%d%d\",&x,&y); fa[y]=x; son[x]++; } if (c=='D'){ scanf(\"%d\",&x); die[x]=true; if (die[fa[x]]) total+=son[x]-1; else { son[fa[x]]-=1; total += son[x]; } son[x]=0; printf(\"%d\\n\",total); } } return 0; }","title":"1045 \u4e8c\u54e5\u7684\u5bb6\u65cf"},{"location":"nr/1045/#1045","text":"\u8f6c\u5230\u9898\u76ee","title":"1045 \u4e8c\u54e5\u7684\u5bb6\u65cf"},{"location":"nr/1045/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5bb6\u65cf */ #include <iostream> using namespace std; bool b[200005] = {0}; int father[200005] = {0}, son[200005] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, cnt = 1; cin >> n; b[1] = true; while (n--){ char ch; cin >> ch; if (ch == 'B'){ int x, y; cin >> x >> y; father[y] = x; ++son[x]; b[y] = true; } else if (ch == 'D'){ int x; cin >> x; if (b[father[x]]){ cnt += son[x]; --son[father[x]]; } else cnt += son[x] - 1; b[x] = false; son[x] = 0; cout << cnt << '\\n'; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1045/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int total,fa[300000],son[300000],n,x,y; char c; bool die[300000]; int main() { fa[1]=0; die[0]=true; total=1; scanf(\"%d\",&n); for (int i=0;i<n;++i){ c=0; while (c!='B'&&c!='D') c=getchar(); if (c=='B'){ scanf(\"%d%d\",&x,&y); fa[y]=x; son[x]++; } if (c=='D'){ scanf(\"%d\",&x); die[x]=true; if (die[fa[x]]) total+=son[x]-1; else { son[fa[x]]-=1; total += son[x]; } son[x]=0; printf(\"%d\\n\",total); } } return 0; }","title":"WashWang's solution"},{"location":"nr/1046/","text":"1046 \u4e8c\u54e5\u7684\u540a\u706f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u540a\u706f */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, total = 0, red = 0; bool isRed = false; }; Node a[100005]; int pos[100005]; bool b[100005]; int n, p, q; int count1(int x){ int r = 0; if (a[x].l != 0) r += count1(pos[a[x].l]); if (a[x].r != 0) r += count1(pos[a[x].r]); a[x].total = r + 1; return a[x].total; } void dye(int t, int x){ int y = a[pos[a[t].l]].total; if (y == x - 1){ a[t].isRed = true; return; } else if (y < x - 1){ dye(pos[a[t].r], x - y - 1); } else{ dye(pos[a[t].l], x); } } int count2(int x){ int r = 0; if (a[x].l != 0) r += count2(pos[a[x].l]); if (a[x].r != 0) r += count2(pos[a[x].r]); if (a[x].isRed) ++r; a[x].red = r; return a[x].red; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> p >> q; for (int i = 1; i <= n; ++i){ int x, lx, rx; cin >> x >> lx >> rx; a[i].l = lx; a[i].r = rx; b[lx] = true; b[rx] = true; pos[x] = i; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } count1(pos[root]); while (p--){ int t, x; cin >> t >> x; dye(pos[t], x % a[pos[t]].total + 1); } count2(pos[root]); while (q--){ int x; cin >> x; cout << a[pos[x]].red << '\\n'; } return 0; }","title":"1046 \u4e8c\u54e5\u7684\u540a\u706f"},{"location":"nr/1046/#1046","text":"\u8f6c\u5230\u9898\u76ee","title":"1046 \u4e8c\u54e5\u7684\u540a\u706f"},{"location":"nr/1046/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u540a\u706f */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0, total = 0, red = 0; bool isRed = false; }; Node a[100005]; int pos[100005]; bool b[100005]; int n, p, q; int count1(int x){ int r = 0; if (a[x].l != 0) r += count1(pos[a[x].l]); if (a[x].r != 0) r += count1(pos[a[x].r]); a[x].total = r + 1; return a[x].total; } void dye(int t, int x){ int y = a[pos[a[t].l]].total; if (y == x - 1){ a[t].isRed = true; return; } else if (y < x - 1){ dye(pos[a[t].r], x - y - 1); } else{ dye(pos[a[t].l], x); } } int count2(int x){ int r = 0; if (a[x].l != 0) r += count2(pos[a[x].l]); if (a[x].r != 0) r += count2(pos[a[x].r]); if (a[x].isRed) ++r; a[x].red = r; return a[x].red; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> p >> q; for (int i = 1; i <= n; ++i){ int x, lx, rx; cin >> x >> lx >> rx; a[i].l = lx; a[i].r = rx; b[lx] = true; b[rx] = true; pos[x] = i; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } count1(pos[root]); while (p--){ int t, x; cin >> t >> x; dye(pos[t], x % a[pos[t]].total + 1); } count2(pos[root]); while (q--){ int x; cin >> x; cout << a[pos[x]].red << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1047/","text":"1047 The Clocks \u8f6c\u5230\u9898\u76ee FineArtz's solution /* The Clocks */ #include <iostream> using namespace std; int a[10], ans[10] = {0}, t[10] = {0}, l = 40; initializer_list<int> imp[10] = { {0}, {1, 2, 4, 5}, {1, 2, 3}, {2, 3, 5, 6}, {1, 4, 7}, {2, 4, 5, 6, 8}, {3, 6, 9}, {4, 5, 7, 8}, {7, 8, 9}, {5, 6, 8, 9}}; inline void rotate(int a[10], int x, initializer_list<int> il){ for (int i : il){ a[i] = (a[i] + 3 * x) % 12; } } void work(int t[10]){ int len = 0, b[10]; for (int i = 1; i <= 9; ++i) b[i] = a[i]; for (int i = 1; i <= 9; ++i){ if (t[i]) ++len; rotate(b, t[i], imp[i]); } for (int i = 1; i <= 9; ++i) if (b[i]) return; if (len < l){ l = len; for (int i = 1; i <= 9; ++i) ans[i] = t[i]; } } int main(){ for (int i = 1; i <= 9; ++i){ cin >> a[i]; a[i] %= 12; } // t[4] = t[5] = t[8] = t[9] = 1; // work(t); for (int i = 0; i < 262144; ++i){ work(t); ++t[9]; int j = 9; while (t[j] == 4){ t[j] = 0; ++t[--j]; } } for (int i = 1; i <= 9; ++i) for (int j = 1; j <= ans[i]; ++j) cout << i << ' '; cout << endl; return 0; }","title":"1047 The Clocks"},{"location":"nr/1047/#1047-the-clocks","text":"\u8f6c\u5230\u9898\u76ee","title":"1047 The Clocks"},{"location":"nr/1047/#fineartzs-solution","text":"/* The Clocks */ #include <iostream> using namespace std; int a[10], ans[10] = {0}, t[10] = {0}, l = 40; initializer_list<int> imp[10] = { {0}, {1, 2, 4, 5}, {1, 2, 3}, {2, 3, 5, 6}, {1, 4, 7}, {2, 4, 5, 6, 8}, {3, 6, 9}, {4, 5, 7, 8}, {7, 8, 9}, {5, 6, 8, 9}}; inline void rotate(int a[10], int x, initializer_list<int> il){ for (int i : il){ a[i] = (a[i] + 3 * x) % 12; } } void work(int t[10]){ int len = 0, b[10]; for (int i = 1; i <= 9; ++i) b[i] = a[i]; for (int i = 1; i <= 9; ++i){ if (t[i]) ++len; rotate(b, t[i], imp[i]); } for (int i = 1; i <= 9; ++i) if (b[i]) return; if (len < l){ l = len; for (int i = 1; i <= 9; ++i) ans[i] = t[i]; } } int main(){ for (int i = 1; i <= 9; ++i){ cin >> a[i]; a[i] %= 12; } // t[4] = t[5] = t[8] = t[9] = 1; // work(t); for (int i = 0; i < 262144; ++i){ work(t); ++t[9]; int j = 9; while (t[j] == 4){ t[j] = 0; ++t[--j]; } } for (int i = 1; i <= 9; ++i) for (int j = 1; j <= ans[i]; ++j) cout << i << ' '; cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1048/","text":"1048 \u4e8c\u53c9\u6811\u904d\u5386 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u53c9\u6811\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0; }; Node a[1025]; bool b[1025] = {0}; void hie(int root){ int q[1025] = {0}, front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << endl; if (a[now].l != 0){ q[rear++] = a[now].l; } if (a[now].r != 0){ q[rear++] = a[now].r; } } } int main(){ int n; cin >> n; n >>= 1; for (int i = 1; i <= n; ++i){ int x, y, z; cin >> x >> y >> z; a[x].l = y; a[x].r = z; b[y] = true; b[z] = true; } int root = 0; for (int i = 1; i <= n * 2 + 1; ++i){ if (!b[i]){ root = i; break; } } hie(root); return 0; }","title":"1048 \u4e8c\u53c9\u6811\u904d\u5386"},{"location":"nr/1048/#1048","text":"\u8f6c\u5230\u9898\u76ee","title":"1048 \u4e8c\u53c9\u6811\u904d\u5386"},{"location":"nr/1048/#fineartzs-solution","text":"/* \u4e8c\u53c9\u6811\u904d\u5386 */ #include <iostream> using namespace std; class Node{ public: int l = 0, r = 0; }; Node a[1025]; bool b[1025] = {0}; void hie(int root){ int q[1025] = {0}, front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front++]; cout << now << endl; if (a[now].l != 0){ q[rear++] = a[now].l; } if (a[now].r != 0){ q[rear++] = a[now].r; } } } int main(){ int n; cin >> n; n >>= 1; for (int i = 1; i <= n; ++i){ int x, y, z; cin >> x >> y >> z; a[x].l = y; a[x].r = z; b[y] = true; b[z] = true; } int root = 0; for (int i = 1; i <= n * 2 + 1; ++i){ if (!b[i]){ root = i; break; } } hie(root); return 0; }","title":"FineArtz's solution"},{"location":"nr/1049/","text":"1049 \u706b\u8f66\u8c03\u5ea6 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u706b\u8f66\u8c03\u5ea6 */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n, m; cin >> n >> m; int stack[1005], size = 0; int a[1005]; bool flag = true; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int i = 0, j = 1; while (i < n){ if (a[j] > i){ stack[++size] = i; if (size > m){ flag = false; break; } ++i; } else if (a[j] == i){ ++i; ++j; } else{ if (size == 0 || stack[size] != a[j]){ flag = false; break; } --size; ++j; } } if (flag){ cout << \"YES\" << endl; } else{ cout << \"NO\" << endl; } } } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int t,st[2000],top,n,m,p,x,s; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ scanf(\"%d%d\",&n,&m); s=0; flag=true; top=-1; for (int j=0;j<n;++j) { scanf(\"%d\",&x); while (s<n&&s!=x&&((top>=0&&st[top]!=x)||top==-1)) { if (top>=m-1) flag=false; st[++top]=s++; } if (s==x) s++; if (top>=0&&st[top]==x) top--; } if (top==-1&&s==n&&flag) printf(\"YES\\n\"); else printf(\"NO\\n\"); } return 0; }","title":"1049 \u706b\u8f66\u8c03\u5ea6"},{"location":"nr/1049/#1049","text":"\u8f6c\u5230\u9898\u76ee","title":"1049 \u706b\u8f66\u8c03\u5ea6"},{"location":"nr/1049/#fineartzs-solution","text":"/* \u706b\u8f66\u8c03\u5ea6 */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n, m; cin >> n >> m; int stack[1005], size = 0; int a[1005]; bool flag = true; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int i = 0, j = 1; while (i < n){ if (a[j] > i){ stack[++size] = i; if (size > m){ flag = false; break; } ++i; } else if (a[j] == i){ ++i; ++j; } else{ if (size == 0 || stack[size] != a[j]){ flag = false; break; } --size; ++j; } } if (flag){ cout << \"YES\" << endl; } else{ cout << \"NO\" << endl; } } }","title":"FineArtz's solution"},{"location":"nr/1049/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int t,st[2000],top,n,m,p,x,s; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ scanf(\"%d%d\",&n,&m); s=0; flag=true; top=-1; for (int j=0;j<n;++j) { scanf(\"%d\",&x); while (s<n&&s!=x&&((top>=0&&st[top]!=x)||top==-1)) { if (top>=m-1) flag=false; st[++top]=s++; } if (s==x) s++; if (top>=0&&st[top]==x) top--; } if (top==-1&&s==n&&flag) printf(\"YES\\n\"); else printf(\"NO\\n\"); } return 0; }","title":"WashWang's solution"},{"location":"nr/1050/","text":"1050 \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 */ #include <iostream> using namespace std; class Node{ public: int data = 0, dist = -1; Node *l = nullptr, *r = nullptr; }; Node* a[300005]; bool b[300005]; int n, m; template<class T> inline void swp(T &x, T &y){ T t = x; x = y; y = t; } Node *merge(Node *x, Node *y){ if (x == nullptr) return y; if (y == nullptr) return x; if (x->data > y->data) swp(x, y); x->r = merge(x->r, y); if (x->l == nullptr || x->l->dist < x->r->dist) swp(x->l, x->r); if (x->r == nullptr) x->dist = 0; else x->dist = x->r->dist + 1; return x; } void dispose(Node *x){ if (x == nullptr) return; if (x->l != nullptr) dispose(x->l); if (x->r != nullptr) dispose(x->r); delete x; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; t->dist = 0; a[i] = t; b[i] = true; } while (m--){ int imp, x, y; cin >> imp; switch (imp){ case 0: cin >> x >> y; ++x; ++y; a[x] = merge(a[x], a[y]); b[y] = false; break; case 1: cin >> x; ++x; if (!b[x] || a[x] == nullptr) cout << \"-1\" << '\\n'; else{ cout << a[x]->data << '\\n'; Node *t = a[x]; a[x] = merge(a[x]->l, a[x]->r); delete t; } break; case 2:{ cin >> x >> y; ++x; Node *t = new Node; t->data = y; t->dist = 0; a[x] = merge(a[x], t); break; } default: break; } } for (int i = 1; i <= n; ++i){ if (b[i]) dispose(a[i]); } return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; const int mxn=1000000; int n,m; int f[mxn],v[mxn],ch[mxn][2],dis[mxn],root[mxn],opt,x,y; int merge(int x,int y){ if (x==0||y==0) return x+y; if (v[x]>v[y]||(v[x]==v[y]&&x>y)) swap(x,y); ch[x][1]=merge(ch[x][1],y); f[ch[x][1]]=x; if (dis[ch[x][0]]<dis[ch[x][1]]) swap(ch[x][1],ch[x][0]); dis[x]=dis[ch[x][1]]+1; return x; } int main(){ scanf(\"%d%d\",&n,&m); for(int i=1;i<=n;i++) { scanf(\"%d\",&v[i]); root[i]=i; } v[0]=-1; for(int i=0;i<m;i++){ scanf(\"%d\",&opt); if (opt==0){ scanf(\"%d%d\",&x,&y); root[x+1]=merge(root[x+1],root[y+1]); if (!root[y+1]) root[y+1]=-1; } if (opt==1){ scanf(\"%d\",&x); printf(\"%d\\n\",v[root[x+1]]); if (v[root[x+1]]!=-1) { v[root[x + 1]] = -1; if (ch[root[x + 1]][0]||ch[root[x+1]][1]) root[x + 1] = merge(ch[root[x + 1]][0], ch[root[x + 1]][1]); else root[x+1]=0; } } if (opt==2){ scanf(\"%d%d\",&x,&y); n++; root[n]=n; v[n]=y; root[x+1]=merge(root[x+1],root[n]); } } }","title":"1050 \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217"},{"location":"nr/1050/#1050","text":"\u8f6c\u5230\u9898\u76ee","title":"1050 \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217"},{"location":"nr/1050/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u4f18\u5148\u961f\u5217 */ #include <iostream> using namespace std; class Node{ public: int data = 0, dist = -1; Node *l = nullptr, *r = nullptr; }; Node* a[300005]; bool b[300005]; int n, m; template<class T> inline void swp(T &x, T &y){ T t = x; x = y; y = t; } Node *merge(Node *x, Node *y){ if (x == nullptr) return y; if (y == nullptr) return x; if (x->data > y->data) swp(x, y); x->r = merge(x->r, y); if (x->l == nullptr || x->l->dist < x->r->dist) swp(x->l, x->r); if (x->r == nullptr) x->dist = 0; else x->dist = x->r->dist + 1; return x; } void dispose(Node *x){ if (x == nullptr) return; if (x->l != nullptr) dispose(x->l); if (x->r != nullptr) dispose(x->r); delete x; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; t->dist = 0; a[i] = t; b[i] = true; } while (m--){ int imp, x, y; cin >> imp; switch (imp){ case 0: cin >> x >> y; ++x; ++y; a[x] = merge(a[x], a[y]); b[y] = false; break; case 1: cin >> x; ++x; if (!b[x] || a[x] == nullptr) cout << \"-1\" << '\\n'; else{ cout << a[x]->data << '\\n'; Node *t = a[x]; a[x] = merge(a[x]->l, a[x]->r); delete t; } break; case 2:{ cin >> x >> y; ++x; Node *t = new Node; t->data = y; t->dist = 0; a[x] = merge(a[x], t); break; } default: break; } } for (int i = 1; i <= n; ++i){ if (b[i]) dispose(a[i]); } return 0; }","title":"FineArtz's solution"},{"location":"nr/1050/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; const int mxn=1000000; int n,m; int f[mxn],v[mxn],ch[mxn][2],dis[mxn],root[mxn],opt,x,y; int merge(int x,int y){ if (x==0||y==0) return x+y; if (v[x]>v[y]||(v[x]==v[y]&&x>y)) swap(x,y); ch[x][1]=merge(ch[x][1],y); f[ch[x][1]]=x; if (dis[ch[x][0]]<dis[ch[x][1]]) swap(ch[x][1],ch[x][0]); dis[x]=dis[ch[x][1]]+1; return x; } int main(){ scanf(\"%d%d\",&n,&m); for(int i=1;i<=n;i++) { scanf(\"%d\",&v[i]); root[i]=i; } v[0]=-1; for(int i=0;i<m;i++){ scanf(\"%d\",&opt); if (opt==0){ scanf(\"%d%d\",&x,&y); root[x+1]=merge(root[x+1],root[y+1]); if (!root[y+1]) root[y+1]=-1; } if (opt==1){ scanf(\"%d\",&x); printf(\"%d\\n\",v[root[x+1]]); if (v[root[x+1]]!=-1) { v[root[x + 1]] = -1; if (ch[root[x + 1]][0]||ch[root[x+1]][1]) root[x + 1] = merge(ch[root[x + 1]][0], ch[root[x + 1]][1]); else root[x+1]=0; } } if (opt==2){ scanf(\"%d%d\",&x,&y); n++; root[n]=n; v[n]=y; root[x+1]=merge(root[x+1],root[n]); } } }","title":"WashWang's solution"},{"location":"nr/1051/","text":"1051 \u9759\u6001\u67e5\u627e\u8868 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9759\u6001\u67e5\u627e\u8868 */ #include <iostream> using namespace std; class Node{ public: Node *pred = nullptr, *succ = nullptr; int data = 0; }; int main(){ Node *head = new Node, *p = head; int n, m, cnt = 0; cin >> n; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; p->succ = t; t->pred = p; p = t; } cin >> m; while (m--){ int x; cin >> x; p = head->succ; while (p){ ++cnt; if (p->data == x) break; p = p->succ; } if (p){ p->pred->succ = p->succ; if (p->succ) p->succ->pred = p->pred; p->pred = head; p->succ = head->succ; if (p->succ) p->succ->pred = p; head->succ = p; } } p = head; Node *q = head; while (p){ q = p->succ; delete p; p = q; } cout << cnt << endl; return 0; } WashWang's solution #include <iostream> using namespace std; int ans,n,x,m,nex[20000],v[20000],last; int main() { cin>>n; for (int i=1;i<=n;++i) { cin>>v[i]; nex[i-1]=i; } cin>>m; for (int i=0;i<m;++i) { cin>>x; last=0; for (int j=nex[0];j;j=nex[j]){ ans++; if (v[j]==x){ nex[last]=nex[j]; nex[j]=nex[0]; nex[0]=j; break; } last=j; } } cout<<ans; return 0; }","title":"1051 \u9759\u6001\u67e5\u627e\u8868"},{"location":"nr/1051/#1051","text":"\u8f6c\u5230\u9898\u76ee","title":"1051 \u9759\u6001\u67e5\u627e\u8868"},{"location":"nr/1051/#fineartzs-solution","text":"/* \u9759\u6001\u67e5\u627e\u8868 */ #include <iostream> using namespace std; class Node{ public: Node *pred = nullptr, *succ = nullptr; int data = 0; }; int main(){ Node *head = new Node, *p = head; int n, m, cnt = 0; cin >> n; for (int i = 1; i <= n; ++i){ Node *t = new Node; cin >> t->data; p->succ = t; t->pred = p; p = t; } cin >> m; while (m--){ int x; cin >> x; p = head->succ; while (p){ ++cnt; if (p->data == x) break; p = p->succ; } if (p){ p->pred->succ = p->succ; if (p->succ) p->succ->pred = p->pred; p->pred = head; p->succ = head->succ; if (p->succ) p->succ->pred = p; head->succ = p; } } p = head; Node *q = head; while (p){ q = p->succ; delete p; p = q; } cout << cnt << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1051/#washwangs-solution","text":"#include <iostream> using namespace std; int ans,n,x,m,nex[20000],v[20000],last; int main() { cin>>n; for (int i=1;i<=n;++i) { cin>>v[i]; nex[i-1]=i; } cin>>m; for (int i=0;i<m;++i) { cin>>x; last=0; for (int j=nex[0];j;j=nex[j]){ ans++; if (v[j]==x){ nex[last]=nex[j]; nex[j]=nex[0]; nex[0]=j; break; } last=j; } } cout<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/1052/","text":"1052 \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba */ #include <iostream> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); bool a[105][205]; int N, M, n[105], t; cin >> N; for (int i = 1; i <= N; ++i) cin >> n[i]; for (int i = 1; i <= N; ++i){ for (int j = 1; j <= n[i]; ++j){ cin >> t; a[i][t] = true; } } cin >> M; char ch; int x, y; while (M--){ cin >> ch >> x >> y; switch(ch){ case '+': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = true; } break; case '-': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = false; } break; case '*': for (int i = 0; i <= 200; ++i){ if (!a[y][i]) a[x][i] = false; } break; } } for (int i = 1; i <= N; ++i){ for (int j = 0; j <= 200; ++j) if (a[i][j]) cout << j << ' '; cout << '\\n'; } return 0; }","title":"1052 \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba"},{"location":"nr/1052/#1052","text":"\u8f6c\u5230\u9898\u76ee","title":"1052 \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba"},{"location":"nr/1052/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5b66\u96c6\u5408\u8bba */ #include <iostream> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); bool a[105][205]; int N, M, n[105], t; cin >> N; for (int i = 1; i <= N; ++i) cin >> n[i]; for (int i = 1; i <= N; ++i){ for (int j = 1; j <= n[i]; ++j){ cin >> t; a[i][t] = true; } } cin >> M; char ch; int x, y; while (M--){ cin >> ch >> x >> y; switch(ch){ case '+': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = true; } break; case '-': for (int i = 0; i <= 200; ++i){ if (a[y][i]) a[x][i] = false; } break; case '*': for (int i = 0; i <= 200; ++i){ if (!a[y][i]) a[x][i] = false; } break; } } for (int i = 1; i <= N; ++i){ for (int j = 0; j <= 200; ++j) if (a[i][j]) cout << j << ' '; cout << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1053/","text":"1053 \u4e8c\u54e5\u7684\u5185\u5b58 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5185\u5b58 */ #include <iostream> #include <algorithm> using namespace std; class Point{ public: Point(int xx = -1, int yy = -1, int d = 0) : x(xx), y(yy), data(d) {} bool operator <(const Point &p){ return (x < p.x || (x == p.x && y < p.y)); } int x = -1, y = -1, data = 0; }; Point a[10005]; int mapx[100005], mapy[100005]; int n, m; void qsort(int low, int high){ int l = low, h = high; Point key = a[low]; while (l < h){ while (l < h && key < a[h]) --h; a[l] = a[h]; while (l < h && a[l] < key) ++l; a[h] = a[l]; } a[l] = key; if (low < l) qsort(low, l - 1); if (high > h) qsort(h + 1, high); } int find(int x, int y){ Point t(x, y); auto it = lower_bound(a + 1, a + n + 1, t); if (it != a + n + 1 && it->x == x && it->y == y) return it->data; else return 0; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 0; i < 100005; ++i){ mapx[i] = i; mapy[i] = i; } for (int i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y >> a[i].data; qsort(1, n); cin >> m; while (m--){ int op, x, y, t; cin >> op >> x >> y; switch(op){ case 0: t = mapx[x]; mapx[x] = mapx[y]; mapx[y] = t; break; case 1: t = mapy[x]; mapy[x] = mapy[y]; mapy[y] = t; break; case 2: cout << find(mapx[x], mapy[y]) << '\\n'; break; } } return 0; }","title":"1053 \u4e8c\u54e5\u7684\u5185\u5b58"},{"location":"nr/1053/#1053","text":"\u8f6c\u5230\u9898\u76ee","title":"1053 \u4e8c\u54e5\u7684\u5185\u5b58"},{"location":"nr/1053/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5185\u5b58 */ #include <iostream> #include <algorithm> using namespace std; class Point{ public: Point(int xx = -1, int yy = -1, int d = 0) : x(xx), y(yy), data(d) {} bool operator <(const Point &p){ return (x < p.x || (x == p.x && y < p.y)); } int x = -1, y = -1, data = 0; }; Point a[10005]; int mapx[100005], mapy[100005]; int n, m; void qsort(int low, int high){ int l = low, h = high; Point key = a[low]; while (l < h){ while (l < h && key < a[h]) --h; a[l] = a[h]; while (l < h && a[l] < key) ++l; a[h] = a[l]; } a[l] = key; if (low < l) qsort(low, l - 1); if (high > h) qsort(h + 1, high); } int find(int x, int y){ Point t(x, y); auto it = lower_bound(a + 1, a + n + 1, t); if (it != a + n + 1 && it->x == x && it->y == y) return it->data; else return 0; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 0; i < 100005; ++i){ mapx[i] = i; mapy[i] = i; } for (int i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y >> a[i].data; qsort(1, n); cin >> m; while (m--){ int op, x, y, t; cin >> op >> x >> y; switch(op){ case 0: t = mapx[x]; mapx[x] = mapx[y]; mapx[y] = t; break; case 1: t = mapy[x]; mapy[x] = mapy[y]; mapy[y] = t; break; case 2: cout << find(mapx[x], mapy[y]) << '\\n'; break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1054/","text":"1054 \u90c1\u95f7\u7684\u4e8c\u54e5 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u90c1\u95f7\u7684\u4e8c\u54e5 */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = 1; num = 1; } bool whichChild() { return p->s[1] == this; } Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; int ans = 0; void rotate(Node *p){ Node *q = p->p->p; if (p->whichChild()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->whichChild() == p->p->whichChild()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } void del(int l, int r){ if (!find(l)){ insert(l); --ans; } Node *p = prev(); if (!find(r)){ insert(r); --ans; } Node *q = succ(); if (!p && !q){ ans += root->size; root = nullptr; return; } if (!p){ if (root->s[0]) ans += root->s[0]->size; root->s[0] = nullptr; root->update(); return; } if (!q){ splay(p, 0); if (root->s[1]) ans += root->s[1]->size; root->s[1] = nullptr; root->update(); return; } splay(p, q); if (p->s[1]) ans += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m, delta = 0; cin >> n >> m; while (n--){ char ch; int k; cin >> ch >> k; switch(ch){ case 'I': if (k >= m) insert(k - delta); break; case 'A': delta += k; break; case 'S': delta -= k; del(-1000000, m - delta - 1); break; case 'F': if (!root || root->size < k) cout << \"-1\\n\"; else{ findk(root->size + 1 - k); cout << root->key + delta << '\\n'; } break; } } dispose(root); cout << ans << '\\n'; return 0; }","title":"1054 \u90c1\u95f7\u7684\u4e8c\u54e5"},{"location":"nr/1054/#1054","text":"\u8f6c\u5230\u9898\u76ee","title":"1054 \u90c1\u95f7\u7684\u4e8c\u54e5"},{"location":"nr/1054/#fineartzs-solution","text":"/* \u90c1\u95f7\u7684\u4e8c\u54e5 */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = 1; num = 1; } bool whichChild() { return p->s[1] == this; } Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; int ans = 0; void rotate(Node *p){ Node *q = p->p->p; if (p->whichChild()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->whichChild() == p->p->whichChild()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } void del(int l, int r){ if (!find(l)){ insert(l); --ans; } Node *p = prev(); if (!find(r)){ insert(r); --ans; } Node *q = succ(); if (!p && !q){ ans += root->size; root = nullptr; return; } if (!p){ if (root->s[0]) ans += root->s[0]->size; root->s[0] = nullptr; root->update(); return; } if (!q){ splay(p, 0); if (root->s[1]) ans += root->s[1]->size; root->s[1] = nullptr; root->update(); return; } splay(p, q); if (p->s[1]) ans += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m, delta = 0; cin >> n >> m; while (n--){ char ch; int k; cin >> ch >> k; switch(ch){ case 'I': if (k >= m) insert(k - delta); break; case 'A': delta += k; break; case 'S': delta -= k; del(-1000000, m - delta - 1); break; case 'F': if (!root || root->size < k) cout << \"-1\\n\"; else{ findk(root->size + 1 - k); cout << root->key + delta << '\\n'; } break; } } dispose(root); cout << ans << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/1055/","text":"1055 \u4e8c\u54e5\u5207\u5de7\u514b\u529b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5207\u5de7\u514b\u529b */ #include <iostream> #include <cmath> using namespace std; int main(){ int T; cin >> T; while (T--){ int c, r; char ch; int a[305][305], sum[305][305]; int sumx[305][305], sumy[305][305]; cin >> r >> c; for (int i = 0; i <= r; ++i){ sum[i][0] = 0; sumx[i][0] = 0; sumy[i][0] = 0; } for (int j = 0; j <= c; ++j){ sum[0][j] = 0; sumx[0][j] = 0; sumy[0][j] = 0; } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ cin >> ch; a[i][j] = ch - '0'; sum[i][j] = a[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1]; } } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ sumx[i][j] = sumx[i - 1][j] + i * (sum[i][j] - sum[i - 1][j]); sumy[i][j] = sumy[i][j - 1] + j * (sum[i][j] - sum[i][j - 1]); } } bool flag = false; for (int k = min(r, c); k >= 3; --k){ for (int i = 1; i <= r - k + 1; ++i){ for (int j = 1; j <= c - k + 1; ++j){ int x = i + k - 1, y = j + k - 1; int s = sum[x][y] - sum[i - 1][y] - sum[x][j - 1] + sum[i - 1][j - 1] - a[i][j] - a[i][y] - a[x][j] - a[x][y]; double wx = sumx[x][y] - sumx[i - 1][y] - sumx[x][j - 1] + sumx[i - 1][j - 1] - i * a[i][j] - i * a[i][y] - x * a[x][j] - x * a[x][y]; double wy = sumy[x][y] - sumy[i - 1][y] - sumy[x][j - 1] + sumy[i - 1][j - 1] - j * a[i][j] - y * a[i][y] - j * a[x][j] - y * a[x][y]; if (s == 0){ flag = true; cout << k << '\\n'; break; } wx = wx / s; wy = wy / s; if (abs(2 * wx - i - x) < 1e-8 && abs(2 * wy - j - y) < 1e-8){ flag = true; cout << k << '\\n'; break; } } if (flag) break; } if (flag) break; } if (!flag) cout << \"IMPOSSIBLE\\n\"; } return 0; }","title":"1055 \u4e8c\u54e5\u5207\u5de7\u514b\u529b"},{"location":"nr/1055/#1055","text":"\u8f6c\u5230\u9898\u76ee","title":"1055 \u4e8c\u54e5\u5207\u5de7\u514b\u529b"},{"location":"nr/1055/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5207\u5de7\u514b\u529b */ #include <iostream> #include <cmath> using namespace std; int main(){ int T; cin >> T; while (T--){ int c, r; char ch; int a[305][305], sum[305][305]; int sumx[305][305], sumy[305][305]; cin >> r >> c; for (int i = 0; i <= r; ++i){ sum[i][0] = 0; sumx[i][0] = 0; sumy[i][0] = 0; } for (int j = 0; j <= c; ++j){ sum[0][j] = 0; sumx[0][j] = 0; sumy[0][j] = 0; } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ cin >> ch; a[i][j] = ch - '0'; sum[i][j] = a[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1]; } } for (int i = 1; i <= r; ++i){ for (int j = 1; j <= c; ++j){ sumx[i][j] = sumx[i - 1][j] + i * (sum[i][j] - sum[i - 1][j]); sumy[i][j] = sumy[i][j - 1] + j * (sum[i][j] - sum[i][j - 1]); } } bool flag = false; for (int k = min(r, c); k >= 3; --k){ for (int i = 1; i <= r - k + 1; ++i){ for (int j = 1; j <= c - k + 1; ++j){ int x = i + k - 1, y = j + k - 1; int s = sum[x][y] - sum[i - 1][y] - sum[x][j - 1] + sum[i - 1][j - 1] - a[i][j] - a[i][y] - a[x][j] - a[x][y]; double wx = sumx[x][y] - sumx[i - 1][y] - sumx[x][j - 1] + sumx[i - 1][j - 1] - i * a[i][j] - i * a[i][y] - x * a[x][j] - x * a[x][y]; double wy = sumy[x][y] - sumy[i - 1][y] - sumy[x][j - 1] + sumy[i - 1][j - 1] - j * a[i][j] - y * a[i][y] - j * a[x][j] - y * a[x][y]; if (s == 0){ flag = true; cout << k << '\\n'; break; } wx = wx / s; wy = wy / s; if (abs(2 * wx - i - x) < 1e-8 && abs(2 * wy - j - y) < 1e-8){ flag = true; cout << k << '\\n'; break; } } if (flag) break; } if (flag) break; } if (!flag) cout << \"IMPOSSIBLE\\n\"; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1056/","text":"1056 \u4e8c\u54e5\u5403\u7cd6 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5403\u7cd6 */ #include <iostream> using namespace std; class Node{ public: int size = 1, ind = 0; }; bool b[500005]; Node a[500005]; int p[500005], pos[500005]; int n, m, Size = 0; int getParent(int x){ if (p[x] != x) p[x] = getParent(p[x]); return p[x]; } void siftdown(int i){ int x = i, mx = a[i].size; if (i * 2 <= Size){ if (a[i * 2].size > mx){ x = i * 2; mx = a[i * 2].size; } } if (i * 2 + 1 <= Size){ if (a[i * 2 + 1].size > mx){ x = i * 2 + 1; mx = a[i * 2 + 1].size; } } if (x != i){ a[0] = a[x]; a[x] = a[i]; a[i] = a[0]; pos[a[i].ind] = i; pos[a[x].ind] = x; siftdown(x); } } void siftup(int i){ while (i >= 2){ if (a[i].size <= a[i / 2].size) break; a[0] = a[i]; a[i] = a[i / 2]; a[i / 2] = a[0]; pos[a[i].ind] = i; pos[a[i / 2].ind] = i / 2; i /= 2; } } void del(int i){ a[i] = a[Size--]; siftdown(i); } int findk(int k){ int tmp = Size; for (int i = 1; i <= k - 1; ++i){ a[0] = a[1]; a[1] = a[Size]; a[Size] = a[0]; pos[a[1].ind] = 1; pos[a[Size].ind] = Size; --Size; siftdown(1); } int ret = a[1].size; while (Size < tmp){ ++Size; siftup(Size); } return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ a[i].ind = i; p[i] = i; pos[i] = i; b[i] = true; } Size = n; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'C':{ cin >> x >> y; int px = getParent(x), py = getParent(y); if (!b[px] || !b[py] || px == py) break; p[px] = py; a[pos[py]].size += a[pos[px]].size; del(pos[px]); siftup(pos[py]); break; } case 'D':{ cin >> x; int px = getParent(x); if (!b[px]) break; del(pos[px]); b[px] = false; break; } case 'Q':{ cin >> x; if (Size < x) cout << \"0\\n\"; else cout << findk(x) << '\\n'; break; } default: break; } } return 0; }","title":"1056 \u4e8c\u54e5\u5403\u7cd6"},{"location":"nr/1056/#1056","text":"\u8f6c\u5230\u9898\u76ee","title":"1056 \u4e8c\u54e5\u5403\u7cd6"},{"location":"nr/1056/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5403\u7cd6 */ #include <iostream> using namespace std; class Node{ public: int size = 1, ind = 0; }; bool b[500005]; Node a[500005]; int p[500005], pos[500005]; int n, m, Size = 0; int getParent(int x){ if (p[x] != x) p[x] = getParent(p[x]); return p[x]; } void siftdown(int i){ int x = i, mx = a[i].size; if (i * 2 <= Size){ if (a[i * 2].size > mx){ x = i * 2; mx = a[i * 2].size; } } if (i * 2 + 1 <= Size){ if (a[i * 2 + 1].size > mx){ x = i * 2 + 1; mx = a[i * 2 + 1].size; } } if (x != i){ a[0] = a[x]; a[x] = a[i]; a[i] = a[0]; pos[a[i].ind] = i; pos[a[x].ind] = x; siftdown(x); } } void siftup(int i){ while (i >= 2){ if (a[i].size <= a[i / 2].size) break; a[0] = a[i]; a[i] = a[i / 2]; a[i / 2] = a[0]; pos[a[i].ind] = i; pos[a[i / 2].ind] = i / 2; i /= 2; } } void del(int i){ a[i] = a[Size--]; siftdown(i); } int findk(int k){ int tmp = Size; for (int i = 1; i <= k - 1; ++i){ a[0] = a[1]; a[1] = a[Size]; a[Size] = a[0]; pos[a[1].ind] = 1; pos[a[Size].ind] = Size; --Size; siftdown(1); } int ret = a[1].size; while (Size < tmp){ ++Size; siftup(Size); } return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ a[i].ind = i; p[i] = i; pos[i] = i; b[i] = true; } Size = n; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'C':{ cin >> x >> y; int px = getParent(x), py = getParent(y); if (!b[px] || !b[py] || px == py) break; p[px] = py; a[pos[py]].size += a[pos[px]].size; del(pos[px]); siftup(pos[py]); break; } case 'D':{ cin >> x; int px = getParent(x); if (!b[px]) break; del(pos[px]); b[px] = false; break; } case 'Q':{ cin >> x; if (Size < x) cout << \"0\\n\"; else cout << findk(x) << '\\n'; break; } default: break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1057/","text":"1057 \u65e0\u804a\u7684LSZ \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u65e0\u804a\u7684LSZ */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = num = 1; } bool isRight() { return p->s[1] == this;} Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; void rotate(Node *p){ Node *q = p->p->p; if (p->isRight()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->isRight() == p->p->isRight()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } int del(int l, int r){ int ret = 0; if (!find(l)){ insert(l); --ret; } Node *p = prev(); if (!find(r)){ insert(r); --ret; } Node *q = succ(); if (!p && !q){ ret += root->size; root = nullptr; return ret; } if (!p){ if (root->s[0]) ret += root->s[0]->size; root->s[0] = nullptr; root->update(); return ret; } if (!q){ splay(p, 0); if (root->s[1]) ret += root->s[1]->size; root->s[1] = nullptr; root->update(); return ret; } splay(p, q); if (p->s[1]) ret += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); return ret; } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m; cin >> m; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'L':{ cin >> x; if (!root || root->size < x) cout << \"0\\n\"; else{ findk(root->size - x + 1); cout << root->key << '\\n'; } break; } case 'S': cin >> x >> y; cout << del(x, y) << '\\n'; break; case 'Z': cin >> x; insert(x); break; default: break; } } dispose(root); return 0; }","title":"1057 \u65e0\u804a\u7684LSZ"},{"location":"nr/1057/#1057-lsz","text":"\u8f6c\u5230\u9898\u76ee","title":"1057 \u65e0\u804a\u7684LSZ"},{"location":"nr/1057/#fineartzs-solution","text":"/* \u65e0\u804a\u7684LSZ */ #include <iostream> using namespace std; class Node{ public: Node *p = nullptr, *s[2] = {nullptr, nullptr}; int key = 0, size = 1, num = 1; Node(int k) : key(k) { p = s[0] = s[1] = nullptr; size = num = 1; } bool isRight() { return p->s[1] == this;} Node *link(int w, Node *x){ s[w] = x; if (x) x->p = this; return this; } void update(){ size = num + (s[0] ? s[0]->size : 0) + (s[1] ? s[1]->size : 0); } }; Node *root = nullptr; void rotate(Node *p){ Node *q = p->p->p; if (p->isRight()) p->link(0, p->p->link(1, p->s[0])); else p->link(1, p->p->link(0, p->s[1])); p->p->update(); if (q) q->link(q->s[1] == p->p, p); else{ p->p = nullptr; root = p; } } void splay(Node *p, Node *t = nullptr){ while (p->p != t && p->p->p != t){ if (p->isRight() == p->p->isRight()){ rotate(p->p); rotate(p); } else{ rotate(p); rotate(p); } } if (p->p != t) rotate(p); p->update(); } Node *find(int x){ Node *p = root; while (p && p->key != x) p = p->s[p->key < x]; if (p) splay(p); return p; } void insert(int x){ if (!root){ root = new Node(x); return; } if (find(x)){ ++root->num; root->update(); return; } Node *p = root, *q; while (p){ q = p; p = p->s[p->key < x]; } p = new Node(x); q->link(q->key < x, p); splay(p); } Node *findk(int k){ if (root->size < k) return nullptr; Node *p = root; while (!(((p->s[0] ? p->s[0]->size : 0) < k) && ((p->s[0] ? p->s[0]->size : 0) + p->num >= k))){ if (!p->s[0]){ k -= p->num; p = p->s[1]; } else{ if (p->s[0]->size >= k) p = p->s[0]; else{ k -= (p->s[0]->size + p->num); p = p->s[1]; } } } if (p) splay(p); return p; } Node *prev(){ Node *p = root->s[0]; if (!p) return nullptr; while (p->s[1]) p = p->s[1]; splay(p); return p; } Node *succ(){ Node *p = root->s[1]; if (!p) return nullptr; while (p->s[0]) p = p->s[0]; splay(p); return p; } int del(int l, int r){ int ret = 0; if (!find(l)){ insert(l); --ret; } Node *p = prev(); if (!find(r)){ insert(r); --ret; } Node *q = succ(); if (!p && !q){ ret += root->size; root = nullptr; return ret; } if (!p){ if (root->s[0]) ret += root->s[0]->size; root->s[0] = nullptr; root->update(); return ret; } if (!q){ splay(p, 0); if (root->s[1]) ret += root->s[1]->size; root->s[1] = nullptr; root->update(); return ret; } splay(p, q); if (p->s[1]) ret += p->s[1]->size; p->s[1] = nullptr; p->update(); q->update(); return ret; } void dispose(Node *p){ if (!p) return; dispose(p->s[0]); dispose(p->s[1]); delete p; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m; cin >> m; while (m--){ char ch; int x, y; cin >> ch; switch(ch){ case 'L':{ cin >> x; if (!root || root->size < x) cout << \"0\\n\"; else{ findk(root->size - x + 1); cout << root->key << '\\n'; } break; } case 'S': cin >> x >> y; cout << del(x, y) << '\\n'; break; case 'Z': cin >> x; insert(x); break; default: break; } } dispose(root); return 0; }","title":"FineArtz's solution"},{"location":"nr/1058/","text":"1058 \u5c0fM\u7684\u673a\u5668\u4eba \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; int main(){ long long m, n; cin >> m >> n; cout << m + n << endl; return 0; }","title":"1058 \u5c0fM\u7684\u673a\u5668\u4eba"},{"location":"nr/1058/#1058-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1058 \u5c0fM\u7684\u673a\u5668\u4eba"},{"location":"nr/1058/#fineartzs-solution","text":"/* \u5c0fM\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; int main(){ long long m, n; cin >> m >> n; cout << m + n << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1059/","text":"1059 \u4e09\u5143\u7ec4 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e09\u5143\u7ec4 */ #include <iostream> #include <algorithm> using namespace std; const unsigned long long MOD = 100000000, MOD2 = 5000005; const unsigned long long SEED = 13131313131313LL; int h[5000005], cnt[5000005]; int Hash(int x){ unsigned long long t = 0; while (x){ t = t * SEED + x % 10; x /= 10; } return (t % MOD2); } int find(int x){ int hs = Hash(x); while (h[hs] != 0){ if (h[hs] == x) return cnt[hs]; hs = (hs + 1) % MOD2; } return 0; } int main(){ long long a[2005]; int n; bool flag = false; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; int hs = Hash(a[i]); while (h[hs] != 0){ if (h[hs] == a[i]){ ++cnt[hs]; flag = true; break; } hs = (hs + 1) % MOD2; } if (!flag){ h[hs] = a[i]; cnt[hs] = 1; } } sort(a + 1, a + n + 1); int ans = 0; long long k = 0; for (int i = 1; i <= n - 1; ++i){ for (int j = i + 1; j <= n; ++j){ if (i != j){ k = a[i] * a[j] % MOD; int c = find(k); if (c != 0){ ans += 2 * c; if (a[i] == k) ans -= 2; if (a[j] == k) ans -= 2; } } } } cout << ans << endl; return 0; }","title":"1059 \u4e09\u5143\u7ec4"},{"location":"nr/1059/#1059","text":"\u8f6c\u5230\u9898\u76ee","title":"1059 \u4e09\u5143\u7ec4"},{"location":"nr/1059/#fineartzs-solution","text":"/* \u4e09\u5143\u7ec4 */ #include <iostream> #include <algorithm> using namespace std; const unsigned long long MOD = 100000000, MOD2 = 5000005; const unsigned long long SEED = 13131313131313LL; int h[5000005], cnt[5000005]; int Hash(int x){ unsigned long long t = 0; while (x){ t = t * SEED + x % 10; x /= 10; } return (t % MOD2); } int find(int x){ int hs = Hash(x); while (h[hs] != 0){ if (h[hs] == x) return cnt[hs]; hs = (hs + 1) % MOD2; } return 0; } int main(){ long long a[2005]; int n; bool flag = false; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; int hs = Hash(a[i]); while (h[hs] != 0){ if (h[hs] == a[i]){ ++cnt[hs]; flag = true; break; } hs = (hs + 1) % MOD2; } if (!flag){ h[hs] = a[i]; cnt[hs] = 1; } } sort(a + 1, a + n + 1); int ans = 0; long long k = 0; for (int i = 1; i <= n - 1; ++i){ for (int j = i + 1; j <= n; ++j){ if (i != j){ k = a[i] * a[j] % MOD; int c = find(k); if (c != 0){ ans += 2 * c; if (a[i] == k) ans -= 2; if (a[j] == k) ans -= 2; } } } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1060/","text":"1060 \u5c0fX\u7684\u673a\u5668\u4eba \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fX\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; const int INF = 0x7fffff; int c[201][201]; int f1[201][201], f2[201][201]; int a[1005]; int minn(initializer_list<int> il){ int ret = INF; for (int i : il) if (ret > i) ret = i; return ret; } int main(){ int n, l; cin >> l >> n; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> c[i][j]; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k) f1[j][k] = f2[j][k] = INF; f1[2][3] = f1[3][2] = 0; a[0] = 1; for (int i = 0; i < n; ++i){ for (int j = 1; j <= l; ++j){ for (int k = 1; k <= l; ++k){ if (a[i] == j || a[i] == k || j == k) continue; f2[j][k] = minn({f1[j][k] + c[a[i]][a[i + 1]], f2[j][k], INF}); f2[a[i]][k] = minn({f1[j][k] + c[j][a[i + 1]], f2[a[i]][k], INF}); f2[a[i]][j] = minn({f1[j][k] + c[k][a[i + 1]], f2[a[i]][j], INF}); } } for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k){ f1[j][k] = f2[j][k]; f2[j][k] = INF; } } int ans = INF; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (ans > f1[i][j]) ans = f1[i][j]; cout << ans << endl; return 0; }","title":"1060 \u5c0fX\u7684\u673a\u5668\u4eba"},{"location":"nr/1060/#1060-x","text":"\u8f6c\u5230\u9898\u76ee","title":"1060 \u5c0fX\u7684\u673a\u5668\u4eba"},{"location":"nr/1060/#fineartzs-solution","text":"/* \u5c0fX\u7684\u673a\u5668\u4eba */ #include <iostream> using namespace std; const int INF = 0x7fffff; int c[201][201]; int f1[201][201], f2[201][201]; int a[1005]; int minn(initializer_list<int> il){ int ret = INF; for (int i : il) if (ret > i) ret = i; return ret; } int main(){ int n, l; cin >> l >> n; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) cin >> c[i][j]; for (int i = 1; i <= n; ++i) cin >> a[i]; for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k) f1[j][k] = f2[j][k] = INF; f1[2][3] = f1[3][2] = 0; a[0] = 1; for (int i = 0; i < n; ++i){ for (int j = 1; j <= l; ++j){ for (int k = 1; k <= l; ++k){ if (a[i] == j || a[i] == k || j == k) continue; f2[j][k] = minn({f1[j][k] + c[a[i]][a[i + 1]], f2[j][k], INF}); f2[a[i]][k] = minn({f1[j][k] + c[j][a[i + 1]], f2[a[i]][k], INF}); f2[a[i]][j] = minn({f1[j][k] + c[k][a[i + 1]], f2[a[i]][j], INF}); } } for (int j = 1; j <= l; ++j) for (int k = 1; k <= l; ++k){ f1[j][k] = f2[j][k]; f2[j][k] = INF; } } int ans = INF; for (int i = 1; i <= l; ++i) for (int j = 1; j <= l; ++j) if (ans > f1[i][j]) ans = f1[i][j]; cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1061/","text":"1061 \u5c0fM\u7684\u670d\u52a1\u5668 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u670d\u52a1\u5668 */ #include <iostream> using namespace std; const long long INF = 131313131313131313LL; long long f[1000005], c[1000005]; long long q[1000005], front = 1, rear = 1; inline double g(long long j, long long k){ return (2 * (f[j] - f[k]) + j * (j - 1) - k * (k - 1)) * 0.5 / (j - k); } int main(){ int n; cin >> n; c[0] = 0; for (int i = 1; i <= n; ++i) cin >> c[i]; f[n] = c[n]; q[front] = n; for (int i = n - 1; i >= 0; --i){ while (front < rear && g(q[front], q[front + 1]) > i) ++front; f[i] = f[q[front]] + (q[front] - i) * (q[front] - i - 1) / 2 + c[i]; while (front < rear && g(q[rear - 1], q[rear]) < g(q[rear], i)) --rear; q[++rear] = i; } cout << f[0] << endl; return 0; }","title":"1061 \u5c0fM\u7684\u670d\u52a1\u5668"},{"location":"nr/1061/#1061-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1061 \u5c0fM\u7684\u670d\u52a1\u5668"},{"location":"nr/1061/#fineartzs-solution","text":"/* \u5c0fM\u7684\u670d\u52a1\u5668 */ #include <iostream> using namespace std; const long long INF = 131313131313131313LL; long long f[1000005], c[1000005]; long long q[1000005], front = 1, rear = 1; inline double g(long long j, long long k){ return (2 * (f[j] - f[k]) + j * (j - 1) - k * (k - 1)) * 0.5 / (j - k); } int main(){ int n; cin >> n; c[0] = 0; for (int i = 1; i <= n; ++i) cin >> c[i]; f[n] = c[n]; q[front] = n; for (int i = n - 1; i >= 0; --i){ while (front < rear && g(q[front], q[front + 1]) > i) ++front; f[i] = f[q[front]] + (q[front] - i) * (q[front] - i - 1) / 2 + c[i]; while (front < rear && g(q[rear - 1], q[rear]) < g(q[rear], i)) --rear; q[++rear] = i; } cout << f[0] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1062/","text":"1062 \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 */ #include <iostream> using namespace std; int a[1000005], n; int ans1[1000005], ans2[1000005], t[1000005]; int len; int bisearch(int i){ int l = 1, r = len, mid; while (l < r){ mid = (l + r) / 2; if (t[mid] >= a[i]) r = mid; else l = mid + 1; } return l; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; ans1[i] = 1; ans2[i] = 1; } t[1] = a[1]; len = 1; for (int i = 2; i <= n; ++i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans1[i] = len; } len = 1; t[1] = a[n]; for (int i = n - 1; i >= 1; --i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans2[i] = len; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, ans1[i] + ans2[i] - 1); cout << n - ans << endl; return 0; }","title":"1062 \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62"},{"location":"nr/1062/#1062-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1062 \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62"},{"location":"nr/1062/#fineartzs-solution","text":"/* \u5c0fM\u7231\u673a\u5668\u4eba\u961f\u5f62 */ #include <iostream> using namespace std; int a[1000005], n; int ans1[1000005], ans2[1000005], t[1000005]; int len; int bisearch(int i){ int l = 1, r = len, mid; while (l < r){ mid = (l + r) / 2; if (t[mid] >= a[i]) r = mid; else l = mid + 1; } return l; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; ans1[i] = 1; ans2[i] = 1; } t[1] = a[1]; len = 1; for (int i = 2; i <= n; ++i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans1[i] = len; } len = 1; t[1] = a[n]; for (int i = n - 1; i >= 1; --i){ if (a[i] > t[len]){ t[++len] = a[i]; } else{ int p = bisearch(i); t[p] = a[i]; } ans2[i] = len; } int ans = 0; for (int i = 1; i <= n; ++i) ans = max(ans, ans1[i] + ans2[i] - 1); cout << n - ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1063/","text":"1063 \u5c0fM\u7231\u6ed1\u96ea \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7231\u6ed1\u96ea */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505], f[505][505] = {0}; int r, c; int search(int x, int y){ if (f[x][y] != 0) return f[x][y]; int t[4] = {0}; for (int i = 0; i < 4; ++i){ int nx = x + dx[i]; int ny = y + dy[i]; if (nx >= 1 && ny >= 1 && nx <= r && ny <= c) if (a[x][y] > a[nx][ny]) t[i] = 1 + search(nx, ny); } int ret = 1; for (int i = 0; i < 4; ++i) if (ret < t[i]) ret = t[i]; f[x][y] = ret; return ret; } int main(){ cin >> r >> c; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) cin >> a[i][j]; int ans = 0; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) ans = max(ans, search(i, j)); cout << ans << endl; return 0; }","title":"1063 \u5c0fM\u7231\u6ed1\u96ea"},{"location":"nr/1063/#1063-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1063 \u5c0fM\u7231\u6ed1\u96ea"},{"location":"nr/1063/#fineartzs-solution","text":"/* \u5c0fM\u7231\u6ed1\u96ea */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505], f[505][505] = {0}; int r, c; int search(int x, int y){ if (f[x][y] != 0) return f[x][y]; int t[4] = {0}; for (int i = 0; i < 4; ++i){ int nx = x + dx[i]; int ny = y + dy[i]; if (nx >= 1 && ny >= 1 && nx <= r && ny <= c) if (a[x][y] > a[nx][ny]) t[i] = 1 + search(nx, ny); } int ret = 1; for (int i = 0; i < 4; ++i) if (ret < t[i]) ret = t[i]; f[x][y] = ret; return ret; } int main(){ cin >> r >> c; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) cin >> a[i][j]; int ans = 0; for (int i = 1; i <= r; ++i) for (int j = 1; j <= c; ++j) ans = max(ans, search(i, j)); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1064/","text":"1064 \u5c0fM\u7231\u7092\u80a1 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7231\u7092\u80a1 */ #include <iostream> #include <cassert> using namespace std; class Bignum{ public: int len = 1; long long data[1005] = {0}; long long &operator [](int x){ return data[x]; } void clear(){ for (int i = 1; i <= len; ++i) data[i] = 0; len = 1; } Bignum &operator =(const Bignum &b){ clear(); len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; return *this; } }; Bignum operator +(const Bignum &b1, const Bignum &b2){ Bignum c; c.len = max(b1.len, b2.len); for (int i = 1; i <= c.len; ++i){ c.data[i] = c.data[i] + b1.data[i] + b2.data[i]; c.data[i + 1] += c.data[i] / 10; c.data[i] %= 10; } ++c.len; while (c.data[c.len] != 0){ c.data[c.len + 1] += c.data[c.len] / 10; c.data[c.len] %= 10; ++c.len; } if (c.data[c.len] == 0 && c.len != 1) --c.len; return c; } long long a[5005], len; int n; long long t[5005]; Bignum c, cnt[5005]; int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; t[i] = 1; cnt[i][1] = 1; } len = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j < i; ++j){ if (a[j] > a[i]){ if (t[i] < t[j] + 1){ t[i] = t[j] + 1; cnt[i] = cnt[j]; } else if (t[i] == t[j] + 1) cnt[i] = cnt[i] + cnt[j]; } } for (int j = 1; j < i; ++j){ if (a[i] == a[j] && t[i] == t[j]) cnt[j].clear(); } if (t[i] > len) len = t[i]; } for (int i = 1; i <= n; ++i){ if (t[i] == len) c = c + cnt[i]; } cout << len << ' '; for (int i = c.len; i >= 1; --i) cout << c[i]; cout << endl; return 0; }","title":"1064 \u5c0fM\u7231\u7092\u80a1"},{"location":"nr/1064/#1064-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1064 \u5c0fM\u7231\u7092\u80a1"},{"location":"nr/1064/#fineartzs-solution","text":"/* \u5c0fM\u7231\u7092\u80a1 */ #include <iostream> #include <cassert> using namespace std; class Bignum{ public: int len = 1; long long data[1005] = {0}; long long &operator [](int x){ return data[x]; } void clear(){ for (int i = 1; i <= len; ++i) data[i] = 0; len = 1; } Bignum &operator =(const Bignum &b){ clear(); len = b.len; for (int i = 1; i <= len; ++i) data[i] = b.data[i]; return *this; } }; Bignum operator +(const Bignum &b1, const Bignum &b2){ Bignum c; c.len = max(b1.len, b2.len); for (int i = 1; i <= c.len; ++i){ c.data[i] = c.data[i] + b1.data[i] + b2.data[i]; c.data[i + 1] += c.data[i] / 10; c.data[i] %= 10; } ++c.len; while (c.data[c.len] != 0){ c.data[c.len + 1] += c.data[c.len] / 10; c.data[c.len] %= 10; ++c.len; } if (c.data[c.len] == 0 && c.len != 1) --c.len; return c; } long long a[5005], len; int n; long long t[5005]; Bignum c, cnt[5005]; int main(){ cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; t[i] = 1; cnt[i][1] = 1; } len = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j < i; ++j){ if (a[j] > a[i]){ if (t[i] < t[j] + 1){ t[i] = t[j] + 1; cnt[i] = cnt[j]; } else if (t[i] == t[j] + 1) cnt[i] = cnt[i] + cnt[j]; } } for (int j = 1; j < i; ++j){ if (a[i] == a[j] && t[i] == t[j]) cnt[j].clear(); } if (t[i] > len) len = t[i]; } for (int i = 1; i <= n; ++i){ if (t[i] == len) c = c + cnt[i]; } cout << len << ' '; for (int i = c.len; i >= 1; --i) cout << c[i]; cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1065/","text":"1065 \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c1 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> #include <cstring> using namespace std; int f[1005][1005] = {0}; char s1[1005], s2[1005]; int main(){ cin >> s1 >> s2; int l1 = strlen(s1), l2 = strlen(s2); for (int i = 0; i <= l1; ++i){ for (int j = 0; j <= l2; ++j){ if (i == 0 || j == 0) f[i][j] = 0; else if (s1[i - 1] == s2[j - 1]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i][j - 1], f[i - 1][j]); } } cout << f[l1][l2] << endl; return 0; }","title":"1065 \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c1"},{"location":"nr/1065/#1065-m1","text":"\u8f6c\u5230\u9898\u76ee","title":"1065 \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c1"},{"location":"nr/1065/#fineartzs-solution","text":"/* \u5c0fM\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> #include <cstring> using namespace std; int f[1005][1005] = {0}; char s1[1005], s2[1005]; int main(){ cin >> s1 >> s2; int l1 = strlen(s1), l2 = strlen(s2); for (int i = 0; i <= l1; ++i){ for (int j = 0; j <= l2; ++j){ if (i == 0 || j == 0) f[i][j] = 0; else if (s1[i - 1] == s2[j - 1]) f[i][j] = f[i - 1][j - 1] + 1; else f[i][j] = max(f[i][j - 1], f[i - 1][j]); } } cout << f[l1][l2] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1066/","text":"1066 \u5c0fM\u5bb6\u7684\u725b\u4eec \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u5bb6\u7684\u725b\u4eec */ #include <iostream> #include <cstring> using namespace std; int f[2005][2005] = {0}; int main(){ int n, m; cin >> n >> m; char s[2005]; cin >> s; int add[26], del[26]; for (int i = 1; i <= n; ++i){ char ch; int x, y; cin >> ch >> x >> y; add[ch - 'a'] = x; del[ch - 'a'] = y; } for (int i = m - 2; i >= 0; --i){ for (int j = i; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ int t = 200000000; t = min(f[i + 1][j] + add[s[i] - 'a'], t); t = min(f[i + 1][j] + del[s[i] - 'a'], t); t = min(f[i][j - 1] + add[s[j] - 'a'], t); t = min(f[i][j - 1] + del[s[j] - 'a'], t); f[i][j] = t; } } } cout << f[0][m - 1] << endl; return 0; }","title":"1066 \u5c0fM\u5bb6\u7684\u725b\u4eec"},{"location":"nr/1066/#1066-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1066 \u5c0fM\u5bb6\u7684\u725b\u4eec"},{"location":"nr/1066/#fineartzs-solution","text":"/* \u5c0fM\u5bb6\u7684\u725b\u4eec */ #include <iostream> #include <cstring> using namespace std; int f[2005][2005] = {0}; int main(){ int n, m; cin >> n >> m; char s[2005]; cin >> s; int add[26], del[26]; for (int i = 1; i <= n; ++i){ char ch; int x, y; cin >> ch >> x >> y; add[ch - 'a'] = x; del[ch - 'a'] = y; } for (int i = m - 2; i >= 0; --i){ for (int j = i; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ int t = 200000000; t = min(f[i + 1][j] + add[s[i] - 'a'], t); t = min(f[i + 1][j] + del[s[i] - 'a'], t); t = min(f[i][j - 1] + add[s[j] - 'a'], t); t = min(f[i][j - 1] + del[s[j] - 'a'], t); f[i][j] = t; } } } cout << f[0][m - 1] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1067/","text":"1067 Dividing \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Dividing */ #include <iostream> using namespace std; bool work(int *a){ int v = 0; bool ret; for (int i = 1; i <= 6; ++i){ v += a[i] * i; } if (v % 2) return false; v /= 2; int *f[7]; for (int i = 0; i <= 6; ++i) f[i] = new int[v + 1]; f[0][0] = 0; for (int i = 1; i <= v; ++i) f[0][i] = -1; for (int i = 1; i <= 6; ++i){ for (int j = 0; j <= v; ++j){ if (f[i - 1][j] >= 0) f[i][j] = a[i]; else f[i][j] = -1; } for (int j = 0; j <= v - i; ++j){ if (f[i][j] > 0){ f[i][j + i] = max(f[i][j + i], f[i][j] - 1); } } } if (f[6][v] != -1) ret = true; else ret = false; for (int i = 0; i <= 6; ++i) delete [] f[i]; return ret; } int main(){ int n[7], t = 0; bool eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } while (!eof){ ++t; bool flag = work(n); cout << \"Collection #\" << t << \": \\n\"; if (flag) cout << \"Can be divided.\\n\\n\"; else cout << \"Can't be divided.\\n\\n\"; eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } } return 0; }","title":"1067 Dividing"},{"location":"nr/1067/#1067-dividing","text":"\u8f6c\u5230\u9898\u76ee","title":"1067 Dividing"},{"location":"nr/1067/#fineartzs-solution","text":"/* Dividing */ #include <iostream> using namespace std; bool work(int *a){ int v = 0; bool ret; for (int i = 1; i <= 6; ++i){ v += a[i] * i; } if (v % 2) return false; v /= 2; int *f[7]; for (int i = 0; i <= 6; ++i) f[i] = new int[v + 1]; f[0][0] = 0; for (int i = 1; i <= v; ++i) f[0][i] = -1; for (int i = 1; i <= 6; ++i){ for (int j = 0; j <= v; ++j){ if (f[i - 1][j] >= 0) f[i][j] = a[i]; else f[i][j] = -1; } for (int j = 0; j <= v - i; ++j){ if (f[i][j] > 0){ f[i][j + i] = max(f[i][j + i], f[i][j] - 1); } } } if (f[6][v] != -1) ret = true; else ret = false; for (int i = 0; i <= 6; ++i) delete [] f[i]; return ret; } int main(){ int n[7], t = 0; bool eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } while (!eof){ ++t; bool flag = work(n); cout << \"Collection #\" << t << \": \\n\"; if (flag) cout << \"Can be divided.\\n\\n\"; else cout << \"Can't be divided.\\n\\n\"; eof = true; for (int i = 1; i <= 6; ++i){ cin >> n[i]; if (n[i]) eof = false; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1068/","text":"1068 \u5c0fX\u7684\u90ae\u7968 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fX\u7684\u90ae\u7968 */ #include <iostream> using namespace std; int k, n, m = 0, ans = 0; int a[205] = {0}, f[2000005] = {0}; int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; f[a[i]] = 1; if (a[i] > m) m = a[i]; } for (int i = 1; i <= m * k; ++i) if (f[i] == 0) f[i] = 500; ans = m * k; for (int i = 1; i <= m * k; ++i){ for (int j = 1; j <= n; ++j){ f[i + a[j]] = min(f[i + a[j]], f[i] + 1); } if (f[i] > k){ ans = i - 1; break; } } cout << ans << endl; return 0; }","title":"1068 \u5c0fX\u7684\u90ae\u7968"},{"location":"nr/1068/#1068-x","text":"\u8f6c\u5230\u9898\u76ee","title":"1068 \u5c0fX\u7684\u90ae\u7968"},{"location":"nr/1068/#fineartzs-solution","text":"/* \u5c0fX\u7684\u90ae\u7968 */ #include <iostream> using namespace std; int k, n, m = 0, ans = 0; int a[205] = {0}, f[2000005] = {0}; int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; f[a[i]] = 1; if (a[i] > m) m = a[i]; } for (int i = 1; i <= m * k; ++i) if (f[i] == 0) f[i] = 500; ans = m * k; for (int i = 1; i <= m * k; ++i){ for (int j = 1; j <= n; ++j){ f[i + a[j]] = min(f[i + a[j]], f[i] + 1); } if (f[i] > k){ ans = i - 1; break; } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1069/","text":"1069 \u4e8c\u54e5\u7684\u786c\u5e01 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u786c\u5e01 */ #include <iostream> #include <cstring> using namespace std; int a[100005], c[1005], f[100005]; void work(int n, int m){ memset(a, 0, sizeof(a)); memset(c, 0, sizeof(c)); memset(f, -1, sizeof(f)); f[0] = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= n; ++i) cin >> c[i]; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= m; ++j){ if (f[j] >= 0) f[j] = c[i]; else if (j < a[i] || f[j - a[i]] < 0) f[j] = -1; else f[j] = f[j - a[i]] - 1; } } int ans = 0; for (int i = 1; i <= m; ++i) if (f[i] >= 0) ++ans; cout << ans << '\\n'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; while (n != 0 || m != 0){ work(n, m); cin >> n >> m; } return 0; }","title":"1069 \u4e8c\u54e5\u7684\u786c\u5e01"},{"location":"nr/1069/#1069","text":"\u8f6c\u5230\u9898\u76ee","title":"1069 \u4e8c\u54e5\u7684\u786c\u5e01"},{"location":"nr/1069/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u786c\u5e01 */ #include <iostream> #include <cstring> using namespace std; int a[100005], c[1005], f[100005]; void work(int n, int m){ memset(a, 0, sizeof(a)); memset(c, 0, sizeof(c)); memset(f, -1, sizeof(f)); f[0] = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= n; ++i) cin >> c[i]; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= m; ++j){ if (f[j] >= 0) f[j] = c[i]; else if (j < a[i] || f[j - a[i]] < 0) f[j] = -1; else f[j] = f[j - a[i]] - 1; } } int ans = 0; for (int i = 1; i <= m; ++i) if (f[i] >= 0) ++ans; cout << ans << '\\n'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; while (n != 0 || m != 0){ work(n, m); cin >> n >> m; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1070/","text":"1070 \u4e8c\u54e5\u7684\u9e45 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u9e45 */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int k, V, n; int v[305], w[305]; int f[6001][72]; int t1[72], t2[72]; int main(){ cin >> k >> V >> n; for (int i = 1; i <= n; ++i) cin >> v[i] >> w[i]; for (int i = 0; i <= V; ++i) for (int j = 0; j <= k; ++j) f[i][j] = -INF; f[0][1] = 0; for (int i = 1; i <= n; ++i){ for (int j = V; j >= v[i]; --j){ for (int l = 1; l <= k; ++l){ t1[l] = f[j - v[i]][l] + w[i]; t2[l] = f[j][l]; } int x = 1, y = 1; for (int z = 1; z <= k; ++z){ if (t1[x] > t2[y]) f[j][z] = t1[x++]; else f[j][z] = t2[y++]; } } } int ans = 0; for (int i = 1; i <= k; ++i){ ans += f[V][i]; } cout << ans << endl; return 0; }","title":"1070 \u4e8c\u54e5\u7684\u9e45"},{"location":"nr/1070/#1070","text":"\u8f6c\u5230\u9898\u76ee","title":"1070 \u4e8c\u54e5\u7684\u9e45"},{"location":"nr/1070/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u9e45 */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int k, V, n; int v[305], w[305]; int f[6001][72]; int t1[72], t2[72]; int main(){ cin >> k >> V >> n; for (int i = 1; i <= n; ++i) cin >> v[i] >> w[i]; for (int i = 0; i <= V; ++i) for (int j = 0; j <= k; ++j) f[i][j] = -INF; f[0][1] = 0; for (int i = 1; i <= n; ++i){ for (int j = V; j >= v[i]; --j){ for (int l = 1; l <= k; ++l){ t1[l] = f[j - v[i]][l] + w[i]; t2[l] = f[j][l]; } int x = 1, y = 1; for (int z = 1; z <= k; ++z){ if (t1[x] > t2[y]) f[j][z] = t1[x++]; else f[j][z] = t2[y++]; } } } int ans = 0; for (int i = 1; i <= k; ++i){ ans += f[V][i]; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1071/","text":"1071 \u5c0fM\u7684\u56de\u6587\u4e32 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u56de\u6587\u4e32 */ #include <iostream> #include <cstring> using namespace std; const long long INF = 100000000000000LL; int main(){ char s[51]; cin >> s; int n, m = strlen(s); cin >> n; long long a[256], e[256], c[256][256]; long long cost[256]; for (int i = 0; i < 256; ++i){ a[i] = INF; e[i] = INF; cost[i] = INF; for (int j = 0; j < 256; ++j){ if (i == j) c[i][j] = 0; else c[i][j] = INF; } } for (int i = 1; i <= n; ++i){ char t[10]; char x, y; int w; cin >> t; switch(t[0]){ case 'a': cin >> x >> w; a[x] = w; break; case 'e': cin >> x >> w; e[x] = w; break; case 'c': cin >> x >> y >> w; c[x][y] = w; break; } } for (int k = 0; k < 256; ++k){ for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ if (i != j && i != k && j != k) if (c[i][j] > c[i][k] + c[k][j]) c[i][j] = c[i][k] + c[k][j]; } } } for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ cost[i] = min(cost[i], min(a[i], e[i])); cost[i] = min(cost[i], c[i][j] + min(a[j], e[j])); cost[i] = min(cost[i], a[j] + c[j][i]); for (int k = 0; k < 256; ++k) cost[i] = min(cost[i], c[i][j] + a[k] + c[k][j]); } } long long f[51][51] = {0}; for (int i = m - 2; i >= 0; --i){ for (int j = i + 1; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ f[i][j] = INF; f[i][j] = min(f[i][j], f[i + 1][j] + cost[s[i]]); f[i][j] = min(f[i][j], f[i][j - 1] + cost[s[j]]); f[i][j] = min(f[i][j], f[i + 1][j - 1] + min(c[s[j]][s[i]], c[s[i]][s[j]])); for (int k = 0; k < 256; ++k) f[i][j] = min(f[i][j], f[i + 1][j - 1] + c[s[i]][k] + c[s[j]][k]); } } } if (f[0][m - 1] == INF) cout << \"-1\" << endl; else cout << f[0][m - 1] << endl; return 0; }","title":"1071 \u5c0fM\u7684\u56de\u6587\u4e32"},{"location":"nr/1071/#1071-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1071 \u5c0fM\u7684\u56de\u6587\u4e32"},{"location":"nr/1071/#fineartzs-solution","text":"/* \u5c0fM\u7684\u56de\u6587\u4e32 */ #include <iostream> #include <cstring> using namespace std; const long long INF = 100000000000000LL; int main(){ char s[51]; cin >> s; int n, m = strlen(s); cin >> n; long long a[256], e[256], c[256][256]; long long cost[256]; for (int i = 0; i < 256; ++i){ a[i] = INF; e[i] = INF; cost[i] = INF; for (int j = 0; j < 256; ++j){ if (i == j) c[i][j] = 0; else c[i][j] = INF; } } for (int i = 1; i <= n; ++i){ char t[10]; char x, y; int w; cin >> t; switch(t[0]){ case 'a': cin >> x >> w; a[x] = w; break; case 'e': cin >> x >> w; e[x] = w; break; case 'c': cin >> x >> y >> w; c[x][y] = w; break; } } for (int k = 0; k < 256; ++k){ for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ if (i != j && i != k && j != k) if (c[i][j] > c[i][k] + c[k][j]) c[i][j] = c[i][k] + c[k][j]; } } } for (int i = 0; i < 256; ++i){ for (int j = 0; j < 256; ++j){ cost[i] = min(cost[i], min(a[i], e[i])); cost[i] = min(cost[i], c[i][j] + min(a[j], e[j])); cost[i] = min(cost[i], a[j] + c[j][i]); for (int k = 0; k < 256; ++k) cost[i] = min(cost[i], c[i][j] + a[k] + c[k][j]); } } long long f[51][51] = {0}; for (int i = m - 2; i >= 0; --i){ for (int j = i + 1; j < m; ++j){ if (s[i] == s[j]) f[i][j] = f[i + 1][j - 1]; else{ f[i][j] = INF; f[i][j] = min(f[i][j], f[i + 1][j] + cost[s[i]]); f[i][j] = min(f[i][j], f[i][j - 1] + cost[s[j]]); f[i][j] = min(f[i][j], f[i + 1][j - 1] + min(c[s[j]][s[i]], c[s[i]][s[j]])); for (int k = 0; k < 256; ++k) f[i][j] = min(f[i][j], f[i + 1][j - 1] + c[s[i]][k] + c[s[j]][k]); } } } if (f[0][m - 1] == INF) cout << \"-1\" << endl; else cout << f[0][m - 1] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1072/","text":"1072 \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> using namespace std; int pos[1000005][5], a[1000005]; int n; inline int lowbit(int x){ return x & (-x); } void change(int x, int y){ while (x <= n){ a[x] = max(a[x], y); x += lowbit(x); } } int find(int x){ int ret = 0; while (x != 0){ ret = max(ret, a[x]); x -= lowbit(x); } return ret; } int main(){ cin >> n; n *= 5; for (int i = 1; i <= n; ++i){ int x, j = 0; cin >> x; while (pos[x][j]) ++j; pos[x][j] = i; } int ans = 0; for (int i = 1; i <= n; ++i){ int x; cin >> x; for (int j = 4; ~j; --j){ int t = find(pos[x][j] - 1) + 1; ans = max(t, ans); change(pos[x][j], t); } } cout << ans << endl; return 0; }","title":"1072 \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c"},{"location":"nr/1072/#1072-x","text":"\u8f6c\u5230\u9898\u76ee","title":"1072 \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c"},{"location":"nr/1072/#fineartzs-solution","text":"/* \u5c0fX\u7684\u751f\u7269\u5b9e\u9a8c */ #include <iostream> using namespace std; int pos[1000005][5], a[1000005]; int n; inline int lowbit(int x){ return x & (-x); } void change(int x, int y){ while (x <= n){ a[x] = max(a[x], y); x += lowbit(x); } } int find(int x){ int ret = 0; while (x != 0){ ret = max(ret, a[x]); x -= lowbit(x); } return ret; } int main(){ cin >> n; n *= 5; for (int i = 1; i <= n; ++i){ int x, j = 0; cin >> x; while (pos[x][j]) ++j; pos[x][j] = i; } int ans = 0; for (int i = 1; i <= n; ++i){ int x; cin >> x; for (int j = 4; ~j; --j){ int t = find(pos[x][j] - 1) + 1; ans = max(t, ans); change(pos[x][j], t); } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1073/","text":"1073 \u80fd\u91cf\u9879\u94fe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u80fd\u91cf\u9879\u94fe */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int main(){ int n; cin >> n; int a[205], m[205][205]; for (int i = 1; i <= n; ++i){ cin >> a[i]; a[n + i] = a[i]; } int ans = 0; for (int t = 0; t <= n - 1; ++t){ memset(m, 0, sizeof(0)); for (int l = 2; l <= n; ++l){ for (int i = t + 1; i <= t + n - l + 1; ++i){ int j = i + l - 1; m[i][j] = 0; for (int k = i; k <= j - 1; ++k){ int tmp = m[i][k] + m[k + 1][j] + a[i] * a[k + 1] * a[j + 1]; if (tmp > m[i][j]) m[i][j] = tmp; } } } if (m[t + 1][t + n] > ans) ans = m[t + 1][t + n]; } cout << ans << endl; return 0; }","title":"1073 \u80fd\u91cf\u9879\u94fe"},{"location":"nr/1073/#1073","text":"\u8f6c\u5230\u9898\u76ee","title":"1073 \u80fd\u91cf\u9879\u94fe"},{"location":"nr/1073/#fineartzs-solution","text":"/* \u80fd\u91cf\u9879\u94fe */ #include <iostream> #include <cstring> using namespace std; const int INF = 2147483647; int main(){ int n; cin >> n; int a[205], m[205][205]; for (int i = 1; i <= n; ++i){ cin >> a[i]; a[n + i] = a[i]; } int ans = 0; for (int t = 0; t <= n - 1; ++t){ memset(m, 0, sizeof(0)); for (int l = 2; l <= n; ++l){ for (int i = t + 1; i <= t + n - l + 1; ++i){ int j = i + l - 1; m[i][j] = 0; for (int k = i; k <= j - 1; ++k){ int tmp = m[i][k] + m[k + 1][j] + a[i] * a[k + 1] * a[j + 1]; if (tmp > m[i][j]) m[i][j] = tmp; } } } if (m[t + 1][t + n] > ans) ans = m[t + 1][t + n]; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1074/","text":"1074 LSZ\u7684\u96ea\u5730\u811a\u5370 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* LSZ\u7684\u96ea\u5730\u811a\u5370 */ #include <iostream> #include <cstring> using namespace std; int a[1235][1235], s[1235][1235], f[1235][1235]; int main(){ int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i][j] = (ch == 'X' ? 1 : 0); s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } memset(f, 0, sizeof(f)); for (int i = 1; i <= n; ++i){ for (int j = 2; j <= m; ++j){ if (a[i][j]) continue; for (int t = f[i - 1][j] + 1; t >= 1; --t){ int x = i - t + 1, y = j - 2 * t + 1; if (x <= 0 || y <= 0) continue; int p = s[i][j] - s[x - 1][j] - s[i][y - 1] + s[x - 1][y - 1]; if (p == 0){ f[i][j] = t; break; } } } } int ans = 0; for (int i = 1; i <= n; ++i) for (int j = 2; j <= m; ++j) if (f[i][j] > ans) ans = f[i][j]; cout << ans * ans * 2 << endl; return 0; } WashWang's solution #include <iostream> using namespace std; char map[1500][1500]; int m,n,d,ans,h[1500],l[1500],r[1500],curl,curr; int main(){ ios::sync_with_stdio(false); cin>>m>>n; for (int i=0;i<m;++i) for (int j=0;j<n;++j) cin>>map[i][j]; for (int i=0;i<n;++i) r[i]=n-1; for (int i=0;i<m;++i){ for (int j=0;j<n;++j) if (map[i][j]=='-') h[j]++; else h[j]=0; curl=0; for (int j=0;j<n;++j) if (map[i][j]=='-') l[j]=max(curl,l[j]); else {l[j]=0; curl=j+1;} curr=n-1; for (int j=n-1;j>=0;--j) { if (map[i][j] == '-') r[j] = min(curr, r[j]); else {r[j] = n-1; curr=j-1;} d=min((r[j]-l[j]+1)/2,h[j]); if (2*d*d>ans) ans=2*d*d; } } cout<<ans; }","title":"1074 LSZ\u7684\u96ea\u5730\u811a\u5370"},{"location":"nr/1074/#1074-lsz","text":"\u8f6c\u5230\u9898\u76ee","title":"1074 LSZ\u7684\u96ea\u5730\u811a\u5370"},{"location":"nr/1074/#fineartzs-solution","text":"/* LSZ\u7684\u96ea\u5730\u811a\u5370 */ #include <iostream> #include <cstring> using namespace std; int a[1235][1235], s[1235][1235], f[1235][1235]; int main(){ int n, m; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i][j] = (ch == 'X' ? 1 : 0); s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + a[i][j]; } } memset(f, 0, sizeof(f)); for (int i = 1; i <= n; ++i){ for (int j = 2; j <= m; ++j){ if (a[i][j]) continue; for (int t = f[i - 1][j] + 1; t >= 1; --t){ int x = i - t + 1, y = j - 2 * t + 1; if (x <= 0 || y <= 0) continue; int p = s[i][j] - s[x - 1][j] - s[i][y - 1] + s[x - 1][y - 1]; if (p == 0){ f[i][j] = t; break; } } } } int ans = 0; for (int i = 1; i <= n; ++i) for (int j = 2; j <= m; ++j) if (f[i][j] > ans) ans = f[i][j]; cout << ans * ans * 2 << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1074/#washwangs-solution","text":"#include <iostream> using namespace std; char map[1500][1500]; int m,n,d,ans,h[1500],l[1500],r[1500],curl,curr; int main(){ ios::sync_with_stdio(false); cin>>m>>n; for (int i=0;i<m;++i) for (int j=0;j<n;++j) cin>>map[i][j]; for (int i=0;i<n;++i) r[i]=n-1; for (int i=0;i<m;++i){ for (int j=0;j<n;++j) if (map[i][j]=='-') h[j]++; else h[j]=0; curl=0; for (int j=0;j<n;++j) if (map[i][j]=='-') l[j]=max(curl,l[j]); else {l[j]=0; curl=j+1;} curr=n-1; for (int j=n-1;j>=0;--j) { if (map[i][j] == '-') r[j] = min(curr, r[j]); else {r[j] = n-1; curr=j-1;} d=min((r[j]-l[j]+1)/2,h[j]); if (2*d*d>ans) ans=2*d*d; } } cout<<ans; }","title":"WashWang's solution"},{"location":"nr/1075/","text":"1075 \u62ec\u53f7\u5339\u914d 11.07 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { unsigned short ans[3335] = {1,1,2,4,9,21,51,127,323,835,2188,5798,15511,3233,17129,1756,4223,2057,12644,17742,13185,9674,16560,14982,14280,15456,9603,3212,14660,18549,2234,2214,12614,4301,15589,17775,10176,12374,6701,13423,3195,16695,13109,33,12490,11545,12863,10973,13555,5069,19213,9441,2024,10011,10412,12158,2060,3304,16174,6172,14014,16503,2036,12600,9402,17905,12310,15883,19283,16513,12181,9760,6455,9879,3430,16409,16099,763,4556,18296,3898,4284,1769,6337,4109,3803,6662,4606,10364,12751,1667,8546,1333,13840,13630,12355,6264,9678,622,15638,3108,10635,510,4426,17861,2490,16795,13477,4710,18897,13299,2348,308,2601,6534,17534,15451,18533,7488,6482,2126,15169,9578,6210,1720,17030,10050,12314,15493,16633,18653,11212,6733,7174,18474,9553,5562,18216,11838,3812,7511,14048,11667,6861,11376,18655,7379,18151,14399,9025,10694,16311,2725,2827,8421,15411,7671,9210,12963,1610,5259,18241,5738,5793,17571,17683,5482,11695,1078,3761,1769,13479,11309,8456,5483,1789,3021,7171,8337,15832,750,13400,4249,15322,15232,17442,10787,9787,12058,1795,18965,13935,3481,15704,15552,6720,17176,7103,6276,1473,11822,16984,10192,11785,18019,4045,8788,6231,1137,19130,4844,9114,10061,2864,8377,29,1292,13228,4832,7609,13505,3649,3,10807,7815,1690,8971,18951,13195,2372,11424,19205,3948,4276,17574,6546,514,6119,4275,1558,3560,493,1008,8664,3733,11608,18029,8389,14374,6228,6738,16906,12250,12714,13949,5351,7563,8251,232,18718,16546,3507,2751,6113,11900,8402,589,1127,17714,12366,799,9222,12613,4165,14663,15258,6451,14324,15311,3392,9689,9224,12926,16120,18073,555,2887,16341,6875,1707,807,9441,13304,1250,5349,319,17427,704,11662,16578,3847,17340,16921,3740,6807,18308,4710,15981,8008,12343,5861,16891,140,17014,9973,10133,13026,3101,3689,12050,8158,5505,14297,15784,9089,9057,14685,17616,10471,14730,15401,7858,10985,3867,15200,11465,16459,3665,3218,19287,3785,16780,2084,18639,3987,13146,9917,9185,15141,14416,6685,7203,14929,15764,11450,1415,12781,2353,13115,8955,8229,11290,892,12683,11621,12501,10597,17664,4381,1098,5418,2262,14127,17579,15051,18509,479,13773,9054,16325,3538,1869,15310,5784,16994,951,11045,13672,9194,4275,8660,11122,15120,15254,18968,3574,16653,18281,4945,10859,640,5209,9753,15644,7494,16989,6640,10263,15228,13995,767,6616,12811,1609,6008,4268,14764,5237,17051,17671,11363,16695,7760,17966,203,5694,11096,5064,776,7363,10419,6908,8920,290,9358,5824,3003,17007,16877,8816,18821,8451,2243,12217,16668,18203,9137,14812,1810,4610,15779,17966,8907,13607,13036,5849,9676,8968,4254,14401,19204,12340,14619,11633,2650,18177,4421,3241,7402,16550,1573,18929,18240,2627,14239,17890,953,5148,16362,14865,16871,16216,13203,5347,939,16348,8619,18327,17021,13148,16593,12820,1781,8557,13812,6610,4370,15699,18356,18464,2895,10222,4086,14018,18930,16054,3665,14954,12253,11243,11239,18245,10724,8979,16114,11876,18239,11995,1712,18335,9170,17731,15234,772,8012,3192,8771,14025,14950,16585,18791,11594,1433,8764,18333,10844,1376,12285,19278,3711,3202,15645,13118,382,14872,2327,10728,8090,12069,17875,9774,11017,10271,9749,11143,14550,16509,2076,635,11177,15672,16686,12085,7079,6057,5021,906,7700,17860,7158,19055,7633,7666,15246,3832,10662,11534,6426,10104,17276,13481,17770,9155,6963,2481,1071,11708,7678,15128,4011,15760,5559,8124,783,12631,15218,7287,15142,3997,13929,7466,6445,5650,3394,1852,15321,5461,14797,18296,14022,12770,15417,5666,15150,14430,18462,6458,402,12860,19119,1663,8599,12100,7847,11238,19254,4354,9805,9310,3376,14927,3914,11676,2582,138,2137,14266,15998,6603,15417,3218,15265,3414,5174,4982,13160,5572,16810,10926,3245,14976,2272,11893,16431,7634,5693,12598,14316,16182,1110,16254,13479,10763,12246,5198,12655,13357,3430,1883,11873,16392,16090,13827,11054,8565,8255,4136,4171,18321,3445,9806,14316,7574,14370,5270,9274,17753,19037,13479,5134,9702,14895,14180,2252,15570,17862,15792,9822,14221,13750,18865,8850,17950,2715,17075,583,2774,3630,13248,881,10296,2120,8714,17705,12981,18717,16889,4018,15450,10930,1568,16082,18174,15368,5213,1548,6495,670,17966,8024,4670,19286,13318,382,1532,12239,7900,15980,11159,13366,15825,1358,10536,6952,8773,2394,2479,11689,17305,18581,17341,13545,6051,17733,4305,8395,12153,14861,17218,4133,4153,9459,7291,5958,2108,4573,10376,92,13644,18723,16768,8947,14928,6278,12223,11265,15252,13541,1122,12260,4576,7985,19152,7781,14645,10232,18953,14253,1441,14460,5317,17540,1631,4038,8983,12419,13037,12317,12501,1913,6382,3339,2190,18931,10261,1512,10588,9194,17689,13005,18648,18124,9214,12721,15398,5473,15871,13612,11414,14386,15218,16557,5015,12899,5738,6322,10192,3902,8583,7059,13581,4607,12997,7219,14615,16790,15781,11899,10407,2827,4295,14072,3406,5947,16237,9587,11369,3207,2741,13812,13682,6585,12938,5763,1097,10928,19226,12320,2042,13537,16719,8857,17135,17357,12956,17985,1062,11690,13603,16792,4937,4611,4577,5939,9810,16677,10461,2172,12912,5787,13723,4307,10852,1700,7041,15420,18128,10631,10042,2641,8575,18728,10116,14409,7037,1231,5358,13885,8938,924,4390,14029,6144,6933,8631,10406,522,2728,51,3958,14341,18928,8223,7963,14023,14977,4220,9295,15339,5926,5805,12917,15327,13601,5499,9114,1635,1328,3992,16752,17720,7839,15430,6175,11271,12051,10236,2212,12030,10433,11137,2494,7023,12291,15798,10338,14382,10721,1456,3308,13636,6702,2086,13618,1694,16821,14781,10768,3642,1878,4811,2296,17191,19134,12837,13618,14043,18695,8733,8431,897,88,12826,14889,5779,16184,15559,6942,17009,12998,9667,7561,7881,181,18843,3968,420,3222,4883,18531,18690,13562,13275,4379,18917,10356,15471,1359,1044,12744,3146,10051,4625,4615,6550,18355,4835,3402,5987,13541,16761,18911,6128,2210,17538,12427,14349,7280,18119,13763,16528,4273,18899,12939,5506,7959,578,14439,7310,16754,789,3187,2117,2740,5489,16534,13571,15965,5557,62,1206,9626,6415,17208,9917,18356,6157,12671,15710,13158,1354,1924,18807,177,10884,2783,1504,339,7598,11659,14228,1215,4157,9871,13682,9462,10166,14323,18847,7611,285,1609,6007,2932,12759,6996,238,15341,18216,8358,4938,9952,11823,13753,17519,14574,3695,5414,18273,18850,3076,2428,16522,7266,11393,14706,4447,13452,8220,11067,12631,17724,12612,961,18659,7242,12892,16037,1901,18353,17350,2007,2087,17080,17581,961,18543,18489,19237,14316,14778,11525,11341,5202,6389,16303,12974,1677,4369,11901,11540,16240,3650,18640,7545,15384,14175,11492,10359,6646,2406,7670,12666,7590,5463,18528,7,1531,4858,9522,9429,5258,4546,18296,16721,3667,8255,5479,17209,6281,10887,16858,4715,19139,15490,14578,17434,6607,19290,3035,6194,7879,1704,14217,10109,16868,16018,3302,3298,3198,15375,6818,8652,11347,14429,8028,19003,1968,15885,4365,11240,7622,1820,15671,487,75,8986,16532,6353,1479,1059,10440,2077,15305,394,790,9979,18418,16965,7450,18688,18047,14278,2417,7256,1776,13187,702,16012,1601,8834,1369,6985,16490,8708,488,13518,1954,11782,2948,7466,16880,15740,17023,4234,14310,2561,1769,17362,2494,3608,3631,131,5966,19048,1593,5116,15559,6570,4980,10464,517,17897,14368,7596,18145,14226,5826,2929,5364,7445,72,9248,5217,1,18815,8089,3434,19261,6781,16021,15168,11545,9376,19174,2265,13931,10418,13847,14545,10489,1950,18378,2881,13979,4065,11208,16693,3469,3684,7061,9727,15835,8403,7887,17275,17046,12744,7381,12106,7007,15526,1383,4908,333,4590,1888,7115,8181,6590,8156,15453,2800,12100,9439,18802,1892,16407,4356,10998,14482,19003,14413,5789,11650,11439,11956,4622,11643,4873,5027,1317,2110,11020,16109,11480,17188,4700,7429,239,12532,9181,17467,15595,2880,15079,3193,10481,18058,13532,429,5286,9806,6597,9695,17852,15978,9944,18789,5897,938,12035,7989,7615,3182,15075,7516,10613,4719,610,13952,15403,13749,16361,9993,13308,7688,18218,752,1433,8396,12983,5845,18657,15918,2613,9722,8486,14342,9113,9185,14455,14145,17364,1061,5799,9543,6101,4774,7550,10322,13536,11670,7156,17082,11639,5123,11914,9284,17541,7272,4957,2203,5696,10001,15239,14297,3509,4141,7192,5958,10091,6267,14896,6983,17103,13067,17676,2912,17624,12659,3152,15728,2217,4351,542,16028,6377,7687,5424,16088,15878,5757,4046,9902,15183,5475,888,14691,5433,10253,10648,7487,13050,7566,3370,1108,3003,11181,6480,14697,19265,19051,13964,16908,16027,17126,5390,17059,1292,2294,4206,2020,3726,14669,5625,8954,12141,7103,1552,807,1040,13065,1728,16890,14128,19258,4194,18549,2627,18896,10805,10764,14441,326,5711,15801,8831,8362,13225,4492,4036,6216,5164,17471,15186,4333,4395,6058,5668,7481,18829,19250,11021,18761,17796,2204,7928,11519,14013,4356,3516,3046,2147,8515,2548,11828,12289,16560,7693,18024,8660,910,3354,13799,10150,12340,7603,6130,5604,2590,827,13345,18684,18225,17512,14562,14855,1346,689,17955,15058,11227,17349,6830,14868,16982,5591,8459,17445,12859,3243,12255,10789,201,14662,2805,2232,1192,17579,11989,16983,12346,1809,14729,16280,15977,15996,5053,18256,5478,17400,7962,1169,3675,2926,11758,13598,9646,1821,14785,4753,9524,18245,7978,4331,15259,12714,10454,2804,17099,4478,12558,3940,16681,5626,2748,15188,10476,16380,7106,9341,9987,16017,5416,3280,10485,15930,499,16824,11324,8681,8030,17026,12342,7967,18389,15210,11344,17162,18945,4951,2909,5658,17079,19141,12681,18689,6069,18304,595,15801,14547,412,10649,19067,3395,11596,11615,6893,4462,3776,15539,18578,8374,7707,6403,7498,1845,11092,5566,16843,2477,5344,15582,7634,10956,5677,1679,12039,14447,2991,2544,10595,1715,7671,15219,16551,341,12769,6960,849,8224,17922,17717,1080,16807,2296,9248,1660,10342,14795,16931,19074,8848,3284,8916,9395,18555,9352,7971,12960,7802,7038,1768,4359,9903,5173,17713,1117,7296,18668,16362,17621,5219,9748,3708,4771,7453,1009,2009,6857,1358,8278,17880,18375,3511,10695,2031,7220,3694,5315,8961,10329,9186,18088,6152,18461,9957,16328,10871,8501,14196,3799,3114,8850,14114,11670,7532,5072,15639,16207,4682,18731,6420,9606,12205,6930,8454,5162,5379,6382,5196,7254,2603,12115,1569,15928,18372,6776,14320,1457,8274,16385,10411,8791,3046,3708,6318,2208,10662,16098,8059,1808,8524,11637,19152,3699,2805,4269,8186,8648,9458,1801,7305,1883,19179,8314,14576,219,39,6932,863,19246,11452,14955,10989,7407,13932,4858,7656,13050,13641,179,11135,14874,1635,1818,1414,16538,17326,12235,12884,11807,11880,11659,11462,18157,6794,17055,10129,8397,6516,6101,1842,7129,1964,88,1233,4730,8210,1732,6887,12297,18707,15622,2368,5968,11361,5574,12057,9437,2440,2114,8101,4311,4187,11198,18077,10932,12645,949,1127,16758,7789,10006,17112,10043,12151,3279,14367,6649,950,3964,9265,9154,1923,5838,2653,16662,18261,7750,2968,15823,5337,8349,16886,7358,6950,18505,14758,18972,11660,14667,2515,18027,14963,8188,10704,9812,4422,13682,16218,18194,5748,469,12115,15485,13979,2356,7604,14353,12888,9393,3612,1282,16883,17132,2808,7434,16298,16567,6959,15203,479,9606,580,15404,6440,5825,6505,4347,12823,3157,8569,16248,9288,6988,6129,13193,4373,14314,6111,8240,3579,12236,89,6536,16387,9075,7776,18975,17366,12246,2366,1664,10314,4463,14949,7368,9657,11125,18,9138,19121,16837,12543,3404,16246,5795,1745,11034,4604,3338,5869,5180,4660,9293,8346,18395,14133,18844,16770,1585,7190,12162,1144,11789,9170,17665,4026,10796,609,527,12644,9267,13533,13905,9575,1554,2759,14958,17557,5463,1489,6848,8659,10332,7956,2758,6916,13943,1269,8948,6720,10407,1724,16753,12226,12580,2201,1897,3404,10198,14573,18186,16072,6692,17060,258,6958,15590,17099,15829,17464,4291,13301,17911,16999,2470,11141,13283,9515,4273,13893,13684,404,14614,14204,11853,15023,15309,7209,9155,10321,13494,8452,1249,15026,16943,7183,9163,10430,18590,11298,16808,16160,5686,8472,7637,8775,15835,12371,12425,2036,17157,3932,2299,17348,9838,1769,16495,18872,15953,6356,6798,13825,10788,4602,18171,7985,4320,6700,12144,4819,14174,18946,11683,11753,429,2349,4080,13439,4578,3796,14275,8194,2418,17488,4434,4061,17298,6720,3077,367,6496,4049,16167,18421,16480,11909,2304,11248,7629,15471,282,8028,7860,14858,4849,13473,4969,15309,17756,11275,12604,17143,11059,7836,18916,4567,11802,16753,11179,2918,774,10720,2413,12421,10949,7756,9808,14666,18167,1636,4087,12989,7755,16936,116,15974,6387,4671,15775,7294,14195,12359,6868,13351,1527,16604,11353,16759,8752,1450,1873,16515,13560,9246,2926,18705,18662,5872,1739,8309,11279,8851,18548,11263,13498,7757,11452,12883,8635,6389,18925,12866,14740,15489,17275,7092,16200,2973,18316,3211,11285,17017,15072,13150,18143,15303,18185,10428,9961,8951,15686,17973,3381,9482,255,18346,9743,8020,9410,175,5254,2267,17700,6102,11102,4774,6258,17756,19262,248,10698,18399,16447,17443,2722,14285,565,11621,2420,6869,18763,10532,2480,11445,17649,13512,2293,16182,11335,15415,4164,15810,5780,14937,6657,15871,2607,16375,10910,11506,13429,12575,1331,13365,359,1427,8080,8839,829,7532,19089,9230,6913,13611,4863,19120,13574,5132,7526,12738,8106,7395,8028,12065,15681,7464,18988,15267,6188,16506,11693,17466,18655,1158,7576,10093,10228,19293,6035,630,11560,11629,17487,6977,6848,10256,9799,15273,12779,11548,16827,10803,17900,12795,2183,10630,8760,11204,11507,7137,8215,14373,10736,8731,16356,7792,7346,270,223,2304,16497,12526,1996,1779,11185,11055,4674,13159,10864,16541,8473,6323,14459,4183,17727,1189,14837,6898,11747,14974,3922,15919,10465,6997,16916,10461,743,18279,13331,2006,17630,8645,7107,6929,6090,3892,13728,7750,5440,12502,11041,12232,430,8136,6250,15332,4735,18978,2665,9989,7388,14023,17735,7625,5826,13084,5659,5212,3253,15247,15099,11215,15007,11775,14118,5540,10459,14229,8801,7857,2486,2148,3065,9655,5402,140,1524,11509,8293,2328,1504,13334,10293,8724,15416,8182,9899,16807,5247,13254,12701,11147,7026,6625,3020,14276,18901,7291,15261,7995,2893,18987,5453,13700,14988,15001,5660,15645,14246,97,8663,4786,12329,15830,13845,4332,14523,3194,16243,9022,12523,3874,14647,17558,9111,18523,6044,18413,7307,10559,2645,15763,13635,1360,17399,13250,9390,505,11014,14727,8026,7758,16237,6148,11953,8276,10522,9232,11837,13815,6622,3035,14075,3741,13963,16890,8428,9490,18864,15244,8437,11136,15564,11330,3801,18566,6936,8000,13150,19186,4097,2950,218,3308,18357,18690,6096,16135,4655,7911,1166,6742,6419,17063,2756,12318,5087,5379,17739,6371,14340,1295,14946,14858,9839,14723,1160,6866,10827,14443,7783,13297,15912,10471,16312,11461,11751,10443,17923,2846,18428,6836,14410,12229,6595,4856,12299,1069,260,15299,1566,8402,12300,18986,11839,2018,18348,18949,9737,16219,3332,12532,8708,11940,1358,12813,395,18623,13103,4461,15802,12333,15499,562,6676,1543,1479,1694,5003,14830,15806,11596,2552,9146,13019,16726,637,9123,18560,8637,8875,71,4279,9330,13239,16627,9301,6198,15387,12260,19063,17331,14258,9241,17708,7142,9879,18074,15341,12202,8482,142,15199,14857,15704,4249,11975,15470,14859,9460,5378,187,4574,9960,537,11435,8024,4998,9753,534,10004,613,14462,15852,9373,15764,11509,10581,8126,5562,8715,14604,2322,9088,11742,6,1827,12375,9405,10871,13679,12298,7815,9859,215,18068,18865,1976,14079,7559,7581,3558,2176,19132,12195,15953,18739,15233,12285,9791,277,8618,9800,1065,7897,12802,17623,16801,11777,18284,15696,14562,7531,15791,14648,1597,12334,5088,8744,10847,9111,10455,13289,3293,11719,10849,18459,13347,9443,2467,11632,8998,14733,2079,3104,5453,15926,6878,15855,2836,14487,15024,9458,2264,3672,10806,16684,16119,16615,9820,17037,5969,1257,16667,13633,17754,431,8467,9148,17607,14000,11009,14661,759,1935,11844,8301,5374,13195,3885,6956,1589,9881,19207,1008,3711,5510,4621,16137,331,1135,5906,3748,10631,11126,3959,10596,15636,12449,18465,2544,4114,2966,14662,8942,484,19071,13640,7275,4280,16762,9731,4696,3883,1326,12726,4320,2721,17401,8894,5270,4207,12680,1863,10327,1754,7420,4421,8582,8721,14410,4452,11557,6382,1285,7704,6381,12377,6087,4136,17694,2357,3235,8090,13136,11804,4434,13002,1821,692,6861,1823,8396,17421,12714,16648,14810,1184,17658,5038,16098,6682,1609,6634,8988,5829,9755,13935,15730,17758,10114,11125,16618,11095,12385,15004,8689,6731,7161,3100,17610,11867,18078,12355,13172,16491,654,19234,4902,17728,12188,14753,3536,10823,14327,11385,16373,4632,12166,5983,14355,16745,10678,5682,3607,17807,6090,12854,18918,12583,14103,15603,8204,9137,8302,10258,1682,6692,15434,10379,300,17663,16565,12329,2686,4777,13976,17944,1390,7036,3200,5984,6918,1879,38,1537,713,15682,17592,18907,1102,15385,2574,1687,6697,7427,9235,8038,3083,13592,2115,6221,19270,973,13660,10703,12915,10340,4639,10835,8440,13213,12808,1508,14275,13971,14813,3592,11512,14634,11923,17310,15479,19185,2299,2024,14379,10401,2272,1376,9671,2564,17812,17852,17835,8713,12187,8383,2217,13088,7638,3519,14427,5948,17190,2522,17384,1089,7459,16287,16427,17295,8693,740,13597,12974,11859,3576,6741,14717,15422,5826,12791,18981,4130,3957,9178,6707,11836,7195,17256,1585,4543,8887,15777,8075,9856,4740,14164,8891,14047,3802,4584,1064,17010,5765,18271,13182,1914,2997,15065,957,18429,1747,2225,16412,11053,14410,13804,8309,2451,15374,16169,15721,15983,6282,5640,346,3226,15446,15142,11621,13697,8319,17155,11202,12754,12845,4097,19223,11659,9407,14364,13321,12080,14068,6601,17130,17098,9886,14471,17162,8880,5892,1555,4938,15031,917,730,5616,9020,13706,5211,574,18827,3042,7893,12933,6285,18313,14596,18768,1625,16790,6475,12769,5042,17501,5412,5173,1414,16280,117,5480,16342,2925,17751,15525,17912,16484,18060,352,6263,9621,1768,10278,13171,4826,8724,10246,17886,4610,3592,18295,13877,14963,19017,8530,11035,13242,3772,4192,8169,18747,7239,9232,2783,12723,12714,10111,3071,13143,14549,1998,4260,11141,14366,5831,17266,11667,13619,9744,691,15718,14530,12188,2044,12458,6650,16412,4256,126,5623,7211,15912,13609,14751,4601,8743,13942,5997,13143,4254,9900,16688,6476,4545,7597,1714,14472,7919,9327,6582,2443,17931,6323,5074,39,668,16687,15072,11877,14984,10114,4705,11029,14263,17165,8290,8262,13040,7151,8626,9889,15345,10394,16871,6121,1305,12558,14190,6407,9001,8130,14469,5819,4688,5088,13022,7088,13836,4652,1035,11627,10662,9031,18946,298,2055,18589,2479,4031,590,7543,2896,4331,14112,7472,3677,11759,10349,15855,11178,6143,6444,16252,1661,2695,9522,662,10191,13047,5723,8848,14823,12587,3938,6119,373,14493,14224,3414,6112,10906,10029,14319,1263,19049,1652,5544,13187,3598,7830,19144,13501,630,3040,4110,7366,12248,5667,18341,1581,2906,16372,16150,2549,19068,10526,17856,12266,4769,12065,18616,492,1638,15983,6860,8737,4816,1789,17440,4891,10343,4511,7168,2476,5605,10042,15782,11085,13444,17995,19193,14766,5051,4605,15591,8641,70,10444,15552,17894,4304,8550,9955,7697,5069,17640,3781,7471,8729,17532,9122,4446,10005,10810,16275,11487,13888,16888,12144,19109,15319,269,19146,15174,9750,3534,16175,5840,4915,3692,6063,5902,11070,1027,18381,70}; int n; cin >> n; if(ans[n]!=0){ cout << ans[n]; return 0; } long long tmp; for (int i = 2; i <= n; i++) { tmp = ans[i - 1]; /*add a at back*/ for (int j = 0; j < i; j++) { /*add ) at back. the ) must not belong to any original pairs.*/ /*a ( should be inserted between legals*/ tmp += ans[j] * ans[i - j - 2]; tmp %= 19301; } ans[i] = tmp; } cout << ans[n]; return 0; } FineArtz's solution /* \u62ec\u53f7\u5339\u914d 11.07 */ #include <iostream> using namespace std; const int MOD = 19301; int main(){ long long f[3335] = {0}; int n; cin >> n; f[0] = 1; f[1] = 1; for (int i = 2; i <= n; ++i){ f[i] += f[i - 1]; for (int j = 1; j <= i - 1; ++j){ f[i] += f[j - 1] * f[i - j - 1]; f[i] %= MOD; } f[i] %= MOD; } cout << f[n] << endl; return 0; }","title":"1075 \u62ec\u53f7\u5339\u914d 11.07"},{"location":"nr/1075/#1075-1107","text":"\u8f6c\u5230\u9898\u76ee","title":"1075 \u62ec\u53f7\u5339\u914d 11.07"},{"location":"nr/1075/#victrids-solution","text":"#include <iostream> using namespace std; int main() { unsigned short ans[3335] = {1,1,2,4,9,21,51,127,323,835,2188,5798,15511,3233,17129,1756,4223,2057,12644,17742,13185,9674,16560,14982,14280,15456,9603,3212,14660,18549,2234,2214,12614,4301,15589,17775,10176,12374,6701,13423,3195,16695,13109,33,12490,11545,12863,10973,13555,5069,19213,9441,2024,10011,10412,12158,2060,3304,16174,6172,14014,16503,2036,12600,9402,17905,12310,15883,19283,16513,12181,9760,6455,9879,3430,16409,16099,763,4556,18296,3898,4284,1769,6337,4109,3803,6662,4606,10364,12751,1667,8546,1333,13840,13630,12355,6264,9678,622,15638,3108,10635,510,4426,17861,2490,16795,13477,4710,18897,13299,2348,308,2601,6534,17534,15451,18533,7488,6482,2126,15169,9578,6210,1720,17030,10050,12314,15493,16633,18653,11212,6733,7174,18474,9553,5562,18216,11838,3812,7511,14048,11667,6861,11376,18655,7379,18151,14399,9025,10694,16311,2725,2827,8421,15411,7671,9210,12963,1610,5259,18241,5738,5793,17571,17683,5482,11695,1078,3761,1769,13479,11309,8456,5483,1789,3021,7171,8337,15832,750,13400,4249,15322,15232,17442,10787,9787,12058,1795,18965,13935,3481,15704,15552,6720,17176,7103,6276,1473,11822,16984,10192,11785,18019,4045,8788,6231,1137,19130,4844,9114,10061,2864,8377,29,1292,13228,4832,7609,13505,3649,3,10807,7815,1690,8971,18951,13195,2372,11424,19205,3948,4276,17574,6546,514,6119,4275,1558,3560,493,1008,8664,3733,11608,18029,8389,14374,6228,6738,16906,12250,12714,13949,5351,7563,8251,232,18718,16546,3507,2751,6113,11900,8402,589,1127,17714,12366,799,9222,12613,4165,14663,15258,6451,14324,15311,3392,9689,9224,12926,16120,18073,555,2887,16341,6875,1707,807,9441,13304,1250,5349,319,17427,704,11662,16578,3847,17340,16921,3740,6807,18308,4710,15981,8008,12343,5861,16891,140,17014,9973,10133,13026,3101,3689,12050,8158,5505,14297,15784,9089,9057,14685,17616,10471,14730,15401,7858,10985,3867,15200,11465,16459,3665,3218,19287,3785,16780,2084,18639,3987,13146,9917,9185,15141,14416,6685,7203,14929,15764,11450,1415,12781,2353,13115,8955,8229,11290,892,12683,11621,12501,10597,17664,4381,1098,5418,2262,14127,17579,15051,18509,479,13773,9054,16325,3538,1869,15310,5784,16994,951,11045,13672,9194,4275,8660,11122,15120,15254,18968,3574,16653,18281,4945,10859,640,5209,9753,15644,7494,16989,6640,10263,15228,13995,767,6616,12811,1609,6008,4268,14764,5237,17051,17671,11363,16695,7760,17966,203,5694,11096,5064,776,7363,10419,6908,8920,290,9358,5824,3003,17007,16877,8816,18821,8451,2243,12217,16668,18203,9137,14812,1810,4610,15779,17966,8907,13607,13036,5849,9676,8968,4254,14401,19204,12340,14619,11633,2650,18177,4421,3241,7402,16550,1573,18929,18240,2627,14239,17890,953,5148,16362,14865,16871,16216,13203,5347,939,16348,8619,18327,17021,13148,16593,12820,1781,8557,13812,6610,4370,15699,18356,18464,2895,10222,4086,14018,18930,16054,3665,14954,12253,11243,11239,18245,10724,8979,16114,11876,18239,11995,1712,18335,9170,17731,15234,772,8012,3192,8771,14025,14950,16585,18791,11594,1433,8764,18333,10844,1376,12285,19278,3711,3202,15645,13118,382,14872,2327,10728,8090,12069,17875,9774,11017,10271,9749,11143,14550,16509,2076,635,11177,15672,16686,12085,7079,6057,5021,906,7700,17860,7158,19055,7633,7666,15246,3832,10662,11534,6426,10104,17276,13481,17770,9155,6963,2481,1071,11708,7678,15128,4011,15760,5559,8124,783,12631,15218,7287,15142,3997,13929,7466,6445,5650,3394,1852,15321,5461,14797,18296,14022,12770,15417,5666,15150,14430,18462,6458,402,12860,19119,1663,8599,12100,7847,11238,19254,4354,9805,9310,3376,14927,3914,11676,2582,138,2137,14266,15998,6603,15417,3218,15265,3414,5174,4982,13160,5572,16810,10926,3245,14976,2272,11893,16431,7634,5693,12598,14316,16182,1110,16254,13479,10763,12246,5198,12655,13357,3430,1883,11873,16392,16090,13827,11054,8565,8255,4136,4171,18321,3445,9806,14316,7574,14370,5270,9274,17753,19037,13479,5134,9702,14895,14180,2252,15570,17862,15792,9822,14221,13750,18865,8850,17950,2715,17075,583,2774,3630,13248,881,10296,2120,8714,17705,12981,18717,16889,4018,15450,10930,1568,16082,18174,15368,5213,1548,6495,670,17966,8024,4670,19286,13318,382,1532,12239,7900,15980,11159,13366,15825,1358,10536,6952,8773,2394,2479,11689,17305,18581,17341,13545,6051,17733,4305,8395,12153,14861,17218,4133,4153,9459,7291,5958,2108,4573,10376,92,13644,18723,16768,8947,14928,6278,12223,11265,15252,13541,1122,12260,4576,7985,19152,7781,14645,10232,18953,14253,1441,14460,5317,17540,1631,4038,8983,12419,13037,12317,12501,1913,6382,3339,2190,18931,10261,1512,10588,9194,17689,13005,18648,18124,9214,12721,15398,5473,15871,13612,11414,14386,15218,16557,5015,12899,5738,6322,10192,3902,8583,7059,13581,4607,12997,7219,14615,16790,15781,11899,10407,2827,4295,14072,3406,5947,16237,9587,11369,3207,2741,13812,13682,6585,12938,5763,1097,10928,19226,12320,2042,13537,16719,8857,17135,17357,12956,17985,1062,11690,13603,16792,4937,4611,4577,5939,9810,16677,10461,2172,12912,5787,13723,4307,10852,1700,7041,15420,18128,10631,10042,2641,8575,18728,10116,14409,7037,1231,5358,13885,8938,924,4390,14029,6144,6933,8631,10406,522,2728,51,3958,14341,18928,8223,7963,14023,14977,4220,9295,15339,5926,5805,12917,15327,13601,5499,9114,1635,1328,3992,16752,17720,7839,15430,6175,11271,12051,10236,2212,12030,10433,11137,2494,7023,12291,15798,10338,14382,10721,1456,3308,13636,6702,2086,13618,1694,16821,14781,10768,3642,1878,4811,2296,17191,19134,12837,13618,14043,18695,8733,8431,897,88,12826,14889,5779,16184,15559,6942,17009,12998,9667,7561,7881,181,18843,3968,420,3222,4883,18531,18690,13562,13275,4379,18917,10356,15471,1359,1044,12744,3146,10051,4625,4615,6550,18355,4835,3402,5987,13541,16761,18911,6128,2210,17538,12427,14349,7280,18119,13763,16528,4273,18899,12939,5506,7959,578,14439,7310,16754,789,3187,2117,2740,5489,16534,13571,15965,5557,62,1206,9626,6415,17208,9917,18356,6157,12671,15710,13158,1354,1924,18807,177,10884,2783,1504,339,7598,11659,14228,1215,4157,9871,13682,9462,10166,14323,18847,7611,285,1609,6007,2932,12759,6996,238,15341,18216,8358,4938,9952,11823,13753,17519,14574,3695,5414,18273,18850,3076,2428,16522,7266,11393,14706,4447,13452,8220,11067,12631,17724,12612,961,18659,7242,12892,16037,1901,18353,17350,2007,2087,17080,17581,961,18543,18489,19237,14316,14778,11525,11341,5202,6389,16303,12974,1677,4369,11901,11540,16240,3650,18640,7545,15384,14175,11492,10359,6646,2406,7670,12666,7590,5463,18528,7,1531,4858,9522,9429,5258,4546,18296,16721,3667,8255,5479,17209,6281,10887,16858,4715,19139,15490,14578,17434,6607,19290,3035,6194,7879,1704,14217,10109,16868,16018,3302,3298,3198,15375,6818,8652,11347,14429,8028,19003,1968,15885,4365,11240,7622,1820,15671,487,75,8986,16532,6353,1479,1059,10440,2077,15305,394,790,9979,18418,16965,7450,18688,18047,14278,2417,7256,1776,13187,702,16012,1601,8834,1369,6985,16490,8708,488,13518,1954,11782,2948,7466,16880,15740,17023,4234,14310,2561,1769,17362,2494,3608,3631,131,5966,19048,1593,5116,15559,6570,4980,10464,517,17897,14368,7596,18145,14226,5826,2929,5364,7445,72,9248,5217,1,18815,8089,3434,19261,6781,16021,15168,11545,9376,19174,2265,13931,10418,13847,14545,10489,1950,18378,2881,13979,4065,11208,16693,3469,3684,7061,9727,15835,8403,7887,17275,17046,12744,7381,12106,7007,15526,1383,4908,333,4590,1888,7115,8181,6590,8156,15453,2800,12100,9439,18802,1892,16407,4356,10998,14482,19003,14413,5789,11650,11439,11956,4622,11643,4873,5027,1317,2110,11020,16109,11480,17188,4700,7429,239,12532,9181,17467,15595,2880,15079,3193,10481,18058,13532,429,5286,9806,6597,9695,17852,15978,9944,18789,5897,938,12035,7989,7615,3182,15075,7516,10613,4719,610,13952,15403,13749,16361,9993,13308,7688,18218,752,1433,8396,12983,5845,18657,15918,2613,9722,8486,14342,9113,9185,14455,14145,17364,1061,5799,9543,6101,4774,7550,10322,13536,11670,7156,17082,11639,5123,11914,9284,17541,7272,4957,2203,5696,10001,15239,14297,3509,4141,7192,5958,10091,6267,14896,6983,17103,13067,17676,2912,17624,12659,3152,15728,2217,4351,542,16028,6377,7687,5424,16088,15878,5757,4046,9902,15183,5475,888,14691,5433,10253,10648,7487,13050,7566,3370,1108,3003,11181,6480,14697,19265,19051,13964,16908,16027,17126,5390,17059,1292,2294,4206,2020,3726,14669,5625,8954,12141,7103,1552,807,1040,13065,1728,16890,14128,19258,4194,18549,2627,18896,10805,10764,14441,326,5711,15801,8831,8362,13225,4492,4036,6216,5164,17471,15186,4333,4395,6058,5668,7481,18829,19250,11021,18761,17796,2204,7928,11519,14013,4356,3516,3046,2147,8515,2548,11828,12289,16560,7693,18024,8660,910,3354,13799,10150,12340,7603,6130,5604,2590,827,13345,18684,18225,17512,14562,14855,1346,689,17955,15058,11227,17349,6830,14868,16982,5591,8459,17445,12859,3243,12255,10789,201,14662,2805,2232,1192,17579,11989,16983,12346,1809,14729,16280,15977,15996,5053,18256,5478,17400,7962,1169,3675,2926,11758,13598,9646,1821,14785,4753,9524,18245,7978,4331,15259,12714,10454,2804,17099,4478,12558,3940,16681,5626,2748,15188,10476,16380,7106,9341,9987,16017,5416,3280,10485,15930,499,16824,11324,8681,8030,17026,12342,7967,18389,15210,11344,17162,18945,4951,2909,5658,17079,19141,12681,18689,6069,18304,595,15801,14547,412,10649,19067,3395,11596,11615,6893,4462,3776,15539,18578,8374,7707,6403,7498,1845,11092,5566,16843,2477,5344,15582,7634,10956,5677,1679,12039,14447,2991,2544,10595,1715,7671,15219,16551,341,12769,6960,849,8224,17922,17717,1080,16807,2296,9248,1660,10342,14795,16931,19074,8848,3284,8916,9395,18555,9352,7971,12960,7802,7038,1768,4359,9903,5173,17713,1117,7296,18668,16362,17621,5219,9748,3708,4771,7453,1009,2009,6857,1358,8278,17880,18375,3511,10695,2031,7220,3694,5315,8961,10329,9186,18088,6152,18461,9957,16328,10871,8501,14196,3799,3114,8850,14114,11670,7532,5072,15639,16207,4682,18731,6420,9606,12205,6930,8454,5162,5379,6382,5196,7254,2603,12115,1569,15928,18372,6776,14320,1457,8274,16385,10411,8791,3046,3708,6318,2208,10662,16098,8059,1808,8524,11637,19152,3699,2805,4269,8186,8648,9458,1801,7305,1883,19179,8314,14576,219,39,6932,863,19246,11452,14955,10989,7407,13932,4858,7656,13050,13641,179,11135,14874,1635,1818,1414,16538,17326,12235,12884,11807,11880,11659,11462,18157,6794,17055,10129,8397,6516,6101,1842,7129,1964,88,1233,4730,8210,1732,6887,12297,18707,15622,2368,5968,11361,5574,12057,9437,2440,2114,8101,4311,4187,11198,18077,10932,12645,949,1127,16758,7789,10006,17112,10043,12151,3279,14367,6649,950,3964,9265,9154,1923,5838,2653,16662,18261,7750,2968,15823,5337,8349,16886,7358,6950,18505,14758,18972,11660,14667,2515,18027,14963,8188,10704,9812,4422,13682,16218,18194,5748,469,12115,15485,13979,2356,7604,14353,12888,9393,3612,1282,16883,17132,2808,7434,16298,16567,6959,15203,479,9606,580,15404,6440,5825,6505,4347,12823,3157,8569,16248,9288,6988,6129,13193,4373,14314,6111,8240,3579,12236,89,6536,16387,9075,7776,18975,17366,12246,2366,1664,10314,4463,14949,7368,9657,11125,18,9138,19121,16837,12543,3404,16246,5795,1745,11034,4604,3338,5869,5180,4660,9293,8346,18395,14133,18844,16770,1585,7190,12162,1144,11789,9170,17665,4026,10796,609,527,12644,9267,13533,13905,9575,1554,2759,14958,17557,5463,1489,6848,8659,10332,7956,2758,6916,13943,1269,8948,6720,10407,1724,16753,12226,12580,2201,1897,3404,10198,14573,18186,16072,6692,17060,258,6958,15590,17099,15829,17464,4291,13301,17911,16999,2470,11141,13283,9515,4273,13893,13684,404,14614,14204,11853,15023,15309,7209,9155,10321,13494,8452,1249,15026,16943,7183,9163,10430,18590,11298,16808,16160,5686,8472,7637,8775,15835,12371,12425,2036,17157,3932,2299,17348,9838,1769,16495,18872,15953,6356,6798,13825,10788,4602,18171,7985,4320,6700,12144,4819,14174,18946,11683,11753,429,2349,4080,13439,4578,3796,14275,8194,2418,17488,4434,4061,17298,6720,3077,367,6496,4049,16167,18421,16480,11909,2304,11248,7629,15471,282,8028,7860,14858,4849,13473,4969,15309,17756,11275,12604,17143,11059,7836,18916,4567,11802,16753,11179,2918,774,10720,2413,12421,10949,7756,9808,14666,18167,1636,4087,12989,7755,16936,116,15974,6387,4671,15775,7294,14195,12359,6868,13351,1527,16604,11353,16759,8752,1450,1873,16515,13560,9246,2926,18705,18662,5872,1739,8309,11279,8851,18548,11263,13498,7757,11452,12883,8635,6389,18925,12866,14740,15489,17275,7092,16200,2973,18316,3211,11285,17017,15072,13150,18143,15303,18185,10428,9961,8951,15686,17973,3381,9482,255,18346,9743,8020,9410,175,5254,2267,17700,6102,11102,4774,6258,17756,19262,248,10698,18399,16447,17443,2722,14285,565,11621,2420,6869,18763,10532,2480,11445,17649,13512,2293,16182,11335,15415,4164,15810,5780,14937,6657,15871,2607,16375,10910,11506,13429,12575,1331,13365,359,1427,8080,8839,829,7532,19089,9230,6913,13611,4863,19120,13574,5132,7526,12738,8106,7395,8028,12065,15681,7464,18988,15267,6188,16506,11693,17466,18655,1158,7576,10093,10228,19293,6035,630,11560,11629,17487,6977,6848,10256,9799,15273,12779,11548,16827,10803,17900,12795,2183,10630,8760,11204,11507,7137,8215,14373,10736,8731,16356,7792,7346,270,223,2304,16497,12526,1996,1779,11185,11055,4674,13159,10864,16541,8473,6323,14459,4183,17727,1189,14837,6898,11747,14974,3922,15919,10465,6997,16916,10461,743,18279,13331,2006,17630,8645,7107,6929,6090,3892,13728,7750,5440,12502,11041,12232,430,8136,6250,15332,4735,18978,2665,9989,7388,14023,17735,7625,5826,13084,5659,5212,3253,15247,15099,11215,15007,11775,14118,5540,10459,14229,8801,7857,2486,2148,3065,9655,5402,140,1524,11509,8293,2328,1504,13334,10293,8724,15416,8182,9899,16807,5247,13254,12701,11147,7026,6625,3020,14276,18901,7291,15261,7995,2893,18987,5453,13700,14988,15001,5660,15645,14246,97,8663,4786,12329,15830,13845,4332,14523,3194,16243,9022,12523,3874,14647,17558,9111,18523,6044,18413,7307,10559,2645,15763,13635,1360,17399,13250,9390,505,11014,14727,8026,7758,16237,6148,11953,8276,10522,9232,11837,13815,6622,3035,14075,3741,13963,16890,8428,9490,18864,15244,8437,11136,15564,11330,3801,18566,6936,8000,13150,19186,4097,2950,218,3308,18357,18690,6096,16135,4655,7911,1166,6742,6419,17063,2756,12318,5087,5379,17739,6371,14340,1295,14946,14858,9839,14723,1160,6866,10827,14443,7783,13297,15912,10471,16312,11461,11751,10443,17923,2846,18428,6836,14410,12229,6595,4856,12299,1069,260,15299,1566,8402,12300,18986,11839,2018,18348,18949,9737,16219,3332,12532,8708,11940,1358,12813,395,18623,13103,4461,15802,12333,15499,562,6676,1543,1479,1694,5003,14830,15806,11596,2552,9146,13019,16726,637,9123,18560,8637,8875,71,4279,9330,13239,16627,9301,6198,15387,12260,19063,17331,14258,9241,17708,7142,9879,18074,15341,12202,8482,142,15199,14857,15704,4249,11975,15470,14859,9460,5378,187,4574,9960,537,11435,8024,4998,9753,534,10004,613,14462,15852,9373,15764,11509,10581,8126,5562,8715,14604,2322,9088,11742,6,1827,12375,9405,10871,13679,12298,7815,9859,215,18068,18865,1976,14079,7559,7581,3558,2176,19132,12195,15953,18739,15233,12285,9791,277,8618,9800,1065,7897,12802,17623,16801,11777,18284,15696,14562,7531,15791,14648,1597,12334,5088,8744,10847,9111,10455,13289,3293,11719,10849,18459,13347,9443,2467,11632,8998,14733,2079,3104,5453,15926,6878,15855,2836,14487,15024,9458,2264,3672,10806,16684,16119,16615,9820,17037,5969,1257,16667,13633,17754,431,8467,9148,17607,14000,11009,14661,759,1935,11844,8301,5374,13195,3885,6956,1589,9881,19207,1008,3711,5510,4621,16137,331,1135,5906,3748,10631,11126,3959,10596,15636,12449,18465,2544,4114,2966,14662,8942,484,19071,13640,7275,4280,16762,9731,4696,3883,1326,12726,4320,2721,17401,8894,5270,4207,12680,1863,10327,1754,7420,4421,8582,8721,14410,4452,11557,6382,1285,7704,6381,12377,6087,4136,17694,2357,3235,8090,13136,11804,4434,13002,1821,692,6861,1823,8396,17421,12714,16648,14810,1184,17658,5038,16098,6682,1609,6634,8988,5829,9755,13935,15730,17758,10114,11125,16618,11095,12385,15004,8689,6731,7161,3100,17610,11867,18078,12355,13172,16491,654,19234,4902,17728,12188,14753,3536,10823,14327,11385,16373,4632,12166,5983,14355,16745,10678,5682,3607,17807,6090,12854,18918,12583,14103,15603,8204,9137,8302,10258,1682,6692,15434,10379,300,17663,16565,12329,2686,4777,13976,17944,1390,7036,3200,5984,6918,1879,38,1537,713,15682,17592,18907,1102,15385,2574,1687,6697,7427,9235,8038,3083,13592,2115,6221,19270,973,13660,10703,12915,10340,4639,10835,8440,13213,12808,1508,14275,13971,14813,3592,11512,14634,11923,17310,15479,19185,2299,2024,14379,10401,2272,1376,9671,2564,17812,17852,17835,8713,12187,8383,2217,13088,7638,3519,14427,5948,17190,2522,17384,1089,7459,16287,16427,17295,8693,740,13597,12974,11859,3576,6741,14717,15422,5826,12791,18981,4130,3957,9178,6707,11836,7195,17256,1585,4543,8887,15777,8075,9856,4740,14164,8891,14047,3802,4584,1064,17010,5765,18271,13182,1914,2997,15065,957,18429,1747,2225,16412,11053,14410,13804,8309,2451,15374,16169,15721,15983,6282,5640,346,3226,15446,15142,11621,13697,8319,17155,11202,12754,12845,4097,19223,11659,9407,14364,13321,12080,14068,6601,17130,17098,9886,14471,17162,8880,5892,1555,4938,15031,917,730,5616,9020,13706,5211,574,18827,3042,7893,12933,6285,18313,14596,18768,1625,16790,6475,12769,5042,17501,5412,5173,1414,16280,117,5480,16342,2925,17751,15525,17912,16484,18060,352,6263,9621,1768,10278,13171,4826,8724,10246,17886,4610,3592,18295,13877,14963,19017,8530,11035,13242,3772,4192,8169,18747,7239,9232,2783,12723,12714,10111,3071,13143,14549,1998,4260,11141,14366,5831,17266,11667,13619,9744,691,15718,14530,12188,2044,12458,6650,16412,4256,126,5623,7211,15912,13609,14751,4601,8743,13942,5997,13143,4254,9900,16688,6476,4545,7597,1714,14472,7919,9327,6582,2443,17931,6323,5074,39,668,16687,15072,11877,14984,10114,4705,11029,14263,17165,8290,8262,13040,7151,8626,9889,15345,10394,16871,6121,1305,12558,14190,6407,9001,8130,14469,5819,4688,5088,13022,7088,13836,4652,1035,11627,10662,9031,18946,298,2055,18589,2479,4031,590,7543,2896,4331,14112,7472,3677,11759,10349,15855,11178,6143,6444,16252,1661,2695,9522,662,10191,13047,5723,8848,14823,12587,3938,6119,373,14493,14224,3414,6112,10906,10029,14319,1263,19049,1652,5544,13187,3598,7830,19144,13501,630,3040,4110,7366,12248,5667,18341,1581,2906,16372,16150,2549,19068,10526,17856,12266,4769,12065,18616,492,1638,15983,6860,8737,4816,1789,17440,4891,10343,4511,7168,2476,5605,10042,15782,11085,13444,17995,19193,14766,5051,4605,15591,8641,70,10444,15552,17894,4304,8550,9955,7697,5069,17640,3781,7471,8729,17532,9122,4446,10005,10810,16275,11487,13888,16888,12144,19109,15319,269,19146,15174,9750,3534,16175,5840,4915,3692,6063,5902,11070,1027,18381,70}; int n; cin >> n; if(ans[n]!=0){ cout << ans[n]; return 0; } long long tmp; for (int i = 2; i <= n; i++) { tmp = ans[i - 1]; /*add a at back*/ for (int j = 0; j < i; j++) { /*add ) at back. the ) must not belong to any original pairs.*/ /*a ( should be inserted between legals*/ tmp += ans[j] * ans[i - j - 2]; tmp %= 19301; } ans[i] = tmp; } cout << ans[n]; return 0; }","title":"VictriD's solution"},{"location":"nr/1075/#fineartzs-solution","text":"/* \u62ec\u53f7\u5339\u914d 11.07 */ #include <iostream> using namespace std; const int MOD = 19301; int main(){ long long f[3335] = {0}; int n; cin >> n; f[0] = 1; f[1] = 1; for (int i = 2; i <= n; ++i){ f[i] += f[i - 1]; for (int j = 1; j <= i - 1; ++j){ f[i] += f[j - 1] * f[i - j - 1]; f[i] %= MOD; } f[i] %= MOD; } cout << f[n] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1076/","text":"1076 \u5c0fF\u7684\u82f9\u679c\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fF\u7684\u82f9\u679c\u6811 */ #include <iostream> #include <set> using namespace std; class Node{ public: set<int> edge; int father = 0; int apple = 0, sumApple = 0, sum = 0; }; class Edge{ public: int u = 0, v = 0, w = 0; }; Node a[105]; Edge e[105]; int n, q; int f[105][105] = {0}; void buildTree(int x, int f){ a[x].father = f; for (int i : a[x].edge){ if (i != f) buildTree(i, x); } } void countApple(int x){ a[x].sumApple = a[x].apple; a[x].sum = 1; for (int i : a[x].edge){ if (i != a[x].father){ countApple(i); a[x].sumApple += a[i].sumApple; a[x].sum += a[i].sum; } } } int dp(int x, int m){ if (f[x][m] != 0) return f[x][m]; if (m == 0){ f[x][m] = 0; return 0; } if (m >= a[x].sum){ f[x][m] = a[x].sumApple; return f[x][m]; } if (a[x].edge.size() == 1){ f[x][m] = a[x].apple; return f[x][m]; } int s1 = 0, s2 = 0; for (int i : a[x].edge){ if (i != a[x].father){ if (s1 == 0) s1 = i; else s2 = i; } } for (int k = 0; k < m; ++k){ f[x][m] = max(f[x][m], dp(s1, k) + dp(s2, m - k - 1) + a[x].apple); } return f[x][m]; } void print(int x){ cout << x << ' ' << a[x].father << ' ' << a[x].apple << ' ' << a[x].sumApple << ' ' << a[x].sum << endl; for (int i : a[x].edge) if (i != a[x].father) print(i); } int main(){ cin >> n >> q; for (int i = 1; i < n; ++i){ cin >> e[i].u >> e[i].v >> e[i].w; a[e[i].u].edge.insert(e[i].v); a[e[i].v].edge.insert(e[i].u); } buildTree(1, 0); for (int i = 1; i < n; ++i){ if (a[e[i].u].father == e[i].v) a[e[i].u].apple = e[i].w; else a[e[i].v].apple = e[i].w; } countApple(1); //print(1); ++q; dp(1, q); cout << f[1][q] << endl; return 0; }","title":"1076 \u5c0fF\u7684\u82f9\u679c\u6811"},{"location":"nr/1076/#1076-f","text":"\u8f6c\u5230\u9898\u76ee","title":"1076 \u5c0fF\u7684\u82f9\u679c\u6811"},{"location":"nr/1076/#fineartzs-solution","text":"/* \u5c0fF\u7684\u82f9\u679c\u6811 */ #include <iostream> #include <set> using namespace std; class Node{ public: set<int> edge; int father = 0; int apple = 0, sumApple = 0, sum = 0; }; class Edge{ public: int u = 0, v = 0, w = 0; }; Node a[105]; Edge e[105]; int n, q; int f[105][105] = {0}; void buildTree(int x, int f){ a[x].father = f; for (int i : a[x].edge){ if (i != f) buildTree(i, x); } } void countApple(int x){ a[x].sumApple = a[x].apple; a[x].sum = 1; for (int i : a[x].edge){ if (i != a[x].father){ countApple(i); a[x].sumApple += a[i].sumApple; a[x].sum += a[i].sum; } } } int dp(int x, int m){ if (f[x][m] != 0) return f[x][m]; if (m == 0){ f[x][m] = 0; return 0; } if (m >= a[x].sum){ f[x][m] = a[x].sumApple; return f[x][m]; } if (a[x].edge.size() == 1){ f[x][m] = a[x].apple; return f[x][m]; } int s1 = 0, s2 = 0; for (int i : a[x].edge){ if (i != a[x].father){ if (s1 == 0) s1 = i; else s2 = i; } } for (int k = 0; k < m; ++k){ f[x][m] = max(f[x][m], dp(s1, k) + dp(s2, m - k - 1) + a[x].apple); } return f[x][m]; } void print(int x){ cout << x << ' ' << a[x].father << ' ' << a[x].apple << ' ' << a[x].sumApple << ' ' << a[x].sum << endl; for (int i : a[x].edge) if (i != a[x].father) print(i); } int main(){ cin >> n >> q; for (int i = 1; i < n; ++i){ cin >> e[i].u >> e[i].v >> e[i].w; a[e[i].u].edge.insert(e[i].v); a[e[i].v].edge.insert(e[i].u); } buildTree(1, 0); for (int i = 1; i < n; ++i){ if (a[e[i].u].father == e[i].v) a[e[i].u].apple = e[i].w; else a[e[i].v].apple = e[i].w; } countApple(1); //print(1); ++q; dp(1, q); cout << f[1][q] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1077/","text":"1077 \u52a0\u5206\u4e8c\u53c9\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u52a0\u5206\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; int n; int a[35] = {0}, r[35][35] = {0}; int f[35][35] = {0}; int calc(int l, int h){ if (l > h) return 1; if (f[l][h] >= 0) return f[l][h]; if (l == h){ r[l][h] = l; f[l][h] = a[l]; return f[l][h]; } for (int k = l; k <= h; ++k){ int p = calc(l, k - 1), q = calc(k + 1, h); if (f[l][h] < p * q + a[k]){ f[l][h] = p * q + a[k]; r[l][h] = k; } } return f[l][h]; } void ldr(int l, int h){ if (l > h) return; cout << r[l][h] << ' '; ldr(l, r[l][h] - 1); ldr(r[l][h] + 1, h); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; memset(f, -1, sizeof(f)); memset(r, -1, sizeof(r)); calc(1, n); cout << f[1][n] << endl; ldr(1, n); cout << endl; return 0; }","title":"1077 \u52a0\u5206\u4e8c\u53c9\u6811"},{"location":"nr/1077/#1077","text":"\u8f6c\u5230\u9898\u76ee","title":"1077 \u52a0\u5206\u4e8c\u53c9\u6811"},{"location":"nr/1077/#fineartzs-solution","text":"/* \u52a0\u5206\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; int n; int a[35] = {0}, r[35][35] = {0}; int f[35][35] = {0}; int calc(int l, int h){ if (l > h) return 1; if (f[l][h] >= 0) return f[l][h]; if (l == h){ r[l][h] = l; f[l][h] = a[l]; return f[l][h]; } for (int k = l; k <= h; ++k){ int p = calc(l, k - 1), q = calc(k + 1, h); if (f[l][h] < p * q + a[k]){ f[l][h] = p * q + a[k]; r[l][h] = k; } } return f[l][h]; } void ldr(int l, int h){ if (l > h) return; cout << r[l][h] << ' '; ldr(l, r[l][h] - 1); ldr(r[l][h] + 1, h); } int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; memset(f, -1, sizeof(f)); memset(r, -1, sizeof(r)); calc(1, n); cout << f[1][n] << endl; ldr(1, n); cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1078/","text":"1078 Jerry\u7684\u751f\u65e5\u793c\u7269 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Jerry\u7684\u751f\u65e5\u793c\u7269 */ #include <iostream> #include <cstring> using namespace std; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[400005]; int head[200005], cnt = 0; long long d1[200005] = {0}, d2[200005] = {0}; int n, m; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int distance(int x, long long *a){ int ret = 0; bool v[200005] = {0}; int q[200005], front = 0, rear = 0; a[x] = 0; v[x] = true; q[rear++] = x; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != -1; i = e[i].next){ int next = e[i].v; if (!v[next]){ a[next] = a[now] + e[i].w; if (a[ret] < a[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ memset(head, -1, sizeof(head)); cin >> n >> m; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } int p1 = distance(1, d1); int p2 = distance(p1, d1); distance(p2, d2); long long ans = 0; for (int i = 1; i <= n; ++i){ ans = max(ans, min(d1[i], d2[i])); } ans += d1[p2]; cout << ans << endl; return 0; }","title":"1078 Jerry\u7684\u751f\u65e5\u793c\u7269"},{"location":"nr/1078/#1078-jerry","text":"\u8f6c\u5230\u9898\u76ee","title":"1078 Jerry\u7684\u751f\u65e5\u793c\u7269"},{"location":"nr/1078/#fineartzs-solution","text":"/* Jerry\u7684\u751f\u65e5\u793c\u7269 */ #include <iostream> #include <cstring> using namespace std; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[400005]; int head[200005], cnt = 0; long long d1[200005] = {0}, d2[200005] = {0}; int n, m; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int distance(int x, long long *a){ int ret = 0; bool v[200005] = {0}; int q[200005], front = 0, rear = 0; a[x] = 0; v[x] = true; q[rear++] = x; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != -1; i = e[i].next){ int next = e[i].v; if (!v[next]){ a[next] = a[now] + e[i].w; if (a[ret] < a[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ memset(head, -1, sizeof(head)); cin >> n >> m; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } int p1 = distance(1, d1); int p2 = distance(p1, d1); distance(p2, d2); long long ans = 0; for (int i = 1; i <= n; ++i){ ans = max(ans, min(d1[i], d2[i])); } ans += d1[p2]; cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1079/","text":"1079 \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 */ #include <iostream> #include <cstring> #include <vector> using namespace std; const int INF = 1000000000; class Node{ public: int child = 0, sibling = 0, father = 0; int lenf = 0; int ecnt = 0, edge[305] = {0}, w[305] = {0}; }; int n, m, k; Node a[305]; int f[305][305][2] = {0}; void makeTree(int x, int f){ a[x].father = f; if (a[x].ecnt == 1) return; for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].edge[i] != f){ if (a[x].child == 0){ a[x].child = a[x].edge[i]; a[a[x].child].lenf = a[x].w[i]; } else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; a[a[t].sibling].lenf = a[x].w[i]; } makeTree(a[x].edge[i], x); } } } void printTree(int x){ if (x == 0) return; cout << x << endl; printTree(a[x].child); printTree(a[x].sibling); } int factor(int x, int y){ if (x > 0 && y > 0) return 1; if (x == 0 && y == 0 && m == 2) return 1; return 0; } int dp(int x, int k, int b){ if (f[x][k][b] != -1) return f[x][k][b]; int ret = INF; for (int i = 0; i <= k; ++i){ int t = dp(a[x].child, i, 0) + dp(a[x].sibling, k - i, b) + factor(b, 0) * a[x].lenf; ret = min(ret, t); } for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i, 1) + dp(a[x].sibling, k - i - 1, b) + factor(b, 1) * a[x].lenf; ret = min(ret, t); } f[x][k][b] = ret; return ret; } int main(){ cin >> n >> m >> k; if (m + k - 1 > n){ cout << \"-1\" << endl; return 0; } for (int i = 1; i <= n - 1; ++i){ int u, v, w; cin >> u >> v >> w; a[u].edge[++a[u].ecnt] = v; a[u].w[a[u].ecnt] = w; a[v].edge[++a[v].ecnt] = u; a[v].w[a[v].ecnt] = w; } makeTree(1, 0); memset(f, -1, sizeof(f)); f[0][0][0] = f[0][0][1] = 0; for (int i = 1; i <= k; ++i){ f[0][i][0] = INF; f[0][i][1] = INF; } cout << dp(a[1].child, k - 1, 1) << endl; return 0; }","title":"1079 \u8d2a\u5403\u7684\u4e5d\u5934\u9f99"},{"location":"nr/1079/#1079","text":"\u8f6c\u5230\u9898\u76ee","title":"1079 \u8d2a\u5403\u7684\u4e5d\u5934\u9f99"},{"location":"nr/1079/#fineartzs-solution","text":"/* \u8d2a\u5403\u7684\u4e5d\u5934\u9f99 */ #include <iostream> #include <cstring> #include <vector> using namespace std; const int INF = 1000000000; class Node{ public: int child = 0, sibling = 0, father = 0; int lenf = 0; int ecnt = 0, edge[305] = {0}, w[305] = {0}; }; int n, m, k; Node a[305]; int f[305][305][2] = {0}; void makeTree(int x, int f){ a[x].father = f; if (a[x].ecnt == 1) return; for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].edge[i] != f){ if (a[x].child == 0){ a[x].child = a[x].edge[i]; a[a[x].child].lenf = a[x].w[i]; } else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; a[a[t].sibling].lenf = a[x].w[i]; } makeTree(a[x].edge[i], x); } } } void printTree(int x){ if (x == 0) return; cout << x << endl; printTree(a[x].child); printTree(a[x].sibling); } int factor(int x, int y){ if (x > 0 && y > 0) return 1; if (x == 0 && y == 0 && m == 2) return 1; return 0; } int dp(int x, int k, int b){ if (f[x][k][b] != -1) return f[x][k][b]; int ret = INF; for (int i = 0; i <= k; ++i){ int t = dp(a[x].child, i, 0) + dp(a[x].sibling, k - i, b) + factor(b, 0) * a[x].lenf; ret = min(ret, t); } for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i, 1) + dp(a[x].sibling, k - i - 1, b) + factor(b, 1) * a[x].lenf; ret = min(ret, t); } f[x][k][b] = ret; return ret; } int main(){ cin >> n >> m >> k; if (m + k - 1 > n){ cout << \"-1\" << endl; return 0; } for (int i = 1; i <= n - 1; ++i){ int u, v, w; cin >> u >> v >> w; a[u].edge[++a[u].ecnt] = v; a[u].w[a[u].ecnt] = w; a[v].edge[++a[v].ecnt] = u; a[v].w[a[v].ecnt] = w; } makeTree(1, 0); memset(f, -1, sizeof(f)); f[0][0][0] = f[0][0][1] = 0; for (int i = 1; i <= k; ++i){ f[0][i][0] = INF; f[0][i][1] = INF; } cout << dp(a[1].child, k - 1, 1) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1080/","text":"1080 \u5c0fF\u7684\u516c\u5bd3 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fF\u7684\u516c\u5bd3 */ #include <iostream> #include <cstring> using namespace std; const int MAXN = 500005, INF = 2147483647; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[MAXN]; int head[MAXN], cnt = 0; int n, s; int dist[MAXN], father[MAXN]; int p1, p2; int q[MAXN] = {0}; bool v[MAXN] = {0}; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int dis(int x, int indicator){ memset(q, 0, sizeof(q)); memset(v, 0, sizeof(v)); int front = 0, rear = 0, ret = 0; if (indicator){ for (int i = p2; i != 0; i = father[i]) v[i] = true; } v[x] = true; q[rear++] = x; dist[x] = 0; if (!indicator) father[x] = 0; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != 0; i = e[i].next){ int next = e[i].v; if (!v[next]){ dist[next] = dist[now] + e[i].w; if (!indicator) father[next] = now; if (dist[ret] < dist[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ cin >> n >> s; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } p1 = dis(1, 0); p2 = dis(p1, 0); int ans = INF, p = p2; for (int i = p2; i != 0; i = father[i]){ while (father[p] != 0 && dist[i] - dist[father[p]] <= s) p = father[p]; ans = min(ans, max(dist[p], dist[p2] - dist[i])); } for (int i = p2; i != 0; i = father[i]) dis(i, 1); for (int i = 1; i <= n; ++i) ans = max(ans, dist[i]); cout << ans << endl; return 0; }","title":"1080 \u5c0fF\u7684\u516c\u5bd3"},{"location":"nr/1080/#1080-f","text":"\u8f6c\u5230\u9898\u76ee","title":"1080 \u5c0fF\u7684\u516c\u5bd3"},{"location":"nr/1080/#fineartzs-solution","text":"/* \u5c0fF\u7684\u516c\u5bd3 */ #include <iostream> #include <cstring> using namespace std; const int MAXN = 500005, INF = 2147483647; class Edge{ public: Edge() = default; Edge(int uu, int vv, int ww, int nn) : u(uu), v(vv), w(ww), next(nn) {} int u = 0, v = 0, w = 0, next = 0; }; Edge e[MAXN]; int head[MAXN], cnt = 0; int n, s; int dist[MAXN], father[MAXN]; int p1, p2; int q[MAXN] = {0}; bool v[MAXN] = {0}; void addEdge(int u, int v, int w){ e[++cnt] = Edge(u, v, w, head[u]); head[u] = cnt; } int dis(int x, int indicator){ memset(q, 0, sizeof(q)); memset(v, 0, sizeof(v)); int front = 0, rear = 0, ret = 0; if (indicator){ for (int i = p2; i != 0; i = father[i]) v[i] = true; } v[x] = true; q[rear++] = x; dist[x] = 0; if (!indicator) father[x] = 0; while (front != rear){ int now = q[front++]; for (int i = head[now]; i != 0; i = e[i].next){ int next = e[i].v; if (!v[next]){ dist[next] = dist[now] + e[i].w; if (!indicator) father[next] = now; if (dist[ret] < dist[next]) ret = next; q[rear++] = next; v[next] = true; } } } return ret; } int main(){ cin >> n >> s; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } p1 = dis(1, 0); p2 = dis(p1, 0); int ans = INF, p = p2; for (int i = p2; i != 0; i = father[i]){ while (father[p] != 0 && dist[i] - dist[father[p]] <= s) p = father[p]; ans = min(ans, max(dist[p], dist[p2] - dist[i])); } for (int i = p2; i != 0; i = father[i]) dis(i, 1); for (int i = 1; i <= n; ++i) ans = max(ans, dist[i]); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1081/","text":"1081 \u9009\u8bfe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9009\u8bfe */ #include <iostream> #include <cstring> using namespace std; const int INF = 100000000; class Node{ public: int edge[201] = {0}, ecnt = 0, score = 0; int child = 0, sibling = 0, father = 0; }; Node a[205]; int m, n; int f[205][205] = {0}; void makeTree(int x){ for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].child == 0) a[x].child = a[x].edge[i]; else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; } makeTree(a[x].edge[i]); } } void printTree(int x){ cout << x << endl; if (a[x].child != 0) printTree(a[x].child); if (a[x].sibling != 0) printTree(a[x].sibling); } int dp(int x, int k){ if (f[x][k] != -1) return f[x][k]; int ret = -INF; for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i) + dp(a[x].sibling, k - i - 1) + a[x].score; ret = max(ret, t); } ret = max(ret, dp(a[x].sibling, k)); f[x][k] = ret; return ret; } int main(){ cin >> m >> n; for (int i = 1; i <= m; ++i){ int v, w; cin >> v >> w; a[v].edge[++a[v].ecnt] = i; a[i].score = w; a[i].father = v; } makeTree(0); //printTree(0); memset(f, -1, sizeof(f)); for (int i = 0; i <= m; ++i) f[i][0] = 0; for (int i = 0; i <= n; ++i) f[0][i] = 0; cout << dp(a[0].child, n) << endl; return 0; }","title":"1081 \u9009\u8bfe"},{"location":"nr/1081/#1081","text":"\u8f6c\u5230\u9898\u76ee","title":"1081 \u9009\u8bfe"},{"location":"nr/1081/#fineartzs-solution","text":"/* \u9009\u8bfe */ #include <iostream> #include <cstring> using namespace std; const int INF = 100000000; class Node{ public: int edge[201] = {0}, ecnt = 0, score = 0; int child = 0, sibling = 0, father = 0; }; Node a[205]; int m, n; int f[205][205] = {0}; void makeTree(int x){ for (int i = 1; i <= a[x].ecnt; ++i){ if (a[x].child == 0) a[x].child = a[x].edge[i]; else{ int t = a[x].child; while (a[t].sibling != 0) t = a[t].sibling; a[t].sibling = a[x].edge[i]; } makeTree(a[x].edge[i]); } } void printTree(int x){ cout << x << endl; if (a[x].child != 0) printTree(a[x].child); if (a[x].sibling != 0) printTree(a[x].sibling); } int dp(int x, int k){ if (f[x][k] != -1) return f[x][k]; int ret = -INF; for (int i = 0; i < k; ++i){ int t = dp(a[x].child, i) + dp(a[x].sibling, k - i - 1) + a[x].score; ret = max(ret, t); } ret = max(ret, dp(a[x].sibling, k)); f[x][k] = ret; return ret; } int main(){ cin >> m >> n; for (int i = 1; i <= m; ++i){ int v, w; cin >> v >> w; a[v].edge[++a[v].ecnt] = i; a[i].score = w; a[i].father = v; } makeTree(0); //printTree(0); memset(f, -1, sizeof(f)); for (int i = 0; i <= m; ++i) f[i][0] = 0; for (int i = 0; i <= n; ++i) f[0][i] = 0; cout << dp(a[0].child, n) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1082/","text":"1082 \u4e8c\u54e5\u7684\u9e45\u5858 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u9e45\u5858 */ #include <iostream> #include <set> using namespace std; const int INF = 2147483647; class Node{ public: int w = 0; set<int> child; }; Node a[100005]; int n, root = 0; int f[100005][3] = {0}; bool b[100005] = {0}; void dp(int x){ int t = INF; for (int i : a[x].child){ dp(i); f[x][0] += min(min(f[i][0], f[i][1]), f[i][2]); f[x][1] += min(f[i][0], f[i][1]); f[x][2] += min(f[i][0], f[i][1]); t = min(t, f[i][0] - min(f[i][0], f[i][1])); } f[x][0] += a[x].w; f[x][1] += t; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ int x, w, c; cin >> x >> w >> c; a[x].w = w; for (int i = 1; i <= c; ++i){ int y; cin >> y; a[x].child.insert(y); b[y] = true; } } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } dp(root); cout << min(f[root][0], f[root][1]) << endl; return 0; }","title":"1082 \u4e8c\u54e5\u7684\u9e45\u5858"},{"location":"nr/1082/#1082","text":"\u8f6c\u5230\u9898\u76ee","title":"1082 \u4e8c\u54e5\u7684\u9e45\u5858"},{"location":"nr/1082/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u9e45\u5858 */ #include <iostream> #include <set> using namespace std; const int INF = 2147483647; class Node{ public: int w = 0; set<int> child; }; Node a[100005]; int n, root = 0; int f[100005][3] = {0}; bool b[100005] = {0}; void dp(int x){ int t = INF; for (int i : a[x].child){ dp(i); f[x][0] += min(min(f[i][0], f[i][1]), f[i][2]); f[x][1] += min(f[i][0], f[i][1]); f[x][2] += min(f[i][0], f[i][1]); t = min(t, f[i][0] - min(f[i][0], f[i][1])); } f[x][0] += a[x].w; f[x][1] += t; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ int x, w, c; cin >> x >> w >> c; a[x].w = w; for (int i = 1; i <= c; ++i){ int y; cin >> y; a[x].child.insert(y); b[y] = true; } } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } dp(root); cout << min(f[root][0], f[root][1]) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1083/","text":"1083 \u8db3\u7403\u6bd4\u8d5b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8db3\u7403\u6e38\u620f */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {-1, 1, 0, 0}; const int dy[4] = {0, 0, -1, 1}; pair<int, int> q[205], tmp; int f[205][205]; bool a[205][205]; int n, m, k, x, y, ans = 0; void dp(int x, int y, int l, int d) { int front = 0, rear = 0; int i = 0; while (x >= 1 && x <= n && y >= 1 && y <= m){ if (!a[x][y]){ front = 0; rear = 0; } else{ tmp = make_pair(f[x][y], i); while (front < rear && q[rear - 1].first + i - q[rear - 1].second <= tmp.first) --rear; q[rear++] = tmp; while (front < rear && i - q[front].second > l) ++front; f[x][y] = q[front].first + i - q[front].second; ans = max(ans, f[x][y]); } ++i; x += dx[d]; y += dy[d]; } } int main(){ cin >> n >> m >> x >> y >> k; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; if (ch == '.') a[i][j] = true; else a[i][j] = false; } } memset(f, 0x80, sizeof(f)); f[x][y] = 0; while (k--){ int s, e, d, l; cin >> s >> e >> d; l = e - s + 1; if (d == 1) for (int j = 1; j <= m; ++j) dp(n, j, l, 0); else if (d == 2) for (int j = 1; j <= m; ++j) dp(1, j, l, 1); else if (d == 3) for (int i = 1; i <= n; ++i) dp(i, m, l, 2); else for (int i = 1; i <= n; ++i) dp(i, 1, l, 3); } cout << ans << endl;; return 0; }","title":"1083 \u8db3\u7403\u6bd4\u8d5b"},{"location":"nr/1083/#1083","text":"\u8f6c\u5230\u9898\u76ee","title":"1083 \u8db3\u7403\u6bd4\u8d5b"},{"location":"nr/1083/#fineartzs-solution","text":"/* \u8db3\u7403\u6e38\u620f */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {-1, 1, 0, 0}; const int dy[4] = {0, 0, -1, 1}; pair<int, int> q[205], tmp; int f[205][205]; bool a[205][205]; int n, m, k, x, y, ans = 0; void dp(int x, int y, int l, int d) { int front = 0, rear = 0; int i = 0; while (x >= 1 && x <= n && y >= 1 && y <= m){ if (!a[x][y]){ front = 0; rear = 0; } else{ tmp = make_pair(f[x][y], i); while (front < rear && q[rear - 1].first + i - q[rear - 1].second <= tmp.first) --rear; q[rear++] = tmp; while (front < rear && i - q[front].second > l) ++front; f[x][y] = q[front].first + i - q[front].second; ans = max(ans, f[x][y]); } ++i; x += dx[d]; y += dy[d]; } } int main(){ cin >> n >> m >> x >> y >> k; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; if (ch == '.') a[i][j] = true; else a[i][j] = false; } } memset(f, 0x80, sizeof(f)); f[x][y] = 0; while (k--){ int s, e, d, l; cin >> s >> e >> d; l = e - s + 1; if (d == 1) for (int j = 1; j <= m; ++j) dp(n, j, l, 0); else if (d == 2) for (int j = 1; j <= m; ++j) dp(1, j, l, 1); else if (d == 3) for (int i = 1; i <= n; ++i) dp(i, m, l, 2); else for (int i = 1; i <= n; ++i) dp(i, 1, l, 3); } cout << ans << endl;; return 0; }","title":"FineArtz's solution"},{"location":"nr/1084/","text":"1084 \u4e8c\u54e5\u7684\u5ba0\u7269 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5ba0\u7269 */ #include <iostream> #include <string> using namespace std; string a[101] = {\"0\", \"1\", \"1\", \"4\", \"38\", \"728\", \"26704\", \"1866256\", \"251548592\", \"66296291072\", \"34496488594816\", \"35641657548953344\", \"73354596206766622208\", \"301272202649664088951808\", \"2471648811030443735290891264\", \"40527680937730480234609755344896\", \"1328578958335783201008338986845427712\", \"87089689052447182841791388989051400978432\", \"11416413520434522308788674285713247919244640256\", \"2992938411601818037370034280152893935458466172698624\", \"1569215570739406346256547210377768575765884983264804405248\", \"1645471602537064877722485517800176164374001516327306287561310208\", \"3450836972295011606260171491426093685143754611532806996347023345844224\", \"14473931784581530777452916362195345689326195578125463551466449404195748970496\", \"121416458387840348322477378286414146687038407628418077332783529218671227143860518912\", \"2037032940914341967692256158580080063148397956869956844427355893688994716051486372603625472\", \"68351532186533737864736355381396298734910952426503780423683990730318777915378756861378792989392896\", \"4586995386487343986845036190980325929492297212632066142611360844233962960637520118252235915249481987129344\", \"615656218382741242234508631976838051282411931197630362747033724174222395343543109861028695816566950855890811486208\", \"165263974343528091996230919398813154847833461047104477666952257939564080953537482898938408257044203946031706125367800496128\", \"88725425253946309579607515290733826999038832348034303708272765654674479763074364231597119435621862686597717341418971119460584259584\", \"95268202520385449790227094691687836722278710954949736428196756305746453532341035148366531266372862653739009088659598082113309304400438624256\", \"204586909944926298207861553173799965921067126517774603507480126827588404754232387878919170016875623577048105576068684204467114231315623298308706926592\", \"878694093745349914731889727208157807680003171098920968952145189548012830636076748530741378813207711246134152874638123892704663922045456803250047261786444398592\", \"7547924819767483287594694542205326068855891655862820018679189530528628155893698967796630219069788201405972928386025644172169109953194652176102437455457970998547197198336\", \"129672361263353660216004848405397154497075914498088480263529787446798464815868889966259599220355751574955667311875199310825316757090836792227021420332597263591744872066219249762304\", \"4455508410978470003213152055317479855991723332650114280703483486331017198541367912550307040027205813596014620050254013798901452927850711294962075802234712748298505435020109941966616435621888\", \"306180206751230090930313674296749763317292930219833760674864513181351793147422958983304199997791891477494238067606067864147691875149221011750587805454462256284237767964756224079011437145490032917741568\", \"42081087200752140195116730773102052524009718837902621183664949269856744858385083976643391056195246283737633254986683196506525739229100562028667655727478159896469450443625002559600024194689577683162985133342982144\", \"11567161173227696466220457283329529101751379197153495724502457893891478829937149071434453800538222228465001645119757350054456753856800058471020811256328606811309950183460999195585736337722940242137574318489684508433109221376\", \"6359114105601017351375465630036218352726964545083913061809864302427743340641476112983635151514041188995967358659226381513838435962182371853731281705837980150384424607870600516842502175922529566100381861494213531965265765000213275082752\", \"6991919901710702396948942815573257427744311018004588489866790612959056357721564695830748688904669995738081555372234543689358610668809196548322563461899302515136978058611651369187392760821440875968116963440793130046454847480988052748303630065467392\", \"15375394465098365435098131065240195173750887603455691084898736566282027607324662718653380384318359771738669872579070523864682029424324656980343742654131923883848453279046887366030428581980234722002609397042921130626427482776226373410811403774539364168814821376\", \"67621699984704009571087635348261788647460730411971168452281282746962798999895717916292043207408657855232972628889146834646084600650980317820241001687549180689983916950502853108787655643356237905731863505593837387547463783553663104052737827256888296815897621036524900450304\", \"594806763388137870319868932592503661181879874998563369872608575294390559331829154567126246824792929668641338543467328561106071308881273503814138669414317911219402066314092130747535752627679688399993515689603622744525243838714230998285264232171322066511990049433899384262102238508351488\", \"10463951242026625501784363274596214619943325701401522513836100192928357652762255136769619473700702276949844553770347735730521468871772581157963359677917896206658361141741863952608795675733168160935829452838892433190712974942475048711118429563334205007874224852816312589287727030417085994911901155328\", \"368167554019320956145827247050509963076959450983143444578072117098399777382502455552633802915095691807005512740224345254318634273382517137823997743877511866703540358482988273801636313118482363728678083259725882776454656507629131210255280738244476783496709369751571318821222548711309212127848471930415455355797504\", \"25907488423318455274080473672019976083009208996271003791416218114322853582878049179546761491016196610119349803222490393175612695149120594742502991139032865749979736985340247224801444473477196529096332604358326020598992443433363048888842556850935198901353471923472154386768107635993449205071378228596636214817388982756553261056\", \"3646154850293767810262810894999553363628589110640769385457986485984919161321600546344826908488589572223649058216506920510786720770519258252897810249930214560211056122090333850686659187132094273815095247787669459869137017783625755540375408272361426098383313551230976557640520636974573279383371834513917048967432546435999569365350430111956992\", \"1026301351570055077911628972867042177680735585635225345203536190737910863123857244548313982876228994987864700400759811456244128889754306386459557887432298148719591734971030611474690885904247396313959818854940592795291449937598794070517570167551607950979266237997797283563645242105244737520881371410960067902176629829514256225641238164014573644333472284672\", \"577756298062641319815321284633539861082132919998722885657507672188606317696301924134068233518707877841769252356274834883678320922291785288952259324960085933885572481476441044041666245632947630667669900623389069655523344952222114179660086674251300523449279256078271770682664276058349275922600493471476178420154378012048571333436567365397136152469165480980158369042006016\", \"650495762166495477049126323135876318273689681848540624671370401580424011707162281131874777891951503105221076274206308369224621272710248847898644721591374081392315437731137521644741106470103228306068513445077567577759224701817392098928890368445616786745312044636747096695167005610121205887220109397673253742184348518525369694090203109381704783091461721987447307918039340904839741702144\", \"1464786236049590434905743465154834598132355497608894876510808585746419735067502787890582396494347558422474842415011089660246867245007266628607389880573882877099589550204678203845246689309630827338361387275704277378981317198263843596236997858716498559366445563601411902505934820064618988319029356625117742223082330892236724944835950440451959043477212107968975925814225544648469704696327244310651076608\", \"6596810746850441581553741638437133878444100984914995111203228311198422920021730076302736770058507457561739633654821527052663625754699898928864908678172201480861483296508425461830100080632973981464823469287933878068177995869539554196618389179088255964611967766110824001442691305558890492766731389138330826914817901785290963600400486344007295383644067266812831967815359419564822489294496368074103199128409309873963008\", \"59418788842699007286030480482037551781086816518719458901529650548505461981736007647325052554252104577614821998495391611146285973896536304263518428421038283628014629967780363129922753302892370100289203385250328504710452844933297300223410448320574275700175842947863734545488809774714537227937142556380919033925693467413145184453004990132273599027454926341233079086397901429129121226567105760262121249035781279641457326197323348312064\", \"1070393741163144887106615725518187221164827267699838924941429042678015413882651446929712001300151465871728577307205707021448851664333385933136430832515358732818320497413305015116049899373739367567209398371486986269029698657375971164924756243534674819543255950500591340656293625482134115970340292836556047012322113544254716741475859208792966031290424379672317719493307898931567517548584798871734411473994613033976601216732790555673242528784890986496\", \"38564998830736461475232360560156337966477348543296912889954776563675952005803759329026012158190250656580460811860874628507378311411897292577254418389448910905327056052797875798842792071073082430615801921085131131904757124588213704965920153847872450901008531674129047768773427247462524176465028689131927919136292147469532989878308252810375908959339599706002710056647586337338708479719120400093637067181749947785834158813571780515974374915817776558307508219923136512\", \"2778901029818375590546117527113114484672357455708956458559767524713958201136583184473289527084437311422003736261722974999190979804089170182702556345446090853597627957791428943237561460453948820826044402874700085219613186824681247053637361670079745545538760409994919879728163876182404159565945053379193278698412233683308535462584192461927046046954945918295926157611800368404072086536709250328493882019435613967167210380399155555522069960451187550123144941460117476399723285873426432\", \"400481844556464920523193301963548462516578084749184743083267818116741738265896446803172276592132293252437641736702255678378020196583340296017305874056519669809172152689985358609594809953605859607651136943082150984660224920236376533603437055104197777495922382739000180430899893144169886679392314610966836210270498841529621493656328107364628256418118251142035446109798082585681169855601232173112571965711982733300383206840363094872481786693475424067353434014392840965058481963714484088640289118355456\", \"115431032698441259178673461431539816804206560773290015329752057694361406287772982036348831580901053883786820225009164463194923913410481248523137503562832299161248644837345953402272735282023494552277991382048997937502814909766236452236042332348226712434481947847353513149957685283099674458330104764410900543839986538076131534512057453216182889638360661447159929719038137745297045422073030824702000367475935702409104944531286067327756014628229036477812226374985599170883462080044700596715126592005803474078444367642624\", \"66541459948504530753768001471967959005419270466392022376423196257352976210252231110776428917476541274201459799058134101431331651507589475543199220149255661274003622762600440522835716155938101196289870455661584211035932845926991202557502792508928257976034266748831325772712875897333588717997864632732269693862392376895484988100730881126788959023903443606984779460581668713024441641390541816676610856286270482222156605510545493102132623215776624360768719348650259733692284804333540615561426033624780283661594114483349878253572218421248\", \"76717080122566093821769685096126348533333473476467287384688464345938248178907664863997779681772756752248435944393141184684335502950038499120052644845523026290523967017049073841718549772543323063556827399978478369606041313091683152436264099738986001869449728241878051097299490346519709940072925771948423485287163683973638746946665903940559428339549671501951366758811934677713877697895985005675231034179471691071272017966072759772829253585757141696413574898893832700332786265611996951692169618777516061171657897591184709381293230866625925902597785387008\", \"176897542887905871219682320710977054236195649885063012362481396897734368357286640762534683869872454244965040941272673502081845723150073431314902876590063750291880747723373712553100967508591749025216728994450514913101518001942052715995996702853037108622706150538094527668150620325050600397804418215191951248956872701409360022148099889945949951861965724898241732379974444442496212430718580253162145373014620079716222565944061670809250442497036511157273485606161593361700328707960218011162454162007820030744669545335519576035998639857914596707003622015954868692249187713024\", \"815795925230314728472279878236737085279030008004087855200500253014521127932527128885526410079762726469052612960044757453969861227317756805998981185503567039023299711652054131188006022549457417220933970982834312592735950018140458892761438537780953919908520972424194333073566878903608241070602967242198518658785846712295881224990958086451508342599371247161586427138348503778645201994004844323438189596157833085813059876353232318194433926472472721167826033215849712613785917626426916362350843199290384456011109377462267805156630427320614561083409274195307889411889718484406121375645508304896\", \"7524389324549354397801356452497913315011856161220801079509832008387666589604883373478014222580188830567037081935247887471482015360231314985337371942258260203939385162133586803144818348737122953633073095311149299883377463508309942219401299471541246964546345431980238535104248587410994668651719506647795652245245554349367125874876857244463618620318409144382509135849823322281027831591776097430363314021419414112824899028177671521886101096498126608165633326609228360352179238517061393227845320505045325556800426634899317480155864592599566076697068950579585675093167699329114669170699282474246401375197684826112\", \"138800484180914219712302326702802178157199288232020595807277716126392223926378591106707444859275463719229793836868708566284214501034414350853953266220225267143110257976471425551046069188570083369926289319954847285366348113154356458064601023126402119434759466643127870774164330686826589960109594089450465218173504187629454166226956526893875704969830626191585408807750322734960949314956738111993543735454414687779759714418712814531990126168027465140158764806953148937003185611158186683710455705012527082070237294364612667375625499788792257633923591324431260942827864659312843059529051940423114231494336335031596966318114835791872\", \"5120834017984591508986196650065047859699487038531864872635535284283315978236936642420834010902075350279505030004929465260242709345543639607773292077878134208602538275675583291265091714165339973428948005412040306127424871883645428230099148597465376635988368766640399372989825771523406030249994650100922593829267846687164394890395819287595146104752914215989543479798744485929580105447067545921706479084744307701783961846379120774460652838797753591500884374455393738762296647298620272890585944839720089999678022333082241138676080978538250644075914296491130999134389552091536501062762239568676983303712605272693429283100038671180467889093013820932096\", \"377850858294830139838638168215802092780038016602930573386515946416793198547039558262312467737983791635617168394411969746507772874148609641823047539163751702795222543019832005050328750907817266011479872405194806971268312167361692167252264172308895865348006664059299281805475888130387673484492108151111580147260086383832520506586231416515603233997674460633596201408249791703064288265123527797821759134838692448305207214785761264716189372084001112451765465433790033294520780568581946672132819009648620644554402766169507017541323003802706124203538173216779197391804429690913463400974547381070314833068900826395193921989122329834973335902668475423445184142471801333612544\", \"55760944647969803670700104936214276703418163826995146359366204907044372012038677422264811105212208511896356887262636526183807942536962683892431622381836246229948915236688130772335083840340164566252593033456468067431824060655193648039047729492243521453659694976501348803027093149539558317506748282678449645476135444887620474073150584355618406489856724494778877248633096276333595253012324971556730152755517558771607015456132912441957343723080458999749642050073369491042934979499196330203687831072108842525817786487718330792237747903510779174647553481994747676505530130774120520992243739532835809026595726937806053709668585200132001928488893296032814032593470714031341128788015283655671808\", \"16457726003670133055417812568315364737988338091091158251312218326569690437329616374734311914582020944472605890775510313408995229945334428903149322954095977105538611859157732272142218910153195403882467339866867514689726296672183682245219818625526941796560720064398728108321973000668550555252478306592014867281505767941252819608443162177328479455349999796039100621984127936729292132133658786719597197026368569007070051265672548312538134671161616981076484145578090055142565698834977734201790225311549466577004090807674343450549348281679151820330720056062429425106600701862306503156298835813445970932240447683526593536474768158583387967420140597105075176709672146585790993414230521376105364124607719448434966528\", \"9714926707998003497718782308204867881257332841251319104019251661662078248472412849177443834719209846072890969112505190791521670568847217287900651388254009260893186449634906395947258912533825379952975574267692934453193448473582640346042005495779590606640145643546455897110212759693094531702427850930065930059087543375832598108458827966338082930996711422212365503397867678374095016967422223554998394728346746184104609217211434235921413989212902495715550346122809777850604006668985053310528899731071820378305013097600934873846566724277063928654788793525614245817619281114401978980664096560907385299343778407890641151612145820588886332311587915398642804667189516333751031708296465506171453584391360087376886911691929540273723408384\", \"11469361067346228139061290587410929131577014568110496688276418026955029594788581734004182558070243437294012019588007382083610607182844994696799404722615974341317582970970611119434169515561820251265423739294548120506992391634591611979489654468463805254079641813986025304493914559074598262421276707860129809170482330724144138654242163986215204652850047416839186796163611459903547291938328181880669569697402627328163780396917201828272931792001080746707586621220450566380523358637421182469701231595854399029891888218578194053518468936172836983839399973914348397348853954542155795507799041130970804676688024813219676288924903523361447196493001392106550459363194374483729803668023599952850411152543047134333298142753046466271137690851320100397548574867456\", \"27081263142182923705501438690346729644366169641890975200940224634899233357027305456098025828938256775730428250700042672061879467659775786109270214017400414730550717646764413685560504054752678761496333535462048459532310810850944499706114710087119300200386999778156133504707983214878525514030819131644566263775100878971333483921191196677604836038344345713681506795660383625847999025848387503252627087123810199602209736789251013592140350653789925166247304234275183401500965673264564118890108142386036612704878688584239891999402890249937747483538525730024451957228223487693576454809145508346713566109971233755721615615541699881507959564802699414518867803796875388820464217613358292766134784246846225933733964457118146376268664384930394850083875401244024404677211216194568192\", \"127887649376417730093987279874959223434721837246292331790917063950188729173028315759621896868158290081514515507040745144760792797823633908454006170576076502414693250894106361156560785379061367900176197886105345551337014727607175137429409356509566678878892301335749917768757736874986255879172148219235433109220536222947985410156430631198989839450653517682104192025553044438491302114330030708413109133455822728120385022163636885141373386501141437603043967266969398520991275859042260783846015712638067373948888022989044395018434846317186459497805536942698964388726979258686557435667015119532122951846919014762751763697421103190009550551618834333461563415885034137500289032913017481647033658280717154859412697249820107204787634625302450046563003063271237239035013300852448256747732484360232763392\", \"1207864697976360344004012227247920888639797409727122316897149158619548357003386839595277447480050222229755160424883841049667706398252985767648761505658798805705483818948145043846805798252718763198773949764524391311922585251930658943514880587114466091998359273880405562907971318653747449298492952317155131191389647143269756802329984760064400111534136685383016769482782470510189713148691904881460827613361492986302460604018243380460062237283777296680408995854722178672186340582248073608246597487997996727778923589063949568687445482828106340010509284144324249363087064053541676878960707338041805779222724163855812417132661743952010731862369503046986946390659365322689414219648115087529954241488153772440114952646316128087077458262160905070776858191151099418724403865049128440558534241986453577283804960401031258177536\", \"22815919062260124281152347745317946282499579478225597764574987977890436887342808688976104870501061001773054587258294277087629301404254109854698281411452483911515333869047289946682697200251295383986440024239768987066961455306194374925383606676134093060944618688873828831817047682632360199699859850429151216871375843121094838459770748652491707914440551120759984840014318213588376033324534706939152455147493348994191284132793119476478152895835885120922180961499244045197171870808185699701000954429438301547575023578186676196514302877768734218786100354676154662786362643297064588417951625865838644112663945438422903965631834834286845607775985393677609226691814900584152243827917896815053685577316437526380790714230190441356975781684843354219992565785219238182282944422109986937230806375424197394063092770725539384275108964882307216209608704\", \"861961051643870695033992674309167199578105149265233755210531854655231695397841004315959353027863558941657347500708643835423572563996478981306319460173986864777848780732983020805504470333843984052335038327425867973338726313713394015863184128736960592170557471580379096716220939019137394671906098154759362286405347117756282996324206888088511302786754450046253062823707670337933613136463847028931076142175904578261359112314542477854319529897272403096490917617306617230616929156849561255541209838477962351678643611991108950807979740003711227545873058144232220086179444498450303055818969391304322654078530378763631851290884183055211356745609244035732915526643359273101408520908814846151929353857331307333376242939350958475788986570007129909972502782539037568776176785630826524683118125938788719786452442536511157641824521635493463680327860150633805208792583897088\", \"65127935677153380382865185934274607003809960083882113575904452876844683838733438985378527792717887288633549869389571008816175507184003390016151103667922703813694168133543286906006619259801862725474132003554787212850475990051192824704286086540817697867429105927870186318285789727070512775058927469565476598274691716076624233000916216924267413077907582882858390035886551173428350967423049718850381838273593522869951186720847511491298899945704308588400058202402152809162079122392664547523094139833577784509259690805435447849929045565614525326648793526939236259772149276548447129383535568258395264132188956867234872718835130548777951150687288332054343674708520307204427672825585402265653936878224215857325219693714506068560692809753122953929706240310498642459877441196692449645157645608368089254403626888143912472399649232865837206145663257925780776465599877881580977029065444654317568\", \"9841855377288937415447390527231202153455842504453720133695252668347974830556252658165124696077028515425450817398864910351369537663145194651524976959489344422342678620249318340219396467577024661445943481570099095051466855916105352197401418823197333060719088251811727514193408994320463954214844162261862784685360298544690445126145717267192561783034685015351169199621832667438357641444674326219345728642642810383270263207024107718687791371935471036611514436885033062917586993481519048858779374906457859727159564998688713546817221409312620181458595605735567354514662070437659126186571537250777009752135321513030182853798578098183302050213033735441339449132035723102074102608058173098386835602150956587572082729353578408870524492053406609959895082296706792813195516720142380910984191192058619168004260360406908231467668856024213138928977873340747895988011573647696979952041806565288571629194205319609339346944\", \"2974518269629418528183287790477136251735910545127811453581427978652616595356264947596803694136956008490398064656516155566449480802126524149773164759834362082131166150716512353779536812482810691172500096955277388103877578185522501050975722169225735084006254948179019599295302692801913945714653547245381255101505823092605145670553437793402069282072525939401386025809950055516559950442695132557924347603342238606705629548222231798775806790816221090616893894075208306706441784819763638100453946855836708310557947239099829716518949394166020681049804222110845249797452263905896008961178967788697771854957750815454116222278431207930315307657684846475482296389849704058050160567727933075981675002752008068830293647504821134818557279858111732545257603978153335616168268017033759698373368401020455509630395172047291096383128279778093350191660686534827468465888318399898946663053750353392007034469364011320175688955268074582072057057509376\", \"1797985968535216664944496004358374343509215650341798479179149327882744856269384291198729303430246126786296404980032302297595321012017030109348902525782020152869169168103786838160971087949766031760966165088431500871032856892630935020296595275794596862255427336247497580566862623617828330908541493541620179354512119159465555098806510076367231285395350427706814288025394425311199341223803743711901601363242903937561139477254670558878981639393540138916953147434506441014886808593769334222234806383248792522888870969370949886460255917591946332579170909412934639579841074787276447361698764837594275020389043099798673018624087957854927708503877067844690693442538677396545931297397648367060721363215700703756001913096856289455202558557910153695779883053213934571432082681799264975524318394406468304991326159530064043518011450002265972635234478858907973613954232713746104325413245975244731376790951869506877730874537309836484170950393167194460275028036788682752\", \"2173631660667039668984700210504885053440928931228016968965086163132981468236861730220650615341556676372390169253173663975604972422799230677469382999040739918660505042707350940039158107159615121292539651123423839519892067444431141415696638802524213998886911802250235334571816037172981430612313299911451638833319256606144115247938014691467553565583171950286615569501171685975138361651226678322938521468241227063106367669095067595036366075438176281290762289972128921040048601125493529421744568045636939974591348776120862370258685194871440497997150914743247310031723729047398691202330795910597987059012621074699271039180200868097247527739438513318700030869621175396951306037350507573405975936434558250220627536245142479496350755496129335743086027107995603956511019080962065525636789266925387728572058586368191713971116529410717355420618449465142442751933353701890082063024439478090834757150128353040614478610732917566732586611767430096272067443300328432386109177489664665391726592\", \"5255518873824416903687803876194048725247752898708723075400668615965863831097504375635433308251233312048766247203558991200300620604352830581371079358415600051856585617870548568853727962171206228838685195506282971294399499303895277316297475177391396052015391373638242535040410011356735654520539030774295796715732427912629667212872847331320104357084583959675197253788558473621399678098642683473186288639035344063284608566440925823269704605624728610522888231646442049910695279679867245611325888962734642379522278023969951318701822462788591894615137353613973715030604692169572118664406895529953104274682423559238462070772015190463321220193526066575719162798151641256508174006193296918203760563494424336058173574113652876628387389451824223353697906827208646762120751479222210763512531024245609024917500334574939012212142182012886145075543595440047786301032733174842410966880567247632878258658501902293739821318940798139131150532395191264792406363668485361473716058166829221766502063622860809609374204952576\", \"25414129848153344382239046897534255136864521417635453001949051913908008017589994776563072587258641569635169539843558219339898856799795550740114907758401382615586013383249715747685160392075349258895929797263710613473430715202959682477495625471587772024353861775261592839627899201402421403611533883626952118240064757854923766827852704270112197847296922231727833551789394804850015287585616422446284637918585983652563298394561000416031695531401833364842751130703739822989388553144317621145745267154316694067048460653278566883611037700900712951971174897018912094363532275197525030498768913128642048052245473015542133101610800292377142229909140813067890327977587612374256490950151387690850702665871528622422488218998292603704602845544390430472959633468730170707212307541907704068706263624064757253792800438322442280680208276567472614596049578405156513315480908601331728074386844924953235857764254017071297807352372985532421088761665700077101926014576813351504491800867886066292771827600730820974245370379226881215895758057875963904\", \"245790382051771145194669866894836910650556797239594091009564556094208680880385711256968483532036630553012696778687561627507545193814498941635315835729920960696181542215264784065507701869720671223676101099353987093462192745536443134197781431963673038992527374561993263849109824317641227672017365759894960530209333364608880281716979214697744534329835952620212452175318901237502886135186934978829477739282741742463317312408182343727949724617066098419258568662187079326746979739256946508422770714367934068496850270170914550232625314799613867752312747219996567995096961698243188569100429655378495055153354475585733921880831879481810931891716484123049081788090773434225820431784823304849740004530328772651097505402025158298202188494201095511281651444752927982930763983954415168881036388577694117158262320578043318594452254802839305491844927280242797782517788247605610352883705938120703000495886781538988526418037366343673014976532093358437076518455391019224639618634791307581630232102879919570031098419290868853038999379573603903698174015732092112667148288\", \"4754277425205284348419700021630306277819594231233501230274079687799467644054135605503230129926332349420230389354913481405631900846560126740972623150513354604812764296700223272603691459770389554281239817726014489139642075985146416079527934723846940733028576245558806856190369354829628769259495000019520989386279686123550085284290723479476495490251306436556499879513551255369276501430084910060650993432598538521963629786218092168813008486686208663842405885584127376723206295073712408381830384872882201818580321523948863465001771326380631696080635169634702135509782794877790215871455710398557059080949521117364655342307459593315672499574566292033600369306924572956925857747918561084493161074930593618524757397139122151276957016232310604754600441814037150264405820812712473632113348468670018469205747317973765171453782809770173332276553416124997311925329492467790550540501909006793762652043767805766864940022827298142023240656641608308615139677412693510719636885245539823207642584410041148586299456069104425074059269820037128974415771475065750800677599200925738481518877425532928\", \"183922199454132071495017823964418310581035406572387504095987895436081451427269845904015231638351142645264081103180227541271451365150525668792523811951920983449796386090707905234081639758289351098916600319954314214739003095905554767950528555878593983004951826460936168704827155870671617785932969020911837828609522973050883825772466142655647998378335201711464031707332067150969028021867868389473054701483504799207493496645907024311973634384571281857910076605223416442905086352637873582453410486641390607011647949375681392616293062480185677371974876115847216728138297648805710092860746366490654417856746317198280144869511204123264164871277050086466424866703174359826517646856972142290028705846976532181422669511747014463404242288528973412024975676890338662938337757856074384364339356083599371465548188364416530842160345010023360362483494062918047030071997896814424896606706549895245984904287294230594215953285058745214997435008275358198968506044384302940532876166219914266007756627767084845862423632952768871427161354405086474339970874829101971565739027195569986512650622291178085460852417483570155618304\", \"14230290926106362696122823080900243390433637603738005980259256943076641934110047856047930936624261107065873276268866892129520861084943649470982048717667479189501485633082120086890043142529883906164212808832912392961907330376138246467342868411536805615807438750065284882454125993437721429983886048307606930604235628569909434642167805909036554588490943154103935654425049741224775566548184310090004630537149855892839604622098137866677563942134239018715827888851797693649972687262803167679273941031847686625493987462422961116672112718087518225845931540765028692301246265348320493394163085411775758928448982724437500928134715366069109427038422359115771379766765196397901369125451039366900914606586395405788872163194382539222468491685209309855588395152929300280637903265687859426941368397203392235565456592313650006533521900447920576960664398554574517989911235388198873021876268539325888745001742701006972571124700950509875664721962959074741875601534435168338346227795552921813004231344377034549191699793014816843400294624064798743130698839294408616753325638646891105123642086095450609986686265602874213403600381488503940327309049856\", \"2202030863513312636321648671199054913516907653916117901691073240331946949863609577429103609768169530057061150257812445918850882107295806716261922661873456575008462513930989865443088129815261641695694727139738398910795613789657579567145298371226907217165026098057292665267014375216701372544800681475251578425365803666392971936154604673186923792317585313347474824913333286141786013706495579188805111583422817277983447913522288753851140140298470878371671693168302912742449635443426252167133192325519362889999795065866161674664045744937691390513161259299795724130181676271790579219732523976512872421586460443531041590095088702197493073534521730651562660076260725779111547176801999555637621415828252121886867337943124107994539715634932451000531052857363478368528085250607996565755450014011136148530448605458410763120164515711184313904476263429889138719447777588955617173003740328837793642742694803800382429624785218054344673298995026566192583108066449617442357672139272143399705781655242683874485399562078829739034234890154629296748941812930969047270839666047356933906313878622053623830144119219493279649297348864882853168553417766003229354994299768397627392\", \"681495543421322523798250098264197076688919625958868418051257990807837505987067866825123436248548151617593050477933088878988725616693867642608945945631683668808920027335934509944595182753117263717153639384270889156418840143434508108959849341896430415323256371070439120964777671194974820410861700069983389120638933918384576328554056534884715070073463424017931484262224244178189712770038390094700448535327494765406085737371568739744341162316251925288406054781369086525369352729762667669545632444718852477943084555268217269638560935219999355178152037404795500578151227281876968952880289646845711858918761125794160153470339887122101679017501147006350697819037781317970228904772048069836759470844867315694361705735640487911731623505352045680782420840435221438759307816194240462082712870054773448930061307949400029335513342976500230415962364278988431128471484008507777022768323222041382259130004343803395915550804325522392895772799286658817920775143921572624046023809896700137235863078674317453334741645449227070394628081947440649638541663098093102136271335498004902830344217486971653700556946784724621786596785109259982139470453695479515213359593022702300618283691568046193527092150272\", \"421825309897901792033244672821110328299858989707320804064743460440378944278718899967483820889500393998461711016514890252423164387537957829397741981629563196442380706822615641303536830456737698720856576796868658302341222149714994387839750913288493530488399884211939106903442707727486907385104784548836801887386742034876056259719489444284360238544475786244576709606346211662844260424616033577969445316367204486111572367285640386091135291959984634422111712349759041118545253088840329164781300635291094309773199799826699372727611147119659553696450965456120066708558577226901489783972447442763036558587711792714453122484632779364568230182763680136226900406180666607672585851460988484857124096940950351734765101605500343045700786559855265307726320299273751542009158879475999601867487052671938980988256280155920054084490029016709123154004397781949851274185859499943694823590844099419935550431660671065019508782626806522506993199944432863289827772158833515744104897499056696354128803738029780167294572595638534858576429012401607594066492590155477361329834229701436120365111259179709996155203535570930542745295974256870862760463624390717318046431243895818155132716064271455360415503340367605714430365452122210697216\", \"522194440706576253345876316972208990580919049498421082022576245723338982949140665003069105356289960330012593457390089303605667555601975047929042951212257072969361472940671364497640560926303318696033977690013916299289897514430165053790577048324222670321529537703571049002002781496203041840885524183107689558500581565215216577563341157701608110023823872559743334999271082619563560280418676667879029748783809416089306700738269364207260585249367415340646003895272439817409712720628709186805339184886626135322714400892646570899815363346885190935443883452361028600618727769686519016015986764715716391321987102312006857869149534994401613005059522899531855293803271313823719971973219135479955395552948879584294859168854149701603115968970497705944630998036477284824110938251324804171310134265550546919153058666691227110757309673571239737301459200948415973231968942428964722213969080035992841969252161263696664840384740535815264710623196642175113986088252118165109143235875193394237324905378681185642555776110635771578478214224063683755982931585626906161982220149238402132222785443508999378746610588801774393984778889853240279610734678193984258732940104186823817787172451622424479651829089774622333472658481415909711059052348233311555046866944\", \"1292890812885812375326210375759313154211806521142431703162139930204968350236396725479547430643054992083384091678994104761926923090140278035592984448790716805009586451615907562797344555527547953445569311346246656769519102613509006067117867848915904121110567926032487744880576751263549555669836582853473577131677246570878306726999866626996407253193693750074690839456622301350210262608948487854303552851457588750397583838082565400229544094825591011830544878252598176845253713291152353908500013649150377819823624076948121475534934827830863105098168949697035713668331158385332977381594870339821974004772810156175706056012478014462296965405817213211526586897970505560483618297113724652703794740872652190327308714457458457671976780831051175817949061815796584223532376976086077476481020253820853076974471059429483166667385436819022696990718396965711803590967567007032387580746632670642413715993429910692606590587827599844803982723137238986268051229340705304873811721964082001288954293134307920127141244439259670441346023410871394876521183127283057449596610425438679047943453709142013860841099237821998572066845392465348422795746000762231545335664623042607618925127125687803489756219911499975270654928221265205667650525684108930707566429764080749180245487621238064939008\", \"6402085214782279240215667419755299131524078858723655272948045632556476258728081241282224086781391936405539025009341590521693193386436490558248164393639913596873843138484718638733705545361161459118962635989994244912935782863002854452377442507617461316723550726006230344853562913627216388293856589795406711937391467566905042511687052944700963643661331442779802427261444468463746079440195054078750317913034432559960393187084518849088424684193033209762743037198319778223351150580968633827175119987765536804793455915510742702612201851443845921999214636047945678379752799393177469410571489245952655702508168565110193630939307909000782817948038441995201513210380008881955309548003770230868600243884200147184249133532135457066512231145258757869051682728759963857462438544040369800435760020981848338630787860638556405691711659197515718952391739002729042333111853089655129001219247291883199006831601000416411759400499972543122010466340378214154214264753389820650904928827549477270321278381079187818606788531124987988392956165916193914784801268268235648908517360393026575942019266375548137727501265090469564111477799597596462831665874541952688731042519741567723389896236895946383694712621870846145560224747919013358384009198985492354234309963979256675597935679594702431599530353132865618694486622208\", \"63403180978367415821309274946297067883877259318587866180545192179873251234024057122438043938346934018064402935929079725551013124750893668732866656438958416877428659544947175649222226350410354053304037407285263027742656926195684920350873977031531977117393899620145508261471596492667990267374247119411938906051221560288163888494940827408883645041289107923326280594975299582732093176297559093243319651847663381189148739254118740760683251268770860610364971014257718132322662993400462723041979552544043247309413454403017490412923702397366293918458594927220825783569515516498613647493542268637194003350434213617513461273400338809813920895663463363247859385737241337948895731991543335318621562472121750689097894229554250127034442715997616911313974856673940304231994761018954589749398269172339562324862795012955362211949117823507377780394667326502146542683401056903289898178853920495032817341587170762830228787960209813642366205321384101719785933919351423732356316716472524486444036272429428153831673413788549230823082493754465058942259000583671702976617386677699167861858091938074365982017699085450997562670768862704782078193633647021017872847941986726359652935580704732361989006186837416869603398747869170555637398488742768464768452034024359320496406508094293240522745199848449629940597204965057665414817199919279965732864\", \"1255829381618851745843939813162800704298382133625846814224576543837929306862487043403613671691796278314758724772891576106178879232671738229170952547575146504508999388463189077390718663065465139512563257376721686308667894337081904473700501451284072606805263409406162948187574343746459682980041852684213198304781289243877974712637944889033542516361940449303697964287412064454816314869415430215941969303231295534182937231337233928794493597318564192804797309557098139190130815956634614416930803981119285633896897477273820223265909390628295335746137224340995704708759288876800112737285539324537940458904632694853367688632930078926069962806962151985488848240208636811697886816181397641065060234508220101117574005754861073847528126195807422137989781827241548062333268861770114890971921143176307587625777432801329694125042082997858291756521028910278742226462503170935773824014532726362279487804852642625914063586084317328008408237653234716716056792097957687674162407334579817410344391534511456377332909067033131887491200492635061656303435842265594631198130167892273698894118908473502560911713314815766049451261795858816213523278903054857664316894475748404017820593032620658376301987967016324223870860747215810014131438047371746755894742158573728541978843161985626931648804227861987028287101265196697102807792583599996464364915511454252370644570101252096\", \"49748527168543236721217601181701787859412164184544981614021132152531407544755875595715223534937387027814400236784519752457163875312653024878808819261897816182049857562175142502664920126662282397287500919615856683661037726718551357866517035838294570557312647785183961656447017236408492576412491933241124498007986482023687708270806909964726962454428889809121509126703306096801309583649294538265745551262893038667109768947942584564986046357259555432390720779636591426560199120727335150844849791136385442593615377298690191141619484579081882966457602567673475027107757696120192807009449746430724720362204881883533358914349307829848269869773943199352024084642105643418234794472904996993789612991098814405633839362168444219985270745390334404281633531610515239911600270124765918723756244113179536100218842580810350953235956905299884158637846183854907123681882696681963760189001542900172446562530778777599312587511581507032388059832452415715329931134942694903849614695379375686995163260981165532882315572043312707177653268134629524148679542470830862853196065894885604510044117513694327827461877798923014301568856988500200842727469644981284082974998272244853501444493758472723476216286626588118926382688627409464658264654757634470533785470480202198639301517931585656134842389907260888628356169810472955154515203224997997562067268287191747713068764885441400545692502662653596833677312\", \"3941484395354638233538289175687367867592105475775706532607033481929862522953984448984124904076414779518065278170783738324688922152389130205437011719923988459918771927989210378507306385597674277709820835943850912312152185369810430427235293842952042618038177698910452587876065686843021184453985614615401176263423364407780619503789421456129207959050468910855420316069710275776886905782248938603902750169283607018303335844945658961365762587223541329787394772159734244936768703203377414117876498328023783201742397734284557793518805392879159072376728619721788157628888344885071289254492212066462609897371427802672624420468887108637999413923906918609154894786217991242150407245961961210264630635727082083499613184110924860468687904057567797574662878324087753939198982072282100267692628525208200651528096222226725761759777593209326929086554425269126423894387884436123797407184297632756634823932612007791785650341799222376223152005096407550736174028700944082763172420809390328542708804075250570034803026246036242639836615637887046181963204853103334122812628083321526481217092301247280493561517877165608935730379717606928307804713776181202402762892404134887938937031472708163645278187958477215529193445999427556392813076702686366226841259047880288438181039317934007049986967628669913469712745089488991641441449029377170846478308256948772452974369303745729777296889496265230364682344462873485908123670305342226432\", \"624553132445188374261017074910616651175684707033259989385970576608272316008064282918553047835861650538769914221991117220314396825604654124698761475620179598269259451407347168821591908915006873583380941955761610066160419567573390994630710233968901049175302599016666711451478872117095481672759695244736634085608900894427917277279996666119899843535724293953977717958753458753357574723232246031618566245134658698123460418782651119733400238852030909225084923720522062420308747615009191365697834033073271039095844599773798762889402205099782304958420658723821787855439775874016767512412532198575938481672972682436959872295438912425558239249896718667429033268570400796096855935950685905131932457788106766442890916357395897157536035262349579159094919232732624415986912959633675763868654888183379449084913996554618036170262832802999896987764687885078128708244981252908659559465878438903039807006949176027373201571918960978899368559454220738639019793775514107863498115935799189994914365281539305546543929936288848983376399359033566087234260524743328530634575237604448475923058984710325860168462459215792962475145307334652023116341661884016135961156794587175220705121250776592668568939514651460613351346012177225037868348882433579230141987465079270609005162061040175430229143459252137656401517672603677784011449981446402694557290874473546041589279084003029095969861040882648929229818815574607038430536241540767276013988435192299755547347910656\", \"197928788304640974341464850666479258600695049180808534124773095918685736886422750739311447234778847629379668922704179983751531364810359217713950668062565097782274752622181167719275215689807351092393652552210337871389593058507678810223056187979434630641203353919939495644767541545786906958837361968513995391044381927429678621588331901314460099470258669197354576703557407380031846807594524889233271913479072348055039559544348544781413192221607714121652514827686561139424546526972239487807277994496241865504072090118208118502668454523872999822924264148549447534537779884400733379795206408770083054875651690478960015238056556281653478045174894788418982313952718858245870557399909731671315524677379965742000641203192670806788653922982959777967379801448037982832956836725494414074449883228976663077489903296666163245859454357672076855154287795385752729475959381491602479668526791941876464824655451499200095483798976893981760998404467355203056966910895989444496771910506370624957508433199903387685562868293528306920853313928386878452173404723245851705283387042199433227699011440553292089827210283867137777224255168276367800718781387589924414286880529284397361540991020952506223721979879403820291922270484166768214979758659415044167154680904882962898181811062835177741059706090419385648245030626512884839233314262775620355296399275958674182930499283811645655644832080683138115417619825958599349430173169550456628534028988718669931851398764813092655430959864659914522624\", \"125452273648412141401139200773089339811437122262323352216462286700734387627331522885709312904647210371328794107858418293356140610389233010890575674923332327423429917033308833625087865757067009121643735335562957720919464360279849562024268481514680519466433342816295305461792608710076067024418040646132922593872156786882042514851134725907407734998659047116141535192232282791034794601497425933135733739224548153792567839779141913680549722028773475603674523853169051845195421079685934332310882053907313995168923535704556709136009686053259752740308577712484995569783650846269720521608249582420017860918845622644663874987575160515268766971368721963159046529551370104575096202684311358624098672672476994761800126366704378281769378475834662925454186722285874859694872242026068795039642380038691501013387521486053366727435218916045301026547623117868196574350026663672938544838421549439678291079144887169351257353939537143880911795509769485297854345823362270660712007071953958048732807833151699233932553517365602355625760928908188344900652899469143373311896574182769657272933821876553379518700197938172155010185719146936187180903250543579433005278984692348282568379624191843385007057047580846112172322370992146748764340302424100769640802926078370838482052406435490036434092467614465282934547622486501083341846045800849550829377015688082924233744178977266360888077466658752803757886543953371541948150838050857811138739570190403175194723845806878286855221273591078542964296886759202533689916185534005248\"}; int main(){ int n; cin >> n; while (n != 0){ cout << a[n] << endl; cin >> n; } return 0; }","title":"1084 \u4e8c\u54e5\u7684\u5ba0\u7269"},{"location":"nr/1084/#1084","text":"\u8f6c\u5230\u9898\u76ee","title":"1084 \u4e8c\u54e5\u7684\u5ba0\u7269"},{"location":"nr/1084/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5ba0\u7269 */ #include <iostream> #include <string> using namespace std; string a[101] = {\"0\", \"1\", \"1\", \"4\", \"38\", \"728\", \"26704\", \"1866256\", \"251548592\", \"66296291072\", \"34496488594816\", \"35641657548953344\", \"73354596206766622208\", \"301272202649664088951808\", \"2471648811030443735290891264\", \"40527680937730480234609755344896\", \"1328578958335783201008338986845427712\", \"87089689052447182841791388989051400978432\", \"11416413520434522308788674285713247919244640256\", \"2992938411601818037370034280152893935458466172698624\", \"1569215570739406346256547210377768575765884983264804405248\", \"1645471602537064877722485517800176164374001516327306287561310208\", \"3450836972295011606260171491426093685143754611532806996347023345844224\", \"14473931784581530777452916362195345689326195578125463551466449404195748970496\", \"121416458387840348322477378286414146687038407628418077332783529218671227143860518912\", \"2037032940914341967692256158580080063148397956869956844427355893688994716051486372603625472\", \"68351532186533737864736355381396298734910952426503780423683990730318777915378756861378792989392896\", \"4586995386487343986845036190980325929492297212632066142611360844233962960637520118252235915249481987129344\", \"615656218382741242234508631976838051282411931197630362747033724174222395343543109861028695816566950855890811486208\", \"165263974343528091996230919398813154847833461047104477666952257939564080953537482898938408257044203946031706125367800496128\", \"88725425253946309579607515290733826999038832348034303708272765654674479763074364231597119435621862686597717341418971119460584259584\", \"95268202520385449790227094691687836722278710954949736428196756305746453532341035148366531266372862653739009088659598082113309304400438624256\", \"204586909944926298207861553173799965921067126517774603507480126827588404754232387878919170016875623577048105576068684204467114231315623298308706926592\", \"878694093745349914731889727208157807680003171098920968952145189548012830636076748530741378813207711246134152874638123892704663922045456803250047261786444398592\", \"7547924819767483287594694542205326068855891655862820018679189530528628155893698967796630219069788201405972928386025644172169109953194652176102437455457970998547197198336\", \"129672361263353660216004848405397154497075914498088480263529787446798464815868889966259599220355751574955667311875199310825316757090836792227021420332597263591744872066219249762304\", \"4455508410978470003213152055317479855991723332650114280703483486331017198541367912550307040027205813596014620050254013798901452927850711294962075802234712748298505435020109941966616435621888\", \"306180206751230090930313674296749763317292930219833760674864513181351793147422958983304199997791891477494238067606067864147691875149221011750587805454462256284237767964756224079011437145490032917741568\", \"42081087200752140195116730773102052524009718837902621183664949269856744858385083976643391056195246283737633254986683196506525739229100562028667655727478159896469450443625002559600024194689577683162985133342982144\", \"11567161173227696466220457283329529101751379197153495724502457893891478829937149071434453800538222228465001645119757350054456753856800058471020811256328606811309950183460999195585736337722940242137574318489684508433109221376\", \"6359114105601017351375465630036218352726964545083913061809864302427743340641476112983635151514041188995967358659226381513838435962182371853731281705837980150384424607870600516842502175922529566100381861494213531965265765000213275082752\", \"6991919901710702396948942815573257427744311018004588489866790612959056357721564695830748688904669995738081555372234543689358610668809196548322563461899302515136978058611651369187392760821440875968116963440793130046454847480988052748303630065467392\", \"15375394465098365435098131065240195173750887603455691084898736566282027607324662718653380384318359771738669872579070523864682029424324656980343742654131923883848453279046887366030428581980234722002609397042921130626427482776226373410811403774539364168814821376\", \"67621699984704009571087635348261788647460730411971168452281282746962798999895717916292043207408657855232972628889146834646084600650980317820241001687549180689983916950502853108787655643356237905731863505593837387547463783553663104052737827256888296815897621036524900450304\", \"594806763388137870319868932592503661181879874998563369872608575294390559331829154567126246824792929668641338543467328561106071308881273503814138669414317911219402066314092130747535752627679688399993515689603622744525243838714230998285264232171322066511990049433899384262102238508351488\", \"10463951242026625501784363274596214619943325701401522513836100192928357652762255136769619473700702276949844553770347735730521468871772581157963359677917896206658361141741863952608795675733168160935829452838892433190712974942475048711118429563334205007874224852816312589287727030417085994911901155328\", \"368167554019320956145827247050509963076959450983143444578072117098399777382502455552633802915095691807005512740224345254318634273382517137823997743877511866703540358482988273801636313118482363728678083259725882776454656507629131210255280738244476783496709369751571318821222548711309212127848471930415455355797504\", \"25907488423318455274080473672019976083009208996271003791416218114322853582878049179546761491016196610119349803222490393175612695149120594742502991139032865749979736985340247224801444473477196529096332604358326020598992443433363048888842556850935198901353471923472154386768107635993449205071378228596636214817388982756553261056\", \"3646154850293767810262810894999553363628589110640769385457986485984919161321600546344826908488589572223649058216506920510786720770519258252897810249930214560211056122090333850686659187132094273815095247787669459869137017783625755540375408272361426098383313551230976557640520636974573279383371834513917048967432546435999569365350430111956992\", \"1026301351570055077911628972867042177680735585635225345203536190737910863123857244548313982876228994987864700400759811456244128889754306386459557887432298148719591734971030611474690885904247396313959818854940592795291449937598794070517570167551607950979266237997797283563645242105244737520881371410960067902176629829514256225641238164014573644333472284672\", \"577756298062641319815321284633539861082132919998722885657507672188606317696301924134068233518707877841769252356274834883678320922291785288952259324960085933885572481476441044041666245632947630667669900623389069655523344952222114179660086674251300523449279256078271770682664276058349275922600493471476178420154378012048571333436567365397136152469165480980158369042006016\", \"650495762166495477049126323135876318273689681848540624671370401580424011707162281131874777891951503105221076274206308369224621272710248847898644721591374081392315437731137521644741106470103228306068513445077567577759224701817392098928890368445616786745312044636747096695167005610121205887220109397673253742184348518525369694090203109381704783091461721987447307918039340904839741702144\", \"1464786236049590434905743465154834598132355497608894876510808585746419735067502787890582396494347558422474842415011089660246867245007266628607389880573882877099589550204678203845246689309630827338361387275704277378981317198263843596236997858716498559366445563601411902505934820064618988319029356625117742223082330892236724944835950440451959043477212107968975925814225544648469704696327244310651076608\", \"6596810746850441581553741638437133878444100984914995111203228311198422920021730076302736770058507457561739633654821527052663625754699898928864908678172201480861483296508425461830100080632973981464823469287933878068177995869539554196618389179088255964611967766110824001442691305558890492766731389138330826914817901785290963600400486344007295383644067266812831967815359419564822489294496368074103199128409309873963008\", \"59418788842699007286030480482037551781086816518719458901529650548505461981736007647325052554252104577614821998495391611146285973896536304263518428421038283628014629967780363129922753302892370100289203385250328504710452844933297300223410448320574275700175842947863734545488809774714537227937142556380919033925693467413145184453004990132273599027454926341233079086397901429129121226567105760262121249035781279641457326197323348312064\", \"1070393741163144887106615725518187221164827267699838924941429042678015413882651446929712001300151465871728577307205707021448851664333385933136430832515358732818320497413305015116049899373739367567209398371486986269029698657375971164924756243534674819543255950500591340656293625482134115970340292836556047012322113544254716741475859208792966031290424379672317719493307898931567517548584798871734411473994613033976601216732790555673242528784890986496\", \"38564998830736461475232360560156337966477348543296912889954776563675952005803759329026012158190250656580460811860874628507378311411897292577254418389448910905327056052797875798842792071073082430615801921085131131904757124588213704965920153847872450901008531674129047768773427247462524176465028689131927919136292147469532989878308252810375908959339599706002710056647586337338708479719120400093637067181749947785834158813571780515974374915817776558307508219923136512\", \"2778901029818375590546117527113114484672357455708956458559767524713958201136583184473289527084437311422003736261722974999190979804089170182702556345446090853597627957791428943237561460453948820826044402874700085219613186824681247053637361670079745545538760409994919879728163876182404159565945053379193278698412233683308535462584192461927046046954945918295926157611800368404072086536709250328493882019435613967167210380399155555522069960451187550123144941460117476399723285873426432\", \"400481844556464920523193301963548462516578084749184743083267818116741738265896446803172276592132293252437641736702255678378020196583340296017305874056519669809172152689985358609594809953605859607651136943082150984660224920236376533603437055104197777495922382739000180430899893144169886679392314610966836210270498841529621493656328107364628256418118251142035446109798082585681169855601232173112571965711982733300383206840363094872481786693475424067353434014392840965058481963714484088640289118355456\", \"115431032698441259178673461431539816804206560773290015329752057694361406287772982036348831580901053883786820225009164463194923913410481248523137503562832299161248644837345953402272735282023494552277991382048997937502814909766236452236042332348226712434481947847353513149957685283099674458330104764410900543839986538076131534512057453216182889638360661447159929719038137745297045422073030824702000367475935702409104944531286067327756014628229036477812226374985599170883462080044700596715126592005803474078444367642624\", \"66541459948504530753768001471967959005419270466392022376423196257352976210252231110776428917476541274201459799058134101431331651507589475543199220149255661274003622762600440522835716155938101196289870455661584211035932845926991202557502792508928257976034266748831325772712875897333588717997864632732269693862392376895484988100730881126788959023903443606984779460581668713024441641390541816676610856286270482222156605510545493102132623215776624360768719348650259733692284804333540615561426033624780283661594114483349878253572218421248\", \"76717080122566093821769685096126348533333473476467287384688464345938248178907664863997779681772756752248435944393141184684335502950038499120052644845523026290523967017049073841718549772543323063556827399978478369606041313091683152436264099738986001869449728241878051097299490346519709940072925771948423485287163683973638746946665903940559428339549671501951366758811934677713877697895985005675231034179471691071272017966072759772829253585757141696413574898893832700332786265611996951692169618777516061171657897591184709381293230866625925902597785387008\", \"176897542887905871219682320710977054236195649885063012362481396897734368357286640762534683869872454244965040941272673502081845723150073431314902876590063750291880747723373712553100967508591749025216728994450514913101518001942052715995996702853037108622706150538094527668150620325050600397804418215191951248956872701409360022148099889945949951861965724898241732379974444442496212430718580253162145373014620079716222565944061670809250442497036511157273485606161593361700328707960218011162454162007820030744669545335519576035998639857914596707003622015954868692249187713024\", \"815795925230314728472279878236737085279030008004087855200500253014521127932527128885526410079762726469052612960044757453969861227317756805998981185503567039023299711652054131188006022549457417220933970982834312592735950018140458892761438537780953919908520972424194333073566878903608241070602967242198518658785846712295881224990958086451508342599371247161586427138348503778645201994004844323438189596157833085813059876353232318194433926472472721167826033215849712613785917626426916362350843199290384456011109377462267805156630427320614561083409274195307889411889718484406121375645508304896\", \"7524389324549354397801356452497913315011856161220801079509832008387666589604883373478014222580188830567037081935247887471482015360231314985337371942258260203939385162133586803144818348737122953633073095311149299883377463508309942219401299471541246964546345431980238535104248587410994668651719506647795652245245554349367125874876857244463618620318409144382509135849823322281027831591776097430363314021419414112824899028177671521886101096498126608165633326609228360352179238517061393227845320505045325556800426634899317480155864592599566076697068950579585675093167699329114669170699282474246401375197684826112\", \"138800484180914219712302326702802178157199288232020595807277716126392223926378591106707444859275463719229793836868708566284214501034414350853953266220225267143110257976471425551046069188570083369926289319954847285366348113154356458064601023126402119434759466643127870774164330686826589960109594089450465218173504187629454166226956526893875704969830626191585408807750322734960949314956738111993543735454414687779759714418712814531990126168027465140158764806953148937003185611158186683710455705012527082070237294364612667375625499788792257633923591324431260942827864659312843059529051940423114231494336335031596966318114835791872\", \"5120834017984591508986196650065047859699487038531864872635535284283315978236936642420834010902075350279505030004929465260242709345543639607773292077878134208602538275675583291265091714165339973428948005412040306127424871883645428230099148597465376635988368766640399372989825771523406030249994650100922593829267846687164394890395819287595146104752914215989543479798744485929580105447067545921706479084744307701783961846379120774460652838797753591500884374455393738762296647298620272890585944839720089999678022333082241138676080978538250644075914296491130999134389552091536501062762239568676983303712605272693429283100038671180467889093013820932096\", \"377850858294830139838638168215802092780038016602930573386515946416793198547039558262312467737983791635617168394411969746507772874148609641823047539163751702795222543019832005050328750907817266011479872405194806971268312167361692167252264172308895865348006664059299281805475888130387673484492108151111580147260086383832520506586231416515603233997674460633596201408249791703064288265123527797821759134838692448305207214785761264716189372084001112451765465433790033294520780568581946672132819009648620644554402766169507017541323003802706124203538173216779197391804429690913463400974547381070314833068900826395193921989122329834973335902668475423445184142471801333612544\", \"55760944647969803670700104936214276703418163826995146359366204907044372012038677422264811105212208511896356887262636526183807942536962683892431622381836246229948915236688130772335083840340164566252593033456468067431824060655193648039047729492243521453659694976501348803027093149539558317506748282678449645476135444887620474073150584355618406489856724494778877248633096276333595253012324971556730152755517558771607015456132912441957343723080458999749642050073369491042934979499196330203687831072108842525817786487718330792237747903510779174647553481994747676505530130774120520992243739532835809026595726937806053709668585200132001928488893296032814032593470714031341128788015283655671808\", \"16457726003670133055417812568315364737988338091091158251312218326569690437329616374734311914582020944472605890775510313408995229945334428903149322954095977105538611859157732272142218910153195403882467339866867514689726296672183682245219818625526941796560720064398728108321973000668550555252478306592014867281505767941252819608443162177328479455349999796039100621984127936729292132133658786719597197026368569007070051265672548312538134671161616981076484145578090055142565698834977734201790225311549466577004090807674343450549348281679151820330720056062429425106600701862306503156298835813445970932240447683526593536474768158583387967420140597105075176709672146585790993414230521376105364124607719448434966528\", \"9714926707998003497718782308204867881257332841251319104019251661662078248472412849177443834719209846072890969112505190791521670568847217287900651388254009260893186449634906395947258912533825379952975574267692934453193448473582640346042005495779590606640145643546455897110212759693094531702427850930065930059087543375832598108458827966338082930996711422212365503397867678374095016967422223554998394728346746184104609217211434235921413989212902495715550346122809777850604006668985053310528899731071820378305013097600934873846566724277063928654788793525614245817619281114401978980664096560907385299343778407890641151612145820588886332311587915398642804667189516333751031708296465506171453584391360087376886911691929540273723408384\", \"11469361067346228139061290587410929131577014568110496688276418026955029594788581734004182558070243437294012019588007382083610607182844994696799404722615974341317582970970611119434169515561820251265423739294548120506992391634591611979489654468463805254079641813986025304493914559074598262421276707860129809170482330724144138654242163986215204652850047416839186796163611459903547291938328181880669569697402627328163780396917201828272931792001080746707586621220450566380523358637421182469701231595854399029891888218578194053518468936172836983839399973914348397348853954542155795507799041130970804676688024813219676288924903523361447196493001392106550459363194374483729803668023599952850411152543047134333298142753046466271137690851320100397548574867456\", \"27081263142182923705501438690346729644366169641890975200940224634899233357027305456098025828938256775730428250700042672061879467659775786109270214017400414730550717646764413685560504054752678761496333535462048459532310810850944499706114710087119300200386999778156133504707983214878525514030819131644566263775100878971333483921191196677604836038344345713681506795660383625847999025848387503252627087123810199602209736789251013592140350653789925166247304234275183401500965673264564118890108142386036612704878688584239891999402890249937747483538525730024451957228223487693576454809145508346713566109971233755721615615541699881507959564802699414518867803796875388820464217613358292766134784246846225933733964457118146376268664384930394850083875401244024404677211216194568192\", \"127887649376417730093987279874959223434721837246292331790917063950188729173028315759621896868158290081514515507040745144760792797823633908454006170576076502414693250894106361156560785379061367900176197886105345551337014727607175137429409356509566678878892301335749917768757736874986255879172148219235433109220536222947985410156430631198989839450653517682104192025553044438491302114330030708413109133455822728120385022163636885141373386501141437603043967266969398520991275859042260783846015712638067373948888022989044395018434846317186459497805536942698964388726979258686557435667015119532122951846919014762751763697421103190009550551618834333461563415885034137500289032913017481647033658280717154859412697249820107204787634625302450046563003063271237239035013300852448256747732484360232763392\", \"1207864697976360344004012227247920888639797409727122316897149158619548357003386839595277447480050222229755160424883841049667706398252985767648761505658798805705483818948145043846805798252718763198773949764524391311922585251930658943514880587114466091998359273880405562907971318653747449298492952317155131191389647143269756802329984760064400111534136685383016769482782470510189713148691904881460827613361492986302460604018243380460062237283777296680408995854722178672186340582248073608246597487997996727778923589063949568687445482828106340010509284144324249363087064053541676878960707338041805779222724163855812417132661743952010731862369503046986946390659365322689414219648115087529954241488153772440114952646316128087077458262160905070776858191151099418724403865049128440558534241986453577283804960401031258177536\", \"22815919062260124281152347745317946282499579478225597764574987977890436887342808688976104870501061001773054587258294277087629301404254109854698281411452483911515333869047289946682697200251295383986440024239768987066961455306194374925383606676134093060944618688873828831817047682632360199699859850429151216871375843121094838459770748652491707914440551120759984840014318213588376033324534706939152455147493348994191284132793119476478152895835885120922180961499244045197171870808185699701000954429438301547575023578186676196514302877768734218786100354676154662786362643297064588417951625865838644112663945438422903965631834834286845607775985393677609226691814900584152243827917896815053685577316437526380790714230190441356975781684843354219992565785219238182282944422109986937230806375424197394063092770725539384275108964882307216209608704\", \"861961051643870695033992674309167199578105149265233755210531854655231695397841004315959353027863558941657347500708643835423572563996478981306319460173986864777848780732983020805504470333843984052335038327425867973338726313713394015863184128736960592170557471580379096716220939019137394671906098154759362286405347117756282996324206888088511302786754450046253062823707670337933613136463847028931076142175904578261359112314542477854319529897272403096490917617306617230616929156849561255541209838477962351678643611991108950807979740003711227545873058144232220086179444498450303055818969391304322654078530378763631851290884183055211356745609244035732915526643359273101408520908814846151929353857331307333376242939350958475788986570007129909972502782539037568776176785630826524683118125938788719786452442536511157641824521635493463680327860150633805208792583897088\", \"65127935677153380382865185934274607003809960083882113575904452876844683838733438985378527792717887288633549869389571008816175507184003390016151103667922703813694168133543286906006619259801862725474132003554787212850475990051192824704286086540817697867429105927870186318285789727070512775058927469565476598274691716076624233000916216924267413077907582882858390035886551173428350967423049718850381838273593522869951186720847511491298899945704308588400058202402152809162079122392664547523094139833577784509259690805435447849929045565614525326648793526939236259772149276548447129383535568258395264132188956867234872718835130548777951150687288332054343674708520307204427672825585402265653936878224215857325219693714506068560692809753122953929706240310498642459877441196692449645157645608368089254403626888143912472399649232865837206145663257925780776465599877881580977029065444654317568\", \"9841855377288937415447390527231202153455842504453720133695252668347974830556252658165124696077028515425450817398864910351369537663145194651524976959489344422342678620249318340219396467577024661445943481570099095051466855916105352197401418823197333060719088251811727514193408994320463954214844162261862784685360298544690445126145717267192561783034685015351169199621832667438357641444674326219345728642642810383270263207024107718687791371935471036611514436885033062917586993481519048858779374906457859727159564998688713546817221409312620181458595605735567354514662070437659126186571537250777009752135321513030182853798578098183302050213033735441339449132035723102074102608058173098386835602150956587572082729353578408870524492053406609959895082296706792813195516720142380910984191192058619168004260360406908231467668856024213138928977873340747895988011573647696979952041806565288571629194205319609339346944\", \"2974518269629418528183287790477136251735910545127811453581427978652616595356264947596803694136956008490398064656516155566449480802126524149773164759834362082131166150716512353779536812482810691172500096955277388103877578185522501050975722169225735084006254948179019599295302692801913945714653547245381255101505823092605145670553437793402069282072525939401386025809950055516559950442695132557924347603342238606705629548222231798775806790816221090616893894075208306706441784819763638100453946855836708310557947239099829716518949394166020681049804222110845249797452263905896008961178967788697771854957750815454116222278431207930315307657684846475482296389849704058050160567727933075981675002752008068830293647504821134818557279858111732545257603978153335616168268017033759698373368401020455509630395172047291096383128279778093350191660686534827468465888318399898946663053750353392007034469364011320175688955268074582072057057509376\", \"1797985968535216664944496004358374343509215650341798479179149327882744856269384291198729303430246126786296404980032302297595321012017030109348902525782020152869169168103786838160971087949766031760966165088431500871032856892630935020296595275794596862255427336247497580566862623617828330908541493541620179354512119159465555098806510076367231285395350427706814288025394425311199341223803743711901601363242903937561139477254670558878981639393540138916953147434506441014886808593769334222234806383248792522888870969370949886460255917591946332579170909412934639579841074787276447361698764837594275020389043099798673018624087957854927708503877067844690693442538677396545931297397648367060721363215700703756001913096856289455202558557910153695779883053213934571432082681799264975524318394406468304991326159530064043518011450002265972635234478858907973613954232713746104325413245975244731376790951869506877730874537309836484170950393167194460275028036788682752\", \"2173631660667039668984700210504885053440928931228016968965086163132981468236861730220650615341556676372390169253173663975604972422799230677469382999040739918660505042707350940039158107159615121292539651123423839519892067444431141415696638802524213998886911802250235334571816037172981430612313299911451638833319256606144115247938014691467553565583171950286615569501171685975138361651226678322938521468241227063106367669095067595036366075438176281290762289972128921040048601125493529421744568045636939974591348776120862370258685194871440497997150914743247310031723729047398691202330795910597987059012621074699271039180200868097247527739438513318700030869621175396951306037350507573405975936434558250220627536245142479496350755496129335743086027107995603956511019080962065525636789266925387728572058586368191713971116529410717355420618449465142442751933353701890082063024439478090834757150128353040614478610732917566732586611767430096272067443300328432386109177489664665391726592\", \"5255518873824416903687803876194048725247752898708723075400668615965863831097504375635433308251233312048766247203558991200300620604352830581371079358415600051856585617870548568853727962171206228838685195506282971294399499303895277316297475177391396052015391373638242535040410011356735654520539030774295796715732427912629667212872847331320104357084583959675197253788558473621399678098642683473186288639035344063284608566440925823269704605624728610522888231646442049910695279679867245611325888962734642379522278023969951318701822462788591894615137353613973715030604692169572118664406895529953104274682423559238462070772015190463321220193526066575719162798151641256508174006193296918203760563494424336058173574113652876628387389451824223353697906827208646762120751479222210763512531024245609024917500334574939012212142182012886145075543595440047786301032733174842410966880567247632878258658501902293739821318940798139131150532395191264792406363668485361473716058166829221766502063622860809609374204952576\", \"25414129848153344382239046897534255136864521417635453001949051913908008017589994776563072587258641569635169539843558219339898856799795550740114907758401382615586013383249715747685160392075349258895929797263710613473430715202959682477495625471587772024353861775261592839627899201402421403611533883626952118240064757854923766827852704270112197847296922231727833551789394804850015287585616422446284637918585983652563298394561000416031695531401833364842751130703739822989388553144317621145745267154316694067048460653278566883611037700900712951971174897018912094363532275197525030498768913128642048052245473015542133101610800292377142229909140813067890327977587612374256490950151387690850702665871528622422488218998292603704602845544390430472959633468730170707212307541907704068706263624064757253792800438322442280680208276567472614596049578405156513315480908601331728074386844924953235857764254017071297807352372985532421088761665700077101926014576813351504491800867886066292771827600730820974245370379226881215895758057875963904\", \"245790382051771145194669866894836910650556797239594091009564556094208680880385711256968483532036630553012696778687561627507545193814498941635315835729920960696181542215264784065507701869720671223676101099353987093462192745536443134197781431963673038992527374561993263849109824317641227672017365759894960530209333364608880281716979214697744534329835952620212452175318901237502886135186934978829477739282741742463317312408182343727949724617066098419258568662187079326746979739256946508422770714367934068496850270170914550232625314799613867752312747219996567995096961698243188569100429655378495055153354475585733921880831879481810931891716484123049081788090773434225820431784823304849740004530328772651097505402025158298202188494201095511281651444752927982930763983954415168881036388577694117158262320578043318594452254802839305491844927280242797782517788247605610352883705938120703000495886781538988526418037366343673014976532093358437076518455391019224639618634791307581630232102879919570031098419290868853038999379573603903698174015732092112667148288\", \"4754277425205284348419700021630306277819594231233501230274079687799467644054135605503230129926332349420230389354913481405631900846560126740972623150513354604812764296700223272603691459770389554281239817726014489139642075985146416079527934723846940733028576245558806856190369354829628769259495000019520989386279686123550085284290723479476495490251306436556499879513551255369276501430084910060650993432598538521963629786218092168813008486686208663842405885584127376723206295073712408381830384872882201818580321523948863465001771326380631696080635169634702135509782794877790215871455710398557059080949521117364655342307459593315672499574566292033600369306924572956925857747918561084493161074930593618524757397139122151276957016232310604754600441814037150264405820812712473632113348468670018469205747317973765171453782809770173332276553416124997311925329492467790550540501909006793762652043767805766864940022827298142023240656641608308615139677412693510719636885245539823207642584410041148586299456069104425074059269820037128974415771475065750800677599200925738481518877425532928\", \"183922199454132071495017823964418310581035406572387504095987895436081451427269845904015231638351142645264081103180227541271451365150525668792523811951920983449796386090707905234081639758289351098916600319954314214739003095905554767950528555878593983004951826460936168704827155870671617785932969020911837828609522973050883825772466142655647998378335201711464031707332067150969028021867868389473054701483504799207493496645907024311973634384571281857910076605223416442905086352637873582453410486641390607011647949375681392616293062480185677371974876115847216728138297648805710092860746366490654417856746317198280144869511204123264164871277050086466424866703174359826517646856972142290028705846976532181422669511747014463404242288528973412024975676890338662938337757856074384364339356083599371465548188364416530842160345010023360362483494062918047030071997896814424896606706549895245984904287294230594215953285058745214997435008275358198968506044384302940532876166219914266007756627767084845862423632952768871427161354405086474339970874829101971565739027195569986512650622291178085460852417483570155618304\", \"14230290926106362696122823080900243390433637603738005980259256943076641934110047856047930936624261107065873276268866892129520861084943649470982048717667479189501485633082120086890043142529883906164212808832912392961907330376138246467342868411536805615807438750065284882454125993437721429983886048307606930604235628569909434642167805909036554588490943154103935654425049741224775566548184310090004630537149855892839604622098137866677563942134239018715827888851797693649972687262803167679273941031847686625493987462422961116672112718087518225845931540765028692301246265348320493394163085411775758928448982724437500928134715366069109427038422359115771379766765196397901369125451039366900914606586395405788872163194382539222468491685209309855588395152929300280637903265687859426941368397203392235565456592313650006533521900447920576960664398554574517989911235388198873021876268539325888745001742701006972571124700950509875664721962959074741875601534435168338346227795552921813004231344377034549191699793014816843400294624064798743130698839294408616753325638646891105123642086095450609986686265602874213403600381488503940327309049856\", \"2202030863513312636321648671199054913516907653916117901691073240331946949863609577429103609768169530057061150257812445918850882107295806716261922661873456575008462513930989865443088129815261641695694727139738398910795613789657579567145298371226907217165026098057292665267014375216701372544800681475251578425365803666392971936154604673186923792317585313347474824913333286141786013706495579188805111583422817277983447913522288753851140140298470878371671693168302912742449635443426252167133192325519362889999795065866161674664045744937691390513161259299795724130181676271790579219732523976512872421586460443531041590095088702197493073534521730651562660076260725779111547176801999555637621415828252121886867337943124107994539715634932451000531052857363478368528085250607996565755450014011136148530448605458410763120164515711184313904476263429889138719447777588955617173003740328837793642742694803800382429624785218054344673298995026566192583108066449617442357672139272143399705781655242683874485399562078829739034234890154629296748941812930969047270839666047356933906313878622053623830144119219493279649297348864882853168553417766003229354994299768397627392\", \"681495543421322523798250098264197076688919625958868418051257990807837505987067866825123436248548151617593050477933088878988725616693867642608945945631683668808920027335934509944595182753117263717153639384270889156418840143434508108959849341896430415323256371070439120964777671194974820410861700069983389120638933918384576328554056534884715070073463424017931484262224244178189712770038390094700448535327494765406085737371568739744341162316251925288406054781369086525369352729762667669545632444718852477943084555268217269638560935219999355178152037404795500578151227281876968952880289646845711858918761125794160153470339887122101679017501147006350697819037781317970228904772048069836759470844867315694361705735640487911731623505352045680782420840435221438759307816194240462082712870054773448930061307949400029335513342976500230415962364278988431128471484008507777022768323222041382259130004343803395915550804325522392895772799286658817920775143921572624046023809896700137235863078674317453334741645449227070394628081947440649638541663098093102136271335498004902830344217486971653700556946784724621786596785109259982139470453695479515213359593022702300618283691568046193527092150272\", \"421825309897901792033244672821110328299858989707320804064743460440378944278718899967483820889500393998461711016514890252423164387537957829397741981629563196442380706822615641303536830456737698720856576796868658302341222149714994387839750913288493530488399884211939106903442707727486907385104784548836801887386742034876056259719489444284360238544475786244576709606346211662844260424616033577969445316367204486111572367285640386091135291959984634422111712349759041118545253088840329164781300635291094309773199799826699372727611147119659553696450965456120066708558577226901489783972447442763036558587711792714453122484632779364568230182763680136226900406180666607672585851460988484857124096940950351734765101605500343045700786559855265307726320299273751542009158879475999601867487052671938980988256280155920054084490029016709123154004397781949851274185859499943694823590844099419935550431660671065019508782626806522506993199944432863289827772158833515744104897499056696354128803738029780167294572595638534858576429012401607594066492590155477361329834229701436120365111259179709996155203535570930542745295974256870862760463624390717318046431243895818155132716064271455360415503340367605714430365452122210697216\", \"522194440706576253345876316972208990580919049498421082022576245723338982949140665003069105356289960330012593457390089303605667555601975047929042951212257072969361472940671364497640560926303318696033977690013916299289897514430165053790577048324222670321529537703571049002002781496203041840885524183107689558500581565215216577563341157701608110023823872559743334999271082619563560280418676667879029748783809416089306700738269364207260585249367415340646003895272439817409712720628709186805339184886626135322714400892646570899815363346885190935443883452361028600618727769686519016015986764715716391321987102312006857869149534994401613005059522899531855293803271313823719971973219135479955395552948879584294859168854149701603115968970497705944630998036477284824110938251324804171310134265550546919153058666691227110757309673571239737301459200948415973231968942428964722213969080035992841969252161263696664840384740535815264710623196642175113986088252118165109143235875193394237324905378681185642555776110635771578478214224063683755982931585626906161982220149238402132222785443508999378746610588801774393984778889853240279610734678193984258732940104186823817787172451622424479651829089774622333472658481415909711059052348233311555046866944\", \"1292890812885812375326210375759313154211806521142431703162139930204968350236396725479547430643054992083384091678994104761926923090140278035592984448790716805009586451615907562797344555527547953445569311346246656769519102613509006067117867848915904121110567926032487744880576751263549555669836582853473577131677246570878306726999866626996407253193693750074690839456622301350210262608948487854303552851457588750397583838082565400229544094825591011830544878252598176845253713291152353908500013649150377819823624076948121475534934827830863105098168949697035713668331158385332977381594870339821974004772810156175706056012478014462296965405817213211526586897970505560483618297113724652703794740872652190327308714457458457671976780831051175817949061815796584223532376976086077476481020253820853076974471059429483166667385436819022696990718396965711803590967567007032387580746632670642413715993429910692606590587827599844803982723137238986268051229340705304873811721964082001288954293134307920127141244439259670441346023410871394876521183127283057449596610425438679047943453709142013860841099237821998572066845392465348422795746000762231545335664623042607618925127125687803489756219911499975270654928221265205667650525684108930707566429764080749180245487621238064939008\", \"6402085214782279240215667419755299131524078858723655272948045632556476258728081241282224086781391936405539025009341590521693193386436490558248164393639913596873843138484718638733705545361161459118962635989994244912935782863002854452377442507617461316723550726006230344853562913627216388293856589795406711937391467566905042511687052944700963643661331442779802427261444468463746079440195054078750317913034432559960393187084518849088424684193033209762743037198319778223351150580968633827175119987765536804793455915510742702612201851443845921999214636047945678379752799393177469410571489245952655702508168565110193630939307909000782817948038441995201513210380008881955309548003770230868600243884200147184249133532135457066512231145258757869051682728759963857462438544040369800435760020981848338630787860638556405691711659197515718952391739002729042333111853089655129001219247291883199006831601000416411759400499972543122010466340378214154214264753389820650904928827549477270321278381079187818606788531124987988392956165916193914784801268268235648908517360393026575942019266375548137727501265090469564111477799597596462831665874541952688731042519741567723389896236895946383694712621870846145560224747919013358384009198985492354234309963979256675597935679594702431599530353132865618694486622208\", \"63403180978367415821309274946297067883877259318587866180545192179873251234024057122438043938346934018064402935929079725551013124750893668732866656438958416877428659544947175649222226350410354053304037407285263027742656926195684920350873977031531977117393899620145508261471596492667990267374247119411938906051221560288163888494940827408883645041289107923326280594975299582732093176297559093243319651847663381189148739254118740760683251268770860610364971014257718132322662993400462723041979552544043247309413454403017490412923702397366293918458594927220825783569515516498613647493542268637194003350434213617513461273400338809813920895663463363247859385737241337948895731991543335318621562472121750689097894229554250127034442715997616911313974856673940304231994761018954589749398269172339562324862795012955362211949117823507377780394667326502146542683401056903289898178853920495032817341587170762830228787960209813642366205321384101719785933919351423732356316716472524486444036272429428153831673413788549230823082493754465058942259000583671702976617386677699167861858091938074365982017699085450997562670768862704782078193633647021017872847941986726359652935580704732361989006186837416869603398747869170555637398488742768464768452034024359320496406508094293240522745199848449629940597204965057665414817199919279965732864\", \"1255829381618851745843939813162800704298382133625846814224576543837929306862487043403613671691796278314758724772891576106178879232671738229170952547575146504508999388463189077390718663065465139512563257376721686308667894337081904473700501451284072606805263409406162948187574343746459682980041852684213198304781289243877974712637944889033542516361940449303697964287412064454816314869415430215941969303231295534182937231337233928794493597318564192804797309557098139190130815956634614416930803981119285633896897477273820223265909390628295335746137224340995704708759288876800112737285539324537940458904632694853367688632930078926069962806962151985488848240208636811697886816181397641065060234508220101117574005754861073847528126195807422137989781827241548062333268861770114890971921143176307587625777432801329694125042082997858291756521028910278742226462503170935773824014532726362279487804852642625914063586084317328008408237653234716716056792097957687674162407334579817410344391534511456377332909067033131887491200492635061656303435842265594631198130167892273698894118908473502560911713314815766049451261795858816213523278903054857664316894475748404017820593032620658376301987967016324223870860747215810014131438047371746755894742158573728541978843161985626931648804227861987028287101265196697102807792583599996464364915511454252370644570101252096\", \"49748527168543236721217601181701787859412164184544981614021132152531407544755875595715223534937387027814400236784519752457163875312653024878808819261897816182049857562175142502664920126662282397287500919615856683661037726718551357866517035838294570557312647785183961656447017236408492576412491933241124498007986482023687708270806909964726962454428889809121509126703306096801309583649294538265745551262893038667109768947942584564986046357259555432390720779636591426560199120727335150844849791136385442593615377298690191141619484579081882966457602567673475027107757696120192807009449746430724720362204881883533358914349307829848269869773943199352024084642105643418234794472904996993789612991098814405633839362168444219985270745390334404281633531610515239911600270124765918723756244113179536100218842580810350953235956905299884158637846183854907123681882696681963760189001542900172446562530778777599312587511581507032388059832452415715329931134942694903849614695379375686995163260981165532882315572043312707177653268134629524148679542470830862853196065894885604510044117513694327827461877798923014301568856988500200842727469644981284082974998272244853501444493758472723476216286626588118926382688627409464658264654757634470533785470480202198639301517931585656134842389907260888628356169810472955154515203224997997562067268287191747713068764885441400545692502662653596833677312\", \"3941484395354638233538289175687367867592105475775706532607033481929862522953984448984124904076414779518065278170783738324688922152389130205437011719923988459918771927989210378507306385597674277709820835943850912312152185369810430427235293842952042618038177698910452587876065686843021184453985614615401176263423364407780619503789421456129207959050468910855420316069710275776886905782248938603902750169283607018303335844945658961365762587223541329787394772159734244936768703203377414117876498328023783201742397734284557793518805392879159072376728619721788157628888344885071289254492212066462609897371427802672624420468887108637999413923906918609154894786217991242150407245961961210264630635727082083499613184110924860468687904057567797574662878324087753939198982072282100267692628525208200651528096222226725761759777593209326929086554425269126423894387884436123797407184297632756634823932612007791785650341799222376223152005096407550736174028700944082763172420809390328542708804075250570034803026246036242639836615637887046181963204853103334122812628083321526481217092301247280493561517877165608935730379717606928307804713776181202402762892404134887938937031472708163645278187958477215529193445999427556392813076702686366226841259047880288438181039317934007049986967628669913469712745089488991641441449029377170846478308256948772452974369303745729777296889496265230364682344462873485908123670305342226432\", \"624553132445188374261017074910616651175684707033259989385970576608272316008064282918553047835861650538769914221991117220314396825604654124698761475620179598269259451407347168821591908915006873583380941955761610066160419567573390994630710233968901049175302599016666711451478872117095481672759695244736634085608900894427917277279996666119899843535724293953977717958753458753357574723232246031618566245134658698123460418782651119733400238852030909225084923720522062420308747615009191365697834033073271039095844599773798762889402205099782304958420658723821787855439775874016767512412532198575938481672972682436959872295438912425558239249896718667429033268570400796096855935950685905131932457788106766442890916357395897157536035262349579159094919232732624415986912959633675763868654888183379449084913996554618036170262832802999896987764687885078128708244981252908659559465878438903039807006949176027373201571918960978899368559454220738639019793775514107863498115935799189994914365281539305546543929936288848983376399359033566087234260524743328530634575237604448475923058984710325860168462459215792962475145307334652023116341661884016135961156794587175220705121250776592668568939514651460613351346012177225037868348882433579230141987465079270609005162061040175430229143459252137656401517672603677784011449981446402694557290874473546041589279084003029095969861040882648929229818815574607038430536241540767276013988435192299755547347910656\", \"197928788304640974341464850666479258600695049180808534124773095918685736886422750739311447234778847629379668922704179983751531364810359217713950668062565097782274752622181167719275215689807351092393652552210337871389593058507678810223056187979434630641203353919939495644767541545786906958837361968513995391044381927429678621588331901314460099470258669197354576703557407380031846807594524889233271913479072348055039559544348544781413192221607714121652514827686561139424546526972239487807277994496241865504072090118208118502668454523872999822924264148549447534537779884400733379795206408770083054875651690478960015238056556281653478045174894788418982313952718858245870557399909731671315524677379965742000641203192670806788653922982959777967379801448037982832956836725494414074449883228976663077489903296666163245859454357672076855154287795385752729475959381491602479668526791941876464824655451499200095483798976893981760998404467355203056966910895989444496771910506370624957508433199903387685562868293528306920853313928386878452173404723245851705283387042199433227699011440553292089827210283867137777224255168276367800718781387589924414286880529284397361540991020952506223721979879403820291922270484166768214979758659415044167154680904882962898181811062835177741059706090419385648245030626512884839233314262775620355296399275958674182930499283811645655644832080683138115417619825958599349430173169550456628534028988718669931851398764813092655430959864659914522624\", \"125452273648412141401139200773089339811437122262323352216462286700734387627331522885709312904647210371328794107858418293356140610389233010890575674923332327423429917033308833625087865757067009121643735335562957720919464360279849562024268481514680519466433342816295305461792608710076067024418040646132922593872156786882042514851134725907407734998659047116141535192232282791034794601497425933135733739224548153792567839779141913680549722028773475603674523853169051845195421079685934332310882053907313995168923535704556709136009686053259752740308577712484995569783650846269720521608249582420017860918845622644663874987575160515268766971368721963159046529551370104575096202684311358624098672672476994761800126366704378281769378475834662925454186722285874859694872242026068795039642380038691501013387521486053366727435218916045301026547623117868196574350026663672938544838421549439678291079144887169351257353939537143880911795509769485297854345823362270660712007071953958048732807833151699233932553517365602355625760928908188344900652899469143373311896574182769657272933821876553379518700197938172155010185719146936187180903250543579433005278984692348282568379624191843385007057047580846112172322370992146748764340302424100769640802926078370838482052406435490036434092467614465282934547622486501083341846045800849550829377015688082924233744178977266360888077466658752803757886543953371541948150838050857811138739570190403175194723845806878286855221273591078542964296886759202533689916185534005248\"}; int main(){ int n; cin >> n; while (n != 0){ cout << a[n] << endl; cin >> n; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1085/","text":"1085 \u7eff\u8272\u901a\u9053 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u7eff\u8272\u901a\u9053 */ #include <iostream> #include <cstring> using namespace std; int f[201110], a[201110]; pair<int, int> q[201110]; int n, t; bool check(int lim){ memset(f, 0, sizeof(f)); memset(q, 0, sizeof(q)); int front = 0, rear = 0; q[rear++] = make_pair(0, 0); for (int i = 1; i <= n; ++i){ while (front != rear && q[front].first < i - lim - 1) ++front; f[i] = q[front].second + a[i]; while (front != rear && f[i] <= q[rear - 1].second) --rear; q[rear++] = make_pair(i, f[i]); } for (int i = n - lim; i <= n; ++i) if (f[i] <= t) return true; return false; } int main(){ cin >> n >> t; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int l = 0, r = n, mid; while (l < r){ mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"1085 \u7eff\u8272\u901a\u9053"},{"location":"nr/1085/#1085","text":"\u8f6c\u5230\u9898\u76ee","title":"1085 \u7eff\u8272\u901a\u9053"},{"location":"nr/1085/#fineartzs-solution","text":"/* \u7eff\u8272\u901a\u9053 */ #include <iostream> #include <cstring> using namespace std; int f[201110], a[201110]; pair<int, int> q[201110]; int n, t; bool check(int lim){ memset(f, 0, sizeof(f)); memset(q, 0, sizeof(q)); int front = 0, rear = 0; q[rear++] = make_pair(0, 0); for (int i = 1; i <= n; ++i){ while (front != rear && q[front].first < i - lim - 1) ++front; f[i] = q[front].second + a[i]; while (front != rear && f[i] <= q[rear - 1].second) --rear; q[rear++] = make_pair(i, f[i]); } for (int i = n - lim; i <= n; ++i) if (f[i] <= t) return true; return false; } int main(){ cin >> n >> t; for (int i = 1; i <= n; ++i){ cin >> a[i]; } int l = 0, r = n, mid; while (l < r){ mid = (l + r) / 2; if (check(mid)) r = mid; else l = mid + 1; } cout << l << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1086/","text":"1086 \u70ae\u5175\u9635\u5730 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u70ae\u5175\u9635\u5730 */ #include <iostream> using namespace std; int mapping[1025]; long long f[105][65][65]; long long sum[65], sta[65], a[105]; int cnt = 0, n, m; inline bool check(int x){ return !((x & (x << 1)) || (x & (x << 2))); } int calcSum(int x){ int ret = 0; while (x){ ++ret; x = x & (x - 1); } return ret; } void init(){ for (int i = 0; i < (1 << m); ++i){ if (check(i)){ sta[++cnt] = i; mapping[i] = cnt; sum[cnt] = calcSum(i); } } } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i] <<= 1; if (ch == 'H') a[i] = a[i] | 1; } } init(); long long ans = 0; for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[1])){ f[1][i][0] = max(f[1][i][0], sum[i]); ans = max(ans, f[1][i][0]); } } if (n == 1){ cout << ans << endl; return 0; } for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[2])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[1])){ if (!(sta[i] & sta[j])){ f[2][i][j] = max(f[2][i][j], f[1][j][0] + sum[i]); ans = max(ans, f[1][i][0]); } } } } } if (n == 2){ cout << ans << endl; return 0; } for (int l = 3; l <= n; ++l){ for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[l])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[l - 1])){ for (int k = 1; k <= cnt; ++k){ if (!(sta[k] & a[l - 2])){ if (!((sta[i] & sta[j]) | (sta[i] & sta[k]) | (sta[j] & sta[k]))){ f[l][i][j] = max(f[l][i][j], f[l - 1][j][k] + sum[i]); ans = max(ans, f[l][i][j]); } } } } } } } } cout << ans << endl; return 0; }","title":"1086 \u70ae\u5175\u9635\u5730"},{"location":"nr/1086/#1086","text":"\u8f6c\u5230\u9898\u76ee","title":"1086 \u70ae\u5175\u9635\u5730"},{"location":"nr/1086/#fineartzs-solution","text":"/* \u70ae\u5175\u9635\u5730 */ #include <iostream> using namespace std; int mapping[1025]; long long f[105][65][65]; long long sum[65], sta[65], a[105]; int cnt = 0, n, m; inline bool check(int x){ return !((x & (x << 1)) || (x & (x << 2))); } int calcSum(int x){ int ret = 0; while (x){ ++ret; x = x & (x - 1); } return ret; } void init(){ for (int i = 0; i < (1 << m); ++i){ if (check(i)){ sta[++cnt] = i; mapping[i] = cnt; sum[cnt] = calcSum(i); } } } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ char ch; cin >> ch; a[i] <<= 1; if (ch == 'H') a[i] = a[i] | 1; } } init(); long long ans = 0; for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[1])){ f[1][i][0] = max(f[1][i][0], sum[i]); ans = max(ans, f[1][i][0]); } } if (n == 1){ cout << ans << endl; return 0; } for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[2])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[1])){ if (!(sta[i] & sta[j])){ f[2][i][j] = max(f[2][i][j], f[1][j][0] + sum[i]); ans = max(ans, f[1][i][0]); } } } } } if (n == 2){ cout << ans << endl; return 0; } for (int l = 3; l <= n; ++l){ for (int i = 1; i <= cnt; ++i){ if (!(sta[i] & a[l])){ for (int j = 1; j <= cnt; ++j){ if (!(sta[j] & a[l - 1])){ for (int k = 1; k <= cnt; ++k){ if (!(sta[k] & a[l - 2])){ if (!((sta[i] & sta[j]) | (sta[i] & sta[k]) | (sta[j] & sta[k]))){ f[l][i][j] = max(f[l][i][j], f[l - 1][j][k] + sum[i]); ans = max(ans, f[l][i][j]); } } } } } } } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1088/","text":"1088 \u90ae\u9012\u5458\u5c0fF \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u90ae\u9012\u5458\u5c0fF */ #include <iostream> #include <cstring> using namespace std; const int INF = 2000000000; int n; int a[16][16]; int f[16][32768]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; if (n == 1){ cout << 0 << endl; return 0; } for (int i = 1; i <= (1 << n) - 1; i += 2){ for (int j = 2; j <= n; ++j){ if (i & (1 << (j - 1))){ if (i ^ ((1 << (j - 1)) + 1)){ f[j][i] = INF; for (int k = 2; k <= n; ++k){ if (k != j && i & (1 << (k - 1))){ f[j][i] = min(f[j][i], f[k][i ^ (1 << (j - 1))] + a[k][j]); } } } else f[j][i] = a[1][j]; } } } int ans = INF; for (int i = 2; i <= n; ++i){ ans = min(ans, f[i][(1 << n) - 1] + a[i][1]); } cout << ans << endl; return 0; }","title":"1088 \u90ae\u9012\u5458\u5c0fF"},{"location":"nr/1088/#1088-f","text":"\u8f6c\u5230\u9898\u76ee","title":"1088 \u90ae\u9012\u5458\u5c0fF"},{"location":"nr/1088/#fineartzs-solution","text":"/* \u90ae\u9012\u5458\u5c0fF */ #include <iostream> #include <cstring> using namespace std; const int INF = 2000000000; int n; int a[16][16]; int f[16][32768]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; if (n == 1){ cout << 0 << endl; return 0; } for (int i = 1; i <= (1 << n) - 1; i += 2){ for (int j = 2; j <= n; ++j){ if (i & (1 << (j - 1))){ if (i ^ ((1 << (j - 1)) + 1)){ f[j][i] = INF; for (int k = 2; k <= n; ++k){ if (k != j && i & (1 << (k - 1))){ f[j][i] = min(f[j][i], f[k][i ^ (1 << (j - 1))] + a[k][j]); } } } else f[j][i] = a[1][j]; } } } int ans = INF; for (int i = 2; i <= n; ++i){ ans = min(ans, f[i][(1 << n) - 1] + a[i][1]); } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1089/","text":"1089 \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 */ #include <iostream> using namespace std; const int INF = 2000000000; int main(){ int n; int a[3][2005] = {0}, sum[3][2005] = {0}; int maxx = -INF, ans = -INF; cin >> n; for (int i = 1; i <= 2; ++i){ for (int j = 1; j <= n; ++j){ cin >> a[i][j]; sum[i][j] = a[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } for (int i = 3; i <= n; ++i){ int t = INF, tsum = 0; for (int j = i - 2; j >= 1; --j){ tsum += a[1][j + 1]; t = min(t, tsum); tsum = min(tsum, 0); ans = max(ans, sum[2][i] - sum[2][j - 1] - t); } } cout << ans << endl; return 0; }","title":"1089 \u5c0fM\u7684\u5b9e\u9a8c\u5ba4"},{"location":"nr/1089/#1089-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1089 \u5c0fM\u7684\u5b9e\u9a8c\u5ba4"},{"location":"nr/1089/#fineartzs-solution","text":"/* \u5c0fM\u7684\u5b9e\u9a8c\u5ba4 */ #include <iostream> using namespace std; const int INF = 2000000000; int main(){ int n; int a[3][2005] = {0}, sum[3][2005] = {0}; int maxx = -INF, ans = -INF; cin >> n; for (int i = 1; i <= 2; ++i){ for (int j = 1; j <= n; ++j){ cin >> a[i][j]; sum[i][j] = a[i][j] + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } for (int i = 3; i <= n; ++i){ int t = INF, tsum = 0; for (int j = i - 2; j >= 1; --j){ tsum += a[1][j + 1]; t = min(t, tsum); tsum = min(tsum, 0); ans = max(ans, sum[2][i] - sum[2][j - 1] - t); } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1090/","text":"1090 \u5c0fM\u7684\u5976\u725b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fM\u7684\u5976\u725b */ #include <iostream> using namespace std; const int DEL = 100000; const int INF = 2000000000; int main(){ int n; int s[105], f[105]; int a[100005 + DEL]; cin >> n; for (int i = 1; i <= n; ++i){ cin >> s[i] >> f[i]; } for (int i = 0; i <= 100000 + DEL; ++i) a[i] = -INF; a[DEL] = 0; for (int i = 1; i <= n; ++i){ if (s[i] > 0){ for (int j = 100000 + DEL; j >= s[i]; --j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } else{ for (int j = 0; j <= s[i] + 100000 + DEL; ++j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } } int ans = 0; for (int i = 0; i <= 100000; ++i) if (a[i + DEL] >= 0) ans = max(ans, a[i + DEL] + i); cout << ans << endl; return 0; }","title":"1090 \u5c0fM\u7684\u5976\u725b"},{"location":"nr/1090/#1090-m","text":"\u8f6c\u5230\u9898\u76ee","title":"1090 \u5c0fM\u7684\u5976\u725b"},{"location":"nr/1090/#fineartzs-solution","text":"/* \u5c0fM\u7684\u5976\u725b */ #include <iostream> using namespace std; const int DEL = 100000; const int INF = 2000000000; int main(){ int n; int s[105], f[105]; int a[100005 + DEL]; cin >> n; for (int i = 1; i <= n; ++i){ cin >> s[i] >> f[i]; } for (int i = 0; i <= 100000 + DEL; ++i) a[i] = -INF; a[DEL] = 0; for (int i = 1; i <= n; ++i){ if (s[i] > 0){ for (int j = 100000 + DEL; j >= s[i]; --j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } else{ for (int j = 0; j <= s[i] + 100000 + DEL; ++j) if (a[j - s[i]] != -INF) a[j] = max(a[j], a[j - s[i]] + f[i]); } } int ans = 0; for (int i = 0; i <= 100000; ++i) if (a[i + DEL] >= 0) ans = max(ans, a[i + DEL] + i); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1092/","text":"1092 \u5c0fF\u7684\u5730\u677f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0fF\u7684\u5730\u677f */ #include <iostream> #include <cstring> using namespace std; unsigned long long f[10][1 << 9]; int m, n; void dp(int lim, int col, int now, int last, int exNow, int exLast){ if (exNow == 1 && exLast == 1){ exNow = 0; exLast = 0; ++col; } if (col > n || (col == n && (exNow || exLast))) return; if (col == n && exNow == 0 && exLast == 0){ f[lim][now] += f[lim - 1][last]; return; } if (exNow == 0 && exLast == 0){ dp(lim, col + 1, (now << 1) | 1, last << 1, 0, 0); //2 * 1 dp(lim, col + 2, (now << 2) | 3, (last << 2) | 3, 0, 0); //1 * 2, exNow = 0 dp(lim, col + 1, (now << 2) | 3, (last << 1) | 1, 1, 0); //1 * 2, exNow = 1 dp(lim, col + 1, (now << 1) | 1, last << 2, 0, 1); //bottom right dp(lim, col + 2, (now << 2) | 2, last << 2, 0, 0); //bottom right dp(lim, col + 2, (now << 2) | 1, last << 2, 0, 0); //bottom left dp(lim, col + 1, (now << 2) | 3, last << 1, 1, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 1, 0, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 2, 0, 0); //top left //dp(lim, col, now << 1, last, 1, 0); //none, exNow = 1 dp(lim, col + 1, now << 1, (last << 1) | 1, 0, 0); //none, exNow = 0 //dp(lim, col, now, (last << 1) | 1, 0, 1); //none, exLast = 1 } else if (exNow == 1 && exLast == 0){ //dp(lim, col + 2, (now << 1) | 1, (last << 2) | 2, 0, 0); //2 * 1 dp(lim, col + 2, (now << 1) | 1, last << 2, 0, 0); //bottom left } else{ dp(lim, col + 1, (now << 2) | 3, last, 1, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, (last << 1) | 1, 0, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, last << 1, 0, 0); //top left //dp(lim, col + 2, (now << 2) | 1, last << 1, 0, 0); //2 * 1 } } int main(){ cin >> m >> n; if (m > n) m ^= n ^= m ^= n; memset(f, 0, sizeof(f)); f[0][(1 << n) - 1] = 1; for (int i = 1; i <= m; ++i) dp(i, 0, 0, 0, 0, 0); cout << f[m][(1 << n) - 1] << endl; return 0; }","title":"1092 \u5c0fF\u7684\u5730\u677f"},{"location":"nr/1092/#1092-f","text":"\u8f6c\u5230\u9898\u76ee","title":"1092 \u5c0fF\u7684\u5730\u677f"},{"location":"nr/1092/#fineartzs-solution","text":"/* \u5c0fF\u7684\u5730\u677f */ #include <iostream> #include <cstring> using namespace std; unsigned long long f[10][1 << 9]; int m, n; void dp(int lim, int col, int now, int last, int exNow, int exLast){ if (exNow == 1 && exLast == 1){ exNow = 0; exLast = 0; ++col; } if (col > n || (col == n && (exNow || exLast))) return; if (col == n && exNow == 0 && exLast == 0){ f[lim][now] += f[lim - 1][last]; return; } if (exNow == 0 && exLast == 0){ dp(lim, col + 1, (now << 1) | 1, last << 1, 0, 0); //2 * 1 dp(lim, col + 2, (now << 2) | 3, (last << 2) | 3, 0, 0); //1 * 2, exNow = 0 dp(lim, col + 1, (now << 2) | 3, (last << 1) | 1, 1, 0); //1 * 2, exNow = 1 dp(lim, col + 1, (now << 1) | 1, last << 2, 0, 1); //bottom right dp(lim, col + 2, (now << 2) | 2, last << 2, 0, 0); //bottom right dp(lim, col + 2, (now << 2) | 1, last << 2, 0, 0); //bottom left dp(lim, col + 1, (now << 2) | 3, last << 1, 1, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 1, 0, 0); //top right dp(lim, col + 2, (now << 2) | 3, (last << 2) | 2, 0, 0); //top left //dp(lim, col, now << 1, last, 1, 0); //none, exNow = 1 dp(lim, col + 1, now << 1, (last << 1) | 1, 0, 0); //none, exNow = 0 //dp(lim, col, now, (last << 1) | 1, 0, 1); //none, exLast = 1 } else if (exNow == 1 && exLast == 0){ //dp(lim, col + 2, (now << 1) | 1, (last << 2) | 2, 0, 0); //2 * 1 dp(lim, col + 2, (now << 1) | 1, last << 2, 0, 0); //bottom left } else{ dp(lim, col + 1, (now << 2) | 3, last, 1, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, (last << 1) | 1, 0, 0); //1 * 2 dp(lim, col + 2, (now << 2) | 3, last << 1, 0, 0); //top left //dp(lim, col + 2, (now << 2) | 1, last << 1, 0, 0); //2 * 1 } } int main(){ cin >> m >> n; if (m > n) m ^= n ^= m ^= n; memset(f, 0, sizeof(f)); f[0][(1 << n) - 1] = 1; for (int i = 1; i <= m; ++i) dp(i, 0, 0, 0, 0, 0); cout << f[m][(1 << n) - 1] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1104/","text":"1104 game \u8f6c\u5230\u9898\u76ee FineArtz's solution /* game */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n; cin >> n; cout << (1 << (n - 1)) << endl; } return 0; }","title":"1104 game"},{"location":"nr/1104/#1104-game","text":"\u8f6c\u5230\u9898\u76ee","title":"1104 game"},{"location":"nr/1104/#fineartzs-solution","text":"/* game */ #include <iostream> using namespace std; int main(){ int t; cin >> t; while (t--){ int n; cin >> n; cout << (1 << (n - 1)) << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1105/","text":"1105 path \u8f6c\u5230\u9898\u76ee FineArtz's solution /* path */ #include <iostream> #include <cstring> using namespace std; const int INF = 400000000; int a[1005][1005][3] = {0}; inline int getNum(char *s){ int i = 0; while (i < strlen(s) && !isdigit(s[i])) ++i; int ret = 0; while (i < strlen(s) && isdigit(s[i])){ ret = ret * 10 + s[i] - '0'; ++i; } return ret; } inline void addEdge(int u, int v, int *w){ for (int i = 0; i < 3; ++i){ if (a[u][v][i] > w[i]){ a[u][v][i] = w[i]; a[v][u][i] = w[i]; } } } int dijkstra(int n, int m, int k){ bool vis[10005] = {0}; int dis[10005] = {0}; int q[10005], front = 0, rear = 0; for (int i = 1; i <= n; ++i) dis[i] = INF; dis[1] = 0; vis[1] = true; q[rear++] = 1; while (front != rear){ int x = q[front++]; vis[x] = false; for (int i = 1; i <= n; ++i){ if (x != i){ if (dis[i] > dis[x] + a[x][i][k]){ dis[i] = dis[x] + a[x][i][k]; if (!vis[i]){ q[rear++] = i; vis[i] = true; } } } } } return (dis[n] != INF ? dis[n] : -1); } void solve(int n, int m, int s, int t){ memset(a, 0, sizeof(a)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (i != j) for (int k = 0; k < 3; ++k) a[i][j][k] = INF; for (int i = 1; i <= m; ++i){ char ss[1000]; int len; int u, v, w[3]; char ch; len = 0; while ((ch = getchar()) != ';'){ ss[len++] = ch; } ss[len] = '\\0'; //cout << ss << endl; auto p = strstr(ss, \"From: \"); u = getNum(p); p = strstr(ss, \"To: \"); v = getNum(p); p = strstr(ss, \"Length: \"); w[0] = getNum(p); p = strstr(ss, \"People number: \"); w[1] = getNum(p); p = strstr(ss, \"Light: \"); w[2] = getNum(p); if (u == 1) u = s; else if (u == s) u = 1; else if (u == n) u = t; else if (u == t) u = n; if (v == 1) v = s; else if (v == s) v = 1; else if (v == n) v = t; else if (v == t) v = n; if (u != v) addEdge(u, v, w); } for (int i = 0; i < 3; ++i) cout << dijkstra(n, m, i) << ' '; cout << '\\n'; } int main(){ int tt; cin >> tt; while (tt--){ int n, m, s, t; cin >> n >> m >> s >> t; solve(n, m, s, t); } return 0; }","title":"1105 path"},{"location":"nr/1105/#1105-path","text":"\u8f6c\u5230\u9898\u76ee","title":"1105 path"},{"location":"nr/1105/#fineartzs-solution","text":"/* path */ #include <iostream> #include <cstring> using namespace std; const int INF = 400000000; int a[1005][1005][3] = {0}; inline int getNum(char *s){ int i = 0; while (i < strlen(s) && !isdigit(s[i])) ++i; int ret = 0; while (i < strlen(s) && isdigit(s[i])){ ret = ret * 10 + s[i] - '0'; ++i; } return ret; } inline void addEdge(int u, int v, int *w){ for (int i = 0; i < 3; ++i){ if (a[u][v][i] > w[i]){ a[u][v][i] = w[i]; a[v][u][i] = w[i]; } } } int dijkstra(int n, int m, int k){ bool vis[10005] = {0}; int dis[10005] = {0}; int q[10005], front = 0, rear = 0; for (int i = 1; i <= n; ++i) dis[i] = INF; dis[1] = 0; vis[1] = true; q[rear++] = 1; while (front != rear){ int x = q[front++]; vis[x] = false; for (int i = 1; i <= n; ++i){ if (x != i){ if (dis[i] > dis[x] + a[x][i][k]){ dis[i] = dis[x] + a[x][i][k]; if (!vis[i]){ q[rear++] = i; vis[i] = true; } } } } } return (dis[n] != INF ? dis[n] : -1); } void solve(int n, int m, int s, int t){ memset(a, 0, sizeof(a)); for (int i = 1; i <= n; ++i) for (int j = 1; j <= n; ++j) if (i != j) for (int k = 0; k < 3; ++k) a[i][j][k] = INF; for (int i = 1; i <= m; ++i){ char ss[1000]; int len; int u, v, w[3]; char ch; len = 0; while ((ch = getchar()) != ';'){ ss[len++] = ch; } ss[len] = '\\0'; //cout << ss << endl; auto p = strstr(ss, \"From: \"); u = getNum(p); p = strstr(ss, \"To: \"); v = getNum(p); p = strstr(ss, \"Length: \"); w[0] = getNum(p); p = strstr(ss, \"People number: \"); w[1] = getNum(p); p = strstr(ss, \"Light: \"); w[2] = getNum(p); if (u == 1) u = s; else if (u == s) u = 1; else if (u == n) u = t; else if (u == t) u = n; if (v == 1) v = s; else if (v == s) v = 1; else if (v == n) v = t; else if (v == t) v = n; if (u != v) addEdge(u, v, w); } for (int i = 0; i < 3; ++i) cout << dijkstra(n, m, i) << ' '; cout << '\\n'; } int main(){ int tt; cin >> tt; while (tt--){ int n, m, s, t; cin >> n >> m >> s >> t; solve(n, m, s, t); } return 0; }","title":"FineArtz's solution"},{"location":"nr/1106/","text":"1106 sudoku \u8f6c\u5230\u9898\u76ee FineArtz's solution #include <iostream> #include <cstring> using namespace std; const int MAXNODE = 2000005, MAXN = 1050; const int SLOT = 0, ROW = 1, COL = 2, SUB = 3; class DancingLink{ private: int n, m; int U[MAXNODE], D[MAXNODE], L[MAXNODE], R[MAXNODE]; int row[MAXNODE], col[MAXNODE]; int head[MAXN], sum[MAXN]; int ansd, size; public: int solution; void init(int n = 0, int m = 0){ this->n = n; this->m = m; size = m + 1; solution = 0; memset(sum, 0, sizeof(sum)); memset(head, -1, sizeof(head)); for (int i = 0; i <= m; ++i){ L[i] = i - 1; R[i] = i + 1; U[i] = i; D[i] = i; } L[0] = m; R[m] = 0; } void addNode(int r, int c){ row[size] = r; col[size] = c; U[size] = U[c]; D[size] = c; U[D[size]] = size; D[U[size]] = size; if (head[r] == -1){ //empty row L[size] = size; R[size] = size; head[r] = size; } else{ L[size] = L[head[r]]; R[size] = head[r]; L[R[size]] = size; R[L[size]] = size; } ++sum[col[size++]]; } void delNode(int x){ R[L[x]] = R[x]; L[R[x]] = L[x]; for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]){ U[D[j]] = U[j]; D[U[j]] = D[j]; --sum[col[j]]; } } } void resNode(int x){ for (int i = U[x]; i != x; i = U[i]){ for (int j = L[i]; j != i; j = L[j]){ U[D[j]] = j; D[U[j]] = j; ++sum[col[j]]; } } R[L[x]] = x; L[R[x]] = x; } void dfs(int depth){ if (R[0] == 0){ ++solution; return; } int x = R[0]; for (int i = R[0]; i != 0; i = R[i]){ if (sum[x] > sum[i]) x = i; } delNode(x); for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]) delNode(col[j]); dfs(depth + 1); if (solution >= 2) return; for (int j = L[i]; j != i; j = L[j]) resNode(col[j]); } resNode(x); } }; inline int encode(int x, int y, int z){ return 81 * x + 9 * y + z + 1; } inline void decode(int code, int &x, int &y, int &z){ --code; z = code % 9; code /= 9; y = code % 9; code /= 9; x = code % 9; } DancingLink dlx; void solve(){ int a[9][9]; dlx.init(9 * 9 * 9, 9 * 9 * 4); for (int i = 0; i < 9; ++i) for (int j = 0; j < 9; ++j) cin >> a[i][j]; for (int i = 0; i < 9; ++i){ for (int j = 0; j < 9; ++j){ for (int k = 0; k < 9; ++k){ if (a[i][j] == 0 || a[i][j] == k + 1){ int x = encode(i, j, k); dlx.addNode(x, encode(0, i, j)); dlx.addNode(x, encode(1, i, k)); dlx.addNode(x, encode(2, j, k)); dlx.addNode(x, encode(3, i / 3 * 3 + j / 3, k)); } } } } dlx.dfs(0); if (dlx.solution == 1) cout << \"Yes\" << endl; else cout << \"No\" << endl; } int main(){ int t; cin >> t; while (t--){ solve(); } return 0; }","title":"1106 sudoku"},{"location":"nr/1106/#1106-sudoku","text":"\u8f6c\u5230\u9898\u76ee","title":"1106 sudoku"},{"location":"nr/1106/#fineartzs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNODE = 2000005, MAXN = 1050; const int SLOT = 0, ROW = 1, COL = 2, SUB = 3; class DancingLink{ private: int n, m; int U[MAXNODE], D[MAXNODE], L[MAXNODE], R[MAXNODE]; int row[MAXNODE], col[MAXNODE]; int head[MAXN], sum[MAXN]; int ansd, size; public: int solution; void init(int n = 0, int m = 0){ this->n = n; this->m = m; size = m + 1; solution = 0; memset(sum, 0, sizeof(sum)); memset(head, -1, sizeof(head)); for (int i = 0; i <= m; ++i){ L[i] = i - 1; R[i] = i + 1; U[i] = i; D[i] = i; } L[0] = m; R[m] = 0; } void addNode(int r, int c){ row[size] = r; col[size] = c; U[size] = U[c]; D[size] = c; U[D[size]] = size; D[U[size]] = size; if (head[r] == -1){ //empty row L[size] = size; R[size] = size; head[r] = size; } else{ L[size] = L[head[r]]; R[size] = head[r]; L[R[size]] = size; R[L[size]] = size; } ++sum[col[size++]]; } void delNode(int x){ R[L[x]] = R[x]; L[R[x]] = L[x]; for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]){ U[D[j]] = U[j]; D[U[j]] = D[j]; --sum[col[j]]; } } } void resNode(int x){ for (int i = U[x]; i != x; i = U[i]){ for (int j = L[i]; j != i; j = L[j]){ U[D[j]] = j; D[U[j]] = j; ++sum[col[j]]; } } R[L[x]] = x; L[R[x]] = x; } void dfs(int depth){ if (R[0] == 0){ ++solution; return; } int x = R[0]; for (int i = R[0]; i != 0; i = R[i]){ if (sum[x] > sum[i]) x = i; } delNode(x); for (int i = D[x]; i != x; i = D[i]){ for (int j = R[i]; j != i; j = R[j]) delNode(col[j]); dfs(depth + 1); if (solution >= 2) return; for (int j = L[i]; j != i; j = L[j]) resNode(col[j]); } resNode(x); } }; inline int encode(int x, int y, int z){ return 81 * x + 9 * y + z + 1; } inline void decode(int code, int &x, int &y, int &z){ --code; z = code % 9; code /= 9; y = code % 9; code /= 9; x = code % 9; } DancingLink dlx; void solve(){ int a[9][9]; dlx.init(9 * 9 * 9, 9 * 9 * 4); for (int i = 0; i < 9; ++i) for (int j = 0; j < 9; ++j) cin >> a[i][j]; for (int i = 0; i < 9; ++i){ for (int j = 0; j < 9; ++j){ for (int k = 0; k < 9; ++k){ if (a[i][j] == 0 || a[i][j] == k + 1){ int x = encode(i, j, k); dlx.addNode(x, encode(0, i, j)); dlx.addNode(x, encode(1, i, k)); dlx.addNode(x, encode(2, j, k)); dlx.addNode(x, encode(3, i / 3 * 3 + j / 3, k)); } } } } dlx.dfs(0); if (dlx.solution == 1) cout << \"Yes\" << endl; else cout << \"No\" << endl; } int main(){ int t; cin >> t; while (t--){ solve(); } return 0; }","title":"FineArtz's solution"},{"location":"nr/1107/","text":"1107 \u4e8c\u54e5\u7684\u8d4c\u535a \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u8d4c\u535a */ #include <iostream> using namespace std; int main(){ int m; cin >> m; while (m--){ int t; cin >> t; if (t == 0) cout << \"no\" << endl; else cout << \"yes\" << endl; } return 0; } WashWang's solution #include <iostream> using namespace std; int m,n; int main() { cin>>m; for (int i=0;i<m;++i) { cin>>n; if (n!=0) cout<<\"yes\"<<endl; else cout<<\"no\"<<endl; } return 0; }","title":"1107 \u4e8c\u54e5\u7684\u8d4c\u535a"},{"location":"nr/1107/#1107","text":"\u8f6c\u5230\u9898\u76ee","title":"1107 \u4e8c\u54e5\u7684\u8d4c\u535a"},{"location":"nr/1107/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u8d4c\u535a */ #include <iostream> using namespace std; int main(){ int m; cin >> m; while (m--){ int t; cin >> t; if (t == 0) cout << \"no\" << endl; else cout << \"yes\" << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1107/#washwangs-solution","text":"#include <iostream> using namespace std; int m,n; int main() { cin>>m; for (int i=0;i<m;++i) { cin>>n; if (n!=0) cout<<\"yes\"<<endl; else cout<<\"no\"<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1108/","text":"1108 \u4e8c\u54e5\u7684\u722c\u6811 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int x,y,v,n,m,dis[101][101]; int main() { cin>>n; for (int i=0;i<n;++i) for (int j=0;j<n;++j) dis[i][j]=0x3f3f3f3f; for (int i=0;i<n-1;++i){ cin>>x>>y>>v; dis[x-1][y-1]=v; dis[y-1][x-1]=v; dis[i][i]=0; } for (int k=0;k<n;++k) for (int i=0;i<n;++i) for (int j=0;j<n;++j) if (dis[i][k]+dis[k][j]<dis[i][j]) dis[i][j]=dis[i][k]+dis[k][j]; cin>>m; for (int i=0;i<m;++i){ cin>>x>>y; cout<<dis[x-1][y-1]<<endl; } return 0; }","title":"1108 \u4e8c\u54e5\u7684\u722c\u6811"},{"location":"nr/1108/#1108","text":"\u8f6c\u5230\u9898\u76ee","title":"1108 \u4e8c\u54e5\u7684\u722c\u6811"},{"location":"nr/1108/#washwangs-solution","text":"#include <iostream> using namespace std; int x,y,v,n,m,dis[101][101]; int main() { cin>>n; for (int i=0;i<n;++i) for (int j=0;j<n;++j) dis[i][j]=0x3f3f3f3f; for (int i=0;i<n-1;++i){ cin>>x>>y>>v; dis[x-1][y-1]=v; dis[y-1][x-1]=v; dis[i][i]=0; } for (int k=0;k<n;++k) for (int i=0;i<n;++i) for (int j=0;j<n;++j) if (dis[i][k]+dis[k][j]<dis[i][j]) dis[i][j]=dis[i][k]+dis[k][j]; cin>>m; for (int i=0;i<m;++i){ cin>>x>>y; cout<<dis[x-1][y-1]<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1111/","text":"1111 \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; char a[1005]; char dlr[30], ldr[30]; void restoreTree(char *dlr, char *ldr, int len, int root){ if (len <= 0) return; char r = dlr[0]; a[root] = r; int i = 0; while (ldr[i] != r) ++i; restoreTree(dlr + 1, ldr, i, root * 2); restoreTree(dlr + i + 1, ldr + i + 1, len - i - 1, root * 2 + 1); } int main(){ cin >> dlr >> ldr; for (int i = 1; i <= 1004; ++i) a[i] = ' '; restoreTree(dlr, ldr, strlen(dlr), 1); int n = 1000; while (a[n] == ' ') --n; for (int i = 1; i <= n; ++i){ if (a[i] == ' ') cout << \"NULL \"; else cout << a[i] << ' '; } cout << endl; return 0; } WashWang's solution #include <iostream> #include <cstring> using namespace std; char pre[100],in[100],ans[2000]; int maxn; void dfs(int ps,int pe,int is,int it,int p) { int root,leftlen,rightlen; for (root=is;root<it;++root){ if (in[root]==pre[ps]) break; } ans[p]=in[root]; if (p>maxn) maxn=p; leftlen=root-is; if (leftlen>0) dfs(ps+1,ps+leftlen,is,root,p*2); rightlen=it-root-1; if (rightlen>0) dfs(ps+leftlen+1,pe,root+1,it,p*2+1); } int main() { cin>>pre; cin>>in; dfs(0,strlen(pre),0,strlen(in),1); for (int i=1;i<=maxn;++i) if (ans[i]) cout<<ans[i]<<\" \"; else cout<<\"NULL \"; return 0; }","title":"1111 \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811"},{"location":"nr/1111/#1111","text":"\u8f6c\u5230\u9898\u76ee","title":"1111 \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811"},{"location":"nr/1111/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5b66\u4e8c\u53c9\u6811 */ #include <iostream> #include <cstring> using namespace std; char a[1005]; char dlr[30], ldr[30]; void restoreTree(char *dlr, char *ldr, int len, int root){ if (len <= 0) return; char r = dlr[0]; a[root] = r; int i = 0; while (ldr[i] != r) ++i; restoreTree(dlr + 1, ldr, i, root * 2); restoreTree(dlr + i + 1, ldr + i + 1, len - i - 1, root * 2 + 1); } int main(){ cin >> dlr >> ldr; for (int i = 1; i <= 1004; ++i) a[i] = ' '; restoreTree(dlr, ldr, strlen(dlr), 1); int n = 1000; while (a[n] == ' ') --n; for (int i = 1; i <= n; ++i){ if (a[i] == ' ') cout << \"NULL \"; else cout << a[i] << ' '; } cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1111/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; char pre[100],in[100],ans[2000]; int maxn; void dfs(int ps,int pe,int is,int it,int p) { int root,leftlen,rightlen; for (root=is;root<it;++root){ if (in[root]==pre[ps]) break; } ans[p]=in[root]; if (p>maxn) maxn=p; leftlen=root-is; if (leftlen>0) dfs(ps+1,ps+leftlen,is,root,p*2); rightlen=it-root-1; if (rightlen>0) dfs(ps+leftlen+1,pe,root+1,it,p*2+1); } int main() { cin>>pre; cin>>in; dfs(0,strlen(pre),0,strlen(in),1); for (int i=1;i<=maxn;++i) if (ans[i]) cout<<ans[i]<<\" \"; else cout<<\"NULL \"; return 0; }","title":"WashWang's solution"},{"location":"nr/1112/","text":"1112 \u4e8c\u54e5\u53d1\u8bba\u6587 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u53d1\u8bba\u6587 */ #include <iostream> using namespace std; class Heap{ private: int a[1005] = {0}; int b[1005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; t = b[x]; b[x] = b[y]; b[y] = t; } public: void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i] > a[i / 2]){ swap(i, i / 2); i *= 2; } else break; } } void insert(int x, int y){ a[++heapsize] = x; b[heapsize] = y; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return b[1]; } bool empty(){ return (heapsize == 0); } }; Heap heap; int n, k; int a[1005], m[1005][1005]; bool v[1005] = {false}; int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= k; ++i){ int t; cin >> t; heap.insert(a[t], t); v[t] = true; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cin >> m[i][j]; } } while (!heap.empty()){ int x = heap.getMax(); cout << x << endl; heap.remove(); for (int i = 1; i <= n; ++i) if (m[x][i] && !v[i]){ heap.insert(a[i], i); v[i] = true; } } return 0; }","title":"1112 \u4e8c\u54e5\u53d1\u8bba\u6587"},{"location":"nr/1112/#1112","text":"\u8f6c\u5230\u9898\u76ee","title":"1112 \u4e8c\u54e5\u53d1\u8bba\u6587"},{"location":"nr/1112/#fineartzs-solution","text":"/* \u4e8c\u54e5\u53d1\u8bba\u6587 */ #include <iostream> using namespace std; class Heap{ private: int a[1005] = {0}; int b[1005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; t = b[x]; b[x] = b[y]; b[y] = t; } public: void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i] > a[i / 2]){ swap(i, i / 2); i *= 2; } else break; } } void insert(int x, int y){ a[++heapsize] = x; b[heapsize] = y; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return b[1]; } bool empty(){ return (heapsize == 0); } }; Heap heap; int n, k; int a[1005], m[1005][1005]; bool v[1005] = {false}; int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ cin >> a[i]; } for (int i = 1; i <= k; ++i){ int t; cin >> t; heap.insert(a[t], t); v[t] = true; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= n; ++j){ cin >> m[i][j]; } } while (!heap.empty()){ int x = heap.getMax(); cout << x << endl; heap.remove(); for (int i = 1; i <= n; ++i) if (m[x][i] && !v[i]){ heap.insert(a[i], i); v[i] = true; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1113/","text":"1113 \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 */ #include <iostream> #include <algorithm> using namespace std; const int INF = 2000000005; class Heap{ private: int a[200005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } public: void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return a[1]; } void removeAndInsert(int x){ a[1] = x; siftdown(); } }; pair<int, int> a[200005]; int sum1[200005] = {0}, sum2[200005] = {0}; int n, c, f; Heap heap1, heap2; void qsort(int l, int h){ if (l >= h) return; int i = l, j = h; pair<int, int> key = a[l]; while (i < j){ while (i < j && a[j] > key) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; qsort(l, i - 1); qsort(i + 1, h); } int main(){ cin >> n >> c >> f; for (int i = 1; i <= c; ++i){ cin >> a[i].first >> a[i].second; } sort(a + 1, a + c + 1); // for (int i = 1; i <= c; ++i) // cout << a[i].first << ' ' << a[i].second << endl; for (int i = 1; i <= n / 2; ++i){ sum1[n / 2] += a[i].second; heap1.insert(a[i].second); } for (int i = n / 2 + 1; i <= c; ++i){ int t = a[i].second; if (t > heap1.getMax()) sum1[i] = sum1[i - 1]; else{ sum1[i] = sum1[i - 1] - heap1.getMax() + t; heap1.remove(); heap1.insert(t); } } for (int i = c; i >= c - n / 2 + 1; --i){ sum2[c - n / 2 + 1] += a[i].second; heap2.insert(a[i].second); } for (int i = c - n / 2; i >= 1; --i){ int t = a[i].second; if (t > heap2.getMax()) sum2[i] = sum2[i + 1]; else{ sum2[i] = sum2[i + 1] - heap2.getMax() + t; heap2.remove(); heap2.insert(t); } } int ans = -1; for (int i = n / 2 + 1; i <= c - n / 2; ++i){ int t = sum1[i - 1] + sum2[i + 1] + a[i].second; if (t <= f && ans < a[i].first) ans = a[i].first; } cout << ans << endl; return 0; }","title":"1113 \u4e8c\u54e5\u7684\u5956\u5b66\u91d1"},{"location":"nr/1113/#1113","text":"\u8f6c\u5230\u9898\u76ee","title":"1113 \u4e8c\u54e5\u7684\u5956\u5b66\u91d1"},{"location":"nr/1113/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5956\u5b66\u91d1 */ #include <iostream> #include <algorithm> using namespace std; const int INF = 2000000005; class Heap{ private: int a[200005] = {0}; int heapsize = 0; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int i){ while (i != 1){ if (a[i] > a[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } public: void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } int getMax(){ return a[1]; } void removeAndInsert(int x){ a[1] = x; siftdown(); } }; pair<int, int> a[200005]; int sum1[200005] = {0}, sum2[200005] = {0}; int n, c, f; Heap heap1, heap2; void qsort(int l, int h){ if (l >= h) return; int i = l, j = h; pair<int, int> key = a[l]; while (i < j){ while (i < j && a[j] > key) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; qsort(l, i - 1); qsort(i + 1, h); } int main(){ cin >> n >> c >> f; for (int i = 1; i <= c; ++i){ cin >> a[i].first >> a[i].second; } sort(a + 1, a + c + 1); // for (int i = 1; i <= c; ++i) // cout << a[i].first << ' ' << a[i].second << endl; for (int i = 1; i <= n / 2; ++i){ sum1[n / 2] += a[i].second; heap1.insert(a[i].second); } for (int i = n / 2 + 1; i <= c; ++i){ int t = a[i].second; if (t > heap1.getMax()) sum1[i] = sum1[i - 1]; else{ sum1[i] = sum1[i - 1] - heap1.getMax() + t; heap1.remove(); heap1.insert(t); } } for (int i = c; i >= c - n / 2 + 1; --i){ sum2[c - n / 2 + 1] += a[i].second; heap2.insert(a[i].second); } for (int i = c - n / 2; i >= 1; --i){ int t = a[i].second; if (t > heap2.getMax()) sum2[i] = sum2[i + 1]; else{ sum2[i] = sum2[i + 1] - heap2.getMax() + t; heap2.remove(); heap2.insert(t); } } int ans = -1; for (int i = n / 2 + 1; i <= c - n / 2; ++i){ int t = sum1[i - 1] + sum2[i + 1] + a[i].second; if (t <= f && ans < a[i].first) ans = a[i].first; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1114/","text":"1114 Problem A \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Problem A */ #include <iostream> #include <algorithm> using namespace std; const int MAXN = 300005; class Node{ public: int sum = 0, l = 0, r = 0; }; int a[MAXN], s[MAXN], root[MAXN] = {0}; int cnt = 0; Node tree[MAXN << 5]; int createNode(int sum, int l, int r){ tree[++cnt].sum = sum; tree[cnt].l = l; tree[cnt].r = r; return cnt; } void insert(int &root, int preroot, int pos, int l, int r){ root = createNode(tree[preroot].sum + 1, tree[preroot].l, tree[preroot].r); if (l == r) return; int mid = (l + r) / 2; if (pos <= mid) insert(tree[root].l, tree[preroot].l, pos, l, mid); else insert(tree[root].r, tree[preroot].r, pos, mid + 1, r); } int query(int left, int right, int k, int l, int r){ if (l == r) return l; int mid = (l + r) / 2; int sum = tree[tree[right].l].sum - tree[tree[left].l].sum; if (k <= sum) return query(tree[left].l, tree[right].l, k, l, mid); else return query(tree[left].r, tree[right].r, k - sum, mid + 1, r); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; s[i] = a[i]; } sort(s + 1, s + n + 1); int num = unique(s + 1, s + n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos = lower_bound(s + 1, s + num + 1, a[i]) - s; insert(root[i], root[i - 1], pos, 1, num); } cin >> m; while (m--){ int x, y, k; cin >> x >> y >> k; int t = query(root[x - 1], root[y], k, 1, num); cout << s[t] << '\\n'; } return 0; }","title":"1114 Problem A"},{"location":"nr/1114/#1114-problem-a","text":"\u8f6c\u5230\u9898\u76ee","title":"1114 Problem A"},{"location":"nr/1114/#fineartzs-solution","text":"/* Problem A */ #include <iostream> #include <algorithm> using namespace std; const int MAXN = 300005; class Node{ public: int sum = 0, l = 0, r = 0; }; int a[MAXN], s[MAXN], root[MAXN] = {0}; int cnt = 0; Node tree[MAXN << 5]; int createNode(int sum, int l, int r){ tree[++cnt].sum = sum; tree[cnt].l = l; tree[cnt].r = r; return cnt; } void insert(int &root, int preroot, int pos, int l, int r){ root = createNode(tree[preroot].sum + 1, tree[preroot].l, tree[preroot].r); if (l == r) return; int mid = (l + r) / 2; if (pos <= mid) insert(tree[root].l, tree[preroot].l, pos, l, mid); else insert(tree[root].r, tree[preroot].r, pos, mid + 1, r); } int query(int left, int right, int k, int l, int r){ if (l == r) return l; int mid = (l + r) / 2; int sum = tree[tree[right].l].sum - tree[tree[left].l].sum; if (k <= sum) return query(tree[left].l, tree[right].l, k, l, mid); else return query(tree[left].r, tree[right].r, k - sum, mid + 1, r); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i]; s[i] = a[i]; } sort(s + 1, s + n + 1); int num = unique(s + 1, s + n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos = lower_bound(s + 1, s + num + 1, a[i]) - s; insert(root[i], root[i - 1], pos, 1, num); } cin >> m; while (m--){ int x, y, k; cin >> x >> y >> k; int t = query(root[x - 1], root[y], k, 1, num); cout << s[t] << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1116/","text":"1116 Problem C \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Problem C */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int MAXN = 40000; struct Node{ int l = 0, r = 0; long long sum1 = 0, sum2 = 0; bool lazy1 = false, lazy2 = false; }; struct Line{ long long x[2], y[2]; int d = 0; int index = 0; bool operator <(const Line &l){ if (l.x[0] >= x[0] && l.x[0] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[0] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[0]; } if (l.x[1] >= x[0] && l.x[1] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[1] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[1]; } if (x[0] >= l.x[0] && x[0] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[0] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[0]; } if (x[1] >= l.x[0] && x[1] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[1] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[1]; } return (y[d] > l.y[l.d] || (y[d] == l.y[l.d] && x[1] < l.x[0])); } }; Line line[MAXN + 5]; Node a[MAXN * 8 + 5]; int s[MAXN * 2 + 5]; int n; int ans[MAXN + 5] = {0}; void pushup(int x){ a[x].sum1 = a[x << 1].sum1 + a[x << 1 | 1].sum1; a[x].sum2 = a[x << 1].sum2 + a[x << 1 | 1].sum2; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum1 = s[l] - s[l - 1]; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushup(x); } void pushdown(int x){ if (a[x].lazy1){ a[x << 1].lazy1 = true; a[x << 1 | 1].lazy1 = true; a[x << 1].sum1 = a[x].sum1; a[x << 1 | 1].sum1 = a[x].sum1; a[x].lazy1 = false; } if (a[x].lazy2){ a[x << 1].lazy2 = true; a[x << 1 | 1].lazy2 = true; a[x << 1].sum2 = a[x].sum2; a[x << 1 | 1].sum2 = a[x].sum2; a[x].lazy2 = false; } } int sum1(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum1; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum1(x << 1, l, r); else if (l > mid) return sum1(x << 1 | 1, l, r); else return sum1(x << 1, l, mid) + sum1(x << 1 | 1, mid + 1, r); } int sum2(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum2; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum2(x << 1, l, r); else if (l > mid) return sum2(x << 1 | 1, l, r); else return sum2(x << 1, l, mid) + sum2(x << 1 | 1, mid + 1, r); } void update1(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum1 = 0; a[x].lazy1 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update1(x << 1, l, r); else if (l > mid) update1(x << 1 | 1, l, r); else{ update1(x << 1, l, mid); update1(x << 1 | 1, mid + 1, r); } pushup(x); } void update2(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum2 = 0; a[x].lazy2 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update2(x << 1, l, r); else if (l > mid) update2(x << 1 | 1, l, r); else{ update2(x << 1, l, mid); update2(x << 1 | 1, mid + 1, r); } pushup(x); } void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum2 = d; return; } int mid = (a[x].l + a[x].r) >> 1; pushdown(x); if (p <= mid) update(x << 1, p, d); else update(x << 1 | 1, p, d); pushup(x); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> line[i].x[0] >> line[i].y[0] >> line[i].x[1] >> line[i].y[1]; s[2 * i - 1] = line[i].x[0]; s[2 * i] = line[i].x[1]; if (line[i].y[0] > line[i].y[1]) line[i].d = 1; line[i].index = i; } sort(line + 1, line + n + 1); sort(s + 1, s + 2 * n + 1); int num = unique(s + 1, s + 2 * n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos1 = lower_bound(s + 1, s + num + 1, line[i].x[0]) - s; int pos2 = lower_bound(s + 1, s + num + 1, line[i].x[1]) - s; line[i].x[0] = pos1; line[i].x[1] = pos2; } s[0] = s[1]; buildTree(1, 1, num); for (int i = 1; i <= n; ++i){ long long s = sum1(1, line[i].x[0] + 1, line[i].x[1]) + sum2(1, line[i].x[0], line[i].x[1]); update1(1, line[i].x[0] + 1, line[i].x[1]); update2(1, line[i].x[0], line[i].x[1]); if (line[i].d == 0) update(1, line[i].x[0], s); else update(1, line[i].x[1], s); ans[line[i].index] = s; } for (int i = 1; i <= n; ++i) cout << ans[i] << '\\n'; return 0; }","title":"1116 Problem C"},{"location":"nr/1116/#1116-problem-c","text":"\u8f6c\u5230\u9898\u76ee","title":"1116 Problem C"},{"location":"nr/1116/#fineartzs-solution","text":"/* Problem C */ #include <iostream> #include <cstring> #include <algorithm> using namespace std; const int MAXN = 40000; struct Node{ int l = 0, r = 0; long long sum1 = 0, sum2 = 0; bool lazy1 = false, lazy2 = false; }; struct Line{ long long x[2], y[2]; int d = 0; int index = 0; bool operator <(const Line &l){ if (l.x[0] >= x[0] && l.x[0] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[0] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[0]; } if (l.x[1] >= x[0] && l.x[1] <= x[1]){ double yy = (double)((y[1] - y[0]) * (l.x[1] - x[0])) / (x[1] - x[0]) + y[0]; return yy > l.y[1]; } if (x[0] >= l.x[0] && x[0] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[0] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[0]; } if (x[1] >= l.x[0] && x[1] <= l.x[1]){ double yy = (double)((l.y[1] - l.y[0]) * (x[1] - l.x[0])) / (l.x[1] - l.x[0]) + l.y[0]; return yy < y[1]; } return (y[d] > l.y[l.d] || (y[d] == l.y[l.d] && x[1] < l.x[0])); } }; Line line[MAXN + 5]; Node a[MAXN * 8 + 5]; int s[MAXN * 2 + 5]; int n; int ans[MAXN + 5] = {0}; void pushup(int x){ a[x].sum1 = a[x << 1].sum1 + a[x << 1 | 1].sum1; a[x].sum2 = a[x << 1].sum2 + a[x << 1 | 1].sum2; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum1 = s[l] - s[l - 1]; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushup(x); } void pushdown(int x){ if (a[x].lazy1){ a[x << 1].lazy1 = true; a[x << 1 | 1].lazy1 = true; a[x << 1].sum1 = a[x].sum1; a[x << 1 | 1].sum1 = a[x].sum1; a[x].lazy1 = false; } if (a[x].lazy2){ a[x << 1].lazy2 = true; a[x << 1 | 1].lazy2 = true; a[x << 1].sum2 = a[x].sum2; a[x << 1 | 1].sum2 = a[x].sum2; a[x].lazy2 = false; } } int sum1(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum1; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum1(x << 1, l, r); else if (l > mid) return sum1(x << 1 | 1, l, r); else return sum1(x << 1, l, mid) + sum1(x << 1 | 1, mid + 1, r); } int sum2(int x, int l, int r){ if (l > r) return 0; if (a[x].l == l && a[x].r == r) return a[x].sum2; pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) return sum2(x << 1, l, r); else if (l > mid) return sum2(x << 1 | 1, l, r); else return sum2(x << 1, l, mid) + sum2(x << 1 | 1, mid + 1, r); } void update1(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum1 = 0; a[x].lazy1 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update1(x << 1, l, r); else if (l > mid) update1(x << 1 | 1, l, r); else{ update1(x << 1, l, mid); update1(x << 1 | 1, mid + 1, r); } pushup(x); } void update2(int x, int l, int r){ if (a[x].l == l && a[x].r == r){ a[x].sum2 = 0; a[x].lazy2 = true; return; } pushdown(x); int mid = (a[x].l + a[x].r) >> 1; if (r <= mid) update2(x << 1, l, r); else if (l > mid) update2(x << 1 | 1, l, r); else{ update2(x << 1, l, mid); update2(x << 1 | 1, mid + 1, r); } pushup(x); } void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum2 = d; return; } int mid = (a[x].l + a[x].r) >> 1; pushdown(x); if (p <= mid) update(x << 1, p, d); else update(x << 1 | 1, p, d); pushup(x); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> line[i].x[0] >> line[i].y[0] >> line[i].x[1] >> line[i].y[1]; s[2 * i - 1] = line[i].x[0]; s[2 * i] = line[i].x[1]; if (line[i].y[0] > line[i].y[1]) line[i].d = 1; line[i].index = i; } sort(line + 1, line + n + 1); sort(s + 1, s + 2 * n + 1); int num = unique(s + 1, s + 2 * n + 1) - (s + 1); for (int i = 1; i <= n; ++i){ int pos1 = lower_bound(s + 1, s + num + 1, line[i].x[0]) - s; int pos2 = lower_bound(s + 1, s + num + 1, line[i].x[1]) - s; line[i].x[0] = pos1; line[i].x[1] = pos2; } s[0] = s[1]; buildTree(1, 1, num); for (int i = 1; i <= n; ++i){ long long s = sum1(1, line[i].x[0] + 1, line[i].x[1]) + sum2(1, line[i].x[0], line[i].x[1]); update1(1, line[i].x[0] + 1, line[i].x[1]); update2(1, line[i].x[0], line[i].x[1]); if (line[i].d == 0) update(1, line[i].x[0], s); else update(1, line[i].x[1], s); ans[line[i].index] = s; } for (int i = 1; i <= n; ++i) cout << ans[i] << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/1117/","text":"1117 Code \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Code */ #include <iostream> using namespace std; int a[100005], heap[100005]; int degree[100005] = {0}; bool b[100005]; int head[100005], nxt[200005], prv[200005], e[200005]; int heapsize = 0, n = 0, cnt = 0; void addEdge(int u, int v){ nxt[++cnt] = head[u]; if (head[u] != 0) prv[head[u]] = cnt; head[u] = cnt; e[cnt] = v; ++degree[u]; ++degree[v]; } void delEdge(int u, int x){ //cout << e[x] << ' ' << e[prv[x]] << ' ' << e[nxt[x]] << endl; if (nxt[x] != 0) prv[nxt[x]] = prv[x]; if (prv[x] != 0) nxt[prv[x]] = nxt[x]; else head[u] = nxt[x]; prv[x] = nxt[x] = 0; } void swap(int x, int y){ int t = heap[x]; heap[x] = heap[y]; heap[y] = t; } void siftup(){ int i = heapsize; while (i != 1){ if (heap[i] < heap[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && heap[i + 1] < heap[i]) ++i; if (heap[i / 2] > heap[i]){ swap(i / 2, i); i *= 2; } else break; } } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } void insert(int x){ heap[++heapsize] = x; siftup(); } void buildTree(int x){ char ch; int num = 0; cin >> ch; while (isdigit(ch)){ num = num * 10 + ch - '0'; cin >> ch; } if (num > n) n = num; if (x){ addEdge(num, x); addEdge(x, num); } a[num] = num; while (ch == '('){ buildTree(num); cin >> ch; } } int main(){ char ch; cin >> ch; buildTree(0); for (int i = 1; i <= n; ++i){ if (degree[a[i]] == 2) insert(a[i]); b[i] = true; } for (int i = 1; i < n; ++i){ int t = heap[1]; cout << e[head[t]] << ' '; b[t] = false; remove(); int j = head[t]; int u = e[j]; delEdge(t, j); if (j % 2) delEdge(u, j + 1); else delEdge(u, j - 1); degree[u] -= 2; if (degree[u] == 2) insert(u); } return 0; }","title":"1117 Code"},{"location":"nr/1117/#1117-code","text":"\u8f6c\u5230\u9898\u76ee","title":"1117 Code"},{"location":"nr/1117/#fineartzs-solution","text":"/* Code */ #include <iostream> using namespace std; int a[100005], heap[100005]; int degree[100005] = {0}; bool b[100005]; int head[100005], nxt[200005], prv[200005], e[200005]; int heapsize = 0, n = 0, cnt = 0; void addEdge(int u, int v){ nxt[++cnt] = head[u]; if (head[u] != 0) prv[head[u]] = cnt; head[u] = cnt; e[cnt] = v; ++degree[u]; ++degree[v]; } void delEdge(int u, int x){ //cout << e[x] << ' ' << e[prv[x]] << ' ' << e[nxt[x]] << endl; if (nxt[x] != 0) prv[nxt[x]] = prv[x]; if (prv[x] != 0) nxt[prv[x]] = nxt[x]; else head[u] = nxt[x]; prv[x] = nxt[x] = 0; } void swap(int x, int y){ int t = heap[x]; heap[x] = heap[y]; heap[y] = t; } void siftup(){ int i = heapsize; while (i != 1){ if (heap[i] < heap[i / 2]){ swap(i, i / 2); i /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && heap[i + 1] < heap[i]) ++i; if (heap[i / 2] > heap[i]){ swap(i / 2, i); i *= 2; } else break; } } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } void insert(int x){ heap[++heapsize] = x; siftup(); } void buildTree(int x){ char ch; int num = 0; cin >> ch; while (isdigit(ch)){ num = num * 10 + ch - '0'; cin >> ch; } if (num > n) n = num; if (x){ addEdge(num, x); addEdge(x, num); } a[num] = num; while (ch == '('){ buildTree(num); cin >> ch; } } int main(){ char ch; cin >> ch; buildTree(0); for (int i = 1; i <= n; ++i){ if (degree[a[i]] == 2) insert(a[i]); b[i] = true; } for (int i = 1; i < n; ++i){ int t = heap[1]; cout << e[head[t]] << ' '; b[t] = false; remove(); int j = head[t]; int u = e[j]; delEdge(t, j); if (j % 2) delEdge(u, j + 1); else delEdge(u, j - 1); degree[u] -= 2; if (degree[u] == 2) insert(u); } return 0; }","title":"FineArtz's solution"},{"location":"nr/1118/","text":"1118 Travel \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Travel */ #include <iostream> using namespace std; int n, m; int parent[10005], now[10005], nowat[10005], sum[10005], trl[10005], ex[10005]; int find(int x){ if (parent[x] != x){ parent[x] = find(parent[x]); } return parent[x]; } void merge(int x, int y){ int p = find(x), q = find(y); sum[q] += sum[p]; // if (sum[p] > sum[q]){ // int t = p; // p = q; // q = t; // } for (int i = 1; i <= n; ++i){ int t = find(i); if (t == p || t == q) trl[i] += ex[t]; } ex[p] = ex[q] = 0; parent[p] = q; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ parent[i] = i; now[i] = i; nowat[i] = i; sum[i] = 1; trl[i] = 0; ex[i] = 0; } while (m--){ char ch; int x, y, p, q, a, b; cin >> ch; switch(ch){ case 'T': cin >> x >> y; p = find(x); //the set contains x q = find(y); //the set contains y if (p != q){ a = nowat[p]; //where p is b = nowat[q]; //where q is now[a] = -1; nowat[p] = b; ++ex[p]; merge(y, x); } break; case 'Q': cin >> x; p = find(x); cout << nowat[p] << ' ' << sum[p] << ' ' << trl[x] + ex[p] << '\\n'; break; } } return 0; }","title":"1118 Travel"},{"location":"nr/1118/#1118-travel","text":"\u8f6c\u5230\u9898\u76ee","title":"1118 Travel"},{"location":"nr/1118/#fineartzs-solution","text":"/* Travel */ #include <iostream> using namespace std; int n, m; int parent[10005], now[10005], nowat[10005], sum[10005], trl[10005], ex[10005]; int find(int x){ if (parent[x] != x){ parent[x] = find(parent[x]); } return parent[x]; } void merge(int x, int y){ int p = find(x), q = find(y); sum[q] += sum[p]; // if (sum[p] > sum[q]){ // int t = p; // p = q; // q = t; // } for (int i = 1; i <= n; ++i){ int t = find(i); if (t == p || t == q) trl[i] += ex[t]; } ex[p] = ex[q] = 0; parent[p] = q; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ parent[i] = i; now[i] = i; nowat[i] = i; sum[i] = 1; trl[i] = 0; ex[i] = 0; } while (m--){ char ch; int x, y, p, q, a, b; cin >> ch; switch(ch){ case 'T': cin >> x >> y; p = find(x); //the set contains x q = find(y); //the set contains y if (p != q){ a = nowat[p]; //where p is b = nowat[q]; //where q is now[a] = -1; nowat[p] = b; ++ex[p]; merge(y, x); } break; case 'Q': cin >> x; p = find(x); cout << nowat[p] << ' ' << sum[p] << ' ' << trl[x] + ex[p] << '\\n'; break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1120/","text":"1120 \u4e8c\u54e5\u7684\u5632\u8bbd \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5632\u8bbd */ #include <iostream> using namespace std; struct Node{ int data = 0; int layer = 0; Node *next = nullptr; Node(int d = 0, int l = 0, Node *n = nullptr) : data(d), layer(l), next(n) {} }; struct LinkStack{ Node *head = new Node(); int size = 0; void push(int d, int l){ Node *p = new Node(d, l, head); head = p; ++size; } int top(){ return head->data; } int topLayer(){ return head->layer; } void pop(){ Node *p = head; head = p->next; delete p; } void resetTop(int x){ head->data = x; } void clear(){ Node *p = head, *q; while (p){ q = p; p = p->next; delete q; } } }; LinkStack a[1005], b[200005]; int n, k, layer = 0; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; while (k--){ int op, x; cin >> op; switch (op){ case -1: ++layer; break; case -2: while (b[layer].top() != 0){ a[b[layer].top()].pop(); b[layer].pop(); } --layer; break; case 0: cin >> x; cout << a[x].top() << '\\n'; break; default: cin >> x; if (a[op].topLayer() == layer) a[op].resetTop(x); else{ a[op].push(x, layer); b[layer].push(op, 0); } break; } } return 0; }","title":"1120 \u4e8c\u54e5\u7684\u5632\u8bbd"},{"location":"nr/1120/#1120","text":"\u8f6c\u5230\u9898\u76ee","title":"1120 \u4e8c\u54e5\u7684\u5632\u8bbd"},{"location":"nr/1120/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5632\u8bbd */ #include <iostream> using namespace std; struct Node{ int data = 0; int layer = 0; Node *next = nullptr; Node(int d = 0, int l = 0, Node *n = nullptr) : data(d), layer(l), next(n) {} }; struct LinkStack{ Node *head = new Node(); int size = 0; void push(int d, int l){ Node *p = new Node(d, l, head); head = p; ++size; } int top(){ return head->data; } int topLayer(){ return head->layer; } void pop(){ Node *p = head; head = p->next; delete p; } void resetTop(int x){ head->data = x; } void clear(){ Node *p = head, *q; while (p){ q = p; p = p->next; delete q; } } }; LinkStack a[1005], b[200005]; int n, k, layer = 0; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; while (k--){ int op, x; cin >> op; switch (op){ case -1: ++layer; break; case -2: while (b[layer].top() != 0){ a[b[layer].top()].pop(); b[layer].pop(); } --layer; break; case 0: cin >> x; cout << a[x].top() << '\\n'; break; default: cin >> x; if (a[op].topLayer() == layer) a[op].resetTop(x); else{ a[op].push(x, layer); b[layer].push(op, 0); } break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1121/","text":"1121 \u4e8c\u54e5\u5435\u67b6 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5435\u67b6 */ #include <iostream> using namespace std; int n, k, ans = 0; int op, x, y; int p[100005], r[100005]; int parent(int x){ if (x != p[x]){ int t = p[x]; p[x] = parent(p[x]); r[x] = (r[x] + r[t]) % 3; } return p[x]; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ p[i] = i; r[i] = 0; } while (k--){ cin >> op >> x >> y; if (x > n || y > n){ ++ans; continue; } if (op == 2 && x == y){ ++ans; continue; } int px = parent(x), py = parent(y); if (px == py){ if (r[y] != (r[x] + op - 1) % 3) ++ans; } else{ p[py] = px; r[py] = (3 - r[y] + r[x] + op - 1) % 3; } } cout << ans << endl; }","title":"1121 \u4e8c\u54e5\u5435\u67b6"},{"location":"nr/1121/#1121","text":"\u8f6c\u5230\u9898\u76ee","title":"1121 \u4e8c\u54e5\u5435\u67b6"},{"location":"nr/1121/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5435\u67b6 */ #include <iostream> using namespace std; int n, k, ans = 0; int op, x, y; int p[100005], r[100005]; int parent(int x){ if (x != p[x]){ int t = p[x]; p[x] = parent(p[x]); r[x] = (r[x] + r[t]) % 3; } return p[x]; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i){ p[i] = i; r[i] = 0; } while (k--){ cin >> op >> x >> y; if (x > n || y > n){ ++ans; continue; } if (op == 2 && x == y){ ++ans; continue; } int px = parent(x), py = parent(y); if (px == py){ if (r[y] != (r[x] + op - 1) % 3) ++ans; } else{ p[py] = px; r[py] = (3 - r[y] + r[x] + op - 1) % 3; } } cout << ans << endl; }","title":"FineArtz's solution"},{"location":"nr/1122/","text":"1122 \u4e8c\u54e5\u5f00\u623f\u95f4 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u5f00\u623f\u95f4 */ #include <iostream> using namespace std; const int MAXN = 50000; struct Node{ int l = 0, r = 0; int lsum = 0, rsum = 0, sum = 0; int lazy = 0; //0: None, 1: occupied, 2: recycled }; Node a[MAXN * 4 + 5]; int n, m; void pushUp(int x){ a[x].lsum = a[x << 1].lsum; a[x].rsum = a[x << 1 | 1].rsum; int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].lsum == mid - a[x].l + 1) a[x].lsum += a[x << 1 | 1].lsum; if (a[x << 1 | 1].rsum == a[x].r - mid) a[x].rsum += a[x << 1].rsum; a[x].sum = max(a[x << 1].rsum + a[x << 1 | 1].lsum, max(a[x << 1].sum, a[x << 1 | 1].sum)); } void pushDown(int x){ if (a[x].lazy == 0) return; int mid = (a[x].l + a[x].r) >> 1; a[x << 1].lazy = a[x << 1 | 1].lazy = a[x].lazy; if (a[x].lazy == 1){ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = 0; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = 0; } else{ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = mid - a[x].l + 1; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = a[x].r - mid; } a[x].lazy = 0; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].lsum = a[x].rsum = a[x].sum = 1; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int lazy){ if (a[x].l >= l && a[x].r <= r){ a[x].lazy = lazy; if (lazy == 1) a[x].lsum = a[x].rsum = a[x].sum = 0; else a[x].lsum = a[x].rsum = a[x].sum = a[x].r - a[x].l + 1; return; } pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (l <= mid) update(x << 1, l, r, lazy); if (r > mid) update(x << 1 | 1, l, r, lazy); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].sum >= len) return query(x << 1, len); else if (a[x << 1].rsum + a[x << 1 | 1].lsum >= len) return mid - a[x << 1].rsum + 1; else return query(x << 1 | 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; buildTree(1, 1, n); while (m--){ int op, x, y; cin >> op; switch (op){ case 1: cin >> x; if (x > a[1].sum) cout << 0 << '\\n'; else{ y = query(1, x); cout << y << '\\n'; update(1, y, y + x - 1, 1); } break; case 2: cin >> x >> y; update(1, x, x + y - 1, 2); break; } } return 0; }","title":"1122 \u4e8c\u54e5\u5f00\u623f\u95f4"},{"location":"nr/1122/#1122","text":"\u8f6c\u5230\u9898\u76ee","title":"1122 \u4e8c\u54e5\u5f00\u623f\u95f4"},{"location":"nr/1122/#fineartzs-solution","text":"/* \u4e8c\u54e5\u5f00\u623f\u95f4 */ #include <iostream> using namespace std; const int MAXN = 50000; struct Node{ int l = 0, r = 0; int lsum = 0, rsum = 0, sum = 0; int lazy = 0; //0: None, 1: occupied, 2: recycled }; Node a[MAXN * 4 + 5]; int n, m; void pushUp(int x){ a[x].lsum = a[x << 1].lsum; a[x].rsum = a[x << 1 | 1].rsum; int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].lsum == mid - a[x].l + 1) a[x].lsum += a[x << 1 | 1].lsum; if (a[x << 1 | 1].rsum == a[x].r - mid) a[x].rsum += a[x << 1].rsum; a[x].sum = max(a[x << 1].rsum + a[x << 1 | 1].lsum, max(a[x << 1].sum, a[x << 1 | 1].sum)); } void pushDown(int x){ if (a[x].lazy == 0) return; int mid = (a[x].l + a[x].r) >> 1; a[x << 1].lazy = a[x << 1 | 1].lazy = a[x].lazy; if (a[x].lazy == 1){ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = 0; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = 0; } else{ a[x << 1].lsum = a[x << 1].rsum = a[x << 1].sum = mid - a[x].l + 1; a[x << 1 | 1].lsum = a[x << 1 | 1].rsum = a[x << 1 | 1].sum = a[x].r - mid; } a[x].lazy = 0; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].lsum = a[x].rsum = a[x].sum = 1; return; } int mid = (l + r) >> 1; buildTree(x << 1, l, mid); buildTree(x << 1 | 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int lazy){ if (a[x].l >= l && a[x].r <= r){ a[x].lazy = lazy; if (lazy == 1) a[x].lsum = a[x].rsum = a[x].sum = 0; else a[x].lsum = a[x].rsum = a[x].sum = a[x].r - a[x].l + 1; return; } pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (l <= mid) update(x << 1, l, r, lazy); if (r > mid) update(x << 1 | 1, l, r, lazy); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; pushDown(x); int mid = (a[x].l + a[x].r) >> 1; if (a[x << 1].sum >= len) return query(x << 1, len); else if (a[x << 1].rsum + a[x << 1 | 1].lsum >= len) return mid - a[x << 1].rsum + 1; else return query(x << 1 | 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; buildTree(1, 1, n); while (m--){ int op, x, y; cin >> op; switch (op){ case 1: cin >> x; if (x > a[1].sum) cout << 0 << '\\n'; else{ y = query(1, x); cout << y << '\\n'; update(1, y, y + x - 1, 1); } break; case 2: cin >> x >> y; update(1, x, x + y - 1, 2); break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1123/","text":"1123 \u6298\u7ebf\u7edf\u8ba1 Problem \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6298\u7ebf\u7edf\u8ba1 Problem */ #include <iostream> using namespace std; const int MOD = 100007; struct Point{ int x = 0, y = 0; bool operator <(const Point &p) const{ return x < p.x; } }; int n, k, maxy; Point a[50005]; long long f[50005][11][2] = {0}, t[100005][11][2] = {0}; int lowbit(int x){ return (x & (-x)); } void qsort(int l, int r){ int i = l, j = r; Point key = a[i]; while (i < j){ while (i < j && key < a[j]) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; if (l < i) qsort(l, i - 1); if (r > j) qsort(j + 1, r); } void add(int x, int j, int k, long long d){ for (int i = x; i <= maxy; i += lowbit(i)) t[i][j][k] = (t[i][j][k] + d) % MOD; } long long sum(int x, int j, int k){ long long ret = 0; for (int i = x; i != 0; i -= lowbit(i)) ret = (ret + t[i][j][k]) % MOD; return ret; } int main(){ cin >> n >> k; maxy = 0; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; if (a[i].y > maxy) maxy = a[i].y; } qsort(1, n); for (int i = 1; i <= n; ++i){ f[i][0][0] = 1; f[i][0][1] = 1; add(a[i].y, 0, 0, 1); add(a[i].y, 0, 1, 1); for (int j = 1; j <= k; ++j){ f[i][j][0] += sum(a[i].y - 1, j, 0) + sum(a[i].y - 1, j - 1, 1); f[i][j][1] += sum(maxy, j, 1) - sum(a[i].y, j, 1) + sum(maxy, j - 1, 0) - sum(a[i].y, j - 1, 0); f[i][j][0] = (f[i][j][0] % MOD + MOD) % MOD; f[i][j][1] = (f[i][j][1] % MOD + MOD) % MOD; add(a[i].y, j, 0, f[i][j][0]); add(a[i].y, j, 1, f[i][j][1]); } } int ans = 0; for (int i = 1; i <= n; ++i) ans = (ans + f[i][k][0] + f[i][k][1]) % MOD; cout << ans << endl; return 0; } WashWang's solution #include <iostream> using namespace std; const int M=100007; int ftree[262144][11],gtree[262144][11],df[11],dg[11],totalf[11],totalg[11],n,x[100001],y[100001],lastf,lastg,curf,curg,k; inline int lowbit(int x) { return x&-x; } int query(int t[262144][11],int x,int k){ int sum=0; while (x>0){ sum=(sum+t[x][k])%M; x-=lowbit(x); } return sum; } void update(int t[262144][11],int x,int k,int d){ while (x<=100000){ t[x][k]=(t[x][k]+d)%M; x+=lowbit(x); } } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=x[l],keyy=y[l]; while (i<j){ while (i<j&&x[j]>=key) --j; if (i<j){ x[i]=x[j]; y[i]=y[j]; ++i; } while (i<j&&x[i]<=key) ++i; if (i<j){ x[j]=x[i]; y[j]=y[i]; --j; } } x[i]=key; y[i]=keyy; qsort(l,i); qsort(i+1,r); } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n>>k; for (int i=0;i<n;++i) cin >> x[i] >> y[i]; qsort(0,n); for (int i=0;i<n;++i) { lastf=query(ftree,y[i]-1,0); lastg=query(gtree,y[i]-1,0); for (int j=1;j<=k;++j) { curf=query(ftree,y[i]-1,j); curg=query(gtree,y[i]-1,j); df[j]=curf+lastg; dg[j]=totalg[j]-curg+totalf[j-1]-lastf; if (dg[j]<0) dg[j]+=M;//WTF???? Be Cautious!!! update(ftree,y[i],j,df[j]); update(gtree,y[i],j,dg[j]); lastf=curf; lastg=curg; } update(ftree,y[i],0,1); update(gtree,y[i],0,1); totalf[0]++; totalg[0]++; for (int j=1;j<=k;++j){ totalf[j]=(totalf[j]+df[j])%M; totalg[j]=(totalg[j]+dg[j])%M; } } cout<<(totalf[k]+totalg[k])%M; return 0; }","title":"1123 \u6298\u7ebf\u7edf\u8ba1 Problem"},{"location":"nr/1123/#1123-problem","text":"\u8f6c\u5230\u9898\u76ee","title":"1123 \u6298\u7ebf\u7edf\u8ba1 Problem"},{"location":"nr/1123/#fineartzs-solution","text":"/* \u6298\u7ebf\u7edf\u8ba1 Problem */ #include <iostream> using namespace std; const int MOD = 100007; struct Point{ int x = 0, y = 0; bool operator <(const Point &p) const{ return x < p.x; } }; int n, k, maxy; Point a[50005]; long long f[50005][11][2] = {0}, t[100005][11][2] = {0}; int lowbit(int x){ return (x & (-x)); } void qsort(int l, int r){ int i = l, j = r; Point key = a[i]; while (i < j){ while (i < j && key < a[j]) --j; a[i] = a[j]; while (i < j && a[i] < key) ++i; a[j] = a[i]; } a[i] = key; if (l < i) qsort(l, i - 1); if (r > j) qsort(j + 1, r); } void add(int x, int j, int k, long long d){ for (int i = x; i <= maxy; i += lowbit(i)) t[i][j][k] = (t[i][j][k] + d) % MOD; } long long sum(int x, int j, int k){ long long ret = 0; for (int i = x; i != 0; i -= lowbit(i)) ret = (ret + t[i][j][k]) % MOD; return ret; } int main(){ cin >> n >> k; maxy = 0; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; if (a[i].y > maxy) maxy = a[i].y; } qsort(1, n); for (int i = 1; i <= n; ++i){ f[i][0][0] = 1; f[i][0][1] = 1; add(a[i].y, 0, 0, 1); add(a[i].y, 0, 1, 1); for (int j = 1; j <= k; ++j){ f[i][j][0] += sum(a[i].y - 1, j, 0) + sum(a[i].y - 1, j - 1, 1); f[i][j][1] += sum(maxy, j, 1) - sum(a[i].y, j, 1) + sum(maxy, j - 1, 0) - sum(a[i].y, j - 1, 0); f[i][j][0] = (f[i][j][0] % MOD + MOD) % MOD; f[i][j][1] = (f[i][j][1] % MOD + MOD) % MOD; add(a[i].y, j, 0, f[i][j][0]); add(a[i].y, j, 1, f[i][j][1]); } } int ans = 0; for (int i = 1; i <= n; ++i) ans = (ans + f[i][k][0] + f[i][k][1]) % MOD; cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1123/#washwangs-solution","text":"#include <iostream> using namespace std; const int M=100007; int ftree[262144][11],gtree[262144][11],df[11],dg[11],totalf[11],totalg[11],n,x[100001],y[100001],lastf,lastg,curf,curg,k; inline int lowbit(int x) { return x&-x; } int query(int t[262144][11],int x,int k){ int sum=0; while (x>0){ sum=(sum+t[x][k])%M; x-=lowbit(x); } return sum; } void update(int t[262144][11],int x,int k,int d){ while (x<=100000){ t[x][k]=(t[x][k]+d)%M; x+=lowbit(x); } } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=x[l],keyy=y[l]; while (i<j){ while (i<j&&x[j]>=key) --j; if (i<j){ x[i]=x[j]; y[i]=y[j]; ++i; } while (i<j&&x[i]<=key) ++i; if (i<j){ x[j]=x[i]; y[j]=y[i]; --j; } } x[i]=key; y[i]=keyy; qsort(l,i); qsort(i+1,r); } int main() { ios::sync_with_stdio(false); cin.tie(0); cin>>n>>k; for (int i=0;i<n;++i) cin >> x[i] >> y[i]; qsort(0,n); for (int i=0;i<n;++i) { lastf=query(ftree,y[i]-1,0); lastg=query(gtree,y[i]-1,0); for (int j=1;j<=k;++j) { curf=query(ftree,y[i]-1,j); curg=query(gtree,y[i]-1,j); df[j]=curf+lastg; dg[j]=totalg[j]-curg+totalf[j-1]-lastf; if (dg[j]<0) dg[j]+=M;//WTF???? Be Cautious!!! update(ftree,y[i],j,df[j]); update(gtree,y[i],j,dg[j]); lastf=curf; lastg=curg; } update(ftree,y[i],0,1); update(gtree,y[i],0,1); totalf[0]++; totalg[0]++; for (int j=1;j<=k;++j){ totalf[j]=(totalf[j]+df[j])%M; totalg[j]=(totalg[j]+dg[j])%M; } } cout<<(totalf[k]+totalg[k])%M; return 0; }","title":"WashWang's solution"},{"location":"nr/1124/","text":"1124 \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 */ #include <iostream> using namespace std; const int INF = 2000000; const int MAXH = 33000; int n; int hp, iq; int a[405], b[405]; int f[405][MAXH + 5] = {0}; int main(){ cin >> n; cin >> hp >> iq; for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i]; for (int i = 0; i <= n; ++i) for (int j = 0; j <= MAXH; ++j) f[i][j] = -INF; f[0][hp] = iq; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= MAXH - 1000; ++j){ if (j >= a[i] && f[i - 1][j - a[i]] != -INF && f[i - 1][j - a[i]] + b[i] > f[i - 1][j]){ f[i][j] = f[i - 1][j - a[i]] + b[i]; } else f[i][j] = f[i - 1][j]; } } int ans = -INF; for (int i = 1; i <= MAXH; ++i){ if (f[n][i] > 70 && f[n][i] * i > ans) ans = f[n][i] * i; } if (ans == -INF) cout << \"Death\" << endl; else cout << ans << endl; return 0; } WashWang's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; int dp[410][33000],x[500],y[500],sx,sy,n,ans; int main() { cin>>n>>sx>>sy; for (int i=1;i<=n;++i) cin>>x[i]>>y[i]; memset(dp,-40000,sizeof(dp)); dp[0][sx]=sy; for (int i=1;i<=n;++i) for (int j = 0; j < 32000; ++j) { dp[i][j] = dp[i - 1][j]; if ((j >= x[i]) && (dp[i - 1][j - x[i]] > -40000) && (dp[i - 1][j - x[i]] + y[i] > dp[i][j])) dp[i][j] = dp[i - 1][j - x[i]] + y[i]; } for (int i=1;i<32000;++i) if ((dp[n][i]>70)&&(i*dp[n][i]>ans)) ans=i*dp[n][i]; if (ans!=0) cout<<ans<<endl; else cout<<\"Death\"<<endl; return 0; }","title":"1124 \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86"},{"location":"nr/1124/#1124","text":"\u8f6c\u5230\u9898\u76ee","title":"1124 \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86"},{"location":"nr/1124/#fineartzs-solution","text":"/* \u6211\u628a\u52a9\u6559\u56e2\u7684\u5e73\u5747\u667a\u5546\u62c9\u4f4e\u4e86 */ #include <iostream> using namespace std; const int INF = 2000000; const int MAXH = 33000; int n; int hp, iq; int a[405], b[405]; int f[405][MAXH + 5] = {0}; int main(){ cin >> n; cin >> hp >> iq; for (int i = 1; i <= n; ++i) cin >> a[i] >> b[i]; for (int i = 0; i <= n; ++i) for (int j = 0; j <= MAXH; ++j) f[i][j] = -INF; f[0][hp] = iq; for (int i = 1; i <= n; ++i){ for (int j = 0; j <= MAXH - 1000; ++j){ if (j >= a[i] && f[i - 1][j - a[i]] != -INF && f[i - 1][j - a[i]] + b[i] > f[i - 1][j]){ f[i][j] = f[i - 1][j - a[i]] + b[i]; } else f[i][j] = f[i - 1][j]; } } int ans = -INF; for (int i = 1; i <= MAXH; ++i){ if (f[n][i] > 70 && f[n][i] * i > ans) ans = f[n][i] * i; } if (ans == -INF) cout << \"Death\" << endl; else cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1124/#washwangs-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int dp[410][33000],x[500],y[500],sx,sy,n,ans; int main() { cin>>n>>sx>>sy; for (int i=1;i<=n;++i) cin>>x[i]>>y[i]; memset(dp,-40000,sizeof(dp)); dp[0][sx]=sy; for (int i=1;i<=n;++i) for (int j = 0; j < 32000; ++j) { dp[i][j] = dp[i - 1][j]; if ((j >= x[i]) && (dp[i - 1][j - x[i]] > -40000) && (dp[i - 1][j - x[i]] + y[i] > dp[i][j])) dp[i][j] = dp[i - 1][j - x[i]] + y[i]; } for (int i=1;i<32000;++i) if ((dp[n][i]>70)&&(i*dp[n][i]>ans)) ans=i*dp[n][i]; if (ans!=0) cout<<ans<<endl; else cout<<\"Death\"<<endl; return 0; }","title":"WashWang's solution"},{"location":"nr/1125/","text":"1125 Typist \u8f6c\u5230\u9898\u76ee FineArtz's solution /* typist */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int FACT[6] = {100000, 10000, 1000, 100, 10, 1}; const int MAXS = 2000000; struct String{ int s = 0, cursor = 0; long long step = 0; String() = default; String(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; } String &operator =(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; return *this; } bool operator ==(const String &ss){ return s == ss.s; } const int operator [](int x) const { return s / FACT[x] % 10; } void inc(int x){ s += FACT[x]; } void dec(int x){ s -= FACT[x]; } void swap(int x, int y){ int p = s / FACT[x] % 10, q = s / FACT[y] % 10; s += (q - p) * FACT[x]; s += (p - q) * FACT[y]; } }; String s, a; String q[2000005]; bool v[1000000][7] = {0}; int front = 0, rear = 0; void push(const String &n){ if (v[n.s][n.cursor]) return; rear = (rear + 1) % MAXS; q[rear] = n; v[n.s][n.cursor] = true; } long long bfs(){ push(s); while (front != rear){ front = (front + 1) % MAXS; String t = q[front]; if (t == a){ return t.step; } String n; int i = t.cursor; if (i != 0){ n = t; ++n.step; n.swap(i, 0); push(n); } if (i != 5){ n = t; ++n.step; n.swap(i, 5); push(n); } if (t[i] != a[i]){ if (t[i] != 0){ n = t; ++n.step; n.dec(i); push(n); } if (t[i] != 9){ n = t; ++n.step; n.inc(i); push(n); } } if (i != 0){ n = t; ++n.step; --n.cursor; push(n); } if (i != 5){ n = t; ++n.step; ++n.cursor; push(n); } } return -1; } int main(){ char p[7], q[7]; cin >> p >> q; for (int i = 0; i < 6; ++i){ s.s = s.s * 10 + p[i] - '0'; a.s = a.s * 10 + q[i] - '0'; } long long ans = bfs(); cout << ans << endl; return 0; }","title":"1125 Typist"},{"location":"nr/1125/#1125-typist","text":"\u8f6c\u5230\u9898\u76ee","title":"1125 Typist"},{"location":"nr/1125/#fineartzs-solution","text":"/* typist */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int FACT[6] = {100000, 10000, 1000, 100, 10, 1}; const int MAXS = 2000000; struct String{ int s = 0, cursor = 0; long long step = 0; String() = default; String(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; } String &operator =(const String &ss){ s = ss.s; step = ss.step; cursor = ss.cursor; return *this; } bool operator ==(const String &ss){ return s == ss.s; } const int operator [](int x) const { return s / FACT[x] % 10; } void inc(int x){ s += FACT[x]; } void dec(int x){ s -= FACT[x]; } void swap(int x, int y){ int p = s / FACT[x] % 10, q = s / FACT[y] % 10; s += (q - p) * FACT[x]; s += (p - q) * FACT[y]; } }; String s, a; String q[2000005]; bool v[1000000][7] = {0}; int front = 0, rear = 0; void push(const String &n){ if (v[n.s][n.cursor]) return; rear = (rear + 1) % MAXS; q[rear] = n; v[n.s][n.cursor] = true; } long long bfs(){ push(s); while (front != rear){ front = (front + 1) % MAXS; String t = q[front]; if (t == a){ return t.step; } String n; int i = t.cursor; if (i != 0){ n = t; ++n.step; n.swap(i, 0); push(n); } if (i != 5){ n = t; ++n.step; n.swap(i, 5); push(n); } if (t[i] != a[i]){ if (t[i] != 0){ n = t; ++n.step; n.dec(i); push(n); } if (t[i] != 9){ n = t; ++n.step; n.inc(i); push(n); } } if (i != 0){ n = t; ++n.step; --n.cursor; push(n); } if (i != 5){ n = t; ++n.step; ++n.cursor; push(n); } } return -1; } int main(){ char p[7], q[7]; cin >> p >> q; for (int i = 0; i < 6; ++i){ s.s = s.s * 10 + p[i] - '0'; a.s = a.s * 10 + q[i] - '0'; } long long ans = bfs(); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1127/","text":"1127 Water Problem \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Water Problem */ #include <iostream> #include <cstring> using namespace std; int t; char s[205]; int isSublist[205][205]; inline bool readSet(const char *, int, int); inline bool readElementSublist(const char *, int, int); inline bool readElement(const char *, int, int); inline bool readSubelement(const char *, int, int); inline bool readSet(const char *s, int first, int last){ if (s[first] != '{' || s[last - 1] != '}') return false; if (last - first == 2) return true; return readElementSublist(s, first + 1, last - 1); } inline bool readElementSublist(const char *s, int first, int last){ if (isSublist[first][last] == 1) return true; if (isSublist[first][last] == -1) return false; for (int i = first; i < last; ++i){ if (s[i] != ',') continue; if (readElement(s, first, i) && readElementSublist(s, i + 1, last)) return true; } bool flag = readElement(s, first, last); if (flag) isSublist[first][last] = 1; else isSublist[first][last] = -1; return flag; } inline bool readElement(const char *s, int first, int last){ if (last - first == 1){ if (s[first] == '{' || s[first] == '}' || s[first] == ',') return true; else return false; } return readSet(s, first, last); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; for (int i = 1; i <= t; ++i){ cin >> s; int len = strlen(s); memset(isSublist, 0, sizeof(isSublist)); if (readSet(s, 0, len)) cout << \"Word #\" << i << \": Set\\n\"; else cout << \"Word #\" << i << \": No Set\\n\"; } return 0; }","title":"1127 Water Problem"},{"location":"nr/1127/#1127-water-problem","text":"\u8f6c\u5230\u9898\u76ee","title":"1127 Water Problem"},{"location":"nr/1127/#fineartzs-solution","text":"/* Water Problem */ #include <iostream> #include <cstring> using namespace std; int t; char s[205]; int isSublist[205][205]; inline bool readSet(const char *, int, int); inline bool readElementSublist(const char *, int, int); inline bool readElement(const char *, int, int); inline bool readSubelement(const char *, int, int); inline bool readSet(const char *s, int first, int last){ if (s[first] != '{' || s[last - 1] != '}') return false; if (last - first == 2) return true; return readElementSublist(s, first + 1, last - 1); } inline bool readElementSublist(const char *s, int first, int last){ if (isSublist[first][last] == 1) return true; if (isSublist[first][last] == -1) return false; for (int i = first; i < last; ++i){ if (s[i] != ',') continue; if (readElement(s, first, i) && readElementSublist(s, i + 1, last)) return true; } bool flag = readElement(s, first, last); if (flag) isSublist[first][last] = 1; else isSublist[first][last] = -1; return flag; } inline bool readElement(const char *s, int first, int last){ if (last - first == 1){ if (s[first] == '{' || s[first] == '}' || s[first] == ',') return true; else return false; } return readSet(s, first, last); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; for (int i = 1; i <= t; ++i){ cin >> s; int len = strlen(s); memset(isSublist, 0, sizeof(isSublist)); if (readSet(s, 0, len)) cout << \"Word #\" << i << \": Set\\n\"; else cout << \"Word #\" << i << \": No Set\\n\"; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1201/","text":"1201 SuperXOR \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int dremainder[] = {0, 1, 3, 6, 0, 5, 1, 8, 6, 5}; int main() { int total = 0; cin >> total; long long* ans = new long long[total]; long long* dig = new long long[total]; for (int i = 0; i < total; i++) { cin >> ans[i]; long long proc = ans[i]; short lowestdigitpo = (proc + 1) % 10; //lowest digit self's added + n x {123456789} time (mod===5) ans[i] = (dremainder[proc % 10] + (proc / 10 % 2) * 5) % 10; proc /= 10; //higher digits long long zeroph = 1; for (int j = 0; proc != 0; j++) { zeroph *= 10; int procdigit = proc % 10; proc /= 10; // 123 >4< 5: 4~{0,1,2,3,4,5} // lowest digit +1: really effected numbers. procdigit = procdigit * lowestdigitpo % 10; ans[i] += procdigit * zeroph; } dig[i] = zeroph / 10; } for (int i = 0; i < total; i++) { if (i) cout << endl; //! CYKA BLYAT padding zeros //errare // if (ans[i] == 0) { // cout << '0'; // continue; // } //errare 2 // while (ans[i] < dig[i]) { // cout << '0'; // dig[i] /= 10; // } cout << ans[i]; } return 0; }","title":"1201 SuperXOR"},{"location":"nr/1201/#1201-superxor","text":"\u8f6c\u5230\u9898\u76ee","title":"1201 SuperXOR"},{"location":"nr/1201/#victrids-solution","text":"#include <iostream> using namespace std; int dremainder[] = {0, 1, 3, 6, 0, 5, 1, 8, 6, 5}; int main() { int total = 0; cin >> total; long long* ans = new long long[total]; long long* dig = new long long[total]; for (int i = 0; i < total; i++) { cin >> ans[i]; long long proc = ans[i]; short lowestdigitpo = (proc + 1) % 10; //lowest digit self's added + n x {123456789} time (mod===5) ans[i] = (dremainder[proc % 10] + (proc / 10 % 2) * 5) % 10; proc /= 10; //higher digits long long zeroph = 1; for (int j = 0; proc != 0; j++) { zeroph *= 10; int procdigit = proc % 10; proc /= 10; // 123 >4< 5: 4~{0,1,2,3,4,5} // lowest digit +1: really effected numbers. procdigit = procdigit * lowestdigitpo % 10; ans[i] += procdigit * zeroph; } dig[i] = zeroph / 10; } for (int i = 0; i < total; i++) { if (i) cout << endl; //! CYKA BLYAT padding zeros //errare // if (ans[i] == 0) { // cout << '0'; // continue; // } //errare 2 // while (ans[i] < dig[i]) { // cout << '0'; // dig[i] /= 10; // } cout << ans[i]; } return 0; }","title":"VictriD's solution"},{"location":"nr/1202/","text":"1202 bigint \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; struct uzel { uzel* niz; uzel* vys; char czs; uzel(char& cz, uzel* lf) : czs(cz), vys(lf->vys), niz(lf) { lf->vys = this; } uzel(char& cz, uzel* hf, int plc) : czs(cz), niz(hf->niz), vys(hf) { hf->niz = this; } uzel() { vys = nullptr; niz = nullptr; czs = '0'; } }; struct uzch { uzel* hf; uzel* lf; uzch() { hf = new uzel; lf = new uzel; hf->niz = lf; lf->vys = hf; } uzch* uchi(char cz) { new uzel(cz, lf); return this; } uzch* uchi(char cz, int plc) { new uzel(cz, hf, 1); return this; } }; int main() { uzch i1, i2, i3; char cz; while (scanf(\"%c\", &cz) && cz != '\\n') { i1.uchi(cz); } while (scanf(\"%c\", &cz) && cz != '\\n') { i2.uchi(cz); } uzel *ptrf1 = i1.lf->vys, *ptrf2 = i2.lf->vys; bool ppf = false; // ! | //! highest should not be ignored! \\ | / //! \\|/ while (ptrf1 != i1.hf || ptrf2 != i2.hf || ppf) { char ans = ptrf1->czs + ptrf2->czs + ppf - '0' - '0'; ppf = ans / 10; i3.uchi('0' + ans % 10, 1); if (ptrf1 != i1.hf) ptrf1 = ptrf1->vys; if (ptrf2 != i2.hf) ptrf2 = ptrf2->vys; } bool stf = false; for (uzel* hff = i3.hf->niz; hff != i3.lf; hff = hff->niz) { if (hff->czs != '0' || stf || hff->niz == i3.lf) { cout << hff->czs; stf = true; } } return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 1000000; class LongLongInt { friend istream &operator>>(istream &is, LongLongInt &num) { char str[MAXNUM]; is >> str; for (int i = 0; i <= strlen(str) - 1; ++i) num.push_back(str[i] - '0'); return is; } friend ostream &operator<<(ostream &os, const LongLongInt &num) { node *p = num.head->next; while (p != num.tail) { os << p->data; p = p->next; } return os; } friend LongLongInt operator+(const LongLongInt &num_1, const LongLongInt &num_2) { node *p = num_1.tail->prev, *q = num_2.tail->prev; int carry = 0, add_1, add_2, result; LongLongInt num_3; while (p != num_1.head || q != num_2.head) { if (p != num_1.head) { add_1 = p->data; p = p->prev; } else add_1 = 0; if (q != num_2.head) { add_2 = q->data; q = q->prev; } else add_2 = 0; result = add_1 + add_2 + carry; num_3.push_front(result % 10); carry = result / 10; } if (carry) num_3.push_front(1); return num_3; } public: LongLongInt() { head = new node; head->next = tail = new node; tail->prev = head; } void push_front(const int &x) { node *tmp = new node(x, head, head->next); head->next = tmp; tmp->next->prev = tmp; } void push_back(const int &x) { node *tmp = new node(x, tail->prev, tail); tmp->prev->next = tmp; tail->prev = tmp; } private: struct node { int data; node *prev, *next; node(const int &x, node *p, node *n) : data(x), prev(p), next(n) {} node() {} ~node() {} }; node *head, *tail; }; int main() { LongLongInt num_1, num_2; cin >> num_1 >> num_2; LongLongInt num_3 = num_1 + num_2; cout << num_3; return 0; }","title":"1202 bigint"},{"location":"nr/1202/#1202-bigint","text":"\u8f6c\u5230\u9898\u76ee","title":"1202 bigint"},{"location":"nr/1202/#victrids-solution","text":"#include <iostream> using namespace std; struct uzel { uzel* niz; uzel* vys; char czs; uzel(char& cz, uzel* lf) : czs(cz), vys(lf->vys), niz(lf) { lf->vys = this; } uzel(char& cz, uzel* hf, int plc) : czs(cz), niz(hf->niz), vys(hf) { hf->niz = this; } uzel() { vys = nullptr; niz = nullptr; czs = '0'; } }; struct uzch { uzel* hf; uzel* lf; uzch() { hf = new uzel; lf = new uzel; hf->niz = lf; lf->vys = hf; } uzch* uchi(char cz) { new uzel(cz, lf); return this; } uzch* uchi(char cz, int plc) { new uzel(cz, hf, 1); return this; } }; int main() { uzch i1, i2, i3; char cz; while (scanf(\"%c\", &cz) && cz != '\\n') { i1.uchi(cz); } while (scanf(\"%c\", &cz) && cz != '\\n') { i2.uchi(cz); } uzel *ptrf1 = i1.lf->vys, *ptrf2 = i2.lf->vys; bool ppf = false; // ! | //! highest should not be ignored! \\ | / //! \\|/ while (ptrf1 != i1.hf || ptrf2 != i2.hf || ppf) { char ans = ptrf1->czs + ptrf2->czs + ppf - '0' - '0'; ppf = ans / 10; i3.uchi('0' + ans % 10, 1); if (ptrf1 != i1.hf) ptrf1 = ptrf1->vys; if (ptrf2 != i2.hf) ptrf2 = ptrf2->vys; } bool stf = false; for (uzel* hff = i3.hf->niz; hff != i3.lf; hff = hff->niz) { if (hff->czs != '0' || stf || hff->niz == i3.lf) { cout << hff->czs; stf = true; } } return 0; }","title":"VictriD's solution"},{"location":"nr/1202/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 1000000; class LongLongInt { friend istream &operator>>(istream &is, LongLongInt &num) { char str[MAXNUM]; is >> str; for (int i = 0; i <= strlen(str) - 1; ++i) num.push_back(str[i] - '0'); return is; } friend ostream &operator<<(ostream &os, const LongLongInt &num) { node *p = num.head->next; while (p != num.tail) { os << p->data; p = p->next; } return os; } friend LongLongInt operator+(const LongLongInt &num_1, const LongLongInt &num_2) { node *p = num_1.tail->prev, *q = num_2.tail->prev; int carry = 0, add_1, add_2, result; LongLongInt num_3; while (p != num_1.head || q != num_2.head) { if (p != num_1.head) { add_1 = p->data; p = p->prev; } else add_1 = 0; if (q != num_2.head) { add_2 = q->data; q = q->prev; } else add_2 = 0; result = add_1 + add_2 + carry; num_3.push_front(result % 10); carry = result / 10; } if (carry) num_3.push_front(1); return num_3; } public: LongLongInt() { head = new node; head->next = tail = new node; tail->prev = head; } void push_front(const int &x) { node *tmp = new node(x, head, head->next); head->next = tmp; tmp->next->prev = tmp; } void push_back(const int &x) { node *tmp = new node(x, tail->prev, tail); tmp->prev->next = tmp; tail->prev = tmp; } private: struct node { int data; node *prev, *next; node(const int &x, node *p, node *n) : data(x), prev(p), next(n) {} node() {} ~node() {} }; node *head, *tail; }; int main() { LongLongInt num_1, num_2; cin >> num_1 >> num_2; LongLongInt num_3 = num_1 + num_2; cout << num_3; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1203/","text":"1203 link \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; template <typename T> struct uzel { uzel<T>* next; uzel<T>* last; T value; uzel(T& nos) { last = nullptr; next = nullptr; value = nos; } uzel() { last = nullptr; next = nullptr; } }; template <typename T> class linlist { template <typename Ty> friend linlist<Ty> operator+(linlist<Ty>& lin1, linlist<Ty>& lin2); template <typename Ty> friend ostream& operator<<(ostream& os, const linlist<Ty>& l); private: uzel<T>* start; uzel<T>* end; public: linlist<T>* operator+=(T var) { uzel<T>* temp = new uzel<T>(var); end->last->next = temp; end->last = temp; temp->next = end; return this; } linlist() { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; } linlist(linlist<T>& l) { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; for (uzel<T>* ptr = l.start->next; ptr != l.end; ptr = ptr->next) { *this += ptr->value; } } }; template <typename T> ostream& operator<<(ostream& os, const linlist<T>& l) { uzel<T>* ptr = l.start->next; while (ptr != l.end) { if (ptr != l.start->next) os << ' '; os << ptr->value; ptr = ptr->next; } return os; } template <typename T> linlist<T> operator+(linlist<T>& lin1, linlist<T>& lin2) { linlist<T> ans(lin1); for (uzel<T>* ptr = lin2.start->next; ptr != lin2.end; ptr = ptr->next) ans += ptr->value; return ans; } template <typename T> void process() { int n, m; cin >> n >> m; T proc; linlist<T> lin1, lin2; for (int i = 0; i < n; i++) { cin >> proc; lin1 += proc; } for (int i = 0; i < m; i++) { cin >> proc; lin2 += proc; } cout << (lin1 + lin2); } int main() { char type[7]; cin >> type; switch (type[0]) { case 'd': process<double>(); break; case 'c': process<char>(); break; case 'i': process<int>(); } return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 10010; template <class elemType> class seqList { friend seqList<elemType> operator+(const seqList<elemType> &list_1, const seqList<elemType> list_2) { seqList<elemType> list_3; for (int i = 0; i < list_1.length(); ++i) list_3.insert(list_3.length(), list_1.visit(i)); for (int i = 0; i < list_2.length(); ++i) list_3.insert(list_3.length(), list_2.visit(i)); return list_3; } public: seqList(); int length() const; void insert(int i, const elemType &x); void get_input(int n); elemType visit(int i) const; void traverse() const; ~seqList(); private: elemType data[MAXNUM]; int currentLength; }; template <class elemType> seqList<elemType>::seqList() { currentLength = 0; } template <class elemType> int seqList<elemType>::length() const { return currentLength; } template <class elemType> void seqList<elemType>::insert(int i, const elemType &x) { for (int j = currentLength; j > i; --j) data[j] = data[j - 1]; data[i] = x; ++currentLength; } template <class elemType> void seqList<elemType>::get_input(int n) { elemType x; for (int i = 0; i < n; ++i) { cin >> x; insert(currentLength, x); } } template <class elemType> elemType seqList<elemType>::visit(int i) const { return data[i]; } template <class elemType> void seqList<elemType>::traverse() const { for (int i = 0; i < currentLength; ++i) cout << data[i] << ' '; cout << endl; } template <class elemType> seqList<elemType>::~seqList(){} int main() { string type; int n1, n2; cin >> type >> n1 >> n2; if (!strcmp(type.c_str(), \"int\")) { seqList<int> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<int> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"char\")) { seqList<char> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<char> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"double\")) { seqList<double> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<double> list_3 = list_1 + list_2; list_3.traverse(); } return 0; }","title":"1203 link"},{"location":"nr/1203/#1203-link","text":"\u8f6c\u5230\u9898\u76ee","title":"1203 link"},{"location":"nr/1203/#victrids-solution","text":"#include <iostream> using namespace std; template <typename T> struct uzel { uzel<T>* next; uzel<T>* last; T value; uzel(T& nos) { last = nullptr; next = nullptr; value = nos; } uzel() { last = nullptr; next = nullptr; } }; template <typename T> class linlist { template <typename Ty> friend linlist<Ty> operator+(linlist<Ty>& lin1, linlist<Ty>& lin2); template <typename Ty> friend ostream& operator<<(ostream& os, const linlist<Ty>& l); private: uzel<T>* start; uzel<T>* end; public: linlist<T>* operator+=(T var) { uzel<T>* temp = new uzel<T>(var); end->last->next = temp; end->last = temp; temp->next = end; return this; } linlist() { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; } linlist(linlist<T>& l) { start = new uzel<T>; end = new uzel<T>; start->next = end; end->last = start; for (uzel<T>* ptr = l.start->next; ptr != l.end; ptr = ptr->next) { *this += ptr->value; } } }; template <typename T> ostream& operator<<(ostream& os, const linlist<T>& l) { uzel<T>* ptr = l.start->next; while (ptr != l.end) { if (ptr != l.start->next) os << ' '; os << ptr->value; ptr = ptr->next; } return os; } template <typename T> linlist<T> operator+(linlist<T>& lin1, linlist<T>& lin2) { linlist<T> ans(lin1); for (uzel<T>* ptr = lin2.start->next; ptr != lin2.end; ptr = ptr->next) ans += ptr->value; return ans; } template <typename T> void process() { int n, m; cin >> n >> m; T proc; linlist<T> lin1, lin2; for (int i = 0; i < n; i++) { cin >> proc; lin1 += proc; } for (int i = 0; i < m; i++) { cin >> proc; lin2 += proc; } cout << (lin1 + lin2); } int main() { char type[7]; cin >> type; switch (type[0]) { case 'd': process<double>(); break; case 'c': process<char>(); break; case 'i': process<int>(); } return 0; }","title":"VictriD's solution"},{"location":"nr/1203/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 10010; template <class elemType> class seqList { friend seqList<elemType> operator+(const seqList<elemType> &list_1, const seqList<elemType> list_2) { seqList<elemType> list_3; for (int i = 0; i < list_1.length(); ++i) list_3.insert(list_3.length(), list_1.visit(i)); for (int i = 0; i < list_2.length(); ++i) list_3.insert(list_3.length(), list_2.visit(i)); return list_3; } public: seqList(); int length() const; void insert(int i, const elemType &x); void get_input(int n); elemType visit(int i) const; void traverse() const; ~seqList(); private: elemType data[MAXNUM]; int currentLength; }; template <class elemType> seqList<elemType>::seqList() { currentLength = 0; } template <class elemType> int seqList<elemType>::length() const { return currentLength; } template <class elemType> void seqList<elemType>::insert(int i, const elemType &x) { for (int j = currentLength; j > i; --j) data[j] = data[j - 1]; data[i] = x; ++currentLength; } template <class elemType> void seqList<elemType>::get_input(int n) { elemType x; for (int i = 0; i < n; ++i) { cin >> x; insert(currentLength, x); } } template <class elemType> elemType seqList<elemType>::visit(int i) const { return data[i]; } template <class elemType> void seqList<elemType>::traverse() const { for (int i = 0; i < currentLength; ++i) cout << data[i] << ' '; cout << endl; } template <class elemType> seqList<elemType>::~seqList(){} int main() { string type; int n1, n2; cin >> type >> n1 >> n2; if (!strcmp(type.c_str(), \"int\")) { seqList<int> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<int> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"char\")) { seqList<char> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<char> list_3 = list_1 + list_2; list_3.traverse(); } else if (!strcmp(type.c_str(), \"double\")) { seqList<double> list_1, list_2; list_1.get_input(n1); list_2.get_input(n2); seqList<double> list_3 = list_1 + list_2; list_3.traverse(); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1204/","text":"1204 edit \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; void list(char order[]) { int n1 = 0, n2 = 0, i = 0; while (order[i] != ' ') ++i; ++i; while (order[i] != ' ') { n1 *= 10; n1 += order[i] - '0'; ++i; } ++i; while (order[i] != '\\0') { n2 *= 10; n2 += order[i] - '0'; ++i; } if (n1 < 1 || n2 > lines || n1 > n2) { cout << \"Error!\" << endl; return; } else { for (int j = n1; j <= n2; ++j) cout << text[j] << endl; return; } } void ins(char order[]) { int i = 0, j = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') str[strlen(str)] = order[k++]; if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) + 1) { cout << \"Error!\" << endl; return; } int length = strlen(str); for (int m = strlen(text[i]) - 1; m >= j - 1; --m) { text[i][m + length] = text[i][m]; } for (int m = j - 1; m < j - 1 + length; ++m) { text[i][m] = str[m - j + 1]; } } void del(char order[]) { int i = 0, j = 0, num = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') { num *= 10; num += order[k] - '0'; ++k; } if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) || num < 0 || num > strlen(text[i]) - j + 1) { cout << \"Error!\" << endl; return; } int m, length = strlen(text[i]); for (m = j - 1; m < j - 1 + num; ++m) { text[i][m] = '\\0'; } for (; m < length; ++m) { text[i][m - num] = text[i][m]; } for (; m < length + num; ++m) { text[i][m - num] = '\\0'; } } int main() { cin.getline(text[lines], 2005, '\\n'); while (strcmp(text[lines], \"******\")) cin.getline(text[++lines], 2005, '\\n'); --lines; char order[105][155]; int orders = 1; cin.getline(order[orders], 155, '\\n'); while (strcmp(order[orders], \"quit\")) cin.getline(order[++orders], 155, '\\n'); --orders; for (int i = 1; i <= orders; ++i) { switch (order[i][0]) { case 'l': list(order[i]); break; case 'i': ins(order[i]); break; case 'd': del(order[i]); break; } } for (int i = 1; i <= lines; ++i) cout << text[i] << endl; return 0; }","title":"1204 edit"},{"location":"nr/1204/#1204-edit","text":"\u8f6c\u5230\u9898\u76ee","title":"1204 edit"},{"location":"nr/1204/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; void list(char order[]) { int n1 = 0, n2 = 0, i = 0; while (order[i] != ' ') ++i; ++i; while (order[i] != ' ') { n1 *= 10; n1 += order[i] - '0'; ++i; } ++i; while (order[i] != '\\0') { n2 *= 10; n2 += order[i] - '0'; ++i; } if (n1 < 1 || n2 > lines || n1 > n2) { cout << \"Error!\" << endl; return; } else { for (int j = n1; j <= n2; ++j) cout << text[j] << endl; return; } } void ins(char order[]) { int i = 0, j = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') str[strlen(str)] = order[k++]; if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) + 1) { cout << \"Error!\" << endl; return; } int length = strlen(str); for (int m = strlen(text[i]) - 1; m >= j - 1; --m) { text[i][m + length] = text[i][m]; } for (int m = j - 1; m < j - 1 + length; ++m) { text[i][m] = str[m - j + 1]; } } void del(char order[]) { int i = 0, j = 0, num = 0, k = 0; char str[105] = \"\"; while (order[k] != ' ') ++k; ++k; while (order[k] != ' ') { i *= 10; i += order[k] - '0'; ++k; } ++k; while (order[k] != ' ') { j *= 10; j += order[k] - '0'; ++k; } ++k; while (order[k] != '\\0') { num *= 10; num += order[k] - '0'; ++k; } if (i < 1 || i > lines || j < 1 || j > strlen(text[i]) || num < 0 || num > strlen(text[i]) - j + 1) { cout << \"Error!\" << endl; return; } int m, length = strlen(text[i]); for (m = j - 1; m < j - 1 + num; ++m) { text[i][m] = '\\0'; } for (; m < length; ++m) { text[i][m - num] = text[i][m]; } for (; m < length + num; ++m) { text[i][m - num] = '\\0'; } } int main() { cin.getline(text[lines], 2005, '\\n'); while (strcmp(text[lines], \"******\")) cin.getline(text[++lines], 2005, '\\n'); --lines; char order[105][155]; int orders = 1; cin.getline(order[orders], 155, '\\n'); while (strcmp(order[orders], \"quit\")) cin.getline(order[++orders], 155, '\\n'); --orders; for (int i = 1; i <= orders; ++i) { switch (order[i][0]) { case 'l': list(order[i]); break; case 'i': ins(order[i]); break; case 'd': del(order[i]); break; } } for (int i = 1; i <= lines; ++i) cout << text[i] << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1208/","text":"1208 \u5927\u5723\u5207\u86cb\u7cd5 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5927\u5723\u5207\u86cb\u7cd5 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const double pi = 3.1415926; int main(){ double r, a, ans = 0.0; while (cin >> r >> a){ double tans = acos(a/r) * r * r; tans -= a * sqrt(r * r - a * a); if (ans < tans) ans = tans; } cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"1208 \u5927\u5723\u5207\u86cb\u7cd5"},{"location":"nr/1208/#1208","text":"\u8f6c\u5230\u9898\u76ee","title":"1208 \u5927\u5723\u5207\u86cb\u7cd5"},{"location":"nr/1208/#fineartzs-solution","text":"/* \u5927\u5723\u5207\u86cb\u7cd5 */ #include <iostream> #include <iomanip> #include <cmath> using namespace std; const double pi = 3.1415926; int main(){ double r, a, ans = 0.0; while (cin >> r >> a){ double tans = acos(a/r) * r * r; tans -= a * sqrt(r * r - a * a); if (ans < tans) ans = tans; } cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1209/","text":"1209 \u6570\u6570 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int N; cin >> N; int num; int cnt = 0; for (int i = 0; i < N; i++) { cin >> num; while (num != 0) { if (num & 1) cnt++; num = num >> 1; } } cout << cnt; return 0; } FineArtz's solution /* \u6570\u6570 */ #include <iostream> using namespace std; int main(){ int n, ans = 0; cin >> n; for (int i = 1; i <= n; ++i){ int a = 0; cin >> a; while (a > 0){ if (a % 2) ++ans; a /= 2; } } cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int find_one(int x) { int sum = 0; while (x > 0) { sum += x % 2; x /= 2; } return sum; } int main() { int n, x, sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> x; sum += find_one(x); } cout << sum; return 0; }","title":"1209 \u6570\u6570"},{"location":"nr/1209/#1209","text":"\u8f6c\u5230\u9898\u76ee","title":"1209 \u6570\u6570"},{"location":"nr/1209/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int N; cin >> N; int num; int cnt = 0; for (int i = 0; i < N; i++) { cin >> num; while (num != 0) { if (num & 1) cnt++; num = num >> 1; } } cout << cnt; return 0; }","title":"VictriD's solution"},{"location":"nr/1209/#fineartzs-solution","text":"/* \u6570\u6570 */ #include <iostream> using namespace std; int main(){ int n, ans = 0; cin >> n; for (int i = 1; i <= n; ++i){ int a = 0; cin >> a; while (a > 0){ if (a % 2) ++ans; a /= 2; } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1209/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int find_one(int x) { int sum = 0; while (x > 0) { sum += x % 2; x /= 2; } return sum; } int main() { int n, x, sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> x; sum += find_one(x); } cout << sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1211/","text":"1211 isCBT \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int ls[200000],rs[200000],t[200000],n,d=-1,root; bool ans=true,sec=true; void dfs(int i,int depth) { if (ls[i]) dfs(ls[i],depth+1); if ((!ls[i])||(!rs[i])) { if (d == -1) d = depth; else { if ((depth == d - 1) && sec) { d = depth; sec = false; } if (d != depth) ans = false; } } if (rs[i]) dfs(rs[i],depth+1); } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&ls[i],&rs[i]); t[ls[i]]++; t[rs[i]]++; } for (int i=1;i<=n;++i) if (!t[i]) { root=i; break; } dfs(root,1); if (ans) printf(\"Y\"); else printf(\"N\"); return 0; }","title":"1211 isCBT"},{"location":"nr/1211/#1211-iscbt","text":"\u8f6c\u5230\u9898\u76ee","title":"1211 isCBT"},{"location":"nr/1211/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int ls[200000],rs[200000],t[200000],n,d=-1,root; bool ans=true,sec=true; void dfs(int i,int depth) { if (ls[i]) dfs(ls[i],depth+1); if ((!ls[i])||(!rs[i])) { if (d == -1) d = depth; else { if ((depth == d - 1) && sec) { d = depth; sec = false; } if (d != depth) ans = false; } } if (rs[i]) dfs(rs[i],depth+1); } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&ls[i],&rs[i]); t[ls[i]]++; t[rs[i]]++; } for (int i=1;i<=n;++i) if (!t[i]) { root=i; break; } dfs(root,1); if (ans) printf(\"Y\"); else printf(\"N\"); return 0; }","title":"WashWang's solution"},{"location":"nr/1214/","text":"1214 traverse \u8f6c\u5230\u9898\u76ee FineArtz's solution /* traverse */ #include <iostream> using namespace std; struct Node{ int child = 0, sibling = 0; int val = 0; }; Node a[100005]; bool b[100005] = {0}; int n; void foretra(int x){ if (x == 0) return; cout << a[x].val << ' '; int t = a[x].child; while (t){ foretra(t); t = a[t].sibling; } } void backtra(int x){ if (x == 0) return; int t = a[x].child; while (t){ backtra(t); t = a[t].sibling; } cout << a[x].val << ' '; } void hieatra(int root){ int q[100005]; int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front]; front++; cout << a[now].val << ' '; int t = a[now].child; while (t){ q[rear++] = t; t = a[t].sibling; } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].child >> a[i].sibling >> a[i].val; b[a[i].child] = true; b[a[i].sibling] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } foretra(root); cout << '\\n'; backtra(root); cout << '\\n'; hieatra(root); cout << '\\n'; return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int n,l[200000],r[200000],v[200000],s[200000],root,queue[200000],head=0,tail=1,p; void pre(int x){ cout<<v[x]<<\" \"; int p=l[x]; while (p) {pre(p); p=r[p];} } void post(int x){ int p=l[x]; while (p) {post(p); p=r[p];} cout<<v[x]<<\" \"; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d%d\",&l[i],&r[i],&v[i]); s[l[i]]=1; s[r[i]]=1; } for (int i=1;i<=n;++i) if (!s[i]) root=i; pre(root); cout<<endl; post(root); cout<<endl; queue[0]=root; while (head<tail){ cout<<v[queue[head]]<<\" \"; p=l[queue[head++]]; while (p) { queue[tail++]=p; p=r[p]; } } return 0; }","title":"1214 traverse"},{"location":"nr/1214/#1214-traverse","text":"\u8f6c\u5230\u9898\u76ee","title":"1214 traverse"},{"location":"nr/1214/#fineartzs-solution","text":"/* traverse */ #include <iostream> using namespace std; struct Node{ int child = 0, sibling = 0; int val = 0; }; Node a[100005]; bool b[100005] = {0}; int n; void foretra(int x){ if (x == 0) return; cout << a[x].val << ' '; int t = a[x].child; while (t){ foretra(t); t = a[t].sibling; } } void backtra(int x){ if (x == 0) return; int t = a[x].child; while (t){ backtra(t); t = a[t].sibling; } cout << a[x].val << ' '; } void hieatra(int root){ int q[100005]; int front = 0, rear = 0; q[rear++] = root; while (front != rear){ int now = q[front]; front++; cout << a[now].val << ' '; int t = a[now].child; while (t){ q[rear++] = t; t = a[t].sibling; } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].child >> a[i].sibling >> a[i].val; b[a[i].child] = true; b[a[i].sibling] = true; } int root = 0; for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } foretra(root); cout << '\\n'; backtra(root); cout << '\\n'; hieatra(root); cout << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/1214/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int n,l[200000],r[200000],v[200000],s[200000],root,queue[200000],head=0,tail=1,p; void pre(int x){ cout<<v[x]<<\" \"; int p=l[x]; while (p) {pre(p); p=r[p];} } void post(int x){ int p=l[x]; while (p) {post(p); p=r[p];} cout<<v[x]<<\" \"; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d%d\",&l[i],&r[i],&v[i]); s[l[i]]=1; s[r[i]]=1; } for (int i=1;i<=n;++i) if (!s[i]) root=i; pre(root); cout<<endl; post(root); cout<<endl; queue[0]=root; while (head<tail){ cout<<v[queue[head]]<<\" \"; p=l[queue[head++]]; while (p) { queue[tail++]=p; p=r[p]; } } return 0; }","title":"WashWang's solution"},{"location":"nr/1215/","text":"1215 bernoulli \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int n,heap[30000],len,x; char cmd[20]; void minheapify(int x){ int smallest=x,l,r,tmp; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { tmp = heap[smallest]; heap[smallest] = heap[x]; heap[x] = tmp; x = smallest; } else break; } } void insert(int x){ int i=++len,tmp; heap[len]=x; while (i>1 && heap[i/2]>heap[i]) { tmp=heap[i/2]; heap[i/2]=heap[i]; heap[i]=tmp; i=i/2; } } int pop(){ int ret=heap[1]; heap[1]=heap[len--]; minheapify(1); return ret; } int main() { cin>>n; len=0; for (int i=0;i<n;++i){ cin>>cmd; if (strcmp(cmd,\"insert\")==0){ cin>>x; insert(x); } if (strcmp(cmd,\"delete\")==0) pop(); if (strcmp(cmd,\"min\")==0) cout<<heap[1]<<endl; } return 0; }","title":"1215 bernoulli"},{"location":"nr/1215/#1215-bernoulli","text":"\u8f6c\u5230\u9898\u76ee","title":"1215 bernoulli"},{"location":"nr/1215/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[30000],len,x; char cmd[20]; void minheapify(int x){ int smallest=x,l,r,tmp; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { tmp = heap[smallest]; heap[smallest] = heap[x]; heap[x] = tmp; x = smallest; } else break; } } void insert(int x){ int i=++len,tmp; heap[len]=x; while (i>1 && heap[i/2]>heap[i]) { tmp=heap[i/2]; heap[i/2]=heap[i]; heap[i]=tmp; i=i/2; } } int pop(){ int ret=heap[1]; heap[1]=heap[len--]; minheapify(1); return ret; } int main() { cin>>n; len=0; for (int i=0;i<n;++i){ cin>>cmd; if (strcmp(cmd,\"insert\")==0){ cin>>x; insert(x); } if (strcmp(cmd,\"delete\")==0) pop(); if (strcmp(cmd,\"min\")==0) cout<<heap[1]<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1233/","text":"1233 Path \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Path */ #include <iostream> using namespace std; int n, m, start, len; int head[15] = {0}, nxt[105] = {0}, e[105] = {0}; int cnt = 0, ans = 0; bool vis[15] = {0}; void addEdge(int u, int v){ nxt[++cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x, int step){ if (step == len){ ++ans; return; } for (int i = head[x]; i; i = nxt[i]){ if (!vis[e[i]]){ vis[e[i]] = true; dfs(e[i], step + 1); vis[e[i]] = false; } } } int main(){ cin >> n >> m >> start >> len; for (int i = 1; i <= m; ++i){ int u, v; cin >> u >> v; addEdge(u, v); } vis[start] = true; dfs(start, 0); cout << ans << endl; return 0; }","title":"1233 Path"},{"location":"nr/1233/#1233-path","text":"\u8f6c\u5230\u9898\u76ee","title":"1233 Path"},{"location":"nr/1233/#fineartzs-solution","text":"/* Path */ #include <iostream> using namespace std; int n, m, start, len; int head[15] = {0}, nxt[105] = {0}, e[105] = {0}; int cnt = 0, ans = 0; bool vis[15] = {0}; void addEdge(int u, int v){ nxt[++cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x, int step){ if (step == len){ ++ans; return; } for (int i = head[x]; i; i = nxt[i]){ if (!vis[e[i]]){ vis[e[i]] = true; dfs(e[i], step + 1); vis[e[i]] = false; } } } int main(){ cin >> n >> m >> start >> len; for (int i = 1; i <= m; ++i){ int u, v; cin >> u >> v; addEdge(u, v); } vis[start] = true; dfs(start, 0); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1239/","text":"1239 \u6b22\u603b\u627e\u5de5\u4f5c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6b22\u603b\u627e\u5de5\u4f5c */ #include <iostream> using namespace std; int main(){ int n = 0, ans = 0; cin >> n; if (n > 3500){ n -= 3500; if (n <= 1500) ans = n * 0.03; else if (n <= 4500) ans = 1500 * 0.03 + (n - 1500) * 0.1; else if (n <= 9000) ans = 1500 * 0.03 + 3000 * 0.1 + (n - 4500) * 0.2; else if (n <= 35000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + (n - 9000) * 0.25; else if (n <= 55000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + (n - 35000) * 0.3; else if (n <= 80000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + (n - 55000) * 0.35; else ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + 25000 * 0.35 + (n - 80000) * 0.45; } cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { double n, sum; double tax[] = {0, 45, 345, 1245, 7745, 13745, 22495}; cin >> n; if (n <= 3500) sum = 0.0; else { n -= 3500; if (n <= 1500) sum = n * 0.03; else if (n <= 4500) sum = tax[1] + (n - 1500) * 0.1; else if (n <= 9000) sum = tax[2] + (n - 4500) * 0.2; else if (n <= 35000) sum = tax[3] + (n - 9000) * 0.25; else if (n <= 55000) sum = tax[4] + (n - 35000) * 0.3; else if (n <= 80000) sum = tax[5] + (n - 55000) * 0.35; else sum = tax[6] + (n - 80000) * 0.45; } cout << int(sum); return 0; }","title":"1239 \u6b22\u603b\u627e\u5de5\u4f5c"},{"location":"nr/1239/#1239","text":"\u8f6c\u5230\u9898\u76ee","title":"1239 \u6b22\u603b\u627e\u5de5\u4f5c"},{"location":"nr/1239/#fineartzs-solution","text":"/* \u6b22\u603b\u627e\u5de5\u4f5c */ #include <iostream> using namespace std; int main(){ int n = 0, ans = 0; cin >> n; if (n > 3500){ n -= 3500; if (n <= 1500) ans = n * 0.03; else if (n <= 4500) ans = 1500 * 0.03 + (n - 1500) * 0.1; else if (n <= 9000) ans = 1500 * 0.03 + 3000 * 0.1 + (n - 4500) * 0.2; else if (n <= 35000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + (n - 9000) * 0.25; else if (n <= 55000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + (n - 35000) * 0.3; else if (n <= 80000) ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + (n - 55000) * 0.35; else ans = 1500 * 0.03 + 3000 * 0.1 + 4500 * 0.2 + 26000 * 0.25 + 20000 * 0.3 + 25000 * 0.35 + (n - 80000) * 0.45; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1239/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { double n, sum; double tax[] = {0, 45, 345, 1245, 7745, 13745, 22495}; cin >> n; if (n <= 3500) sum = 0.0; else { n -= 3500; if (n <= 1500) sum = n * 0.03; else if (n <= 4500) sum = tax[1] + (n - 1500) * 0.1; else if (n <= 9000) sum = tax[2] + (n - 4500) * 0.2; else if (n <= 35000) sum = tax[3] + (n - 9000) * 0.25; else if (n <= 55000) sum = tax[4] + (n - 35000) * 0.3; else if (n <= 80000) sum = tax[5] + (n - 55000) * 0.35; else sum = tax[6] + (n - 80000) * 0.45; } cout << int(sum); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1249/","text":"1249 \u6709\u5e8f\u5206\u6570\u5e8f\u5217 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6709\u5e8f\u5206\u6570\u6570\u5217 */ #include <iostream> using namespace std; int a[10000] = {0}, b[10000] = {0}; double c[10000] = {0.0}; int gcd(int x, int y){ if (x % y == 0) return y; return gcd(y, x % y); } inline void swap(int &x, int &y){ int t = x; x = y; y = t; } inline void swap(double &x, double &y) { double t = x; x = y; y = t; } void qsort(int low, int high){ if (low >= high) return; int i = low, j = high, keya = a[i], keyb = b[i]; double key = c[i]; while (i < j){ while (i < j && c[j] >= key) --j; a[i] = a[j]; b[i] = b[j]; c[i] = c[j]; while (i < j && c[i] <= key) ++i; a[j] = a[i]; b[j] = b[i]; c[j] = c[i]; } a[i] = keya; b[i] = keyb; c[i] = key; qsort(i + 1, high); qsort(low, j - 1); } int main(){ int n, cnt = 0; cin >> n; a[0] = 0; b[0] = 1; //cout << gcd(3, 2) << endl; for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j){ if (gcd(i, j) == 1){ ++cnt; a[cnt] = j; b[cnt] = i; c[cnt] = double(j) / double(i); } } qsort(1, cnt); a[++cnt] = 1; b[cnt] = 1; c[cnt] = 1.0; for (int i = 0; i <= cnt; ++i){ cout << a[i] << '/' << b[i] << endl; } return 0; }","title":"1249 \u6709\u5e8f\u5206\u6570\u5e8f\u5217"},{"location":"nr/1249/#1249","text":"\u8f6c\u5230\u9898\u76ee","title":"1249 \u6709\u5e8f\u5206\u6570\u5e8f\u5217"},{"location":"nr/1249/#fineartzs-solution","text":"/* \u6709\u5e8f\u5206\u6570\u6570\u5217 */ #include <iostream> using namespace std; int a[10000] = {0}, b[10000] = {0}; double c[10000] = {0.0}; int gcd(int x, int y){ if (x % y == 0) return y; return gcd(y, x % y); } inline void swap(int &x, int &y){ int t = x; x = y; y = t; } inline void swap(double &x, double &y) { double t = x; x = y; y = t; } void qsort(int low, int high){ if (low >= high) return; int i = low, j = high, keya = a[i], keyb = b[i]; double key = c[i]; while (i < j){ while (i < j && c[j] >= key) --j; a[i] = a[j]; b[i] = b[j]; c[i] = c[j]; while (i < j && c[i] <= key) ++i; a[j] = a[i]; b[j] = b[i]; c[j] = c[i]; } a[i] = keya; b[i] = keyb; c[i] = key; qsort(i + 1, high); qsort(low, j - 1); } int main(){ int n, cnt = 0; cin >> n; a[0] = 0; b[0] = 1; //cout << gcd(3, 2) << endl; for (int i = 1; i <= n; ++i) for (int j = 1; j < i; ++j){ if (gcd(i, j) == 1){ ++cnt; a[cnt] = j; b[cnt] = i; c[cnt] = double(j) / double(i); } } qsort(1, cnt); a[++cnt] = 1; b[cnt] = 1; c[cnt] = 1.0; for (int i = 0; i <= cnt; ++i){ cout << a[i] << '/' << b[i] << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1252/","text":"1252 \u5546\u5bb6\u7684\u7b79\u5212 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> #include <algorithm> long long s[1001]; int n,m,x,y,ans; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); s[x]+=y; } for (int i=0;i<1000;++i) { if (n>s[i]){ n-=s[i]; ans+=s[i]*i; } else { ans+=n*i; break; } } printf(\"%d\",ans); return 0; }","title":"1252 \u5546\u5bb6\u7684\u7b79\u5212"},{"location":"nr/1252/#1252","text":"\u8f6c\u5230\u9898\u76ee","title":"1252 \u5546\u5bb6\u7684\u7b79\u5212"},{"location":"nr/1252/#washwangs-solution","text":"#include <iostream> #include <cstdio> #include <algorithm> long long s[1001]; int n,m,x,y,ans; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); s[x]+=y; } for (int i=0;i<1000;++i) { if (n>s[i]){ n-=s[i]; ans+=s[i]*i; } else { ans+=n*i; break; } } printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1253/","text":"1253 \u5723\u76d4\u8c37\u4e4b\u6218 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> int x[501],y[501],m,n,p,q,k,curx,cury,sum; int main() { scanf(\"%d%d%d\",&m,&n,&k); for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { scanf(\"%d\",&p); x[p]=i; y[p]=j; } for (q=500;q>=1;--q) if (x[q]>0) { if (k-2*x[q]-1>=0) { k-=x[q]+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",0); return 0; } break; } for (--q;q>=1;--q) { if (x[q]>0) { if (k-abs(curx-x[q])-abs(cury-y[q])-x[q]-1>=0) { k-=abs(curx-x[q])+abs(cury-y[q])+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",sum); return 0; } } } printf(\"%d\",sum); return 0; }","title":"1253 \u5723\u76d4\u8c37\u4e4b\u6218"},{"location":"nr/1253/#1253","text":"\u8f6c\u5230\u9898\u76ee","title":"1253 \u5723\u76d4\u8c37\u4e4b\u6218"},{"location":"nr/1253/#washwangs-solution","text":"#include <iostream> #include <cstdio> int x[501],y[501],m,n,p,q,k,curx,cury,sum; int main() { scanf(\"%d%d%d\",&m,&n,&k); for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { scanf(\"%d\",&p); x[p]=i; y[p]=j; } for (q=500;q>=1;--q) if (x[q]>0) { if (k-2*x[q]-1>=0) { k-=x[q]+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",0); return 0; } break; } for (--q;q>=1;--q) { if (x[q]>0) { if (k-abs(curx-x[q])-abs(cury-y[q])-x[q]-1>=0) { k-=abs(curx-x[q])+abs(cury-y[q])+1; sum+=q; curx=x[q]; cury=y[q]; } else { printf(\"%d\",sum); return 0; } } } printf(\"%d\",sum); return 0; }","title":"WashWang's solution"},{"location":"nr/1254/","text":"1254 \u4f20\u624b\u7ee2 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; long long x[31][31]; int n,m; int main() { x[0][0]=1; cin>>n>>m; for (int i=1;i<=m;++i) { x[i][0] = x[i - 1][n - 1] + x[i - 1][1]; for (int j = 1; j < n - 1; ++j){ x[i][j]=x[i-1][j-1]+x[i-1][j+1]; } x[i][n-1]=x[i-1][0]+x[i-1][n-2]; } cout<<x[m][0]; return 0; }","title":"1254 \u4f20\u624b\u7ee2"},{"location":"nr/1254/#1254","text":"\u8f6c\u5230\u9898\u76ee","title":"1254 \u4f20\u624b\u7ee2"},{"location":"nr/1254/#washwangs-solution","text":"#include <iostream> using namespace std; long long x[31][31]; int n,m; int main() { x[0][0]=1; cin>>n>>m; for (int i=1;i<=m;++i) { x[i][0] = x[i - 1][n - 1] + x[i - 1][1]; for (int j = 1; j < n - 1; ++j){ x[i][j]=x[i-1][j-1]+x[i-1][j+1]; } x[i][n-1]=x[i-1][0]+x[i-1][n-2]; } cout<<x[m][0]; return 0; }","title":"WashWang's solution"},{"location":"nr/1255/","text":"1255 \u4f60\u7684\u9b54\u6212\uff1f\u4e0d\uff0c\u662f\u4f60\u7684\u9b54\u6212\u3002 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <string> using namespace std; string s,name[30],who,towho,days[7]={\"Monday.\",\"Tuesday.\",\"Wednesday.\",\"Thursday.\",\"Friday.\",\"Saturday.\",\"Sunday.\"}; int m,n,p,mh,f,t,c,succ,pos; char ch; int findname(string name1) { for (int j=0;j<m;++j) if (name1==name[j]) return j; return -1; } int main() { cin>>m>>n>>p; ch=getchar(); for (int i=0;i<m;++i){ getline(cin,name[i]); } for (int i=0;i<p;++i){ getline(cin,s); mh=s.find(':'); who=s.substr(0,mh); c=-1; f=findname(who); if (f==-1) continue; pos=s.find('.'); if (pos!=s.length()-1) continue; pos=s.find(\" have the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 1; } } else{ pos=s.find(\" have not the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 2; } } else{ pos=s.find(\" has the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=1; } else{ pos=s.find(\" has not the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=2; } else{ pos=s.find(\" Today is \"); if (pos!=-1){ t=-1; for (int j=0;j<7;++j) if (s.find(days[j])==pos+10) { t=j+1; break; } if (t!=-1) c=3; } } } } } if (c!=-1) { succ++; cout<<f<<\" \"<<t<<\" \"<<c<<endl; } } if (!succ) cout<<\"Orz\"<<endl; return 0; }","title":"1255 \u4f60\u7684\u9b54\u6212\uff1f\u4e0d\uff0c\u662f\u4f60\u7684\u9b54\u6212\u3002"},{"location":"nr/1255/#1255","text":"\u8f6c\u5230\u9898\u76ee","title":"1255 \u4f60\u7684\u9b54\u6212\uff1f\u4e0d\uff0c\u662f\u4f60\u7684\u9b54\u6212\u3002"},{"location":"nr/1255/#washwangs-solution","text":"#include <iostream> #include <string> using namespace std; string s,name[30],who,towho,days[7]={\"Monday.\",\"Tuesday.\",\"Wednesday.\",\"Thursday.\",\"Friday.\",\"Saturday.\",\"Sunday.\"}; int m,n,p,mh,f,t,c,succ,pos; char ch; int findname(string name1) { for (int j=0;j<m;++j) if (name1==name[j]) return j; return -1; } int main() { cin>>m>>n>>p; ch=getchar(); for (int i=0;i<m;++i){ getline(cin,name[i]); } for (int i=0;i<p;++i){ getline(cin,s); mh=s.find(':'); who=s.substr(0,mh); c=-1; f=findname(who); if (f==-1) continue; pos=s.find('.'); if (pos!=s.length()-1) continue; pos=s.find(\" have the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 1; } } else{ pos=s.find(\" have not the ring.\"); if (pos!=-1) { if (pos - mh == 3 && s[pos - 1] == 'I' && s[mh + 2] == 'I') { t = f; c = 2; } } else{ pos=s.find(\" has the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=1; } else{ pos=s.find(\" has not the ring.\"); if (pos!=-1){ t=findname(s.substr(mh+2,pos-2-mh)); if (t!=-1) c=2; } else{ pos=s.find(\" Today is \"); if (pos!=-1){ t=-1; for (int j=0;j<7;++j) if (s.find(days[j])==pos+10) { t=j+1; break; } if (t!=-1) c=3; } } } } } if (c!=-1) { succ++; cout<<f<<\" \"<<t<<\" \"<<c<<endl; } } if (!succ) cout<<\"Orz\"<<endl; return 0; }","title":"WashWang's solution"},{"location":"nr/1279/","text":"1279 \u6253\u7535\u8bdd \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6253\u7535\u8bdd */ #include <iostream> #include <string> #include <map> using namespace std; const char res[26] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 0, 7, 7, 8, 8, 8, 9, 9, 9, 0}; bool IsLet(char ch) { return (ch >= 'A' && ch <= 'Z'); } bool IsNum(char ch) { return (ch >= '0' && ch <= '9'); } int main(){ int n, flag = 0; cin >> n; map<string, int> ans; for (int i = 1; i <= n; ++i){ string s, ss = \"\"; cin >> s; for (string::iterator it = s.begin(); it != s.end(); ++it){ if (IsNum(*it)) ss.push_back(*it); else if (IsLet(*it)) ss.push_back(res[*it - 'A'] + '0'); } ss.insert(ss.begin() + 3, '-'); ++ans[ss]; } for (map<string, int>::iterator it = ans.begin(); it != ans.end(); ++it) if (it->second > 1){ cout << it->first << ' ' << it->second << endl; flag = 1; } if (!flag) cout << \"No duplicates.\" << endl; return 0; }","title":"1279 \u6253\u7535\u8bdd"},{"location":"nr/1279/#1279","text":"\u8f6c\u5230\u9898\u76ee","title":"1279 \u6253\u7535\u8bdd"},{"location":"nr/1279/#fineartzs-solution","text":"/* \u6253\u7535\u8bdd */ #include <iostream> #include <string> #include <map> using namespace std; const char res[26] = {2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 0, 7, 7, 8, 8, 8, 9, 9, 9, 0}; bool IsLet(char ch) { return (ch >= 'A' && ch <= 'Z'); } bool IsNum(char ch) { return (ch >= '0' && ch <= '9'); } int main(){ int n, flag = 0; cin >> n; map<string, int> ans; for (int i = 1; i <= n; ++i){ string s, ss = \"\"; cin >> s; for (string::iterator it = s.begin(); it != s.end(); ++it){ if (IsNum(*it)) ss.push_back(*it); else if (IsLet(*it)) ss.push_back(res[*it - 'A'] + '0'); } ss.insert(ss.begin() + 3, '-'); ++ans[ss]; } for (map<string, int>::iterator it = ans.begin(); it != ans.end(); ++it) if (it->second > 1){ cout << it->first << ' ' << it->second << endl; flag = 1; } if (!flag) cout << \"No duplicates.\" << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1282/","text":"1282 \u4fee\u8def \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int n,h[3000],o[3000]; long long dps[2001][2001],dpt[2001][2001],mins,mint; void qsort(int *s,int *t){ if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]<=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } int main() { cin>>n; for (int i=1;i<=n;++i){ cin>>h[i]; o[i]=h[i]; } qsort(o+1,o+n+1); for (int i=1;i<=n;++i) { mins=1e12; for (int j = 1; j <= n; ++j){ if (dps[i-1][j]<mins) mins=dps[i-1][j]; dps[i][j]=mins+abs(h[i]-o[j]); } mint=1e12; for (int j = n; j>=1;--j){ if (dpt[i-1][j]<mint) mint=dpt[i-1][j]; dpt[i][j]=mint+abs(h[i]-o[j]); } } mins=1e12; mint=1e12; for (int i=1;i<=n;++i) { mins=min(dps[n][i],mins); mint=min(dpt[n][i],mint); } cout<<min(mins,mint); return 0; }","title":"1282 \u4fee\u8def"},{"location":"nr/1282/#1282","text":"\u8f6c\u5230\u9898\u76ee","title":"1282 \u4fee\u8def"},{"location":"nr/1282/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int n,h[3000],o[3000]; long long dps[2001][2001],dpt[2001][2001],mins,mint; void qsort(int *s,int *t){ if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]<=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } int main() { cin>>n; for (int i=1;i<=n;++i){ cin>>h[i]; o[i]=h[i]; } qsort(o+1,o+n+1); for (int i=1;i<=n;++i) { mins=1e12; for (int j = 1; j <= n; ++j){ if (dps[i-1][j]<mins) mins=dps[i-1][j]; dps[i][j]=mins+abs(h[i]-o[j]); } mint=1e12; for (int j = n; j>=1;--j){ if (dpt[i-1][j]<mint) mint=dpt[i-1][j]; dpt[i][j]=mint+abs(h[i]-o[j]); } } mins=1e12; mint=1e12; for (int i=1;i<=n;++i) { mins=min(dps[n][i],mins); mint=min(dpt[n][i],mint); } cout<<min(mins,mint); return 0; }","title":"WashWang's solution"},{"location":"nr/1284/","text":"1284 \u80cc\u5305 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int f[51][5001],a[51],b[51],n,k,v,w,c,pa,pb,ans; int main() { scanf(\"%d%d%d\",&k,&v,&n); memset(f,0x80,sizeof(f)); f[0][0]=0; for (int i=0;i<n;++i){ scanf(\"%d%d\",&w,&c); for (int j=v;j>=w;--j){ for (int l=0;l<k;++l){ a[l]=f[l][j]; b[l]=f[l][j-w]+c; } pa=pb=0; for (int l=0;l<k;++l) if (a[pa]>b[pb]) f[l][j]=a[pa++]; else f[l][j]=b[pb++]; } } for (int i=0;i<k;++i) ans+=f[i][v]; printf(\"%d\",ans); return 0; }","title":"1284 \u80cc\u5305"},{"location":"nr/1284/#1284","text":"\u8f6c\u5230\u9898\u76ee","title":"1284 \u80cc\u5305"},{"location":"nr/1284/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int f[51][5001],a[51],b[51],n,k,v,w,c,pa,pb,ans; int main() { scanf(\"%d%d%d\",&k,&v,&n); memset(f,0x80,sizeof(f)); f[0][0]=0; for (int i=0;i<n;++i){ scanf(\"%d%d\",&w,&c); for (int j=v;j>=w;--j){ for (int l=0;l<k;++l){ a[l]=f[l][j]; b[l]=f[l][j-w]+c; } pa=pb=0; for (int l=0;l<k;++l) if (a[pa]>b[pb]) f[l][j]=a[pa++]; else f[l][j]=b[pb++]; } } for (int i=0;i<k;++i) ans+=f[i][v]; printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1290/","text":"1290 \u7075\u673a\u4e00\u52a8\uff01 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; long long T,x[300000],walktime,aktime,ans; int heap[600000],num,n,t[300000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} void maxheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&heap[ls(x)]>heap[s]) s=ls(x); if (rs(x)<=num&&heap[rs(x)]>heap[s]) s=rs(x); if (s!=x){ swap(heap[s],heap[x]); x=s; } else break; } } void push(int x){ heap[++num]=x; int now=num; while (now>1&&heap[now]>heap[now>>1]){ swap(heap[now],heap[now>>1]); now>>=1; } } int pop(){ int ret=heap[1]; heap[1]=heap[num]; num--; maxheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,keyt=t[l];long long keyx=x[l]; while (i<j){ while (i<j&&x[j]>=keyx) --j; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);++i;} while (i<j&&x[i]<=keyx) ++i; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);--j;} } x[i]=keyx; t[i]=keyt; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d%lld\",&n,&T); for (int i=0;i<n;++i) scanf(\"%lld%d\",&x[i],&t[i]); qsort(0,n); for (int i=0;i<n;++i) { walktime = x[i]; while (num > 0 && walktime + aktime + t[i] > T && heap[1]>t[i]) aktime -= pop(); if (aktime + walktime + t[i] <= T) { aktime += t[i]; push(t[i]); if (num > ans) ans = num; } } printf(\"%lld\",ans); return 0; }","title":"1290 \u7075\u673a\u4e00\u52a8\uff01"},{"location":"nr/1290/#1290","text":"\u8f6c\u5230\u9898\u76ee","title":"1290 \u7075\u673a\u4e00\u52a8\uff01"},{"location":"nr/1290/#washwangs-solution","text":"#include <iostream> using namespace std; long long T,x[300000],walktime,aktime,ans; int heap[600000],num,n,t[300000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} void maxheapify(int x){ int s=x; while (true){ if (ls(x)<=num&&heap[ls(x)]>heap[s]) s=ls(x); if (rs(x)<=num&&heap[rs(x)]>heap[s]) s=rs(x); if (s!=x){ swap(heap[s],heap[x]); x=s; } else break; } } void push(int x){ heap[++num]=x; int now=num; while (now>1&&heap[now]>heap[now>>1]){ swap(heap[now],heap[now>>1]); now>>=1; } } int pop(){ int ret=heap[1]; heap[1]=heap[num]; num--; maxheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,keyt=t[l];long long keyx=x[l]; while (i<j){ while (i<j&&x[j]>=keyx) --j; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);++i;} while (i<j&&x[i]<=keyx) ++i; if (i<j){swap(x[i],x[j]);swap(t[i],t[j]);--j;} } x[i]=keyx; t[i]=keyt; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d%lld\",&n,&T); for (int i=0;i<n;++i) scanf(\"%lld%d\",&x[i],&t[i]); qsort(0,n); for (int i=0;i<n;++i) { walktime = x[i]; while (num > 0 && walktime + aktime + t[i] > T && heap[1]>t[i]) aktime -= pop(); if (aktime + walktime + t[i] <= T) { aktime += t[i]; push(t[i]); if (num > ans) ans = num; } } printf(\"%lld\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1292/","text":"1292 easy \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; //Cyka. I'm a blind starcraft player //I'm a blind starcraft player //I'm a blind starcraft player inline int swapi(int& i, int& j) { int temp = i; i = j; j = temp; return 0; } int main() { int numbers; int maxround[10] = {0}; int totalsteps[10] = {0}; int groupcount = 0; while (~scanf(\"%d\", &numbers)) { int* ff = new int[numbers + 1]; maxround[groupcount] = 0; for (int i = 1; i <= numbers; i++) cin >> ff[i]; for (int i = 1; i <= numbers; i++) { if (ff[i] != i) { int round = 0; //looping int tws1 = i, tws2; while (true) { for (tws2 = i; ff[tws2] != tws1; tws2++) ; swap(ff[tws1], ff[tws2]); totalsteps[groupcount]++; round++; if (round > 2) round = 2; if (ff[tws2] == tws2) { maxround[groupcount] = maxround[groupcount] > round ? maxround[groupcount] : round; break; } tws1 = tws2; } } } groupcount++; } for (int i = 0; i < groupcount; i++) { if (i) cout << endl; cout << totalsteps[i] << endl << maxround[i]; } return 0; }","title":"1292 easy"},{"location":"nr/1292/#1292-easy","text":"\u8f6c\u5230\u9898\u76ee","title":"1292 easy"},{"location":"nr/1292/#victrids-solution","text":"#include <iostream> using namespace std; //Cyka. I'm a blind starcraft player //I'm a blind starcraft player //I'm a blind starcraft player inline int swapi(int& i, int& j) { int temp = i; i = j; j = temp; return 0; } int main() { int numbers; int maxround[10] = {0}; int totalsteps[10] = {0}; int groupcount = 0; while (~scanf(\"%d\", &numbers)) { int* ff = new int[numbers + 1]; maxround[groupcount] = 0; for (int i = 1; i <= numbers; i++) cin >> ff[i]; for (int i = 1; i <= numbers; i++) { if (ff[i] != i) { int round = 0; //looping int tws1 = i, tws2; while (true) { for (tws2 = i; ff[tws2] != tws1; tws2++) ; swap(ff[tws1], ff[tws2]); totalsteps[groupcount]++; round++; if (round > 2) round = 2; if (ff[tws2] == tws2) { maxround[groupcount] = maxround[groupcount] > round ? maxround[groupcount] : round; break; } tws1 = tws2; } } } groupcount++; } for (int i = 0; i < groupcount; i++) { if (i) cout << endl; cout << totalsteps[i] << endl << maxround[i]; } return 0; }","title":"VictriD's solution"},{"location":"nr/1299/","text":"1299 \u915d\u917f\u7b97\u6cd5 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int dp[301][30001],power[301],ti[301],n,m,nxt[1000],last[1000],to[1000],num,p,ans; void add(int u,int v){ ++num; nxt[num]=last[u]; last[u]=num; to[num]=v; } void dfs(int x,int v){ if (v<0) return; for (int i=last[x];i;i=nxt[i]){ int t=to[i]; for (int j=0;j<=v;++j) dp[t][j]=dp[x][j]; dfs(t,v-ti[t]); for (int j=ti[t];j<=v;++j) dp[x][j]=max(dp[x][j],dp[t][j-ti[t]]+power[t]); } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=m;++i) { scanf(\"%d%d%d\", &ti[i], &power[i], &p); add(p,i); } dfs(0,n); for (int i=0;i<=n;++i) if (ans<dp[0][i]) ans=dp[0][i]; printf(\"%d\",ans); return 0; }","title":"1299 \u915d\u917f\u7b97\u6cd5"},{"location":"nr/1299/#1299","text":"\u8f6c\u5230\u9898\u76ee","title":"1299 \u915d\u917f\u7b97\u6cd5"},{"location":"nr/1299/#washwangs-solution","text":"#include <iostream> using namespace std; int dp[301][30001],power[301],ti[301],n,m,nxt[1000],last[1000],to[1000],num,p,ans; void add(int u,int v){ ++num; nxt[num]=last[u]; last[u]=num; to[num]=v; } void dfs(int x,int v){ if (v<0) return; for (int i=last[x];i;i=nxt[i]){ int t=to[i]; for (int j=0;j<=v;++j) dp[t][j]=dp[x][j]; dfs(t,v-ti[t]); for (int j=ti[t];j<=v;++j) dp[x][j]=max(dp[x][j],dp[t][j-ti[t]]+power[t]); } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=m;++i) { scanf(\"%d%d%d\", &ti[i], &power[i], &p); add(p,i); } dfs(0,n); for (int i=0;i<=n;++i) if (ans<dp[0][i]) ans=dp[0][i]; printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1304/","text":"1304 \u52a8\u91cf\u5b88\u6052 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> using namespace std; int main() { int N, L; cin >> N >> L; bool dir = true; int mint = L, maxt = 0, pos, time; for (int i = 0; i < N; ++i, dir = !dir) { cin >> pos; if (dir) time = L - pos; else time = pos; if (time < mint) mint = time; if (time > maxt) maxt = time; } cout << mint << ' ' << maxt; return 0; }","title":"1304 \u52a8\u91cf\u5b88\u6052"},{"location":"nr/1304/#1304","text":"\u8f6c\u5230\u9898\u76ee","title":"1304 \u52a8\u91cf\u5b88\u6052"},{"location":"nr/1304/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { int N, L; cin >> N >> L; bool dir = true; int mint = L, maxt = 0, pos, time; for (int i = 0; i < N; ++i, dir = !dir) { cin >> pos; if (dir) time = L - pos; else time = pos; if (time < mint) mint = time; if (time > maxt) maxt = time; } cout << mint << ' ' << maxt; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1324/","text":"1324 basketball \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; struct team{ int p,m,t; //p:power m:money t:team number }; team s[110000],tmp[110000],cold[110000],win[110000],lose[110000]; int a,b,r,n,coldn,winn,losen,ans[110000]; void merge(team *r, team *s, team *t, int l1, int l2){ int i=0,j=0,index=0; while (i<l1&&j<l2){ if (s[i].m<t[j].m) r[index++]=s[i++]; else if (s[i].m>t[j].m) r[index++]=t[j++]; else if (s[i].t<t[j].t) r[index++]=s[i++]; else r[index++]=t[j++]; } if (i<l1) while (i<l1) r[index++]=s[i++]; if (j<l2) while (j<l2) r[index++]=t[j++]; } int main() { scanf(\"%d%d\",&n,&r); for (int i=0;i<2*n;++i){ scanf(\"%d\",&s[i].p); s[i].t=i; } for (int i=0;i<r;++i){ coldn=winn=losen=0; for (int j=0;j<n;++j){ a=j<<1; b=a|1; if (s[a].p%s[b].p==0||(s[b].p>s[a].p&&s[b].p%s[a].p!=0)){ if (s[b].t>s[a].t){ s[b].m+=1; win[winn++]=s[b]; lose[losen++]=s[a]; } else{ s[b].m+=2; cold[coldn++]=s[b]; lose[losen++]=s[a]; } } else{ if (s[b].t<s[a].t){ s[a].m+=1; win[winn++]=s[a]; lose[losen++]=s[b]; } else{ s[a].m+=2; cold[coldn++]=s[a]; lose[losen++]=s[b]; } } } merge(tmp,win,cold,winn,coldn); merge(s,tmp,lose,winn+coldn,losen); } for (int i=0;i<2*n;++i) ans[s[i].t]=s[i].m; for (int i=0;i<2*n;++i) printf(\"%d \",ans[i]); return 0; }","title":"1324 basketball"},{"location":"nr/1324/#1324-basketball","text":"\u8f6c\u5230\u9898\u76ee","title":"1324 basketball"},{"location":"nr/1324/#washwangs-solution","text":"#include <iostream> using namespace std; struct team{ int p,m,t; //p:power m:money t:team number }; team s[110000],tmp[110000],cold[110000],win[110000],lose[110000]; int a,b,r,n,coldn,winn,losen,ans[110000]; void merge(team *r, team *s, team *t, int l1, int l2){ int i=0,j=0,index=0; while (i<l1&&j<l2){ if (s[i].m<t[j].m) r[index++]=s[i++]; else if (s[i].m>t[j].m) r[index++]=t[j++]; else if (s[i].t<t[j].t) r[index++]=s[i++]; else r[index++]=t[j++]; } if (i<l1) while (i<l1) r[index++]=s[i++]; if (j<l2) while (j<l2) r[index++]=t[j++]; } int main() { scanf(\"%d%d\",&n,&r); for (int i=0;i<2*n;++i){ scanf(\"%d\",&s[i].p); s[i].t=i; } for (int i=0;i<r;++i){ coldn=winn=losen=0; for (int j=0;j<n;++j){ a=j<<1; b=a|1; if (s[a].p%s[b].p==0||(s[b].p>s[a].p&&s[b].p%s[a].p!=0)){ if (s[b].t>s[a].t){ s[b].m+=1; win[winn++]=s[b]; lose[losen++]=s[a]; } else{ s[b].m+=2; cold[coldn++]=s[b]; lose[losen++]=s[a]; } } else{ if (s[b].t<s[a].t){ s[a].m+=1; win[winn++]=s[a]; lose[losen++]=s[b]; } else{ s[a].m+=2; cold[coldn++]=s[a]; lose[losen++]=s[b]; } } } merge(tmp,win,cold,winn,coldn); merge(s,tmp,lose,winn+coldn,losen); } for (int i=0;i<2*n;++i) ans[s[i].t]=s[i].m; for (int i=0;i<2*n;++i) printf(\"%d \",ans[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/1338/","text":"1338 puzzle \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; long int* MergeSort(long int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { long int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } long int* tmplist = new long int[listSize]; long int* llst = MergeSort(list, listSize / 2); long int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) list[i] = tmplist[i]; return list; } int main() { //Chebyshyov neravyenctvo int m; cin >> m; //! MUST BE A LONG INT! long int* l1 = new long int[m]; long int* l2 = new long int[m]; for (int i = 0; i < m; i++) { cin >> l1[i]; } for (int i = 0; i < m; i++) { cin >> l2[i]; } MergeSort(l1, m); MergeSort(l2, m); // for (int i = 0; i < m; i++) { // cout << l1[i] << ' '; // } long int max = 0, min = 0; for (int i = 0; i < m; i++) { max += l1[i] * l2[i]; min += l1[i] * l2[m - i - 1]; } cout << max << ' ' << min; return 0; } vvvvv1v's solution #include <iostream> using namespace std; const int MAXNUM = 100005; void quicksort(unsigned long int arr[], int low, int high) { if (low >= high) return; int k = arr[low], lf = low, rh = high, tmp; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(arr, low, lf - 1); quicksort(arr, rh + 1, high); } int main() { unsigned long int n, sum, arr1[MAXNUM], arr2[MAXNUM]; cin >> n; for (int i = 0; i < n; ++i) cin >> arr1[i]; for (int i = 0; i < n; ++i) cin >> arr2[i]; quicksort(arr1, 0, n - 1); quicksort(arr2, 0, n - 1); sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[i]; cout << sum << endl; sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[n - i - 1]; cout << sum << endl; return 0; }","title":"1338 puzzle"},{"location":"nr/1338/#1338-puzzle","text":"\u8f6c\u5230\u9898\u76ee","title":"1338 puzzle"},{"location":"nr/1338/#victrids-solution","text":"#include <iostream> using namespace std; long int* MergeSort(long int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { long int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } long int* tmplist = new long int[listSize]; long int* llst = MergeSort(list, listSize / 2); long int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) list[i] = tmplist[i]; return list; } int main() { //Chebyshyov neravyenctvo int m; cin >> m; //! MUST BE A LONG INT! long int* l1 = new long int[m]; long int* l2 = new long int[m]; for (int i = 0; i < m; i++) { cin >> l1[i]; } for (int i = 0; i < m; i++) { cin >> l2[i]; } MergeSort(l1, m); MergeSort(l2, m); // for (int i = 0; i < m; i++) { // cout << l1[i] << ' '; // } long int max = 0, min = 0; for (int i = 0; i < m; i++) { max += l1[i] * l2[i]; min += l1[i] * l2[m - i - 1]; } cout << max << ' ' << min; return 0; }","title":"VictriD's solution"},{"location":"nr/1338/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; const int MAXNUM = 100005; void quicksort(unsigned long int arr[], int low, int high) { if (low >= high) return; int k = arr[low], lf = low, rh = high, tmp; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(arr, low, lf - 1); quicksort(arr, rh + 1, high); } int main() { unsigned long int n, sum, arr1[MAXNUM], arr2[MAXNUM]; cin >> n; for (int i = 0; i < n; ++i) cin >> arr1[i]; for (int i = 0; i < n; ++i) cin >> arr2[i]; quicksort(arr1, 0, n - 1); quicksort(arr2, 0, n - 1); sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[i]; cout << sum << endl; sum = 0; for (int i = 0; i < n; ++i) sum += arr1[i] * arr2[n - i - 1]; cout << sum << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1356/","text":"1356 \u6700\u5927\u5b69\u5b50 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> #include <cstdio> using namespace std; int x,y,n,r,q,num=1,last[300000],to[300000],ne[300000],maxson[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); maxson[x]=max(maxson[x],to[i]); } } int main() { memset(maxson,-1,sizeof(maxson)); scanf(\"%d%d\",&n,&r); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } find(r); scanf(\"%d\",&q); for (int i=0;i<q;++i) { scanf(\"%d\",&x); printf(\"%d\\n\",maxson[x]); } return 0; }","title":"1356 \u6700\u5927\u5b69\u5b50"},{"location":"nr/1356/#1356","text":"\u8f6c\u5230\u9898\u76ee","title":"1356 \u6700\u5927\u5b69\u5b50"},{"location":"nr/1356/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; int x,y,n,r,q,num=1,last[300000],to[300000],ne[300000],maxson[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); maxson[x]=max(maxson[x],to[i]); } } int main() { memset(maxson,-1,sizeof(maxson)); scanf(\"%d%d\",&n,&r); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } find(r); scanf(\"%d\",&q); for (int i=0;i<q;++i) { scanf(\"%d\",&x); printf(\"%d\\n\",maxson[x]); } return 0; }","title":"WashWang's solution"},{"location":"nr/1358/","text":"1358 \u5206\u5272\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5206\u5272\u6811 */ #include <iostream> #include <cassert> using namespace std; const int MAXN = 200000; int head[MAXN + 5] = {0}, ed[MAXN * 2 + 5] = {0}, nxt[MAXN * 2+ 5] = {0}, cnt = 0; int sum[MAXN + 5] = {0}, fa[MAXN + 5] = {0}; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nx[MAXN + 5] = {0}, m = 0; int n; bool b[MAXN + 5] = {0}; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; } void addedge(int u, int v){ ++m; nx[m] = h[u]; e[m] = v; h[u] = m; } int buildTree(int x){ sum[x] = 1; for (int i = head[x]; i != 0; i = nxt[i]){ if (!b[ed[i]]){ int k = ed[i]; b[k] = true; addedge(x, k); fa[k] = x; sum[x] += buildTree(k); } } return sum[x]; } bool check(int x){ int k = sum[1] - sum[x]; if (k > n / 2) return false; for (int i = h[x]; i != 0; i = nx[i]){ if (sum[e[i]] > n / 2) return false; } return true; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); addEdge(v, u); } b[1] = true; buildTree(1); for (int i = 1; i <= n; ++i){ if (check(i)){ cout << i << '\\n'; } } return 0; } WashWang's solution #include <iostream> #include <cstring> #include <cstdio> #include <algorithm> using namespace std; int x,y,n,num=1,ans,ansset[300000],last[300000],to[300000],ne[300000],son[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ bool fea=true; vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); if (son[to[i]]>n/2) fea=false; son[x]+=son[to[i]]; } if (n-son[x]>n/2) fea=false; if (fea) ansset[ans++]=x; } int main() { scanf(\"%d\",&n); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } for (int i=1;i<=n;++i) son[i]=1; find(1); sort(ansset,ansset+ans); for (int i=0;i<ans;++i) printf(\"%d\\n\",ansset[i]); return 0; }","title":"1358 \u5206\u5272\u6811"},{"location":"nr/1358/#1358","text":"\u8f6c\u5230\u9898\u76ee","title":"1358 \u5206\u5272\u6811"},{"location":"nr/1358/#fineartzs-solution","text":"/* \u5206\u5272\u6811 */ #include <iostream> #include <cassert> using namespace std; const int MAXN = 200000; int head[MAXN + 5] = {0}, ed[MAXN * 2 + 5] = {0}, nxt[MAXN * 2+ 5] = {0}, cnt = 0; int sum[MAXN + 5] = {0}, fa[MAXN + 5] = {0}; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nx[MAXN + 5] = {0}, m = 0; int n; bool b[MAXN + 5] = {0}; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; } void addedge(int u, int v){ ++m; nx[m] = h[u]; e[m] = v; h[u] = m; } int buildTree(int x){ sum[x] = 1; for (int i = head[x]; i != 0; i = nxt[i]){ if (!b[ed[i]]){ int k = ed[i]; b[k] = true; addedge(x, k); fa[k] = x; sum[x] += buildTree(k); } } return sum[x]; } bool check(int x){ int k = sum[1] - sum[x]; if (k > n / 2) return false; for (int i = h[x]; i != 0; i = nx[i]){ if (sum[e[i]] > n / 2) return false; } return true; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); addEdge(v, u); } b[1] = true; buildTree(1); for (int i = 1; i <= n; ++i){ if (check(i)){ cout << i << '\\n'; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1358/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <cstdio> #include <algorithm> using namespace std; int x,y,n,num=1,ans,ansset[300000],last[300000],to[300000],ne[300000],son[300000]; bool vis[300000]; void add(int u,int v){ to[num]=v; ne[num]=last[u]; last[u]=num; num++; } void find(int x){ bool fea=true; vis[x]=true; for (int i=last[x];i;i=ne[i]) if (!vis[to[i]]){ find(to[i]); if (son[to[i]]>n/2) fea=false; son[x]+=son[to[i]]; } if (n-son[x]>n/2) fea=false; if (fea) ansset[ans++]=x; } int main() { scanf(\"%d\",&n); for (int i=0;i<n-1;++i){ scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } for (int i=1;i<=n;++i) son[i]=1; find(1); sort(ansset,ansset+ans); for (int i=0;i<ans;++i) printf(\"%d\\n\",ansset[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/1359/","text":"1359 \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <cstring> #include <iostream> using namespace std; int pharse(char chz) { if (chz == ' ') return 0; return chz - 'A' >= 26 ? chz - 'a' + 27 : chz - 'A' + 1; } int main() { string chs; int ans = 0; getline(cin, chs); for (int i = 0; chs[i] != '\\0'; i++) { ans += (i + 1) * pharse(chs[i]); } cout << ans; return 0; } FineArtz's solution /* \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 */ #include <iostream> using namespace std; int main(){ char ch; int ans = 0, i = 0; while (cin.get(ch)){ ++i; int p = 0; if ((ch >= 'A') && (ch <= 'Z')) p = ch - 'A' + 1; if ((ch >= 'a') && (ch <= 'z')) p = ch - 'a' + 27; ans += p * i; } cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; int main() { char arr[1005]; cin.getline(arr, 1001); int sum = 0; for (int i = 0; i < strlen(arr); ++i) { if (arr[i] == ' ') continue; else if (arr[i] >= 'A' && arr[i] <= 'Z') sum += (i + 1) * (arr[i] - 'A' + 1); else sum += (i + 1) * (arr[i] - 'a' + 27); } cout << sum; return 0; }","title":"1359 \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6"},{"location":"nr/1359/#1359","text":"\u8f6c\u5230\u9898\u76ee","title":"1359 \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6"},{"location":"nr/1359/#victrids-solution","text":"#include <cstring> #include <iostream> using namespace std; int pharse(char chz) { if (chz == ' ') return 0; return chz - 'A' >= 26 ? chz - 'a' + 27 : chz - 'A' + 1; } int main() { string chs; int ans = 0; getline(cin, chs); for (int i = 0; chs[i] != '\\0'; i++) { ans += (i + 1) * pharse(chs[i]); } cout << ans; return 0; }","title":"VictriD's solution"},{"location":"nr/1359/#fineartzs-solution","text":"/* \u5e2e\u742a\u9732\u8bfa\u52a0\u5bc6 */ #include <iostream> using namespace std; int main(){ char ch; int ans = 0, i = 0; while (cin.get(ch)){ ++i; int p = 0; if ((ch >= 'A') && (ch <= 'Z')) p = ch - 'A' + 1; if ((ch >= 'a') && (ch <= 'z')) p = ch - 'a' + 27; ans += p * i; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1359/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; int main() { char arr[1005]; cin.getline(arr, 1001); int sum = 0; for (int i = 0; i < strlen(arr); ++i) { if (arr[i] == ' ') continue; else if (arr[i] >= 'A' && arr[i] <= 'Z') sum += (i + 1) * (arr[i] - 'A' + 1); else sum += (i + 1) * (arr[i] - 'a' + 27); } cout << sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1360/","text":"1360 \u5076\u50cf\u4e01\u59d0\u7684\u70e6\u607c \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; struct t { int t1; int t2; }; t* MergeSort(t* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].t2 > list[1].t2) { t temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } t* tmplist = new t[listSize]; t* llst = MergeSort(list, listSize / 2); t* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct].t2 <= rlst[rct].t2 && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } inline int maxi(int i1, int i2) { return i1 > i2 ? i1 : i2; } int main() { int n; cin >> n; t *timeset = new t[n], *moveptr = timeset; for (int i = 0; i < n; i++) { cin >> timeset[i].t1; cin >> timeset[i].t2; } MergeSort(timeset, n); int* totalis = new int[timeset[n - 1].t2 + 1]; totalis[0] = 0; for (int i = 1; i < timeset[n - 1].t2 + 1; i++) { while (moveptr->t2 < i) { moveptr++; } totalis[i] = totalis[i - 1]; while (moveptr->t2 == i) { totalis[i] = maxi(totalis[i], totalis[moveptr->t1] + 1); moveptr++; } } cout << totalis[timeset[n - 1].t2]; return 0; } vvvvv1v's solution #include <iostream> using namespace std; struct activity { int t1, t2; }arr[100005]; int n; int count = 1; int last; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low].t2; int lf = low, rh = high; activity tmp; while (lf < rh) { while (lf < rh && arr[rh].t2 >= k) --rh; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } while (lf < rh && arr[lf].t2 <= k) ++lf; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int main() { cin >> n; for (int i = 0; i < n; ++i) scanf(\"%d%d\", &arr[i].t1, &arr[i].t2); quicksort(0, n - 1); last = arr[0].t2; for (int i = 1; i < n; ++i) { if (arr[i].t1 >= last) { last = arr[i].t2; ++count; } } printf(\"%d\", count); return 0; }","title":"1360 \u5076\u50cf\u4e01\u59d0\u7684\u70e6\u607c"},{"location":"nr/1360/#1360","text":"\u8f6c\u5230\u9898\u76ee","title":"1360 \u5076\u50cf\u4e01\u59d0\u7684\u70e6\u607c"},{"location":"nr/1360/#victrids-solution","text":"#include <iostream> using namespace std; struct t { int t1; int t2; }; t* MergeSort(t* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].t2 > list[1].t2) { t temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } t* tmplist = new t[listSize]; t* llst = MergeSort(list, listSize / 2); t* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct].t2 <= rlst[rct].t2 && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } inline int maxi(int i1, int i2) { return i1 > i2 ? i1 : i2; } int main() { int n; cin >> n; t *timeset = new t[n], *moveptr = timeset; for (int i = 0; i < n; i++) { cin >> timeset[i].t1; cin >> timeset[i].t2; } MergeSort(timeset, n); int* totalis = new int[timeset[n - 1].t2 + 1]; totalis[0] = 0; for (int i = 1; i < timeset[n - 1].t2 + 1; i++) { while (moveptr->t2 < i) { moveptr++; } totalis[i] = totalis[i - 1]; while (moveptr->t2 == i) { totalis[i] = maxi(totalis[i], totalis[moveptr->t1] + 1); moveptr++; } } cout << totalis[timeset[n - 1].t2]; return 0; }","title":"VictriD's solution"},{"location":"nr/1360/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; struct activity { int t1, t2; }arr[100005]; int n; int count = 1; int last; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low].t2; int lf = low, rh = high; activity tmp; while (lf < rh) { while (lf < rh && arr[rh].t2 >= k) --rh; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } while (lf < rh && arr[lf].t2 <= k) ++lf; if (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int main() { cin >> n; for (int i = 0; i < n; ++i) scanf(\"%d%d\", &arr[i].t1, &arr[i].t2); quicksort(0, n - 1); last = arr[0].t2; for (int i = 1; i < n; ++i) { if (arr[i].t1 >= last) { last = arr[i].t2; ++count; } } printf(\"%d\", count); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1370/","text":"1370 \u8d6b\u841d\u7684\u6843\u5b50 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int n,a,b,t[41][161][161],ans,sum;//\u7b2ci\u5929\uff0c\u5403j\u4e2a\uff0c\u603b\u5171k\u4e2a int main() { cin>>n; for (int q=0;q<n;++q) { memset(t,0,sizeof(t)); cin>>a>>b; t[0][0][0]=1; for (int i=1;i<=b;++i){ for (int k=0;k<=a;++k){ sum=0; for (int j=0;j<=a-k;++j){ sum+=t[i-1][j][k]; if (j!=0) t[i][j][k+j]=sum; } } } ans=0; for (int i=1;i<=a;++i) ans+=t[b][i][a]; cout<<ans<<endl; } return 0; }","title":"1370 \u8d6b\u841d\u7684\u6843\u5b50"},{"location":"nr/1370/#1370","text":"\u8f6c\u5230\u9898\u76ee","title":"1370 \u8d6b\u841d\u7684\u6843\u5b50"},{"location":"nr/1370/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int n,a,b,t[41][161][161],ans,sum;//\u7b2ci\u5929\uff0c\u5403j\u4e2a\uff0c\u603b\u5171k\u4e2a int main() { cin>>n; for (int q=0;q<n;++q) { memset(t,0,sizeof(t)); cin>>a>>b; t[0][0][0]=1; for (int i=1;i<=b;++i){ for (int k=0;k<=a;++k){ sum=0; for (int j=0;j<=a-k;++j){ sum+=t[i-1][j][k]; if (j!=0) t[i][j][k+j]=sum; } } } ans=0; for (int i=1;i<=a;++i) ans+=t[b][i][a]; cout<<ans<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1373/","text":"1373 \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b */ #include <iostream> #include <cstring> #include <queue> #include <vector> #include <cmath> using namespace std; const int INF = 2147483647; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} bool operator ==(Point p){ return (x == p.x && y == p.y); } int x = 0, y = 0, minh = INF; }; int h[505][505]; bool v[505][505]; vector<Point> fl; int m, n; int ans = 0, cnt = 0; bool check(Point p){ if (p.x < 1 || p.x > m || p.y < 1 || p.y > n || v[p.x][p.y]) return false; return true; } bool bfs(Point s, int lim){ memset(v, 0, sizeof(v)); queue<Point> q; q.push(s); v[s.x][s.y] = true; while (!q.empty()){ Point now = q.front(); q.pop(); for (int i = 0; i != 4; ++i){ Point next(now.x + dx[i], now.y + dy[i]); if (check(next)){ int dh = abs(h[now.x][now.y] - h[next.x][next.y]); if (dh > lim) continue; q.push(next); v[next.x][next.y] = true; } } } for (auto f : fl){ if (!v[f.x][f.y]) return false; } return true; } int main(){ memset(h, 0, sizeof(h)); cin >> m >> n; int minn = INF, maxx = 0; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> h[i][j]; minn = min(minn, h[i][j]); maxx = max(maxx, h[i][j]); } int flag; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> flag; if (flag == 1){ fl.emplace_back(i, j); } } Point s = *(fl.begin()); fl.erase(fl.begin()); s.minh = 0; int low = 0, high = maxx - minn, mid = (low + high) / 2; while (low < high){ mid = (low + high) / 2; if (bfs(s, mid)) high = mid; else low = mid + 1; } cout << low << endl; return 0; }","title":"1373 \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b"},{"location":"nr/1373/#1373","text":"\u8f6c\u5230\u9898\u76ee","title":"1373 \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b"},{"location":"nr/1373/#fineartzs-solution","text":"/* \u6536\u96c6\u7ea2\u65d7\u6bd4\u8d5b */ #include <iostream> #include <cstring> #include <queue> #include <vector> #include <cmath> using namespace std; const int INF = 2147483647; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy) {} bool operator ==(Point p){ return (x == p.x && y == p.y); } int x = 0, y = 0, minh = INF; }; int h[505][505]; bool v[505][505]; vector<Point> fl; int m, n; int ans = 0, cnt = 0; bool check(Point p){ if (p.x < 1 || p.x > m || p.y < 1 || p.y > n || v[p.x][p.y]) return false; return true; } bool bfs(Point s, int lim){ memset(v, 0, sizeof(v)); queue<Point> q; q.push(s); v[s.x][s.y] = true; while (!q.empty()){ Point now = q.front(); q.pop(); for (int i = 0; i != 4; ++i){ Point next(now.x + dx[i], now.y + dy[i]); if (check(next)){ int dh = abs(h[now.x][now.y] - h[next.x][next.y]); if (dh > lim) continue; q.push(next); v[next.x][next.y] = true; } } } for (auto f : fl){ if (!v[f.x][f.y]) return false; } return true; } int main(){ memset(h, 0, sizeof(h)); cin >> m >> n; int minn = INF, maxx = 0; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> h[i][j]; minn = min(minn, h[i][j]); maxx = max(maxx, h[i][j]); } int flag; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ cin >> flag; if (flag == 1){ fl.emplace_back(i, j); } } Point s = *(fl.begin()); fl.erase(fl.begin()); s.minh = 0; int low = 0, high = maxx - minn, mid = (low + high) / 2; while (low < high){ mid = (low + high) / 2; if (bfs(s, mid)) high = mid; else low = mid + 1; } cout << low << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1392/","text":"1392 BJ_drunbier \u8f6c\u5230\u9898\u76ee FineArtz's solution /* BJ_drunbier */ #include <iostream> #include <vector> #include <iomanip> using namespace std; class Node{ public: vector<int> edge; int sub = 1; }; class Edge{ public: int u = 0, v = 0, len = 0; }; Node a[10005]; Edge e[10005]; int calcSub(int root){ for (auto i : a[root].edge){ a[root].sub += calcSub(i); } return a[root].sub; } int main(){ int n, f, w, root, cnte = 0; cin >> n; if (n == 1){ cout << \"0.00\" << endl; return 0; } for (int i = 1; i <= n; ++i){ cin >> f >> w; if (f == 0){ root = i; } else{ a[f].edge.push_back(i); ++cnte; e[cnte].u = f; e[cnte].v = i; e[cnte].len = w; } } calcSub(root); //for (int i = 1; i <= n; ++i) // cout << i << ' ' << a[i].sub << endl; double ans = 0, tmp; for (int i = 1; i <= cnte; ++i){ tmp = n - a[e[i].v].sub; tmp = tmp * a[e[i].v].sub; tmp = tmp * e[i].len; ans = ans + tmp; } ans = ans / n / (n - 1) * 2; cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; } WashWang's solution #include <iostream> using namespace std; double sum; long long l[10001]; int num,n,nxt[10001],last[10001],to[10001],root,f,v; void add(int x,int y,int v){ num++; nxt[num]=last[x]; last[x]=num; to[num]=y; l[num]=v; } int dfs(int x){ int son=1,tmp; for (int i=last[x];i!=0;i=nxt[i]){ tmp=dfs(to[i]); son+=tmp; sum+=(n-tmp)*tmp*l[i]; } return son; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&f,&v); if (f==0) root=i; else add(f,i,v); } dfs(root); printf(\"%.2f\",sum/(n*(n-1)/2)); return 0; }","title":"1392 BJ_drunbier"},{"location":"nr/1392/#1392-bj_drunbier","text":"\u8f6c\u5230\u9898\u76ee","title":"1392 BJ_drunbier"},{"location":"nr/1392/#fineartzs-solution","text":"/* BJ_drunbier */ #include <iostream> #include <vector> #include <iomanip> using namespace std; class Node{ public: vector<int> edge; int sub = 1; }; class Edge{ public: int u = 0, v = 0, len = 0; }; Node a[10005]; Edge e[10005]; int calcSub(int root){ for (auto i : a[root].edge){ a[root].sub += calcSub(i); } return a[root].sub; } int main(){ int n, f, w, root, cnte = 0; cin >> n; if (n == 1){ cout << \"0.00\" << endl; return 0; } for (int i = 1; i <= n; ++i){ cin >> f >> w; if (f == 0){ root = i; } else{ a[f].edge.push_back(i); ++cnte; e[cnte].u = f; e[cnte].v = i; e[cnte].len = w; } } calcSub(root); //for (int i = 1; i <= n; ++i) // cout << i << ' ' << a[i].sub << endl; double ans = 0, tmp; for (int i = 1; i <= cnte; ++i){ tmp = n - a[e[i].v].sub; tmp = tmp * a[e[i].v].sub; tmp = tmp * e[i].len; ans = ans + tmp; } ans = ans / n / (n - 1) * 2; cout << setiosflags(ios::fixed) << setprecision(2) << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1392/#washwangs-solution","text":"#include <iostream> using namespace std; double sum; long long l[10001]; int num,n,nxt[10001],last[10001],to[10001],root,f,v; void add(int x,int y,int v){ num++; nxt[num]=last[x]; last[x]=num; to[num]=y; l[num]=v; } int dfs(int x){ int son=1,tmp; for (int i=last[x];i!=0;i=nxt[i]){ tmp=dfs(to[i]); son+=tmp; sum+=(n-tmp)*tmp*l[i]; } return son; } int main() { scanf(\"%d\",&n); for (int i=1;i<=n;++i){ scanf(\"%d%d\",&f,&v); if (f==0) root=i; else add(f,i,v); } dfs(root); printf(\"%.2f\",sum/(n*(n-1)/2)); return 0; }","title":"WashWang's solution"},{"location":"nr/1405/","text":"1405 \u7545\u7545\u7684\u73a9\u5177 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int s,n; int t[501][4001];//\u524di\u6839\u68d2\u5b50\u4e2d \u53ef\u4ee5\u7ec4\u6210\u7684\u4e24\u6761\u957f\u5ea6\u5dee\u4e3aj\u7684\u8f68\u9053\u4e2d\u8f83\u5927\u7684\u90a3\u6761\u7684\u957f\u5ea6 int main() { cin>>n; memset(t,-1,sizeof(t)); t[0][0]=0; for (int i=1;i<=n;++i) { cin>>s; for (int j=0;j<=2000;++j){ t[i][j]=t[i-1][j];//\u4e0d\u52a0\u8fd9\u6839\u5851\u6599\u68d2 if (j>=s&&t[i-1][j-s]!=-1&&t[i-1][j-s]+s>t[i][j]) t[i][j]=t[i-1][j-s]+s;//\u52a0\u5728\u8f83\u957f\u7684\u90a3\u6761\u4e0a \u5dee\u503c\u53d8\u5927 \u8f83\u957f\u7684\u957f\u5ea6\u53d8\u5927 if (t[i-1][j+s]>t[i][j]) t[i][j]=t[i-1][j+s];//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u4f46\u5e76\u672a\u8d85\u8fc7\u8f83\u957f\u7684\u90a3\u6761 \u5dee\u53d8\u5c0f \u8f83\u957f\u7684\u957f\u5ea6\u4e0d\u53d8 if (s>=j&&t[i-1][s-j]!=-1&&t[i-1][s-j]+j>t[i][j]) t[i][j]=t[i-1][s-j]+j;//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u8d85\u8fc7\u4e86\u539f\u6765\u8f83\u957f\u7684\u90a3\u6761 \u957f\u5ea6\u53d8\u5927 } } if (!t[n][0]) cout<<\"Impossible\"; else cout<<t[n][0]; return 0; }","title":"1405 \u7545\u7545\u7684\u73a9\u5177"},{"location":"nr/1405/#1405","text":"\u8f6c\u5230\u9898\u76ee","title":"1405 \u7545\u7545\u7684\u73a9\u5177"},{"location":"nr/1405/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int s,n; int t[501][4001];//\u524di\u6839\u68d2\u5b50\u4e2d \u53ef\u4ee5\u7ec4\u6210\u7684\u4e24\u6761\u957f\u5ea6\u5dee\u4e3aj\u7684\u8f68\u9053\u4e2d\u8f83\u5927\u7684\u90a3\u6761\u7684\u957f\u5ea6 int main() { cin>>n; memset(t,-1,sizeof(t)); t[0][0]=0; for (int i=1;i<=n;++i) { cin>>s; for (int j=0;j<=2000;++j){ t[i][j]=t[i-1][j];//\u4e0d\u52a0\u8fd9\u6839\u5851\u6599\u68d2 if (j>=s&&t[i-1][j-s]!=-1&&t[i-1][j-s]+s>t[i][j]) t[i][j]=t[i-1][j-s]+s;//\u52a0\u5728\u8f83\u957f\u7684\u90a3\u6761\u4e0a \u5dee\u503c\u53d8\u5927 \u8f83\u957f\u7684\u957f\u5ea6\u53d8\u5927 if (t[i-1][j+s]>t[i][j]) t[i][j]=t[i-1][j+s];//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u4f46\u5e76\u672a\u8d85\u8fc7\u8f83\u957f\u7684\u90a3\u6761 \u5dee\u53d8\u5c0f \u8f83\u957f\u7684\u957f\u5ea6\u4e0d\u53d8 if (s>=j&&t[i-1][s-j]!=-1&&t[i-1][s-j]+j>t[i][j]) t[i][j]=t[i-1][s-j]+j;//\u52a0\u5728\u8f83\u77ed\u7684\u90a3\u6761\u4e0a \u8d85\u8fc7\u4e86\u539f\u6765\u8f83\u957f\u7684\u90a3\u6761 \u957f\u5ea6\u53d8\u5927 } } if (!t[n][0]) cout<<\"Impossible\"; else cout<<t[n][0]; return 0; }","title":"WashWang's solution"},{"location":"nr/1509/","text":"1509 \u8282\u65e5\u8ba1\u7b97\u5668 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8282\u65e5\u8ba1\u7b97\u5668 */ #include <iostream> #include <string> using namespace std; inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } inline string f(int x) { string ret = \"\"; if (x / 10){ ret += char(x / 10 + '0'); } else ret += \"0\"; ret += char(x % 10 + '0'); return ret; } int main(){ int date[205][15][35] = {0}; date[0][1][1] = 2; for (int yy = 0; yy <= 2050 - 1850; ++yy){ int day = 0, lday = 0, year = yy + 1850; for (int mm = 1; mm <= 12; ++mm) { switch(mm){ case 1: case 3: case 5: case 7: case 8: case 10: case 12: day = 31; break; case 4: case 6: case 9: case 11: day = 30; break; case 2: day = ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28; break; } if (mm > 1) date[yy][mm][1] = succ(date[yy][mm - 1][lday]); else if (yy != 0) date[yy][mm][1] = succ(date[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) date[yy][mm][dd] = succ(date[yy][mm][dd - 1]); lday = day; day = 0; } } int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int yy = y1; yy <= y2; ++yy){ int dd = 1, cnt = 0; while (date[yy - 1850][a][dd]){ if (date[yy - 1850][a][dd] == c) ++cnt; if (cnt == b){ cout << yy << \"/\" << f(a) << \"/\" << f(dd) << endl; break; } ++dd; } if (!date[yy - 1850][a][dd]) cout << \"none\" << endl; } return 0; } vvvvv1v's solution #include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; //const date origin = {2009, 12, 28}; const date origin = {1849, 12, 31}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isLegal(const date &today); int main(void) { int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int i = y1; i <= y2; ++i) { date festival = {i, a, 1}; int weekday_now = GetWeekday(festival); festival.day += (7 + c - weekday_now) % 7 + 7 * (b - 1); if (isLegal(festival)) cout << festival.year << '/' << (festival.month < 10 ? \"0\" : \"\") << festival.month << '/' << (festival.day < 10 ? \"0\" : \"\") << festival.day; else cout << \"none\"; if (i < y2) cout << endl; } } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(today.year) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isLegal(const date &today) { switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day <= 31) return true; break; } case 4: case 6: case 9: case 11: { if (today.day <= 30) return true; break; } case 2: { if (isLeapYear(today.year)) { if (today.day <= 29) return true; } else { if (today.day <= 28) return true; } break; } default: break; } return false; } WashWang's solution #include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"1509 \u8282\u65e5\u8ba1\u7b97\u5668"},{"location":"nr/1509/#1509","text":"\u8f6c\u5230\u9898\u76ee","title":"1509 \u8282\u65e5\u8ba1\u7b97\u5668"},{"location":"nr/1509/#fineartzs-solution","text":"/* \u8282\u65e5\u8ba1\u7b97\u5668 */ #include <iostream> #include <string> using namespace std; inline int succ(int x) { return ((x + 1) % 7 == 0) ? 7 : ((x + 1) % 7); } inline string f(int x) { string ret = \"\"; if (x / 10){ ret += char(x / 10 + '0'); } else ret += \"0\"; ret += char(x % 10 + '0'); return ret; } int main(){ int date[205][15][35] = {0}; date[0][1][1] = 2; for (int yy = 0; yy <= 2050 - 1850; ++yy){ int day = 0, lday = 0, year = yy + 1850; for (int mm = 1; mm <= 12; ++mm) { switch(mm){ case 1: case 3: case 5: case 7: case 8: case 10: case 12: day = 31; break; case 4: case 6: case 9: case 11: day = 30; break; case 2: day = ((year % 400 == 0) || (year % 4 == 0 && year % 100 != 0)) ? 29 : 28; break; } if (mm > 1) date[yy][mm][1] = succ(date[yy][mm - 1][lday]); else if (yy != 0) date[yy][mm][1] = succ(date[yy - 1][12][31]); for (int dd = 2; dd <= day; ++dd) date[yy][mm][dd] = succ(date[yy][mm][dd - 1]); lday = day; day = 0; } } int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int yy = y1; yy <= y2; ++yy){ int dd = 1, cnt = 0; while (date[yy - 1850][a][dd]){ if (date[yy - 1850][a][dd] == c) ++cnt; if (cnt == b){ cout << yy << \"/\" << f(a) << \"/\" << f(dd) << endl; break; } ++dd; } if (!date[yy - 1850][a][dd]) cout << \"none\" << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1509/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; struct date { int year; int month; int day; }; //const date origin = {1900, 1, 1}; //const date origin = {2009, 12, 28}; const date origin = {1849, 12, 31}; int GetWeekday(const date &today); inline bool isLeapYear(int year); bool isLegal(const date &today); int main(void) { int a, b, c, y1, y2; cin >> a >> b >> c >> y1 >> y2; for (int i = y1; i <= y2; ++i) { date festival = {i, a, 1}; int weekday_now = GetWeekday(festival); festival.day += (7 + c - weekday_now) % 7 + 7 * (b - 1); if (isLegal(festival)) cout << festival.year << '/' << (festival.month < 10 ? \"0\" : \"\") << festival.month << '/' << (festival.day < 10 ? \"0\" : \"\") << festival.day; else cout << \"none\"; if (i < y2) cout << endl; } } int GetWeekday(const date &today) { int sum = 0; for (int i = origin.year; i < today.year; ++i) sum += isLeapYear(i) ? 366 : 365; for (int i = 1; i < today.month; ++i) { switch (i) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: sum += 31; break; case 4: case 6: case 9: case 11: sum += 30; break; case 2: sum += isLeapYear(today.year) ? 29 : 28; break; default: break; } } sum += today.day; --sum; return 1 + sum % 7; } inline bool isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } bool isLegal(const date &today) { switch (today.month) { case 1: case 3: case 5: case 7: case 8: case 10: case 12: { if (today.day <= 31) return true; break; } case 4: case 6: case 9: case 11: { if (today.day <= 30) return true; break; } case 2: { if (isLeapYear(today.year)) { if (today.day <= 29) return true; } else { if (today.day <= 28) return true; } break; } default: break; } return false; }","title":"vvvvv1v's solution"},{"location":"nr/1509/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1530/","text":"1530 \u5b57\u7b26\u4e8c\u53c9\u6811 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"1530 \u5b57\u7b26\u4e8c\u53c9\u6811"},{"location":"nr/1530/#1530","text":"\u8f6c\u5230\u9898\u76ee","title":"1530 \u5b57\u7b26\u4e8c\u53c9\u6811"},{"location":"nr/1530/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <cstdio> using namespace std; char cmd1[10],cmd2[10],s[1010000],ans[1010000]; int t,n,top,stack[1050000],vis[1010000]; inline int ls(int x){return x<<1;} inline int rs(int x){return x<<1|1;} inline void inorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[i++]=s[now-1]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[i++]=s[now-1]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderEncode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[i++]=s[now-1]; top--; } } } inline void inorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ top--; ans[now-1]=s[i++]; if (rs(now)<=n) stack[top++]=rs(now); } } } inline void preorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ ans[now-1]=s[i++]; vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else top--; } } inline void postorderDecode(const char* s,int n){ int i=0,now; stack[top++]=1; while (top!=0){ now=stack[top-1]; if (vis[now]==0){ vis[now]++; if (ls(now)<=n) stack[top++]=ls(now); } else if (vis[now]==1){ vis[now]++; if (rs(now)<=n) stack[top++]=rs(now); } else { ans[now-1]=s[i++]; top--; } } } int main() { cin>>t; ios::sync_with_stdio(false); for (int i=0;i<t;++i){ top=0; memset(ans,0,sizeof(ans)); memset(vis,0,sizeof(vis)); cin>>n>>cmd1>>cmd2>>s; if (strcmp(cmd1,\"INORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) inorderEncode(s,n); else inorderDecode(s,n); } if (strcmp(cmd1,\"PREORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) preorderEncode(s,n); else preorderDecode(s,n); } if (strcmp(cmd1,\"POSTORDER\")==0){ if (strcmp(cmd2,\"ENCODE\")==0) postorderEncode(s,n); else postorderDecode(s,n); } cout<<ans<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/1541/","text":"1541 \u533a\u95f4\u6700\u5927\u95ee\u9898 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int a[300000],queue[300000],head,tail=-1,n,k; int main() { scanf(\"%d%d\",&k,&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<k-1;++i) { while (a[i]>=a[queue[tail]]&&tail>=0) tail--; queue[++tail]=i; } for (int i=k-1;i<n;++i){ while (queue[head]<=i-k) head++; while (a[i]>=a[queue[tail]]&&tail>=head) tail--; queue[++tail]=i; printf(\"%d \",a[queue[head]]); } return 0; }","title":"1541 \u533a\u95f4\u6700\u5927\u95ee\u9898"},{"location":"nr/1541/#1541","text":"\u8f6c\u5230\u9898\u76ee","title":"1541 \u533a\u95f4\u6700\u5927\u95ee\u9898"},{"location":"nr/1541/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int a[300000],queue[300000],head,tail=-1,n,k; int main() { scanf(\"%d%d\",&k,&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<k-1;++i) { while (a[i]>=a[queue[tail]]&&tail>=0) tail--; queue[++tail]=i; } for (int i=k-1;i<n;++i){ while (queue[head]<=i-k) head++; while (a[i]>=a[queue[tail]]&&tail>=head) tail--; queue[++tail]=i; printf(\"%d \",a[queue[head]]); } return 0; }","title":"WashWang's solution"},{"location":"nr/1550/","text":"1550 \u7559\u4e0b\u7684\u6c34 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int n; cin >> n; char tm; int* hgt = new int[n]; int* llm = new int[n]; int* rrm = new int[n]; int water = 0; for (int i = 0; i < n; i++) { cin >> tm; cin >> hgt[i]; } cin >> tm; //\u6bcf\u4e2a\u70b9\u5224\u65ad\u80fd\u591f\u8fbe\u5230\u7684\u9ad8\u5ea6 int l = 0, r = n - 1; llm[0] = hgt[0]; for (int i = 1; i < n; i++) { llm[i] = hgt[i] > llm[i - 1] ? hgt[i] : llm[i - 1]; } rrm[n - 1] = hgt[n - 1]; for (int i = n - 2; i >= 0; i--) { rrm[i] = hgt[i] > rrm[i + 1] ? hgt[i] : rrm[i + 1]; water += (llm[i] > rrm[i] ? rrm[i] : llm[i]) - hgt[i]; } cout << water; } FineArtz's solution /* \u7559\u4e0b\u7684\u6c34 */ #include <iostream> #include <cstring> using namespace std; int n; char ch; int a[1005] = {0}, maxx = 0, ans = 0; int main(){ cin >> n; int num = 0, cnt = 0; bool flag = false; while (cin >> ch){ if (!isdigit(ch)){ if (flag){ a[++cnt] = num; if (num > maxx) maxx = num; num = 0; flag = false; } continue; } flag = true; num = num * 10 + ch - '0'; } int l = 1, r = n; for (int h = 1; h <= maxx; ++h){ while (a[l] < h) ++l; while (a[r] < h) --r; for (int i = l; i <= r; ++i) if (a[i] < h) ++ans; } cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { int n; cin >> n; int arr[1005]; int max = 0, sum = 0; char ch; for (int i = 0; i < n; ++i) { cin >> ch >> arr[i]; if (arr[i] > max) max = arr[i]; } for (int i = 1; i <= max; ++i) { int j = 0; while (arr[j] < i) ++j; int k = n - 1; while (arr[k] < i) --k; for (int l = j + 1; l <= k - 1; ++l) { if (arr[l] < i) ++sum; } } cout << sum; //for (int i = 0; i < n; ++i) cout << arr[i]; return 0; } WashWang's solution #include <iostream> using namespace std; int n,x,ans,cur,h[2000],num,lmax[2000],rmax[2000]; char c; int main() { cin>>n; while (cin>>c){ if (c=='[') continue; if (c==']') {h[num++]=cur; break;} if (c==',') {h[num++]=cur; cur=0;} else cur=cur*10+c-48; } for (int i=1;i<n;++i) lmax[i]=max(lmax[i-1],h[i-1]); for (int i=n-2;i>=0;--i) rmax[i]=max(rmax[i+1],h[i+1]); for (int i=0;i<n;++i) ans+=max(min(rmax[i],lmax[i]),h[i])-h[i]; cout<<ans; return 0; }","title":"1550 \u7559\u4e0b\u7684\u6c34"},{"location":"nr/1550/#1550","text":"\u8f6c\u5230\u9898\u76ee","title":"1550 \u7559\u4e0b\u7684\u6c34"},{"location":"nr/1550/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; char tm; int* hgt = new int[n]; int* llm = new int[n]; int* rrm = new int[n]; int water = 0; for (int i = 0; i < n; i++) { cin >> tm; cin >> hgt[i]; } cin >> tm; //\u6bcf\u4e2a\u70b9\u5224\u65ad\u80fd\u591f\u8fbe\u5230\u7684\u9ad8\u5ea6 int l = 0, r = n - 1; llm[0] = hgt[0]; for (int i = 1; i < n; i++) { llm[i] = hgt[i] > llm[i - 1] ? hgt[i] : llm[i - 1]; } rrm[n - 1] = hgt[n - 1]; for (int i = n - 2; i >= 0; i--) { rrm[i] = hgt[i] > rrm[i + 1] ? hgt[i] : rrm[i + 1]; water += (llm[i] > rrm[i] ? rrm[i] : llm[i]) - hgt[i]; } cout << water; }","title":"VictriD's solution"},{"location":"nr/1550/#fineartzs-solution","text":"/* \u7559\u4e0b\u7684\u6c34 */ #include <iostream> #include <cstring> using namespace std; int n; char ch; int a[1005] = {0}, maxx = 0, ans = 0; int main(){ cin >> n; int num = 0, cnt = 0; bool flag = false; while (cin >> ch){ if (!isdigit(ch)){ if (flag){ a[++cnt] = num; if (num > maxx) maxx = num; num = 0; flag = false; } continue; } flag = true; num = num * 10 + ch - '0'; } int l = 1, r = n; for (int h = 1; h <= maxx; ++h){ while (a[l] < h) ++l; while (a[r] < h) --r; for (int i = l; i <= r; ++i) if (a[i] < h) ++ans; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1550/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; int arr[1005]; int max = 0, sum = 0; char ch; for (int i = 0; i < n; ++i) { cin >> ch >> arr[i]; if (arr[i] > max) max = arr[i]; } for (int i = 1; i <= max; ++i) { int j = 0; while (arr[j] < i) ++j; int k = n - 1; while (arr[k] < i) --k; for (int l = j + 1; l <= k - 1; ++l) { if (arr[l] < i) ++sum; } } cout << sum; //for (int i = 0; i < n; ++i) cout << arr[i]; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1550/#washwangs-solution","text":"#include <iostream> using namespace std; int n,x,ans,cur,h[2000],num,lmax[2000],rmax[2000]; char c; int main() { cin>>n; while (cin>>c){ if (c=='[') continue; if (c==']') {h[num++]=cur; break;} if (c==',') {h[num++]=cur; cur=0;} else cur=cur*10+c-48; } for (int i=1;i<n;++i) lmax[i]=max(lmax[i-1],h[i-1]); for (int i=n-2;i>=0;--i) rmax[i]=max(rmax[i+1],h[i+1]); for (int i=0;i<n;++i) ans+=max(min(rmax[i],lmax[i]),h[i])-h[i]; cout<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/1551/","text":"1551 \u8dd1\u6b65\u8fd8\u662f\u7ec4\u56e2\u7684\u597d \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int vnow=0x3f3f3f3f,n,ans,p; int main() { int *v; scanf(\"%d\",&n); v=new int[n]; for (int i=0;i<n;++i) scanf(\"%d %d\",&p,&v[i]); for (int i=n-1;i>=0;--i) if (v[i]<=vnow){ ans++; vnow=v[i]; } printf(\"%d\",ans); return 0; }","title":"1551 \u8dd1\u6b65\u8fd8\u662f\u7ec4\u56e2\u7684\u597d"},{"location":"nr/1551/#1551","text":"\u8f6c\u5230\u9898\u76ee","title":"1551 \u8dd1\u6b65\u8fd8\u662f\u7ec4\u56e2\u7684\u597d"},{"location":"nr/1551/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int vnow=0x3f3f3f3f,n,ans,p; int main() { int *v; scanf(\"%d\",&n); v=new int[n]; for (int i=0;i<n;++i) scanf(\"%d %d\",&p,&v[i]); for (int i=n-1;i>=0;--i) if (v[i]<=vnow){ ans++; vnow=v[i]; } printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1557/","text":"1557 \u5976\u725b\u8ba1\u6570 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> void qsort(int *s,int *t,int *p,int *q){ if (t-s<=1) return; int i=0,j=int(t-s)-1,x=s[0],y=p[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) {s[i]=s[j]; p[i++]=p[j];} while (i<j&&s[i]<=x) i++; if (i<j) {s[j]=s[i]; p[j--]=p[i];} } s[j]=x; p[j]=y; qsort(s,s+j,p,p+j); qsort(s+j+1,t,p+j+1,q); } int ans,p,x[100000],n,d,head,tail,h[100000],a[100000],lmax[100000],rmax[100000],bx[100000]; int main() { scanf(\"%d%d\",&n,&d); for (int i=0;i<n;++i) scanf(\"%d%d\",&x[i],&h[i]); qsort(x,x+n,h,h+n); head=0; tail=0; for (;x[p]<=d&&p<n;++p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } for (;p<n;++p){ while (tail<head&&x[a[tail]]+d<x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } head=0; tail=0; for (p=n-1;x[p]>=x[n-1]-d;--p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (;p>=0;--p){ while (tail<head&&x[a[tail]]-d>x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (int i=0;i<n;++i) if (2 * h[i] <= lmax[i] && 2 * h[i] <= rmax[i]) ans++; printf(\"%d\",ans); return 0; }","title":"1557 \u5976\u725b\u8ba1\u6570"},{"location":"nr/1557/#1557","text":"\u8f6c\u5230\u9898\u76ee","title":"1557 \u5976\u725b\u8ba1\u6570"},{"location":"nr/1557/#washwangs-solution","text":"#include <iostream> #include <cstdio> void qsort(int *s,int *t,int *p,int *q){ if (t-s<=1) return; int i=0,j=int(t-s)-1,x=s[0],y=p[0]; while (i<j){ while (i<j&&s[j]>=x) j--; if (i<j) {s[i]=s[j]; p[i++]=p[j];} while (i<j&&s[i]<=x) i++; if (i<j) {s[j]=s[i]; p[j--]=p[i];} } s[j]=x; p[j]=y; qsort(s,s+j,p,p+j); qsort(s+j+1,t,p+j+1,q); } int ans,p,x[100000],n,d,head,tail,h[100000],a[100000],lmax[100000],rmax[100000],bx[100000]; int main() { scanf(\"%d%d\",&n,&d); for (int i=0;i<n;++i) scanf(\"%d%d\",&x[i],&h[i]); qsort(x,x+n,h,h+n); head=0; tail=0; for (;x[p]<=d&&p<n;++p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } for (;p<n;++p){ while (tail<head&&x[a[tail]]+d<x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; lmax[p]=h[a[tail]]; } head=0; tail=0; for (p=n-1;x[p]>=x[n-1]-d;--p){ while (head>0&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (;p>=0;--p){ while (tail<head&&x[a[tail]]-d>x[p]) tail++; while (head>tail&&h[a[head-1]]<=h[p]) head--; a[head++]=p; rmax[p]=h[a[tail]]; } for (int i=0;i<n;++i) if (2 * h[i] <= lmax[i] && 2 * h[i] <= rmax[i]) ans++; printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/1564/","text":"1564 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[6][6]; bool v[6][6]; int ans = 0; bool check(int x, int y){ if (x < 0 || x > 5 || y < 0 || y > 5 || v[x][y]) return false; else return true; } void dfs(int x, int y, int ex, int ey, int cost, int state){ if (x == ex && y == ey){ ans = min(ans, cost); return; } for (int k = 0; k < 4; ++k){ int nextx = x + dx[k]; int nexty = y + dy[k]; if (check(nextx, nexty)){ int newcost = a[nextx][nexty] * state; int newstate = newcost % 4 + 1; v[x][y] = true; dfs(nextx, nexty, ex, ey, cost + newcost, newstate); v[x][y] = false; } } } int main(){ int t; cin >> t; while (t--){ for (int i = 0; i < 6; ++i) for (int j = 0; j < 6; ++j) cin >> a[i][j]; memset(v, 0, sizeof(v)); int sx, sy, ex, ey; cin >> sx >> sy >> ex >> ey; v[sx][sy] = true; ans = 2147483647; dfs(sx, sy, ex, ey, 0, 1); cout << ans << endl; } return 0; }","title":"1564 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898"},{"location":"nr/1564/#1564","text":"\u8f6c\u5230\u9898\u76ee","title":"1564 \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898"},{"location":"nr/1564/#fineartzs-solution","text":"/* \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u95ee\u9898 */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[6][6]; bool v[6][6]; int ans = 0; bool check(int x, int y){ if (x < 0 || x > 5 || y < 0 || y > 5 || v[x][y]) return false; else return true; } void dfs(int x, int y, int ex, int ey, int cost, int state){ if (x == ex && y == ey){ ans = min(ans, cost); return; } for (int k = 0; k < 4; ++k){ int nextx = x + dx[k]; int nexty = y + dy[k]; if (check(nextx, nexty)){ int newcost = a[nextx][nexty] * state; int newstate = newcost % 4 + 1; v[x][y] = true; dfs(nextx, nexty, ex, ey, cost + newcost, newstate); v[x][y] = false; } } } int main(){ int t; cin >> t; while (t--){ for (int i = 0; i < 6; ++i) for (int j = 0; j < 6; ++j) cin >> a[i][j]; memset(v, 0, sizeof(v)); int sx, sy, ex, ey; cin >> sx >> sy >> ex >> ey; v[sx][sy] = true; ans = 2147483647; dfs(sx, sy, ex, ey, 0, 1); cout << ans << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1567/","text":"1567 \u6784\u9020\u83f1\u5f62 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6784\u9020\u83f1\u5f62 */ #include <iostream> using namespace std; int main(){ char ch; int n; cin >> ch >> n; for (int i = 1; i <= n / 2 + 1; ++i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } for (int i = n / 2; i >= 1; --i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { char c; int n, half; cin >> c >> n; half = (n + 1) / 2; for (int i = 1; i <= half; ++i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } for (int i = half - 1; i >= 1; --i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } return 0; }","title":"1567 \u6784\u9020\u83f1\u5f62"},{"location":"nr/1567/#1567","text":"\u8f6c\u5230\u9898\u76ee","title":"1567 \u6784\u9020\u83f1\u5f62"},{"location":"nr/1567/#fineartzs-solution","text":"/* \u6784\u9020\u83f1\u5f62 */ #include <iostream> using namespace std; int main(){ char ch; int n; cin >> ch >> n; for (int i = 1; i <= n / 2 + 1; ++i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } for (int i = n / 2; i >= 1; --i){ for (int j = 1; j <= n; ++j){ if ((j >= n / 2 - i + 2) && (j <= n / 2 + i)) cout << ch; else cout << ' '; } cout << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1567/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { char c; int n, half; cin >> c >> n; half = (n + 1) / 2; for (int i = 1; i <= half; ++i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } for (int i = half - 1; i >= 1; --i) { for (int j = 1; j <= half - i; ++j) cout << ' '; for (int j = 1; j <= 2 * i - 1; ++j) cout << c; cout << endl; } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1570/","text":"1570 number100 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; const int MAXNUM = 100005; int search(int arr[], int N, int target) { int low = 0, high = N - 1, mid = (low + high + 1) / 2; while (high > low) { if (arr[mid] > target) high = mid - 1; else low = mid; mid = (low + high + 1) / 2; } return mid; } int main() { int N, T; int arr1[MAXNUM], arr2[MAXNUM]; cin >> N >> T; for (int i = 0; i < N; ++i) scanf(\"%d\", &arr1[i]); for (int i = 0; i < T; ++i) scanf(\"%d\", &arr2[i]); for (int i = 0; i < T; ++i) { if (arr2[i] < arr1[0]) printf(\"%d\\n\", N); else printf(\"%d\\n\", N - search(arr1, N, arr2[i]) - 1); } return 0; }","title":"1570 number100"},{"location":"nr/1570/#1570-number100","text":"\u8f6c\u5230\u9898\u76ee","title":"1570 number100"},{"location":"nr/1570/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; const int MAXNUM = 100005; int search(int arr[], int N, int target) { int low = 0, high = N - 1, mid = (low + high + 1) / 2; while (high > low) { if (arr[mid] > target) high = mid - 1; else low = mid; mid = (low + high + 1) / 2; } return mid; } int main() { int N, T; int arr1[MAXNUM], arr2[MAXNUM]; cin >> N >> T; for (int i = 0; i < N; ++i) scanf(\"%d\", &arr1[i]); for (int i = 0; i < T; ++i) scanf(\"%d\", &arr2[i]); for (int i = 0; i < T; ++i) { if (arr2[i] < arr1[0]) printf(\"%d\\n\", N); else printf(\"%d\\n\", N - search(arr1, N, arr2[i]) - 1); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1577/","text":"1577 \u963f\u9ed1\u7684\u8d28\u7c92 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u963f\u9ed1\u7684\u8d28\u7c92 */ #include <iostream> #include <string> using namespace std; int main(){ int n; cin >> n; string s, t; cin >> s; s.erase(s.begin()); s.erase(s.end() - 1); int cnt = 0; while (n--){ cin >> t; t.erase(t.begin()); t.erase(t.end() - 1); if (t.size() != s.size()) continue; t += t; if (t.find(s) != string::npos) ++cnt; else{ string p(t.rbegin(), t.rend()); if (p.find(s) != string::npos) ++cnt; } } cout << cnt << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; int main() { int n; cin >> n; char target[105], plasmid[105]; cin >> target; char head = target[1]; int count = 0; bool flag; for (int i = 0; i < n; ++i) { flag = false; cin >> plasmid; if (strlen(plasmid) != strlen(target)) continue; for (int j = 1; j <= strlen(target) - 2; ++j) { if (flag) break; if (plasmid[j] != head) continue; else { int k = j + 1, l = 2; if (k > strlen(target) - 2) k = 1; bool isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } ++k; ++l; if (k > strlen(target) - 2) k = 1; } if (isTheSame) { flag = true; break; } k = j - 1; if (k < 1) k = strlen(target) - 2; l = 2; isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } --k; ++l; if (k < 1) k = strlen(target) - 2; } if (isTheSame) { flag = true; break; } } } if (flag) ++count; } cout << count; return 0; }","title":"1577 \u963f\u9ed1\u7684\u8d28\u7c92"},{"location":"nr/1577/#1577","text":"\u8f6c\u5230\u9898\u76ee","title":"1577 \u963f\u9ed1\u7684\u8d28\u7c92"},{"location":"nr/1577/#fineartzs-solution","text":"/* \u963f\u9ed1\u7684\u8d28\u7c92 */ #include <iostream> #include <string> using namespace std; int main(){ int n; cin >> n; string s, t; cin >> s; s.erase(s.begin()); s.erase(s.end() - 1); int cnt = 0; while (n--){ cin >> t; t.erase(t.begin()); t.erase(t.end() - 1); if (t.size() != s.size()) continue; t += t; if (t.find(s) != string::npos) ++cnt; else{ string p(t.rbegin(), t.rend()); if (p.find(s) != string::npos) ++cnt; } } cout << cnt << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1577/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; int main() { int n; cin >> n; char target[105], plasmid[105]; cin >> target; char head = target[1]; int count = 0; bool flag; for (int i = 0; i < n; ++i) { flag = false; cin >> plasmid; if (strlen(plasmid) != strlen(target)) continue; for (int j = 1; j <= strlen(target) - 2; ++j) { if (flag) break; if (plasmid[j] != head) continue; else { int k = j + 1, l = 2; if (k > strlen(target) - 2) k = 1; bool isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } ++k; ++l; if (k > strlen(target) - 2) k = 1; } if (isTheSame) { flag = true; break; } k = j - 1; if (k < 1) k = strlen(target) - 2; l = 2; isTheSame = true; while (k != j) { if (plasmid[k] != target[l]) { isTheSame = false; break; } --k; ++l; if (k < 1) k = strlen(target) - 2; } if (isTheSame) { flag = true; break; } } } if (flag) ++count; } cout << count; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1579/","text":"1579 LCS \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int n,m,dp[1005][1005]; char x[1005],y[1005]; int main() { cin>>n>>m; cin>>x>>y; for (int i=1;i<=n;++i) for (int j=1;j<=m;++j) { if (x[i-1]==y[j-1]) dp[i][j]=dp[i-1][j-1]+1; else dp[i][j]=max(dp[i-1][j],dp[i][j-1]); } cout<<dp[n][m]; return 0; }","title":"1579 LCS"},{"location":"nr/1579/#1579-lcs","text":"\u8f6c\u5230\u9898\u76ee","title":"1579 LCS"},{"location":"nr/1579/#washwangs-solution","text":"#include <iostream> using namespace std; int n,m,dp[1005][1005]; char x[1005],y[1005]; int main() { cin>>n>>m; cin>>x>>y; for (int i=1;i<=n;++i) for (int j=1;j<=m;++j) { if (x[i-1]==y[j-1]) dp[i][j]=dp[i-1][j-1]+1; else dp[i][j]=max(dp[i-1][j],dp[i][j-1]); } cout<<dp[n][m]; return 0; }","title":"WashWang's solution"},{"location":"nr/1580/","text":"1580 LIS \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int n,st[1100000],a[1000001],top,l,r,m; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); st[0]=-1; for (int i=0;i<n;++i){ if (a[i]>st[top]) st[++top]=a[i]; else{ l=1; r=top; while (l<=r){ m=(l+r)/2; if (st[m]<=a[i]) l=m+1; else r=m-1; } if (st[l-1]!=a[i]) st[l]=a[i]; } } printf(\"%d\",top); return 0; }","title":"1580 LIS"},{"location":"nr/1580/#1580-lis","text":"\u8f6c\u5230\u9898\u76ee","title":"1580 LIS"},{"location":"nr/1580/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int n,st[1100000],a[1000001],top,l,r,m; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); st[0]=-1; for (int i=0;i<n;++i){ if (a[i]>st[top]) st[++top]=a[i]; else{ l=1; r=top; while (l<=r){ m=(l+r)/2; if (st[m]<=a[i]) l=m+1; else r=m-1; } if (st[l-1]!=a[i]) st[l]=a[i]; } } printf(\"%d\",top); return 0; }","title":"WashWang's solution"},{"location":"nr/1582/","text":"1582 NC\u7684\u989c\u6587\u5b57 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* NC\u7684\u989c\u6587\u5b57 */ #include <iostream> #include <cstdio> #include <vector> #include <string> using namespace std; const char none[] = \"Are you kidding me? \\\\(`\u0414\u00b4)/\"; /*void init(vector<string> &vs){ char ch; ch = cin.get(); while (ch != '\\n'){ if (ch == '['){ string temps = \"\"; ch = cin.get(); while (ch != ']'){ if (ch == '\\n') return; temps += ch; ch = cin.get(); } if (temps != \"\" && vs.size() < 15) vs.push_back(temps); } ch = cin.get(); } }*/ int main(){ vector<string> lib[3]; char ch; for (int i = 0; i != 3; ++i){ while ((ch = cin.get()) != '\\n'){ if (ch == '['){ string temps; while ((ch = cin.get()) != ']') temps += ch; //if (lib[i].size() < 15) lib[i].push_back(temps); } } } /*for (int i = 0; i != 3; ++i) for (int j = 0; j != lib[i].size(); ++j) cout << lib[i][j] << endl;*/ int k; cin >> k; for (int query = 0; query != k; ++query){ int q[5] = {0}; string ans = \"\"; for (int i = 0; i != 5; ++i) cin >> q[i]; if (q[0] > lib[0].size() || q[0] <=0){ cout << none << endl; continue; } ans += lib[0][q[0] - 1]; ans += \"(\"; if (q[1] > lib[1].size() || q[1] <=0){ cout << none << endl; continue; } ans += lib[1][q[1] - 1]; if (q[2] > lib[2].size() || q[2] <=0){ cout << none << endl; continue; } ans += lib[2][q[2] - 1]; if (q[3] > lib[1].size() || q[3] <=0){ cout << none << endl; continue; } ans += lib[1][q[3] - 1]; ans += \")\"; if (q[4] > lib[0].size() || q[4] <=0){ cout << none << endl; continue; } ans += lib[0][q[4] - 1]; cout << ans << endl; } /*for (int i = 0; i != 3; ++i) { for (int j = 0; j != lib[i].size(); ++j){ for (int k = 0; k != lib[i][j].size(); ++k) cout << int(lib[i][j][k]) << ' '; cout << endl; } }*/ return 0; }","title":"1582 NC\u7684\u989c\u6587\u5b57"},{"location":"nr/1582/#1582-nc","text":"\u8f6c\u5230\u9898\u76ee","title":"1582 NC\u7684\u989c\u6587\u5b57"},{"location":"nr/1582/#fineartzs-solution","text":"/* NC\u7684\u989c\u6587\u5b57 */ #include <iostream> #include <cstdio> #include <vector> #include <string> using namespace std; const char none[] = \"Are you kidding me? \\\\(`\u0414\u00b4)/\"; /*void init(vector<string> &vs){ char ch; ch = cin.get(); while (ch != '\\n'){ if (ch == '['){ string temps = \"\"; ch = cin.get(); while (ch != ']'){ if (ch == '\\n') return; temps += ch; ch = cin.get(); } if (temps != \"\" && vs.size() < 15) vs.push_back(temps); } ch = cin.get(); } }*/ int main(){ vector<string> lib[3]; char ch; for (int i = 0; i != 3; ++i){ while ((ch = cin.get()) != '\\n'){ if (ch == '['){ string temps; while ((ch = cin.get()) != ']') temps += ch; //if (lib[i].size() < 15) lib[i].push_back(temps); } } } /*for (int i = 0; i != 3; ++i) for (int j = 0; j != lib[i].size(); ++j) cout << lib[i][j] << endl;*/ int k; cin >> k; for (int query = 0; query != k; ++query){ int q[5] = {0}; string ans = \"\"; for (int i = 0; i != 5; ++i) cin >> q[i]; if (q[0] > lib[0].size() || q[0] <=0){ cout << none << endl; continue; } ans += lib[0][q[0] - 1]; ans += \"(\"; if (q[1] > lib[1].size() || q[1] <=0){ cout << none << endl; continue; } ans += lib[1][q[1] - 1]; if (q[2] > lib[2].size() || q[2] <=0){ cout << none << endl; continue; } ans += lib[2][q[2] - 1]; if (q[3] > lib[1].size() || q[3] <=0){ cout << none << endl; continue; } ans += lib[1][q[3] - 1]; ans += \")\"; if (q[4] > lib[0].size() || q[4] <=0){ cout << none << endl; continue; } ans += lib[0][q[4] - 1]; cout << ans << endl; } /*for (int i = 0; i != 3; ++i) { for (int j = 0; j != lib[i].size(); ++j){ for (int k = 0; k != lib[i][j].size(); ++k) cout << int(lib[i][j][k]) << ' '; cout << endl; } }*/ return 0; }","title":"FineArtz's solution"},{"location":"nr/1591/","text":"1591 Count On Tree \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Count On Tree*/ #include <iostream> #include <vector> #include <queue> using namespace std; class Node{ public: int father = 0; vector<int> edge; long long w = 0, sumw = 0; int depth = 0; int inT = 0, outT = 0; }; Node a[50005]; vector<int> dep[50105]; void makeTree(){ queue<int> q; q.push(1); int now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int i : a[now].edge){ if (i != a[now].father){ a[i].father = now; if (a[i].edge.size() != 1) q.push(i); } } } } /*void print(int root){ if (root == 0) return; cout << root << ' ' << a[root].sumw << endl; print(a[root].lchild); print(a[root].rchild); }*/ long long calcw(int root){ a[root].sumw = a[root].w; for (auto i : a[root].edge){ if (i != a[root].father){ if (a[i].edge.size() != 1) a[root].sumw += calcw(i); else{ a[i].sumw = a[i].w; a[root].sumw += a[i].w; } } } return a[root].sumw; } void calcDepth(int root, int d){ if (root == 0) return; a[root].depth = d; dep[d].push_back(root); for (auto i : a[root].edge){ if (i != a[root].father){ calcDepth(i, d + 1); } } } int timeStamp = 1; void makeStamp(int root){ a[root].inT = timeStamp; for (auto i : a[root].edge){ if (i != a[root].father){ ++timeStamp; makeStamp(i); } } a[root].outT = timeStamp; } long long query(int root, int h){ long long ret = 0; for (auto i : dep[a[root].depth + h]){ if (a[i].inT >= a[root].inT && a[i].outT <= a[root].outT) ret += a[i].sumw; } return ret; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, q, u, v; cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> a[i].w; for (int i = 1; i < n; ++i){ cin >> u >> v; a[u].edge.push_back(v); a[v].edge.push_back(u); } makeTree(); calcw(1); //print(1); calcDepth(1, 1); makeStamp(1); int x, k; for (int i = 1; i <= q; ++i){ cin >> x >> k; cout << query(x, k) << '\\n'; } return 0; }","title":"1591 Count On Tree"},{"location":"nr/1591/#1591-count-on-tree","text":"\u8f6c\u5230\u9898\u76ee","title":"1591 Count On Tree"},{"location":"nr/1591/#fineartzs-solution","text":"/* Count On Tree*/ #include <iostream> #include <vector> #include <queue> using namespace std; class Node{ public: int father = 0; vector<int> edge; long long w = 0, sumw = 0; int depth = 0; int inT = 0, outT = 0; }; Node a[50005]; vector<int> dep[50105]; void makeTree(){ queue<int> q; q.push(1); int now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int i : a[now].edge){ if (i != a[now].father){ a[i].father = now; if (a[i].edge.size() != 1) q.push(i); } } } } /*void print(int root){ if (root == 0) return; cout << root << ' ' << a[root].sumw << endl; print(a[root].lchild); print(a[root].rchild); }*/ long long calcw(int root){ a[root].sumw = a[root].w; for (auto i : a[root].edge){ if (i != a[root].father){ if (a[i].edge.size() != 1) a[root].sumw += calcw(i); else{ a[i].sumw = a[i].w; a[root].sumw += a[i].w; } } } return a[root].sumw; } void calcDepth(int root, int d){ if (root == 0) return; a[root].depth = d; dep[d].push_back(root); for (auto i : a[root].edge){ if (i != a[root].father){ calcDepth(i, d + 1); } } } int timeStamp = 1; void makeStamp(int root){ a[root].inT = timeStamp; for (auto i : a[root].edge){ if (i != a[root].father){ ++timeStamp; makeStamp(i); } } a[root].outT = timeStamp; } long long query(int root, int h){ long long ret = 0; for (auto i : dep[a[root].depth + h]){ if (a[i].inT >= a[root].inT && a[i].outT <= a[root].outT) ret += a[i].sumw; } return ret; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, q, u, v; cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> a[i].w; for (int i = 1; i < n; ++i){ cin >> u >> v; a[u].edge.push_back(v); a[v].edge.push_back(u); } makeTree(); calcw(1); //print(1); calcDepth(1, 1); makeStamp(1); int x, k; for (int i = 1; i <= q; ++i){ cin >> x >> k; cout << query(x, k) << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1592/","text":"1592 \u6c42\u548c \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; typedef long long ll; ll t[4000000],ans[1000000]; int n,m,k,l,r; inline int lowbit(int x){ return x&-x;} void update(int x,int k){ while (x<=n){ t[x]+=k; x+=lowbit(x); } } ll query(int x){ ll sum=0; while (x>0){ sum+=t[x]; x-=lowbit(x); } return sum; } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){ scanf(\"%d\",&k); update(i,k); } for (int i=0;i<m;++i){ scanf(\"%d%d\",&l,&r); ans[i]=query(r)-query(l-1); } for (int i=0;i<m;++i) printf(\"%lld\\n\",ans[i]); return 0; }","title":"1592 \u6c42\u548c"},{"location":"nr/1592/#1592","text":"\u8f6c\u5230\u9898\u76ee","title":"1592 \u6c42\u548c"},{"location":"nr/1592/#washwangs-solution","text":"#include <iostream> using namespace std; typedef long long ll; ll t[4000000],ans[1000000]; int n,m,k,l,r; inline int lowbit(int x){ return x&-x;} void update(int x,int k){ while (x<=n){ t[x]+=k; x+=lowbit(x); } } ll query(int x){ ll sum=0; while (x>0){ sum+=t[x]; x-=lowbit(x); } return sum; } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){ scanf(\"%d\",&k); update(i,k); } for (int i=0;i<m;++i){ scanf(\"%d%d\",&l,&r); ans[i]=query(r)-query(l-1); } for (int i=0;i<m;++i) printf(\"%lld\\n\",ans[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/1593/","text":"1593 Mouse \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; struct mouse { int number; int score; int strength; }; mouse tmplist[200005]; mouse ml[200005]; mouse* MergeSort(mouse* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].score < list[1].score || (list[0].score == list[1].score && list[0].number > list[1].number)) { mouse temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } mouse* llst = MergeSort(list, listSize / 2); mouse* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if (((llst[lct].score > rlst[rct].score || (llst[lct].score == rlst[rct].score && llst[lct].number < rlst[rct].number)) && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } memcpy(list, tmplist, listSize * sizeof(mouse)); return list; } int main() { int N, R; cin >> N >> R; for (int i = 0; i < 2 * N; i++) { ml[i].number = i + 1; scanf(\"%d\", &(ml[i].score)); } for (int i = 0; i < 2 * N; i++) { scanf(\"%d\", &(ml[i].strength)); } MergeSort(ml, 2 * N); for (int i = 0; i < R; i++) { for (int i = 0; i < 2 * N; i += 2) { if (ml[i].strength > ml[i + 1].strength) ml[i].score += 2; if (ml[i].strength == ml[i + 1].strength) ml[i].score++, ml[i + 1].score++; if (ml[i].strength < ml[i + 1].strength) ml[i + 1].score += 2; } MergeSort(ml, 2 * N); } for (int i = 0; i < 2 * N; i++) { if (i) printf(\"%c\",' '); printf(\"%d\",ml[i].number); } return 0; } FineArtz's solution /* Mouse */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; class Mouse{ public: Mouse() = default; Mouse(int x, int y, int z) : id(x), score(y), abi(z) {} int id = 0, score = 0, abi = 0; bool operator <(const Mouse &m){ return (score > m.score || score == m.score && id < m.id); } }; int n, r; Mouse win[200005], draw[200005], lose[200005], rk[200005]; void merge(int ww, int dd, int ll){ int w = 1, d = 1, l = 1, p = 0; while (p <= 2 * n){ if (win[w] < draw[d] && win[w] < lose[l]){ rk[++p] = win[w++]; } else if (draw[d] < win[w] && draw[d] < lose[l]){ rk[++p] = draw[d++]; } else if (lose[l] < win[w] && lose[l] < draw[d]){ rk[++p] = lose[l++]; } else break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> r; for (int i = 1; i <= 2 * n; ++i){ cin >> rk[i].score; rk[i].id = i; } for (int i = 1; i <= 2 * n; ++i) cin >> rk[i].abi; sort(rk + 1, rk + 2 * n + 1); int w, d, l; for (int round = 1; round <= r; ++round){ w = 0, d = 0, l = 0; for (int race = 1; race <= n; ++race){ if (rk[race * 2 - 1].abi > rk[race * 2].abi){ rk[race * 2 - 1].score += 2; win[++w] = rk[race * 2 - 1]; lose[++l] = rk[race * 2]; } else if (rk[race * 2 - 1].abi == rk[race * 2].abi){ ++rk[race * 2 - 1].score; ++rk[race * 2].score; draw[++d] = rk[race * 2 - 1]; draw[++d] = rk[race * 2]; } else{ rk[race * 2].score += 2; win[++w] = rk[race * 2]; lose[++l] = rk[race * 2 - 1]; } } win[w + 1] = Mouse(0, -1, 0); draw[d + 1] = Mouse(0, -1, 0); lose[l + 1] = Mouse(0, -1, 0); merge(w, d, l); } for (int i = 1; i <= 2 * n; ++i) cout << rk[i].id << \" \"; cout << '\\n'; return 0; }","title":"1593 Mouse"},{"location":"nr/1593/#1593-mouse","text":"\u8f6c\u5230\u9898\u76ee","title":"1593 Mouse"},{"location":"nr/1593/#victrids-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; struct mouse { int number; int score; int strength; }; mouse tmplist[200005]; mouse ml[200005]; mouse* MergeSort(mouse* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0].score < list[1].score || (list[0].score == list[1].score && list[0].number > list[1].number)) { mouse temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } mouse* llst = MergeSort(list, listSize / 2); mouse* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if (((llst[lct].score > rlst[rct].score || (llst[lct].score == rlst[rct].score && llst[lct].number < rlst[rct].number)) && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } memcpy(list, tmplist, listSize * sizeof(mouse)); return list; } int main() { int N, R; cin >> N >> R; for (int i = 0; i < 2 * N; i++) { ml[i].number = i + 1; scanf(\"%d\", &(ml[i].score)); } for (int i = 0; i < 2 * N; i++) { scanf(\"%d\", &(ml[i].strength)); } MergeSort(ml, 2 * N); for (int i = 0; i < R; i++) { for (int i = 0; i < 2 * N; i += 2) { if (ml[i].strength > ml[i + 1].strength) ml[i].score += 2; if (ml[i].strength == ml[i + 1].strength) ml[i].score++, ml[i + 1].score++; if (ml[i].strength < ml[i + 1].strength) ml[i + 1].score += 2; } MergeSort(ml, 2 * N); } for (int i = 0; i < 2 * N; i++) { if (i) printf(\"%c\",' '); printf(\"%d\",ml[i].number); } return 0; }","title":"VictriD's solution"},{"location":"nr/1593/#fineartzs-solution","text":"/* Mouse */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; class Mouse{ public: Mouse() = default; Mouse(int x, int y, int z) : id(x), score(y), abi(z) {} int id = 0, score = 0, abi = 0; bool operator <(const Mouse &m){ return (score > m.score || score == m.score && id < m.id); } }; int n, r; Mouse win[200005], draw[200005], lose[200005], rk[200005]; void merge(int ww, int dd, int ll){ int w = 1, d = 1, l = 1, p = 0; while (p <= 2 * n){ if (win[w] < draw[d] && win[w] < lose[l]){ rk[++p] = win[w++]; } else if (draw[d] < win[w] && draw[d] < lose[l]){ rk[++p] = draw[d++]; } else if (lose[l] < win[w] && lose[l] < draw[d]){ rk[++p] = lose[l++]; } else break; } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> r; for (int i = 1; i <= 2 * n; ++i){ cin >> rk[i].score; rk[i].id = i; } for (int i = 1; i <= 2 * n; ++i) cin >> rk[i].abi; sort(rk + 1, rk + 2 * n + 1); int w, d, l; for (int round = 1; round <= r; ++round){ w = 0, d = 0, l = 0; for (int race = 1; race <= n; ++race){ if (rk[race * 2 - 1].abi > rk[race * 2].abi){ rk[race * 2 - 1].score += 2; win[++w] = rk[race * 2 - 1]; lose[++l] = rk[race * 2]; } else if (rk[race * 2 - 1].abi == rk[race * 2].abi){ ++rk[race * 2 - 1].score; ++rk[race * 2].score; draw[++d] = rk[race * 2 - 1]; draw[++d] = rk[race * 2]; } else{ rk[race * 2].score += 2; win[++w] = rk[race * 2]; lose[++l] = rk[race * 2 - 1]; } } win[w + 1] = Mouse(0, -1, 0); draw[d + 1] = Mouse(0, -1, 0); lose[l + 1] = Mouse(0, -1, 0); merge(w, d, l); } for (int i = 1; i <= 2 * n; ++i) cout << rk[i].id << \" \"; cout << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/1594/","text":"1594 \u6c42\u548c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6c42\u548c */ #include <iostream> #include <vector> using namespace std; constexpr int MAXS = 5e3 + 5; long long sum[MAXS][MAXS] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m, n, q, t; cin >> n >> m >> q; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } int x1, x2, y1, y2; long long ans = 0; while (q--){ cin >> x1 >> y1 >> x2 >> y2; ans = sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1]; cout << ans << '\\n'; } return 0; } WashWang's solution #include <iostream> using namespace std; int a[10000001],n,m,q,x1,x2,y1,y2; long long map[10000001],ans; int main() { scanf(\"%d%d%d\",&n,&m,&q); for (int i=0;i<n*m;++i){ scanf(\"%d\",&a[i]); if (i>=m) map[i]+=map[i-m]; if (i%m!=0) map[i]+=map[i-1]; if (i>=m&&i%m!=0) map[i]-=map[i-m-1]; map[i]+=a[i]; } for (int i=0;i<q;++i){ scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2); x1-=1; y1-=1; x2-=1; y2-=1; ans=map[x2*m+y2]; if (y1>0) ans-=map[x2*m+y1-1]; if (x1>0) ans-=map[(x1-1)*m+y2]; if (x1>0&&y1>0) ans+=map[(x1-1)*m+y1-1]; printf(\"%lld\\n\",ans); } return 0; }","title":"1594 \u6c42\u548c"},{"location":"nr/1594/#1594","text":"\u8f6c\u5230\u9898\u76ee","title":"1594 \u6c42\u548c"},{"location":"nr/1594/#fineartzs-solution","text":"/* \u6c42\u548c */ #include <iostream> #include <vector> using namespace std; constexpr int MAXS = 5e3 + 5; long long sum[MAXS][MAXS] = {0}; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int m, n, q, t; cin >> n >> m >> q; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> t; sum[i][j] = t + sum[i - 1][j] + sum[i][j - 1] - sum[i - 1][j - 1]; } } int x1, x2, y1, y2; long long ans = 0; while (q--){ cin >> x1 >> y1 >> x2 >> y2; ans = sum[x2][y2] - sum[x2][y1 - 1] - sum[x1 - 1][y2] + sum[x1 - 1][y1 - 1]; cout << ans << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1594/#washwangs-solution","text":"#include <iostream> using namespace std; int a[10000001],n,m,q,x1,x2,y1,y2; long long map[10000001],ans; int main() { scanf(\"%d%d%d\",&n,&m,&q); for (int i=0;i<n*m;++i){ scanf(\"%d\",&a[i]); if (i>=m) map[i]+=map[i-m]; if (i%m!=0) map[i]+=map[i-1]; if (i>=m&&i%m!=0) map[i]-=map[i-m-1]; map[i]+=a[i]; } for (int i=0;i<q;++i){ scanf(\"%d%d%d%d\",&x1,&y1,&x2,&y2); x1-=1; y1-=1; x2-=1; y2-=1; ans=map[x2*m+y2]; if (y1>0) ans-=map[x2*m+y1-1]; if (x1>0) ans-=map[(x1-1)*m+y2]; if (x1>0&&y1>0) ans+=map[(x1-1)*m+y1-1]; printf(\"%lld\\n\",ans); } return 0; }","title":"WashWang's solution"},{"location":"nr/1596/","text":"1596 \u9ec4\u660f\u4e4b\u65f6 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9ec4\u660f\u4e4b\u65f6 */ #include <iostream> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ long long n, i, j; cin >> n >> i >> j; cout << step(n, n - i + 1, j) << ' ' << step(n, i, n - j + 1) << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; long N, i, j; long min_len; long out = 0, in = 0; long x, y; long tmp; void walk(long a, long b) { while (a != i || b != j) { while ((a != i || b != j) && a > min_len + 1) { --a; ++in; } while ((a != i || b != j) && b < N - min_len) { ++b; ++in; } while ((a != i || b != j) && a < N - min_len) { ++a; ++in; } while ((a != i || b != j) && b > min_len + 1) { --b; ++in; } } } int main() { cin >> N >> i >> j; min_len = N; if (i - 1 < min_len) min_len = i - 1; if (j - 1 < min_len) min_len = j - 1; if (N - i < min_len) min_len = N - i; if (N - j < min_len) min_len = N - j; out = 4 * min_len * (N - min_len); x = N - min_len; y = 1 + min_len; walk(x, y); cout << out + in << ' '; i = N - i + 1; j = N - j + 1; in = 0; walk(x, y); cout << out + in; return 0; }","title":"1596 \u9ec4\u660f\u4e4b\u65f6"},{"location":"nr/1596/#1596","text":"\u8f6c\u5230\u9898\u76ee","title":"1596 \u9ec4\u660f\u4e4b\u65f6"},{"location":"nr/1596/#fineartzs-solution","text":"/* \u9ec4\u660f\u4e4b\u65f6 */ #include <iostream> using namespace std; inline long long min(long long a, long long b, long long c, long long d){ long long ret = a; if (ret > b) ret = b; if (ret > c) ret = c; if (ret > d) ret = d; return ret; } long long step(long long n, long long x, long long y){ if (y == 1) return x - 1; if (x == n) return n + y - 2; if (y == n) return n * 3 - x - 2; if (x == 1) return n * 4 - y - 3; long long k = min(x - 1, y - 1, n - x, n - y); return 4 * k * (n - k) + step(n - 2 * k, x - k, y - k); } int main(){ long long n, i, j; cin >> n >> i >> j; cout << step(n, n - i + 1, j) << ' ' << step(n, i, n - j + 1) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1596/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; long N, i, j; long min_len; long out = 0, in = 0; long x, y; long tmp; void walk(long a, long b) { while (a != i || b != j) { while ((a != i || b != j) && a > min_len + 1) { --a; ++in; } while ((a != i || b != j) && b < N - min_len) { ++b; ++in; } while ((a != i || b != j) && a < N - min_len) { ++a; ++in; } while ((a != i || b != j) && b > min_len + 1) { --b; ++in; } } } int main() { cin >> N >> i >> j; min_len = N; if (i - 1 < min_len) min_len = i - 1; if (j - 1 < min_len) min_len = j - 1; if (N - i < min_len) min_len = N - i; if (N - j < min_len) min_len = N - j; out = 4 * min_len * (N - min_len); x = N - min_len; y = 1 + min_len; walk(x, y); cout << out + in << ' '; i = N - i + 1; j = N - j + 1; in = 0; walk(x, y); cout << out + in; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1599/","text":"1599 Brackets Stack \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; inline bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } inline char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } inline char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"1599 Brackets Stack"},{"location":"nr/1599/#1599-brackets-stack","text":"\u8f6c\u5230\u9898\u76ee","title":"1599 Brackets Stack"},{"location":"nr/1599/#fineartzs-solution","text":"/* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; inline bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } inline char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } inline char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1605/","text":"1605 Brackets Stack \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; char rstack[1000001],istack[1000001],c; int rtop,itop,n,x; bool match[1000001]; void push(char c){ if (rstack[rtop-1]=='('&&c==')') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='['&&c==']') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='{'&&c=='}') { rtop--; match[itop]=true; } else rstack[rtop++]=c; } void raw_push(char c){ if (rstack[rtop-1]=='('&&c==')') rtop--; else if (rstack[rtop-1]=='['&&c==']') rtop--; else if (rstack[rtop-1]=='{'&&c=='}') rtop--; else rstack[rtop++]=c; } void pop(){ switch (istack[itop-1]) { case '(': raw_push(')'); break; case ')': if (match[itop-1]) {raw_push('('); match[itop-1]=false;} else rtop--; break; case '[': raw_push(']'); break; case ']': if (match[itop-1]) {raw_push('['); match[itop-1]=false;} else rtop--; break; case '{': raw_push('}'); break; case '}': if (match[itop-1]) {raw_push('{'); match[itop-1]=false;} else rtop--; break; } itop--; } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%d\",&x); if (x==1){ scanf(\" %c\",&c); push(c); istack[itop++]=c; } if (x==2&&itop>=1) pop(); if (x==3&&itop>=1) printf(\"%c\\n\",istack[itop-1]); if (x==4){ if (!rtop) printf(\"YES\\n\"); else printf(\"NO\\n\");} } return 0; }","title":"1605 Brackets Stack"},{"location":"nr/1605/#1605-brackets-stack","text":"\u8f6c\u5230\u9898\u76ee","title":"1605 Brackets Stack"},{"location":"nr/1605/#fineartzs-solution","text":"/* Brackets Stack */ #include <iostream> using namespace std; char full[1000005], inco[1000005]; bool isco[1000005] = {0}; int n, fsize = 0, isize = 0; bool isLeft(char ch){ return (ch == '(' || ch == '[' || ch == '{'); } char getRight(char ch){ if (ch == '(') return ')'; else if (ch == '[') return ']'; else if (ch == '{') return '}'; else return ' '; } char getLeft(char ch){ if (ch == ')') return '('; else if (ch == ']') return '['; else if (ch == '}') return '{'; else return ' '; } int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; while (n--){ int op; char ch; cin >> op; switch(op){ case 1: cin >> ch; full[fsize++] = ch; if (isLeft(ch)){ inco[isize++] = ch; isco[fsize - 1] = true; } else{ if (isize != 0 && isLeft(inco[isize - 1]) && ch == getRight(inco[isize - 1])){ --isize; isco[fsize - 1] = true; } else{ inco[isize++] = ch; isco[fsize - 1] = false; } } break; case 2: if (fsize == 0) break; ch = full[fsize - 1]; if (isLeft(ch)) --isize; else{ if (isco[fsize - 1]) inco[isize++] = getLeft(ch); else --isize; } --fsize; break; case 3: if (fsize != 0) cout << full[fsize - 1] << '\\n'; break; case 4: if (isize) cout << \"NO\\n\"; else cout << \"YES\\n\"; break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/1605/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; char rstack[1000001],istack[1000001],c; int rtop,itop,n,x; bool match[1000001]; void push(char c){ if (rstack[rtop-1]=='('&&c==')') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='['&&c==']') { rtop--; match[itop]=true; } else if (rstack[rtop-1]=='{'&&c=='}') { rtop--; match[itop]=true; } else rstack[rtop++]=c; } void raw_push(char c){ if (rstack[rtop-1]=='('&&c==')') rtop--; else if (rstack[rtop-1]=='['&&c==']') rtop--; else if (rstack[rtop-1]=='{'&&c=='}') rtop--; else rstack[rtop++]=c; } void pop(){ switch (istack[itop-1]) { case '(': raw_push(')'); break; case ')': if (match[itop-1]) {raw_push('('); match[itop-1]=false;} else rtop--; break; case '[': raw_push(']'); break; case ']': if (match[itop-1]) {raw_push('['); match[itop-1]=false;} else rtop--; break; case '{': raw_push('}'); break; case '}': if (match[itop-1]) {raw_push('{'); match[itop-1]=false;} else rtop--; break; } itop--; } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%d\",&x); if (x==1){ scanf(\" %c\",&c); push(c); istack[itop++]=c; } if (x==2&&itop>=1) pop(); if (x==3&&itop>=1) printf(\"%c\\n\",istack[itop-1]); if (x==4){ if (!rtop) printf(\"YES\\n\"); else printf(\"NO\\n\");} } return 0; }","title":"WashWang's solution"},{"location":"nr/1606/","text":"1606 Interesting Island \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Interesting Island */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, m; char a[55][55]; bool v[55][55], isol = true; void floodfill(int x, int y){ v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) floodfill(nx, ny); } } void checkfill(int x, int y){ if (a[x][y] == '.'){ isol = false; return; } v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) checkfill(nx, ny); if (!isol) return; } } void realfill(int x, int y){ v[x][y] = true; a[x][y] = '#'; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] == '?' && !v[nx][ny]) realfill(nx, ny); } } bool check(){ bool flag = true; memset(v, 0, sizeof(v)); for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.'){ floodfill(i, j); flag = false; break; } } if (!flag) break; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.' && !v[i][j]) return false; } } return true; } void checkIso(int i, int j){ isol = true; memset(v, 0, sizeof(v)); checkfill(i, j); if (isol){ memset(v, 0, sizeof(v)); realfill(i, j); } } int main(){ bool flag = false; int cnt = 0; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '.') flag = true; if (a[i][j] == '?') ++cnt; } } if (!flag){ if (cnt >= 2){ cout << \"Ambiguous\" << endl; return 0; } else if (cnt == 0){ cout << \"Impossible\" << endl; return 0; } else{ for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?') cout << '.'; else cout << a[i][j]; } cout << endl; } return 0; } } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?'){ checkIso(i, j); if (a[i][j] != '?') continue; bool flag1 = false, flag2 = false; a[i][j] = '.'; flag1 = check(); a[i][j] = '#'; flag2 = check(); if (flag1 && flag2){ cout << \"Ambiguous\" << endl; return 0; } if (!flag1 && !flag2){ cout << \"Impossible\" << endl; return 0; } a[i][j] = '.'; } } } bool imp = true; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i][j] == '.'){ imp = false; break; } if (imp){ cout << \"Impossible\" << endl; return 0; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j) cout << a[i][j]; cout << endl; } return 0; }","title":"1606 Interesting Island"},{"location":"nr/1606/#1606-interesting-island","text":"\u8f6c\u5230\u9898\u76ee","title":"1606 Interesting Island"},{"location":"nr/1606/#fineartzs-solution","text":"/* Interesting Island */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int n, m; char a[55][55]; bool v[55][55], isol = true; void floodfill(int x, int y){ v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) floodfill(nx, ny); } } void checkfill(int x, int y){ if (a[x][y] == '.'){ isol = false; return; } v[x][y] = true; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] != '#' && !v[nx][ny]) checkfill(nx, ny); if (!isol) return; } } void realfill(int x, int y){ v[x][y] = true; a[x][y] = '#'; for (int k = 0; k < 4; ++k){ int nx = x + dx[k]; int ny = y + dy[k]; if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && a[nx][ny] == '?' && !v[nx][ny]) realfill(nx, ny); } } bool check(){ bool flag = true; memset(v, 0, sizeof(v)); for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.'){ floodfill(i, j); flag = false; break; } } if (!flag) break; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '.' && !v[i][j]) return false; } } return true; } void checkIso(int i, int j){ isol = true; memset(v, 0, sizeof(v)); checkfill(i, j); if (isol){ memset(v, 0, sizeof(v)); realfill(i, j); } } int main(){ bool flag = false; int cnt = 0; cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '.') flag = true; if (a[i][j] == '?') ++cnt; } } if (!flag){ if (cnt >= 2){ cout << \"Ambiguous\" << endl; return 0; } else if (cnt == 0){ cout << \"Impossible\" << endl; return 0; } else{ for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?') cout << '.'; else cout << a[i][j]; } cout << endl; } return 0; } } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == '?'){ checkIso(i, j); if (a[i][j] != '?') continue; bool flag1 = false, flag2 = false; a[i][j] = '.'; flag1 = check(); a[i][j] = '#'; flag2 = check(); if (flag1 && flag2){ cout << \"Ambiguous\" << endl; return 0; } if (!flag1 && !flag2){ cout << \"Impossible\" << endl; return 0; } a[i][j] = '.'; } } } bool imp = true; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) if (a[i][j] == '.'){ imp = false; break; } if (imp){ cout << \"Impossible\" << endl; return 0; } for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j) cout << a[i][j]; cout << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/1621/","text":"1621 \u672a\u547d\u540d \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int n,sorted[1001],pre[1001],cur,ans; char mat[1001][1001]; void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,k=sorted[l]; while (i<j){ while (i<j&&sorted[j]<=k) j--; if (i<j) sorted[i++]=sorted[j]; while (i<j&&sorted[i]>=k) i++; if (i<j) sorted[j--]=sorted[i]; } sorted[i]=k; qsort(l,i); qsort(i+1,r); } int main() { cin>>n; for (int i=0;i<n;++i) cin>>mat[i]; for (int i=0;i<n;++i) { for (int j=0;j<n;++j) if (mat[j][i]!='1') sorted[j]=pre[j]=0; else sorted[j]=pre[j]=pre[j]+1; qsort(0,n); cur=sorted[0]; for (int j=0;j<n;++j){ cur=min(cur,sorted[j]); ans=max(ans,cur*(j+1)); } } cout<<ans; return 0; }","title":"1621 \u672a\u547d\u540d"},{"location":"nr/1621/#1621","text":"\u8f6c\u5230\u9898\u76ee","title":"1621 \u672a\u547d\u540d"},{"location":"nr/1621/#washwangs-solution","text":"#include <iostream> using namespace std; int n,sorted[1001],pre[1001],cur,ans; char mat[1001][1001]; void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,k=sorted[l]; while (i<j){ while (i<j&&sorted[j]<=k) j--; if (i<j) sorted[i++]=sorted[j]; while (i<j&&sorted[i]>=k) i++; if (i<j) sorted[j--]=sorted[i]; } sorted[i]=k; qsort(l,i); qsort(i+1,r); } int main() { cin>>n; for (int i=0;i<n;++i) cin>>mat[i]; for (int i=0;i<n;++i) { for (int j=0;j<n;++j) if (mat[j][i]!='1') sorted[j]=pre[j]=0; else sorted[j]=pre[j]=pre[j]+1; qsort(0,n); cur=sorted[0]; for (int j=0;j<n;++j){ cur=min(cur,sorted[j]); ans=max(ans,cur*(j+1)); } } cout<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/1637/","text":"1637 \u7ec4\u5408\u6570 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int C(int, int); //get combination number class IntArray { friend ostream &operator<<(ostream &os, const IntArray &obj); friend istream &operator>>(istream &is, IntArray &obj); friend bool operator==(const IntArray &obj1, const IntArray &obj2); private: int length; int *list; public: IntArray(int l); //l\u4e3a\u6570\u7ec4\u957f\u5ea6 ~IntArray(); //\u6790\u6784\u51fd\u6570 int &operator[](int index); //\u53f3\u503c const int &operator[](int index) const; //\u5de6\u503c IntArray operator()(int start, int end); //\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684IntArray\u5bf9\u8c61\uff0c\u5305\u542b\u4ecestart\u4e0b\u6807\u5230end\u4e0b\u6807\u7684\u503c }; ostream &operator<<(ostream &os, const IntArray &obj); istream &operator>>(istream &is, IntArray &obj); bool operator==(const IntArray &obj1, const IntArray &obj2); int main() { int n; cin >> n; // int m; // cin >> m; // cout << C(n, m); IntArray data1(2 * n); cin >> data1; IntArray a(n - 1); IntArray b(n); cin >> a; for (int i = 0; i < n; i++) b[i] = C(data1[2 * i], data1[2 * i + 1]); cout << \"The result is:\" << endl; cout << b << endl; if (a == (b(1, n - 1))) { cout << \"yes!\"; } else { cout << \"no!\"; } return 0; } int C(int n, int m) { //n total m select //calculate combination number using Euler equations. //1.validate if (m > n || m < 0 || n < 0) return 0; //2.defined calculation laws if (n == 0 || m == 0) return 1; //3.boost if (m == 1) return n; if ((2 * m) > n) return C(n, n - m); return (C(n - 1, m - 1) + C(n - 1, m)); } ostream &operator<<(ostream &os, const IntArray &obj) { bool SPACE_FLAG = false; for (int i = 0; i < obj.length; i++) { if (SPACE_FLAG) os << ' '; os << obj[i]; SPACE_FLAG = true; } return os; } istream &operator>>(istream &is, IntArray &obj) { for (int i = 0; i < obj.length; i++) is >> obj[i]; return is; } bool operator==(const IntArray &obj1, const IntArray &obj2) { if (obj1.length != obj2.length) return false; for (int i = 0; i < obj1.length; i++) if (obj1[i] != obj2[i]) return false; return true; } IntArray::IntArray(int l) { list = new int[l]; length = l; } IntArray::~IntArray() { delete[] list; } int &IntArray::operator[](int index) { return *(list + index); } const int &IntArray::operator[](int index) const { return *(list + index); } IntArray IntArray::operator()(int start, int end) { IntArray Z(end - start + 1); for (int i = start; i <= end; ++i) { Z[i - start] = *(this->list + i); } return Z; }","title":"1637 \u7ec4\u5408\u6570"},{"location":"nr/1637/#1637","text":"\u8f6c\u5230\u9898\u76ee","title":"1637 \u7ec4\u5408\u6570"},{"location":"nr/1637/#victrids-solution","text":"#include <iostream> using namespace std; int C(int, int); //get combination number class IntArray { friend ostream &operator<<(ostream &os, const IntArray &obj); friend istream &operator>>(istream &is, IntArray &obj); friend bool operator==(const IntArray &obj1, const IntArray &obj2); private: int length; int *list; public: IntArray(int l); //l\u4e3a\u6570\u7ec4\u957f\u5ea6 ~IntArray(); //\u6790\u6784\u51fd\u6570 int &operator[](int index); //\u53f3\u503c const int &operator[](int index) const; //\u5de6\u503c IntArray operator()(int start, int end); //\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684IntArray\u5bf9\u8c61\uff0c\u5305\u542b\u4ecestart\u4e0b\u6807\u5230end\u4e0b\u6807\u7684\u503c }; ostream &operator<<(ostream &os, const IntArray &obj); istream &operator>>(istream &is, IntArray &obj); bool operator==(const IntArray &obj1, const IntArray &obj2); int main() { int n; cin >> n; // int m; // cin >> m; // cout << C(n, m); IntArray data1(2 * n); cin >> data1; IntArray a(n - 1); IntArray b(n); cin >> a; for (int i = 0; i < n; i++) b[i] = C(data1[2 * i], data1[2 * i + 1]); cout << \"The result is:\" << endl; cout << b << endl; if (a == (b(1, n - 1))) { cout << \"yes!\"; } else { cout << \"no!\"; } return 0; } int C(int n, int m) { //n total m select //calculate combination number using Euler equations. //1.validate if (m > n || m < 0 || n < 0) return 0; //2.defined calculation laws if (n == 0 || m == 0) return 1; //3.boost if (m == 1) return n; if ((2 * m) > n) return C(n, n - m); return (C(n - 1, m - 1) + C(n - 1, m)); } ostream &operator<<(ostream &os, const IntArray &obj) { bool SPACE_FLAG = false; for (int i = 0; i < obj.length; i++) { if (SPACE_FLAG) os << ' '; os << obj[i]; SPACE_FLAG = true; } return os; } istream &operator>>(istream &is, IntArray &obj) { for (int i = 0; i < obj.length; i++) is >> obj[i]; return is; } bool operator==(const IntArray &obj1, const IntArray &obj2) { if (obj1.length != obj2.length) return false; for (int i = 0; i < obj1.length; i++) if (obj1[i] != obj2[i]) return false; return true; } IntArray::IntArray(int l) { list = new int[l]; length = l; } IntArray::~IntArray() { delete[] list; } int &IntArray::operator[](int index) { return *(list + index); } const int &IntArray::operator[](int index) const { return *(list + index); } IntArray IntArray::operator()(int start, int end) { IntArray Z(end - start + 1); for (int i = start; i <= end; ++i) { Z[i - start] = *(this->list + i); } return Z; }","title":"VictriD's solution"},{"location":"nr/1991/","text":"1991 \u4e3a\u4e86\u866b\u7fa4 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e3a\u4e86\u866b\u7fa4 */ #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double INF = 10e7 * 3.0; double x[100005]; int n, k; bool check(double p){ int nowl = 1, cnt = 1; for (int i = 2; i <= n; ++i){ if (x[i] - x[nowl] - 2 * p < 10e-8) continue; else{ ++cnt; nowl = i; if (cnt > k) return false; } } return true; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> x[i]; double ans = INF, lans = INF; double l = 0.0, r = x[n] - x[1], m = (l + r) / 2; while (l - r < 10e-8){ if (check(m)){ lans = ans; ans = m; r = m; if (abs(lans - ans) < 10e-8) break; } else l = m; m = (l + r) / 2; } cout << fixed << setprecision(6) << ans << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double eps = 1e-8; int n, k; double R, lastR; double minR, maxR, midR; double x[100005]; bool AllKill(double tryR) { int lf = 0, count = 1; for (int rh = 1; rh < n; ++rh) { if (rh < n && x[rh] - x[lf] - 2 * tryR < eps) continue; else { ++count; lf = rh; if (count > k) return false; } } return true; } int main() { scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%lf\", &x[i]); lastR = R = maxR; minR = 0, maxR = x[n - 1] - x[0]; midR = (minR + maxR) / 2; while (true) { if (AllKill(midR)) { lastR = R; R = midR; maxR = midR; if (fabs(lastR - R) < eps) break; } else minR = midR; midR = (minR + maxR) / 2; } cout << fixed << setprecision(6) << R; return 0; }","title":"1991 \u4e3a\u4e86\u866b\u7fa4"},{"location":"nr/1991/#1991","text":"\u8f6c\u5230\u9898\u76ee","title":"1991 \u4e3a\u4e86\u866b\u7fa4"},{"location":"nr/1991/#fineartzs-solution","text":"/* \u4e3a\u4e86\u866b\u7fa4 */ #include <iostream> #include <cmath> #include <iomanip> using namespace std; const double INF = 10e7 * 3.0; double x[100005]; int n, k; bool check(double p){ int nowl = 1, cnt = 1; for (int i = 2; i <= n; ++i){ if (x[i] - x[nowl] - 2 * p < 10e-8) continue; else{ ++cnt; nowl = i; if (cnt > k) return false; } } return true; } int main(){ cin >> n >> k; for (int i = 1; i <= n; ++i) cin >> x[i]; double ans = INF, lans = INF; double l = 0.0, r = x[n] - x[1], m = (l + r) / 2; while (l - r < 10e-8){ if (check(m)){ lans = ans; ans = m; r = m; if (abs(lans - ans) < 10e-8) break; } else l = m; m = (l + r) / 2; } cout << fixed << setprecision(6) << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1991/#vvvvv1vs-solution","text":"#include <iostream> #include <cmath> #include <iomanip> using namespace std; const double eps = 1e-8; int n, k; double R, lastR; double minR, maxR, midR; double x[100005]; bool AllKill(double tryR) { int lf = 0, count = 1; for (int rh = 1; rh < n; ++rh) { if (rh < n && x[rh] - x[lf] - 2 * tryR < eps) continue; else { ++count; lf = rh; if (count > k) return false; } } return true; } int main() { scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%lf\", &x[i]); lastR = R = maxR; minR = 0, maxR = x[n - 1] - x[0]; midR = (minR + maxR) / 2; while (true) { if (AllKill(midR)) { lastR = R; R = midR; maxR = midR; if (fabs(lastR - R) < eps) break; } else minR = midR; midR = (minR + maxR) / 2; } cout << fixed << setprecision(6) << R; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/1992/","text":"1992 \u7eee\u793c\u7684\u9634\u8c0b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u7eee\u793c\u7684\u9634\u8c0b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[10005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"1992 \u7eee\u793c\u7684\u9634\u8c0b"},{"location":"nr/1992/#1992","text":"\u8f6c\u5230\u9898\u76ee","title":"1992 \u7eee\u793c\u7684\u9634\u8c0b"},{"location":"nr/1992/#fineartzs-solution","text":"/* \u7eee\u793c\u7684\u9634\u8c0b */ #include <iostream> #include <algorithm> using namespace std; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool cmp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n; cin >> n; Interval a[10005]; for (int i = 0; i < n; ++i) cin >> a[i].l >> a[i].r; sort(a, a + n, cmp); /*for (int i = 0; i < n; ++i) cout << a[i].l << ' ' << a[i].r << endl;*/ long long nowl = a[0].l, nowr = a[0].r; long long ans = 0; for (int i = 1; i < n; ++i){ if (nowl <= a[i].l && a[i].l <= nowr){ if (nowr < a[i].r) nowr = a[i].r; } else{ ans += nowr - nowl; nowl = a[i].l; nowr = a[i].r; } } ans += nowr - nowl; cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/1994/","text":"1994 \u4e8c\u54e5\u7684\u5730\u56fe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e8c\u54e5\u7684\u5730\u56fe */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505]; int n, m; bool check(int x, int y){ if (x < 1 || x > n || y < 1 || y > m || a[x][y] != 0) return false; return true; } void floodfill(int x, int y, int cnt){ a[x][y] = cnt; for (int i = 0; i != 4; ++i){ int nextx = x + dx[i]; int nexty = y + dy[i]; if (check(nextx, nexty)){ floodfill(nextx, nexty, cnt); } } } int main(){ memset(a, 0, sizeof(a)); cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> a[i][j]; int cnt = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == 0){ ++cnt; floodfill(i, j, cnt); } } } cout << cnt << endl; return 0; }","title":"1994 \u4e8c\u54e5\u7684\u5730\u56fe"},{"location":"nr/1994/#1994","text":"\u8f6c\u5230\u9898\u76ee","title":"1994 \u4e8c\u54e5\u7684\u5730\u56fe"},{"location":"nr/1994/#fineartzs-solution","text":"/* \u4e8c\u54e5\u7684\u5730\u56fe */ #include <iostream> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int a[505][505]; int n, m; bool check(int x, int y){ if (x < 1 || x > n || y < 1 || y > m || a[x][y] != 0) return false; return true; } void floodfill(int x, int y, int cnt){ a[x][y] = cnt; for (int i = 0; i != 4; ++i){ int nextx = x + dx[i]; int nexty = y + dy[i]; if (check(nextx, nexty)){ floodfill(nextx, nexty, cnt); } } } int main(){ memset(a, 0, sizeof(a)); cin >> n >> m; for (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) cin >> a[i][j]; int cnt = 0; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ if (a[i][j] == 0){ ++cnt; floodfill(i, j, cnt); } } } cout << cnt << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/2104/","text":"2104 \u5927\u8138\u4e0a\u8bfe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5927\u8138\u4e0a\u8bfe */ #include <iostream> #include <queue> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; const int D = 502; bool v[1005][1005]; int lBound = 0, rBound = 1005, uBound = 1005, dBound = 0; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy), step(0) {} int x = 0, y = 0, step = 0; }; bool check(const Point &p){ if (p.x < lBound || p.x > rBound || p.y < lBound || p.y > uBound || v[p.x][p.y]) return false; else return true; } int main(){ memset(v, 0, sizeof(v)); v[D][D] = true; int x, y, n; cin >> x >> y >> n; x += D; y += D; /*lBound = min(lBound, x - 1); rBound = max(rBound, x + 1); uBound = max(uBound, y + 1); dBound = min(dBound, y - 1);*/ for (int i = 1; i <= n; ++i){ int a, b; cin >> a >> b; a += D; b += D; v[a][b] = true; /*lBound = min(lBound, a - 1); rBound = max(rBound, a + 1); uBound = max(uBound, b + 1); dBound = min(dBound, b - 1);*/ } queue<Point> q; Point s(D, D); q.push(s); while (!q.empty()){ Point now = q.front(), next; q.pop(); if (now.x == x && now.y == y){ cout << now.step << endl; return 0; } for (int i = 0; i != 4; ++i){ next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.step = now.step + 1; if (check(next)){ q.push(next); v[next.x][next.y] = true; } } } return 0; }","title":"2104 \u5927\u8138\u4e0a\u8bfe"},{"location":"nr/2104/#2104","text":"\u8f6c\u5230\u9898\u76ee","title":"2104 \u5927\u8138\u4e0a\u8bfe"},{"location":"nr/2104/#fineartzs-solution","text":"/* \u5927\u8138\u4e0a\u8bfe */ #include <iostream> #include <queue> #include <cstring> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; const int D = 502; bool v[1005][1005]; int lBound = 0, rBound = 1005, uBound = 1005, dBound = 0; class Point{ public: Point() = default; Point(int xx, int yy) : x(xx), y(yy), step(0) {} int x = 0, y = 0, step = 0; }; bool check(const Point &p){ if (p.x < lBound || p.x > rBound || p.y < lBound || p.y > uBound || v[p.x][p.y]) return false; else return true; } int main(){ memset(v, 0, sizeof(v)); v[D][D] = true; int x, y, n; cin >> x >> y >> n; x += D; y += D; /*lBound = min(lBound, x - 1); rBound = max(rBound, x + 1); uBound = max(uBound, y + 1); dBound = min(dBound, y - 1);*/ for (int i = 1; i <= n; ++i){ int a, b; cin >> a >> b; a += D; b += D; v[a][b] = true; /*lBound = min(lBound, a - 1); rBound = max(rBound, a + 1); uBound = max(uBound, b + 1); dBound = min(dBound, b - 1);*/ } queue<Point> q; Point s(D, D); q.push(s); while (!q.empty()){ Point now = q.front(), next; q.pop(); if (now.x == x && now.y == y){ cout << now.step << endl; return 0; } for (int i = 0; i != 4; ++i){ next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.step = now.step + 1; if (check(next)){ q.push(next); v[next.x][next.y] = true; } } } return 0; }","title":"FineArtz's solution"},{"location":"nr/2108/","text":"2108 \u914d\u5bf9 I \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int n,heap[500000],p[500000],len,a[300000],b[300000],q[500000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d\\n\",pop()); return 0; }","title":"2108 \u914d\u5bf9 I"},{"location":"nr/2108/#2108-i","text":"\u8f6c\u5230\u9898\u76ee","title":"2108 \u914d\u5bf9 I"},{"location":"nr/2108/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[500000],p[500000],len,a[300000],b[300000],q[500000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d\\n\",pop()); return 0; }","title":"WashWang's solution"},{"location":"nr/2109/","text":"2109 \u4e8c\u6b21\u65b9\u7a0b \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <stdio.h> using namespace std; int bp(int N, int* spis, int poisk) { int min = 0, max = N - 1, mid; if (poisk >= spis[max]) return N; if (poisk < spis[min]) return 0; while (min <= max) { mid = (min + max) / 2; if (poisk == spis[mid]) return mid + 1; else if (poisk < spis[mid]) max = mid - 1; else min = mid + 1; } return 0; } int main() { //* scanf and printf to reduce time int N, k, b, c; cin >> N; int* spis = new int[N]; for (int i = 0; i < N; i++) scanf(\"%d\", spis + i); scanf(\"%d\", &k); int* otv = new int[k]; for (int i = 0; i < k; i++) { scanf(\"%d %d\", &b, &c); otv[i] = bp(N, spis, (b * b / c / 4)); } for (int i = 0; i < k; i++) { if (i) printf(\"\\n\"); printf(\"%d\", otv[i]); } return 0; } FineArtz's solution /* \u4e8c\u6b21\u65b9\u7a0b */ #include <iostream> #include <cmath> using namespace std; int a[100005] = {0}; int search(int low, int high, double dt){ int l = low, h = high, m = (l + h) / 2; while (h > l){ m = (l + h) / 2; if (abs(a[m] - dt) < 10e-6) return m + 1; if (a[m] < dt) l = m + 1; else h = m - 1; } return l; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, k; cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> k; for (int i = 1; i <= k; ++i){ int b, c, cnt = 0; cin >> b >> c; if (c == 0) cnt = n; else{ double dt = b * b * 1.0 / 4 / c; if (a[1] > dt) cnt = 0; else cnt = search(1, n, dt); } cout << cnt << endl; } return 0; } vvvvv1v's solution #include <iostream> #include <cmath> #include <cstdio> using namespace std; int search(double *arr, int N, double target) { int low = 0, high = N - 1, mid = (low + high) / 2; while (high > low) { if (arr[mid] > target) high = mid; else low = mid + 1; mid = (low + high) / 2; } return mid; } int main() { int N; cin >> N; double arr[100005]; for (int i = 0; i < N; ++i) scanf(\"%lf\", &arr[i]); int k; cin >> k; double b, c; for (int i = 0; i < k; ++i) { scanf(\"%lf%lf\", &b, &c); double target = b * b / (4.0 * c); if (target > arr[N - 1]) printf(\"%d\\n\", N); else printf(\"%d\\n\", search(arr, N, target)); } return 0; }","title":"2109 \u4e8c\u6b21\u65b9\u7a0b"},{"location":"nr/2109/#2109","text":"\u8f6c\u5230\u9898\u76ee","title":"2109 \u4e8c\u6b21\u65b9\u7a0b"},{"location":"nr/2109/#victrids-solution","text":"#include <iostream> #include <stdio.h> using namespace std; int bp(int N, int* spis, int poisk) { int min = 0, max = N - 1, mid; if (poisk >= spis[max]) return N; if (poisk < spis[min]) return 0; while (min <= max) { mid = (min + max) / 2; if (poisk == spis[mid]) return mid + 1; else if (poisk < spis[mid]) max = mid - 1; else min = mid + 1; } return 0; } int main() { //* scanf and printf to reduce time int N, k, b, c; cin >> N; int* spis = new int[N]; for (int i = 0; i < N; i++) scanf(\"%d\", spis + i); scanf(\"%d\", &k); int* otv = new int[k]; for (int i = 0; i < k; i++) { scanf(\"%d %d\", &b, &c); otv[i] = bp(N, spis, (b * b / c / 4)); } for (int i = 0; i < k; i++) { if (i) printf(\"\\n\"); printf(\"%d\", otv[i]); } return 0; }","title":"VictriD's solution"},{"location":"nr/2109/#fineartzs-solution","text":"/* \u4e8c\u6b21\u65b9\u7a0b */ #include <iostream> #include <cmath> using namespace std; int a[100005] = {0}; int search(int low, int high, double dt){ int l = low, h = high, m = (l + h) / 2; while (h > l){ m = (l + h) / 2; if (abs(a[m] - dt) < 10e-6) return m + 1; if (a[m] < dt) l = m + 1; else h = m - 1; } return l; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, k; cin >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; cin >> k; for (int i = 1; i <= k; ++i){ int b, c, cnt = 0; cin >> b >> c; if (c == 0) cnt = n; else{ double dt = b * b * 1.0 / 4 / c; if (a[1] > dt) cnt = 0; else cnt = search(1, n, dt); } cout << cnt << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/2109/#vvvvv1vs-solution","text":"#include <iostream> #include <cmath> #include <cstdio> using namespace std; int search(double *arr, int N, double target) { int low = 0, high = N - 1, mid = (low + high) / 2; while (high > low) { if (arr[mid] > target) high = mid; else low = mid + 1; mid = (low + high) / 2; } return mid; } int main() { int N; cin >> N; double arr[100005]; for (int i = 0; i < N; ++i) scanf(\"%lf\", &arr[i]); int k; cin >> k; double b, c; for (int i = 0; i < k; ++i) { scanf(\"%lf%lf\", &b, &c); double target = b * b / (4.0 * c); if (target > arr[N - 1]) printf(\"%d\\n\", N); else printf(\"%d\\n\", search(arr, N, target)); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/2202/","text":"2202 \u6885\u897f\u7684\u8fc7\u4eba \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <stack> #include <unordered_map> using namespace std; inline bool valid_messi(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1); } inline bool valid_door(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1 || mat[n1][m1] == 3); } bool check() { int n, m; cin >> n >> m; int** inputmat = new int*[n]; for (int i = 0; i < n; i++) { inputmat[i] = new int[m](); for (int j = 0; j < m; j++) cin >> inputmat[i][j]; } stack<int> lll; stack<int> rrr; lll.push(0); rrr.push(0); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (n0 == n - 1 && m0 == m - 1) return true; if (inputmat[n0][m0] == 0) { if (valid_messi(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_messi(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_messi(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_messi(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 2; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 3; } } lll.push(n - 1); rrr.push(m - 1); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (inputmat[n0][m0] == 3) return true; if (inputmat[n0][m0] == 0) { if (valid_door(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_door(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_door(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_door(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 4; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 5; } } return false; } int main() { int totalis; int* ii = new int[totalis]; cin >> totalis; for (int i = 0; i < totalis; i++) { ii[i] = check(); } for (int i = 0; i < totalis; i++) { if (i) cout << endl; cout << to_string(ii[i]); } return 0; }","title":"2202 \u6885\u897f\u7684\u8fc7\u4eba"},{"location":"nr/2202/#2202","text":"\u8f6c\u5230\u9898\u76ee","title":"2202 \u6885\u897f\u7684\u8fc7\u4eba"},{"location":"nr/2202/#victrids-solution","text":"#include <iostream> #include <stack> #include <unordered_map> using namespace std; inline bool valid_messi(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1); } inline bool valid_door(int** mat, int n1, int m1, int n, int m) { return n1 < n && n1 >= 0 && m1 < m && m1 >= 0 && (mat[n1][m1] == 0 || mat[n1][m1] == 1 || mat[n1][m1] == 3); } bool check() { int n, m; cin >> n >> m; int** inputmat = new int*[n]; for (int i = 0; i < n; i++) { inputmat[i] = new int[m](); for (int j = 0; j < m; j++) cin >> inputmat[i][j]; } stack<int> lll; stack<int> rrr; lll.push(0); rrr.push(0); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (n0 == n - 1 && m0 == m - 1) return true; if (inputmat[n0][m0] == 0) { if (valid_messi(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_messi(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_messi(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_messi(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 2; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 3; } } lll.push(n - 1); rrr.push(m - 1); while (!lll.empty()) { int n0 = lll.top(); int m0 = rrr.top(); lll.pop(); rrr.pop(); if (inputmat[n0][m0] == 3) return true; if (inputmat[n0][m0] == 0) { if (valid_door(inputmat, n0 + 1, m0, n, m)) { lll.push(n0 + 1); rrr.push(m0); } if (valid_door(inputmat, n0, m0 + 1, n, m)) { lll.push(n0); rrr.push(m0 + 1); } if (valid_door(inputmat, n0, m0 - 1, n, m)) { lll.push(n0); rrr.push(m0 - 1); } if (valid_door(inputmat, n0 - 1, m0, n, m)) { lll.push(n0 - 1); rrr.push(m0); } inputmat[n0][m0] = 4; } if (inputmat[n0][m0] == 1) { inputmat[n0][m0] = 5; } } return false; } int main() { int totalis; int* ii = new int[totalis]; cin >> totalis; for (int i = 0; i < totalis; i++) { ii[i] = check(); } for (int i = 0; i < totalis; i++) { if (i) cout << endl; cout << to_string(ii[i]); } return 0; }","title":"VictriD's solution"},{"location":"nr/3016/","text":"3016 \u5747\u5206\u7eb8\u724c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5747\u5206\u7eb8\u724c */ #include <iostream> using namespace std; int main(){ int n; int a[105] = {0}; cin >> n; int ave = 0; for (int i = 0; i < n; ++i){ cin >> a[i]; ave += a[i]; } ave /= n; int ans = 0; for (int i = 0; i < n - 1; ++i){ if (a[i] < ave){ ++ans; a[i + 1] -= ave - a[i]; a[i] = ave; } else if (a[i] > ave){ ++ans; a[i + 1] += a[i] - ave; a[i] = ave; } } cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; const int MAXNUM = 200; int main() { int n, arr[MAXNUM], sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; sum += arr[i]; } int ave = sum / n, count = 0; for (int i = 0; i < n; ++i) arr[i] -= ave; sum = 0; for (int i = 0; i < n; ++i) { sum += arr[i]; if (sum == 0) ++count; } cout << n - count << endl; return 0; }","title":"3016 \u5747\u5206\u7eb8\u724c"},{"location":"nr/3016/#3016","text":"\u8f6c\u5230\u9898\u76ee","title":"3016 \u5747\u5206\u7eb8\u724c"},{"location":"nr/3016/#fineartzs-solution","text":"/* \u5747\u5206\u7eb8\u724c */ #include <iostream> using namespace std; int main(){ int n; int a[105] = {0}; cin >> n; int ave = 0; for (int i = 0; i < n; ++i){ cin >> a[i]; ave += a[i]; } ave /= n; int ans = 0; for (int i = 0; i < n - 1; ++i){ if (a[i] < ave){ ++ans; a[i + 1] -= ave - a[i]; a[i] = ave; } else if (a[i] > ave){ ++ans; a[i + 1] += a[i] - ave; a[i] = ave; } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/3016/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; const int MAXNUM = 200; int main() { int n, arr[MAXNUM], sum = 0; cin >> n; for (int i = 0; i < n; ++i) { cin >> arr[i]; sum += arr[i]; } int ave = sum / n, count = 0; for (int i = 0; i < n; ++i) arr[i] -= ave; sum = 0; for (int i = 0; i < n; ++i) { sum += arr[i]; if (sum == 0) ++count; } cout << n - count << endl; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/3020/","text":"3020 \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 */ #include <iostream> using namespace std; template <class T> class Heap{ private: T a[200005]; int heapsize = 0; void swap(int x, int y){ T t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i + 1] < a[i]) ++i; if (a[i] < a[i >> 1]){ swap(i, i >> 1); i <<= 1; } else break; } } public: void push(T x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } T top(){ return a[1]; } bool empty(){ return heapsize == 0; } int size(){ return heapsize; } }; int n, m; Heap<long long> heap; long long ans = 0; int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ long long t; cin >> t; heap.push(t); } long long t = n; while (t > m){ t -= m; ++t; } if (t != 0) for (int i = t; i < m; ++i) heap.push(0); while (heap.size() != 1){ long long k = 0; for (int i = 1; i <= m; ++i){ k += heap.top(); heap.pop(); } ans += k; heap.push(k); } cout << ans << endl; return 0; }","title":"3020 \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811"},{"location":"nr/3020/#3020","text":"\u8f6c\u5230\u9898\u76ee","title":"3020 \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811"},{"location":"nr/3020/#fineartzs-solution","text":"/* \u9a86\u6e90\u7684\u54c8\u592b\u66fc\u6811 */ #include <iostream> using namespace std; template <class T> class Heap{ private: T a[200005]; int heapsize = 0; void swap(int x, int y){ T t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i + 1] < a[i]) ++i; if (a[i] < a[i >> 1]){ swap(i, i >> 1); i <<= 1; } else break; } } public: void push(T x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } T top(){ return a[1]; } bool empty(){ return heapsize == 0; } int size(){ return heapsize; } }; int n, m; Heap<long long> heap; long long ans = 0; int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ long long t; cin >> t; heap.push(t); } long long t = n; while (t > m){ t -= m; ++t; } if (t != 0) for (int i = t; i < m; ++i) heap.push(0); while (heap.size() != 1){ long long k = 0; for (int i = 1; i <= m; ++i){ k += heap.top(); heap.pop(); } ans += k; heap.push(k); } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/3030/","text":"3030 mushroom \u8f6c\u5230\u9898\u76ee FineArtz's solution /* mushroom */ #include <iostream> using namespace std; int main(){ int f[1005] = {0}; int T, M; cin >> T >> M; int t[105], w[105]; for (int i = 1; i <= M; ++i) cin >> t[i] >> w[i]; for (int i = 1; i <= M; ++i){ for (int j = T; j >= t[i]; --j) f[j] = max(f[j], f[j - t[i]] + w[i]); } cout << f[T] << endl; return 0; }","title":"3030 mushroom"},{"location":"nr/3030/#3030-mushroom","text":"\u8f6c\u5230\u9898\u76ee","title":"3030 mushroom"},{"location":"nr/3030/#fineartzs-solution","text":"/* mushroom */ #include <iostream> using namespace std; int main(){ int f[1005] = {0}; int T, M; cin >> T >> M; int t[105], w[105]; for (int i = 1; i <= M; ++i) cin >> t[i] >> w[i]; for (int i = 1; i <= M; ++i){ for (int j = T; j >= t[i]; --j) f[j] = max(f[j], f[j - t[i]] + w[i]); } cout << f[T] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/3031/","text":"3031 \u9732\u5b50\u7684\u91ce\u9910 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int m,n,w[101],dp[101][100001],ans[101],ansn; int main() { cin>>m>>n; for (int i=1;i<=n;++i) { cin>>w[i]; m-=w[i]; } m=-m; dp[0][0]=1; for (int i=1;i<=n;++i) for (int j = m; j >= 0; --j) { dp[i][j] = dp[i - 1][j]; if (j>=w[i]) dp[i][j]+=dp[i - 1][j - w[i]]; } if (dp[n][m]==0) cout<<0<<endl; else if (dp[n][m]>1) cout<<-1<<endl; else{ ansn=0; for (int i=n;i>=1;--i) if (m>=w[i]&&dp[i - 1][m - w[i]]) { ans[ansn++] = i; m-=w[i]; } for (int i=ansn-1;i>=0;--i) cout<<ans[i]<<' '; } return 0; }","title":"3031 \u9732\u5b50\u7684\u91ce\u9910"},{"location":"nr/3031/#3031","text":"\u8f6c\u5230\u9898\u76ee","title":"3031 \u9732\u5b50\u7684\u91ce\u9910"},{"location":"nr/3031/#washwangs-solution","text":"#include <iostream> using namespace std; int m,n,w[101],dp[101][100001],ans[101],ansn; int main() { cin>>m>>n; for (int i=1;i<=n;++i) { cin>>w[i]; m-=w[i]; } m=-m; dp[0][0]=1; for (int i=1;i<=n;++i) for (int j = m; j >= 0; --j) { dp[i][j] = dp[i - 1][j]; if (j>=w[i]) dp[i][j]+=dp[i - 1][j - w[i]]; } if (dp[n][m]==0) cout<<0<<endl; else if (dp[n][m]>1) cout<<-1<<endl; else{ ansn=0; for (int i=n;i>=1;--i) if (m>=w[i]&&dp[i - 1][m - w[i]]) { ans[ansn++] = i; m-=w[i]; } for (int i=ansn-1;i>=0;--i) cout<<ans[i]<<' '; } return 0; }","title":"WashWang's solution"},{"location":"nr/3034/","text":"3034 Gap \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Gap */ #include <iostream> #include <cmath> using namespace std; bool isp(const int &x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int LowerBound = n, UpperBound = n; while (!isp(LowerBound)) --LowerBound; while (!isp(UpperBound)) ++UpperBound; cout << UpperBound - LowerBound << endl; return 0; } vvvvv1v's solution #include <iostream> #include <cmath> using namespace std; bool isPrimeNum(int n) { bool flag = true; for (int i = 2; i <= int(sqrt(n)); ++i) { if (!(n % i)) { flag = false; break; } } return flag; } int main() { int N, minN, maxN; cin >> N; for (int i = N; i >= 2; --i) { if (isPrimeNum(i)) { minN = i; break; } } for (int i = N; ; ++i) { if (isPrimeNum(i)) { maxN = i; break; } } cout << maxN - minN; return 0; }","title":"3034 Gap"},{"location":"nr/3034/#3034-gap","text":"\u8f6c\u5230\u9898\u76ee","title":"3034 Gap"},{"location":"nr/3034/#fineartzs-solution","text":"/* Gap */ #include <iostream> #include <cmath> using namespace std; bool isp(const int &x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } int main(){ int n; cin >> n; int LowerBound = n, UpperBound = n; while (!isp(LowerBound)) --LowerBound; while (!isp(UpperBound)) ++UpperBound; cout << UpperBound - LowerBound << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/3034/#vvvvv1vs-solution","text":"#include <iostream> #include <cmath> using namespace std; bool isPrimeNum(int n) { bool flag = true; for (int i = 2; i <= int(sqrt(n)); ++i) { if (!(n % i)) { flag = false; break; } } return flag; } int main() { int N, minN, maxN; cin >> N; for (int i = N; i >= 2; --i) { if (isPrimeNum(i)) { minN = i; break; } } for (int i = N; ; ++i) { if (isPrimeNum(i)) { maxN = i; break; } } cout << maxN - minN; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/3044/","text":"3044 palin \u8f6c\u5230\u9898\u76ee FineArtz's solution /* palin */ #include <iostream> using namespace std; const long long MOD = 1000000007; long long f[1005] = {0}; int main(){ int n; cin >> n; f[1] = 1; for (int i = 2; i <= n; ++i){ if (i % 2 == 0){ f[i] = (1 + f[i / 2]) % MOD; for (int j = 2; j < i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } else{ f[i] = 1; for (int j = 1; j <= i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } } cout << f[n] << endl; return 0; }","title":"3044 palin"},{"location":"nr/3044/#3044-palin","text":"\u8f6c\u5230\u9898\u76ee","title":"3044 palin"},{"location":"nr/3044/#fineartzs-solution","text":"/* palin */ #include <iostream> using namespace std; const long long MOD = 1000000007; long long f[1005] = {0}; int main(){ int n; cin >> n; f[1] = 1; for (int i = 2; i <= n; ++i){ if (i % 2 == 0){ f[i] = (1 + f[i / 2]) % MOD; for (int j = 2; j < i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } else{ f[i] = 1; for (int j = 1; j <= i; j += 2){ f[i] = (f[i] + f[(i - j) / 2]) % MOD; } } } cout << f[n] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/3045/","text":"3045 \u5927\u9c7c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5927\u9c7c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Fish{ public: //constructor Fish() : x(0), y(0), r(0) {}; Fish(const Fish& f) : x(f.x), y(f.y), r(f.r) {}; Fish(const int &xx, const int &yy, const int &rr) : x(xx), y(yy), r(rr) {}; int x, y, r; }; inline bool cmp(const Fish &f1, const Fish &f2){ if (f1.y < f2.y) return true; if (f1.y == f2.y && f1.x < f2.x) return true; return false; } int unsafe[1005] = {0}; int ans = 0; Fish fish[5005]; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool comp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n, m, k; cin >> n >> m >> k; for (int i = 0; i < k; ++i){ cin >> fish[i].x >> fish[i].y >> fish[i].r; } sort(fish, fish + k, cmp); for (int i = 1; i <= n; ++i){ Interval f[5005]; int cnt = 0; for (int j = 0; j < k; ++j){ if (abs(fish[j].x - i) > fish[j].r) continue; int dy = trunc(sqrt(fish[j].r * fish[j].r - (i - fish[j].x) * (i - fish[j].x))); f[cnt].l = max(1, fish[j].y - dy); f[cnt].r = min(m, fish[j].y + dy); ++cnt; } if (cnt == 0) continue; sort(f, f + cnt, comp); int nowl = f[0].l, nowr = f[0].r; for (int j = 1; j < cnt; ++j){ if (nowl <= f[j].l && f[j].l <= nowr){ if (nowr < f[j].r) nowr = f[j].r; } else{ ans += nowr - nowl + 1; nowl = f[j].l; nowr = f[j].r; } } ans += nowr - nowl + 1; } cout << ans << endl; return 0; }","title":"3045 \u5927\u9c7c"},{"location":"nr/3045/#3045","text":"\u8f6c\u5230\u9898\u76ee","title":"3045 \u5927\u9c7c"},{"location":"nr/3045/#fineartzs-solution","text":"/* \u5927\u9c7c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Fish{ public: //constructor Fish() : x(0), y(0), r(0) {}; Fish(const Fish& f) : x(f.x), y(f.y), r(f.r) {}; Fish(const int &xx, const int &yy, const int &rr) : x(xx), y(yy), r(rr) {}; int x, y, r; }; inline bool cmp(const Fish &f1, const Fish &f2){ if (f1.y < f2.y) return true; if (f1.y == f2.y && f1.x < f2.x) return true; return false; } int unsafe[1005] = {0}; int ans = 0; Fish fish[5005]; class Interval{ public: //constructor Interval() : l(0), r(0) {} Interval(int x, int y) : l(x), r(y) {} Interval(const Interval &i) : l(i.l), r(i.r) {} int l, r; }; inline bool comp(Interval i1, Interval i2){ return (i1.l < i2.l || i1.l == i2.l && i1.r > i2.r); } int main(){ int n, m, k; cin >> n >> m >> k; for (int i = 0; i < k; ++i){ cin >> fish[i].x >> fish[i].y >> fish[i].r; } sort(fish, fish + k, cmp); for (int i = 1; i <= n; ++i){ Interval f[5005]; int cnt = 0; for (int j = 0; j < k; ++j){ if (abs(fish[j].x - i) > fish[j].r) continue; int dy = trunc(sqrt(fish[j].r * fish[j].r - (i - fish[j].x) * (i - fish[j].x))); f[cnt].l = max(1, fish[j].y - dy); f[cnt].r = min(m, fish[j].y + dy); ++cnt; } if (cnt == 0) continue; sort(f, f + cnt, comp); int nowl = f[0].l, nowr = f[0].r; for (int j = 1; j < cnt; ++j){ if (nowl <= f[j].l && f[j].l <= nowr){ if (nowr < f[j].r) nowr = f[j].r; } else{ ans += nowr - nowl + 1; nowl = f[j].l; nowr = f[j].r; } } ans += nowr - nowl + 1; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4003/","text":"4003 GetMinBottle \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int n,k,one,e,t,m,ans; int main() { cin>>n>>k; m=n; if (n<k) {cout<<k-n; return 0;} for (;m>0;m>>=1) if (m&1) one++; if (k>=one) {cout<<0; return 0;} for (e=1;t<=one-k;n>>=1,e<<=1){ if (n&1) t+=1; else ans+=e; } cout<<ans+1; return 0; }","title":"4003 GetMinBottle"},{"location":"nr/4003/#4003-getminbottle","text":"\u8f6c\u5230\u9898\u76ee","title":"4003 GetMinBottle"},{"location":"nr/4003/#washwangs-solution","text":"#include <iostream> using namespace std; int n,k,one,e,t,m,ans; int main() { cin>>n>>k; m=n; if (n<k) {cout<<k-n; return 0;} for (;m>0;m>>=1) if (m&1) one++; if (k>=one) {cout<<0; return 0;} for (e=1;t<=one-k;n>>=1,e<<=1){ if (n&1) t+=1; else ans+=e; } cout<<ans+1; return 0; }","title":"WashWang's solution"},{"location":"nr/4009/","text":"4009 \u6b65\u6b65\u4e3a\u8d62 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <cstring> using namespace std; inline int div(int length, int index, int division) { return (index * (length / division) % (length - 1) + (length - 1)*(index == length - 1)); } int main() { char cp[100]; char ck[100]; cin.getline(ck, 100); cin.getline(cp, 100); short int size = strlen(cp); if (cp[0] != ck[0] || size != strlen(ck)) { cout << \"No Solution\"; return 0; } for (int i = size / 2; i >= 1; i--) { if (cp[i] == ck[1] && !(size % i)) { for (int j = 2; j < size; j++) { if (cp[div(size, j, size / i)] != ck[j]) goto z; } cout << size / i; return 0; } z:; } cout << \"No Solution\"; return 0; } FineArtz's solution /* \u6b65\u6b65\u4e3a\u8d62 */ #include <iostream> #include <string> #include <cmath> using namespace std; bool devide(const string &s, const string &t, const int &x){ string tmp = \"\"; int len = s.size(); for (int j = 0; j < x; ++j){ for (int i = 0; i < len / x; ++i){ tmp += s[i * x + j]; } } if (tmp == t) return true; else return false; } int main(){ string s, t; cin >> s >> t; int len = s.size(); for (int i = 2; i <= len; ++i){ if (len % i == 0){ bool flag = devide(s, t, i); if (flag){ cout << i << endl; return 0; } } } cout << \"No Solution\" << endl; return 0; }","title":"4009 \u6b65\u6b65\u4e3a\u8d62"},{"location":"nr/4009/#4009","text":"\u8f6c\u5230\u9898\u76ee","title":"4009 \u6b65\u6b65\u4e3a\u8d62"},{"location":"nr/4009/#victrids-solution","text":"#include <iostream> #include <cstring> using namespace std; inline int div(int length, int index, int division) { return (index * (length / division) % (length - 1) + (length - 1)*(index == length - 1)); } int main() { char cp[100]; char ck[100]; cin.getline(ck, 100); cin.getline(cp, 100); short int size = strlen(cp); if (cp[0] != ck[0] || size != strlen(ck)) { cout << \"No Solution\"; return 0; } for (int i = size / 2; i >= 1; i--) { if (cp[i] == ck[1] && !(size % i)) { for (int j = 2; j < size; j++) { if (cp[div(size, j, size / i)] != ck[j]) goto z; } cout << size / i; return 0; } z:; } cout << \"No Solution\"; return 0; }","title":"VictriD's solution"},{"location":"nr/4009/#fineartzs-solution","text":"/* \u6b65\u6b65\u4e3a\u8d62 */ #include <iostream> #include <string> #include <cmath> using namespace std; bool devide(const string &s, const string &t, const int &x){ string tmp = \"\"; int len = s.size(); for (int j = 0; j < x; ++j){ for (int i = 0; i < len / x; ++i){ tmp += s[i * x + j]; } } if (tmp == t) return true; else return false; } int main(){ string s, t; cin >> s >> t; int len = s.size(); for (int i = 2; i <= len; ++i){ if (len % i == 0){ bool flag = devide(s, t, i); if (flag){ cout << i << endl; return 0; } } } cout << \"No Solution\" << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4011/","text":"4011 k\u6811 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Same as 4152 class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; longint x[51][51]; int h,k; int main() { cin>>k>>h; for (int i=0;i<=k-1;++i) x[1][i]=k-i; for (int i=2;i<=h-1;++i){ for (int j=0;j<=k-1;++j) for (int l=0;l<k-j;++l) x[i][j]=x[i][j]+x[i-1][l]; } cout<<x[h-1][0]; }","title":"4011 k\u6811"},{"location":"nr/4011/#4011-k","text":"\u8f6c\u5230\u9898\u76ee","title":"4011 k\u6811"},{"location":"nr/4011/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Same as 4152 class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; longint x[51][51]; int h,k; int main() { cin>>k>>h; for (int i=0;i<=k-1;++i) x[1][i]=k-i; for (int i=2;i<=h-1;++i){ for (int j=0;j<=k-1;++j) for (int l=0;l<k-j;++l) x[i][j]=x[i][j]+x[i-1][l]; } cout<<x[h-1][0]; }","title":"WashWang's solution"},{"location":"nr/4012/","text":"4012 \u5408\u5e76\u679c\u5b50 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"4012 \u5408\u5e76\u679c\u5b50"},{"location":"nr/4012/#4012","text":"\u8f6c\u5230\u9898\u76ee","title":"4012 \u5408\u5e76\u679c\u5b50"},{"location":"nr/4012/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"WashWang's solution"},{"location":"nr/4016/","text":"4016 24\u70b9\u6e38\u620f \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> //! Ugly using namespace std; int maxnum = -1000; int inline maxi(int a, int b) { return a > b ? a : b; } int inline mini(int a) { return a <= 24 ? a : -1000; } int polirovat(int a, int b, int calctype) { switch (calctype) { case 0: return a + b; case 1: return a - b; case 2: return a * b; case 3: return a / b; case 4: return b - a; case 5: return b / a; } return 0; } int summation(int c1) { maxnum = maxi(mini(c1), maxnum); return maxnum; } int maxa(int c1, int c2) { for (int i = 0; i < 6; i++) if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(polirovat(c1, c2, i)); return maxnum; } int maxa(int c1, int c2, int c3) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1)); } return maxnum; } int maxa(int c1, int c2, int c3, int c4) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1, c4)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c1 % c4))) || (c1 != 0 && i == 5 && (!(c4 % c1)))) summation(maxa(polirovat(c1, c4, i), c3, c2)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) summation(maxa(polirovat(c2, c4, i), c1, c3)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c3 % c4))) || (c3 != 0 && i == 5 && (!(c4 % c3)))) summation(maxa(polirovat(c3, c4, i), c1, c2)); for (int j = 0; j < 6; j++) { if (((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c3 % c4))) || (c3 != 0 && j == 5 && (!(c4 % c3))))) summation(maxa(polirovat(c1, c2, i), polirovat(c3, c4, j))); if (((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c1 % c4))) || (c1 != 0 && j == 5 && (!(c4 % c1))))) summation(maxa(polirovat(c2, c3, i), polirovat(c1, c4, j))); if (((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) && ((j != 3 && j != 5) || (c3 != 0 && j == 3 && (!(c1 % c3))) || (c1 != 0 && j == 5 && (!(c3 % c1))))) summation(maxa(polirovat(c2, c4, i), polirovat(c1, c3, j))); } } return maxnum; } int main() { int N, c1, c2, c3, c4; cin >> N; int* s = new int[N]; for (int i = 0; i < N; i++) { cin >> c1 >> c2 >> c3 >> c4; s[i] = maxa(c1, c2, c3, c4); maxnum = -1000; } for (int i = 0; i < N; i++) { if (i) cout << endl; cout << s[i]; } // int z = 0; // for (int c1 = 1; c1 < 14; c1++) // for (int c2 = c1; c2 < 14; c2++) // for (int c3 = c2; c3 < 14; c3++) { // for (int c4 = c3; c4 < 14; c4++) { // z += !(maxa(c1, c2, c3, c4) == 24); // maxnum = -1000; // } // } // cout << z; }","title":"4016 24\u70b9\u6e38\u620f"},{"location":"nr/4016/#4016-24","text":"\u8f6c\u5230\u9898\u76ee","title":"4016 24\u70b9\u6e38\u620f"},{"location":"nr/4016/#victrids-solution","text":"#include <iostream> //! Ugly using namespace std; int maxnum = -1000; int inline maxi(int a, int b) { return a > b ? a : b; } int inline mini(int a) { return a <= 24 ? a : -1000; } int polirovat(int a, int b, int calctype) { switch (calctype) { case 0: return a + b; case 1: return a - b; case 2: return a * b; case 3: return a / b; case 4: return b - a; case 5: return b / a; } return 0; } int summation(int c1) { maxnum = maxi(mini(c1), maxnum); return maxnum; } int maxa(int c1, int c2) { for (int i = 0; i < 6; i++) if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(polirovat(c1, c2, i)); return maxnum; } int maxa(int c1, int c2, int c3) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1)); } return maxnum; } int maxa(int c1, int c2, int c3, int c4) { for (int i = 0; i < 6; i++) { if ((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) summation(maxa(polirovat(c1, c2, i), c3, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c1 % c3))) || (c1 != 0 && i == 5 && (!(c3 % c1)))) summation(maxa(polirovat(c1, c3, i), c2, c4)); if ((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) summation(maxa(polirovat(c2, c3, i), c1, c4)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c1 % c4))) || (c1 != 0 && i == 5 && (!(c4 % c1)))) summation(maxa(polirovat(c1, c4, i), c3, c2)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) summation(maxa(polirovat(c2, c4, i), c1, c3)); if ((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c3 % c4))) || (c3 != 0 && i == 5 && (!(c4 % c3)))) summation(maxa(polirovat(c3, c4, i), c1, c2)); for (int j = 0; j < 6; j++) { if (((i != 3 && i != 5) || (c2 != 0 && i == 3 && (!(c1 % c2))) || (c1 != 0 && i == 5 && (!(c2 % c1)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c3 % c4))) || (c3 != 0 && j == 5 && (!(c4 % c3))))) summation(maxa(polirovat(c1, c2, i), polirovat(c3, c4, j))); if (((i != 3 && i != 5) || (c3 != 0 && i == 3 && (!(c2 % c3))) || (c2 != 0 && i == 5 && (!(c3 % c2)))) && ((j != 3 && j != 5) || (c4 != 0 && j == 3 && (!(c1 % c4))) || (c1 != 0 && j == 5 && (!(c4 % c1))))) summation(maxa(polirovat(c2, c3, i), polirovat(c1, c4, j))); if (((i != 3 && i != 5) || (c4 != 0 && i == 3 && (!(c2 % c4))) || (c2 != 0 && i == 5 && (!(c4 % c2)))) && ((j != 3 && j != 5) || (c3 != 0 && j == 3 && (!(c1 % c3))) || (c1 != 0 && j == 5 && (!(c3 % c1))))) summation(maxa(polirovat(c2, c4, i), polirovat(c1, c3, j))); } } return maxnum; } int main() { int N, c1, c2, c3, c4; cin >> N; int* s = new int[N]; for (int i = 0; i < N; i++) { cin >> c1 >> c2 >> c3 >> c4; s[i] = maxa(c1, c2, c3, c4); maxnum = -1000; } for (int i = 0; i < N; i++) { if (i) cout << endl; cout << s[i]; } // int z = 0; // for (int c1 = 1; c1 < 14; c1++) // for (int c2 = c1; c2 < 14; c2++) // for (int c3 = c2; c3 < 14; c3++) { // for (int c4 = c3; c4 < 14; c4++) { // z += !(maxa(c1, c2, c3, c4) == 24); // maxnum = -1000; // } // } // cout << z; }","title":"VictriD's solution"},{"location":"nr/4022/","text":"4022 FZ\u6cdb\u821f \u8f6c\u5230\u9898\u76ee FineArtz's solution /* FZ\u6cdb\u821f */ #include <iostream> using namespace std; int main(){ int x, n; cin >> x >> n; int p = n / 7 * 5; n %= 7; for (int i = x; i <= x + n - 1; ++i){ if ((i % 6 == 0) || (i % 7 == 0)) continue; ++p; } cout << p * 250 << endl; return 0; }","title":"4022 FZ\u6cdb\u821f"},{"location":"nr/4022/#4022-fz","text":"\u8f6c\u5230\u9898\u76ee","title":"4022 FZ\u6cdb\u821f"},{"location":"nr/4022/#fineartzs-solution","text":"/* FZ\u6cdb\u821f */ #include <iostream> using namespace std; int main(){ int x, n; cin >> x >> n; int p = n / 7 * 5; n %= 7; for (int i = x; i <= x + n - 1; ++i){ if ((i % 6 == 0) || (i % 7 == 0)) continue; ++p; } cout << p * 250 << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4023/","text":"4023 \u9762\u5305\u6bd4\u53ef\u7231 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9762\u5305\u6bd4\u53ef\u7231 */ #include <iostream> using namespace std; int main(){ int n = 0, a[100], ans[100] = {0}; cin >> n; for (int i = 0; i < n; ++i) cin >> a[i]; for (int i = 0; i < n; ++i) for (int j = 0; j <= i - 1; ++j) if (a[i] > a[j]) ++ans[i]; for (int i = 0; i < n; ++i) cout << ans[i] << ' '; cout << endl; return 0; }","title":"4023 \u9762\u5305\u6bd4\u53ef\u7231"},{"location":"nr/4023/#4023","text":"\u8f6c\u5230\u9898\u76ee","title":"4023 \u9762\u5305\u6bd4\u53ef\u7231"},{"location":"nr/4023/#fineartzs-solution","text":"/* \u9762\u5305\u6bd4\u53ef\u7231 */ #include <iostream> using namespace std; int main(){ int n = 0, a[100], ans[100] = {0}; cin >> n; for (int i = 0; i < n; ++i) cin >> a[i]; for (int i = 0; i < n; ++i) for (int j = 0; j <= i - 1; ++j) if (a[i] > a[j]) ++ans[i]; for (int i = 0; i < n; ++i) cout << ans[i] << ' '; cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4025/","text":"4025 \u6d2a\u6c34\u6765\u88ad \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iomanip> #include <iostream> using namespace std; int* MergeSort(int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int* tmplist = new int[listSize]; int* llst = MergeSort(list, listSize / 2); int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n, m; cin >> n >> m; int size = n * m; int* hgt = new int[size]; long long* hgt2 = new long long[size]; for (int i = 0; i < size; i++) { cin >> hgt[i]; } long long vol, existvol = 0; double ht = 0; cin >> vol; MergeSort(hgt, size); //from small to big hgt2[0] = 0; for (int i = 1; i < size; i++) { hgt2[i] = (hgt[i] - hgt[i - 1]) * i; } int hg = 0; loop: existvol += hgt2[hg]; if (existvol == vol) { ht = hgt[hg]; goto ans; } if (existvol > vol) { ht = hgt[hg]; ht -= (double)(existvol - vol) / (double)hg; goto ans; } hg++; if (hg == size) { ht = hgt[size - 1]; ht += (double)(vol - existvol) / (double)size; goto ans; } goto loop; ans: cout << setiosflags(ios::fixed) << setprecision(2) << ht << endl << (double)hg / (double)size * 100.0; return 0; } FineArtz's solution /* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; //const long long INF = 2000000000000; int main(){ int m, n; cin >> m >> n; int a[250005] = {0}; int sub[250005] = {0}; for (int i = 1; i <= m * n; ++i) cin >> a[i]; long long v; cin >> v; sort(a + 1, a + m * n + 1); if (v == 0){ cout << setiosflags(ios::fixed) << setprecision(2) << double(a[1]) << endl; cout << \"0.00\" << endl; return 0; } double SeaLevel = 0.0; int cnt = 0; if (m <= 10 && n <= 10){ /*for (int i = 1; i <= m * n; ++i) cout << a[i] << ' '; cout << endl;*/ sub[1] = 0; for (int i = 2; i <= m * n; ++i) sub[i] = (a[i] - a[i - 1]) * (i - 1) + sub[i - 1]; /*for (int i = 1; i <= m * n; ++i) cout << sub[i] << endl;*/ cnt = 1; for (; cnt <= m * n; ++cnt) if (v <= sub[cnt]) break; --cnt; v -= sub[cnt]; SeaLevel = a[cnt] + v * 1.0 / cnt; //cout << cnt << endl; } else { for (int i = 1; i <= m * n - 1; ++i) sub[i] = a[i + 1] - a[i]; sub[m * n] = -1; cnt = 1; SeaLevel = a[1]; while (1){ if (v != 0 && cnt < m * n && v >= cnt * sub[cnt]){ v -= cnt * sub[cnt]; SeaLevel = a[++cnt]; } else if (cnt >= m * n){ cnt = m * n; SeaLevel += v * 1.0 / cnt; break; } else{ SeaLevel += v * 1.0 / cnt; if (v == 0) --cnt; break; } } } cout << setiosflags(ios::fixed) << setprecision(2) << SeaLevel << endl << cnt * 100.0 / (m * n) << endl; return 0; }","title":"4025 \u6d2a\u6c34\u6765\u88ad"},{"location":"nr/4025/#4025","text":"\u8f6c\u5230\u9898\u76ee","title":"4025 \u6d2a\u6c34\u6765\u88ad"},{"location":"nr/4025/#victrids-solution","text":"#include <iomanip> #include <iostream> using namespace std; int* MergeSort(int* list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int* tmplist = new int[listSize]; int* llst = MergeSort(list, listSize / 2); int* rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n, m; cin >> n >> m; int size = n * m; int* hgt = new int[size]; long long* hgt2 = new long long[size]; for (int i = 0; i < size; i++) { cin >> hgt[i]; } long long vol, existvol = 0; double ht = 0; cin >> vol; MergeSort(hgt, size); //from small to big hgt2[0] = 0; for (int i = 1; i < size; i++) { hgt2[i] = (hgt[i] - hgt[i - 1]) * i; } int hg = 0; loop: existvol += hgt2[hg]; if (existvol == vol) { ht = hgt[hg]; goto ans; } if (existvol > vol) { ht = hgt[hg]; ht -= (double)(existvol - vol) / (double)hg; goto ans; } hg++; if (hg == size) { ht = hgt[size - 1]; ht += (double)(vol - existvol) / (double)size; goto ans; } goto loop; ans: cout << setiosflags(ios::fixed) << setprecision(2) << ht << endl << (double)hg / (double)size * 100.0; return 0; }","title":"VictriD's solution"},{"location":"nr/4025/#fineartzs-solution","text":"/* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <iomanip> #include <algorithm> using namespace std; //const long long INF = 2000000000000; int main(){ int m, n; cin >> m >> n; int a[250005] = {0}; int sub[250005] = {0}; for (int i = 1; i <= m * n; ++i) cin >> a[i]; long long v; cin >> v; sort(a + 1, a + m * n + 1); if (v == 0){ cout << setiosflags(ios::fixed) << setprecision(2) << double(a[1]) << endl; cout << \"0.00\" << endl; return 0; } double SeaLevel = 0.0; int cnt = 0; if (m <= 10 && n <= 10){ /*for (int i = 1; i <= m * n; ++i) cout << a[i] << ' '; cout << endl;*/ sub[1] = 0; for (int i = 2; i <= m * n; ++i) sub[i] = (a[i] - a[i - 1]) * (i - 1) + sub[i - 1]; /*for (int i = 1; i <= m * n; ++i) cout << sub[i] << endl;*/ cnt = 1; for (; cnt <= m * n; ++cnt) if (v <= sub[cnt]) break; --cnt; v -= sub[cnt]; SeaLevel = a[cnt] + v * 1.0 / cnt; //cout << cnt << endl; } else { for (int i = 1; i <= m * n - 1; ++i) sub[i] = a[i + 1] - a[i]; sub[m * n] = -1; cnt = 1; SeaLevel = a[1]; while (1){ if (v != 0 && cnt < m * n && v >= cnt * sub[cnt]){ v -= cnt * sub[cnt]; SeaLevel = a[++cnt]; } else if (cnt >= m * n){ cnt = m * n; SeaLevel += v * 1.0 / cnt; break; } else{ SeaLevel += v * 1.0 / cnt; if (v == 0) --cnt; break; } } } cout << setiosflags(ios::fixed) << setprecision(2) << SeaLevel << endl << cnt * 100.0 / (m * n) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4027/","text":"4027 \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 */ #include <iostream> using namespace std; int reflection[100005] = {0}, a[100005] = {0}, ans[100005] = {0}; int bisearch(int low, int high, int sought){ if (low >= high) return low; int m = (low + high) / 2; if (ans[m] < sought) return bisearch(m + 1, high, sought); else return bisearch(low, m, sought); } int main(){ int n, len = 0, j = 0, t = 0;; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; reflection[t] = i; } for (int i = 1; i <= n; ++i){ cin >> t; a[i] = reflection[t]; if (a[i] > ans[len]) j = ++len; else j = bisearch(1, len, a[i]); ans[j] = a[i]; } // for (int i = 1; i <= n; ++i) cout << a[i] << ' '; //cout << endl; cout << len << endl; return 0; }","title":"4027 \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3"},{"location":"nr/4027/#4027","text":"\u8f6c\u5230\u9898\u76ee","title":"4027 \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3"},{"location":"nr/4027/#fineartzs-solution","text":"/* \u8d1d\u5b66\u957f\u6446\u8d1d\u58f3 */ #include <iostream> using namespace std; int reflection[100005] = {0}, a[100005] = {0}, ans[100005] = {0}; int bisearch(int low, int high, int sought){ if (low >= high) return low; int m = (low + high) / 2; if (ans[m] < sought) return bisearch(m + 1, high, sought); else return bisearch(low, m, sought); } int main(){ int n, len = 0, j = 0, t = 0;; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; reflection[t] = i; } for (int i = 1; i <= n; ++i){ cin >> t; a[i] = reflection[t]; if (a[i] > ans[len]) j = ++len; else j = bisearch(1, len, a[i]); ans[j] = a[i]; } // for (int i = 1; i <= n; ++i) cout << a[i] << ' '; //cout << endl; cout << len << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4028/","text":"4028 \u4e45\u5b50\u7684\u56fe\u7ae0 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4e45\u5b50\u7684\u56fe\u7ae0 */ #include <iostream> #include <cstdio> using namespace std; class Point{ public: Point() : x(0), y(0) {} Point(int xx, int yy) : x(xx), y(yy) {}; int x, y; }; bool gra[1005][1005] = {0}; Point pic[1000000]; void solve(){ int m, n, p, q; int cntg = 0; cin >> m >> n >> p >> q; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ scanf(\"%d\", &gra[i][j]); if (gra[i][j]) ++cntg; } int t = 0, cntp = 0; for (int i = 1; i <= p; ++i) for (int j = 1; j <= q; ++j){ scanf(\"%d\", &t); if (t == 1){ ++cntp; pic[cntp].x = i; pic[cntp].y = j; } } /*if (cntg % cntp != 0){ cout << \"No\" << endl; return; } if (m > 50 && n > 50){ cout << \"No\" << endl; return; }*/ for (int i = 1; i <= m; ++i){ for (int j = 1; j <= n; ++j){ if (gra[i][j]){ for (int l = 2; l <= cntp; ++l){ int nx = i + pic[l].x - pic[1].x, ny = j + pic[l].y - pic[1].y; if (nx <= 0 || ny <= 0 || nx > m || ny > n){ printf(\"No\\n\"); return; } if (gra[nx][ny]) gra[nx][ny] = 0; else{ printf(\"No\\n\"); return; } } } } } printf(\"Yes\\n\"); } int main(){ int t; cin >> t; for (int i = 0; i != t; ++i) solve(); return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"4028 \u4e45\u5b50\u7684\u56fe\u7ae0"},{"location":"nr/4028/#4028","text":"\u8f6c\u5230\u9898\u76ee","title":"4028 \u4e45\u5b50\u7684\u56fe\u7ae0"},{"location":"nr/4028/#fineartzs-solution","text":"/* \u4e45\u5b50\u7684\u56fe\u7ae0 */ #include <iostream> #include <cstdio> using namespace std; class Point{ public: Point() : x(0), y(0) {} Point(int xx, int yy) : x(xx), y(yy) {}; int x, y; }; bool gra[1005][1005] = {0}; Point pic[1000000]; void solve(){ int m, n, p, q; int cntg = 0; cin >> m >> n >> p >> q; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j){ scanf(\"%d\", &gra[i][j]); if (gra[i][j]) ++cntg; } int t = 0, cntp = 0; for (int i = 1; i <= p; ++i) for (int j = 1; j <= q; ++j){ scanf(\"%d\", &t); if (t == 1){ ++cntp; pic[cntp].x = i; pic[cntp].y = j; } } /*if (cntg % cntp != 0){ cout << \"No\" << endl; return; } if (m > 50 && n > 50){ cout << \"No\" << endl; return; }*/ for (int i = 1; i <= m; ++i){ for (int j = 1; j <= n; ++j){ if (gra[i][j]){ for (int l = 2; l <= cntp; ++l){ int nx = i + pic[l].x - pic[1].x, ny = j + pic[l].y - pic[1].y; if (nx <= 0 || ny <= 0 || nx > m || ny > n){ printf(\"No\\n\"); return; } if (gra[nx][ny]) gra[nx][ny] = 0; else{ printf(\"No\\n\"); return; } } } } } printf(\"Yes\\n\"); } int main(){ int t; cin >> t; for (int i = 0; i != t; ++i) solve(); return 0; }","title":"FineArtz's solution"},{"location":"nr/4028/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int rmargin,lmargin,dmargin,m,n,p,q,t,x,sx,sy,patx[1000001],paty[1000001],map[1001][1001],num,pnum; bool flag; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ flag=true; num=0; lmargin=0; rmargin=0; dmargin=0; pnum=0; scanf(\"%d%d%d%d\",&m,&n,&p,&q); for (int j=0;j<m;++j) for (int k=0;k<n;++k) { scanf(\"%d\", &map[j][k]); if (map[j][k]) pnum++; } for (int j=0;j<p;++j) for (int k=0;k<q;++k) { scanf(\"%d\",&x); if (x){ if (num==0) { sx=j; sy=k; num++; } else{ patx[num]=j-sx; paty[num]=k-sy; if (paty[num]<0) lmargin=max(lmargin,paty[num]); rmargin=max(rmargin,paty[num]); dmargin=max(dmargin,patx[num]); num++; } } } for (int j=0;j<m-dmargin;++j){ for (int k=lmargin;k<n-rmargin;++k) if (map[j][k]){ map[j][k]=0; for (int l=1;l<num;++l) if (!map[j+patx[l]][k+paty[l]]) { flag = false; break; } else map[j+patx[l]][k+paty[l]]=0; if (!flag) break; pnum-=num; if (!pnum) break; } if (!flag) break; if (!pnum) break; } if (!flag) printf(\"No\\n\"); else printf(\"Yes\\n\"); } return 0; }","title":"WashWang's solution"},{"location":"nr/4032/","text":"4032 \u4e09\u89d2\u5f62\u5224\u5b9a \u8f6c\u5230\u9898\u76ee VictriD's solution #include <cmath> #include <iostream> using namespace std; int main() { double a, b, c, temp; cin >> a >> b >> c; //rank if (a > b) { temp = a; a = b; b = temp; } if (b > c) { temp = b; b = c; c = temp; } //is triangle if (c >= (a + b) || a <= 0) { cout << \"-1\"; return 0; } //is RT if ((c * c - a * a - b * b) <= 1e-6 && (c * c - a * a - b * b) >= -1e-6) { cout << \"1\"; } else { cout << \"0\"; } return 0; }","title":"4032 \u4e09\u89d2\u5f62\u5224\u5b9a"},{"location":"nr/4032/#4032","text":"\u8f6c\u5230\u9898\u76ee","title":"4032 \u4e09\u89d2\u5f62\u5224\u5b9a"},{"location":"nr/4032/#victrids-solution","text":"#include <cmath> #include <iostream> using namespace std; int main() { double a, b, c, temp; cin >> a >> b >> c; //rank if (a > b) { temp = a; a = b; b = temp; } if (b > c) { temp = b; b = c; c = temp; } //is triangle if (c >= (a + b) || a <= 0) { cout << \"-1\"; return 0; } //is RT if ((c * c - a * a - b * b) <= 1e-6 && (c * c - a * a - b * b) >= -1e-6) { cout << \"1\"; } else { cout << \"0\"; } return 0; }","title":"VictriD's solution"},{"location":"nr/4034/","text":"4034 NaivePalindrome \u8f6c\u5230\u9898\u76ee FineArtz's solution /* NaivePalindrome */ #include <iostream> #include <string> #include <cstring> using namespace std; const int MAXS = 105; int n = 10; inline int change(const char &ch){ if (isalpha(ch)) return (ch - 'A' + 10); else return (ch - '0'); } class BigInt{ //friend friend void add(BigInt&); public: //constructor BigInt(); BigInt(const string&); BigInt(const BigInt&); int len; int data[MAXS]; }; BigInt::BigInt() : len(0){ memset(data, 0, sizeof(data)); } BigInt::BigInt(const string &s){ memset(data, 0, sizeof(data)); len = s.size(); for (int i = 1; i <= len; ++i) data[i] = change(s[len - i]); } BigInt::BigInt(const BigInt &rhs) : len(rhs.len) { memset(data, 0, sizeof(data)); for (int i = 1; i <= len; ++i) data[i] = rhs.data[i]; } void add(BigInt &x){ BigInt ret; ret.len = x.len; for (int i = 1; i <= x.len; ++i) ret.data[i] = x.data[i] + x.data[x.len - i + 1]; for (int i = 1; i <= x.len; ++i){ if (ret.data[i] >= n){ ret.data[i] -= n; ++ret.data[i + 1]; } } if (ret.data[ret.len + 1] != 0) ++ret.len; x.len = ret.len; for (int i = 1; i <= ret.len; ++i) x.data[i] = ret.data[i]; } bool check(const BigInt &x){ for (int i = 1; i <= x.len / 2; ++i) if (x.data[i] != x.data[x.len - i + 1]) return false; return true; } int main(){ cin >> n; string num; cin >> num; BigInt x(num); int step = 0; while (!check(x)){ add(x); ++step; if (step >= 30){ cout << \"Impossible!\" << endl; return 0; } } cout << \"STEP=\" << step << endl; return 0; }","title":"4034 NaivePalindrome"},{"location":"nr/4034/#4034-naivepalindrome","text":"\u8f6c\u5230\u9898\u76ee","title":"4034 NaivePalindrome"},{"location":"nr/4034/#fineartzs-solution","text":"/* NaivePalindrome */ #include <iostream> #include <string> #include <cstring> using namespace std; const int MAXS = 105; int n = 10; inline int change(const char &ch){ if (isalpha(ch)) return (ch - 'A' + 10); else return (ch - '0'); } class BigInt{ //friend friend void add(BigInt&); public: //constructor BigInt(); BigInt(const string&); BigInt(const BigInt&); int len; int data[MAXS]; }; BigInt::BigInt() : len(0){ memset(data, 0, sizeof(data)); } BigInt::BigInt(const string &s){ memset(data, 0, sizeof(data)); len = s.size(); for (int i = 1; i <= len; ++i) data[i] = change(s[len - i]); } BigInt::BigInt(const BigInt &rhs) : len(rhs.len) { memset(data, 0, sizeof(data)); for (int i = 1; i <= len; ++i) data[i] = rhs.data[i]; } void add(BigInt &x){ BigInt ret; ret.len = x.len; for (int i = 1; i <= x.len; ++i) ret.data[i] = x.data[i] + x.data[x.len - i + 1]; for (int i = 1; i <= x.len; ++i){ if (ret.data[i] >= n){ ret.data[i] -= n; ++ret.data[i + 1]; } } if (ret.data[ret.len + 1] != 0) ++ret.len; x.len = ret.len; for (int i = 1; i <= ret.len; ++i) x.data[i] = ret.data[i]; } bool check(const BigInt &x){ for (int i = 1; i <= x.len / 2; ++i) if (x.data[i] != x.data[x.len - i + 1]) return false; return true; } int main(){ cin >> n; string num; cin >> num; BigInt x(num); int step = 0; while (!check(x)){ add(x); ++step; if (step >= 30){ cout << \"Impossible!\" << endl; return 0; } } cout << \"STEP=\" << step << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4035/","text":"4035 \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a */ #include <iostream> using namespace std; int n, m; int a[500005] = {0}; long long check(long long l, long long r){ if (l >= r) return l; long long mid = (l + r) / 2; int cnt = 0; bool flag = true; for (int i = 1; i <= n; ++i){ cnt += a[i] / mid; if (a[i] % mid != 0) ++cnt; if (cnt > m) { return check(mid + 1, r); flag = false; break; } } if (flag) return check(l, mid); } int main(){ cin >> n >> m; long long sum = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; sum += a[i]; } long long l = sum / m, r = sum; cout << check(l, r) << endl; return 0; } WashWang's solution #include <iostream> using namespace std; int sum,n,m,a[600000],l,r,mid,ans=500000; bool test(int x){ sum=0; for (int i=0;i<n;++i) sum+=(a[i]-1)/x+1; return sum<=m; } int main() { cin>>n>>m; for (int i=0;i<n;++i) cin>>a[i]; l=0; r=500000; while (l<=r) { mid=(l+r)/2; if (test(mid)){ if (mid<ans) ans=mid; r=mid-1; } else l=mid+1; } cout<<ans; return 0; }","title":"4035 \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a"},{"location":"nr/4035/#4035","text":"\u8f6c\u5230\u9898\u76ee","title":"4035 \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a"},{"location":"nr/4035/#fineartzs-solution","text":"/* \u6cf0\u5148\u751f\u7684\u65f6\u5149\u673a */ #include <iostream> using namespace std; int n, m; int a[500005] = {0}; long long check(long long l, long long r){ if (l >= r) return l; long long mid = (l + r) / 2; int cnt = 0; bool flag = true; for (int i = 1; i <= n; ++i){ cnt += a[i] / mid; if (a[i] % mid != 0) ++cnt; if (cnt > m) { return check(mid + 1, r); flag = false; break; } } if (flag) return check(l, mid); } int main(){ cin >> n >> m; long long sum = 0; for (int i = 1; i <= n; ++i){ cin >> a[i]; sum += a[i]; } long long l = sum / m, r = sum; cout << check(l, r) << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4035/#washwangs-solution","text":"#include <iostream> using namespace std; int sum,n,m,a[600000],l,r,mid,ans=500000; bool test(int x){ sum=0; for (int i=0;i<n;++i) sum+=(a[i]-1)/x+1; return sum<=m; } int main() { cin>>n>>m; for (int i=0;i<n;++i) cin>>a[i]; l=0; r=500000; while (l<=r) { mid=(l+r)/2; if (test(mid)){ if (mid<ans) ans=mid; r=mid-1; } else l=mid+1; } cout<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/4039/","text":"4039 \u8d28\u56e0\u6570\u5206\u89e3 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int num; bool CF=false; cin >> num; for (int i = 2; i <= num;) { if (!(num % i)) { num /= i; if (CF) cout << ' '; cout << i; CF = true; continue; } ++i; } return 0; } vvvvv1v's solution #include <iostream> #include <cmath> using namespace std; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; cin >> n; bool isFirst = true; int num = 2; if (isPrimenumber(n)) { cout << n; return 0; } while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!isFirst) cout << ' '; else isFirst = false; cout << i; n /= i; num = i; break; } } } cout << ' ' << n; return 0; }","title":"4039 \u8d28\u56e0\u6570\u5206\u89e3"},{"location":"nr/4039/#4039","text":"\u8f6c\u5230\u9898\u76ee","title":"4039 \u8d28\u56e0\u6570\u5206\u89e3"},{"location":"nr/4039/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int num; bool CF=false; cin >> num; for (int i = 2; i <= num;) { if (!(num % i)) { num /= i; if (CF) cout << ' '; cout << i; CF = true; continue; } ++i; } return 0; }","title":"VictriD's solution"},{"location":"nr/4039/#vvvvv1vs-solution","text":"#include <iostream> #include <cmath> using namespace std; bool isPrimenumber(int n) { if (n == 2) return true; bool flag = false; for (int i = 2; i <= int(sqrt(n)) + 1; ++i) { if (n % i == 0) { flag = true; break; } } if (flag) return false; else return true; } int main(void) { int n; cin >> n; bool isFirst = true; int num = 2; if (isPrimenumber(n)) { cout << n; return 0; } while(!isPrimenumber(n)) { for(int i = num; i <= int(sqrt(n)) + 1; ++i) { if (isPrimenumber(i) && n % i == 0 ) { if (!isFirst) cout << ' '; else isFirst = false; cout << i; n /= i; num = i; break; } } } cout << ' ' << n; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4040/","text":"4040 \u8ba1\u7b97\u963f\u59c6\u65af\u7279\u6717\u6570 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <cmath> using namespace std; int main() { int a, b, armstrong; bool AF = false; cin >> a >> b; if (a > b || a <= 0) { cout << \"error\"; return 0; } for (int i = a; i <= b; i++) { armstrong = 0; for (int OpNumber = i;OpNumber!=0;) { armstrong += pow((OpNumber % 10), 3); OpNumber /= 10; } if (armstrong == i) { if(AF)cout<<endl; cout <<i; AF = true; } } if (!AF)cout << \"no\"; return 0; }","title":"4040 \u8ba1\u7b97\u963f\u59c6\u65af\u7279\u6717\u6570"},{"location":"nr/4040/#4040","text":"\u8f6c\u5230\u9898\u76ee","title":"4040 \u8ba1\u7b97\u963f\u59c6\u65af\u7279\u6717\u6570"},{"location":"nr/4040/#victrids-solution","text":"#include <iostream> #include <cmath> using namespace std; int main() { int a, b, armstrong; bool AF = false; cin >> a >> b; if (a > b || a <= 0) { cout << \"error\"; return 0; } for (int i = a; i <= b; i++) { armstrong = 0; for (int OpNumber = i;OpNumber!=0;) { armstrong += pow((OpNumber % 10), 3); OpNumber /= 10; } if (armstrong == i) { if(AF)cout<<endl; cout <<i; AF = true; } } if (!AF)cout << \"no\"; return 0; }","title":"VictriD's solution"},{"location":"nr/4041/","text":"4041 STL\u7cfb\u5217-vector \u8f6c\u5230\u9898\u76ee FineArtz's solution /* STL-vector */ #include <iostream> #include <cstdio> #include <vector> #include <stack> using namespace std; int main(){ int n, m; scanf(\"%d%d\", &n, &m); //cin >> n >> m; vector<vector<int>> v; int last3 = -1; v.resize(n); while (m--){ int t, i, x; scanf(\"%d\", &t); switch(t){ case 1: scanf(\"%d%d\", &i, &x); //cin >> i >> x; if (last3 == -1) v[i].push_back(x); else v[i].push_back(x ^ last3); break; case 2: scanf(\"%d\", &i); //cin >> i; v[i].erase(v[i].end() - 1); break; case 3: scanf(\"%d%d\", &i, &x); //cin >> i >> x; last3 = v[i][x]; printf(\"%d\\n\", v[i][x]); //cout << v[i][x] << endl; break; default: break; } } return 0; }","title":"4041 STL\u7cfb\u5217-vector"},{"location":"nr/4041/#4041-stl-vector","text":"\u8f6c\u5230\u9898\u76ee","title":"4041 STL\u7cfb\u5217-vector"},{"location":"nr/4041/#fineartzs-solution","text":"/* STL-vector */ #include <iostream> #include <cstdio> #include <vector> #include <stack> using namespace std; int main(){ int n, m; scanf(\"%d%d\", &n, &m); //cin >> n >> m; vector<vector<int>> v; int last3 = -1; v.resize(n); while (m--){ int t, i, x; scanf(\"%d\", &t); switch(t){ case 1: scanf(\"%d%d\", &i, &x); //cin >> i >> x; if (last3 == -1) v[i].push_back(x); else v[i].push_back(x ^ last3); break; case 2: scanf(\"%d\", &i); //cin >> i; v[i].erase(v[i].end() - 1); break; case 3: scanf(\"%d%d\", &i, &x); //cin >> i >> x; last3 = v[i][x]; printf(\"%d\\n\", v[i][x]); //cout << v[i][x] << endl; break; default: break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4042/","text":"4042 \u9762\u5305\u8981\u7ea6\u4f1a \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u9762\u5305\u8981\u7ea6\u4f1a */ #include <iostream> #include <fstream> #include <algorithm> using namespace std; constexpr int MAXN = 3e5 + 5, MOD = 1e9 + 7; int n; long long x[MAXN]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> x[i]; sort(x + 1, x + n + 1); long long ans = 0, doub = 1, sum = 0; for (int i = 2; i <= n; ++i){ sum = sum * 2 % MOD; sum = (sum + x[i - 1]) % MOD; doub = doub * 2 % MOD; ans = (ans + (doub - 1) * x[i] - sum) % MOD; } cout << ans << endl; return 0; }","title":"4042 \u9762\u5305\u8981\u7ea6\u4f1a"},{"location":"nr/4042/#4042","text":"\u8f6c\u5230\u9898\u76ee","title":"4042 \u9762\u5305\u8981\u7ea6\u4f1a"},{"location":"nr/4042/#fineartzs-solution","text":"/* \u9762\u5305\u8981\u7ea6\u4f1a */ #include <iostream> #include <fstream> #include <algorithm> using namespace std; constexpr int MAXN = 3e5 + 5, MOD = 1e9 + 7; int n; long long x[MAXN]; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> x[i]; sort(x + 1, x + n + 1); long long ans = 0, doub = 1, sum = 0; for (int i = 2; i <= n; ++i){ sum = sum * 2 % MOD; sum = (sum + x[i - 1]) % MOD; doub = doub * 2 % MOD; ans = (ans + (doub - 1) * x[i] - sum) % MOD; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4043/","text":"4043 STL\u7cfb\u5217-algorithm \u8f6c\u5230\u9898\u76ee FineArtz's solution /* STL-algorithm */ #include <iostream> #include <cstdio> #include <vector> #include <algorithm> using namespace std; int main(){ int n, m, tmp; scanf(\"%d%d\", &n, &m); vector<int> v; //cin >> n >> m; for (int i = 0; i < n; ++i){ scanf(\"%d\", &tmp); //cin >> tmp; v.push_back(tmp); } while (m--){ int t, i, j, a, b, c; int ans; vector<int>::iterator ite = v.begin(); scanf(\"%d%d%d\", &t, &i, &j); switch(t){ case 1: sort(v.begin() + i, v.begin() + j); break; case 2: reverse(v.begin() + i, v.begin() + j); break; case 3: for (auto it = v.begin() + i; it != v.begin() + j; ++it) printf(\"%d \", *it); //cout << *it << ' '; printf(\"\\n\"); //cout << endl; break; case 4: ans = *min_element(v.begin() + i, v.begin() + j); printf(\"%d\\n\", ans); //cout << *minn << endl; break; case 5: scanf(\"%d\", &a); //cin >> a; ans = count_if(v.begin() + i, v.begin() + j, [a](int x){return x > a;}); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 6: scanf(\"%d\", &a); ite = find(v.begin() + i, v.begin() + j, a); ans = distance(v.begin(), ite); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 7: scanf(\"%d%d\", &a, &b); //cin >> a >> b; replace(v.begin() + i, v.begin() + j, a, b); break; case 8: scanf(\"%d%d%d\", &a, &b, &c); stable_partition(v.begin() + i, v.begin() + j, [a, b, c](int x){return a * x * x + b * x + c > 0;}); break; default: break; } } return 0; }","title":"4043 STL\u7cfb\u5217-algorithm"},{"location":"nr/4043/#4043-stl-algorithm","text":"\u8f6c\u5230\u9898\u76ee","title":"4043 STL\u7cfb\u5217-algorithm"},{"location":"nr/4043/#fineartzs-solution","text":"/* STL-algorithm */ #include <iostream> #include <cstdio> #include <vector> #include <algorithm> using namespace std; int main(){ int n, m, tmp; scanf(\"%d%d\", &n, &m); vector<int> v; //cin >> n >> m; for (int i = 0; i < n; ++i){ scanf(\"%d\", &tmp); //cin >> tmp; v.push_back(tmp); } while (m--){ int t, i, j, a, b, c; int ans; vector<int>::iterator ite = v.begin(); scanf(\"%d%d%d\", &t, &i, &j); switch(t){ case 1: sort(v.begin() + i, v.begin() + j); break; case 2: reverse(v.begin() + i, v.begin() + j); break; case 3: for (auto it = v.begin() + i; it != v.begin() + j; ++it) printf(\"%d \", *it); //cout << *it << ' '; printf(\"\\n\"); //cout << endl; break; case 4: ans = *min_element(v.begin() + i, v.begin() + j); printf(\"%d\\n\", ans); //cout << *minn << endl; break; case 5: scanf(\"%d\", &a); //cin >> a; ans = count_if(v.begin() + i, v.begin() + j, [a](int x){return x > a;}); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 6: scanf(\"%d\", &a); ite = find(v.begin() + i, v.begin() + j, a); ans = distance(v.begin(), ite); printf(\"%d\\n\", ans); //cout << ans << endl; break; case 7: scanf(\"%d%d\", &a, &b); //cin >> a >> b; replace(v.begin() + i, v.begin() + j, a, b); break; case 8: scanf(\"%d%d%d\", &a, &b, &c); stable_partition(v.begin() + i, v.begin() + j, [a, b, c](int x){return a * x * x + b * x + c > 0;}); break; default: break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4044/","text":"4044 STL\u7cfb\u5217-map/pq \u8f6c\u5230\u9898\u76ee FineArtz's solution /* STL-map/pq */ #include <iostream> #include <cstdio> #include <map> #include <queue> using namespace std; int main(){ int n, t, x, y; scanf(\"%d\", &n); //cin >> n; map<int, priority_queue<int>> apple; while (n--){ scanf(\"%d\", &t); //cin >> t; switch(t){ case 1: scanf(\"%d%d\", &x, &y); //cin >> x >> y; apple[x].push(y); break; case 2: scanf(\"%d\", &x); //cin >> x; apple[x].pop(); break; case 3: scanf(\"%d\", &x); //cin >> x; printf(\"%d\\n\", apple[x].top()); //cout << apple[x].top() << endl; break; default: break; } } return 0; }","title":"4044 STL\u7cfb\u5217-map/pq"},{"location":"nr/4044/#4044-stl-mappq","text":"\u8f6c\u5230\u9898\u76ee","title":"4044 STL\u7cfb\u5217-map/pq"},{"location":"nr/4044/#fineartzs-solution","text":"/* STL-map/pq */ #include <iostream> #include <cstdio> #include <map> #include <queue> using namespace std; int main(){ int n, t, x, y; scanf(\"%d\", &n); //cin >> n; map<int, priority_queue<int>> apple; while (n--){ scanf(\"%d\", &t); //cin >> t; switch(t){ case 1: scanf(\"%d%d\", &x, &y); //cin >> x >> y; apple[x].push(y); break; case 2: scanf(\"%d\", &x); //cin >> x; apple[x].pop(); break; case 3: scanf(\"%d\", &x); //cin >> x; printf(\"%d\\n\", apple[x].top()); //cout << apple[x].top() << endl; break; default: break; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4045/","text":"4045 \u65e5\u5929\u8981\u8bfb\u4e66 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u65e5\u5929\u8981\u8bfb\u4e66 */ #include <iostream> #include <algorithm> #include <vector> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; vector<int> p(n + 1, 0); for (int i = 1; i <= n; ++i) cin >> p[i]; vector<int> q(p.begin(), p.end()); int l, r, x; while (m--){ q = p; cin >> l >> r >> x; sort(q.begin() + l, q.begin() + r + 1); auto ite = find(q.begin(), q.end(), p[x]); if (distance(q.begin(), ite) == x) cout << \"Yes\\n\"; else cout << \"No\\n\"; } return 0; }","title":"4045 \u65e5\u5929\u8981\u8bfb\u4e66"},{"location":"nr/4045/#4045","text":"\u8f6c\u5230\u9898\u76ee","title":"4045 \u65e5\u5929\u8981\u8bfb\u4e66"},{"location":"nr/4045/#fineartzs-solution","text":"/* \u65e5\u5929\u8981\u8bfb\u4e66 */ #include <iostream> #include <algorithm> #include <vector> using namespace std; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n, m; cin >> n >> m; vector<int> p(n + 1, 0); for (int i = 1; i <= n; ++i) cin >> p[i]; vector<int> q(p.begin(), p.end()); int l, r, x; while (m--){ q = p; cin >> l >> r >> x; sort(q.begin() + l, q.begin() + r + 1); auto ite = find(q.begin(), q.end(), p[x]); if (distance(q.begin(), ite) == x) cout << \"Yes\\n\"; else cout << \"No\\n\"; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4046/","text":"4046 \u77e9\u9635\u65cb\u8f6c \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int m, n; int MAT[10][10]={0}; bool ENDL_FLAG = false, SPACE_FLAG = false; cin >> m >> n; for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { cin >> MAT[i][j]; } } cout << n << ' ' << m << endl; for (int j = 0; j < n; j++) { if (ENDL_FLAG) cout << endl; for (int i =(m-1); i >=0; i--) { if (SPACE_FLAG) cout << ' '; cout << MAT[i][j]; SPACE_FLAG = true; } ENDL_FLAG = true; SPACE_FLAG = false; } return 0; } FineArtz's solution /* \u77e9\u9635\u65cb\u8f6c */ #include <iostream> using namespace std; int main(){ int m, n; int a[15][15]; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; cout << n << ' ' << m << endl; for (int i = 1; i <= n; ++i){ for (int j = m; j >= 1; --j) cout << a[j][i] << ' '; cout << endl; } return 0; }","title":"4046 \u77e9\u9635\u65cb\u8f6c"},{"location":"nr/4046/#4046","text":"\u8f6c\u5230\u9898\u76ee","title":"4046 \u77e9\u9635\u65cb\u8f6c"},{"location":"nr/4046/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int m, n; int MAT[10][10]={0}; bool ENDL_FLAG = false, SPACE_FLAG = false; cin >> m >> n; for (int i = 0; i < m; ++i) { for (int j = 0; j < n; ++j) { cin >> MAT[i][j]; } } cout << n << ' ' << m << endl; for (int j = 0; j < n; j++) { if (ENDL_FLAG) cout << endl; for (int i =(m-1); i >=0; i--) { if (SPACE_FLAG) cout << ' '; cout << MAT[i][j]; SPACE_FLAG = true; } ENDL_FLAG = true; SPACE_FLAG = false; } return 0; }","title":"VictriD's solution"},{"location":"nr/4046/#fineartzs-solution","text":"/* \u77e9\u9635\u65cb\u8f6c */ #include <iostream> using namespace std; int main(){ int m, n; int a[15][15]; cin >> m >> n; for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; cout << n << ' ' << m << endl; for (int i = 1; i <= n; ++i){ for (int j = m; j >= 1; --j) cout << a[j][i] << ' '; cout << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4047/","text":"4047 \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 \u8f6c\u5230\u9898\u76ee VictriD's solution #include<iostream> using namespace std; int main() { int n; cin >> n; bool *Isprime = new bool[2000001]; bool SPACE_FLAG = false; Isprime[0] = false; Isprime[1] = false; for (int i = 2; i <= n; i++) { if (!Isprime[i])continue; for (int j = 2; i * j <= n; j++) { Isprime[i * j] = false; } if (SPACE_FLAG)cout << ' '; cout << i; SPACE_FLAG = true; } return 0; } FineArtz's solution /* \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 */ #include <iostream> using namespace std; bool isp[2000001]; int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 2; i <= n; ++i){ if (!isp[i]){ cout << i << ' '; for (int j = i; j <= n; j = j + i){ isp[j] = true; } } } return 0; }","title":"4047 \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5"},{"location":"nr/4047/#4047","text":"\u8f6c\u5230\u9898\u76ee","title":"4047 \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5"},{"location":"nr/4047/#victrids-solution","text":"#include<iostream> using namespace std; int main() { int n; cin >> n; bool *Isprime = new bool[2000001]; bool SPACE_FLAG = false; Isprime[0] = false; Isprime[1] = false; for (int i = 2; i <= n; i++) { if (!Isprime[i])continue; for (int j = 2; i * j <= n; j++) { Isprime[i * j] = false; } if (SPACE_FLAG)cout << ' '; cout << i; SPACE_FLAG = true; } return 0; }","title":"VictriD's solution"},{"location":"nr/4047/#fineartzs-solution","text":"/* \u57c3\u62c9\u6258\u8272\u5c3c\u7b5b\u6cd5 */ #include <iostream> using namespace std; bool isp[2000001]; int main(){ ios::sync_with_stdio(false); ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 2; i <= n; ++i){ if (!isp[i]){ cout << i << ' '; for (int j = i; j <= n; j = j + i){ isp[j] = true; } } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4048/","text":"4048 Evensgn\u7684\u575a\u5b9a\u4e4b\u684c \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Evensgn\u7684\u575a\u5b9a\u4e4b\u684c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Leg{ public: int d = 0, l = 0; }; bool cmp(Leg l1, Leg l2){ return (l1.l < l2.l || (l1.l == l2.l && l1.d < l2.d)); } /*bool cmp2(Leg l1, Leg l2){ return (l1.d < l2.d); }*/ Leg leg[100005]; int f[100005], d[205]; int n; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> leg[i].l; for (int i = 1; i <= n; ++i) cin >> leg[i].d; sort(leg + 1, leg + n + 1, cmp); f[1] = 0; int nowl = 1; for (int i = 2; i <= n; ++i){ if (leg[i].l == leg[i - 1].l) ++nowl; else{ for (int k = i - 1; k >= i - nowl; --k) ++d[leg[k].d]; nowl = 1; } if (nowl > i / 2) f[i] = 0; else{ int tmp1 = f[i - 1] + leg[i].d; int tmp2 = 0, cnt = 0, lim = i - 2 * nowl + 1; for (int k = 0; k <= 200; ++k){ if (cnt + d[k] >= lim){ tmp2 += k * (lim - cnt); break; } else{ tmp2 += k * d[k]; cnt += d[k]; } } f[i] = min(tmp1, tmp2); } } cout << f[n] << endl; return 0; }","title":"4048 Evensgn\u7684\u575a\u5b9a\u4e4b\u684c"},{"location":"nr/4048/#4048-evensgn","text":"\u8f6c\u5230\u9898\u76ee","title":"4048 Evensgn\u7684\u575a\u5b9a\u4e4b\u684c"},{"location":"nr/4048/#fineartzs-solution","text":"/* Evensgn\u7684\u575a\u5b9a\u4e4b\u684c */ #include <iostream> #include <cmath> #include <algorithm> using namespace std; class Leg{ public: int d = 0, l = 0; }; bool cmp(Leg l1, Leg l2){ return (l1.l < l2.l || (l1.l == l2.l && l1.d < l2.d)); } /*bool cmp2(Leg l1, Leg l2){ return (l1.d < l2.d); }*/ Leg leg[100005]; int f[100005], d[205]; int n; int main(){ cin >> n; for (int i = 1; i <= n; ++i) cin >> leg[i].l; for (int i = 1; i <= n; ++i) cin >> leg[i].d; sort(leg + 1, leg + n + 1, cmp); f[1] = 0; int nowl = 1; for (int i = 2; i <= n; ++i){ if (leg[i].l == leg[i - 1].l) ++nowl; else{ for (int k = i - 1; k >= i - nowl; --k) ++d[leg[k].d]; nowl = 1; } if (nowl > i / 2) f[i] = 0; else{ int tmp1 = f[i - 1] + leg[i].d; int tmp2 = 0, cnt = 0, lim = i - 2 * nowl + 1; for (int k = 0; k <= 200; ++k){ if (cnt + d[k] >= lim){ tmp2 += k * (lim - cnt); break; } else{ tmp2 += k * d[k]; cnt += d[k]; } } f[i] = min(tmp1, tmp2); } } cout << f[n] << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4053/","text":"4053 Prime Ring \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Prime Ring */ #include <iostream> #include <cmath> using namespace std; bool canplace[17][17]; bool beplaced[17]; int a[20]; int n; bool isp(int x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } bool check(int a[], int n){ for (int i = 0; i <= n - 1; ++i) if (!isp(a[i] + a[i + 1])) return false; return true; } void dfs(int x){ if (x == n + 1){ for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << '\\n'; return; } for (int i = 2 - x % 2; i <= n; i += 2){ if (!beplaced[i] && canplace[i][a[x - 1]]){ if (x == n && !canplace[i][1]) continue; beplaced[i] = true; a[x] = i; dfs(x + 1); a[x] = 0; beplaced[i] = false; } } } int main(){ cin >> n; if (n % 2 != 0){ cout << \"None\" << endl; } for (int i = 2; i <= n; ++i) for (int j = 1; j < i; ++j){ if (isp(i + j)) canplace[i][j] = true; else canplace[i][j] = false; canplace[j][i] = canplace[i][j]; } a[1] = 1; beplaced[1] = true; dfs(2); return 0; }","title":"4053 Prime Ring"},{"location":"nr/4053/#4053-prime-ring","text":"\u8f6c\u5230\u9898\u76ee","title":"4053 Prime Ring"},{"location":"nr/4053/#fineartzs-solution","text":"/* Prime Ring */ #include <iostream> #include <cmath> using namespace std; bool canplace[17][17]; bool beplaced[17]; int a[20]; int n; bool isp(int x){ if (x == 2) return true; for (int i = 2; i <= trunc(sqrt(x)) + 1; ++i) if (x % i == 0) return false; return true; } bool check(int a[], int n){ for (int i = 0; i <= n - 1; ++i) if (!isp(a[i] + a[i + 1])) return false; return true; } void dfs(int x){ if (x == n + 1){ for (int i = 1; i <= n; ++i) cout << a[i] << ' '; cout << '\\n'; return; } for (int i = 2 - x % 2; i <= n; i += 2){ if (!beplaced[i] && canplace[i][a[x - 1]]){ if (x == n && !canplace[i][1]) continue; beplaced[i] = true; a[x] = i; dfs(x + 1); a[x] = 0; beplaced[i] = false; } } } int main(){ cin >> n; if (n % 2 != 0){ cout << \"None\" << endl; } for (int i = 2; i <= n; ++i) for (int j = 1; j < i; ++j){ if (isp(i + j)) canplace[i][j] = true; else canplace[i][j] = false; canplace[j][i] = canplace[i][j]; } a[1] = 1; beplaced[1] = true; dfs(2); return 0; }","title":"FineArtz's solution"},{"location":"nr/4054/","text":"4054 \u4f2a\u56de\u6587\u6570 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4f2a\u56de\u6587\u6570 */ #include <iostream> #include <cmath> using namespace std; inline int firstDigit(long long r){ while (r >= 10) r /= 10; return r; } long long f(long long x){ if (x < 10) return x + 1; return (9 + x / 10 + (int)(x % 10 >= firstDigit(x))); } int main(){ long long l, r; cin >> l >> r; long long ans = f(r) - f(l - 1); cout << ans << endl; return 0; }","title":"4054 \u4f2a\u56de\u6587\u6570"},{"location":"nr/4054/#4054","text":"\u8f6c\u5230\u9898\u76ee","title":"4054 \u4f2a\u56de\u6587\u6570"},{"location":"nr/4054/#fineartzs-solution","text":"/* \u4f2a\u56de\u6587\u6570 */ #include <iostream> #include <cmath> using namespace std; inline int firstDigit(long long r){ while (r >= 10) r /= 10; return r; } long long f(long long x){ if (x < 10) return x + 1; return (9 + x / 10 + (int)(x % 10 >= firstDigit(x))); } int main(){ long long l, r; cin >> l >> r; long long ans = f(r) - f(l - 1); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4057/","text":"4057 \u56de\u6587\u5b57\u7b26\u4e32 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <cstring> #define ODD 1 #define EVEN 0 using namespace std; string input; int length = 0; int Leftrecorder = 0, Rightrecorder = 0; int update(int i, int pattern) { int leftlimit, rightlimit; if (pattern == ODD) { leftlimit = i; rightlimit = i; } else { if (i + 1 >= length || input[i] != input[i + 1]) return 0; leftlimit = i; rightlimit = i + 1; } while (leftlimit - 1 >= 0 && rightlimit + 1 <= length - 1 && input[leftlimit - 1] == input[rightlimit + 1]) { --leftlimit; ++rightlimit; } if (rightlimit - leftlimit > 0 && rightlimit - leftlimit > Rightrecorder - Leftrecorder) { Leftrecorder = leftlimit; Rightrecorder = rightlimit; } } int main() { cin >> input; length = input.length(); for (int i = 0; i < length; ++i) { update(i, ODD); update(i, EVEN); } if (Rightrecorder - Leftrecorder) { cout << Rightrecorder - Leftrecorder + 1 << endl; for (int i = Leftrecorder; i <= Rightrecorder; ++i) cout << input[i]; } else cout << 0; return 0; }","title":"4057 \u56de\u6587\u5b57\u7b26\u4e32"},{"location":"nr/4057/#4057","text":"\u8f6c\u5230\u9898\u76ee","title":"4057 \u56de\u6587\u5b57\u7b26\u4e32"},{"location":"nr/4057/#victrids-solution","text":"#include <iostream> #include <cstring> #define ODD 1 #define EVEN 0 using namespace std; string input; int length = 0; int Leftrecorder = 0, Rightrecorder = 0; int update(int i, int pattern) { int leftlimit, rightlimit; if (pattern == ODD) { leftlimit = i; rightlimit = i; } else { if (i + 1 >= length || input[i] != input[i + 1]) return 0; leftlimit = i; rightlimit = i + 1; } while (leftlimit - 1 >= 0 && rightlimit + 1 <= length - 1 && input[leftlimit - 1] == input[rightlimit + 1]) { --leftlimit; ++rightlimit; } if (rightlimit - leftlimit > 0 && rightlimit - leftlimit > Rightrecorder - Leftrecorder) { Leftrecorder = leftlimit; Rightrecorder = rightlimit; } } int main() { cin >> input; length = input.length(); for (int i = 0; i < length; ++i) { update(i, ODD); update(i, EVEN); } if (Rightrecorder - Leftrecorder) { cout << Rightrecorder - Leftrecorder + 1 << endl; for (int i = Leftrecorder; i <= Rightrecorder; ++i) cout << input[i]; } else cout << 0; return 0; }","title":"VictriD's solution"},{"location":"nr/4059/","text":"4059 \u6c42\u6570\u7ec4\u6700\u5927\u503c\u53ca\u4f4d\u7f6e \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; int main() { int n, tmp, max = 0, pos; scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &tmp); if (tmp > max) { max = tmp; pos = i; } } printf(\"%d %d\", max, pos + 1); return 0; }","title":"4059 \u6c42\u6570\u7ec4\u6700\u5927\u503c\u53ca\u4f4d\u7f6e"},{"location":"nr/4059/#4059","text":"\u8f6c\u5230\u9898\u76ee","title":"4059 \u6c42\u6570\u7ec4\u6700\u5927\u503c\u53ca\u4f4d\u7f6e"},{"location":"nr/4059/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int main() { int n, tmp, max = 0, pos; scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d\", &tmp); if (tmp > max) { max = tmp; pos = i; } } printf(\"%d %d\", max, pos + 1); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4062/","text":"4062 \u65e5\u5929\u5708\u5730 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; long long seq(long long x, long long y) { if (x < y) return seq(y, x); if (y == 0) return 0; return x / y * 4 * y + seq(y, x % y); } int main() { long long x, y; cin >> x >> y; cout << seq(x, y); return 0; } FineArtz's solution /* \u65e5\u5929\u5708\u5730 */ #include <iostream> using namespace std; long long f(long long x, long long y){ long long t, ret; if (x > y){ t = x; x = y; y = t; } ret = 4 * x * (y / x); y = y % x; if (y == 0) return ret; else return ret + f(y, x); } int main(){ long long x, y, ans; cin >> x >> y; ans = f(x, y); cout << ans << endl; return 0; } vvvvv1v's solution #include <iostream> using namespace std; int main() { long int x, y; cin >> x >> y; long int sum = 0; long int tmp; if (x < y) { tmp = x; x = y; y = tmp; } while (y != 0) { sum += y; tmp = x - y; x = (y > tmp ? y : tmp); y = (y < tmp ? y : tmp); } cout << 4 * sum; return 0; } WashWang's solution #include <iostream> using namespace std; long long a,b; long long x(long long a,long long b) { if (b!=0) return a/b*4*b+x(b,a%b); else return 0; } int main() { cin>>a>>b; cout<<x(a,b); return 0; }","title":"4062 \u65e5\u5929\u5708\u5730"},{"location":"nr/4062/#4062","text":"\u8f6c\u5230\u9898\u76ee","title":"4062 \u65e5\u5929\u5708\u5730"},{"location":"nr/4062/#victrids-solution","text":"#include <iostream> using namespace std; long long seq(long long x, long long y) { if (x < y) return seq(y, x); if (y == 0) return 0; return x / y * 4 * y + seq(y, x % y); } int main() { long long x, y; cin >> x >> y; cout << seq(x, y); return 0; }","title":"VictriD's solution"},{"location":"nr/4062/#fineartzs-solution","text":"/* \u65e5\u5929\u5708\u5730 */ #include <iostream> using namespace std; long long f(long long x, long long y){ long long t, ret; if (x > y){ t = x; x = y; y = t; } ret = 4 * x * (y / x); y = y % x; if (y == 0) return ret; else return ret + f(y, x); } int main(){ long long x, y, ans; cin >> x >> y; ans = f(x, y); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4062/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { long int x, y; cin >> x >> y; long int sum = 0; long int tmp; if (x < y) { tmp = x; x = y; y = tmp; } while (y != 0) { sum += y; tmp = x - y; x = (y > tmp ? y : tmp); y = (y < tmp ? y : tmp); } cout << 4 * sum; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4062/#washwangs-solution","text":"#include <iostream> using namespace std; long long a,b; long long x(long long a,long long b) { if (b!=0) return a/b*4*b+x(b,a%b); else return 0; } int main() { cin>>a>>b; cout<<x(a,b); return 0; }","title":"WashWang's solution"},{"location":"nr/4065/","text":"4065 \u6cf7\u7684\u65c5\u9014 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6cf7\u7684\u65c5\u9014 */ #include <iostream> #include <cstring> #include <queue> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: int x = 0, y = 0, step = 0, hp = 0; }; int a[310][310]; int v[310][310]; int n, m; Point st, ed; inline bool check(const Point &p){ return (a[p.x][p.y] != 0 && p.hp > v[p.x][p.y]); } int bfs(Point s, Point e){ queue<Point> q; q.push(s); v[s.x][s.y] = s.hp; Point now; while (!q.empty()){ now = q.front(); q.pop(); if (a[now.x][now.y] == 4) now.hp = 6; if (now.x == e.x && now.y == e.y) return now.step; for (int i = 0; i < 4; ++i){ Point next; next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.hp = now.hp - 1; next.step = now.step + 1; if (check(next)){ v[next.x][next.y] = next.hp; q.push(next); } } } return -1; } int main(){ memset(a, 0, sizeof(a)); memset(v, 0, sizeof(v)); cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; switch(a[i][j]){ case 0: v[i][j] = 10; break; case 2: st.x = i; st.y = j; break; case 3: ed.x = i; ed.y = j; break; default: break; } } } st.hp = 6; cout << bfs(st, ed) << endl;; return 0; } WashWang's solution #include <iostream> using namespace std; int map[302][302],dis[302][302][7],minx,m,n,sx,sy; void dfs(int x,int y,int e,int t) { if (t==0) return; if (e>minx) return; if (map[x][y]==3&&t>0) { minx=min(e,minx); return; } if (map[x][y]==4) t=6; if (dis[x][y][t]!=0&&e>=dis[x][y][t]) return; dis[x][y][t]=e; if (map[x-1][y]) dfs(x-1,y,e+1,t-1); if (map[x+1][y]) dfs(x+1,y,e+1,t-1); if (map[x][y-1]) dfs(x,y-1,e+1,t-1); if (map[x][y+1]) dfs(x,y+1,e+1,t-1); } int main() { cin>>m>>n; for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { cin >> map[i][j]; if (map[i][j]==2){ sx=i; sy=j; } } minx=10000000; dfs(sx,sy,0,6); if (minx<m*n) cout<<minx; else cout<<-1; return 0; }","title":"4065 \u6cf7\u7684\u65c5\u9014"},{"location":"nr/4065/#4065","text":"\u8f6c\u5230\u9898\u76ee","title":"4065 \u6cf7\u7684\u65c5\u9014"},{"location":"nr/4065/#fineartzs-solution","text":"/* \u6cf7\u7684\u65c5\u9014 */ #include <iostream> #include <cstring> #include <queue> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; class Point{ public: int x = 0, y = 0, step = 0, hp = 0; }; int a[310][310]; int v[310][310]; int n, m; Point st, ed; inline bool check(const Point &p){ return (a[p.x][p.y] != 0 && p.hp > v[p.x][p.y]); } int bfs(Point s, Point e){ queue<Point> q; q.push(s); v[s.x][s.y] = s.hp; Point now; while (!q.empty()){ now = q.front(); q.pop(); if (a[now.x][now.y] == 4) now.hp = 6; if (now.x == e.x && now.y == e.y) return now.step; for (int i = 0; i < 4; ++i){ Point next; next.x = now.x + dx[i]; next.y = now.y + dy[i]; next.hp = now.hp - 1; next.step = now.step + 1; if (check(next)){ v[next.x][next.y] = next.hp; q.push(next); } } } return -1; } int main(){ memset(a, 0, sizeof(a)); memset(v, 0, sizeof(v)); cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; switch(a[i][j]){ case 0: v[i][j] = 10; break; case 2: st.x = i; st.y = j; break; case 3: ed.x = i; ed.y = j; break; default: break; } } } st.hp = 6; cout << bfs(st, ed) << endl;; return 0; }","title":"FineArtz's solution"},{"location":"nr/4065/#washwangs-solution","text":"#include <iostream> using namespace std; int map[302][302],dis[302][302][7],minx,m,n,sx,sy; void dfs(int x,int y,int e,int t) { if (t==0) return; if (e>minx) return; if (map[x][y]==3&&t>0) { minx=min(e,minx); return; } if (map[x][y]==4) t=6; if (dis[x][y][t]!=0&&e>=dis[x][y][t]) return; dis[x][y][t]=e; if (map[x-1][y]) dfs(x-1,y,e+1,t-1); if (map[x+1][y]) dfs(x+1,y,e+1,t-1); if (map[x][y-1]) dfs(x,y-1,e+1,t-1); if (map[x][y+1]) dfs(x,y+1,e+1,t-1); } int main() { cin>>m>>n; for (int i=1;i<=m;++i) for (int j=1;j<=n;++j) { cin >> map[i][j]; if (map[i][j]==2){ sx=i; sy=j; } } minx=10000000; dfs(sx,sy,0,6); if (minx<m*n) cout<<minx; else cout<<-1; return 0; }","title":"WashWang's solution"},{"location":"nr/4066/","text":"4066 \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 */ #include <iostream> #include <cmath> using namespace std; long long sqr3(long long x){ long long l = 2, r = 1000000, mid; while (l <= r){ mid = (l + r) / 2; if (mid * mid * mid == x) return mid; if (mid * mid * mid > x) r = mid - 1; else l = mid + 1; } return -1; } int main(){ ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ long long a, b; cin >> a >> b; if (a == 1 && b == 1){ cout << \"Yes\" << '\\n'; continue; } long long t = a * b; long long sq = sqr3(t); if (sq == -1){ cout << \"No\" << '\\n'; continue; } if (a % sq == 0 && b % sq == 0){ cout << \"Yes\" << '\\n'; } else cout << \"No\" << '\\n'; } return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; typedef long long ll; ll root3(ll x) { ll l=1,r=1000000,m; while (l<=r) { m=(l+r)/2; if (m*m*m==x) return m; if (m*m*m<x) l=m+1; else r=m-1; } return 0; } ll a,b,t; int n; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%lld%lld\",&a,&b); if (!(t=root3(a*b))||a%t||b%t) { printf(\"No\\n\"); continue; } printf(\"Yes\\n\"); } return 0; }","title":"4066 \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00"},{"location":"nr/4066/#4066","text":"\u8f6c\u5230\u9898\u76ee","title":"4066 \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00"},{"location":"nr/4066/#fineartzs-solution","text":"/* \u738b\u9a6c\u5c0f\u5409\u7684\u8c0e\u8a00 */ #include <iostream> #include <cmath> using namespace std; long long sqr3(long long x){ long long l = 2, r = 1000000, mid; while (l <= r){ mid = (l + r) / 2; if (mid * mid * mid == x) return mid; if (mid * mid * mid > x) r = mid - 1; else l = mid + 1; } return -1; } int main(){ ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; while (n--){ long long a, b; cin >> a >> b; if (a == 1 && b == 1){ cout << \"Yes\" << '\\n'; continue; } long long t = a * b; long long sq = sqr3(t); if (sq == -1){ cout << \"No\" << '\\n'; continue; } if (a % sq == 0 && b % sq == 0){ cout << \"Yes\" << '\\n'; } else cout << \"No\" << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4066/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; typedef long long ll; ll root3(ll x) { ll l=1,r=1000000,m; while (l<=r) { m=(l+r)/2; if (m*m*m==x) return m; if (m*m*m<x) l=m+1; else r=m-1; } return 0; } ll a,b,t; int n; int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) { scanf(\"%lld%lld\",&a,&b); if (!(t=root3(a*b))||a%t||b%t) { printf(\"No\\n\"); continue; } printf(\"Yes\\n\"); } return 0; }","title":"WashWang's solution"},{"location":"nr/4067/","text":"4067 \u6574\u6570\u52a0\u4e00 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; int main() { char arr[55]; int num[55]; scanf(\"%s\", &arr); int tmp = 1, i, j; for (i = strlen(arr) - 1, j = 0; i >= 0; --i, ++j) { tmp += arr[i] - '0'; num[j] = tmp % 10; tmp /= 10; } if (tmp) num[j++] = tmp; --j; for (; j >= 0; --j) printf(\"%d\", num[j]); return 0; }","title":"4067 \u6574\u6570\u52a0\u4e00"},{"location":"nr/4067/#4067","text":"\u8f6c\u5230\u9898\u76ee","title":"4067 \u6574\u6570\u52a0\u4e00"},{"location":"nr/4067/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int main() { char arr[55]; int num[55]; scanf(\"%s\", &arr); int tmp = 1, i, j; for (i = strlen(arr) - 1, j = 0; i >= 0; --i, ++j) { tmp += arr[i] - '0'; num[j] = tmp % 10; tmp /= 10; } if (tmp) num[j++] = tmp; --j; for (; j >= 0; --j) printf(\"%d\", num[j]); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4071/","text":"4071 Fibonacci\u6570\u5217 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Fibonacci\u6570\u5217 */ #include <iostream> using namespace std; const long long MOD = 1000000007; class matrix{ public: matrix(long long a, long long b, long long c, long long d) : a11(a), a12(b), a21(c), a22(d) {} matrix(const matrix &a) : a11(a.a11), a12(a.a12), a21(a.a21), a22(a.a22) {} long long a11, a12, a21, a22; }; inline matrix operator *(const matrix &m1, const matrix &m2){ matrix ret(0, 0, 0, 0); ret.a11 = (m1.a11 * m2.a11 % MOD + m1.a12 * m2.a21 % MOD) % MOD; ret.a12 = (m1.a11 * m2.a12 % MOD + m1.a12 * m2.a22 % MOD) % MOD; ret.a21 = (m1.a21 * m2.a11 % MOD + m1.a22 * m2.a21 % MOD) % MOD; ret.a22 = (m1.a21 * m2.a12 % MOD + m1.a22 * m2.a22 % MOD) % MOD; return ret; } matrix pow(matrix x, long long n){ matrix ret(1, 0, 0, 1), t(x); while (n != 0){ if (n & 1){ ret = ret * t; } t = t * t; n >>= 1; } return ret; } int main(){ long long n; cin >> n; matrix f(1, 1, 1, 0); f = pow(f, n + 1); cout << f.a21 << endl; }","title":"4071 Fibonacci\u6570\u5217"},{"location":"nr/4071/#4071-fibonacci","text":"\u8f6c\u5230\u9898\u76ee","title":"4071 Fibonacci\u6570\u5217"},{"location":"nr/4071/#fineartzs-solution","text":"/* Fibonacci\u6570\u5217 */ #include <iostream> using namespace std; const long long MOD = 1000000007; class matrix{ public: matrix(long long a, long long b, long long c, long long d) : a11(a), a12(b), a21(c), a22(d) {} matrix(const matrix &a) : a11(a.a11), a12(a.a12), a21(a.a21), a22(a.a22) {} long long a11, a12, a21, a22; }; inline matrix operator *(const matrix &m1, const matrix &m2){ matrix ret(0, 0, 0, 0); ret.a11 = (m1.a11 * m2.a11 % MOD + m1.a12 * m2.a21 % MOD) % MOD; ret.a12 = (m1.a11 * m2.a12 % MOD + m1.a12 * m2.a22 % MOD) % MOD; ret.a21 = (m1.a21 * m2.a11 % MOD + m1.a22 * m2.a21 % MOD) % MOD; ret.a22 = (m1.a21 * m2.a12 % MOD + m1.a22 * m2.a22 % MOD) % MOD; return ret; } matrix pow(matrix x, long long n){ matrix ret(1, 0, 0, 1), t(x); while (n != 0){ if (n & 1){ ret = ret * t; } t = t * t; n >>= 1; } return ret; } int main(){ long long n; cin >> n; matrix f(1, 1, 1, 0); f = pow(f, n + 1); cout << f.a21 << endl; }","title":"FineArtz's solution"},{"location":"nr/4072/","text":"4072 \u65e5\u5929\u5356\u9762\u5305 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u65e5\u5929\u5356\u9762\u5305 */ #include <iostream> #include <map> #include <set> #include <algorithm> #include <cstring> using namespace std; class Point{ public: map<int, int> edge; }; Point a[100005]; set<int> s; bool is[100005]; int n, m, k; int main(){ cin >> n >> m >> k; if (k == 0){ cout << \"-1\" << endl; return 0; } if (n >= 50){ memset(is, 0, sizeof(is)); for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u].edge.find(u) == a[u].edge.end()){ a[u].edge[v] = w; a[v].edge[u] = w; } else{ if (a[u].edge[v] > w){ a[u].edge[v] = w; a[v].edge[u] = w; } } } int ans = 2147483647; int t; for (int i = 1; i <= k; ++i){ cin >> t; s.insert(t); is[t] = true; } for (auto i : s){ for (auto j : a[i].edge){ if (!is[j.first]){ ans = min(ans, j.second); } } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } else{ int a[25][25]; for (int i = 0; i < 25; ++i) for (int j = 0; j < 25; ++j) a[i][j] = -1; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u][v] == -1){ a[u][v] = w; a[v][u] = w; } else{ if (a[u][v] > w){ a[u][v] = w; a[v][u] = w; } } } int s[25]; bool is[25]; memset(is, 0, sizeof(is)); for (int i = 1; i <= k; ++i){ cin >> s[i]; is[s[i]] = true; } int ans = 2147483647; for (int i = 1; i <= k; ++i){ for (int j = 1; j <= n; ++j){ if (is[j]) continue; if (a[s[i]][j] == -1) continue; ans = min(ans, a[s[i]][j]); } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } return 0; }","title":"4072 \u65e5\u5929\u5356\u9762\u5305"},{"location":"nr/4072/#4072","text":"\u8f6c\u5230\u9898\u76ee","title":"4072 \u65e5\u5929\u5356\u9762\u5305"},{"location":"nr/4072/#fineartzs-solution","text":"/* \u65e5\u5929\u5356\u9762\u5305 */ #include <iostream> #include <map> #include <set> #include <algorithm> #include <cstring> using namespace std; class Point{ public: map<int, int> edge; }; Point a[100005]; set<int> s; bool is[100005]; int n, m, k; int main(){ cin >> n >> m >> k; if (k == 0){ cout << \"-1\" << endl; return 0; } if (n >= 50){ memset(is, 0, sizeof(is)); for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u].edge.find(u) == a[u].edge.end()){ a[u].edge[v] = w; a[v].edge[u] = w; } else{ if (a[u].edge[v] > w){ a[u].edge[v] = w; a[v].edge[u] = w; } } } int ans = 2147483647; int t; for (int i = 1; i <= k; ++i){ cin >> t; s.insert(t); is[t] = true; } for (auto i : s){ for (auto j : a[i].edge){ if (!is[j.first]){ ans = min(ans, j.second); } } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } else{ int a[25][25]; for (int i = 0; i < 25; ++i) for (int j = 0; j < 25; ++j) a[i][j] = -1; for (int i = 1; i <= m; ++i){ int u, v, w; cin >> u >> v >> w; if (a[u][v] == -1){ a[u][v] = w; a[v][u] = w; } else{ if (a[u][v] > w){ a[u][v] = w; a[v][u] = w; } } } int s[25]; bool is[25]; memset(is, 0, sizeof(is)); for (int i = 1; i <= k; ++i){ cin >> s[i]; is[s[i]] = true; } int ans = 2147483647; for (int i = 1; i <= k; ++i){ for (int j = 1; j <= n; ++j){ if (is[j]) continue; if (a[s[i]][j] == -1) continue; ans = min(ans, a[s[i]][j]); } } if (ans == 2147483647) cout << \"-1\" << endl; else cout << ans << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4073/","text":"4073 \u73af\u5f0f\u6276\u8d2b \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u73af\u5f0f\u6276\u8d2b */ #include <iostream> #include <map> using namespace std; int main(){ int n, t; long long sum = 0; map<long long, int> m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; sum += t; ++m[sum]; } //for (auto i : m) // cout << i.first << ' ' << i.second << endl; int cnt = 0; for (auto i : m){ if (cnt < i.second) cnt = i.second; } cout << n - cnt << endl; return 0; }","title":"4073 \u73af\u5f0f\u6276\u8d2b"},{"location":"nr/4073/#4073","text":"\u8f6c\u5230\u9898\u76ee","title":"4073 \u73af\u5f0f\u6276\u8d2b"},{"location":"nr/4073/#fineartzs-solution","text":"/* \u73af\u5f0f\u6276\u8d2b */ #include <iostream> #include <map> using namespace std; int main(){ int n, t; long long sum = 0; map<long long, int> m; cin >> n; for (int i = 1; i <= n; ++i){ cin >> t; sum += t; ++m[sum]; } //for (auto i : m) // cout << i.first << ' ' << i.second << endl; int cnt = 0; for (auto i : m){ if (cnt < i.second) cnt = i.second; } cout << n - cnt << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4074/","text":"4074 \u6d2a\u6c34\u518d\u4e34 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int m, n; int a[105][105]; bool b[105][105]; bool v[105][105]; long long ans = 0; bool check(const int &x, const int &y){ return (x >= 0 && y >= 0 && x <= m + 1 && y <= n + 1); } void ff(int x, int y){ Point st; st.x = x; st.y = y; queue<Point> q; q.push(st); Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y)){ if (!b[next.x][next.y] && a[now.x][now.y] <= a[next.x][next.y]){ b[next.x][next.y] = true; q.push(next); } } } } } bool checkw(int x, int y){ Point st; st.x = x; st.y = y; bool vis[105][105]; memset(vis, 0, sizeof(vis)); queue<Point> q; q.push(st); v[st.x][st.y] = true; Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y) && !vis[next.x][next.y]){ if (a[next.x][next.y] < a[now.x][now.y]) return false; if (a[next.x][next.y] == a[now.x][now.y]){ if (b[next.x][next.y]) return false; vis[next.x][next.y] = true; q.push(next); } } } } return true; } bool fill(){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j]) return false; return true; } int main(){ cin >> m >> n; memset(a, 0, sizeof(a)); for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; memset(b, 0, sizeof(b)); ff(0, 0); for (int water = 1; water <= 10000; ++water){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j] && water > a[i][j]){ ++ans; ++a[i][j]; for (int k = 0; k < 4; ++k){ int xx = i + dx[k]; int yy = j + dy[k]; if (a[xx][yy] <= a[i][j] && b[xx][yy]){ ff(xx, yy); break; } } } if (fill()) break; } cout << ans << endl; return 0; }","title":"4074 \u6d2a\u6c34\u518d\u4e34"},{"location":"nr/4074/#4074","text":"\u8f6c\u5230\u9898\u76ee","title":"4074 \u6d2a\u6c34\u518d\u4e34"},{"location":"nr/4074/#fineartzs-solution","text":"/* \u6d2a\u6c34\u6765\u88ad */ #include <iostream> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0, y = 0; }; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; int m, n; int a[105][105]; bool b[105][105]; bool v[105][105]; long long ans = 0; bool check(const int &x, const int &y){ return (x >= 0 && y >= 0 && x <= m + 1 && y <= n + 1); } void ff(int x, int y){ Point st; st.x = x; st.y = y; queue<Point> q; q.push(st); Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y)){ if (!b[next.x][next.y] && a[now.x][now.y] <= a[next.x][next.y]){ b[next.x][next.y] = true; q.push(next); } } } } } bool checkw(int x, int y){ Point st; st.x = x; st.y = y; bool vis[105][105]; memset(vis, 0, sizeof(vis)); queue<Point> q; q.push(st); v[st.x][st.y] = true; Point now, next; while (!q.empty()){ now = q.front(); q.pop(); for (int k = 0; k < 4; ++k){ next.x = now.x + dx[k]; next.y = now.y + dy[k]; if (check(next.x, next.y) && !vis[next.x][next.y]){ if (a[next.x][next.y] < a[now.x][now.y]) return false; if (a[next.x][next.y] == a[now.x][now.y]){ if (b[next.x][next.y]) return false; vis[next.x][next.y] = true; q.push(next); } } } } return true; } bool fill(){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j]) return false; return true; } int main(){ cin >> m >> n; memset(a, 0, sizeof(a)); for (int i = 1; i <= m; ++i) for (int j = 1; j <= n; ++j) cin >> a[i][j]; memset(b, 0, sizeof(b)); ff(0, 0); for (int water = 1; water <= 10000; ++water){ for (int i = 2; i <= m - 1; ++i) for (int j = 2; j <= n - 1; ++j) if (!b[i][j] && water > a[i][j]){ ++ans; ++a[i][j]; for (int k = 0; k < 4; ++k){ int xx = i + dx[k]; int yy = j + dy[k]; if (a[xx][yy] <= a[i][j] && b[xx][yy]){ ff(xx, yy); break; } } } if (fill()) break; } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4077/","text":"4077 \u73a9\u6570 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u73a9\u6570 */ #include <iostream> #include <algorithm> #include <cmath> using namespace std; class num{ public: num() = default; num(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; bool operator >(const num &n){ return ((x * log(2) + y * log(3) - n.x * log(2) - n.y * log(3)) > -1e-6); } friend inline ostream &operator <<(ostream &os, const num &n){ os << n.x << \" \" << n.y; return os; } }; inline num max(num n1, num n2){ return num(max(n1.x, n2.x), max(n1.y, n2.y)); } inline num min(num n1, num n2){ return num(min(n1.x, n2.x), min(n1.y, n2.y)); } num a[50005]; num premax[50005], premin[50005], sufmax[50005], sufmin[50005]; num ansmax[50005], ansmin[50005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; } premax[1] = a[1]; premin[1] = a[1]; for (int i = 2; i <= n; ++i){ premax[i] = max(premax[i - 1], a[i]); premin[i] = min(premin[i - 1], a[i]); } sufmax[n] = a[n]; sufmin[n] = a[n]; for (int i = n - 1; i >= 1; --i){ sufmax[i] = max(sufmax[i + 1], a[i]); sufmin[i] = min(sufmin[i + 1], a[i]); } ansmax[1] = premax[n]; ansmin[1] = premax[n]; if (n >= 3){ num nowmin, minn; nowmin = min(a[1], sufmax[2]); for (int i = 2; i <= n - 1; ++i){ minn = max(premax[i - 1], sufmax[i + 1]); minn = min(minn, a[i]); if (nowmin > minn) nowmin = minn; } minn = min(premax[n - 1], a[n]); if (nowmin > minn) nowmin = minn; ansmin[2] = nowmin; } if (n > 3){ ansmax[2] = premax[n]; } for (int k = 3; k <= n - 2; ++k){ ansmax[k] = premax[n]; ansmin[k] = premin[n]; } if (n > 3){ ansmin[n - 1] = premin[n]; } if (n >= 3){ num nowmax, maxx; nowmax = max(a[1], sufmin[2]); for (int i = 2; i <= n - 1; ++i){ maxx = min(premin[i - 1], sufmin[i + 1]); maxx = max(maxx, a[i]); if (maxx > nowmax) nowmax = maxx; } maxx = max(premin[n - 1], a[n]); if (maxx > nowmax) nowmax = maxx; ansmax[n - 1] = nowmax; } ansmax[n] = sufmin[1]; ansmin[n] = sufmin[1]; for (int i = 1; i <= n; ++i) cout << ansmax[i] << \" \" << ansmin[i] << '\\n'; return 0; }","title":"4077 \u73a9\u6570"},{"location":"nr/4077/#4077","text":"\u8f6c\u5230\u9898\u76ee","title":"4077 \u73a9\u6570"},{"location":"nr/4077/#fineartzs-solution","text":"/* \u73a9\u6570 */ #include <iostream> #include <algorithm> #include <cmath> using namespace std; class num{ public: num() = default; num(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; bool operator >(const num &n){ return ((x * log(2) + y * log(3) - n.x * log(2) - n.y * log(3)) > -1e-6); } friend inline ostream &operator <<(ostream &os, const num &n){ os << n.x << \" \" << n.y; return os; } }; inline num max(num n1, num n2){ return num(max(n1.x, n2.x), max(n1.y, n2.y)); } inline num min(num n1, num n2){ return num(min(n1.x, n2.x), min(n1.y, n2.y)); } num a[50005]; num premax[50005], premin[50005], sufmax[50005], sufmin[50005]; num ansmax[50005], ansmin[50005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); int n; cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i].x >> a[i].y; } premax[1] = a[1]; premin[1] = a[1]; for (int i = 2; i <= n; ++i){ premax[i] = max(premax[i - 1], a[i]); premin[i] = min(premin[i - 1], a[i]); } sufmax[n] = a[n]; sufmin[n] = a[n]; for (int i = n - 1; i >= 1; --i){ sufmax[i] = max(sufmax[i + 1], a[i]); sufmin[i] = min(sufmin[i + 1], a[i]); } ansmax[1] = premax[n]; ansmin[1] = premax[n]; if (n >= 3){ num nowmin, minn; nowmin = min(a[1], sufmax[2]); for (int i = 2; i <= n - 1; ++i){ minn = max(premax[i - 1], sufmax[i + 1]); minn = min(minn, a[i]); if (nowmin > minn) nowmin = minn; } minn = min(premax[n - 1], a[n]); if (nowmin > minn) nowmin = minn; ansmin[2] = nowmin; } if (n > 3){ ansmax[2] = premax[n]; } for (int k = 3; k <= n - 2; ++k){ ansmax[k] = premax[n]; ansmin[k] = premin[n]; } if (n > 3){ ansmin[n - 1] = premin[n]; } if (n >= 3){ num nowmax, maxx; nowmax = max(a[1], sufmin[2]); for (int i = 2; i <= n - 1; ++i){ maxx = min(premin[i - 1], sufmin[i + 1]); maxx = max(maxx, a[i]); if (maxx > nowmax) nowmax = maxx; } maxx = max(premin[n - 1], a[n]); if (maxx > nowmax) nowmax = maxx; ansmax[n - 1] = nowmax; } ansmax[n] = sufmin[1]; ansmin[n] = sufmin[1]; for (int i = 1; i <= n; ++i) cout << ansmax[i] << \" \" << ansmin[i] << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/4081/","text":"4081 \u4fa0\u76d7\u7f57\u5bbe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u4fa0\u76d7\u7f57\u5bbe */ #include <iostream> #include <map> #include <algorithm> using namespace std; int n, k; map<int, long long> w; int main(){ cin >> n >> k; int maxx = 0, minn = 1000000005; long long sum = 0; for (long long i = 1; i <= n; ++i){ int t; cin >> t; ++w[t]; maxx = max(maxx, t); minn = min(minn, t); sum += t; } long long p = 0, pp = 0, r = 0, rr = 0; for (auto i = w.begin(); ; ++i){ if (pp + i->second > n / 2) break; pp += i->second; p += i->first * i->second; } for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (rr + i->second > n / 2) break; rr += i->second; r += i->first * i->second; } if (r - p <= 2 * k){ if (sum % n == 0) cout << 0 << endl; else cout << 1 << endl; return 0; } int kk = k, mp = minn, tp = w[minn]; for (auto i = w.begin(); ; ++i){ if (i == w.begin()) continue; if ((i->first - mp) * tp > kk){ mp += kk / tp; break; } kk -= (i->first - mp) * tp; mp = i->first; tp += i->second; } int mr = maxx, tr = w[maxx]; kk = k; for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (i->first == maxx) continue; if ((mr - i->first) * tr > kk){ mr -= kk / tr; break; } kk -= (mr - i->first) * tr; mr = i->first; tr += i->second; } cout << mr - mp << endl; return 0; }","title":"4081 \u4fa0\u76d7\u7f57\u5bbe"},{"location":"nr/4081/#4081","text":"\u8f6c\u5230\u9898\u76ee","title":"4081 \u4fa0\u76d7\u7f57\u5bbe"},{"location":"nr/4081/#fineartzs-solution","text":"/* \u4fa0\u76d7\u7f57\u5bbe */ #include <iostream> #include <map> #include <algorithm> using namespace std; int n, k; map<int, long long> w; int main(){ cin >> n >> k; int maxx = 0, minn = 1000000005; long long sum = 0; for (long long i = 1; i <= n; ++i){ int t; cin >> t; ++w[t]; maxx = max(maxx, t); minn = min(minn, t); sum += t; } long long p = 0, pp = 0, r = 0, rr = 0; for (auto i = w.begin(); ; ++i){ if (pp + i->second > n / 2) break; pp += i->second; p += i->first * i->second; } for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (rr + i->second > n / 2) break; rr += i->second; r += i->first * i->second; } if (r - p <= 2 * k){ if (sum % n == 0) cout << 0 << endl; else cout << 1 << endl; return 0; } int kk = k, mp = minn, tp = w[minn]; for (auto i = w.begin(); ; ++i){ if (i == w.begin()) continue; if ((i->first - mp) * tp > kk){ mp += kk / tp; break; } kk -= (i->first - mp) * tp; mp = i->first; tp += i->second; } int mr = maxx, tr = w[maxx]; kk = k; for (auto i = w.end(); ; --i){ if (i == w.end()) continue; if (i->first == maxx) continue; if ((mr - i->first) * tr > kk){ mr -= kk / tr; break; } kk -= (mr - i->first) * tr; mr = i->first; tr += i->second; } cout << mr - mp << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4082/","text":"4082 \u56db\u901a\u516b\u8fbe \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u56db\u901a\u516b\u8fbe */ #include <iostream> #include <vector> #include <map> #include <set> #include <algorithm> using namespace std; class edge{ public: edge(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; int parent[1000005]; int v[1000005] = {0}; vector<edge> e; map<int, set<int>> ee; int n, m, cnt = 0; long long ans; int find(int x){ while (parent[x] != x){ parent[x] = parent[parent[x]]; x = parent[x]; } return x; } int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >>y; if (x == y) continue; if (ee.find(x) != ee.end()){ if (ee[x].find(y) != ee[x].end()) continue; } ++cnt; e.emplace_back(x, y); ee[x].insert(y); ee[y].insert(x); } for (int i = 0; i <= n; ++i) parent[i] = i; for (auto i : e){ int p = find(i.x); int q = find(i.y); if (p != q) parent[p] = q; } for (int i = 0; i <= n; ++i) parent[i] = find(i); for (int i = 0; i <= n; ++i) ++v[parent[i]]; for (int i = 0; i <= n; ++i){ if (v[i] != 0){ ans += v[i] * (v[i] - 1) / 2; } } cout << ans - cnt << endl; return 0; }","title":"4082 \u56db\u901a\u516b\u8fbe"},{"location":"nr/4082/#4082","text":"\u8f6c\u5230\u9898\u76ee","title":"4082 \u56db\u901a\u516b\u8fbe"},{"location":"nr/4082/#fineartzs-solution","text":"/* \u56db\u901a\u516b\u8fbe */ #include <iostream> #include <vector> #include <map> #include <set> #include <algorithm> using namespace std; class edge{ public: edge(int xx, int yy) : x(xx), y(yy) {} int x = 0, y = 0; }; int parent[1000005]; int v[1000005] = {0}; vector<edge> e; map<int, set<int>> ee; int n, m, cnt = 0; long long ans; int find(int x){ while (parent[x] != x){ parent[x] = parent[parent[x]]; x = parent[x]; } return x; } int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >>y; if (x == y) continue; if (ee.find(x) != ee.end()){ if (ee[x].find(y) != ee[x].end()) continue; } ++cnt; e.emplace_back(x, y); ee[x].insert(y); ee[y].insert(x); } for (int i = 0; i <= n; ++i) parent[i] = i; for (auto i : e){ int p = find(i.x); int q = find(i.y); if (p != q) parent[p] = q; } for (int i = 0; i <= n; ++i) parent[i] = find(i); for (int i = 0; i <= n; ++i) ++v[parent[i]]; for (int i = 0; i <= n; ++i){ if (v[i] != 0){ ans += v[i] * (v[i] - 1) / 2; } } cout << ans - cnt << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4084/","text":"4084 \u5343\u5c9b\u6a31 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5343\u5c9b\u6a31 */ #include <iostream> #include <vector> using namespace std; class Node{ public: int sub = 0; int father = 0; vector<int> child; }; Node a[500005]; bool sa[500005] = {0}; int n, k; long long ans = 0; void makeTree(int x){ if (sa[x]) a[x].sub = 1; for (auto i : a[x].child){ if (i != a[x].father){ a[i].father = x; makeTree(i); a[x].sub += a[i].sub; } } return; } void countDis(int x){ for (auto i : a[x].child){ if (i != a[x].father){ ans += min(a[i].sub, 2 * k - a[i].sub); countDis(i); } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i <= 2 * k; ++i){ int x; cin >> x; sa[x] = true; } for (int i = 1; i <= n - 1; ++i){ int x, y; cin >> x >> y; a[x].child.push_back(y); a[y].child.push_back(x); } makeTree(1); countDis(1); cout << ans << endl; return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; int num,maxl,x,y,last[510000],nxt[1010000],to[1010000],son[510000],n,k; bool vis[510000]; void add(int x,int y){ to[++num]=y; nxt[num]=last[x]; last[x]=num; } void dfs(int x){ int y; vis[x]=true; for (int i=last[x];i!=0;i=nxt[i]) { y=to[i]; if (vis[y]) continue; dfs(y); son[x]+=son[y]; } maxl+=min(son[x],2*k-son[x]);//\u9700\u8981\u201c\u6d41\u5411\u201d\u8be5\u70b9\u7236\u4eb2\u7684\u8fb9\u7684\u6570\u91cf } int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<2*k;++i) { scanf(\"%d\",&x); son[x]=1; } for (int i=0;i<n-1;++i) { scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } dfs(1); printf(\"%d\",maxl); return 0; }","title":"4084 \u5343\u5c9b\u6a31"},{"location":"nr/4084/#4084","text":"\u8f6c\u5230\u9898\u76ee","title":"4084 \u5343\u5c9b\u6a31"},{"location":"nr/4084/#fineartzs-solution","text":"/* \u5343\u5c9b\u6a31 */ #include <iostream> #include <vector> using namespace std; class Node{ public: int sub = 0; int father = 0; vector<int> child; }; Node a[500005]; bool sa[500005] = {0}; int n, k; long long ans = 0; void makeTree(int x){ if (sa[x]) a[x].sub = 1; for (auto i : a[x].child){ if (i != a[x].father){ a[i].father = x; makeTree(i); a[x].sub += a[i].sub; } } return; } void countDis(int x){ for (auto i : a[x].child){ if (i != a[x].father){ ans += min(a[i].sub, 2 * k - a[i].sub); countDis(i); } } } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> k; for (int i = 1; i <= 2 * k; ++i){ int x; cin >> x; sa[x] = true; } for (int i = 1; i <= n - 1; ++i){ int x, y; cin >> x >> y; a[x].child.push_back(y); a[y].child.push_back(x); } makeTree(1); countDis(1); cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4084/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int num,maxl,x,y,last[510000],nxt[1010000],to[1010000],son[510000],n,k; bool vis[510000]; void add(int x,int y){ to[++num]=y; nxt[num]=last[x]; last[x]=num; } void dfs(int x){ int y; vis[x]=true; for (int i=last[x];i!=0;i=nxt[i]) { y=to[i]; if (vis[y]) continue; dfs(y); son[x]+=son[y]; } maxl+=min(son[x],2*k-son[x]);//\u9700\u8981\u201c\u6d41\u5411\u201d\u8be5\u70b9\u7236\u4eb2\u7684\u8fb9\u7684\u6570\u91cf } int main() { scanf(\"%d%d\",&n,&k); for (int i=0;i<2*k;++i) { scanf(\"%d\",&x); son[x]=1; } for (int i=0;i<n-1;++i) { scanf(\"%d%d\",&x,&y); add(x,y); add(y,x); } dfs(1); printf(\"%d\",maxl); return 0; }","title":"WashWang's solution"},{"location":"nr/4087/","text":"4087 \u65e5\u5929\u90e8\u843d \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u65e5\u5929\u90e8\u843d */ #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0; int y = 0; }; bool cmp(Point p1, Point p2){ return (p1.x < p2.x || p1.x == p2.x && p1.y < p2.y); } Point p[150005], pos[150005]; bool v[150005] = {0}; int n, m; bool bfs(int st){ queue<int> q; q.push(st); v[st] = true; int now, next; int person = 1, battle = 0; while (!q.empty()){ now = q.front(); q.pop(); for (int k = pos[now].x; k <= pos[now].y; ++k){ if (k == 0) break; next = p[k].y; ++battle; if (v[next]) continue; ++person; q.push(next); v[next] = true; } } return (battle == person * (person - 1) / 2); } int main(){ cin >> n >> m; memset(v, 0, sizeof(v)); for (int i = 1; i <= m; ++i){ cin >> p[i].x >> p[i].y; if (p[i].x > p[i].y){ int t = p[i].x; p[i].x = p[i].y; p[i].y = t; } } sort(p + 1, p + m + 1, cmp); pos[p[1].x].x = 1; for (int i = 2; i <= m; ++i){ if (p[i].x != p[i - 1].x){ pos[p[i - 1].x].y = i - 1; pos[p[i].x].x = i; } } pos[p[m].x].y = m; for (int i = 1; i <= m; ++i){ if (!v[i]){ bool flag = bfs(i); if (!flag){ cout << \"NO\" << endl; return 0; } } } cout << \"YES\" << endl; return 0; } WashWang's solution #include <cstdio> using namespace std; int p[200000],fa[200000],num[200000],n,m,x,y; int root(int x)//\u5e76\u67e5\u96c6 \u8def\u5f84\u538b\u7f29 { if (fa[x]==0) return x; else return fa[x]=root(fa[x]); } void unionset(int x,int y){ int s=root(x),t=root(y); if (s!=t) { fa[s]=t; num[t]+=num[s];//\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 \u6570\u91cf\u76f8\u52a0 } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){num[i]=1;} for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); unionset(x,y); p[x]++; p[y]++; } for (int i=1;i<=n;++i) { if (p[i]!=num[root(i)]-1) { printf(\"NO\"); return 0; } } printf(\"YES\"); return 0; }","title":"4087 \u65e5\u5929\u90e8\u843d"},{"location":"nr/4087/#4087","text":"\u8f6c\u5230\u9898\u76ee","title":"4087 \u65e5\u5929\u90e8\u843d"},{"location":"nr/4087/#fineartzs-solution","text":"/* \u65e5\u5929\u90e8\u843d */ #include <iostream> #include <algorithm> #include <cstring> #include <queue> using namespace std; class Point{ public: int x = 0; int y = 0; }; bool cmp(Point p1, Point p2){ return (p1.x < p2.x || p1.x == p2.x && p1.y < p2.y); } Point p[150005], pos[150005]; bool v[150005] = {0}; int n, m; bool bfs(int st){ queue<int> q; q.push(st); v[st] = true; int now, next; int person = 1, battle = 0; while (!q.empty()){ now = q.front(); q.pop(); for (int k = pos[now].x; k <= pos[now].y; ++k){ if (k == 0) break; next = p[k].y; ++battle; if (v[next]) continue; ++person; q.push(next); v[next] = true; } } return (battle == person * (person - 1) / 2); } int main(){ cin >> n >> m; memset(v, 0, sizeof(v)); for (int i = 1; i <= m; ++i){ cin >> p[i].x >> p[i].y; if (p[i].x > p[i].y){ int t = p[i].x; p[i].x = p[i].y; p[i].y = t; } } sort(p + 1, p + m + 1, cmp); pos[p[1].x].x = 1; for (int i = 2; i <= m; ++i){ if (p[i].x != p[i - 1].x){ pos[p[i - 1].x].y = i - 1; pos[p[i].x].x = i; } } pos[p[m].x].y = m; for (int i = 1; i <= m; ++i){ if (!v[i]){ bool flag = bfs(i); if (!flag){ cout << \"NO\" << endl; return 0; } } } cout << \"YES\" << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4087/#washwangs-solution","text":"#include <cstdio> using namespace std; int p[200000],fa[200000],num[200000],n,m,x,y; int root(int x)//\u5e76\u67e5\u96c6 \u8def\u5f84\u538b\u7f29 { if (fa[x]==0) return x; else return fa[x]=root(fa[x]); } void unionset(int x,int y){ int s=root(x),t=root(y); if (s!=t) { fa[s]=t; num[t]+=num[s];//\u4e24\u4e2a\u96c6\u5408\u5408\u5e76 \u6570\u91cf\u76f8\u52a0 } } int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i){num[i]=1;} for (int i=0;i<m;++i) { scanf(\"%d%d\",&x,&y); unionset(x,y); p[x]++; p[y]++; } for (int i=1;i<=n;++i) { if (p[i]!=num[root(i)]-1) { printf(\"NO\"); return 0; } } printf(\"YES\"); return 0; }","title":"WashWang's solution"},{"location":"nr/4088/","text":"4088 \u8fd0\u52a8\u6821\u56ed \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u8fd0\u52a8\u6821\u56ed */ #include <iostream> #include <cmath> using namespace std; int main(){ long long f, T, t0, a1, t1, p1, a2, t2, p2; cin >> f >> T >> t0; cin >> a1 >> t1 >> p1; cin >> a2 >> t2 >> p2; long long c1 = -a1 * (t1 - t0), c2 = -a2 * (t2 - t0), n = -T + f * t0; long long ans = 10000000000000000ll, y = 0, z = 0; if (n <= 0){ cout << \"0\" << endl; return 0; } if (c1 <= 0 && c2 <= 0){ cout << \"-1\" << endl; return 0; } if (c1 <= 0){ z = n / c2; if (n % c2 != 0) ++z; cout << z * p2 << endl; return 0; } if (c2 <= 0){ y = n / c1; if (n % c1 != 0) ++y; cout << y * p1 << endl; return 0; } for (long long y = 0; ; ++y){ long long t = n - c1 * y; if (t <= 0) z = 0; else{ z = t / c2; if (t % c2 != 0) ++z; } long long p = y * p1 + z * p2; if (ans > p) ans = p; if (t <= 0) break; } if (ans == 10000000000000000ll) cout << \"-1\" << endl; else cout << ans << endl; return 0; }","title":"4088 \u8fd0\u52a8\u6821\u56ed"},{"location":"nr/4088/#4088","text":"\u8f6c\u5230\u9898\u76ee","title":"4088 \u8fd0\u52a8\u6821\u56ed"},{"location":"nr/4088/#fineartzs-solution","text":"/* \u8fd0\u52a8\u6821\u56ed */ #include <iostream> #include <cmath> using namespace std; int main(){ long long f, T, t0, a1, t1, p1, a2, t2, p2; cin >> f >> T >> t0; cin >> a1 >> t1 >> p1; cin >> a2 >> t2 >> p2; long long c1 = -a1 * (t1 - t0), c2 = -a2 * (t2 - t0), n = -T + f * t0; long long ans = 10000000000000000ll, y = 0, z = 0; if (n <= 0){ cout << \"0\" << endl; return 0; } if (c1 <= 0 && c2 <= 0){ cout << \"-1\" << endl; return 0; } if (c1 <= 0){ z = n / c2; if (n % c2 != 0) ++z; cout << z * p2 << endl; return 0; } if (c2 <= 0){ y = n / c1; if (n % c1 != 0) ++y; cout << y * p1 << endl; return 0; } for (long long y = 0; ; ++y){ long long t = n - c1 * y; if (t <= 0) z = 0; else{ z = t / c2; if (t % c2 != 0) ++z; } long long p = y * p1 + z * p2; if (ans > p) ans = p; if (t <= 0) break; } if (ans == 10000000000000000ll) cout << \"-1\" << endl; else cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4089/","text":"4089 \u7ea6\u745f\u592b\u73af \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u7ea6\u745f\u592b\u73af */ #include <iostream> using namespace std; class Node{ public: int index; Node *next; }; int main(){ int n, m; cin >> n >> m; Node *head, *p, *q; head = p = new Node; p->index = 0; for (int i = 2; i <= n; ++i){ q = new Node; q->index = i - 1; p->next = q; p = q; } p->next = head; q = head->next; while (q->next != q){ for (int i = 1; i < m; ++i){ p = q; q = q->next; } cout << q->index + 1 << \" \"; p->next = q->next; delete q; q = p->next; } cout << q->index + 1 << endl; delete q; return 0; }","title":"4089 \u7ea6\u745f\u592b\u73af"},{"location":"nr/4089/#4089","text":"\u8f6c\u5230\u9898\u76ee","title":"4089 \u7ea6\u745f\u592b\u73af"},{"location":"nr/4089/#fineartzs-solution","text":"/* \u7ea6\u745f\u592b\u73af */ #include <iostream> using namespace std; class Node{ public: int index; Node *next; }; int main(){ int n, m; cin >> n >> m; Node *head, *p, *q; head = p = new Node; p->index = 0; for (int i = 2; i <= n; ++i){ q = new Node; q->index = i - 1; p->next = q; p = q; } p->next = head; q = head->next; while (q->next != q){ for (int i = 1; i < m; ++i){ p = q; q = q->next; } cout << q->index + 1 << \" \"; p->next = q->next; delete q; q = p->next; } cout << q->index + 1 << endl; delete q; return 0; }","title":"FineArtz's solution"},{"location":"nr/4093/","text":"4093 Candy \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Candy */ #include <iostream> using namespace std; class Node{ public: int pack = 0, candy = 0; Node() = default; Node(int p, int c) : pack(p), candy(c) {} bool operator <(const Node &n){ return candy < n.candy; } }; class Heap{ public: Node a[200005]; int heapsize = 0; void swap(int x, int y){ Node t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x > 1){ if (a[x / 2] < a[x]){ swap(x, x / 2); x /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } void insert(const Node &n){ a[++heapsize] = n; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } Node getMax(){ return a[1]; } }; Heap heap; int n, m; int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >> y; heap.insert(Node(x, y)); } long long ans = 0; while (n != 0 && heap.heapsize != 0){ Node t = heap.getMax(); if (n < t.pack){ ans += n * (long long)t.candy; break; } else{ ans += (long long)t.pack * t.candy; n -= t.pack; heap.remove(); } } cout << ans << endl; return 0; } WashWang's solution #include <cstdio> using namespace std; int m,a,b; long long n,ans,num[200001]; int main() { scanf(\"%lld%d\",&n,&m); for (int i=0;i<m;++i){ scanf(\"%d%d\",&a,&b); num[b]+=a; } for (int i=200000;i>=1;--i) { if (n>=num[i]) { ans += num[i] * i; n -= num[i]; } else{ ans+=n*i; break; } } printf(\"%lld\",ans); return 0; }","title":"4093 Candy"},{"location":"nr/4093/#4093-candy","text":"\u8f6c\u5230\u9898\u76ee","title":"4093 Candy"},{"location":"nr/4093/#fineartzs-solution","text":"/* Candy */ #include <iostream> using namespace std; class Node{ public: int pack = 0, candy = 0; Node() = default; Node(int p, int c) : pack(p), candy(c) {} bool operator <(const Node &n){ return candy < n.candy; } }; class Heap{ public: Node a[200005]; int heapsize = 0; void swap(int x, int y){ Node t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x > 1){ if (a[x / 2] < a[x]){ swap(x, x / 2); x /= 2; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] < a[i + 1]) ++i; if (a[i / 2] < a[i]){ swap(i, i / 2); i *= 2; } else break; } } void insert(const Node &n){ a[++heapsize] = n; siftup(heapsize); } void remove(){ swap(1, heapsize); --heapsize; siftdown(); } Node getMax(){ return a[1]; } }; Heap heap; int n, m; int main(){ cin >> n >> m; for (int i = 1; i <= m; ++i){ int x, y; cin >> x >> y; heap.insert(Node(x, y)); } long long ans = 0; while (n != 0 && heap.heapsize != 0){ Node t = heap.getMax(); if (n < t.pack){ ans += n * (long long)t.candy; break; } else{ ans += (long long)t.pack * t.candy; n -= t.pack; heap.remove(); } } cout << ans << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4093/#washwangs-solution","text":"#include <cstdio> using namespace std; int m,a,b; long long n,ans,num[200001]; int main() { scanf(\"%lld%d\",&n,&m); for (int i=0;i<m;++i){ scanf(\"%d%d\",&a,&b); num[b]+=a; } for (int i=200000;i>=1;--i) { if (n>=num[i]) { ans += num[i] * i; n -= num[i]; } else{ ans+=n*i; break; } } printf(\"%lld\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/4094/","text":"4094 Tanning Salon \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <unordered_map> #include <vector> using namespace std; int check() { int bednum = 0; int current = 0; int badcustomer = 0; cin >> bednum; if (!bednum) return -1; char process = cin.get(); unordered_map<char, int> jiten; while (cin.get(process) && process != '\\n') { if (jiten.find(process) == jiten.end()) { jiten[process] = 1; current++; if (current > bednum) { current--; jiten[process] = 2; badcustomer++; } } else { if (jiten[process] != 2) current--; jiten[process] = 0; } } return badcustomer; } int main() { vector<int> board; int process = check(); while (process != -1) { board.push_back(process); process = check(); } for (auto it = board.begin(); it < board.end(); it++) { if (it != board.begin()) cout << endl; cout << (*it ? to_string(*it) + \" customer(s) walked away.\" : \"All customers tanned successfully.\"); } return 0; } FineArtz's solution /* Tanning Salon */ #include <iostream> #include <cstring> using namespace std; void solve(int n){ int a[27] = {0}, b[27] = {0}; char s[1000]; cin >> s; int m = 0, ans = 0, len = strlen(s); for (int i = 0; i < len; ++i){ char ch = s[i]; if (m < n){ if (a[ch - 'A'] == 0){ ++m; a[ch - 'A'] = 1; } else{ --m; a[ch - 'A'] = 0; } } else{ if (a[ch - 'A'] == 1){ --m; a[ch - 'A'] = 0; } else if (b[ch - 'A'] == 0){ ++ans; b[ch - 'A'] = 1; } } } if (ans) cout << ans << \" customer(s) walked away.\" << endl; else cout << \"All customers tanned successfully.\" << endl; } int main(){ int n; cin >> n; while (n != 0){ solve(n); cin >> n; } return 0; }","title":"4094 Tanning Salon"},{"location":"nr/4094/#4094-tanning-salon","text":"\u8f6c\u5230\u9898\u76ee","title":"4094 Tanning Salon"},{"location":"nr/4094/#victrids-solution","text":"#include <iostream> #include <unordered_map> #include <vector> using namespace std; int check() { int bednum = 0; int current = 0; int badcustomer = 0; cin >> bednum; if (!bednum) return -1; char process = cin.get(); unordered_map<char, int> jiten; while (cin.get(process) && process != '\\n') { if (jiten.find(process) == jiten.end()) { jiten[process] = 1; current++; if (current > bednum) { current--; jiten[process] = 2; badcustomer++; } } else { if (jiten[process] != 2) current--; jiten[process] = 0; } } return badcustomer; } int main() { vector<int> board; int process = check(); while (process != -1) { board.push_back(process); process = check(); } for (auto it = board.begin(); it < board.end(); it++) { if (it != board.begin()) cout << endl; cout << (*it ? to_string(*it) + \" customer(s) walked away.\" : \"All customers tanned successfully.\"); } return 0; }","title":"VictriD's solution"},{"location":"nr/4094/#fineartzs-solution","text":"/* Tanning Salon */ #include <iostream> #include <cstring> using namespace std; void solve(int n){ int a[27] = {0}, b[27] = {0}; char s[1000]; cin >> s; int m = 0, ans = 0, len = strlen(s); for (int i = 0; i < len; ++i){ char ch = s[i]; if (m < n){ if (a[ch - 'A'] == 0){ ++m; a[ch - 'A'] = 1; } else{ --m; a[ch - 'A'] = 0; } } else{ if (a[ch - 'A'] == 1){ --m; a[ch - 'A'] = 0; } else if (b[ch - 'A'] == 0){ ++ans; b[ch - 'A'] = 1; } } } if (ans) cout << ans << \" customer(s) walked away.\" << endl; else cout << \"All customers tanned successfully.\" << endl; } int main(){ int n; cin >> n; while (n != 0){ solve(n); cin >> n; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4095/","text":"4095 \u6625\u6a31\u5bf9\u51b3 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u6625\u6a31\u5bf9\u51b3 */ #include <iostream> using namespace std; class Node{ public: int sum = 0, l = 0, r = 0; }; int n, m, ans = 0; Node a[100005 * 4]; bool b[100005]; void buildTree(int x, int l, int r){ if (l == r){ a[x].sum = 1; a[x].l = l; a[x].r = r; return; } a[x].l = l; a[x].r = r; int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int sum(int l, int r, int x = 1){ if (l <= a[x].l && r >= a[x].r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (l <= mid) ret += sum(l, r, x * 2); if (r > mid) ret += sum(l, r, x * 2 + 1); return ret; } void del(int y, int x = 1){ if (a[x].l == y && a[x].r == y){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (y <= mid) del(y, x * 2); else del(y, x * 2 + 1); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int count(int k, int p, int &d){ if (d == 1){ int l = k, r = n - 1, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(k, mid); if (t == p + 1){ if (b[mid]) break; else r = mid - 1; } else if (t < p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(mid, n - 1) != 0){ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(mid, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = l; } else{ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = r; d = -1; } } else{ int l = 0, r = k, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(mid, k); if (t == p + 1){ if (b[mid]) break; else l = mid + 1; } else if (t > p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(0, mid) != 0){ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = l; } else{ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(0, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = r; d = 1; } } return k; } int main(){ cin >> n >> m; --m; for (int i = 0; i < n; ++i) b[i] = true; buildTree(1, 0, n - 1); int d = 1, k = 0; for (int i = n; i > 1; --i){ int p = m % (2 * i - 2); if (d == 1){ int t = sum(k, n - 1); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } d = -1; k = count(r, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } k = count(l, p - t - i + 2, d); } } else{ int t = sum(0, k); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } d = 1; k = count(l, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } k = count(r, p - t - i + 2, d); } } } cout << ++k << endl; return 0; }","title":"4095 \u6625\u6a31\u5bf9\u51b3"},{"location":"nr/4095/#4095","text":"\u8f6c\u5230\u9898\u76ee","title":"4095 \u6625\u6a31\u5bf9\u51b3"},{"location":"nr/4095/#fineartzs-solution","text":"/* \u6625\u6a31\u5bf9\u51b3 */ #include <iostream> using namespace std; class Node{ public: int sum = 0, l = 0, r = 0; }; int n, m, ans = 0; Node a[100005 * 4]; bool b[100005]; void buildTree(int x, int l, int r){ if (l == r){ a[x].sum = 1; a[x].l = l; a[x].r = r; return; } a[x].l = l; a[x].r = r; int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int sum(int l, int r, int x = 1){ if (l <= a[x].l && r >= a[x].r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (l <= mid) ret += sum(l, r, x * 2); if (r > mid) ret += sum(l, r, x * 2 + 1); return ret; } void del(int y, int x = 1){ if (a[x].l == y && a[x].r == y){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (y <= mid) del(y, x * 2); else del(y, x * 2 + 1); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int count(int k, int p, int &d){ if (d == 1){ int l = k, r = n - 1, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(k, mid); if (t == p + 1){ if (b[mid]) break; else r = mid - 1; } else if (t < p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(mid, n - 1) != 0){ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(mid, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = l; } else{ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = r; d = -1; } } else{ int l = 0, r = k, mid; while (l <= r){ mid = (l + r) / 2; int t = sum(mid, k); if (t == p + 1){ if (b[mid]) break; else l = mid + 1; } else if (t > p + 1) l = mid + 1; else r = mid - 1; } del(mid); b[mid] = false; if (sum(0, mid) != 0){ l = 0; r = mid - 1; int mid2; while (l < r){ mid2 = (l + r) / 2 + (l + r) % 2; if (sum(mid2, mid) >= 1) l = mid2; else r = mid2 - 1; } k = l; } else{ l = mid + 1; r = n - 1; int mid2; while (l < r){ mid2 = (l + r) / 2; if (sum(0, mid2) >= 1) r = mid2; else l = mid2 + 1; } k = r; d = 1; } } return k; } int main(){ cin >> n >> m; --m; for (int i = 0; i < n; ++i) b[i] = true; buildTree(1, 0, n - 1); int d = 1, k = 0; for (int i = n; i > 1; --i){ int p = m % (2 * i - 2); if (d == 1){ int t = sum(k, n - 1); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } d = -1; k = count(r, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } k = count(l, p - t - i + 2, d); } } else{ int t = sum(0, k); if (p + 1 <= t) k = count(k, p, d); else if (p + 1 <= t + i - 1){ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2; if (sum(0, mid) >= 1) r = mid; else l = mid + 1; } d = 1; k = count(l, p - t + 1, d); } else{ int l = 0, r = n - 1, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (sum(mid, n - 1) >= 1) l = mid; else r = mid - 1; } k = count(r, p - t - i + 2, d); } } } cout << ++k << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4096/","text":"4096 \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 */ #include <iostream> #include <cstring> using namespace std; int a[26][26] = {0}; int place[26] = {0}, sum[26] = {0}; int n; void remove(int x){ int p = place[x]; int i = 1; while (a[p][i] != x) ++i; for (int j = i + 1; j <= sum[p]; ++j){ int t = a[p][j]; a[t][1] = t; place[t] = t; sum[t] = 1; a[p][j] = 0; } sum[p] = i; } void moveover(int x, int y){ int p = place[x], q = place[y]; remove(x); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void moveonto(int x, int y){ int p = place[x], q = place[y]; remove(x); remove(y); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void pileover(int x, int y){ int p = place[x], q = place[y]; int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } void pileonto(int x, int y){ int p = place[x], q = place[y]; remove(y); int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ a[i][1] = i; place[i] = i; sum[i] = 1; } char s1[10], s2[10]; int x, y; cin >> s1; while (s1[0] != 'q'){ cin >> x >> s2 >> y; ++x, ++y; if (place[x] == place[y]){ cin >> s1; continue; } if (s1[0] == 'm'){ if (s2[1] == 'v') moveover(x, y); else moveonto(x, y); } else{ if (s2[1] == 'v') pileover(x, y); else pileonto(x, y); } cin >> s1; } for (int i = 0; i < n; ++i){ cout << i << \":\"; for (int j = 1; j <= sum[i + 1]; ++j) cout << ' ' << a[i + 1][j] - 1; cout << endl; } return 0; } vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; const int MAXNUM = 30; int box[MAXNUM][MAXNUM], N; struct order { string o1, o2; int a, b; }; struct pos { int x, y; }idx[MAXNUM]; bool isLegal(int a, int b) { if (a == b || idx[a].x == idx[b].x) return false; return true; } void reset(int x, int y) { int tmp = box[x][y]; box[tmp][0] = tmp; box[x][y] = -1; idx[tmp].x = tmp; idx[tmp].y = 0; } void move(int n, int x, int y) { box[x][y] = n; box[idx[n].x][idx[n].y] = -1; idx[n].x = x; idx[n].y = y; } void printall() { for (int i = 0; i < N; ++i) { cout << i << ':'; for (int j = 0; box[i][j] != -1; ++j) cout << ' ' << box[i][j]; if (i < N - 1) cout << endl; } } void move_over(int a, int b) { //cout << \"move_over called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; move(a, idx[b].x, top); } void move_onto(int a, int b) { //cout << \"move_onto called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); move(a, idx[b].x, idx[b].y + 1); } void pile_over(int a, int b) { //cout << \"pile_over called.\" << endl; int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; int tmpx = idx[a].x; for (int j = idx[a].y; box[tmpx][j] != -1; ++j) { int tmp = box[tmpx][j]; move(tmp, idx[b].x, top); ++top; } } void pile_onto(int a, int b) { //cout << \"pile_onto called.\" << endl; for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); pile_over(a, b); } int main() { cin >> N; for (int i = 0; i < N; ++i) { box[i][0] = i; idx[i].x = i; idx[i].y = 0; for (int j = 1; j < N; ++j) box[i][j] = -1; } order arr[200]; int orders = 0; string tmp; cin >> tmp; while (strcmp(tmp.c_str(), \"quit\")) { arr[orders].o1 = tmp; cin >> arr[orders].a >> arr[orders].o2 >> arr[orders].b; ++orders; cin >> tmp; } for (int i = 0; i < orders; ++i) { if (!isLegal(arr[i].a, arr[i].b)) continue; if (arr[i].o1 == \"move\") { if (arr[i].o2 == \"over\") move_over(arr[i].a, arr[i].b); else move_onto(arr[i].a, arr[i].b); } else { if (arr[i].o2 == \"over\") pile_over(arr[i].a, arr[i].b); else pile_onto(arr[i].a, arr[i].b); } //printall(); } printall(); return 0; }","title":"4096 \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50"},{"location":"nr/4096/#4096","text":"\u8f6c\u5230\u9898\u76ee","title":"4096 \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50"},{"location":"nr/4096/#fineartzs-solution","text":"/* \u5c0f\u5c45\u5c45\u642c\u7bb1\u5b50 */ #include <iostream> #include <cstring> using namespace std; int a[26][26] = {0}; int place[26] = {0}, sum[26] = {0}; int n; void remove(int x){ int p = place[x]; int i = 1; while (a[p][i] != x) ++i; for (int j = i + 1; j <= sum[p]; ++j){ int t = a[p][j]; a[t][1] = t; place[t] = t; sum[t] = 1; a[p][j] = 0; } sum[p] = i; } void moveover(int x, int y){ int p = place[x], q = place[y]; remove(x); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void moveonto(int x, int y){ int p = place[x], q = place[y]; remove(x); remove(y); a[q][++sum[q]] = x; a[p][sum[p]--] = 0; place[x] = q; } void pileover(int x, int y){ int p = place[x], q = place[y]; int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } void pileonto(int x, int y){ int p = place[x], q = place[y]; remove(y); int i = 1; while (a[p][i] != x) ++i; for (int j = i; j <= sum[p]; ++j){ a[q][++sum[q]] = a[p][j]; place[a[p][j]] = q; a[p][j] = 0; } sum[p] = i - 1; } int main(){ cin >> n; for (int i = 1; i <= n; ++i){ a[i][1] = i; place[i] = i; sum[i] = 1; } char s1[10], s2[10]; int x, y; cin >> s1; while (s1[0] != 'q'){ cin >> x >> s2 >> y; ++x, ++y; if (place[x] == place[y]){ cin >> s1; continue; } if (s1[0] == 'm'){ if (s2[1] == 'v') moveover(x, y); else moveonto(x, y); } else{ if (s2[1] == 'v') pileover(x, y); else pileonto(x, y); } cin >> s1; } for (int i = 0; i < n; ++i){ cout << i << \":\"; for (int j = 1; j <= sum[i + 1]; ++j) cout << ' ' << a[i + 1][j] - 1; cout << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4096/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; const int MAXNUM = 30; int box[MAXNUM][MAXNUM], N; struct order { string o1, o2; int a, b; }; struct pos { int x, y; }idx[MAXNUM]; bool isLegal(int a, int b) { if (a == b || idx[a].x == idx[b].x) return false; return true; } void reset(int x, int y) { int tmp = box[x][y]; box[tmp][0] = tmp; box[x][y] = -1; idx[tmp].x = tmp; idx[tmp].y = 0; } void move(int n, int x, int y) { box[x][y] = n; box[idx[n].x][idx[n].y] = -1; idx[n].x = x; idx[n].y = y; } void printall() { for (int i = 0; i < N; ++i) { cout << i << ':'; for (int j = 0; box[i][j] != -1; ++j) cout << ' ' << box[i][j]; if (i < N - 1) cout << endl; } } void move_over(int a, int b) { //cout << \"move_over called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; move(a, idx[b].x, top); } void move_onto(int a, int b) { //cout << \"move_onto called.\" << endl; for (int j = idx[a].y + 1; box[idx[a].x][j] != -1; ++j) reset(idx[a].x, j); for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); move(a, idx[b].x, idx[b].y + 1); } void pile_over(int a, int b) { //cout << \"pile_over called.\" << endl; int top = idx[b].y + 1; while (box[idx[b].x][top] != -1) ++top; int tmpx = idx[a].x; for (int j = idx[a].y; box[tmpx][j] != -1; ++j) { int tmp = box[tmpx][j]; move(tmp, idx[b].x, top); ++top; } } void pile_onto(int a, int b) { //cout << \"pile_onto called.\" << endl; for (int j = idx[b].y + 1; box[idx[b].x][j] != -1; ++j) reset(idx[b].x, j); pile_over(a, b); } int main() { cin >> N; for (int i = 0; i < N; ++i) { box[i][0] = i; idx[i].x = i; idx[i].y = 0; for (int j = 1; j < N; ++j) box[i][j] = -1; } order arr[200]; int orders = 0; string tmp; cin >> tmp; while (strcmp(tmp.c_str(), \"quit\")) { arr[orders].o1 = tmp; cin >> arr[orders].a >> arr[orders].o2 >> arr[orders].b; ++orders; cin >> tmp; } for (int i = 0; i < orders; ++i) { if (!isLegal(arr[i].a, arr[i].b)) continue; if (arr[i].o1 == \"move\") { if (arr[i].o2 == \"over\") move_over(arr[i].a, arr[i].b); else move_onto(arr[i].a, arr[i].b); } else { if (arr[i].o2 == \"over\") pile_over(arr[i].a, arr[i].b); else pile_onto(arr[i].a, arr[i].b); } //printall(); } printall(); return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4097/","text":"4097 \u7b80\u5355\u94fe\u8868 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u7b80\u5355\u94fe\u8868 */ #include <iostream> #include <cmath> using namespace std; const int MAXS = 1000; int n, m, maxs; class Block{ public: Block *prev = nullptr, *next = nullptr; int data[MAXS]; int len = 0; Block(Block *p = nullptr, Block *q = nullptr) : prev(p), next(q) {} void split(int pos){ if (pos >= len || pos < 0) return; Block *b = new Block(this, next); if (next != nullptr) next->prev = b; next = b; b->len = len - pos; for (int i = 0; i < len - pos; ++i) b->data[i] = data[i + pos]; len = pos; } bool merge(){ Block *b = next; if (b == nullptr) return false; if (len + b->len > maxs) return false; next = b->next; if (next != nullptr) next->prev = this; for (int i = 0; i < b->len; ++i) data[len++] = b->data[i]; delete b; return true; } void delNext(){ Block *b = next; if (b == nullptr) return; next = b->next; if (next != nullptr) next->prev = this; delete b; } }; ostream &operator <<(ostream &os, const Block &b){ for (int i = 0; i < b.len; ++i) os << b.data[i] << ' '; return os; } Block *head = new Block(); void insert(int x, int y){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); p->data[p->len++] = y; } void remove(int x){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); --p->len; } void maintain(){ Block *p = head->next; while (p){ p->merge(); p = p->next; } } int main(){ cin >> n >> m; maxs = (int)(sqrt(n)) + 1; Block *p = head->next = new Block(); for (int i = 1; i <= n; ++i){ int t; cin >> t; p->data[p->len++] = t; if (p->len == maxs){ p->next = new Block(); p = p->next; } } while (m--){ int op; cin >> op; if (op == 1){ int x, y; cin >> x >> y; insert(x, y); } else{ int x; cin >> x; remove(x); } maintain(); } p = head->next; while (p){ cout << *p; p = p->next; } cout << endl; return 0; }","title":"4097 \u7b80\u5355\u94fe\u8868"},{"location":"nr/4097/#4097","text":"\u8f6c\u5230\u9898\u76ee","title":"4097 \u7b80\u5355\u94fe\u8868"},{"location":"nr/4097/#fineartzs-solution","text":"/* \u7b80\u5355\u94fe\u8868 */ #include <iostream> #include <cmath> using namespace std; const int MAXS = 1000; int n, m, maxs; class Block{ public: Block *prev = nullptr, *next = nullptr; int data[MAXS]; int len = 0; Block(Block *p = nullptr, Block *q = nullptr) : prev(p), next(q) {} void split(int pos){ if (pos >= len || pos < 0) return; Block *b = new Block(this, next); if (next != nullptr) next->prev = b; next = b; b->len = len - pos; for (int i = 0; i < len - pos; ++i) b->data[i] = data[i + pos]; len = pos; } bool merge(){ Block *b = next; if (b == nullptr) return false; if (len + b->len > maxs) return false; next = b->next; if (next != nullptr) next->prev = this; for (int i = 0; i < b->len; ++i) data[len++] = b->data[i]; delete b; return true; } void delNext(){ Block *b = next; if (b == nullptr) return; next = b->next; if (next != nullptr) next->prev = this; delete b; } }; ostream &operator <<(ostream &os, const Block &b){ for (int i = 0; i < b.len; ++i) os << b.data[i] << ' '; return os; } Block *head = new Block(); void insert(int x, int y){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); p->data[p->len++] = y; } void remove(int x){ Block *p = head->next; while (p && x > p->len){ x -= p->len; p = p->next; } p->split(x); --p->len; } void maintain(){ Block *p = head->next; while (p){ p->merge(); p = p->next; } } int main(){ cin >> n >> m; maxs = (int)(sqrt(n)) + 1; Block *p = head->next = new Block(); for (int i = 1; i <= n; ++i){ int t; cin >> t; p->data[p->len++] = t; if (p->len == maxs){ p->next = new Block(); p = p->next; } } while (m--){ int op; cin >> op; if (op == 1){ int x, y; cin >> x >> y; insert(x, y); } else{ int x; cin >> x; remove(x); } maintain(); } p = head->next; while (p){ cout << *p; p = p->next; } cout << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4099/","text":"4099 Love and Auto Memories Doll \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Love and Auto Memories Doll */ #include <iostream> #include <cstring> using namespace std; inline void lowercase(char *s, int len){ for (int i = 0; i < len; ++i) if (s[i] < 'a') s[i] = s[i] + 'a' - 'A'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); char s[255], w[255]; cin >> s; int n, lens = strlen(s); lowercase(s, lens); cin >> n; int ans = 0, cnt = 0; while (n--){ cin >> w; int l = strlen(w); lowercase(w, l); if (lens != l){ if (cnt == 0) ans += l; } else{ bool flag = true; for (int i = 0; i < l; ++i){ if (s[i] != w[i]){ flag = false; break; } } if (flag){ ++cnt; } else{ if (cnt == 0) ans += l; } } } if (cnt == 0) cout << \"-1\\n\"; else cout << cnt << ' ' << ans << '\\n'; return 0; }","title":"4099 Love and Auto Memories Doll"},{"location":"nr/4099/#4099-love-and-auto-memories-doll","text":"\u8f6c\u5230\u9898\u76ee","title":"4099 Love and Auto Memories Doll"},{"location":"nr/4099/#fineartzs-solution","text":"/* Love and Auto Memories Doll */ #include <iostream> #include <cstring> using namespace std; inline void lowercase(char *s, int len){ for (int i = 0; i < len; ++i) if (s[i] < 'a') s[i] = s[i] + 'a' - 'A'; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); char s[255], w[255]; cin >> s; int n, lens = strlen(s); lowercase(s, lens); cin >> n; int ans = 0, cnt = 0; while (n--){ cin >> w; int l = strlen(w); lowercase(w, l); if (lens != l){ if (cnt == 0) ans += l; } else{ bool flag = true; for (int i = 0; i < l; ++i){ if (s[i] != w[i]){ flag = false; break; } } if (flag){ ++cnt; } else{ if (cnt == 0) ans += l; } } } if (cnt == 0) cout << \"-1\\n\"; else cout << cnt << ' ' << ans << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/4100/","text":"4100 Nene tchi\u2019s Disaster \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Nene tchi's Disaster */ #include <iostream> #include <cstring> using namespace std; class Node{ public: int l = 0, r = 0, sum = 0; Node() = default; }; Node a[1000010 * 4]; long long b[1000010], ans[1000010]; int t, n; void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r) a[x].sum = 1; else{ int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } } int findk(int x, int k){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].sum >= k) return findk(x * 2, k); else return findk(x * 2 + 1, k - a[x * 2].sum); } void remove(int x, int k){ if (a[x].l == a[x].r){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (k <= mid) remove(x * 2, k); else remove(x * 2 + 1, k); --a[x].sum; } void solve(){ memset(a, 0, sizeof(a)); memset(b, 0, sizeof(b)); memset(ans, 0, sizeof(ans)); cin >> n; buildTree(1, 1, n); for (int i = 1; i <= n; ++i) cin >> b[i]; for (int i = n; i > 1; --i){ int d = b[i] - b[i - 1]; ans[i] = findk(1, i - d); remove(1, ans[i]); } ans[1] = findk(1, 1); cout << 1 << endl; for (int i = 1; i <= n; ++i) cout << ans[i] << ' '; cout << endl; } int main(){ cin >> t; while (t--){ solve(); } return 0; }","title":"4100 Nene tchi\u2019s Disaster"},{"location":"nr/4100/#4100-nene-tchis-disaster","text":"\u8f6c\u5230\u9898\u76ee","title":"4100 Nene tchi\u2019s Disaster"},{"location":"nr/4100/#fineartzs-solution","text":"/* Nene tchi's Disaster */ #include <iostream> #include <cstring> using namespace std; class Node{ public: int l = 0, r = 0, sum = 0; Node() = default; }; Node a[1000010 * 4]; long long b[1000010], ans[1000010]; int t, n; void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r) a[x].sum = 1; else{ int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } } int findk(int x, int k){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].sum >= k) return findk(x * 2, k); else return findk(x * 2 + 1, k - a[x * 2].sum); } void remove(int x, int k){ if (a[x].l == a[x].r){ a[x].sum = 0; return; } int mid = (a[x].l + a[x].r) / 2; if (k <= mid) remove(x * 2, k); else remove(x * 2 + 1, k); --a[x].sum; } void solve(){ memset(a, 0, sizeof(a)); memset(b, 0, sizeof(b)); memset(ans, 0, sizeof(ans)); cin >> n; buildTree(1, 1, n); for (int i = 1; i <= n; ++i) cin >> b[i]; for (int i = n; i > 1; --i){ int d = b[i] - b[i - 1]; ans[i] = findk(1, i - d); remove(1, ans[i]); } ans[1] = findk(1, 1); cout << 1 << endl; for (int i = 1; i <= n; ++i) cout << ans[i] << ' '; cout << endl; } int main(){ cin >> t; while (t--){ solve(); } return 0; }","title":"FineArtz's solution"},{"location":"nr/4102/","text":"4102 pilots \u8f6c\u5230\u9898\u76ee FineArtz's solution /* pilots */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int INF = 2147483647; int k, n, a[3000005]; pair<int, int> qmin[3000005], qmax[3000005]; bool check(int len){ memset(qmin, 0, sizeof(qmax)); memset(qmax, 0, sizeof(qmax)); int frontMin = 0, rearMin = 0; int frontMax = 0, rearMax = 0; qmin[rearMin++] = make_pair(0, 0); qmax[rearMax++] = make_pair(0, INF); for (int i = 1; i <= n; ++i){ while (frontMin != rearMin && qmin[frontMin].first <= i - len) ++frontMin; while (frontMax != rearMax && qmax[frontMax].first <= i - len) ++frontMax; while (frontMin != rearMin && a[i] <= qmin[rearMin - 1].second) --rearMin; qmin[rearMin++] = make_pair(i, a[i]); while (frontMax != rearMax && a[i] >= qmax[rearMax - 1].second) --rearMax; qmax[rearMax++] = make_pair(i, a[i]); if (i < len) continue; if (qmax[frontMax].second - qmin[frontMin].second <= k) return true; } return false; } int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; int l = 1, r = n, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"4102 pilots"},{"location":"nr/4102/#4102-pilots","text":"\u8f6c\u5230\u9898\u76ee","title":"4102 pilots"},{"location":"nr/4102/#fineartzs-solution","text":"/* pilots */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int INF = 2147483647; int k, n, a[3000005]; pair<int, int> qmin[3000005], qmax[3000005]; bool check(int len){ memset(qmin, 0, sizeof(qmax)); memset(qmax, 0, sizeof(qmax)); int frontMin = 0, rearMin = 0; int frontMax = 0, rearMax = 0; qmin[rearMin++] = make_pair(0, 0); qmax[rearMax++] = make_pair(0, INF); for (int i = 1; i <= n; ++i){ while (frontMin != rearMin && qmin[frontMin].first <= i - len) ++frontMin; while (frontMax != rearMax && qmax[frontMax].first <= i - len) ++frontMax; while (frontMin != rearMin && a[i] <= qmin[rearMin - 1].second) --rearMin; qmin[rearMin++] = make_pair(i, a[i]); while (frontMax != rearMax && a[i] >= qmax[rearMax - 1].second) --rearMax; qmax[rearMax++] = make_pair(i, a[i]); if (i < len) continue; if (qmax[frontMax].second - qmin[frontMin].second <= k) return true; } return false; } int main(){ cin >> k >> n; for (int i = 1; i <= n; ++i) cin >> a[i]; int l = 1, r = n, mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4105/","text":"4105 difference \u8f6c\u5230\u9898\u76ee FineArtz's solution /* difference */ #include <iostream> #include <cmath> using namespace std; struct Heap{ int heapsize = 0; int a[200005] = {0}; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] > a[i + 1]) ++i; if (a[i >> 1] > a[i]){ swap(i, i >> 1); i <<= 1; } else break; } } void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } int top(){ return a[1]; } }; int n, m; Heap heap; int a[200005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ int t; cin >> t; heap.insert(t); } for (int i = 1; i <= n; ++i){ a[i] = heap.top(); //cout << a[i] << endl; heap.pop(); } while (m--){ int q; cin >> q; int l = 1, r = n, mid; while (l <= r){ mid = (l + r) / 2; if (a[mid] == q) break; if (a[mid] > q) r = mid - 1; else l = mid + 1; } int ans = abs(q - a[mid]); if (mid > 1){ ans = min(ans, abs(q - a[mid - 1])); } if (mid < n){ ans = min(ans, abs(q - a[mid + 1])); } cout << ans << '\\n'; } return 0; } WashWang's solution #include <iostream> #include <algorithm> using namespace std; struct btype{ int v; int ind; } b[200001]; bool cmp(btype x,btype y){ return x.v<y.v; } int a[200001],m,n,l,r,mid,ans[200001],minn; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); sort(a,a+n); for (int i=0;i<m;++i) {scanf(\"%d\",&b[i].v);b[i].ind=i;} sort(b,b+m,cmp); l=0; for (int i=0;i<m;++i){ r=n-1; while (l<=r){ mid=(l+r)/2; if (a[mid]<b[i].v) l=mid+1; else if (a[mid]>b[i].v) r=mid-1; else { l=mid; break; } } minn=2000000001; if (l<n) minn=min(minn,abs(a[l]-b[i].v)); if (l>=1) minn=min(minn,abs(a[l-1]-b[i].v)); ans[b[i].ind]=minn; } for (int i=0;i<m;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4105 difference"},{"location":"nr/4105/#4105-difference","text":"\u8f6c\u5230\u9898\u76ee","title":"4105 difference"},{"location":"nr/4105/#fineartzs-solution","text":"/* difference */ #include <iostream> #include <cmath> using namespace std; struct Heap{ int heapsize = 0; int a[200005] = {0}; void swap(int x, int y){ int t = a[x]; a[x] = a[y]; a[y] = t; } void siftup(int x){ while (x != 1){ if (a[x] < a[x >> 1]){ swap(x, x >> 1); x >>= 1; } else break; } } void siftdown(){ int i = 2; while (i <= heapsize){ if (i + 1 <= heapsize && a[i] > a[i + 1]) ++i; if (a[i >> 1] > a[i]){ swap(i, i >> 1); i <<= 1; } else break; } } void insert(int x){ a[++heapsize] = x; siftup(heapsize); } void pop(){ swap(1, heapsize); --heapsize; siftdown(); } int top(){ return a[1]; } }; int n, m; Heap heap; int a[200005]; int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> m; for (int i = 1; i <= n; ++i){ int t; cin >> t; heap.insert(t); } for (int i = 1; i <= n; ++i){ a[i] = heap.top(); //cout << a[i] << endl; heap.pop(); } while (m--){ int q; cin >> q; int l = 1, r = n, mid; while (l <= r){ mid = (l + r) / 2; if (a[mid] == q) break; if (a[mid] > q) r = mid - 1; else l = mid + 1; } int ans = abs(q - a[mid]); if (mid > 1){ ans = min(ans, abs(q - a[mid - 1])); } if (mid < n){ ans = min(ans, abs(q - a[mid + 1])); } cout << ans << '\\n'; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4105/#washwangs-solution","text":"#include <iostream> #include <algorithm> using namespace std; struct btype{ int v; int ind; } b[200001]; bool cmp(btype x,btype y){ return x.v<y.v; } int a[200001],m,n,l,r,mid,ans[200001],minn; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); sort(a,a+n); for (int i=0;i<m;++i) {scanf(\"%d\",&b[i].v);b[i].ind=i;} sort(b,b+m,cmp); l=0; for (int i=0;i<m;++i){ r=n-1; while (l<=r){ mid=(l+r)/2; if (a[mid]<b[i].v) l=mid+1; else if (a[mid]>b[i].v) r=mid-1; else { l=mid; break; } } minn=2000000001; if (l<n) minn=min(minn,abs(a[l]-b[i].v)); if (l>=1) minn=min(minn,abs(a[l-1]-b[i].v)); ans[b[i].ind]=minn; } for (int i=0;i<m;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/4106/","text":"4106 Watashi kininarimasu\uff01 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Watashi kininarimasu! */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 200000; struct Node{ int l = 0, r = 0; int maxx = 0; }; Node a[MAXN * 4 + 5]; int t; int h, w, n; void pushUp(int x){ if (a[x * 2].maxx >= a[x * 2 + 1].maxx) a[x].maxx = a[x * 2].maxx; else a[x].maxx = a[x * 2 + 1].maxx; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].maxx = w; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int line, int len){ if (a[x].l == a[x].r){ a[x].maxx -= len; return; } int mid = (a[x].l + a[x].r) / 2; if (line <= mid) update(x * 2, line, len); else update(x * 2 + 1, line, len); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].maxx >= len) return query(x * 2, len); else return query(x * 2 + 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; while (t--){ cin >> h >> w >> n; buildTree(1, 1, min(n, h)); for (int i = 1; i <= n; ++i){ int m; cin >> m; if (m > a[1].maxx){ cout << \"-1\\n\"; continue; } int line = query(1, m); cout << line << '\\n'; update(1, line, m); } } return 0; } WashWang's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; int tr[1050000],m,h,w,n,t,x,f,ans[200001];//\u4e10\u7248\u7ebf\u6bb5\u6811 \u8bf7\u52ff\u6a21\u4eff int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { memset(tr,0,sizeof(tr)); cin>>h>>w>>n; h=min(h,n); for (m=1;m<h;m<<=1); for (int j=1+m;j<=m+h;++j) tr[j]=w; for (int j=m+h+1;j<=m<<1;++j) tr[j]=0; for (int j=m;j>=1;--j) tr[j]=max(tr[j<<1],tr[(j<<1)+1]);//\u4ee5\u4e0a\u4e3a\u5efa\u6811 for (int j=0;j<n;++j) { cin>>x; if (tr[1]<x) { ans[j]=-1; continue; } f=1; while (f<=m) if (tr[f<<=1]<x) f+=1;//\u5355\u70b9\u67e5\u8be2 tr[f]-=x; ans[j]=f-m; for (f>>=1;f>=1;f>>=1) tr[f]=max(tr[f<<1],tr[(f<<1)+1]);//\u5355\u70b9\u4fee\u6539 } for (int j=0;j<n;++j) cout<<ans[j]<<\" \"; cout<<endl; } return 0; }","title":"4106 Watashi kininarimasu\uff01"},{"location":"nr/4106/#4106-watashi-kininarimasu","text":"\u8f6c\u5230\u9898\u76ee","title":"4106 Watashi kininarimasu\uff01"},{"location":"nr/4106/#fineartzs-solution","text":"/* Watashi kininarimasu! */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 200000; struct Node{ int l = 0, r = 0; int maxx = 0; }; Node a[MAXN * 4 + 5]; int t; int h, w, n; void pushUp(int x){ if (a[x * 2].maxx >= a[x * 2 + 1].maxx) a[x].maxx = a[x * 2].maxx; else a[x].maxx = a[x * 2 + 1].maxx; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].maxx = w; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int line, int len){ if (a[x].l == a[x].r){ a[x].maxx -= len; return; } int mid = (a[x].l + a[x].r) / 2; if (line <= mid) update(x * 2, line, len); else update(x * 2 + 1, line, len); pushUp(x); } int query(int x, int len){ if (a[x].l == a[x].r) return a[x].l; if (a[x * 2].maxx >= len) return query(x * 2, len); else return query(x * 2 + 1, len); } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> t; while (t--){ cin >> h >> w >> n; buildTree(1, 1, min(n, h)); for (int i = 1; i <= n; ++i){ int m; cin >> m; if (m > a[1].maxx){ cout << \"-1\\n\"; continue; } int line = query(1, m); cout << line << '\\n'; update(1, line, m); } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4106/#washwangs-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int tr[1050000],m,h,w,n,t,x,f,ans[200001];//\u4e10\u7248\u7ebf\u6bb5\u6811 \u8bf7\u52ff\u6a21\u4eff int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { memset(tr,0,sizeof(tr)); cin>>h>>w>>n; h=min(h,n); for (m=1;m<h;m<<=1); for (int j=1+m;j<=m+h;++j) tr[j]=w; for (int j=m+h+1;j<=m<<1;++j) tr[j]=0; for (int j=m;j>=1;--j) tr[j]=max(tr[j<<1],tr[(j<<1)+1]);//\u4ee5\u4e0a\u4e3a\u5efa\u6811 for (int j=0;j<n;++j) { cin>>x; if (tr[1]<x) { ans[j]=-1; continue; } f=1; while (f<=m) if (tr[f<<=1]<x) f+=1;//\u5355\u70b9\u67e5\u8be2 tr[f]-=x; ans[j]=f-m; for (f>>=1;f>=1;f>>=1) tr[f]=max(tr[f<<1],tr[(f<<1)+1]);//\u5355\u70b9\u4fee\u6539 } for (int j=0;j<n;++j) cout<<ans[j]<<\" \"; cout<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/4107/","text":"4107 Love and Auto Memories Doll II \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Love and Auto Memories Doll II */ #include <iostream> #include <cstdio> #include <cstring> using namespace std; const int MAXS = 10000000; char a[MAXS + 5], b[MAXS + 5]; int nxt[MAXS + 5] = {0}; int lena = 0, lenb = 0; inline void lowercase(char &ch){ if (ch >= 'A' && ch <= 'Z') ch = ch - 'A' + 'a'; } int main(){ fgets(a, MAXS + 5, stdin); fgets(b, MAXS + 5, stdin); lena = strlen(a) - 1; lenb = strlen(b); for (int i = 0; i < lena; ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] = a[i] - 'A' + 'a'; for (int i = 0; i < lenb; ++i) if (b[i] >= 'A' && b[i] <= 'Z') b[i] = b[i] - 'A' + 'a'; int pos = -1, ans = 0; nxt[0] = -1; int t = -1; for (int i = 1; i < lena; ++i){ while (t > -1 && a[i] != a[t + 1]) t = nxt[t]; if (a[i] == a[t + 1]) ++t; nxt[i] = t; } t = -1; for (int i = 0; i < lenb; ++i){ while (t > -1 && a[t + 1] != b[i]) t = nxt[t]; if (a[t + 1] == b[i]) ++t; if (t == lena - 1){ if (ans == 0) pos = i - lena + 1; ++ans; t = nxt[t]; } } if (ans == 0) cout << \"-1\" << '\\n'; else cout << ans << ' ' << pos << '\\n'; return 0; }","title":"4107 Love and Auto Memories Doll II"},{"location":"nr/4107/#4107-love-and-auto-memories-doll-ii","text":"\u8f6c\u5230\u9898\u76ee","title":"4107 Love and Auto Memories Doll II"},{"location":"nr/4107/#fineartzs-solution","text":"/* Love and Auto Memories Doll II */ #include <iostream> #include <cstdio> #include <cstring> using namespace std; const int MAXS = 10000000; char a[MAXS + 5], b[MAXS + 5]; int nxt[MAXS + 5] = {0}; int lena = 0, lenb = 0; inline void lowercase(char &ch){ if (ch >= 'A' && ch <= 'Z') ch = ch - 'A' + 'a'; } int main(){ fgets(a, MAXS + 5, stdin); fgets(b, MAXS + 5, stdin); lena = strlen(a) - 1; lenb = strlen(b); for (int i = 0; i < lena; ++i) if (a[i] >= 'A' && a[i] <= 'Z') a[i] = a[i] - 'A' + 'a'; for (int i = 0; i < lenb; ++i) if (b[i] >= 'A' && b[i] <= 'Z') b[i] = b[i] - 'A' + 'a'; int pos = -1, ans = 0; nxt[0] = -1; int t = -1; for (int i = 1; i < lena; ++i){ while (t > -1 && a[i] != a[t + 1]) t = nxt[t]; if (a[i] == a[t + 1]) ++t; nxt[i] = t; } t = -1; for (int i = 0; i < lenb; ++i){ while (t > -1 && a[t + 1] != b[i]) t = nxt[t]; if (a[t + 1] == b[i]) ++t; if (t == lena - 1){ if (ans == 0) pos = i - lena + 1; ++ans; t = nxt[t]; } } if (ans == 0) cout << \"-1\" << '\\n'; else cout << ans << ' ' << pos << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/4108/","text":"4108 N0 Chess N0 Life \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"4108 N0 Chess N0 Life"},{"location":"nr/4108/#4108-n0-chess-n0-life","text":"\u8f6c\u5230\u9898\u76ee","title":"4108 N0 Chess N0 Life"},{"location":"nr/4108/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"WashWang's solution"},{"location":"nr/4111/","text":"4111 labyrinth \u8f6c\u5230\u9898\u76ee FineArtz's solution /* labyrinth */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; struct Node{ int x = 0, y = 0, step = 0; }; char ch; char a[1005][1005]; bool b[1005][1005] = {false}; int n, m; int sx, sy; Node q[1000005]; int front = 0, rear = 0; void bfs(){ Node s; s.x = sx; s.y = sy; q[rear++] = s; b[sx][sy] = true; while (front != rear){ Node now = q[front]; ++front; for (int k = 0; k < 4; ++k){ int nx = now.x + dx[k]; int ny = now.y + dy[k]; if (nx > 0 && nx <= n && ny > 0 && ny <= m && !b[nx][ny]){ Node next; next.x = nx; next.y = ny; next.step = now.step + 1; if (a[nx][ny] == '$'){ cout << next.step << endl; return; } b[nx][ny] = true; q[rear++] = next; } } } cout << \"-1\" << endl; } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '@'){ sx = i; sy = j; } else if (a[i][j] == '#'){ b[i][j] = true; } } } bfs(); return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"4111 labyrinth"},{"location":"nr/4111/#4111-labyrinth","text":"\u8f6c\u5230\u9898\u76ee","title":"4111 labyrinth"},{"location":"nr/4111/#fineartzs-solution","text":"/* labyrinth */ #include <iostream> using namespace std; const int dx[4] = {1, 0, -1, 0}; const int dy[4] = {0, 1, 0, -1}; struct Node{ int x = 0, y = 0, step = 0; }; char ch; char a[1005][1005]; bool b[1005][1005] = {false}; int n, m; int sx, sy; Node q[1000005]; int front = 0, rear = 0; void bfs(){ Node s; s.x = sx; s.y = sy; q[rear++] = s; b[sx][sy] = true; while (front != rear){ Node now = q[front]; ++front; for (int k = 0; k < 4; ++k){ int nx = now.x + dx[k]; int ny = now.y + dy[k]; if (nx > 0 && nx <= n && ny > 0 && ny <= m && !b[nx][ny]){ Node next; next.x = nx; next.y = ny; next.step = now.step + 1; if (a[nx][ny] == '$'){ cout << next.step << endl; return; } b[nx][ny] = true; q[rear++] = next; } } } cout << \"-1\" << endl; } int main(){ cin >> n >> m; for (int i = 1; i <= n; ++i){ for (int j = 1; j <= m; ++j){ cin >> a[i][j]; if (a[i][j] == '@'){ sx = i; sy = j; } else if (a[i][j] == '#'){ b[i][j] = true; } } } bfs(); return 0; }","title":"FineArtz's solution"},{"location":"nr/4111/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; char map[1005][1005]; int minx[1005][1005],qx[1000011],qy[1000011]; int sx,sy,head,tail,m,n,now,xnow,ynow,ex,ey; void update(int value,int x,int y) { if (map[x][y]=='#') return; if ((map[x][y]=='$'||map[x][y]=='.')&&(minx[x][y]==0)) { minx[x][y] = value; qx[tail] = x; qy[tail] = y; tail++; } } int main() { scanf(\"%d%d\",&m,&n); for (int i=0;i<m;++i) { scanf(\"%s\",map[i]); for (int j=0;j<n;++j) { if (map[i][j] == '@') { sx = i; sy = j; } if (map[i][j] == '$'){ ex = i; ey = j; } } } qx[0]=sx; qy[0]=sy; head=0; tail=1; while (head<tail) { now=minx[qx[head]][qy[head]]; xnow=qx[head]; ynow=qy[head]; if (xnow>=1) update(now+1,xnow-1,ynow); if (ynow>=1) update(now+1,xnow,ynow-1); if (xnow<m-1) update(now+1,xnow+1,ynow); if (ynow<n-1) update(now+1,xnow,ynow+1); head++; if (minx[ex][ey]!=0) break; } if (!minx[ex][ey]) printf(\"%d\",-1); else printf(\"%d\",minx[ex][ey]); return 0; }","title":"WashWang's solution"},{"location":"nr/4112/","text":"4112 Spice and Wolf \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Spice and Wolf */ #include <iostream> #include <cstring> using namespace std; int t, n; long long a[1005], p[1005], f[1005], s[1005]; int main(){ cin >> t; while (t--){ memset(a, 0, sizeof(a)); memset(p, 0, sizeof(p)); memset(f, 0, sizeof(f)); memset(s, 0, sizeof(s)); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i] >> p[i]; s[i] = a[i] + s[i - 1]; } f[1] = (a[1] + 10) * p[1]; for (int i = 2; i <= n; ++i){ f[i] = 2147483647; for (int j = 0; j < i; ++j){ f[i] = min(f[i], f[j] + (s[i] - s[j] + 10) * p[i]); } } cout << f[n] << endl; } return 0; } WashWang's solution #include <iostream> #include <cstdio> int dp[1001][1001],a[1001],p[1001],t,n,minn; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d\",&n); for (int j=n-1;j>=0;--j) scanf(\"%d%d\",&a[j],&p[j]); dp[0][0]=a[0]*p[0]+10*p[0]; for (int j=1;j<n;++j) { minn=2100000000; for (int k=0;k<=j-1;++k) { dp[j][k] = dp[j - 1][k] + a[j] * p[k]; if (dp[j-1][k]<minn) minn=dp[j-1][k]; } dp[j][j]=minn+a[j]*p[j]+10*p[j]; } minn=2100000000; for (int j=0;j<n;++j) if (dp[n-1][j]<minn) minn=dp[n-1][j]; printf(\"%d\\n\",minn); } return 0; }","title":"4112 Spice and Wolf"},{"location":"nr/4112/#4112-spice-and-wolf","text":"\u8f6c\u5230\u9898\u76ee","title":"4112 Spice and Wolf"},{"location":"nr/4112/#fineartzs-solution","text":"/* Spice and Wolf */ #include <iostream> #include <cstring> using namespace std; int t, n; long long a[1005], p[1005], f[1005], s[1005]; int main(){ cin >> t; while (t--){ memset(a, 0, sizeof(a)); memset(p, 0, sizeof(p)); memset(f, 0, sizeof(f)); memset(s, 0, sizeof(s)); cin >> n; for (int i = 1; i <= n; ++i){ cin >> a[i] >> p[i]; s[i] = a[i] + s[i - 1]; } f[1] = (a[1] + 10) * p[1]; for (int i = 2; i <= n; ++i){ f[i] = 2147483647; for (int j = 0; j < i; ++j){ f[i] = min(f[i], f[j] + (s[i] - s[j] + 10) * p[i]); } } cout << f[n] << endl; } return 0; }","title":"FineArtz's solution"},{"location":"nr/4112/#washwangs-solution","text":"#include <iostream> #include <cstdio> int dp[1001][1001],a[1001],p[1001],t,n,minn; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d\",&n); for (int j=n-1;j>=0;--j) scanf(\"%d%d\",&a[j],&p[j]); dp[0][0]=a[0]*p[0]+10*p[0]; for (int j=1;j<n;++j) { minn=2100000000; for (int k=0;k<=j-1;++k) { dp[j][k] = dp[j - 1][k] + a[j] * p[k]; if (dp[j-1][k]<minn) minn=dp[j-1][k]; } dp[j][j]=minn+a[j]*p[j]+10*p[j]; } minn=2100000000; for (int j=0;j<n;++j) if (dp[n-1][j]<minn) minn=dp[n-1][j]; printf(\"%d\\n\",minn); } return 0; }","title":"WashWang's solution"},{"location":"nr/4113/","text":"4113 Seven Apples 0n a Witch\u2019s Tree \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Seven Apples 0n a Witch's Tree */ #include <iostream> using namespace std; const int MAXN = 100000; int head[MAXN + 5], nxt[MAXN + 5], e[MAXN + 5], cnt = 0; bool b[MAXN + 5] = {false}; int n, m, root = 0; int in[MAXN + 5], out[MAXN + 5], seq[MAXN + 5], t = 0; bool apple[MAXN + 5] = {false}; struct Node{ int l = 0, r = 0, sum = 0; }; Node a[MAXN * 4 + 5]; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x){ in[x] = t; seq[t] = x; for (int i = head[x]; i != 0; i = nxt[i]){ ++t; dfs(e[i]); } out[x] = t; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = 1; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; }; void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum += d; return; } int mid = (a[x].l + a[x].r) / 2; if (p <= mid) update(x * 2, p, d); else update(x * 2 + 1, p, d); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (mid >= l) ret += query(x * 2, l, r); if (mid < r) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); b[v] = true; } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } t = 1; dfs(root); for (int i = 1; i <= n; ++i) apple[i] = true; buildTree(1, 1, n); cin >> m; while (m--){ char op; int x; cin >> op >> x; if (op == 'C'){ if (apple[x]){ apple[x] = false; update(1, in[x], -1); } else{ apple[x] = true; update(1, in[x], 1); } } else if (op == 'Q'){ cout << query(1, in[x], out[x]) << '\\n'; } } return 0; }","title":"4113 Seven Apples 0n a Witch\u2019s Tree"},{"location":"nr/4113/#4113-seven-apples-0n-a-witchs-tree","text":"\u8f6c\u5230\u9898\u76ee","title":"4113 Seven Apples 0n a Witch\u2019s Tree"},{"location":"nr/4113/#fineartzs-solution","text":"/* Seven Apples 0n a Witch's Tree */ #include <iostream> using namespace std; const int MAXN = 100000; int head[MAXN + 5], nxt[MAXN + 5], e[MAXN + 5], cnt = 0; bool b[MAXN + 5] = {false}; int n, m, root = 0; int in[MAXN + 5], out[MAXN + 5], seq[MAXN + 5], t = 0; bool apple[MAXN + 5] = {false}; struct Node{ int l = 0, r = 0, sum = 0; }; Node a[MAXN * 4 + 5]; void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; e[cnt] = v; head[u] = cnt; } void dfs(int x){ in[x] = t; seq[t] = x; for (int i = head[x]; i != 0; i = nxt[i]){ ++t; dfs(e[i]); } out[x] = t; } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = 1; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; }; void update(int x, int p, int d){ if (a[x].l == a[x].r){ a[x].sum += d; return; } int mid = (a[x].l + a[x].r) / 2; if (p <= mid) update(x * 2, p, d); else update(x * 2 + 1, p, d); a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } int query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; int mid = (a[x].l + a[x].r) / 2; int ret = 0; if (mid >= l) ret += query(x * 2, l, r); if (mid < r) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n; for (int i = 1; i < n; ++i){ int u, v; cin >> u >> v; addEdge(u, v); b[v] = true; } for (int i = 1; i <= n; ++i){ if (!b[i]){ root = i; break; } } t = 1; dfs(root); for (int i = 1; i <= n; ++i) apple[i] = true; buildTree(1, 1, n); cin >> m; while (m--){ char op; int x; cin >> op >> x; if (op == 'C'){ if (apple[x]){ apple[x] = false; update(1, in[x], -1); } else{ apple[x] = true; update(1, in[x], 1); } } else if (op == 'Q'){ cout << query(1, in[x], out[x]) << '\\n'; } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4116/","text":"4116 \u5200\u4f4d\u5206\u914d \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u5200\u4f4d\u5206\u914d */ #include <iostream> using namespace std; int n, s; int a[100005]; void qsort(int l, int r){ int i = l, j = r; int mid = a[(i + j) / 2]; while (i <= j){ while (a[i] < mid) ++i; while (a[j] > mid) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < r) qsort(i, r); if (j > l) qsort(l, j); } bool check(int ans){ int i = 1, j = 2, t = s - 1; while (j <= n){ if (a[j] - a[i] >= ans){ --t; i = j; } if (t == 0) return true; ++j; } return false; } int main(){ cin >> n >> s; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); int l = 1, r = a[n] - a[1], mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"4116 \u5200\u4f4d\u5206\u914d"},{"location":"nr/4116/#4116","text":"\u8f6c\u5230\u9898\u76ee","title":"4116 \u5200\u4f4d\u5206\u914d"},{"location":"nr/4116/#fineartzs-solution","text":"/* \u5200\u4f4d\u5206\u914d */ #include <iostream> using namespace std; int n, s; int a[100005]; void qsort(int l, int r){ int i = l, j = r; int mid = a[(i + j) / 2]; while (i <= j){ while (a[i] < mid) ++i; while (a[j] > mid) --j; if (i <= j){ int t = a[i]; a[i] = a[j]; a[j] = t; ++i; --j; } } if (i < r) qsort(i, r); if (j > l) qsort(l, j); } bool check(int ans){ int i = 1, j = 2, t = s - 1; while (j <= n){ if (a[j] - a[i] >= ans){ --t; i = j; } if (t == 0) return true; ++j; } return false; } int main(){ cin >> n >> s; for (int i = 1; i <= n; ++i) cin >> a[i]; qsort(1, n); int l = 1, r = a[n] - a[1], mid; while (l < r){ mid = (l + r) / 2 + (l + r) % 2; if (check(mid)) l = mid; else r = mid - 1; } cout << l << endl; return 0; }","title":"FineArtz's solution"},{"location":"nr/4117/","text":"4117 \u64cd\u4f5c\u6570\u7ec4 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u64cd\u4f5c\u6570\u7ec4 */ #include <iostream> using namespace std; const int MAXN = 100000; struct Node{ int l = 0, r = 0; long long lazy = 0, sum = 0; }; int n, q; long long t[MAXN + 5]; Node a[MAXN * 4 + 5]; inline void pushUp(int x){ a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } inline void pushDown(int x){ if (a[x].lazy != 0){ a[x * 2].lazy += a[x].lazy; a[x * 2].sum += a[x].lazy * (a[x * 2].r - a[x * 2].l + 1); a[x * 2 + 1].lazy += a[x].lazy; a[x * 2 + 1].sum += a[x].lazy * (a[x * 2 + 1].r - a[x * 2 + 1].l + 1); a[x].lazy = 0; } } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = t[l]; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int c){ if (a[x].l >= l && a[x].r <= r){ a[x].sum += c * (a[x].r - a[x].l + 1); a[x].lazy += c; return; } pushDown(x); int mid = (a[x].l + a[x].r) / 2; if (l <= mid) update(x * 2, l, r, c); if (r > mid) update(x * 2 + 1, l, r, c); pushUp(x); } long long query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; pushDown(x); int mid = (a[x].l + a[x].r) / 2; long long ret = 0; if (l <= mid) ret += query(x * 2, l, r); if (r > mid) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> t[i]; buildTree(1, 1, n); while (q--){ char op; int x, y, z; cin >> op; if (op == 'Q'){ cin >> x >> y; cout << query(1, x, y) << '\\n'; } else{ cin >> x >> y >> z; update(1, x, y, z); } } return 0; } WashWang's solution #include <iostream> #include <cstdio> using namespace std; const int MAXN=100001; typedef long long ll; ll a[MAXN],ans[4*MAXN],tag[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p) { ans[p]=ans[ls(p)]+ans[rs(p)]; } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p); } inline void add_tag(int p,int l,int r,int k) { tag[p]+=k; ans[p]+=k*(r-l+1); } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p); } ll query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; push_down(p,l,r); int mid=(l+r)>>1; ll sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int m,n,x,y,k; char c; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;i++) scanf(\"%lld\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ c=' '; while (c!='C'&&c!='Q') c=getchar(); if (c=='C') { scanf(\"%d%d%d\",&x,&y,&k); update(x,y,1,n,1,k); } if (c=='Q') { scanf(\"%d%d\",&x,&y); printf(\"%lld\\n\",query(x,y,1,n,1)); } } return 0; }","title":"4117 \u64cd\u4f5c\u6570\u7ec4"},{"location":"nr/4117/#4117","text":"\u8f6c\u5230\u9898\u76ee","title":"4117 \u64cd\u4f5c\u6570\u7ec4"},{"location":"nr/4117/#fineartzs-solution","text":"/* \u64cd\u4f5c\u6570\u7ec4 */ #include <iostream> using namespace std; const int MAXN = 100000; struct Node{ int l = 0, r = 0; long long lazy = 0, sum = 0; }; int n, q; long long t[MAXN + 5]; Node a[MAXN * 4 + 5]; inline void pushUp(int x){ a[x].sum = a[x * 2].sum + a[x * 2 + 1].sum; } inline void pushDown(int x){ if (a[x].lazy != 0){ a[x * 2].lazy += a[x].lazy; a[x * 2].sum += a[x].lazy * (a[x * 2].r - a[x * 2].l + 1); a[x * 2 + 1].lazy += a[x].lazy; a[x * 2 + 1].sum += a[x].lazy * (a[x * 2 + 1].r - a[x * 2 + 1].l + 1); a[x].lazy = 0; } } void buildTree(int x, int l, int r){ a[x].l = l; a[x].r = r; if (l == r){ a[x].sum = t[l]; return; } int mid = (l + r) / 2; buildTree(x * 2, l, mid); buildTree(x * 2 + 1, mid + 1, r); pushUp(x); } void update(int x, int l, int r, int c){ if (a[x].l >= l && a[x].r <= r){ a[x].sum += c * (a[x].r - a[x].l + 1); a[x].lazy += c; return; } pushDown(x); int mid = (a[x].l + a[x].r) / 2; if (l <= mid) update(x * 2, l, r, c); if (r > mid) update(x * 2 + 1, l, r, c); pushUp(x); } long long query(int x, int l, int r){ if (a[x].l >= l && a[x].r <= r) return a[x].sum; pushDown(x); int mid = (a[x].l + a[x].r) / 2; long long ret = 0; if (l <= mid) ret += query(x * 2, l, r); if (r > mid) ret += query(x * 2 + 1, l, r); return ret; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> q; for (int i = 1; i <= n; ++i) cin >> t[i]; buildTree(1, 1, n); while (q--){ char op; int x, y, z; cin >> op; if (op == 'Q'){ cin >> x >> y; cout << query(1, x, y) << '\\n'; } else{ cin >> x >> y >> z; update(1, x, y, z); } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4117/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; const int MAXN=100001; typedef long long ll; ll a[MAXN],ans[4*MAXN],tag[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p) { ans[p]=ans[ls(p)]+ans[rs(p)]; } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p); } inline void add_tag(int p,int l,int r,int k) { tag[p]+=k; ans[p]+=k*(r-l+1); } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p); } ll query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; push_down(p,l,r); int mid=(l+r)>>1; ll sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int m,n,x,y,k; char c; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;i++) scanf(\"%lld\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ c=' '; while (c!='C'&&c!='Q') c=getchar(); if (c=='C') { scanf(\"%d%d%d\",&x,&y,&k); update(x,y,1,n,1,k); } if (c=='Q') { scanf(\"%d%d\",&x,&y); printf(\"%lld\\n\",query(x,y,1,n,1)); } } return 0; }","title":"WashWang's solution"},{"location":"nr/4118/","text":"4118 travel \u8f6c\u5230\u9898\u76ee FineArtz's solution /* travel */ #include <iostream> #include <cmath> #include <cstring> using namespace std; long long FACT[21] = {0}; long long comb(long long n, long long k){ return FACT[n] / FACT[k] / FACT[n - k]; } int m; char s1[25], s2[25]; long long travel(char *s1, long long len1, char *s2, long long len2){ long long ret = 1, p1 = 1, p2 = 0; long long child = 0; while (p1 < len1){ for (int i = 0; i < len2; ++i){ if (s2[i] == s1[p1]){ p2 = i; break; } } ret *= travel(s1 + p1, p2 - p1 + 2, s2 + p1 - 1, p2 - p1 + 2); p1 = p2 + 2; ++child; } ret *= comb(m, child); return ret; } int main(){ FACT[0] = 1; for (int i = 1; i <= 20; ++i) FACT[i] = FACT[i - 1] * i; cin >> m >> s1 >> s2; long long len1 = strlen(s1), len2 = strlen(s2); cout << travel(s1, len1, s2, len2); return 0; }","title":"4118 travel"},{"location":"nr/4118/#4118-travel","text":"\u8f6c\u5230\u9898\u76ee","title":"4118 travel"},{"location":"nr/4118/#fineartzs-solution","text":"/* travel */ #include <iostream> #include <cmath> #include <cstring> using namespace std; long long FACT[21] = {0}; long long comb(long long n, long long k){ return FACT[n] / FACT[k] / FACT[n - k]; } int m; char s1[25], s2[25]; long long travel(char *s1, long long len1, char *s2, long long len2){ long long ret = 1, p1 = 1, p2 = 0; long long child = 0; while (p1 < len1){ for (int i = 0; i < len2; ++i){ if (s2[i] == s1[p1]){ p2 = i; break; } } ret *= travel(s1 + p1, p2 - p1 + 2, s2 + p1 - 1, p2 - p1 + 2); p1 = p2 + 2; ++child; } ret *= comb(m, child); return ret; } int main(){ FACT[0] = 1; for (int i = 1; i <= 20; ++i) FACT[i] = FACT[i - 1] * i; cin >> m >> s1 >> s2; long long len1 = strlen(s1), len2 = strlen(s2); cout << travel(s1, len1, s2, len2); return 0; }","title":"FineArtz's solution"},{"location":"nr/4119/","text":"4119 \u64a4\u9000 \u8f6c\u5230\u9898\u76ee FineArtz's solution /* \u64a4\u9000 */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 20000; int n, A, B, C; int head[MAXN + 5] = {0}, ed[MAXN + 5] = {0}, nxt[MAXN + 5] = {0}, len[MAXN + 5] = {0}; int cnt = 0; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nn[MAXN + 5] = {0}, l[MAXN + 5] = {0}; int m = 0; int dist[MAXN + 5] = {0}, depth[MAXN + 5] = {0}, fa[MAXN + 5][20] = {0}; inline void addEdge(int u, int v, int w){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; len[cnt] = w; } inline void addedge(int u, int v, int w){ ++m; nn[m] = h[u]; e[m] = v; h[u] = m; l[m] = w; } void calcDist(int x){ int q[MAXN + 5]; bool b[MAXN + 5]= {0}; int front = 0, rear = 0; q[rear++] = x; dist[x] = 0; depth[x] = 1; b[x] = true; while (front != rear){ int now = q[front]; ++front; for (int i = head[now]; i != 0; i = nxt[i]){ int next = ed[i]; if (!b[next]){ b[next] = true; addedge(now, next, len[i]); fa[next][0] = now; depth[next] = depth[now] + 1; dist[next] = dist[now] + len[i]; q[rear++] = next; } } } } inline int lca(int p, int q){ if (depth[p] > depth[q]){ int t = p; p = q; q = t; } int def = depth[q] - depth[p]; for (int i = 0; (1 << i) <= def; ++i){ if ((1 << i) & def) q = fa[q][i]; } if (p != q){ for (int i = (int)log2(n); i >= 0; --i){ if (fa[p][i] != fa[q][i]){ p = fa[p][i]; q = fa[q][i]; } } p = fa[p][0]; } return p; } inline int dis(int p, int q){ int x = lca(p, q); return dist[p] + dist[q] - 2 * dist[x]; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> A >> B >> C; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } calcDist(1); for (int j = 1; (1 << j) <= n; ++j){ for (int i = 1; i <= n; ++i) fa[i][j] = fa[fa[i][j - 1]][j - 1]; } int ans = 2147483647, ansi = 0; for (int i = 1; i <= n; ++i){ int d = dis(i, A) + dis(i, B) + dis(i, C); if (ans > d){ ans = d; ansi = i; } } cout << ansi << '\\n' << ans << '\\n'; return 0; }","title":"4119 \u64a4\u9000"},{"location":"nr/4119/#4119","text":"\u8f6c\u5230\u9898\u76ee","title":"4119 \u64a4\u9000"},{"location":"nr/4119/#fineartzs-solution","text":"/* \u64a4\u9000 */ #include <iostream> #include <cstring> #include <cmath> using namespace std; const int MAXN = 20000; int n, A, B, C; int head[MAXN + 5] = {0}, ed[MAXN + 5] = {0}, nxt[MAXN + 5] = {0}, len[MAXN + 5] = {0}; int cnt = 0; int h[MAXN + 5] = {0}, e[MAXN + 5] = {0}, nn[MAXN + 5] = {0}, l[MAXN + 5] = {0}; int m = 0; int dist[MAXN + 5] = {0}, depth[MAXN + 5] = {0}, fa[MAXN + 5][20] = {0}; inline void addEdge(int u, int v, int w){ ++cnt; nxt[cnt] = head[u]; ed[cnt] = v; head[u] = cnt; len[cnt] = w; } inline void addedge(int u, int v, int w){ ++m; nn[m] = h[u]; e[m] = v; h[u] = m; l[m] = w; } void calcDist(int x){ int q[MAXN + 5]; bool b[MAXN + 5]= {0}; int front = 0, rear = 0; q[rear++] = x; dist[x] = 0; depth[x] = 1; b[x] = true; while (front != rear){ int now = q[front]; ++front; for (int i = head[now]; i != 0; i = nxt[i]){ int next = ed[i]; if (!b[next]){ b[next] = true; addedge(now, next, len[i]); fa[next][0] = now; depth[next] = depth[now] + 1; dist[next] = dist[now] + len[i]; q[rear++] = next; } } } } inline int lca(int p, int q){ if (depth[p] > depth[q]){ int t = p; p = q; q = t; } int def = depth[q] - depth[p]; for (int i = 0; (1 << i) <= def; ++i){ if ((1 << i) & def) q = fa[q][i]; } if (p != q){ for (int i = (int)log2(n); i >= 0; --i){ if (fa[p][i] != fa[q][i]){ p = fa[p][i]; q = fa[q][i]; } } p = fa[p][0]; } return p; } inline int dis(int p, int q){ int x = lca(p, q); return dist[p] + dist[q] - 2 * dist[x]; } int main(){ ios::sync_with_stdio(false); cin.tie(0); cout.tie(0); cin >> n >> A >> B >> C; for (int i = 1; i < n; ++i){ int u, v, w; cin >> u >> v >> w; addEdge(u, v, w); addEdge(v, u, w); } calcDist(1); for (int j = 1; (1 << j) <= n; ++j){ for (int i = 1; i <= n; ++i) fa[i][j] = fa[fa[i][j - 1]][j - 1]; } int ans = 2147483647, ansi = 0; for (int i = 1; i <= n; ++i){ int d = dis(i, A) + dis(i, B) + dis(i, C); if (ans > d){ ans = d; ansi = i; } } cout << ansi << '\\n' << ans << '\\n'; return 0; }","title":"FineArtz's solution"},{"location":"nr/4123/","text":"4123 String \u8f6c\u5230\u9898\u76ee FineArtz's solution /* String */","title":"4123 String"},{"location":"nr/4123/#4123-string","text":"\u8f6c\u5230\u9898\u76ee","title":"4123 String"},{"location":"nr/4123/#fineartzs-solution","text":"/* String */","title":"FineArtz's solution"},{"location":"nr/4126/","text":"4126 Spice and Wolf II \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,n,m,dp[100001],k,ans; long long a[101],c[101]; void zeroone(int w) { for (int i=m;i>=w;--i) if (dp[i-w]) dp[i]=1; } void complete(int w) { for (int i=w;i<=m;++i) if (dp[i-w]) dp[i]=1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { ans=0; scanf(\"%d%d\",&n,&m); memset(dp,0,sizeof(dp)); dp[0]=1; for (int j=0;j<n;++j) scanf(\"%lld\",&a[j]); for (int j=0;j<n;++j) { scanf(\"%lld\",&c[j]); if (a[j]*c[j]<m) { k=1; while (k<c[j]) { zeroone(k*a[j]); c[j]-=k; k*=2; } zeroone(c[j]*a[j]); } else complete(a[j]); } for (int j=1;j<=m;++j) if (dp[j]) ++ans; printf(\"%d\\n\",ans); } return 0; }","title":"4126 Spice and Wolf II"},{"location":"nr/4126/#4126-spice-and-wolf-ii","text":"\u8f6c\u5230\u9898\u76ee","title":"4126 Spice and Wolf II"},{"location":"nr/4126/#washwangs-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,n,m,dp[100001],k,ans; long long a[101],c[101]; void zeroone(int w) { for (int i=m;i>=w;--i) if (dp[i-w]) dp[i]=1; } void complete(int w) { for (int i=w;i<=m;++i) if (dp[i-w]) dp[i]=1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { ans=0; scanf(\"%d%d\",&n,&m); memset(dp,0,sizeof(dp)); dp[0]=1; for (int j=0;j<n;++j) scanf(\"%lld\",&a[j]); for (int j=0;j<n;++j) { scanf(\"%lld\",&c[j]); if (a[j]*c[j]<m) { k=1; while (k<c[j]) { zeroone(k*a[j]); c[j]-=k; k*=2; } zeroone(c[j]*a[j]); } else complete(a[j]); } for (int j=1;j<=m;++j) if (dp[j]) ++ans; printf(\"%d\\n\",ans); } return 0; }","title":"WashWang's solution"},{"location":"nr/4130/","text":"4130 This is a NP-Hard Problem \u8f6c\u5230\u9898\u76ee FineArtz's solution /* This is a NP-Hard Problem */ #include <cstdio> #include <cstring> using namespace std; int n, m; int be[100005], head[100005], nxt[400005], edg[400005], cnt; inline void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; edg[cnt] = v; head[u] = cnt; } bool check(int st){ int q[100005] = {0}; int front = 0, rear = 0; be[st] = 1; q[rear++] = st; while (front != rear){ int now = q[front++]; for (int i = head[now]; i; i = nxt[i]){ if (be[edg[i]] == 0){ int v = edg[i]; be[v] = (be[now] == 1 ? -1 : 1); q[rear++] = v; } else if (be[edg[i]] != -be[now]) return false; } } return true; } int main(){ int t; scanf(\"%d\", &t); while (t--){ scanf(\"%d%d\", &n, &m); memset(be, 0, sizeof(be)); memset(head, 0, sizeof(head)); memset(nxt, 0, sizeof(nxt)); memset(edg, 0, sizeof(edg)); cnt = 0; for (int i = 1; i <= m; ++i){ int u, v; scanf(\"%d%d\", &u, &v); addEdge(u, v); addEdge(v, u); } bool flag = true; for (int i = 1; i <= n; ++i){ if (head[i] != 0 && be[i] == 0){ if (!check(i)){ flag = false; printf(\"-1\\n\"); break; } } } if (flag) printf(\"1\\n\"); } return 0; } WashWang's solution #include <cstdio> #include <cstring> using namespace std; int ne[400010],to[400010],last[400010],num,k[400010],tail,head,ans; int t,m,n,u,v; void add(int u,int v) { ne[++num]=last[u]; to[num]=v; last[u]=num; } int dfs(int x) { for (int i=last[x];i!=0;i=ne[i]) { if (!k[to[i]]) { k[to[i]]=-k[x]; if (!dfs(to[i])) return 0; } else if (k[to[i]]+k[x]!=0) return 0; } return 1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d%d\", &n, &m); num=0; memset(last, 0, sizeof(last)); memset(k, 0, sizeof(k)); for (int j = 0; j < m; ++j) { scanf(\"%d%d\", &u, &v); add(u,v); add(v,u); } ans=1; for (int j=1;j<=n;++j) if (k[j]==0){ k[j]=1; if (!dfs(j)) { ans=-1; break; } } printf(\"%d\\n\",ans); } return 0; }","title":"4130 This is a NP-Hard Problem"},{"location":"nr/4130/#4130-this-is-a-np-hard-problem","text":"\u8f6c\u5230\u9898\u76ee","title":"4130 This is a NP-Hard Problem"},{"location":"nr/4130/#fineartzs-solution","text":"/* This is a NP-Hard Problem */ #include <cstdio> #include <cstring> using namespace std; int n, m; int be[100005], head[100005], nxt[400005], edg[400005], cnt; inline void addEdge(int u, int v){ ++cnt; nxt[cnt] = head[u]; edg[cnt] = v; head[u] = cnt; } bool check(int st){ int q[100005] = {0}; int front = 0, rear = 0; be[st] = 1; q[rear++] = st; while (front != rear){ int now = q[front++]; for (int i = head[now]; i; i = nxt[i]){ if (be[edg[i]] == 0){ int v = edg[i]; be[v] = (be[now] == 1 ? -1 : 1); q[rear++] = v; } else if (be[edg[i]] != -be[now]) return false; } } return true; } int main(){ int t; scanf(\"%d\", &t); while (t--){ scanf(\"%d%d\", &n, &m); memset(be, 0, sizeof(be)); memset(head, 0, sizeof(head)); memset(nxt, 0, sizeof(nxt)); memset(edg, 0, sizeof(edg)); cnt = 0; for (int i = 1; i <= m; ++i){ int u, v; scanf(\"%d%d\", &u, &v); addEdge(u, v); addEdge(v, u); } bool flag = true; for (int i = 1; i <= n; ++i){ if (head[i] != 0 && be[i] == 0){ if (!check(i)){ flag = false; printf(\"-1\\n\"); break; } } } if (flag) printf(\"1\\n\"); } return 0; }","title":"FineArtz's solution"},{"location":"nr/4130/#washwangs-solution","text":"#include <cstdio> #include <cstring> using namespace std; int ne[400010],to[400010],last[400010],num,k[400010],tail,head,ans; int t,m,n,u,v; void add(int u,int v) { ne[++num]=last[u]; to[num]=v; last[u]=num; } int dfs(int x) { for (int i=last[x];i!=0;i=ne[i]) { if (!k[to[i]]) { k[to[i]]=-k[x]; if (!dfs(to[i])) return 0; } else if (k[to[i]]+k[x]!=0) return 0; } return 1; } int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i) { scanf(\"%d%d\", &n, &m); num=0; memset(last, 0, sizeof(last)); memset(k, 0, sizeof(k)); for (int j = 0; j < m; ++j) { scanf(\"%d%d\", &u, &v); add(u,v); add(v,u); } ans=1; for (int j=1;j<=n;++j) if (k[j]==0){ k[j]=1; if (!dfs(j)) { ans=-1; break; } } printf(\"%d\\n\",ans); } return 0; }","title":"WashWang's solution"},{"location":"nr/4131/","text":"4131 Welcome to the Aperture Science \u8f6c\u5230\u9898\u76ee FineArtz's solution /* Welcome to the Aperture Science */ #include <cstdio> #include <cstring> #include <cmath> using namespace std; int n, m, N, M; int a[500005], b[710][1400], c[710][1400]; inline int query(int x){ int p = x / N, q = x - p * N; int ret = 0; for (int i = p; i < M; ++i){ ret += c[i][q]; q = b[i][q]; } if (n % M != 0){ ret += c[M][q]; } return ret; } inline void update(int x, int y){ int p = x / N, q = x - p * N; a[x] = y; int st = p * N, ed = st + N; if (p != M){ for (int j = q; j >= 0; --j){ if (j + a[st + j] >= N){ b[p][j] = j + a[st + j] - N; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } else{ for (int j = q; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[p][j] = j + a[st + j] - n + st; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } } int main(){ scanf(\"%d\", &n); for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]); N = sqrt(n); M = n / N; for (int i = 0; i < M; ++i){ int st = i * N, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= N){ b[i][j] = j + a[st + j] - N; c[i][j] = 1; } else{ b[i][j] = b[i][j + a[st + j]]; c[i][j] = c[i][j + a[st + j]] + 1; } } } if (n % M != 0){ int st = N * M, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[M][j] = j + a[st + j] - n + st; c[M][j] = 1; } else{ b[M][j] = b[M][j + a[st + j]]; c[M][j] = c[M][j + a[st + j]] + 1; } } } scanf(\"%d\", &m); while (m--){ int op, u, v; scanf(\"%d\", &op); if (op == 1){ scanf(\"%d\", &u); printf(\"%d\\n\", query(u)); } else{ scanf(\"%d%d\", &u, &v); update(u, v); } } return 0; } WashWang's solution #include <cstdio> #include <cmath> using namespace std; int a,b,k[510000],jump[510000],to[510000],n,m,p,q,ans[100001],s,l[510000];//jump\u4ee3\u8868\u8df3\u51fa\u5757\u9700\u8981\u7684\u6b21\u6570 to\u4ee3\u8868\u8df3\u51fa\u5757\u4ee5\u540e\u4e0b\u4e00\u4e2a\u5757\u7684\u5750\u6807 inline void upgrade(int x) { if (k[x]+x>=l[x]+b||k[x]+x>=n) { jump[x] = 1; to[x]=k[x]+x; } else{ jump[x]=jump[k[x]+x]+1; to[x]=to[k[x]+x]; } } int main() { scanf(\"%d\",&n); b=int(sqrt(n));//\u5757\u7684\u5927\u5c0f for (int i=0;i<n;++i) { scanf(\"%d\", &k[i]); if (p==b) {p=0; q+=b;} l[i]=q; p++; } for (int i=n-1;i>=0;--i) upgrade(i); scanf(\"%d\",&m); for (int i=0;i<m;++i) { scanf(\"%d\",&a); if (a==1) { scanf(\"%d\",&p); for (int j=p;j<n;j=to[j]) ans[s]+=jump[j]; s++; } if (a==2) { scanf(\"%d%d\",&p,&q); k[p]=q; for (int j=p;j>=l[p];j--) upgrade(j); } } for (int i=0;i<s;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4131 Welcome to the Aperture Science"},{"location":"nr/4131/#4131-welcome-to-the-aperture-science","text":"\u8f6c\u5230\u9898\u76ee","title":"4131 Welcome to the Aperture Science"},{"location":"nr/4131/#fineartzs-solution","text":"/* Welcome to the Aperture Science */ #include <cstdio> #include <cstring> #include <cmath> using namespace std; int n, m, N, M; int a[500005], b[710][1400], c[710][1400]; inline int query(int x){ int p = x / N, q = x - p * N; int ret = 0; for (int i = p; i < M; ++i){ ret += c[i][q]; q = b[i][q]; } if (n % M != 0){ ret += c[M][q]; } return ret; } inline void update(int x, int y){ int p = x / N, q = x - p * N; a[x] = y; int st = p * N, ed = st + N; if (p != M){ for (int j = q; j >= 0; --j){ if (j + a[st + j] >= N){ b[p][j] = j + a[st + j] - N; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } else{ for (int j = q; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[p][j] = j + a[st + j] - n + st; c[p][j] = 1; } else{ b[p][j] = b[p][j + a[st + j]]; c[p][j] = c[p][j + a[st + j]] + 1; } } } } int main(){ scanf(\"%d\", &n); for (int i = 0; i < n; ++i) scanf(\"%d\", &a[i]); N = sqrt(n); M = n / N; for (int i = 0; i < M; ++i){ int st = i * N, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= N){ b[i][j] = j + a[st + j] - N; c[i][j] = 1; } else{ b[i][j] = b[i][j + a[st + j]]; c[i][j] = c[i][j + a[st + j]] + 1; } } } if (n % M != 0){ int st = N * M, ed = st + N; for (int j = N - 1; j >= 0; --j){ if (j + st >= n) continue; if (j + a[st + j] >= n - st){ b[M][j] = j + a[st + j] - n + st; c[M][j] = 1; } else{ b[M][j] = b[M][j + a[st + j]]; c[M][j] = c[M][j + a[st + j]] + 1; } } } scanf(\"%d\", &m); while (m--){ int op, u, v; scanf(\"%d\", &op); if (op == 1){ scanf(\"%d\", &u); printf(\"%d\\n\", query(u)); } else{ scanf(\"%d%d\", &u, &v); update(u, v); } } return 0; }","title":"FineArtz's solution"},{"location":"nr/4131/#washwangs-solution","text":"#include <cstdio> #include <cmath> using namespace std; int a,b,k[510000],jump[510000],to[510000],n,m,p,q,ans[100001],s,l[510000];//jump\u4ee3\u8868\u8df3\u51fa\u5757\u9700\u8981\u7684\u6b21\u6570 to\u4ee3\u8868\u8df3\u51fa\u5757\u4ee5\u540e\u4e0b\u4e00\u4e2a\u5757\u7684\u5750\u6807 inline void upgrade(int x) { if (k[x]+x>=l[x]+b||k[x]+x>=n) { jump[x] = 1; to[x]=k[x]+x; } else{ jump[x]=jump[k[x]+x]+1; to[x]=to[k[x]+x]; } } int main() { scanf(\"%d\",&n); b=int(sqrt(n));//\u5757\u7684\u5927\u5c0f for (int i=0;i<n;++i) { scanf(\"%d\", &k[i]); if (p==b) {p=0; q+=b;} l[i]=q; p++; } for (int i=n-1;i>=0;--i) upgrade(i); scanf(\"%d\",&m); for (int i=0;i<m;++i) { scanf(\"%d\",&a); if (a==1) { scanf(\"%d\",&p); for (int j=p;j<n;j=to[j]) ans[s]+=jump[j]; s++; } if (a==2) { scanf(\"%d%d\",&p,&q); k[p]=q; for (int j=p;j>=l[p];j--) upgrade(j); } } for (int i=0;i<s;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/4132/","text":"4132 LCP \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int tr[2000000],ans[200001],n,m,q,x,y,step,width,p,tmp;//tr\u4ee3\u8868\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684LCP char a[2][200001],ch; int main() { scanf(\"%d%d\",&n,&m); scanf(\"%s\",a[0]); scanf(\"%s\",a[1]); scanf(\"%d\",&q); n=min(n,m); for (m=1;m<n;m<<=1); for (int i=m;i<m+n;++i) if (a[0][i-m]==a[1][i-m]) tr[i]=1; width=m>>1; step=1; for (int i=m-1;i>=1;--i) { if (i<width){step<<=1;width>>=1;} if (tr[i<<1]==step) tr[i]=tr[i<<1]+tr[(i<<1)+1]; else tr[i]=tr[i<<1]; } for (int i=0;i<q;++i) { scanf(\"%d%d\",&x,&y); getchar(); scanf(\"%c\",&ch); a[x][y-1]=ch; if (y<=n){ if (tr[m+y-1]!=(a[0][y-1]==a[1][y-1])) { tr[m+y-1]=(a[0][y-1]==a[1][y-1]); step = 1; p = m + y - 1; while ((p >>= 1) > 0) { tmp=tr[p]; if (tr[p << 1] == step) tr[p] = tr[p << 1] + tr[(p << 1)|1]; else tr[p] = tr[p << 1]; if (tr[p]==tmp) break;//\u82e5\u503c\u672a\u66f4\u65b0\u5219\u4e0d\u518d\u4e0a\u6eaf step <<= 1; } } } ans[i]=tr[1]; } for (int i=0;i<q;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"4132 LCP"},{"location":"nr/4132/#4132-lcp","text":"\u8f6c\u5230\u9898\u76ee","title":"4132 LCP"},{"location":"nr/4132/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int tr[2000000],ans[200001],n,m,q,x,y,step,width,p,tmp;//tr\u4ee3\u8868\u8282\u70b9\u5bf9\u5e94\u533a\u95f4\u7684LCP char a[2][200001],ch; int main() { scanf(\"%d%d\",&n,&m); scanf(\"%s\",a[0]); scanf(\"%s\",a[1]); scanf(\"%d\",&q); n=min(n,m); for (m=1;m<n;m<<=1); for (int i=m;i<m+n;++i) if (a[0][i-m]==a[1][i-m]) tr[i]=1; width=m>>1; step=1; for (int i=m-1;i>=1;--i) { if (i<width){step<<=1;width>>=1;} if (tr[i<<1]==step) tr[i]=tr[i<<1]+tr[(i<<1)+1]; else tr[i]=tr[i<<1]; } for (int i=0;i<q;++i) { scanf(\"%d%d\",&x,&y); getchar(); scanf(\"%c\",&ch); a[x][y-1]=ch; if (y<=n){ if (tr[m+y-1]!=(a[0][y-1]==a[1][y-1])) { tr[m+y-1]=(a[0][y-1]==a[1][y-1]); step = 1; p = m + y - 1; while ((p >>= 1) > 0) { tmp=tr[p]; if (tr[p << 1] == step) tr[p] = tr[p << 1] + tr[(p << 1)|1]; else tr[p] = tr[p << 1]; if (tr[p]==tmp) break;//\u82e5\u503c\u672a\u66f4\u65b0\u5219\u4e0d\u518d\u4e0a\u6eaf step <<= 1; } } } ans[i]=tr[1]; } for (int i=0;i<q;++i) printf(\"%d\\n\",ans[i]); return 0; }","title":"WashWang's solution"},{"location":"nr/4138/","text":"4138 \u9009\u7ec4\u5458 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <iomanip> using namespace std; int sum,n,m,k[200],c[200],ex[20],num,x; double ans; int main() { cin>>n>>m; for (int i=0,j=1;i<15;i++,j<<=1) ex[i]=j; for (int i=0;i<m;++i){ cin>>num>>c[i]; for (int j=0;j<num;++j){ cin>>x; k[i]+=ex[x]; } } for (int i=0;i<(1<<n);++i){ sum=0; num=0; for (int j=0;j<m;++j) if ((i&k[j])==k[j]) sum+=c[j]; for (int j=i;j>0;j>>=1) if (j%2) num++; if (num!=0&&sum/double(num)>ans) ans=sum/double(num); } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"4138 \u9009\u7ec4\u5458"},{"location":"nr/4138/#4138","text":"\u8f6c\u5230\u9898\u76ee","title":"4138 \u9009\u7ec4\u5458"},{"location":"nr/4138/#washwangs-solution","text":"#include <iostream> #include <iomanip> using namespace std; int sum,n,m,k[200],c[200],ex[20],num,x; double ans; int main() { cin>>n>>m; for (int i=0,j=1;i<15;i++,j<<=1) ex[i]=j; for (int i=0;i<m;++i){ cin>>num>>c[i]; for (int j=0;j<num;++j){ cin>>x; k[i]+=ex[x]; } } for (int i=0;i<(1<<n);++i){ sum=0; num=0; for (int j=0;j<m;++j) if ((i&k[j])==k[j]) sum+=c[j]; for (int j=i;j>0;j>>=1) if (j%2) num++; if (num!=0&&sum/double(num)>ans) ans=sum/double(num); } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/4145/","text":"4145 \u62ef\u6551\u9521\u5b89 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; char t,cur,last; int n,frag; long long x,y; int main() { scanf(\"%d%lld%lld\",&n,&x,&y); getchar(); last='1'; for (int i=0;i<n;++i){ cur=getchar(); if (cur=='0'&&last=='1') frag++; last=cur; } if (frag==0) printf(\"%d\",0); else printf(\"%lld\",min((frag-1)*x+y,frag*y)); return 0; }","title":"4145 \u62ef\u6551\u9521\u5b89"},{"location":"nr/4145/#4145","text":"\u8f6c\u5230\u9898\u76ee","title":"4145 \u62ef\u6551\u9521\u5b89"},{"location":"nr/4145/#washwangs-solution","text":"#include <iostream> using namespace std; char t,cur,last; int n,frag; long long x,y; int main() { scanf(\"%d%lld%lld\",&n,&x,&y); getchar(); last='1'; for (int i=0;i<n;++i){ cur=getchar(); if (cur=='0'&&last=='1') frag++; last=cur; } if (frag==0) printf(\"%d\",0); else printf(\"%lld\",min((frag-1)*x+y,frag*y)); return 0; }","title":"WashWang's solution"},{"location":"nr/4147/","text":"4147 \u7ffb\u8f6c\u957f\u65b9\u5f62 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> using namespace std; int main() { int n; cin >> n; int w, h, last, max, min; cin >> w >> h; last = (w > h ? w : h); bool flag = true; for (int i = 1; i < n; ++i) { cin >> w >> h; max = (w > h ? w : h); min = (w < h ? w : h); if (max <= last) last = max; else if (min <= last) last = min; else { flag = false; break; } } if (flag) cout << \"YES\"; else cout << \"NO\"; return 0; }","title":"4147 \u7ffb\u8f6c\u957f\u65b9\u5f62"},{"location":"nr/4147/#4147","text":"\u8f6c\u5230\u9898\u76ee","title":"4147 \u7ffb\u8f6c\u957f\u65b9\u5f62"},{"location":"nr/4147/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; int w, h, last, max, min; cin >> w >> h; last = (w > h ? w : h); bool flag = true; for (int i = 1; i < n; ++i) { cin >> w >> h; max = (w > h ? w : h); min = (w < h ? w : h); if (max <= last) last = max; else if (min <= last) last = min; else { flag = false; break; } } if (flag) cout << \"YES\"; else cout << \"NO\"; return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4151/","text":"4151 \u51fa\u6808\u5e8f\u5217 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int t,st[1100000],top,n,now,a[1100000]; int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { cin>>n; now=0; top=0; for (int j=0;j<n;++j) cin>>a[j]; for (int j=1;j<=n;++j) { st[top++] = j; while (a[now]==st[top-1]&&now<n&&top>=0) { top--; now++; } } if (top!=0) cout<<\"No\"<<endl; else cout<<\"Yes\"<<endl; } return 0; }","title":"4151 \u51fa\u6808\u5e8f\u5217"},{"location":"nr/4151/#4151","text":"\u8f6c\u5230\u9898\u76ee","title":"4151 \u51fa\u6808\u5e8f\u5217"},{"location":"nr/4151/#washwangs-solution","text":"#include <iostream> using namespace std; int t,st[1100000],top,n,now,a[1100000]; int main() { ios::sync_with_stdio(false); cin>>t; for (int i=0;i<t;++i) { cin>>n; now=0; top=0; for (int j=0;j<n;++j) cin>>a[j]; for (int j=1;j<=n;++j) { st[top++] = j; while (a[now]==st[top-1]&&now<n&&top>=0) { top--; now++; } } if (top!=0) cout<<\"No\"<<endl; else cout<<\"Yes\"<<endl; } return 0; }","title":"WashWang's solution"},{"location":"nr/4152/","text":"4152 Cantor\u8868 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Attention! This class is not complete (It may make mistakes if you apply it in other problems). class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; char s[2000]; int main() { cin>>s; longint l,r(s),t(s),n(s),mid; r=(r-1)*2; t=(t-1)*2; while (!(l>r)){ mid=div(l+r); if (mid*(mid+1)>t) r=mid-1; else l=mid+1; } l=l-1; n=n-div(l*(l+1)); if (odd(l)) cout<<n<<\"/\"<<l+2-n; else cout<<l+2-n<<\"/\"<<n; return 0; }","title":"4152 Cantor\u8868"},{"location":"nr/4152/#4152-cantor","text":"\u8f6c\u5230\u9898\u76ee","title":"4152 Cantor\u8868"},{"location":"nr/4152/#washwangs-solution","text":"#include <iostream> #include <cstring> #include <iomanip> using namespace std; const int p=1000000000; //Attention! This class is not complete (It may make mistakes if you apply it in other problems). class longint{ long long num[3000]; int len; public: longint(){ memset(num,0,sizeof(num)); len=1; }; longint(const char *s){ memset(num,0,sizeof(num)); int l=(strlen(s)-1)/9+1,length=strlen(s); for (int i=0;i<l;++i){ for (int j=length-9*i-9;j<length-9*i;++j) if (j>=0) num[i]=num[i]*10+s[j]-48; } len=l; } longint(int x){ memset(num,0,sizeof(num)); len=0; while (x!=0) { num[len++]=x%p; x/=p; } } longint(const longint &a):len(a.len){ memset(num,0,sizeof(num)); for (int i=0;i<a.len;++i) num[i]=a.num[i]; } longint &operator=(const longint& a){ memset(num,0,sizeof(num)); len=a.len; for (int i=0;i<a.len;++i) num[i]=a.num[i]; return *this; } friend longint operator+(const longint& a,const longint& b){ long long c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<r.len;++i){ r.num[i]=a.num[i]+b.num[i]+c; c=r.num[i]/p; r.num[i]%=p; } if (c>0) r.num[r.len++]=c; return r; } friend longint operator-(const longint& a,const longint& b){ int c=0; longint r; r.len=max(a.len,b.len); for (int i=0;i<max(a.len,b.len);++i){ r.num[i]=a.num[i]-b.num[i]-c; c=0; if (r.num[i]<0){ r.num[i]+=p; c=1; } } while (r.len>1&&!r.num[r.len-1]) r.len--; return r; } friend longint operator*(const longint& a,const longint& b){ long long c=0,pos; int x=0; longint r; for (int i=0;i<b.len;++i){ x=i; c=0; longint tmp; for (int j=0;j<a.len;++j){ pos=a.num[j]*b.num[i]+c; c=pos/p; tmp.num[x]=pos%p; x++; } tmp.len=x; if (c>0) tmp.num[tmp.len++]=c; r=r+tmp; } return r; } friend longint div(const longint& a){ longint r; long long x=0; for (int i=a.len-1;i>=0;i--){ x=x*p+a.num[i]; r.num[i]=x/2; x%=2; } r.len=a.len; if (!r.num[r.len-1]) r.len--; return r; } friend bool operator>(const longint& a,const longint& b){ if (a.len>b.len) return true; if (a.len<b.len) return false; for (int i=a.len-1;i>=0;--i){ if (a.num[i]>b.num[i]) return true; if (a.num[i]<b.num[i]) return false; } return false; } friend ostream& operator<<(ostream& os,const longint &a){ os.fill('0'); os<<a.num[a.len-1]; for (int i=a.len-2;i>=0;--i) { os<<setw(9)<<a.num[i]; } return os; } friend bool odd(longint &a){ return a.num[0]%2!=0; } }; char s[2000]; int main() { cin>>s; longint l,r(s),t(s),n(s),mid; r=(r-1)*2; t=(t-1)*2; while (!(l>r)){ mid=div(l+r); if (mid*(mid+1)>t) r=mid-1; else l=mid+1; } l=l-1; n=n-div(l*(l+1)); if (odd(l)) cout<<n<<\"/\"<<l+2-n; else cout<<l+2-n<<\"/\"<<n; return 0; }","title":"WashWang's solution"},{"location":"nr/4153/","text":"4153 \u6361\u77f3\u5b50 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <algorithm> using namespace std; int l,r,m,n,k,a[200000],mid,ans; bool test(int x){ int now=a[0],len=1; if (k==1){ for (int i=1;i<n;++i) if (a[i]-now>=x) { now=a[i]; len++; if (len>=m) return true; } return false; } else{ int p[200000],q[200000]; p[0]=1; for (int i=1;i<n;++i) { if (a[i] - now >= x) { now = a[i]; len++; p[i] = len; } else p[i] = p[i - 1]; } if (p[n-1]>=m) return true; now=a[n-1]; q[n-1]=1; len=1; for (int i=n-2;i>=0;--i){ if (now-a[i]>=x) { now=a[i]; len++; q[i]=len; } else q[i]=q[i+1]; if (p[i]+q[i+1]>=m) return true; } if (q[0]>=m) return true; return false; } } int main() { cin>>n>>m>>k; for (int i=0;i<n;++i) cin>>a[i]; sort(a,a+n); l=0; r=2000000000; while (l<=r) { mid=(r-l)/2+l; if (test(mid)){ if (mid>ans) ans=mid; l=mid+1; } else r=mid-1; } cout<<ans; return 0; }","title":"4153 \u6361\u77f3\u5b50"},{"location":"nr/4153/#4153","text":"\u8f6c\u5230\u9898\u76ee","title":"4153 \u6361\u77f3\u5b50"},{"location":"nr/4153/#washwangs-solution","text":"#include <iostream> #include <algorithm> using namespace std; int l,r,m,n,k,a[200000],mid,ans; bool test(int x){ int now=a[0],len=1; if (k==1){ for (int i=1;i<n;++i) if (a[i]-now>=x) { now=a[i]; len++; if (len>=m) return true; } return false; } else{ int p[200000],q[200000]; p[0]=1; for (int i=1;i<n;++i) { if (a[i] - now >= x) { now = a[i]; len++; p[i] = len; } else p[i] = p[i - 1]; } if (p[n-1]>=m) return true; now=a[n-1]; q[n-1]=1; len=1; for (int i=n-2;i>=0;--i){ if (now-a[i]>=x) { now=a[i]; len++; q[i]=len; } else q[i]=q[i+1]; if (p[i]+q[i+1]>=m) return true; } if (q[0]>=m) return true; return false; } } int main() { cin>>n>>m>>k; for (int i=0;i<n;++i) cin>>a[i]; sort(a,a+n); l=0; r=2000000000; while (l<=r) { mid=(r-l)/2+l; if (test(mid)){ if (mid>ans) ans=mid; l=mid+1; } else r=mid-1; } cout<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/4156/","text":"4156 \u589e\u5f3a\u7248\u7530\u5fcc\u8d5b\u9a6c \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int p[3001],q[3001],dp[3001][3001],m,n,ptr,ans,win,ping; void qsort(int *s,int *t) { if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j) { while (i<j&&s[j]<=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]>=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } inline int cmp(int x,int y){ if (x>y) return 1; if (x<y) return -1; return 0; } int main() { ios::sync_with_stdio(false); cin>>m; for (int i=0;i<m;++i) cin>>p[i]; for (int i=0;i<m;++i) cin>>q[i]; qsort(p,p+m); qsort(q,q+m); for (int i=1;i<=m;++i){ for (int j=0;j<=i;++j) { dp[i][j]=-100000000; if (j>=1) dp[i][j]=max(dp[i-1][j-1]+cmp(p[j-1],q[i-1]),dp[i][j]); if (j<i) dp[i][j]=max(dp[i-1][j]+cmp(p[m-(i-j)],q[i-1]),dp[i][j]); } } ans=-100000000; for (int i=0;i<=m;++i) ans=max(dp[m][i],ans); cout<<ans*200; return 0; }","title":"4156 \u589e\u5f3a\u7248\u7530\u5fcc\u8d5b\u9a6c"},{"location":"nr/4156/#4156","text":"\u8f6c\u5230\u9898\u76ee","title":"4156 \u589e\u5f3a\u7248\u7530\u5fcc\u8d5b\u9a6c"},{"location":"nr/4156/#washwangs-solution","text":"#include <iostream> using namespace std; int p[3001],q[3001],dp[3001][3001],m,n,ptr,ans,win,ping; void qsort(int *s,int *t) { if (s+1>=t) return; int i=0,j=int(t-s)-1,x=s[0]; while (i<j) { while (i<j&&s[j]<=x) j--; if (i<j) s[i++]=s[j]; while (i<j&&s[i]>=x) i++; if (i<j) s[j--]=s[i]; } s[i]=x; qsort(s,s+i); qsort(s+i+1,t); } inline int cmp(int x,int y){ if (x>y) return 1; if (x<y) return -1; return 0; } int main() { ios::sync_with_stdio(false); cin>>m; for (int i=0;i<m;++i) cin>>p[i]; for (int i=0;i<m;++i) cin>>q[i]; qsort(p,p+m); qsort(q,q+m); for (int i=1;i<=m;++i){ for (int j=0;j<=i;++j) { dp[i][j]=-100000000; if (j>=1) dp[i][j]=max(dp[i-1][j-1]+cmp(p[j-1],q[i-1]),dp[i][j]); if (j<i) dp[i][j]=max(dp[i-1][j]+cmp(p[m-(i-j)],q[i-1]),dp[i][j]); } } ans=-100000000; for (int i=0;i<=m;++i) ans=max(dp[m][i],ans); cout<<ans*200; return 0; }","title":"WashWang's solution"},{"location":"nr/4158/","text":"4158 \u5931\u8d25\u548c \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; int T; int n, m; int arr[100005]; int x; int sum = 1; int cnt = 0; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low], tmp, lf = low, rh = high; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int C(int N, int M) { int ans = 1; for (int i = N, j = 1; j <= M; --i, ++j) ans = ans * i / j; return ans; } int main() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d\", &n, &m); arr[0] = 0; for (int i = 1; i <= n; ++i) { scanf(\"%d\", &x); arr[i] = (arr[i - 1] + x) % m; } quicksort(0, n); sum = 1; cnt = 0; for (int i = 1; i <= n; ++i) { if (arr[i] == arr[i - 1]) ++sum; else { cnt += C(sum, 2); sum = 1; } } cnt += C(sum, 2); printf(\"%d\\n\", cnt); } return 0; } WashWang's solution #include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,sum,m,n,x[5000],tmp; long long ans; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ ans=0; sum=0; scanf(\"%d%d\",&n,&m); memset(x,0,sizeof(x)); x[0]=1; for (int j=0;j<n;++j){ scanf(\"%d\",&tmp); sum+=tmp; sum%=m; ans+=x[sum]; x[sum]++; } printf(\"%lld\",ans); } return 0; }","title":"4158 \u5931\u8d25\u548c"},{"location":"nr/4158/#4158","text":"\u8f6c\u5230\u9898\u76ee","title":"4158 \u5931\u8d25\u548c"},{"location":"nr/4158/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int T; int n, m; int arr[100005]; int x; int sum = 1; int cnt = 0; void quicksort(int low, int high) { if (low >= high) return; int k = arr[low], tmp, lf = low, rh = high; while (lf < rh) { while (lf < rh && arr[rh] >= k) --rh; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } while (lf < rh && arr[lf] <= k) ++lf; if (lf < rh) { tmp = arr[lf]; arr[lf] = arr[rh]; arr[rh] = tmp; } } quicksort(low, lf - 1); quicksort(rh + 1, high); } int C(int N, int M) { int ans = 1; for (int i = N, j = 1; j <= M; --i, ++j) ans = ans * i / j; return ans; } int main() { scanf(\"%d\", &T); while (T--) { scanf(\"%d%d\", &n, &m); arr[0] = 0; for (int i = 1; i <= n; ++i) { scanf(\"%d\", &x); arr[i] = (arr[i - 1] + x) % m; } quicksort(0, n); sum = 1; cnt = 0; for (int i = 1; i <= n; ++i) { if (arr[i] == arr[i - 1]) ++sum; else { cnt += C(sum, 2); sum = 1; } } cnt += C(sum, 2); printf(\"%d\\n\", cnt); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4158/#washwangs-solution","text":"#include <iostream> #include <cstdio> #include <cstring> using namespace std; int t,sum,m,n,x[5000],tmp; long long ans; int main() { scanf(\"%d\",&t); for (int i=0;i<t;++i){ ans=0; sum=0; scanf(\"%d%d\",&n,&m); memset(x,0,sizeof(x)); x[0]=1; for (int j=0;j<n;++j){ scanf(\"%d\",&tmp); sum+=tmp; sum%=m; ans+=x[sum]; x[sum]++; } printf(\"%lld\",ans); } return 0; }","title":"WashWang's solution"},{"location":"nr/4163/","text":"4163 \u77ee\u4eba\u7684\u5b9d\u85cf \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstdio> using namespace std; int n,m,a[100001],l,r,mid,ans,cnt,cur; bool flag; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); l=0; r=1000000000; while (l<=r){ mid=(l+r)/2; cnt=0; cur=0; flag=true; for (int i=0;i<n;++i){ if (a[i]>mid){ flag=false; break; } if (cur+a[i]>mid){ cur=0; cnt++; } if (cnt==m){ flag=false; break; } cur+=a[i]; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } printf(\"%d\",ans); return 0; }","title":"4163 \u77ee\u4eba\u7684\u5b9d\u85cf"},{"location":"nr/4163/#4163","text":"\u8f6c\u5230\u9898\u76ee","title":"4163 \u77ee\u4eba\u7684\u5b9d\u85cf"},{"location":"nr/4163/#washwangs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int n,m,a[100001],l,r,mid,ans,cnt,cur; bool flag; int main() { scanf(\"%d%d\",&n,&m); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); l=0; r=1000000000; while (l<=r){ mid=(l+r)/2; cnt=0; cur=0; flag=true; for (int i=0;i<n;++i){ if (a[i]>mid){ flag=false; break; } if (cur+a[i]>mid){ cur=0; cnt++; } if (cnt==m){ flag=false; break; } cur+=a[i]; } if (flag){ ans=mid; r=mid-1; } else l=mid+1; } printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/4164/","text":"4164 \u5c0f\u6e90\u5403\u82f9\u679c \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <iomanip> using namespace std; int m,n; double dp[1001][1001],ans=0; int main() { cin>>n>>m; dp[0][n]=1; for (int i=1;i<=n;++i) for (int j=0;j<n;++j) { for (int k = max(j + 1, n - m + 1); k <= n; ++k) dp[i][j] += dp[i - 1][k] / k; if (j<=n-m) ans+=i*dp[i][j]; } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"4164 \u5c0f\u6e90\u5403\u82f9\u679c"},{"location":"nr/4164/#4164","text":"\u8f6c\u5230\u9898\u76ee","title":"4164 \u5c0f\u6e90\u5403\u82f9\u679c"},{"location":"nr/4164/#washwangs-solution","text":"#include <iostream> #include <iomanip> using namespace std; int m,n; double dp[1001][1001],ans=0; int main() { cin>>n>>m; dp[0][n]=1; for (int i=1;i<=n;++i) for (int j=0;j<n;++j) { for (int k = max(j + 1, n - m + 1); k <= n; ++k) dp[i][j] += dp[i - 1][k] / k; if (j<=n-m) ans+=i*dp[i][j]; } cout<<setiosflags(ios::fixed)<<setprecision(2)<<ans; return 0; }","title":"WashWang's solution"},{"location":"nr/4171/","text":"\u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; int n,heap[2000000],p[2000000],len,a[1000000],b[1000000],q[1000000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d \",pop()); return 0; }","title":"4171"},{"location":"nr/4171/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; int n,heap[2000000],p[2000000],len,a[1000000],b[1000000],q[1000000]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && heap[l] < heap[x]) smallest = l; if (r <= len && heap[r] < heap[smallest]) smallest = r; if (smallest != x) { swap(heap[smallest],heap[x]); swap(p[smallest],p[x]); x = smallest; } else break; } } int pop(){ int ret=heap[1]; q[p[1]]++; heap[1]=a[p[1]]+b[q[p[1]]]; minheapify(1); return ret; } void qsort(int l,int r){ if (l+1>=r) return; int i=l,j=r-1,key=b[l]; while (i<j){ while (i<j&&b[j]>=key) j--; if (i<j) b[i++]=b[j]; while (i<j&&b[i]<=key) i++; if (i<j) b[j--]=b[i]; } b[i]=key; qsort(l,i); qsort(i+1,r); } int main() { scanf(\"%d\",&n); for (int i=0;i<n;++i) scanf(\"%d\",&a[i]); for (int i=0;i<n;++i) scanf(\"%d\",&b[i]); qsort(0,n); len=n; for (int i=1;i<=n;++i) { heap[i]=a[i-1]+b[0]; p[i]=i-1; q[i]=0; } for (int i=n>>1;i>=1;--i) minheapify(i); for (int i=0;i<n;++i) printf(\"%d \",pop()); return 0; }","title":"WashWang's solution"},{"location":"nr/4172/","text":"4172 rose \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; const int MAXN=1000001; int a[MAXN],ans[4*MAXN],tag[4*MAXN],leftc[4*MAXN],rightc[4*MAXN],c[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p,int l,int r) { int mid=(l+r)>>1; ans[p]=ans[ls(p)]+ans[rs(p)]; leftc[p]=leftc[ls(p)]; rightc[p]=rightc[rs(p)]; if (mid-l+1==leftc[ls(p)]) leftc[p]+=leftc[rs(p)]; if (r-mid==rightc[rs(p)]) rightc[p]+=rightc[ls(p)]; c[p]=max(max(c[ls(p)],c[rs(p)]),rightc[ls(p)]+leftc[rs(p)]); } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; leftc[p]=a[l]; rightc[p]=a[l]; c[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p,l,r); } inline void add_tag(int p,int l,int r,int k) { tag[p]=k; if (k==1) ans[p]=leftc[p]=rightc[p]=c[p]=0; if (k==2) ans[p]=leftc[p]=rightc[p]=c[p]=r-l+1; } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p,l,r); } int query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1,sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int query2(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return c[p]; int mid=(l+r)>>1,leap=0,lmax=0,rmax=0; if (tag[p]!=0) push_down(p,l,r); if (mid>=nl) lmax=query2(nl,nr,l,mid,ls(p)); if (mid<nr) rmax=query2(nl,nr,mid+1,r,rs(p)); leap=min(mid-nl+1,rightc[ls(p)])+min(nr-mid,leftc[rs(p)]); return max(max(lmax,rmax),leap); } int m,n,x,k,l,r; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ scanf(\"%d%d%d\",&k,&l,&r); if (k==1){ scanf(\"%d\",&x); update(l,r,1,n,1,x+1); } if (k==2) printf(\"%d\\n\",query(l,r,1,n,1)); if (k==3) printf(\"%d\\n\",query2(l,r,1,n,1)); } return 0; }","title":"4172 rose"},{"location":"nr/4172/#4172-rose","text":"\u8f6c\u5230\u9898\u76ee","title":"4172 rose"},{"location":"nr/4172/#washwangs-solution","text":"#include <iostream> using namespace std; const int MAXN=1000001; int a[MAXN],ans[4*MAXN],tag[4*MAXN],leftc[4*MAXN],rightc[4*MAXN],c[4*MAXN]; inline int ls(int p) { return p<<1; } inline int rs(int p) { return p<<1|1; } inline void push_up(int p,int l,int r) { int mid=(l+r)>>1; ans[p]=ans[ls(p)]+ans[rs(p)]; leftc[p]=leftc[ls(p)]; rightc[p]=rightc[rs(p)]; if (mid-l+1==leftc[ls(p)]) leftc[p]+=leftc[rs(p)]; if (r-mid==rightc[rs(p)]) rightc[p]+=rightc[ls(p)]; c[p]=max(max(c[ls(p)],c[rs(p)]),rightc[ls(p)]+leftc[rs(p)]); } void build(int l,int r,int p) { if (l==r) { ans[p]=a[l]; leftc[p]=a[l]; rightc[p]=a[l]; c[p]=a[l]; return; } int mid=(l+r)>>1; build(l,mid,ls(p)); build(mid+1,r,rs(p)); push_up(p,l,r); } inline void add_tag(int p,int l,int r,int k) { tag[p]=k; if (k==1) ans[p]=leftc[p]=rightc[p]=c[p]=0; if (k==2) ans[p]=leftc[p]=rightc[p]=c[p]=r-l+1; } inline void push_down(int p,int l,int r) { int mid=(l+r)>>1; add_tag(ls(p),l,mid,tag[p]); add_tag(rs(p),mid+1,r,tag[p]); tag[p]=0; } void update(int nl,int nr,int l,int r,int p,int k) { if (nl<=l&&r<=nr) { add_tag(p,l,r,k); return; } if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1; if (nl<=mid) update(nl,nr,l,mid,ls(p),k); if (nr>mid) update(nl,nr,mid+1,r,rs(p),k); push_up(p,l,r); } int query(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return ans[p]; if (tag[p]!=0) push_down(p,l,r); int mid=(l+r)>>1,sum=0; if (nl<=mid) sum+=query(nl,nr,l,mid,ls(p)); if (nr>mid) sum+=query(nl,nr,mid+1,r,rs(p)); return sum; } int query2(int nl,int nr,int l,int r,int p) { if (nl<=l&&r<=nr) return c[p]; int mid=(l+r)>>1,leap=0,lmax=0,rmax=0; if (tag[p]!=0) push_down(p,l,r); if (mid>=nl) lmax=query2(nl,nr,l,mid,ls(p)); if (mid<nr) rmax=query2(nl,nr,mid+1,r,rs(p)); leap=min(mid-nl+1,rightc[ls(p)])+min(nr-mid,leftc[rs(p)]); return max(max(lmax,rmax),leap); } int m,n,x,k,l,r; int main() { scanf(\"%d%d\",&n,&m); for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]); build(1,n,1); for (int i=0;i<m;++i){ scanf(\"%d%d%d\",&k,&l,&r); if (k==1){ scanf(\"%d\",&x); update(l,r,1,n,1,x+1); } if (k==2) printf(\"%d\\n\",query(l,r,1,n,1)); if (k==3) printf(\"%d\\n\",query2(l,r,1,n,1)); } return 0; }","title":"WashWang's solution"},{"location":"nr/4173/","text":"4173 robot \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> using namespace std; int x,y,ans,n,head,rear=-1,c,s[5000000]; long long tol[4]; int parse(int c){ if (c=='U') return 0; if (c=='D') return 1; if (c=='L') return 2; return 3; } inline bool check(long long x){ return (x>=0)&&(x%2==0); } inline long long dist(){ return abs(x-(tol[3]-tol[2]))+abs(y-(tol[0]-tol[1])); } int main() { scanf(\"%d\",&n); ans=n+1; getchar(); for (int i=0;i<n;++i){ c=getchar(); s[i]=parse(c); tol[parse(c)]++; } scanf(\"%d%d\",&x,&y); for (int i=0;i<n;++i){ tol[s[++rear]]--; while (check((rear-head+1)-dist())&&head<=rear){ if (rear-head+1<ans) ans=rear-head+1; tol[s[head++]]++; } } if (ans==n+1) printf(\"-1\"); else printf(\"%d\",ans); return 0; }","title":"4173 robot"},{"location":"nr/4173/#4173-robot","text":"\u8f6c\u5230\u9898\u76ee","title":"4173 robot"},{"location":"nr/4173/#washwangs-solution","text":"#include <iostream> using namespace std; int x,y,ans,n,head,rear=-1,c,s[5000000]; long long tol[4]; int parse(int c){ if (c=='U') return 0; if (c=='D') return 1; if (c=='L') return 2; return 3; } inline bool check(long long x){ return (x>=0)&&(x%2==0); } inline long long dist(){ return abs(x-(tol[3]-tol[2]))+abs(y-(tol[0]-tol[1])); } int main() { scanf(\"%d\",&n); ans=n+1; getchar(); for (int i=0;i<n;++i){ c=getchar(); s[i]=parse(c); tol[parse(c)]++; } scanf(\"%d%d\",&x,&y); for (int i=0;i<n;++i){ tol[s[++rear]]--; while (check((rear-head+1)-dist())&&head<=rear){ if (rear-head+1<ans) ans=rear-head+1; tol[s[head++]]++; } } if (ans==n+1) printf(\"-1\"); else printf(\"%d\",ans); return 0; }","title":"WashWang's solution"},{"location":"nr/4176/","text":"4176 \u5931\u8d25\u94c1\u8def\u7f51 \u8f6c\u5230\u9898\u76ee WashWang's solution #include <iostream> #include <cstring> using namespace std; struct node{ int val,p; } h[1001],cur; int n,nxt,a,b,len,pos[1001],way[1001][1001],k[1001],ans[1001]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && h[l].val < h[x].val) smallest = l; if (r <= len && h[r].val < h[smallest].val) smallest = r; if (smallest != x) { swap(pos[h[smallest].p],pos[h[x].p]); swap(h[smallest],h[x]); x = smallest; } else break; } } node pop(){ node ret=h[1]; pos[ret.p]=0; h[1]=h[len--]; pos[h[1].p]=1; minheapify(1); return ret; } void insert(int val,int p){ int i=++len; pos[p]=len; h[len].val=val; h[len].p=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } void modify(int val,int p){ h[p].val=val; int i=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } int main() { scanf(\"%d%d%d\",&n,&a,&b); for (int i=1;i<=n;++i){ scanf(\"%d\",&k[i]); for (int j=0;j<k[i];++j) scanf(\"%d\",&way[i][j]); ans[i]=-1; } insert(0,a); while (len>0){ cur=pop(); ans[cur.p]=cur.val; if (k[cur.p]>0) { nxt=way[cur.p][0]; if (pos[nxt]) { if (cur.val < h[nxt].val) modify(cur.val, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val,nxt); for (int i=1;i<k[cur.p];++i) { nxt=way[cur.p][i]; if (pos[nxt]) { if (cur.val + 1 < h[nxt].val) modify(cur.val + 1, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val+1,nxt); } } } printf(\"%d\",ans[b]); return 0; }","title":"4176 \u5931\u8d25\u94c1\u8def\u7f51"},{"location":"nr/4176/#4176","text":"\u8f6c\u5230\u9898\u76ee","title":"4176 \u5931\u8d25\u94c1\u8def\u7f51"},{"location":"nr/4176/#washwangs-solution","text":"#include <iostream> #include <cstring> using namespace std; struct node{ int val,p; } h[1001],cur; int n,nxt,a,b,len,pos[1001],way[1001][1001],k[1001],ans[1001]; void minheapify(int x){ int smallest=x,l,r; while (true) { l=x<<1; r=l+1; if (l <= len && h[l].val < h[x].val) smallest = l; if (r <= len && h[r].val < h[smallest].val) smallest = r; if (smallest != x) { swap(pos[h[smallest].p],pos[h[x].p]); swap(h[smallest],h[x]); x = smallest; } else break; } } node pop(){ node ret=h[1]; pos[ret.p]=0; h[1]=h[len--]; pos[h[1].p]=1; minheapify(1); return ret; } void insert(int val,int p){ int i=++len; pos[p]=len; h[len].val=val; h[len].p=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } void modify(int val,int p){ h[p].val=val; int i=p; while (i>1 && h[i>>1].val>h[i].val) { swap(pos[h[i].p],pos[h[i>>1].p]); swap(h[i],h[i>>1]); i>>=1; } } int main() { scanf(\"%d%d%d\",&n,&a,&b); for (int i=1;i<=n;++i){ scanf(\"%d\",&k[i]); for (int j=0;j<k[i];++j) scanf(\"%d\",&way[i][j]); ans[i]=-1; } insert(0,a); while (len>0){ cur=pop(); ans[cur.p]=cur.val; if (k[cur.p]>0) { nxt=way[cur.p][0]; if (pos[nxt]) { if (cur.val < h[nxt].val) modify(cur.val, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val,nxt); for (int i=1;i<k[cur.p];++i) { nxt=way[cur.p][i]; if (pos[nxt]) { if (cur.val + 1 < h[nxt].val) modify(cur.val + 1, pos[nxt]); } else if (ans[nxt]==-1||cur.val+1<ans[nxt]) insert(cur.val+1,nxt); } } } printf(\"%d\",ans[b]); return 0; }","title":"WashWang's solution"},{"location":"nr/4183/","text":"4183 \u5168\u6392\u5217 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; int arr[1005]; void rves(int lf, int rh) { int tmp; while (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; ++lf; --rh; } return; } void permutation(int n, int k) { if (!k) return; int i = n - 2, j = n - 1; while (i >= 0 && arr[i] > arr[j]) { --i; --j; } if (i == -1) rves(0, n - 1); else { int l = n - 1; while (arr[i] > arr[l]) --l; int tmp; tmp = arr[l]; arr[l] = arr[i]; arr[i] = tmp; rves(j, n - 1); } permutation(n, --k); return; } int main() { int m; scanf(\"%d\", &m); while (m--) { int n, k; scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%d\", &arr[i]); permutation(n, k); for (int i = 0; i < n; ++i) printf(\"%d \", arr[i]); printf(\"\\n\"); } return 0; }","title":"4183 \u5168\u6392\u5217"},{"location":"nr/4183/#4183","text":"\u8f6c\u5230\u9898\u76ee","title":"4183 \u5168\u6392\u5217"},{"location":"nr/4183/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; int arr[1005]; void rves(int lf, int rh) { int tmp; while (lf < rh) { tmp = arr[rh]; arr[rh] = arr[lf]; arr[lf] = tmp; ++lf; --rh; } return; } void permutation(int n, int k) { if (!k) return; int i = n - 2, j = n - 1; while (i >= 0 && arr[i] > arr[j]) { --i; --j; } if (i == -1) rves(0, n - 1); else { int l = n - 1; while (arr[i] > arr[l]) --l; int tmp; tmp = arr[l]; arr[l] = arr[i]; arr[i] = tmp; rves(j, n - 1); } permutation(n, --k); return; } int main() { int m; scanf(\"%d\", &m); while (m--) { int n, k; scanf(\"%d%d\", &n, &k); for (int i = 0; i < n; ++i) scanf(\"%d\", &arr[i]); permutation(n, k); for (int i = 0; i < n; ++i) printf(\"%d \", arr[i]); printf(\"\\n\"); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4202/","text":"4202 \u690d\u6811\u8282 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; const int MINNUM = -2147483648; int dp[100005][3][2]; int n; int sum[4]; struct tree { int a, b, c; }arr[100005]; inline int Max(int n1, int n2) { return (n1 > n2 ? n1 : n2); } int Maxsum(int n1, int n2, int n3, int n4) { return Max(Max(n1, n2), Max(n3, n4)); } void Evaluate() { for (int i = 1; i < n; ++i) { dp[i][0][0] = arr[i].a + Max(dp[i - 1][1][1], dp[i - 1][2][1]); dp[i][1][0] = arr[i].b + dp[i - 1][2][1]; dp[i][1][1] = arr[i].b + dp[i - 1][0][0]; dp[i][2][1] = arr[i].c + Max(dp[i - 1][1][0], dp[i - 1][0][0]); } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d\", &arr[i].a, &arr[i].b, &arr[i].c); } dp[0][0][0] = arr[0].a; dp[0][1][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[0] = Max(dp[n - 1][1][1], dp[n - 1][2][1]); dp[0][1][0] = arr[0].b; dp[0][0][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[1] = dp[n - 1][2][1]; dp[0][1][1] = arr[0].b; dp[0][0][0] = dp[0][1][0] = dp[0][2][1] = MINNUM; Evaluate(); sum[2] = dp[n - 1][0][0]; dp[0][2][1] = arr[0].c; dp[0][1][0] = dp[0][1][0] = dp[0][1][1] = MINNUM; Evaluate(); sum[3] = Max(dp[n - 1][0][0], dp[n - 1][1][0]); printf(\"%d\\n\", Maxsum(sum[0], sum[1], sum[2], sum[3])); }","title":"4202 \u690d\u6811\u8282"},{"location":"nr/4202/#4202","text":"\u8f6c\u5230\u9898\u76ee","title":"4202 \u690d\u6811\u8282"},{"location":"nr/4202/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; const int MINNUM = -2147483648; int dp[100005][3][2]; int n; int sum[4]; struct tree { int a, b, c; }arr[100005]; inline int Max(int n1, int n2) { return (n1 > n2 ? n1 : n2); } int Maxsum(int n1, int n2, int n3, int n4) { return Max(Max(n1, n2), Max(n3, n4)); } void Evaluate() { for (int i = 1; i < n; ++i) { dp[i][0][0] = arr[i].a + Max(dp[i - 1][1][1], dp[i - 1][2][1]); dp[i][1][0] = arr[i].b + dp[i - 1][2][1]; dp[i][1][1] = arr[i].b + dp[i - 1][0][0]; dp[i][2][1] = arr[i].c + Max(dp[i - 1][1][0], dp[i - 1][0][0]); } } int main() { scanf(\"%d\", &n); for (int i = 0; i < n; ++i) { scanf(\"%d%d%d\", &arr[i].a, &arr[i].b, &arr[i].c); } dp[0][0][0] = arr[0].a; dp[0][1][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[0] = Max(dp[n - 1][1][1], dp[n - 1][2][1]); dp[0][1][0] = arr[0].b; dp[0][0][0] = dp[0][1][1] = dp[0][2][1] = MINNUM; Evaluate(); sum[1] = dp[n - 1][2][1]; dp[0][1][1] = arr[0].b; dp[0][0][0] = dp[0][1][0] = dp[0][2][1] = MINNUM; Evaluate(); sum[2] = dp[n - 1][0][0]; dp[0][2][1] = arr[0].c; dp[0][1][0] = dp[0][1][0] = dp[0][1][1] = MINNUM; Evaluate(); sum[3] = Max(dp[n - 1][0][0], dp[n - 1][1][0]); printf(\"%d\\n\", Maxsum(sum[0], sum[1], sum[2], sum[3])); }","title":"vvvvv1v's solution"},{"location":"nr/4203/","text":"4203 \u8ba1\u6570 \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstdio> using namespace std; const int P = 1000000007; const int MAXNUM = 100002; long long fac[MAXNUM]; long long quickpow(long long a, long long k, int p) { long long result = 1; long long tmp = a % p; while (k) { if (k & 1) result = result * tmp % p; tmp = tmp * tmp % p; k >>= 1; } return result; } long long C(long long n, long long m, int p) { if (m > n) return 0; return fac[n] * quickpow(fac[m], p - 2, p) % p * quickpow(fac[n - m], p - 2, p) % p; } long long Lucas(long long n, long long m, int p) { long long result = 1; while (n && m) { result = result * C(n % p, m % p, p) % p; n /= p; m /= p; } return result; } void init(int p) { fac[0] = 1; for (int i = 1; i <= MAXNUM; ++i) fac[i] = fac[i - 1] * i % p; } int main() { init(P); long long n, m; int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld%lld\", &n, &m); printf(\"%lld\\n\", C(n, m, P)); } return 0; }","title":"4203 \u8ba1\u6570"},{"location":"nr/4203/#4203","text":"\u8f6c\u5230\u9898\u76ee","title":"4203 \u8ba1\u6570"},{"location":"nr/4203/#vvvvv1vs-solution","text":"#include <iostream> #include <cstdio> using namespace std; const int P = 1000000007; const int MAXNUM = 100002; long long fac[MAXNUM]; long long quickpow(long long a, long long k, int p) { long long result = 1; long long tmp = a % p; while (k) { if (k & 1) result = result * tmp % p; tmp = tmp * tmp % p; k >>= 1; } return result; } long long C(long long n, long long m, int p) { if (m > n) return 0; return fac[n] * quickpow(fac[m], p - 2, p) % p * quickpow(fac[n - m], p - 2, p) % p; } long long Lucas(long long n, long long m, int p) { long long result = 1; while (n && m) { result = result * C(n % p, m % p, p) % p; n /= p; m /= p; } return result; } void init(int p) { fac[0] = 1; for (int i = 1; i <= MAXNUM; ++i) fac[i] = fac[i - 1] * i % p; } int main() { init(P); long long n, m; int t; scanf(\"%d\", &t); while (t--) { scanf(\"%lld%lld\", &n, &m); printf(\"%lld\\n\", C(n, m, P)); } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4204/","text":"4204 \u5c0f\u8fdc\u5403\u6c34\u679c \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> using namespace std; int main() { long int n; cin >> n; long int v, a, b; for (long int i = 0; i < n; ++i) { cin >> v >> a >> b; if (a <= int(b / 2.0)) { cout << v * a << endl; } else { cout << v / 2 * b + v % 2 * a << endl; } } return 0; }","title":"4204 \u5c0f\u8fdc\u5403\u6c34\u679c"},{"location":"nr/4204/#4204","text":"\u8f6c\u5230\u9898\u76ee","title":"4204 \u5c0f\u8fdc\u5403\u6c34\u679c"},{"location":"nr/4204/#vvvvv1vs-solution","text":"#include <iostream> using namespace std; int main() { long int n; cin >> n; long int v, a, b; for (long int i = 0; i < n; ++i) { cin >> v >> a >> b; if (a <= int(b / 2.0)) { cout << v * a << endl; } else { cout << v / 2 * b + v % 2 * a << endl; } } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4205/","text":"4205 Turing Award \u8f6c\u5230\u9898\u76ee vvvvv1v's solution #include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; class sLinkList { public: sLinkList() { head = new node; currentLength = 0; } void clear() { node *p = head->next, *q; head->next = NULL; while (p != NULL) { q = p->next; delete p; p = q; } currentLength = 0; } void ins() { int year; string name; cin >> year; getline(cin, name); name.erase(name.begin()); //cout << year << name << endl; node *pos = head, *tmp = new node(year, name, NULL); while (pos->next != NULL && compare(tmp, pos->next) > 0) pos = pos->next; pos->next = new node(year, name, pos->next); ++currentLength; delete tmp; } void del() { int i; cin >> i; --i; node *pos, *delp; pos = move(i - 1); delp = pos->next; pos->next = delp->next; delete delp; --currentLength; } void list() const { int i; cin >> i; --i; node *p = move(i); cout << p->year << ' ' << p->name << endl; } ~sLinkList() { clear(); delete head; } private: struct node { int year; string name; node *next; node(const int &y, const string &m, node *n = NULL) : year(y), name(m), next(n) {} node() : next(NULL) {} ~node() {} }; node *head; int currentLength; node *move(int i) const { node *p = head; while (i-- >= 0) p = p->next; return p; } int compare(node *a, node *b) { if (a->year < b->year) return -1; else if (a->year > b->year) return 1; else { if (strcmp(a->name.c_str(), b->name.c_str()) < 0) return -1; else if (strcmp(a->name.c_str(), b->name.c_str()) > 0) return 1; else return 0; } } }; int main() { int N; cin >> N; char order[10]; sLinkList winner; for (int i = 0; i < N; ++i) { cin >> order; switch (order[0]) { case 'i': winner.ins(); break; case 'd': winner.del(); break; case 'l': winner.list(); break; } } return 0; }","title":"4205 Turing Award"},{"location":"nr/4205/#4205-turing-award","text":"\u8f6c\u5230\u9898\u76ee","title":"4205 Turing Award"},{"location":"nr/4205/#vvvvv1vs-solution","text":"#include <iostream> #include <cstring> using namespace std; char text[105][2005]; int lines = 1; class sLinkList { public: sLinkList() { head = new node; currentLength = 0; } void clear() { node *p = head->next, *q; head->next = NULL; while (p != NULL) { q = p->next; delete p; p = q; } currentLength = 0; } void ins() { int year; string name; cin >> year; getline(cin, name); name.erase(name.begin()); //cout << year << name << endl; node *pos = head, *tmp = new node(year, name, NULL); while (pos->next != NULL && compare(tmp, pos->next) > 0) pos = pos->next; pos->next = new node(year, name, pos->next); ++currentLength; delete tmp; } void del() { int i; cin >> i; --i; node *pos, *delp; pos = move(i - 1); delp = pos->next; pos->next = delp->next; delete delp; --currentLength; } void list() const { int i; cin >> i; --i; node *p = move(i); cout << p->year << ' ' << p->name << endl; } ~sLinkList() { clear(); delete head; } private: struct node { int year; string name; node *next; node(const int &y, const string &m, node *n = NULL) : year(y), name(m), next(n) {} node() : next(NULL) {} ~node() {} }; node *head; int currentLength; node *move(int i) const { node *p = head; while (i-- >= 0) p = p->next; return p; } int compare(node *a, node *b) { if (a->year < b->year) return -1; else if (a->year > b->year) return 1; else { if (strcmp(a->name.c_str(), b->name.c_str()) < 0) return -1; else if (strcmp(a->name.c_str(), b->name.c_str()) > 0) return 1; else return 0; } } }; int main() { int N; cin >> N; char order[10]; sLinkList winner; for (int i = 0; i < N; ++i) { cin >> order; switch (order[0]) { case 'i': winner.ins(); break; case 'd': winner.del(); break; case 'l': winner.list(); break; } } return 0; }","title":"vvvvv1v's solution"},{"location":"nr/4268/","text":"4268 \u52a9\u6559\u5403\u706b\u9505 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int next(bool table[], int total, int start, int step); int main() { int N; int M; int start = 0; cin >> N >> M; bool *table = new bool[N]; for (int n = 0; n < N; n++) table[n] = true; start = 0; for (int i = 1; i <= N; i++) { start = next(table, N, start, M); table[start] = false; } cout << start + 1; return 0; } int next(bool table[], int total, int start, int step) { while (step != 0) { if (table[start]) step--; if (step == 0) return start; ++start; if (start == total) start = 0; } }","title":"4268 \u52a9\u6559\u5403\u706b\u9505"},{"location":"nr/4268/#4268","text":"\u8f6c\u5230\u9898\u76ee","title":"4268 \u52a9\u6559\u5403\u706b\u9505"},{"location":"nr/4268/#victrids-solution","text":"#include <iostream> using namespace std; int next(bool table[], int total, int start, int step); int main() { int N; int M; int start = 0; cin >> N >> M; bool *table = new bool[N]; for (int n = 0; n < N; n++) table[n] = true; start = 0; for (int i = 1; i <= N; i++) { start = next(table, N, start, M); table[start] = false; } cout << start + 1; return 0; } int next(bool table[], int total, int start, int step) { while (step != 0) { if (table[start]) step--; if (step == 0) return start; ++start; if (start == total) start = 0; } }","title":"VictriD's solution"},{"location":"nr/4269/","text":"4269 \u52a9\u6559\u7684\u5bfb\u5b9d\u4e4b\u65c5 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> #include <cmath> using namespace std; int Invert(int); int main(){ int n; cin>>n; //get step. int step = 0; int n_op=n; while(n_op!=Invert(n_op)){ n_op+=Invert(n_op); step++; } //print step. bool INI_FLAG=false; cout<<step<<endl; cout << n; while(n!=Invert(n)){ cout << \"--->\"; n+=Invert(n); cout << n; } return 0; } int Invert(int n){ int a=0; while(n>0){ a=a*10+n%10; n/=10; } return a; }","title":"4269 \u52a9\u6559\u7684\u5bfb\u5b9d\u4e4b\u65c5"},{"location":"nr/4269/#4269","text":"\u8f6c\u5230\u9898\u76ee","title":"4269 \u52a9\u6559\u7684\u5bfb\u5b9d\u4e4b\u65c5"},{"location":"nr/4269/#victrids-solution","text":"#include <iostream> #include <cmath> using namespace std; int Invert(int); int main(){ int n; cin>>n; //get step. int step = 0; int n_op=n; while(n_op!=Invert(n_op)){ n_op+=Invert(n_op); step++; } //print step. bool INI_FLAG=false; cout<<step<<endl; cout << n; while(n!=Invert(n)){ cout << \"--->\"; n+=Invert(n); cout << n; } return 0; } int Invert(int n){ int a=0; while(n>0){ a=a*10+n%10; n/=10; } return a; }","title":"VictriD's solution"},{"location":"nr/4272/","text":"4272 \u60ca\u5947\u6570 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; bool isMarvel(int number) { while (number % 2 == 0) number /= 2; while (number % 3 == 0) number /= 3; while (number % 5 == 0) number /= 5; while (number % 7 == 0) number /= 7; return number == 1; } int main() { int Minimum, Maximum; cin >> Minimum >> Maximum; // error leads to quit if (Minimum < 1 || Minimum > 99999 || Minimum > Maximum) { cout << \"error\"; return 0; } // go through limits bool FOUND_FLAG = false; for (int i = Minimum; i <= Maximum; i++) { if (isMarvel(i)) { if (FOUND_FLAG) cout << endl; FOUND_FLAG = true; cout << i; } } if (!FOUND_FLAG) cout << \"no\"; return 0; }","title":"4272 \u60ca\u5947\u6570"},{"location":"nr/4272/#4272","text":"\u8f6c\u5230\u9898\u76ee","title":"4272 \u60ca\u5947\u6570"},{"location":"nr/4272/#victrids-solution","text":"#include <iostream> using namespace std; bool isMarvel(int number) { while (number % 2 == 0) number /= 2; while (number % 3 == 0) number /= 3; while (number % 5 == 0) number /= 5; while (number % 7 == 0) number /= 7; return number == 1; } int main() { int Minimum, Maximum; cin >> Minimum >> Maximum; // error leads to quit if (Minimum < 1 || Minimum > 99999 || Minimum > Maximum) { cout << \"error\"; return 0; } // go through limits bool FOUND_FLAG = false; for (int i = Minimum; i <= Maximum; i++) { if (isMarvel(i)) { if (FOUND_FLAG) cout << endl; FOUND_FLAG = true; cout << i; } } if (!FOUND_FLAG) cout << \"no\"; return 0; }","title":"VictriD's solution"},{"location":"nr/4273/","text":"4273 \u9752\u86d9\u8df3\u8377\u53f6 \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int main() { int n; cin >> n; if (n < 1 || n > 90) { cout << \"error\"; return 0; } long long step[] = {1, 1}; for (int i = 2; i <= n; ++i) step[i % 2] += step[(i + 1) % 2]; cout << step[n % 2]; return 0; }","title":"4273 \u9752\u86d9\u8df3\u8377\u53f6"},{"location":"nr/4273/#4273","text":"\u8f6c\u5230\u9898\u76ee","title":"4273 \u9752\u86d9\u8df3\u8377\u53f6"},{"location":"nr/4273/#victrids-solution","text":"#include <iostream> using namespace std; int main() { int n; cin >> n; if (n < 1 || n > 90) { cout << \"error\"; return 0; } long long step[] = {1, 1}; for (int i = 2; i <= n; ++i) step[i % 2] += step[(i + 1) % 2]; cout << step[n % 2]; return 0; }","title":"VictriD's solution"},{"location":"nr/4282/","text":"4282 \u9006\u5e8f\u6253\u5370 \u8f6c\u5230\u9898\u76ee VictriD's solution //not so beautiful #include <iostream> #include <cstring> using namespace std; void Printinvert(string &input,int printcount){ if(printcount+1!=input.length()) Printinvert(input,printcount+1); cout << input[printcount]; } int main(){ string n; string a; getline(cin,n); getline(cin,a); Printinvert(a,0); return 0; }","title":"4282 \u9006\u5e8f\u6253\u5370"},{"location":"nr/4282/#4282","text":"\u8f6c\u5230\u9898\u76ee","title":"4282 \u9006\u5e8f\u6253\u5370"},{"location":"nr/4282/#victrids-solution","text":"//not so beautiful #include <iostream> #include <cstring> using namespace std; void Printinvert(string &input,int printcount){ if(printcount+1!=input.length()) Printinvert(input,printcount+1); cout << input[printcount]; } int main(){ string n; string a; getline(cin,n); getline(cin,a); Printinvert(a,0); return 0; }","title":"VictriD's solution"},{"location":"nr/4300/","text":"4300 \u4e2d\u95f4\u7684\u5976\u725b \u8f6c\u5230\u9898\u76ee VictriD's solution #include <iostream> using namespace std; int *MergeSort(int *list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int *tmplist = new int[listSize]; int *llst = MergeSort(list, listSize / 2); int *rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n; cin >> n; int *cnlist = new int[n]; for (int i = 0; i < n; i++) cin >> cnlist[i]; MergeSort(cnlist, n); cout << cnlist[n / 2]; return 0; }","title":"4300 \u4e2d\u95f4\u7684\u5976\u725b"},{"location":"nr/4300/#4300","text":"\u8f6c\u5230\u9898\u76ee","title":"4300 \u4e2d\u95f4\u7684\u5976\u725b"},{"location":"nr/4300/#victrids-solution","text":"#include <iostream> using namespace std; int *MergeSort(int *list, int listSize) { if (listSize == 1) return list; if (listSize == 2) { if (list[0] > list[1]) { int temp = list[0]; list[0] = list[1]; list[1] = temp; return list; } return list; } int *tmplist = new int[listSize]; int *llst = MergeSort(list, listSize / 2); int *rlst = MergeSort(list + listSize / 2, listSize - listSize / 2); int lct = 0, rct = 0; while (lct + rct != listSize) { if ((llst[lct] <= rlst[rct] && lct < listSize / 2) || rct >= listSize - listSize / 2) { tmplist[lct + rct] = llst[lct]; lct++; } else { tmplist[lct + rct] = rlst[rct]; rct++; } } for (int i = 0; i < listSize; i++) { list[i] = tmplist[i]; } return list; } int main() { int n; cin >> n; int *cnlist = new int[n]; for (int i = 0; i < n; i++) cin >> cnlist[i]; MergeSort(cnlist, n); cout << cnlist[n / 2]; return 0; }","title":"VictriD's solution"}]}